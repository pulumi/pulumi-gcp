// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.saasruntime;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.saasruntime.inputs.SaaSLocationArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SaaSArgs extends com.pulumi.resources.ResourceArgs {

    public static final SaaSArgs Empty = new SaaSArgs();

    /**
     * Annotations is an unstructured key-value map stored with a resource that
     * may be set by external tools to store and retrieve arbitrary metadata.
     * They are not queryable and should be preserved when modifying objects.
     * More info: https://kubernetes.io/docs/user-guide/annotations
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effective_annotations` for all of the annotations present on the resource.
     * 
     */
    @Import(name="annotations")
    private @Nullable Output<Map<String,String>> annotations;

    /**
     * @return Annotations is an unstructured key-value map stored with a resource that
     * may be set by external tools to store and retrieve arbitrary metadata.
     * They are not queryable and should be preserved when modifying objects.
     * More info: https://kubernetes.io/docs/user-guide/annotations
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effective_annotations` for all of the annotations present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> annotations() {
        return Optional.ofNullable(this.annotations);
    }

    /**
     * The labels on the resource, which can be used for categorization.
     * similar to Kubernetes resource labels.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return The labels on the resource, which can be used for categorization.
     * similar to Kubernetes resource labels.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * List of locations that the service is available in. Rollout refers to the
     * list to generate a rollout plan.
     * Structure is documented below.
     * 
     */
    @Import(name="locations")
    private @Nullable Output<List<SaaSLocationArgs>> locations;

    /**
     * @return List of locations that the service is available in. Rollout refers to the
     * list to generate a rollout plan.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<SaaSLocationArgs>>> locations() {
        return Optional.ofNullable(this.locations);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The ID value for the new saas.
     * 
     */
    @Import(name="saasId", required=true)
    private Output<String> saasId;

    /**
     * @return The ID value for the new saas.
     * 
     */
    public Output<String> saasId() {
        return this.saasId;
    }

    private SaaSArgs() {}

    private SaaSArgs(SaaSArgs $) {
        this.annotations = $.annotations;
        this.labels = $.labels;
        this.location = $.location;
        this.locations = $.locations;
        this.project = $.project;
        this.saasId = $.saasId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SaaSArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SaaSArgs $;

        public Builder() {
            $ = new SaaSArgs();
        }

        public Builder(SaaSArgs defaults) {
            $ = new SaaSArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param annotations Annotations is an unstructured key-value map stored with a resource that
         * may be set by external tools to store and retrieve arbitrary metadata.
         * They are not queryable and should be preserved when modifying objects.
         * More info: https://kubernetes.io/docs/user-guide/annotations
         * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
         * Please refer to the field `effective_annotations` for all of the annotations present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder annotations(@Nullable Output<Map<String,String>> annotations) {
            $.annotations = annotations;
            return this;
        }

        /**
         * @param annotations Annotations is an unstructured key-value map stored with a resource that
         * may be set by external tools to store and retrieve arbitrary metadata.
         * They are not queryable and should be preserved when modifying objects.
         * More info: https://kubernetes.io/docs/user-guide/annotations
         * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
         * Please refer to the field `effective_annotations` for all of the annotations present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder annotations(Map<String,String> annotations) {
            return annotations(Output.of(annotations));
        }

        /**
         * @param labels The labels on the resource, which can be used for categorization.
         * similar to Kubernetes resource labels.
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels The labels on the resource, which can be used for categorization.
         * similar to Kubernetes resource labels.
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param location Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param locations List of locations that the service is available in. Rollout refers to the
         * list to generate a rollout plan.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder locations(@Nullable Output<List<SaaSLocationArgs>> locations) {
            $.locations = locations;
            return this;
        }

        /**
         * @param locations List of locations that the service is available in. Rollout refers to the
         * list to generate a rollout plan.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder locations(List<SaaSLocationArgs> locations) {
            return locations(Output.of(locations));
        }

        /**
         * @param locations List of locations that the service is available in. Rollout refers to the
         * list to generate a rollout plan.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder locations(SaaSLocationArgs... locations) {
            return locations(List.of(locations));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param saasId The ID value for the new saas.
         * 
         * @return builder
         * 
         */
        public Builder saasId(Output<String> saasId) {
            $.saasId = saasId;
            return this;
        }

        /**
         * @param saasId The ID value for the new saas.
         * 
         * @return builder
         * 
         */
        public Builder saasId(String saasId) {
            return saasId(Output.of(saasId));
        }

        public SaaSArgs build() {
            if ($.location == null) {
                throw new MissingRequiredPropertyException("SaaSArgs", "location");
            }
            if ($.saasId == null) {
                throw new MissingRequiredPropertyException("SaaSArgs", "saasId");
            }
            return $;
        }
    }

}
