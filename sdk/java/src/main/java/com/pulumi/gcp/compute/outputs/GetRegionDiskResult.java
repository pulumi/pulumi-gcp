// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.compute.outputs.GetRegionDiskAsyncPrimaryDisk;
import com.pulumi.gcp.compute.outputs.GetRegionDiskDiskEncryptionKey;
import com.pulumi.gcp.compute.outputs.GetRegionDiskGuestOsFeature;
import com.pulumi.gcp.compute.outputs.GetRegionDiskSourceSnapshotEncryptionKey;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetRegionDiskResult {
    private List<GetRegionDiskAsyncPrimaryDisk> asyncPrimaryDisks;
    private String creationTimestamp;
    private String description;
    private List<GetRegionDiskDiskEncryptionKey> diskEncryptionKeys;
    private Map<String,String> effectiveLabels;
    private List<GetRegionDiskGuestOsFeature> guestOsFeatures;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String interface_;
    private String labelFingerprint;
    private Map<String,String> labels;
    private String lastAttachTimestamp;
    private String lastDetachTimestamp;
    private List<String> licenses;
    private String name;
    private Integer physicalBlockSizeBytes;
    private @Nullable String project;
    private Map<String,String> pulumiLabels;
    private @Nullable String region;
    private List<String> replicaZones;
    private String selfLink;
    private Integer size;
    private String snapshot;
    private String sourceDisk;
    private String sourceDiskId;
    private List<GetRegionDiskSourceSnapshotEncryptionKey> sourceSnapshotEncryptionKeys;
    private String sourceSnapshotId;
    private String type;
    private List<String> users;

    private GetRegionDiskResult() {}
    public List<GetRegionDiskAsyncPrimaryDisk> asyncPrimaryDisks() {
        return this.asyncPrimaryDisks;
    }
    public String creationTimestamp() {
        return this.creationTimestamp;
    }
    public String description() {
        return this.description;
    }
    public List<GetRegionDiskDiskEncryptionKey> diskEncryptionKeys() {
        return this.diskEncryptionKeys;
    }
    public Map<String,String> effectiveLabels() {
        return this.effectiveLabels;
    }
    public List<GetRegionDiskGuestOsFeature> guestOsFeatures() {
        return this.guestOsFeatures;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String interface_() {
        return this.interface_;
    }
    public String labelFingerprint() {
        return this.labelFingerprint;
    }
    public Map<String,String> labels() {
        return this.labels;
    }
    public String lastAttachTimestamp() {
        return this.lastAttachTimestamp;
    }
    public String lastDetachTimestamp() {
        return this.lastDetachTimestamp;
    }
    public List<String> licenses() {
        return this.licenses;
    }
    public String name() {
        return this.name;
    }
    public Integer physicalBlockSizeBytes() {
        return this.physicalBlockSizeBytes;
    }
    public Optional<String> project() {
        return Optional.ofNullable(this.project);
    }
    public Map<String,String> pulumiLabels() {
        return this.pulumiLabels;
    }
    public Optional<String> region() {
        return Optional.ofNullable(this.region);
    }
    public List<String> replicaZones() {
        return this.replicaZones;
    }
    public String selfLink() {
        return this.selfLink;
    }
    public Integer size() {
        return this.size;
    }
    public String snapshot() {
        return this.snapshot;
    }
    public String sourceDisk() {
        return this.sourceDisk;
    }
    public String sourceDiskId() {
        return this.sourceDiskId;
    }
    public List<GetRegionDiskSourceSnapshotEncryptionKey> sourceSnapshotEncryptionKeys() {
        return this.sourceSnapshotEncryptionKeys;
    }
    public String sourceSnapshotId() {
        return this.sourceSnapshotId;
    }
    public String type() {
        return this.type;
    }
    public List<String> users() {
        return this.users;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRegionDiskResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetRegionDiskAsyncPrimaryDisk> asyncPrimaryDisks;
        private String creationTimestamp;
        private String description;
        private List<GetRegionDiskDiskEncryptionKey> diskEncryptionKeys;
        private Map<String,String> effectiveLabels;
        private List<GetRegionDiskGuestOsFeature> guestOsFeatures;
        private String id;
        private String interface_;
        private String labelFingerprint;
        private Map<String,String> labels;
        private String lastAttachTimestamp;
        private String lastDetachTimestamp;
        private List<String> licenses;
        private String name;
        private Integer physicalBlockSizeBytes;
        private @Nullable String project;
        private Map<String,String> pulumiLabels;
        private @Nullable String region;
        private List<String> replicaZones;
        private String selfLink;
        private Integer size;
        private String snapshot;
        private String sourceDisk;
        private String sourceDiskId;
        private List<GetRegionDiskSourceSnapshotEncryptionKey> sourceSnapshotEncryptionKeys;
        private String sourceSnapshotId;
        private String type;
        private List<String> users;
        public Builder() {}
        public Builder(GetRegionDiskResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.asyncPrimaryDisks = defaults.asyncPrimaryDisks;
    	      this.creationTimestamp = defaults.creationTimestamp;
    	      this.description = defaults.description;
    	      this.diskEncryptionKeys = defaults.diskEncryptionKeys;
    	      this.effectiveLabels = defaults.effectiveLabels;
    	      this.guestOsFeatures = defaults.guestOsFeatures;
    	      this.id = defaults.id;
    	      this.interface_ = defaults.interface_;
    	      this.labelFingerprint = defaults.labelFingerprint;
    	      this.labels = defaults.labels;
    	      this.lastAttachTimestamp = defaults.lastAttachTimestamp;
    	      this.lastDetachTimestamp = defaults.lastDetachTimestamp;
    	      this.licenses = defaults.licenses;
    	      this.name = defaults.name;
    	      this.physicalBlockSizeBytes = defaults.physicalBlockSizeBytes;
    	      this.project = defaults.project;
    	      this.pulumiLabels = defaults.pulumiLabels;
    	      this.region = defaults.region;
    	      this.replicaZones = defaults.replicaZones;
    	      this.selfLink = defaults.selfLink;
    	      this.size = defaults.size;
    	      this.snapshot = defaults.snapshot;
    	      this.sourceDisk = defaults.sourceDisk;
    	      this.sourceDiskId = defaults.sourceDiskId;
    	      this.sourceSnapshotEncryptionKeys = defaults.sourceSnapshotEncryptionKeys;
    	      this.sourceSnapshotId = defaults.sourceSnapshotId;
    	      this.type = defaults.type;
    	      this.users = defaults.users;
        }

        @CustomType.Setter
        public Builder asyncPrimaryDisks(List<GetRegionDiskAsyncPrimaryDisk> asyncPrimaryDisks) {
            if (asyncPrimaryDisks == null) {
              throw new MissingRequiredPropertyException("GetRegionDiskResult", "asyncPrimaryDisks");
            }
            this.asyncPrimaryDisks = asyncPrimaryDisks;
            return this;
        }
        public Builder asyncPrimaryDisks(GetRegionDiskAsyncPrimaryDisk... asyncPrimaryDisks) {
            return asyncPrimaryDisks(List.of(asyncPrimaryDisks));
        }
        @CustomType.Setter
        public Builder creationTimestamp(String creationTimestamp) {
            if (creationTimestamp == null) {
              throw new MissingRequiredPropertyException("GetRegionDiskResult", "creationTimestamp");
            }
            this.creationTimestamp = creationTimestamp;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetRegionDiskResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder diskEncryptionKeys(List<GetRegionDiskDiskEncryptionKey> diskEncryptionKeys) {
            if (diskEncryptionKeys == null) {
              throw new MissingRequiredPropertyException("GetRegionDiskResult", "diskEncryptionKeys");
            }
            this.diskEncryptionKeys = diskEncryptionKeys;
            return this;
        }
        public Builder diskEncryptionKeys(GetRegionDiskDiskEncryptionKey... diskEncryptionKeys) {
            return diskEncryptionKeys(List.of(diskEncryptionKeys));
        }
        @CustomType.Setter
        public Builder effectiveLabels(Map<String,String> effectiveLabels) {
            if (effectiveLabels == null) {
              throw new MissingRequiredPropertyException("GetRegionDiskResult", "effectiveLabels");
            }
            this.effectiveLabels = effectiveLabels;
            return this;
        }
        @CustomType.Setter
        public Builder guestOsFeatures(List<GetRegionDiskGuestOsFeature> guestOsFeatures) {
            if (guestOsFeatures == null) {
              throw new MissingRequiredPropertyException("GetRegionDiskResult", "guestOsFeatures");
            }
            this.guestOsFeatures = guestOsFeatures;
            return this;
        }
        public Builder guestOsFeatures(GetRegionDiskGuestOsFeature... guestOsFeatures) {
            return guestOsFeatures(List.of(guestOsFeatures));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetRegionDiskResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter("interface")
        public Builder interface_(String interface_) {
            if (interface_ == null) {
              throw new MissingRequiredPropertyException("GetRegionDiskResult", "interface_");
            }
            this.interface_ = interface_;
            return this;
        }
        @CustomType.Setter
        public Builder labelFingerprint(String labelFingerprint) {
            if (labelFingerprint == null) {
              throw new MissingRequiredPropertyException("GetRegionDiskResult", "labelFingerprint");
            }
            this.labelFingerprint = labelFingerprint;
            return this;
        }
        @CustomType.Setter
        public Builder labels(Map<String,String> labels) {
            if (labels == null) {
              throw new MissingRequiredPropertyException("GetRegionDiskResult", "labels");
            }
            this.labels = labels;
            return this;
        }
        @CustomType.Setter
        public Builder lastAttachTimestamp(String lastAttachTimestamp) {
            if (lastAttachTimestamp == null) {
              throw new MissingRequiredPropertyException("GetRegionDiskResult", "lastAttachTimestamp");
            }
            this.lastAttachTimestamp = lastAttachTimestamp;
            return this;
        }
        @CustomType.Setter
        public Builder lastDetachTimestamp(String lastDetachTimestamp) {
            if (lastDetachTimestamp == null) {
              throw new MissingRequiredPropertyException("GetRegionDiskResult", "lastDetachTimestamp");
            }
            this.lastDetachTimestamp = lastDetachTimestamp;
            return this;
        }
        @CustomType.Setter
        public Builder licenses(List<String> licenses) {
            if (licenses == null) {
              throw new MissingRequiredPropertyException("GetRegionDiskResult", "licenses");
            }
            this.licenses = licenses;
            return this;
        }
        public Builder licenses(String... licenses) {
            return licenses(List.of(licenses));
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetRegionDiskResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder physicalBlockSizeBytes(Integer physicalBlockSizeBytes) {
            if (physicalBlockSizeBytes == null) {
              throw new MissingRequiredPropertyException("GetRegionDiskResult", "physicalBlockSizeBytes");
            }
            this.physicalBlockSizeBytes = physicalBlockSizeBytes;
            return this;
        }
        @CustomType.Setter
        public Builder project(@Nullable String project) {

            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder pulumiLabels(Map<String,String> pulumiLabels) {
            if (pulumiLabels == null) {
              throw new MissingRequiredPropertyException("GetRegionDiskResult", "pulumiLabels");
            }
            this.pulumiLabels = pulumiLabels;
            return this;
        }
        @CustomType.Setter
        public Builder region(@Nullable String region) {

            this.region = region;
            return this;
        }
        @CustomType.Setter
        public Builder replicaZones(List<String> replicaZones) {
            if (replicaZones == null) {
              throw new MissingRequiredPropertyException("GetRegionDiskResult", "replicaZones");
            }
            this.replicaZones = replicaZones;
            return this;
        }
        public Builder replicaZones(String... replicaZones) {
            return replicaZones(List.of(replicaZones));
        }
        @CustomType.Setter
        public Builder selfLink(String selfLink) {
            if (selfLink == null) {
              throw new MissingRequiredPropertyException("GetRegionDiskResult", "selfLink");
            }
            this.selfLink = selfLink;
            return this;
        }
        @CustomType.Setter
        public Builder size(Integer size) {
            if (size == null) {
              throw new MissingRequiredPropertyException("GetRegionDiskResult", "size");
            }
            this.size = size;
            return this;
        }
        @CustomType.Setter
        public Builder snapshot(String snapshot) {
            if (snapshot == null) {
              throw new MissingRequiredPropertyException("GetRegionDiskResult", "snapshot");
            }
            this.snapshot = snapshot;
            return this;
        }
        @CustomType.Setter
        public Builder sourceDisk(String sourceDisk) {
            if (sourceDisk == null) {
              throw new MissingRequiredPropertyException("GetRegionDiskResult", "sourceDisk");
            }
            this.sourceDisk = sourceDisk;
            return this;
        }
        @CustomType.Setter
        public Builder sourceDiskId(String sourceDiskId) {
            if (sourceDiskId == null) {
              throw new MissingRequiredPropertyException("GetRegionDiskResult", "sourceDiskId");
            }
            this.sourceDiskId = sourceDiskId;
            return this;
        }
        @CustomType.Setter
        public Builder sourceSnapshotEncryptionKeys(List<GetRegionDiskSourceSnapshotEncryptionKey> sourceSnapshotEncryptionKeys) {
            if (sourceSnapshotEncryptionKeys == null) {
              throw new MissingRequiredPropertyException("GetRegionDiskResult", "sourceSnapshotEncryptionKeys");
            }
            this.sourceSnapshotEncryptionKeys = sourceSnapshotEncryptionKeys;
            return this;
        }
        public Builder sourceSnapshotEncryptionKeys(GetRegionDiskSourceSnapshotEncryptionKey... sourceSnapshotEncryptionKeys) {
            return sourceSnapshotEncryptionKeys(List.of(sourceSnapshotEncryptionKeys));
        }
        @CustomType.Setter
        public Builder sourceSnapshotId(String sourceSnapshotId) {
            if (sourceSnapshotId == null) {
              throw new MissingRequiredPropertyException("GetRegionDiskResult", "sourceSnapshotId");
            }
            this.sourceSnapshotId = sourceSnapshotId;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetRegionDiskResult", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder users(List<String> users) {
            if (users == null) {
              throw new MissingRequiredPropertyException("GetRegionDiskResult", "users");
            }
            this.users = users;
            return this;
        }
        public Builder users(String... users) {
            return users(List.of(users));
        }
        public GetRegionDiskResult build() {
            final var _resultValue = new GetRegionDiskResult();
            _resultValue.asyncPrimaryDisks = asyncPrimaryDisks;
            _resultValue.creationTimestamp = creationTimestamp;
            _resultValue.description = description;
            _resultValue.diskEncryptionKeys = diskEncryptionKeys;
            _resultValue.effectiveLabels = effectiveLabels;
            _resultValue.guestOsFeatures = guestOsFeatures;
            _resultValue.id = id;
            _resultValue.interface_ = interface_;
            _resultValue.labelFingerprint = labelFingerprint;
            _resultValue.labels = labels;
            _resultValue.lastAttachTimestamp = lastAttachTimestamp;
            _resultValue.lastDetachTimestamp = lastDetachTimestamp;
            _resultValue.licenses = licenses;
            _resultValue.name = name;
            _resultValue.physicalBlockSizeBytes = physicalBlockSizeBytes;
            _resultValue.project = project;
            _resultValue.pulumiLabels = pulumiLabels;
            _resultValue.region = region;
            _resultValue.replicaZones = replicaZones;
            _resultValue.selfLink = selfLink;
            _resultValue.size = size;
            _resultValue.snapshot = snapshot;
            _resultValue.sourceDisk = sourceDisk;
            _resultValue.sourceDiskId = sourceDiskId;
            _resultValue.sourceSnapshotEncryptionKeys = sourceSnapshotEncryptionKeys;
            _resultValue.sourceSnapshotId = sourceSnapshotId;
            _resultValue.type = type;
            _resultValue.users = users;
            return _resultValue;
        }
    }
}
