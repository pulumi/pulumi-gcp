// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataproc.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MetastoreServiceHiveMetastoreConfigAuxiliaryVersionArgs extends com.pulumi.resources.ResourceArgs {

    public static final MetastoreServiceHiveMetastoreConfigAuxiliaryVersionArgs Empty = new MetastoreServiceHiveMetastoreConfigAuxiliaryVersionArgs();

    /**
     * A mapping of Hive metastore configuration key-value pairs to apply to the auxiliary Hive metastore (configured in hive-site.xml) in addition to the primary version&#39;s overrides.
     * If keys are present in both the auxiliary version&#39;s overrides and the primary version&#39;s overrides, the value from the auxiliary version&#39;s overrides takes precedence.
     * 
     */
    @Import(name="configOverrides")
    private @Nullable Output<Map<String,String>> configOverrides;

    /**
     * @return A mapping of Hive metastore configuration key-value pairs to apply to the auxiliary Hive metastore (configured in hive-site.xml) in addition to the primary version&#39;s overrides.
     * If keys are present in both the auxiliary version&#39;s overrides and the primary version&#39;s overrides, the value from the auxiliary version&#39;s overrides takes precedence.
     * 
     */
    public Optional<Output<Map<String,String>>> configOverrides() {
        return Optional.ofNullable(this.configOverrides);
    }

    /**
     * The identifier for this object. Format specified above.
     * 
     */
    @Import(name="key", required=true)
    private Output<String> key;

    /**
     * @return The identifier for this object. Format specified above.
     * 
     */
    public Output<String> key() {
        return this.key;
    }

    /**
     * The Hive metastore version of the auxiliary service. It must be less than the primary Hive metastore service&#39;s version.
     * 
     */
    @Import(name="version", required=true)
    private Output<String> version;

    /**
     * @return The Hive metastore version of the auxiliary service. It must be less than the primary Hive metastore service&#39;s version.
     * 
     */
    public Output<String> version() {
        return this.version;
    }

    private MetastoreServiceHiveMetastoreConfigAuxiliaryVersionArgs() {}

    private MetastoreServiceHiveMetastoreConfigAuxiliaryVersionArgs(MetastoreServiceHiveMetastoreConfigAuxiliaryVersionArgs $) {
        this.configOverrides = $.configOverrides;
        this.key = $.key;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MetastoreServiceHiveMetastoreConfigAuxiliaryVersionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MetastoreServiceHiveMetastoreConfigAuxiliaryVersionArgs $;

        public Builder() {
            $ = new MetastoreServiceHiveMetastoreConfigAuxiliaryVersionArgs();
        }

        public Builder(MetastoreServiceHiveMetastoreConfigAuxiliaryVersionArgs defaults) {
            $ = new MetastoreServiceHiveMetastoreConfigAuxiliaryVersionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param configOverrides A mapping of Hive metastore configuration key-value pairs to apply to the auxiliary Hive metastore (configured in hive-site.xml) in addition to the primary version&#39;s overrides.
         * If keys are present in both the auxiliary version&#39;s overrides and the primary version&#39;s overrides, the value from the auxiliary version&#39;s overrides takes precedence.
         * 
         * @return builder
         * 
         */
        public Builder configOverrides(@Nullable Output<Map<String,String>> configOverrides) {
            $.configOverrides = configOverrides;
            return this;
        }

        /**
         * @param configOverrides A mapping of Hive metastore configuration key-value pairs to apply to the auxiliary Hive metastore (configured in hive-site.xml) in addition to the primary version&#39;s overrides.
         * If keys are present in both the auxiliary version&#39;s overrides and the primary version&#39;s overrides, the value from the auxiliary version&#39;s overrides takes precedence.
         * 
         * @return builder
         * 
         */
        public Builder configOverrides(Map<String,String> configOverrides) {
            return configOverrides(Output.of(configOverrides));
        }

        /**
         * @param key The identifier for this object. Format specified above.
         * 
         * @return builder
         * 
         */
        public Builder key(Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key The identifier for this object. Format specified above.
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param version The Hive metastore version of the auxiliary service. It must be less than the primary Hive metastore service&#39;s version.
         * 
         * @return builder
         * 
         */
        public Builder version(Output<String> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version The Hive metastore version of the auxiliary service. It must be less than the primary Hive metastore service&#39;s version.
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            return version(Output.of(version));
        }

        public MetastoreServiceHiveMetastoreConfigAuxiliaryVersionArgs build() {
            $.key = Objects.requireNonNull($.key, "expected parameter 'key' to be non-null");
            $.version = Objects.requireNonNull($.version, "expected parameter 'version' to be non-null");
            return $;
        }
    }

}
