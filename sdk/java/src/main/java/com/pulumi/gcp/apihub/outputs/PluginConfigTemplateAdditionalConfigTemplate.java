// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.apihub.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.apihub.outputs.PluginConfigTemplateAdditionalConfigTemplateEnumOption;
import com.pulumi.gcp.apihub.outputs.PluginConfigTemplateAdditionalConfigTemplateMultiSelectOption;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class PluginConfigTemplateAdditionalConfigTemplate {
    /**
     * @return Description.
     * 
     */
    private @Nullable String description;
    /**
     * @return Enum options. To be populated if `ValueType` is `ENUM`.
     * Structure is documented below.
     * 
     */
    private @Nullable List<PluginConfigTemplateAdditionalConfigTemplateEnumOption> enumOptions;
    /**
     * @return ID of the config variable. Must be unique within the configuration.
     * 
     */
    private String id;
    /**
     * @return Multi select options. To be populated if `ValueType` is `MULTI_SELECT`.
     * Structure is documented below.
     * 
     */
    private @Nullable List<PluginConfigTemplateAdditionalConfigTemplateMultiSelectOption> multiSelectOptions;
    /**
     * @return Flag represents that this `ConfigVariable` must be provided for a
     * PluginInstance.
     * 
     */
    private @Nullable Boolean required;
    /**
     * @return Regular expression in RE2 syntax used for validating the `value` of a
     * `ConfigVariable`.
     * 
     */
    private @Nullable String validationRegex;
    /**
     * @return Type of the parameter: string, int, bool etc.
     * Possible values:
     * VALUE_TYPE_UNSPECIFIED
     * STRING
     * INT
     * BOOL
     * SECRET
     * ENUM
     * MULTI_SELECT
     * MULTI_STRING
     * MULTI_INT
     * 
     */
    private String valueType;

    private PluginConfigTemplateAdditionalConfigTemplate() {}
    /**
     * @return Description.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return Enum options. To be populated if `ValueType` is `ENUM`.
     * Structure is documented below.
     * 
     */
    public List<PluginConfigTemplateAdditionalConfigTemplateEnumOption> enumOptions() {
        return this.enumOptions == null ? List.of() : this.enumOptions;
    }
    /**
     * @return ID of the config variable. Must be unique within the configuration.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Multi select options. To be populated if `ValueType` is `MULTI_SELECT`.
     * Structure is documented below.
     * 
     */
    public List<PluginConfigTemplateAdditionalConfigTemplateMultiSelectOption> multiSelectOptions() {
        return this.multiSelectOptions == null ? List.of() : this.multiSelectOptions;
    }
    /**
     * @return Flag represents that this `ConfigVariable` must be provided for a
     * PluginInstance.
     * 
     */
    public Optional<Boolean> required() {
        return Optional.ofNullable(this.required);
    }
    /**
     * @return Regular expression in RE2 syntax used for validating the `value` of a
     * `ConfigVariable`.
     * 
     */
    public Optional<String> validationRegex() {
        return Optional.ofNullable(this.validationRegex);
    }
    /**
     * @return Type of the parameter: string, int, bool etc.
     * Possible values:
     * VALUE_TYPE_UNSPECIFIED
     * STRING
     * INT
     * BOOL
     * SECRET
     * ENUM
     * MULTI_SELECT
     * MULTI_STRING
     * MULTI_INT
     * 
     */
    public String valueType() {
        return this.valueType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PluginConfigTemplateAdditionalConfigTemplate defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String description;
        private @Nullable List<PluginConfigTemplateAdditionalConfigTemplateEnumOption> enumOptions;
        private String id;
        private @Nullable List<PluginConfigTemplateAdditionalConfigTemplateMultiSelectOption> multiSelectOptions;
        private @Nullable Boolean required;
        private @Nullable String validationRegex;
        private String valueType;
        public Builder() {}
        public Builder(PluginConfigTemplateAdditionalConfigTemplate defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.enumOptions = defaults.enumOptions;
    	      this.id = defaults.id;
    	      this.multiSelectOptions = defaults.multiSelectOptions;
    	      this.required = defaults.required;
    	      this.validationRegex = defaults.validationRegex;
    	      this.valueType = defaults.valueType;
        }

        @CustomType.Setter
        public Builder description(@Nullable String description) {

            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder enumOptions(@Nullable List<PluginConfigTemplateAdditionalConfigTemplateEnumOption> enumOptions) {

            this.enumOptions = enumOptions;
            return this;
        }
        public Builder enumOptions(PluginConfigTemplateAdditionalConfigTemplateEnumOption... enumOptions) {
            return enumOptions(List.of(enumOptions));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("PluginConfigTemplateAdditionalConfigTemplate", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder multiSelectOptions(@Nullable List<PluginConfigTemplateAdditionalConfigTemplateMultiSelectOption> multiSelectOptions) {

            this.multiSelectOptions = multiSelectOptions;
            return this;
        }
        public Builder multiSelectOptions(PluginConfigTemplateAdditionalConfigTemplateMultiSelectOption... multiSelectOptions) {
            return multiSelectOptions(List.of(multiSelectOptions));
        }
        @CustomType.Setter
        public Builder required(@Nullable Boolean required) {

            this.required = required;
            return this;
        }
        @CustomType.Setter
        public Builder validationRegex(@Nullable String validationRegex) {

            this.validationRegex = validationRegex;
            return this;
        }
        @CustomType.Setter
        public Builder valueType(String valueType) {
            if (valueType == null) {
              throw new MissingRequiredPropertyException("PluginConfigTemplateAdditionalConfigTemplate", "valueType");
            }
            this.valueType = valueType;
            return this;
        }
        public PluginConfigTemplateAdditionalConfigTemplate build() {
            final var _resultValue = new PluginConfigTemplateAdditionalConfigTemplate();
            _resultValue.description = description;
            _resultValue.enumOptions = enumOptions;
            _resultValue.id = id;
            _resultValue.multiSelectOptions = multiSelectOptions;
            _resultValue.required = required;
            _resultValue.validationRegex = validationRegex;
            _resultValue.valueType = valueType;
            return _resultValue;
        }
    }
}
