// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.edgecontainer.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.edgecontainer.inputs.ClusterMaintenancePolicyWindowRecurringWindowArgs;
import java.util.Objects;


public final class ClusterMaintenancePolicyWindowArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClusterMaintenancePolicyWindowArgs Empty = new ClusterMaintenancePolicyWindowArgs();

    /**
     * Represents an arbitrary window of time that recurs.
     * Structure is documented below.
     * 
     */
    @Import(name="recurringWindow", required=true)
    private Output<ClusterMaintenancePolicyWindowRecurringWindowArgs> recurringWindow;

    /**
     * @return Represents an arbitrary window of time that recurs.
     * Structure is documented below.
     * 
     */
    public Output<ClusterMaintenancePolicyWindowRecurringWindowArgs> recurringWindow() {
        return this.recurringWindow;
    }

    private ClusterMaintenancePolicyWindowArgs() {}

    private ClusterMaintenancePolicyWindowArgs(ClusterMaintenancePolicyWindowArgs $) {
        this.recurringWindow = $.recurringWindow;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClusterMaintenancePolicyWindowArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClusterMaintenancePolicyWindowArgs $;

        public Builder() {
            $ = new ClusterMaintenancePolicyWindowArgs();
        }

        public Builder(ClusterMaintenancePolicyWindowArgs defaults) {
            $ = new ClusterMaintenancePolicyWindowArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param recurringWindow Represents an arbitrary window of time that recurs.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder recurringWindow(Output<ClusterMaintenancePolicyWindowRecurringWindowArgs> recurringWindow) {
            $.recurringWindow = recurringWindow;
            return this;
        }

        /**
         * @param recurringWindow Represents an arbitrary window of time that recurs.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder recurringWindow(ClusterMaintenancePolicyWindowRecurringWindowArgs recurringWindow) {
            return recurringWindow(Output.of(recurringWindow));
        }

        public ClusterMaintenancePolicyWindowArgs build() {
            if ($.recurringWindow == null) {
                throw new MissingRequiredPropertyException("ClusterMaintenancePolicyWindowArgs", "recurringWindow");
            }
            return $;
        }
    }

}
