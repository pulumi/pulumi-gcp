// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.storage.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class BucketIpFilterVpcNetworkSourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final BucketIpFilterVpcNetworkSourceArgs Empty = new BucketIpFilterVpcNetworkSourceArgs();

    /**
     * The list of public or private IPv4 and IPv6 CIDR ranges that can access the bucket.
     * 
     */
    @Import(name="allowedIpCidrRanges", required=true)
    private Output<List<String>> allowedIpCidrRanges;

    /**
     * @return The list of public or private IPv4 and IPv6 CIDR ranges that can access the bucket.
     * 
     */
    public Output<List<String>> allowedIpCidrRanges() {
        return this.allowedIpCidrRanges;
    }

    /**
     * Name of the network. Format: `projects/PROJECT_ID/global/networks/NETWORK_NAME`
     * 
     */
    @Import(name="network", required=true)
    private Output<String> network;

    /**
     * @return Name of the network. Format: `projects/PROJECT_ID/global/networks/NETWORK_NAME`
     * 
     */
    public Output<String> network() {
        return this.network;
    }

    private BucketIpFilterVpcNetworkSourceArgs() {}

    private BucketIpFilterVpcNetworkSourceArgs(BucketIpFilterVpcNetworkSourceArgs $) {
        this.allowedIpCidrRanges = $.allowedIpCidrRanges;
        this.network = $.network;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BucketIpFilterVpcNetworkSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BucketIpFilterVpcNetworkSourceArgs $;

        public Builder() {
            $ = new BucketIpFilterVpcNetworkSourceArgs();
        }

        public Builder(BucketIpFilterVpcNetworkSourceArgs defaults) {
            $ = new BucketIpFilterVpcNetworkSourceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowedIpCidrRanges The list of public or private IPv4 and IPv6 CIDR ranges that can access the bucket.
         * 
         * @return builder
         * 
         */
        public Builder allowedIpCidrRanges(Output<List<String>> allowedIpCidrRanges) {
            $.allowedIpCidrRanges = allowedIpCidrRanges;
            return this;
        }

        /**
         * @param allowedIpCidrRanges The list of public or private IPv4 and IPv6 CIDR ranges that can access the bucket.
         * 
         * @return builder
         * 
         */
        public Builder allowedIpCidrRanges(List<String> allowedIpCidrRanges) {
            return allowedIpCidrRanges(Output.of(allowedIpCidrRanges));
        }

        /**
         * @param allowedIpCidrRanges The list of public or private IPv4 and IPv6 CIDR ranges that can access the bucket.
         * 
         * @return builder
         * 
         */
        public Builder allowedIpCidrRanges(String... allowedIpCidrRanges) {
            return allowedIpCidrRanges(List.of(allowedIpCidrRanges));
        }

        /**
         * @param network Name of the network. Format: `projects/PROJECT_ID/global/networks/NETWORK_NAME`
         * 
         * @return builder
         * 
         */
        public Builder network(Output<String> network) {
            $.network = network;
            return this;
        }

        /**
         * @param network Name of the network. Format: `projects/PROJECT_ID/global/networks/NETWORK_NAME`
         * 
         * @return builder
         * 
         */
        public Builder network(String network) {
            return network(Output.of(network));
        }

        public BucketIpFilterVpcNetworkSourceArgs build() {
            if ($.allowedIpCidrRanges == null) {
                throw new MissingRequiredPropertyException("BucketIpFilterVpcNetworkSourceArgs", "allowedIpCidrRanges");
            }
            if ($.network == null) {
                throw new MissingRequiredPropertyException("BucketIpFilterVpcNetworkSourceArgs", "network");
            }
            return $;
        }
    }

}
