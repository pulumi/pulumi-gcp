// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.networksecurity.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class SecurityProfileUrlFilteringProfileUrlFilter {
    /**
     * @return The action to take when the filter is applied.
     * Possible values are: `ALLOW`, `DENY`.
     * 
     */
    private String filteringAction;
    /**
     * @return The priority of the filter within the URL filtering profile.
     * Must be an integer from 0 and 2147483647, inclusive. Lower integers indicate higher priorities.
     * The priority of a filter must be unique within a URL filtering profile.
     * 
     */
    private Integer priority;
    /**
     * @return A list of domain matcher strings that a domain name gets compared with to determine if the filter is applicable.
     * A domain name must match with at least one of the strings in the list for a filter to be applicable.
     * 
     */
    private @Nullable List<String> urls;

    private SecurityProfileUrlFilteringProfileUrlFilter() {}
    /**
     * @return The action to take when the filter is applied.
     * Possible values are: `ALLOW`, `DENY`.
     * 
     */
    public String filteringAction() {
        return this.filteringAction;
    }
    /**
     * @return The priority of the filter within the URL filtering profile.
     * Must be an integer from 0 and 2147483647, inclusive. Lower integers indicate higher priorities.
     * The priority of a filter must be unique within a URL filtering profile.
     * 
     */
    public Integer priority() {
        return this.priority;
    }
    /**
     * @return A list of domain matcher strings that a domain name gets compared with to determine if the filter is applicable.
     * A domain name must match with at least one of the strings in the list for a filter to be applicable.
     * 
     */
    public List<String> urls() {
        return this.urls == null ? List.of() : this.urls;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SecurityProfileUrlFilteringProfileUrlFilter defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String filteringAction;
        private Integer priority;
        private @Nullable List<String> urls;
        public Builder() {}
        public Builder(SecurityProfileUrlFilteringProfileUrlFilter defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.filteringAction = defaults.filteringAction;
    	      this.priority = defaults.priority;
    	      this.urls = defaults.urls;
        }

        @CustomType.Setter
        public Builder filteringAction(String filteringAction) {
            if (filteringAction == null) {
              throw new MissingRequiredPropertyException("SecurityProfileUrlFilteringProfileUrlFilter", "filteringAction");
            }
            this.filteringAction = filteringAction;
            return this;
        }
        @CustomType.Setter
        public Builder priority(Integer priority) {
            if (priority == null) {
              throw new MissingRequiredPropertyException("SecurityProfileUrlFilteringProfileUrlFilter", "priority");
            }
            this.priority = priority;
            return this;
        }
        @CustomType.Setter
        public Builder urls(@Nullable List<String> urls) {

            this.urls = urls;
            return this;
        }
        public Builder urls(String... urls) {
            return urls(List.of(urls));
        }
        public SecurityProfileUrlFilteringProfileUrlFilter build() {
            final var _resultValue = new SecurityProfileUrlFilteringProfileUrlFilter();
            _resultValue.filteringAction = filteringAction;
            _resultValue.priority = priority;
            _resultValue.urls = urls;
            return _resultValue;
        }
    }
}
