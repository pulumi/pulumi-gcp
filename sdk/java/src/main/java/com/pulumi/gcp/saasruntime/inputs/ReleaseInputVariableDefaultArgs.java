// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.saasruntime.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ReleaseInputVariableDefaultArgs extends com.pulumi.resources.ResourceArgs {

    public static final ReleaseInputVariableDefaultArgs Empty = new ReleaseInputVariableDefaultArgs();

    /**
     * Name of a supported variable type. Supported types are STRING, INT, BOOL.
     * Possible values are: `TYPE_UNSPECIFIED`, `STRING`, `INT`, `BOOL`.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Name of a supported variable type. Supported types are STRING, INT, BOOL.
     * Possible values are: `TYPE_UNSPECIFIED`, `STRING`, `INT`, `BOOL`.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * String encoded value for the variable.
     * 
     */
    @Import(name="value")
    private @Nullable Output<String> value;

    /**
     * @return String encoded value for the variable.
     * 
     */
    public Optional<Output<String>> value() {
        return Optional.ofNullable(this.value);
    }

    /**
     * Name of the variable from actuation configs.
     * 
     */
    @Import(name="variable", required=true)
    private Output<String> variable;

    /**
     * @return Name of the variable from actuation configs.
     * 
     */
    public Output<String> variable() {
        return this.variable;
    }

    private ReleaseInputVariableDefaultArgs() {}

    private ReleaseInputVariableDefaultArgs(ReleaseInputVariableDefaultArgs $) {
        this.type = $.type;
        this.value = $.value;
        this.variable = $.variable;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ReleaseInputVariableDefaultArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ReleaseInputVariableDefaultArgs $;

        public Builder() {
            $ = new ReleaseInputVariableDefaultArgs();
        }

        public Builder(ReleaseInputVariableDefaultArgs defaults) {
            $ = new ReleaseInputVariableDefaultArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param type Name of a supported variable type. Supported types are STRING, INT, BOOL.
         * Possible values are: `TYPE_UNSPECIFIED`, `STRING`, `INT`, `BOOL`.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Name of a supported variable type. Supported types are STRING, INT, BOOL.
         * Possible values are: `TYPE_UNSPECIFIED`, `STRING`, `INT`, `BOOL`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param value String encoded value for the variable.
         * 
         * @return builder
         * 
         */
        public Builder value(@Nullable Output<String> value) {
            $.value = value;
            return this;
        }

        /**
         * @param value String encoded value for the variable.
         * 
         * @return builder
         * 
         */
        public Builder value(String value) {
            return value(Output.of(value));
        }

        /**
         * @param variable Name of the variable from actuation configs.
         * 
         * @return builder
         * 
         */
        public Builder variable(Output<String> variable) {
            $.variable = variable;
            return this;
        }

        /**
         * @param variable Name of the variable from actuation configs.
         * 
         * @return builder
         * 
         */
        public Builder variable(String variable) {
            return variable(Output.of(variable));
        }

        public ReleaseInputVariableDefaultArgs build() {
            if ($.variable == null) {
                throw new MissingRequiredPropertyException("ReleaseInputVariableDefaultArgs", "variable");
            }
            return $;
        }
    }

}
