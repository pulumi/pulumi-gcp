// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.gemini;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CodeRepositoryIndexArgs extends com.pulumi.resources.ResourceArgs {

    public static final CodeRepositoryIndexArgs Empty = new CodeRepositoryIndexArgs();

    /**
     * Required. Id of the Code Repository Index.
     * 
     * ***
     * 
     */
    @Import(name="codeRepositoryIndexId", required=true)
    private Output<String> codeRepositoryIndexId;

    /**
     * @return Required. Id of the Code Repository Index.
     * 
     * ***
     * 
     */
    public Output<String> codeRepositoryIndexId() {
        return this.codeRepositoryIndexId;
    }

    /**
     * If set to true, will allow deletion of the CodeRepositoryIndex even if there are existing RepositoryGroups for the resource. These RepositoryGroups will also be deleted.
     * 
     */
    @Import(name="forceDestroy")
    private @Nullable Output<Boolean> forceDestroy;

    /**
     * @return If set to true, will allow deletion of the CodeRepositoryIndex even if there are existing RepositoryGroups for the resource. These RepositoryGroups will also be deleted.
     * 
     */
    public Optional<Output<Boolean>> forceDestroy() {
        return Optional.ofNullable(this.forceDestroy);
    }

    /**
     * Optional. Immutable. Customer-managed encryption key name, in the format
     * projects/*&#47;locations/*&#47;keyRings/*&#47;cryptoKeys/*.
     * 
     */
    @Import(name="kmsKey")
    private @Nullable Output<String> kmsKey;

    /**
     * @return Optional. Immutable. Customer-managed encryption key name, in the format
     * projects/*&#47;locations/*&#47;keyRings/*&#47;cryptoKeys/*.
     * 
     */
    public Optional<Output<String>> kmsKey() {
        return Optional.ofNullable(this.kmsKey);
    }

    /**
     * Optional. Labels as key value pairs.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Optional. Labels as key value pairs.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * The location of the Code Repository Index, for example `us-central1`.
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return The location of the Code Repository Index, for example `us-central1`.
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    private CodeRepositoryIndexArgs() {}

    private CodeRepositoryIndexArgs(CodeRepositoryIndexArgs $) {
        this.codeRepositoryIndexId = $.codeRepositoryIndexId;
        this.forceDestroy = $.forceDestroy;
        this.kmsKey = $.kmsKey;
        this.labels = $.labels;
        this.location = $.location;
        this.project = $.project;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CodeRepositoryIndexArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CodeRepositoryIndexArgs $;

        public Builder() {
            $ = new CodeRepositoryIndexArgs();
        }

        public Builder(CodeRepositoryIndexArgs defaults) {
            $ = new CodeRepositoryIndexArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param codeRepositoryIndexId Required. Id of the Code Repository Index.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder codeRepositoryIndexId(Output<String> codeRepositoryIndexId) {
            $.codeRepositoryIndexId = codeRepositoryIndexId;
            return this;
        }

        /**
         * @param codeRepositoryIndexId Required. Id of the Code Repository Index.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder codeRepositoryIndexId(String codeRepositoryIndexId) {
            return codeRepositoryIndexId(Output.of(codeRepositoryIndexId));
        }

        /**
         * @param forceDestroy If set to true, will allow deletion of the CodeRepositoryIndex even if there are existing RepositoryGroups for the resource. These RepositoryGroups will also be deleted.
         * 
         * @return builder
         * 
         */
        public Builder forceDestroy(@Nullable Output<Boolean> forceDestroy) {
            $.forceDestroy = forceDestroy;
            return this;
        }

        /**
         * @param forceDestroy If set to true, will allow deletion of the CodeRepositoryIndex even if there are existing RepositoryGroups for the resource. These RepositoryGroups will also be deleted.
         * 
         * @return builder
         * 
         */
        public Builder forceDestroy(Boolean forceDestroy) {
            return forceDestroy(Output.of(forceDestroy));
        }

        /**
         * @param kmsKey Optional. Immutable. Customer-managed encryption key name, in the format
         * projects/*&#47;locations/*&#47;keyRings/*&#47;cryptoKeys/*.
         * 
         * @return builder
         * 
         */
        public Builder kmsKey(@Nullable Output<String> kmsKey) {
            $.kmsKey = kmsKey;
            return this;
        }

        /**
         * @param kmsKey Optional. Immutable. Customer-managed encryption key name, in the format
         * projects/*&#47;locations/*&#47;keyRings/*&#47;cryptoKeys/*.
         * 
         * @return builder
         * 
         */
        public Builder kmsKey(String kmsKey) {
            return kmsKey(Output.of(kmsKey));
        }

        /**
         * @param labels Optional. Labels as key value pairs.
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Optional. Labels as key value pairs.
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param location The location of the Code Repository Index, for example `us-central1`.
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location of the Code Repository Index, for example `us-central1`.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        public CodeRepositoryIndexArgs build() {
            if ($.codeRepositoryIndexId == null) {
                throw new MissingRequiredPropertyException("CodeRepositoryIndexArgs", "codeRepositoryIndexId");
            }
            if ($.location == null) {
                throw new MissingRequiredPropertyException("CodeRepositoryIndexArgs", "location");
            }
            return $;
        }
    }

}
