// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.spanner.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.spanner.inputs.InstanceAutoscalingConfigAsymmetricAutoscalingOptionArgs;
import com.pulumi.gcp.spanner.inputs.InstanceAutoscalingConfigAutoscalingLimitsArgs;
import com.pulumi.gcp.spanner.inputs.InstanceAutoscalingConfigAutoscalingTargetsArgs;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceAutoscalingConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstanceAutoscalingConfigArgs Empty = new InstanceAutoscalingConfigArgs();

    /**
     * Asymmetric autoscaling options for specific replicas.
     * Structure is documented below.
     * 
     */
    @Import(name="asymmetricAutoscalingOptions")
    private @Nullable Output<List<InstanceAutoscalingConfigAsymmetricAutoscalingOptionArgs>> asymmetricAutoscalingOptions;

    /**
     * @return Asymmetric autoscaling options for specific replicas.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<InstanceAutoscalingConfigAsymmetricAutoscalingOptionArgs>>> asymmetricAutoscalingOptions() {
        return Optional.ofNullable(this.asymmetricAutoscalingOptions);
    }

    /**
     * Defines scale in controls to reduce the risk of response latency
     * and outages due to abrupt scale-in events. Users can define the minimum and
     * maximum compute capacity allocated to the instance, and the autoscaler will
     * only scale within that range. Users can either use nodes or processing
     * units to specify the limits, but should use the same unit to set both the
     * minLimit and max_limit.
     * Structure is documented below.
     * 
     */
    @Import(name="autoscalingLimits")
    private @Nullable Output<InstanceAutoscalingConfigAutoscalingLimitsArgs> autoscalingLimits;

    /**
     * @return Defines scale in controls to reduce the risk of response latency
     * and outages due to abrupt scale-in events. Users can define the minimum and
     * maximum compute capacity allocated to the instance, and the autoscaler will
     * only scale within that range. Users can either use nodes or processing
     * units to specify the limits, but should use the same unit to set both the
     * minLimit and max_limit.
     * Structure is documented below.
     * 
     */
    public Optional<Output<InstanceAutoscalingConfigAutoscalingLimitsArgs>> autoscalingLimits() {
        return Optional.ofNullable(this.autoscalingLimits);
    }

    /**
     * Defines scale in controls to reduce the risk of response latency
     * and outages due to abrupt scale-in events
     * Structure is documented below.
     * 
     */
    @Import(name="autoscalingTargets")
    private @Nullable Output<InstanceAutoscalingConfigAutoscalingTargetsArgs> autoscalingTargets;

    /**
     * @return Defines scale in controls to reduce the risk of response latency
     * and outages due to abrupt scale-in events
     * Structure is documented below.
     * 
     */
    public Optional<Output<InstanceAutoscalingConfigAutoscalingTargetsArgs>> autoscalingTargets() {
        return Optional.ofNullable(this.autoscalingTargets);
    }

    private InstanceAutoscalingConfigArgs() {}

    private InstanceAutoscalingConfigArgs(InstanceAutoscalingConfigArgs $) {
        this.asymmetricAutoscalingOptions = $.asymmetricAutoscalingOptions;
        this.autoscalingLimits = $.autoscalingLimits;
        this.autoscalingTargets = $.autoscalingTargets;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceAutoscalingConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceAutoscalingConfigArgs $;

        public Builder() {
            $ = new InstanceAutoscalingConfigArgs();
        }

        public Builder(InstanceAutoscalingConfigArgs defaults) {
            $ = new InstanceAutoscalingConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param asymmetricAutoscalingOptions Asymmetric autoscaling options for specific replicas.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder asymmetricAutoscalingOptions(@Nullable Output<List<InstanceAutoscalingConfigAsymmetricAutoscalingOptionArgs>> asymmetricAutoscalingOptions) {
            $.asymmetricAutoscalingOptions = asymmetricAutoscalingOptions;
            return this;
        }

        /**
         * @param asymmetricAutoscalingOptions Asymmetric autoscaling options for specific replicas.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder asymmetricAutoscalingOptions(List<InstanceAutoscalingConfigAsymmetricAutoscalingOptionArgs> asymmetricAutoscalingOptions) {
            return asymmetricAutoscalingOptions(Output.of(asymmetricAutoscalingOptions));
        }

        /**
         * @param asymmetricAutoscalingOptions Asymmetric autoscaling options for specific replicas.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder asymmetricAutoscalingOptions(InstanceAutoscalingConfigAsymmetricAutoscalingOptionArgs... asymmetricAutoscalingOptions) {
            return asymmetricAutoscalingOptions(List.of(asymmetricAutoscalingOptions));
        }

        /**
         * @param autoscalingLimits Defines scale in controls to reduce the risk of response latency
         * and outages due to abrupt scale-in events. Users can define the minimum and
         * maximum compute capacity allocated to the instance, and the autoscaler will
         * only scale within that range. Users can either use nodes or processing
         * units to specify the limits, but should use the same unit to set both the
         * minLimit and max_limit.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder autoscalingLimits(@Nullable Output<InstanceAutoscalingConfigAutoscalingLimitsArgs> autoscalingLimits) {
            $.autoscalingLimits = autoscalingLimits;
            return this;
        }

        /**
         * @param autoscalingLimits Defines scale in controls to reduce the risk of response latency
         * and outages due to abrupt scale-in events. Users can define the minimum and
         * maximum compute capacity allocated to the instance, and the autoscaler will
         * only scale within that range. Users can either use nodes or processing
         * units to specify the limits, but should use the same unit to set both the
         * minLimit and max_limit.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder autoscalingLimits(InstanceAutoscalingConfigAutoscalingLimitsArgs autoscalingLimits) {
            return autoscalingLimits(Output.of(autoscalingLimits));
        }

        /**
         * @param autoscalingTargets Defines scale in controls to reduce the risk of response latency
         * and outages due to abrupt scale-in events
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder autoscalingTargets(@Nullable Output<InstanceAutoscalingConfigAutoscalingTargetsArgs> autoscalingTargets) {
            $.autoscalingTargets = autoscalingTargets;
            return this;
        }

        /**
         * @param autoscalingTargets Defines scale in controls to reduce the risk of response latency
         * and outages due to abrupt scale-in events
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder autoscalingTargets(InstanceAutoscalingConfigAutoscalingTargetsArgs autoscalingTargets) {
            return autoscalingTargets(Output.of(autoscalingTargets));
        }

        public InstanceAutoscalingConfigArgs build() {
            return $;
        }
    }

}
