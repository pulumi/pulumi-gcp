// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.gkeonprem.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VmwareAdminClusterLoadBalancerVipConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final VmwareAdminClusterLoadBalancerVipConfigArgs Empty = new VmwareAdminClusterLoadBalancerVipConfigArgs();

    /**
     * The VIP to configure the load balancer for add-ons.
     * 
     * &lt;a name=&#34;nested_f5_config&#34;&gt;&lt;/a&gt;The `f5_config` block supports:
     * 
     */
    @Import(name="addonsVip")
    private @Nullable Output<String> addonsVip;

    /**
     * @return The VIP to configure the load balancer for add-ons.
     * 
     * &lt;a name=&#34;nested_f5_config&#34;&gt;&lt;/a&gt;The `f5_config` block supports:
     * 
     */
    public Optional<Output<String>> addonsVip() {
        return Optional.ofNullable(this.addonsVip);
    }

    /**
     * The VIP which you previously set aside for the Kubernetes
     * API of this VMware Admin Cluster.
     * 
     */
    @Import(name="controlPlaneVip", required=true)
    private Output<String> controlPlaneVip;

    /**
     * @return The VIP which you previously set aside for the Kubernetes
     * API of this VMware Admin Cluster.
     * 
     */
    public Output<String> controlPlaneVip() {
        return this.controlPlaneVip;
    }

    private VmwareAdminClusterLoadBalancerVipConfigArgs() {}

    private VmwareAdminClusterLoadBalancerVipConfigArgs(VmwareAdminClusterLoadBalancerVipConfigArgs $) {
        this.addonsVip = $.addonsVip;
        this.controlPlaneVip = $.controlPlaneVip;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VmwareAdminClusterLoadBalancerVipConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VmwareAdminClusterLoadBalancerVipConfigArgs $;

        public Builder() {
            $ = new VmwareAdminClusterLoadBalancerVipConfigArgs();
        }

        public Builder(VmwareAdminClusterLoadBalancerVipConfigArgs defaults) {
            $ = new VmwareAdminClusterLoadBalancerVipConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param addonsVip The VIP to configure the load balancer for add-ons.
         * 
         * &lt;a name=&#34;nested_f5_config&#34;&gt;&lt;/a&gt;The `f5_config` block supports:
         * 
         * @return builder
         * 
         */
        public Builder addonsVip(@Nullable Output<String> addonsVip) {
            $.addonsVip = addonsVip;
            return this;
        }

        /**
         * @param addonsVip The VIP to configure the load balancer for add-ons.
         * 
         * &lt;a name=&#34;nested_f5_config&#34;&gt;&lt;/a&gt;The `f5_config` block supports:
         * 
         * @return builder
         * 
         */
        public Builder addonsVip(String addonsVip) {
            return addonsVip(Output.of(addonsVip));
        }

        /**
         * @param controlPlaneVip The VIP which you previously set aside for the Kubernetes
         * API of this VMware Admin Cluster.
         * 
         * @return builder
         * 
         */
        public Builder controlPlaneVip(Output<String> controlPlaneVip) {
            $.controlPlaneVip = controlPlaneVip;
            return this;
        }

        /**
         * @param controlPlaneVip The VIP which you previously set aside for the Kubernetes
         * API of this VMware Admin Cluster.
         * 
         * @return builder
         * 
         */
        public Builder controlPlaneVip(String controlPlaneVip) {
            return controlPlaneVip(Output.of(controlPlaneVip));
        }

        public VmwareAdminClusterLoadBalancerVipConfigArgs build() {
            if ($.controlPlaneVip == null) {
                throw new MissingRequiredPropertyException("VmwareAdminClusterLoadBalancerVipConfigArgs", "controlPlaneVip");
            }
            return $;
        }
    }

}
