// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.memcache;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.memcache.InstanceArgs;
import com.pulumi.gcp.memcache.inputs.InstanceState;
import com.pulumi.gcp.memcache.outputs.InstanceMaintenancePolicy;
import com.pulumi.gcp.memcache.outputs.InstanceMaintenanceSchedule;
import com.pulumi.gcp.memcache.outputs.InstanceMemcacheNode;
import com.pulumi.gcp.memcache.outputs.InstanceMemcacheParameters;
import com.pulumi.gcp.memcache.outputs.InstanceNodeConfig;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * A Google Cloud Memcache instance.
 * 
 * To get more information about Instance, see:
 * 
 * * [API documentation](https://cloud.google.com/memorystore/docs/memcached/reference/rest/v1/projects.locations.instances)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/memcache/docs/creating-instances)
 * 
 * ## Example Usage
 * 
 * ### Memcache Instance Basic
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.Network;
 * import com.pulumi.gcp.compute.NetworkArgs;
 * import com.pulumi.gcp.compute.GlobalAddress;
 * import com.pulumi.gcp.compute.GlobalAddressArgs;
 * import com.pulumi.gcp.servicenetworking.Connection;
 * import com.pulumi.gcp.servicenetworking.ConnectionArgs;
 * import com.pulumi.gcp.memcache.Instance;
 * import com.pulumi.gcp.memcache.InstanceArgs;
 * import com.pulumi.gcp.memcache.inputs.InstanceNodeConfigArgs;
 * import com.pulumi.gcp.memcache.inputs.InstanceMaintenancePolicyArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         // This example assumes this network already exists.
 *         // The API creates a tenant network per network authorized for a
 *         // Memcache instance and that network is not deleted when the user-created
 *         // network (authorized_network) is deleted, so this prevents issues
 *         // with tenant network quota.
 *         // If this network hasn't been created and you are using this example in your
 *         // config, add an additional network resource or change
 *         // this from "data"to "resource"
 *         var memcacheNetwork = new Network("memcacheNetwork", NetworkArgs.builder()
 *             .name("test-network")
 *             .build());
 * 
 *         var serviceRange = new GlobalAddress("serviceRange", GlobalAddressArgs.builder()
 *             .name("address")
 *             .purpose("VPC_PEERING")
 *             .addressType("INTERNAL")
 *             .prefixLength(16)
 *             .network(memcacheNetwork.id())
 *             .build());
 * 
 *         var privateServiceConnection = new Connection("privateServiceConnection", ConnectionArgs.builder()
 *             .network(memcacheNetwork.id())
 *             .service("servicenetworking.googleapis.com")
 *             .reservedPeeringRanges(serviceRange.name())
 *             .build());
 * 
 *         var instance = new Instance("instance", InstanceArgs.builder()
 *             .name("test-instance")
 *             .authorizedNetwork(privateServiceConnection.network())
 *             .labels(Map.of("env", "test"))
 *             .nodeConfig(InstanceNodeConfigArgs.builder()
 *                 .cpuCount(1)
 *                 .memorySizeMb(1024)
 *                 .build())
 *             .nodeCount(1)
 *             .memcacheVersion("MEMCACHE_1_5")
 *             .maintenancePolicy(InstanceMaintenancePolicyArgs.builder()
 *                 .weeklyMaintenanceWindows(InstanceMaintenancePolicyWeeklyMaintenanceWindowArgs.builder()
 *                     .day("SATURDAY")
 *                     .duration("14400s")
 *                     .startTime(InstanceMaintenancePolicyWeeklyMaintenanceWindowStartTimeArgs.builder()
 *                         .hours(0)
 *                         .minutes(30)
 *                         .seconds(0)
 *                         .nanos(0)
 *                         .build())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Instance can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/locations/{{region}}/instances/{{name}}`
 * 
 * * `{{project}}/{{region}}/{{name}}`
 * 
 * * `{{region}}/{{name}}`
 * 
 * * `{{name}}`
 * 
 * When using the `pulumi import` command, Instance can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:memcache/instance:Instance default projects/{{project}}/locations/{{region}}/instances/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:memcache/instance:Instance default {{project}}/{{region}}/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:memcache/instance:Instance default {{region}}/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:memcache/instance:Instance default {{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:memcache/instance:Instance")
public class Instance extends com.pulumi.resources.CustomResource {
    /**
     * The full name of the GCE network to connect the instance to.  If not provided,
     * &#39;default&#39; will be used.
     * 
     */
    @Export(name="authorizedNetwork", refs={String.class}, tree="[0]")
    private Output<String> authorizedNetwork;

    /**
     * @return The full name of the GCE network to connect the instance to.  If not provided,
     * &#39;default&#39; will be used.
     * 
     */
    public Output<String> authorizedNetwork() {
        return this.authorizedNetwork;
    }
    /**
     * Creation timestamp in RFC3339 text format.
     * 
     */
    @Export(name="createTime", refs={String.class}, tree="[0]")
    private Output<String> createTime;

    /**
     * @return Creation timestamp in RFC3339 text format.
     * 
     */
    public Output<String> createTime() {
        return this.createTime;
    }
    /**
     * Endpoint for Discovery API
     * 
     */
    @Export(name="discoveryEndpoint", refs={String.class}, tree="[0]")
    private Output<String> discoveryEndpoint;

    /**
     * @return Endpoint for Discovery API
     * 
     */
    public Output<String> discoveryEndpoint() {
        return this.discoveryEndpoint;
    }
    /**
     * A user-visible name for the instance.
     * 
     */
    @Export(name="displayName", refs={String.class}, tree="[0]")
    private Output<String> displayName;

    /**
     * @return A user-visible name for the instance.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    @Export(name="effectiveLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> effectiveLabels;

    /**
     * @return All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    public Output<Map<String,String>> effectiveLabels() {
        return this.effectiveLabels;
    }
    /**
     * Resource labels to represent user-provided metadata.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    @Export(name="labels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> labels;

    /**
     * @return Resource labels to represent user-provided metadata.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    public Output<Optional<Map<String,String>>> labels() {
        return Codegen.optional(this.labels);
    }
    /**
     * Maintenance policy for an instance.
     * Structure is documented below.
     * 
     */
    @Export(name="maintenancePolicy", refs={InstanceMaintenancePolicy.class}, tree="[0]")
    private Output</* @Nullable */ InstanceMaintenancePolicy> maintenancePolicy;

    /**
     * @return Maintenance policy for an instance.
     * Structure is documented below.
     * 
     */
    public Output<Optional<InstanceMaintenancePolicy>> maintenancePolicy() {
        return Codegen.optional(this.maintenancePolicy);
    }
    /**
     * Output only. Published maintenance schedule.
     * Structure is documented below.
     * 
     */
    @Export(name="maintenanceSchedules", refs={List.class,InstanceMaintenanceSchedule.class}, tree="[0,1]")
    private Output<List<InstanceMaintenanceSchedule>> maintenanceSchedules;

    /**
     * @return Output only. Published maintenance schedule.
     * Structure is documented below.
     * 
     */
    public Output<List<InstanceMaintenanceSchedule>> maintenanceSchedules() {
        return this.maintenanceSchedules;
    }
    /**
     * The full version of memcached server running on this instance.
     * 
     */
    @Export(name="memcacheFullVersion", refs={String.class}, tree="[0]")
    private Output<String> memcacheFullVersion;

    /**
     * @return The full version of memcached server running on this instance.
     * 
     */
    public Output<String> memcacheFullVersion() {
        return this.memcacheFullVersion;
    }
    /**
     * Additional information about the instance state, if available.
     * Structure is documented below.
     * 
     */
    @Export(name="memcacheNodes", refs={List.class,InstanceMemcacheNode.class}, tree="[0,1]")
    private Output<List<InstanceMemcacheNode>> memcacheNodes;

    /**
     * @return Additional information about the instance state, if available.
     * Structure is documented below.
     * 
     */
    public Output<List<InstanceMemcacheNode>> memcacheNodes() {
        return this.memcacheNodes;
    }
    /**
     * User-specified parameters for this memcache instance.
     * Structure is documented below.
     * 
     */
    @Export(name="memcacheParameters", refs={InstanceMemcacheParameters.class}, tree="[0]")
    private Output</* @Nullable */ InstanceMemcacheParameters> memcacheParameters;

    /**
     * @return User-specified parameters for this memcache instance.
     * Structure is documented below.
     * 
     */
    public Output<Optional<InstanceMemcacheParameters>> memcacheParameters() {
        return Codegen.optional(this.memcacheParameters);
    }
    /**
     * The major version of Memcached software. If not provided, latest supported version will be used.
     * Currently the latest supported major version is MEMCACHE_1_5. The minor version will be automatically
     * determined by our system based on the latest supported minor version.
     * Default value is `MEMCACHE_1_5`.
     * Possible values are: `MEMCACHE_1_5`, `MEMCACHE_1_6_15`.
     * 
     */
    @Export(name="memcacheVersion", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> memcacheVersion;

    /**
     * @return The major version of Memcached software. If not provided, latest supported version will be used.
     * Currently the latest supported major version is MEMCACHE_1_5. The minor version will be automatically
     * determined by our system based on the latest supported minor version.
     * Default value is `MEMCACHE_1_5`.
     * Possible values are: `MEMCACHE_1_5`, `MEMCACHE_1_6_15`.
     * 
     */
    public Output<Optional<String>> memcacheVersion() {
        return Codegen.optional(this.memcacheVersion);
    }
    /**
     * The resource name of the instance.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The resource name of the instance.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Configuration for memcache nodes.
     * Structure is documented below.
     * 
     */
    @Export(name="nodeConfig", refs={InstanceNodeConfig.class}, tree="[0]")
    private Output<InstanceNodeConfig> nodeConfig;

    /**
     * @return Configuration for memcache nodes.
     * Structure is documented below.
     * 
     */
    public Output<InstanceNodeConfig> nodeConfig() {
        return this.nodeConfig;
    }
    /**
     * Number of nodes in the memcache instance.
     * 
     */
    @Export(name="nodeCount", refs={Integer.class}, tree="[0]")
    private Output<Integer> nodeCount;

    /**
     * @return Number of nodes in the memcache instance.
     * 
     */
    public Output<Integer> nodeCount() {
        return this.nodeCount;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    @Export(name="pulumiLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> pulumiLabels;

    /**
     * @return The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    public Output<Map<String,String>> pulumiLabels() {
        return this.pulumiLabels;
    }
    /**
     * The region of the Memcache instance. If it is not provided, the provider region is used.
     * 
     */
    @Export(name="region", refs={String.class}, tree="[0]")
    private Output<String> region;

    /**
     * @return The region of the Memcache instance. If it is not provided, the provider region is used.
     * 
     */
    public Output<String> region() {
        return this.region;
    }
    /**
     * Contains the name of allocated IP address ranges associated with
     * the private service access connection for example, &#34;test-default&#34;
     * associated with IP range 10.0.0.0/29.
     * 
     */
    @Export(name="reservedIpRangeIds", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> reservedIpRangeIds;

    /**
     * @return Contains the name of allocated IP address ranges associated with
     * the private service access connection for example, &#34;test-default&#34;
     * associated with IP range 10.0.0.0/29.
     * 
     */
    public Output<Optional<List<String>>> reservedIpRangeIds() {
        return Codegen.optional(this.reservedIpRangeIds);
    }
    /**
     * Zones where memcache nodes should be provisioned.  If not
     * provided, all zones will be used.
     * 
     */
    @Export(name="zones", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> zones;

    /**
     * @return Zones where memcache nodes should be provisioned.  If not
     * provided, all zones will be used.
     * 
     */
    public Output<List<String>> zones() {
        return this.zones;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Instance(java.lang.String name) {
        this(name, InstanceArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Instance(java.lang.String name, InstanceArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Instance(java.lang.String name, InstanceArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:memcache/instance:Instance", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Instance(java.lang.String name, Output<java.lang.String> id, @Nullable InstanceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:memcache/instance:Instance", name, state, makeResourceOptions(options, id), false);
    }

    private static InstanceArgs makeArgs(InstanceArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? InstanceArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "effectiveLabels",
                "pulumiLabels"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Instance get(java.lang.String name, Output<java.lang.String> id, @Nullable InstanceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Instance(name, id, state, options);
    }
}
