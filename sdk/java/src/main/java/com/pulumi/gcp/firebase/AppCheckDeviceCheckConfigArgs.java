// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.firebase;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AppCheckDeviceCheckConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final AppCheckDeviceCheckConfigArgs Empty = new AppCheckDeviceCheckConfigArgs();

    /**
     * The ID of an
     * [Apple App](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects.iosApps#IosApp.FIELDS.app_id).
     * 
     */
    @Import(name="appId", required=true)
    private Output<String> appId;

    /**
     * @return The ID of an
     * [Apple App](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects.iosApps#IosApp.FIELDS.app_id).
     * 
     */
    public Output<String> appId() {
        return this.appId;
    }

    /**
     * The key identifier of a private key enabled with DeviceCheck, created in your Apple Developer account.
     * 
     */
    @Import(name="keyId", required=true)
    private Output<String> keyId;

    /**
     * @return The key identifier of a private key enabled with DeviceCheck, created in your Apple Developer account.
     * 
     */
    public Output<String> keyId() {
        return this.keyId;
    }

    /**
     * The contents of the private key (.p8) file associated with the key specified by keyId.
     * **Note**: This property is sensitive and will not be displayed in the plan.
     * 
     */
    @Import(name="privateKey", required=true)
    private Output<String> privateKey;

    /**
     * @return The contents of the private key (.p8) file associated with the key specified by keyId.
     * **Note**: This property is sensitive and will not be displayed in the plan.
     * 
     */
    public Output<String> privateKey() {
        return this.privateKey;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Specifies the duration for which App Check tokens exchanged from DeviceCheck artifacts will be valid.
     * If unset, a default value of 1 hour is assumed. Must be between 30 minutes and 7 days, inclusive.
     * A duration in seconds with up to nine fractional digits, ending with &#39;s&#39;. Example: &#34;3.5s&#34;.
     * 
     */
    @Import(name="tokenTtl")
    private @Nullable Output<String> tokenTtl;

    /**
     * @return Specifies the duration for which App Check tokens exchanged from DeviceCheck artifacts will be valid.
     * If unset, a default value of 1 hour is assumed. Must be between 30 minutes and 7 days, inclusive.
     * A duration in seconds with up to nine fractional digits, ending with &#39;s&#39;. Example: &#34;3.5s&#34;.
     * 
     */
    public Optional<Output<String>> tokenTtl() {
        return Optional.ofNullable(this.tokenTtl);
    }

    private AppCheckDeviceCheckConfigArgs() {}

    private AppCheckDeviceCheckConfigArgs(AppCheckDeviceCheckConfigArgs $) {
        this.appId = $.appId;
        this.keyId = $.keyId;
        this.privateKey = $.privateKey;
        this.project = $.project;
        this.tokenTtl = $.tokenTtl;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AppCheckDeviceCheckConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AppCheckDeviceCheckConfigArgs $;

        public Builder() {
            $ = new AppCheckDeviceCheckConfigArgs();
        }

        public Builder(AppCheckDeviceCheckConfigArgs defaults) {
            $ = new AppCheckDeviceCheckConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param appId The ID of an
         * [Apple App](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects.iosApps#IosApp.FIELDS.app_id).
         * 
         * @return builder
         * 
         */
        public Builder appId(Output<String> appId) {
            $.appId = appId;
            return this;
        }

        /**
         * @param appId The ID of an
         * [Apple App](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects.iosApps#IosApp.FIELDS.app_id).
         * 
         * @return builder
         * 
         */
        public Builder appId(String appId) {
            return appId(Output.of(appId));
        }

        /**
         * @param keyId The key identifier of a private key enabled with DeviceCheck, created in your Apple Developer account.
         * 
         * @return builder
         * 
         */
        public Builder keyId(Output<String> keyId) {
            $.keyId = keyId;
            return this;
        }

        /**
         * @param keyId The key identifier of a private key enabled with DeviceCheck, created in your Apple Developer account.
         * 
         * @return builder
         * 
         */
        public Builder keyId(String keyId) {
            return keyId(Output.of(keyId));
        }

        /**
         * @param privateKey The contents of the private key (.p8) file associated with the key specified by keyId.
         * **Note**: This property is sensitive and will not be displayed in the plan.
         * 
         * @return builder
         * 
         */
        public Builder privateKey(Output<String> privateKey) {
            $.privateKey = privateKey;
            return this;
        }

        /**
         * @param privateKey The contents of the private key (.p8) file associated with the key specified by keyId.
         * **Note**: This property is sensitive and will not be displayed in the plan.
         * 
         * @return builder
         * 
         */
        public Builder privateKey(String privateKey) {
            return privateKey(Output.of(privateKey));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param tokenTtl Specifies the duration for which App Check tokens exchanged from DeviceCheck artifacts will be valid.
         * If unset, a default value of 1 hour is assumed. Must be between 30 minutes and 7 days, inclusive.
         * A duration in seconds with up to nine fractional digits, ending with &#39;s&#39;. Example: &#34;3.5s&#34;.
         * 
         * @return builder
         * 
         */
        public Builder tokenTtl(@Nullable Output<String> tokenTtl) {
            $.tokenTtl = tokenTtl;
            return this;
        }

        /**
         * @param tokenTtl Specifies the duration for which App Check tokens exchanged from DeviceCheck artifacts will be valid.
         * If unset, a default value of 1 hour is assumed. Must be between 30 minutes and 7 days, inclusive.
         * A duration in seconds with up to nine fractional digits, ending with &#39;s&#39;. Example: &#34;3.5s&#34;.
         * 
         * @return builder
         * 
         */
        public Builder tokenTtl(String tokenTtl) {
            return tokenTtl(Output.of(tokenTtl));
        }

        public AppCheckDeviceCheckConfigArgs build() {
            if ($.appId == null) {
                throw new MissingRequiredPropertyException("AppCheckDeviceCheckConfigArgs", "appId");
            }
            if ($.keyId == null) {
                throw new MissingRequiredPropertyException("AppCheckDeviceCheckConfigArgs", "keyId");
            }
            if ($.privateKey == null) {
                throw new MissingRequiredPropertyException("AppCheckDeviceCheckConfigArgs", "privateKey");
            }
            return $;
        }
    }

}
