// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SecurityScanConfigScheduleArgs extends com.pulumi.resources.ResourceArgs {

    public static final SecurityScanConfigScheduleArgs Empty = new SecurityScanConfigScheduleArgs();

    /**
     * The duration of time between executions in days
     * 
     */
    @Import(name="intervalDurationDays", required=true)
    private Output<Integer> intervalDurationDays;

    /**
     * @return The duration of time between executions in days
     * 
     */
    public Output<Integer> intervalDurationDays() {
        return this.intervalDurationDays;
    }

    /**
     * A timestamp indicates when the next run will be scheduled. The value is refreshed
     * by the server after each run. If unspecified, it will default to current server time,
     * which means the scan will be scheduled to start immediately.
     * 
     */
    @Import(name="scheduleTime")
    private @Nullable Output<String> scheduleTime;

    /**
     * @return A timestamp indicates when the next run will be scheduled. The value is refreshed
     * by the server after each run. If unspecified, it will default to current server time,
     * which means the scan will be scheduled to start immediately.
     * 
     */
    public Optional<Output<String>> scheduleTime() {
        return Optional.ofNullable(this.scheduleTime);
    }

    private SecurityScanConfigScheduleArgs() {}

    private SecurityScanConfigScheduleArgs(SecurityScanConfigScheduleArgs $) {
        this.intervalDurationDays = $.intervalDurationDays;
        this.scheduleTime = $.scheduleTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecurityScanConfigScheduleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecurityScanConfigScheduleArgs $;

        public Builder() {
            $ = new SecurityScanConfigScheduleArgs();
        }

        public Builder(SecurityScanConfigScheduleArgs defaults) {
            $ = new SecurityScanConfigScheduleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param intervalDurationDays The duration of time between executions in days
         * 
         * @return builder
         * 
         */
        public Builder intervalDurationDays(Output<Integer> intervalDurationDays) {
            $.intervalDurationDays = intervalDurationDays;
            return this;
        }

        /**
         * @param intervalDurationDays The duration of time between executions in days
         * 
         * @return builder
         * 
         */
        public Builder intervalDurationDays(Integer intervalDurationDays) {
            return intervalDurationDays(Output.of(intervalDurationDays));
        }

        /**
         * @param scheduleTime A timestamp indicates when the next run will be scheduled. The value is refreshed
         * by the server after each run. If unspecified, it will default to current server time,
         * which means the scan will be scheduled to start immediately.
         * 
         * @return builder
         * 
         */
        public Builder scheduleTime(@Nullable Output<String> scheduleTime) {
            $.scheduleTime = scheduleTime;
            return this;
        }

        /**
         * @param scheduleTime A timestamp indicates when the next run will be scheduled. The value is refreshed
         * by the server after each run. If unspecified, it will default to current server time,
         * which means the scan will be scheduled to start immediately.
         * 
         * @return builder
         * 
         */
        public Builder scheduleTime(String scheduleTime) {
            return scheduleTime(Output.of(scheduleTime));
        }

        public SecurityScanConfigScheduleArgs build() {
            $.intervalDurationDays = Objects.requireNonNull($.intervalDurationDays, "expected parameter 'intervalDurationDays' to be non-null");
            return $;
        }
    }

}
