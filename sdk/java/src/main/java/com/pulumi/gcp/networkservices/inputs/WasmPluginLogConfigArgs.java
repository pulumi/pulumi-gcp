// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.networkservices.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WasmPluginLogConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final WasmPluginLogConfigArgs Empty = new WasmPluginLogConfigArgs();

    /**
     * Optional. Specifies whether to enable logging for activity by this plugin.
     * 
     */
    @Import(name="enable")
    private @Nullable Output<Boolean> enable;

    /**
     * @return Optional. Specifies whether to enable logging for activity by this plugin.
     * 
     */
    public Optional<Output<Boolean>> enable() {
        return Optional.ofNullable(this.enable);
    }

    /**
     * Non-empty default. Specificies the lowest level of the plugin logs that are exported to Cloud Logging. This setting relates to the logs generated by using logging statements in your Wasm code.
     * This field is can be set only if logging is enabled for the plugin.
     * If the field is not provided when logging is enabled, it is set to INFO by default.
     * Possible values are: `LOG_LEVEL_UNSPECIFIED`, `TRACE`, `DEBUG`, `INFO`, `WARN`, `ERROR`, `CRITICAL`.
     * 
     */
    @Import(name="minLogLevel")
    private @Nullable Output<String> minLogLevel;

    /**
     * @return Non-empty default. Specificies the lowest level of the plugin logs that are exported to Cloud Logging. This setting relates to the logs generated by using logging statements in your Wasm code.
     * This field is can be set only if logging is enabled for the plugin.
     * If the field is not provided when logging is enabled, it is set to INFO by default.
     * Possible values are: `LOG_LEVEL_UNSPECIFIED`, `TRACE`, `DEBUG`, `INFO`, `WARN`, `ERROR`, `CRITICAL`.
     * 
     */
    public Optional<Output<String>> minLogLevel() {
        return Optional.ofNullable(this.minLogLevel);
    }

    /**
     * Non-empty default. Configures the sampling rate of activity logs, where 1.0 means all logged activity is reported and 0.0 means no activity is reported.
     * A floating point value between 0.0 and 1.0 indicates that a percentage of log messages is stored.
     * The default value when logging is enabled is 1.0. The value of the field must be between 0 and 1 (inclusive).
     * This field can be specified only if logging is enabled for this plugin.
     * 
     */
    @Import(name="sampleRate")
    private @Nullable Output<Double> sampleRate;

    /**
     * @return Non-empty default. Configures the sampling rate of activity logs, where 1.0 means all logged activity is reported and 0.0 means no activity is reported.
     * A floating point value between 0.0 and 1.0 indicates that a percentage of log messages is stored.
     * The default value when logging is enabled is 1.0. The value of the field must be between 0 and 1 (inclusive).
     * This field can be specified only if logging is enabled for this plugin.
     * 
     */
    public Optional<Output<Double>> sampleRate() {
        return Optional.ofNullable(this.sampleRate);
    }

    private WasmPluginLogConfigArgs() {}

    private WasmPluginLogConfigArgs(WasmPluginLogConfigArgs $) {
        this.enable = $.enable;
        this.minLogLevel = $.minLogLevel;
        this.sampleRate = $.sampleRate;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WasmPluginLogConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WasmPluginLogConfigArgs $;

        public Builder() {
            $ = new WasmPluginLogConfigArgs();
        }

        public Builder(WasmPluginLogConfigArgs defaults) {
            $ = new WasmPluginLogConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enable Optional. Specifies whether to enable logging for activity by this plugin.
         * 
         * @return builder
         * 
         */
        public Builder enable(@Nullable Output<Boolean> enable) {
            $.enable = enable;
            return this;
        }

        /**
         * @param enable Optional. Specifies whether to enable logging for activity by this plugin.
         * 
         * @return builder
         * 
         */
        public Builder enable(Boolean enable) {
            return enable(Output.of(enable));
        }

        /**
         * @param minLogLevel Non-empty default. Specificies the lowest level of the plugin logs that are exported to Cloud Logging. This setting relates to the logs generated by using logging statements in your Wasm code.
         * This field is can be set only if logging is enabled for the plugin.
         * If the field is not provided when logging is enabled, it is set to INFO by default.
         * Possible values are: `LOG_LEVEL_UNSPECIFIED`, `TRACE`, `DEBUG`, `INFO`, `WARN`, `ERROR`, `CRITICAL`.
         * 
         * @return builder
         * 
         */
        public Builder minLogLevel(@Nullable Output<String> minLogLevel) {
            $.minLogLevel = minLogLevel;
            return this;
        }

        /**
         * @param minLogLevel Non-empty default. Specificies the lowest level of the plugin logs that are exported to Cloud Logging. This setting relates to the logs generated by using logging statements in your Wasm code.
         * This field is can be set only if logging is enabled for the plugin.
         * If the field is not provided when logging is enabled, it is set to INFO by default.
         * Possible values are: `LOG_LEVEL_UNSPECIFIED`, `TRACE`, `DEBUG`, `INFO`, `WARN`, `ERROR`, `CRITICAL`.
         * 
         * @return builder
         * 
         */
        public Builder minLogLevel(String minLogLevel) {
            return minLogLevel(Output.of(minLogLevel));
        }

        /**
         * @param sampleRate Non-empty default. Configures the sampling rate of activity logs, where 1.0 means all logged activity is reported and 0.0 means no activity is reported.
         * A floating point value between 0.0 and 1.0 indicates that a percentage of log messages is stored.
         * The default value when logging is enabled is 1.0. The value of the field must be between 0 and 1 (inclusive).
         * This field can be specified only if logging is enabled for this plugin.
         * 
         * @return builder
         * 
         */
        public Builder sampleRate(@Nullable Output<Double> sampleRate) {
            $.sampleRate = sampleRate;
            return this;
        }

        /**
         * @param sampleRate Non-empty default. Configures the sampling rate of activity logs, where 1.0 means all logged activity is reported and 0.0 means no activity is reported.
         * A floating point value between 0.0 and 1.0 indicates that a percentage of log messages is stored.
         * The default value when logging is enabled is 1.0. The value of the field must be between 0 and 1 (inclusive).
         * This field can be specified only if logging is enabled for this plugin.
         * 
         * @return builder
         * 
         */
        public Builder sampleRate(Double sampleRate) {
            return sampleRate(Output.of(sampleRate));
        }

        public WasmPluginLogConfigArgs build() {
            return $;
        }
    }

}
