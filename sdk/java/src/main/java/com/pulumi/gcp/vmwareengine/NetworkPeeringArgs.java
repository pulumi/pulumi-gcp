// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.vmwareengine;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NetworkPeeringArgs extends com.pulumi.resources.ResourceArgs {

    public static final NetworkPeeringArgs Empty = new NetworkPeeringArgs();

    /**
     * User-provided description for this network peering.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return User-provided description for this network peering.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * True if custom routes are exported to the peered network; false otherwise.
     * 
     */
    @Import(name="exportCustomRoutes")
    private @Nullable Output<Boolean> exportCustomRoutes;

    /**
     * @return True if custom routes are exported to the peered network; false otherwise.
     * 
     */
    public Optional<Output<Boolean>> exportCustomRoutes() {
        return Optional.ofNullable(this.exportCustomRoutes);
    }

    /**
     * True if all subnet routes with a public IP address range are exported; false otherwise.
     * 
     */
    @Import(name="exportCustomRoutesWithPublicIp")
    private @Nullable Output<Boolean> exportCustomRoutesWithPublicIp;

    /**
     * @return True if all subnet routes with a public IP address range are exported; false otherwise.
     * 
     */
    public Optional<Output<Boolean>> exportCustomRoutesWithPublicIp() {
        return Optional.ofNullable(this.exportCustomRoutesWithPublicIp);
    }

    /**
     * True if custom routes are imported from the peered network; false otherwise.
     * 
     */
    @Import(name="importCustomRoutes")
    private @Nullable Output<Boolean> importCustomRoutes;

    /**
     * @return True if custom routes are imported from the peered network; false otherwise.
     * 
     */
    public Optional<Output<Boolean>> importCustomRoutes() {
        return Optional.ofNullable(this.importCustomRoutes);
    }

    /**
     * True if custom routes are imported from the peered network; false otherwise.
     * 
     */
    @Import(name="importCustomRoutesWithPublicIp")
    private @Nullable Output<Boolean> importCustomRoutesWithPublicIp;

    /**
     * @return True if custom routes are imported from the peered network; false otherwise.
     * 
     */
    public Optional<Output<Boolean>> importCustomRoutesWithPublicIp() {
        return Optional.ofNullable(this.importCustomRoutesWithPublicIp);
    }

    /**
     * The ID of the Network Peering.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The ID of the Network Peering.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The relative resource name of the network to peer with a standard VMware Engine network.
     * The provided network can be a consumer VPC network or another standard VMware Engine network.
     * 
     */
    @Import(name="peerNetwork", required=true)
    private Output<String> peerNetwork;

    /**
     * @return The relative resource name of the network to peer with a standard VMware Engine network.
     * The provided network can be a consumer VPC network or another standard VMware Engine network.
     * 
     */
    public Output<String> peerNetwork() {
        return this.peerNetwork;
    }

    /**
     * The type of the network to peer with the VMware Engine network.
     * Possible values are: `STANDARD`, `VMWARE_ENGINE_NETWORK`, `PRIVATE_SERVICES_ACCESS`, `NETAPP_CLOUD_VOLUMES`, `THIRD_PARTY_SERVICE`, `DELL_POWERSCALE`, `GOOGLE_CLOUD_NETAPP_VOLUMES`.
     * 
     */
    @Import(name="peerNetworkType", required=true)
    private Output<String> peerNetworkType;

    /**
     * @return The type of the network to peer with the VMware Engine network.
     * Possible values are: `STANDARD`, `VMWARE_ENGINE_NETWORK`, `PRIVATE_SERVICES_ACCESS`, `NETAPP_CLOUD_VOLUMES`, `THIRD_PARTY_SERVICE`, `DELL_POWERSCALE`, `GOOGLE_CLOUD_NETAPP_VOLUMES`.
     * 
     */
    public Output<String> peerNetworkType() {
        return this.peerNetworkType;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The relative resource name of the VMware Engine network. Specify the name in the following form:
     * projects/{project}/locations/{location}/vmwareEngineNetworks/{vmwareEngineNetworkId} where {project}
     * can either be a project number or a project ID.
     * 
     */
    @Import(name="vmwareEngineNetwork", required=true)
    private Output<String> vmwareEngineNetwork;

    /**
     * @return The relative resource name of the VMware Engine network. Specify the name in the following form:
     * projects/{project}/locations/{location}/vmwareEngineNetworks/{vmwareEngineNetworkId} where {project}
     * can either be a project number or a project ID.
     * 
     */
    public Output<String> vmwareEngineNetwork() {
        return this.vmwareEngineNetwork;
    }

    private NetworkPeeringArgs() {}

    private NetworkPeeringArgs(NetworkPeeringArgs $) {
        this.description = $.description;
        this.exportCustomRoutes = $.exportCustomRoutes;
        this.exportCustomRoutesWithPublicIp = $.exportCustomRoutesWithPublicIp;
        this.importCustomRoutes = $.importCustomRoutes;
        this.importCustomRoutesWithPublicIp = $.importCustomRoutesWithPublicIp;
        this.name = $.name;
        this.peerNetwork = $.peerNetwork;
        this.peerNetworkType = $.peerNetworkType;
        this.project = $.project;
        this.vmwareEngineNetwork = $.vmwareEngineNetwork;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetworkPeeringArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetworkPeeringArgs $;

        public Builder() {
            $ = new NetworkPeeringArgs();
        }

        public Builder(NetworkPeeringArgs defaults) {
            $ = new NetworkPeeringArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description User-provided description for this network peering.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description User-provided description for this network peering.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param exportCustomRoutes True if custom routes are exported to the peered network; false otherwise.
         * 
         * @return builder
         * 
         */
        public Builder exportCustomRoutes(@Nullable Output<Boolean> exportCustomRoutes) {
            $.exportCustomRoutes = exportCustomRoutes;
            return this;
        }

        /**
         * @param exportCustomRoutes True if custom routes are exported to the peered network; false otherwise.
         * 
         * @return builder
         * 
         */
        public Builder exportCustomRoutes(Boolean exportCustomRoutes) {
            return exportCustomRoutes(Output.of(exportCustomRoutes));
        }

        /**
         * @param exportCustomRoutesWithPublicIp True if all subnet routes with a public IP address range are exported; false otherwise.
         * 
         * @return builder
         * 
         */
        public Builder exportCustomRoutesWithPublicIp(@Nullable Output<Boolean> exportCustomRoutesWithPublicIp) {
            $.exportCustomRoutesWithPublicIp = exportCustomRoutesWithPublicIp;
            return this;
        }

        /**
         * @param exportCustomRoutesWithPublicIp True if all subnet routes with a public IP address range are exported; false otherwise.
         * 
         * @return builder
         * 
         */
        public Builder exportCustomRoutesWithPublicIp(Boolean exportCustomRoutesWithPublicIp) {
            return exportCustomRoutesWithPublicIp(Output.of(exportCustomRoutesWithPublicIp));
        }

        /**
         * @param importCustomRoutes True if custom routes are imported from the peered network; false otherwise.
         * 
         * @return builder
         * 
         */
        public Builder importCustomRoutes(@Nullable Output<Boolean> importCustomRoutes) {
            $.importCustomRoutes = importCustomRoutes;
            return this;
        }

        /**
         * @param importCustomRoutes True if custom routes are imported from the peered network; false otherwise.
         * 
         * @return builder
         * 
         */
        public Builder importCustomRoutes(Boolean importCustomRoutes) {
            return importCustomRoutes(Output.of(importCustomRoutes));
        }

        /**
         * @param importCustomRoutesWithPublicIp True if custom routes are imported from the peered network; false otherwise.
         * 
         * @return builder
         * 
         */
        public Builder importCustomRoutesWithPublicIp(@Nullable Output<Boolean> importCustomRoutesWithPublicIp) {
            $.importCustomRoutesWithPublicIp = importCustomRoutesWithPublicIp;
            return this;
        }

        /**
         * @param importCustomRoutesWithPublicIp True if custom routes are imported from the peered network; false otherwise.
         * 
         * @return builder
         * 
         */
        public Builder importCustomRoutesWithPublicIp(Boolean importCustomRoutesWithPublicIp) {
            return importCustomRoutesWithPublicIp(Output.of(importCustomRoutesWithPublicIp));
        }

        /**
         * @param name The ID of the Network Peering.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The ID of the Network Peering.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param peerNetwork The relative resource name of the network to peer with a standard VMware Engine network.
         * The provided network can be a consumer VPC network or another standard VMware Engine network.
         * 
         * @return builder
         * 
         */
        public Builder peerNetwork(Output<String> peerNetwork) {
            $.peerNetwork = peerNetwork;
            return this;
        }

        /**
         * @param peerNetwork The relative resource name of the network to peer with a standard VMware Engine network.
         * The provided network can be a consumer VPC network or another standard VMware Engine network.
         * 
         * @return builder
         * 
         */
        public Builder peerNetwork(String peerNetwork) {
            return peerNetwork(Output.of(peerNetwork));
        }

        /**
         * @param peerNetworkType The type of the network to peer with the VMware Engine network.
         * Possible values are: `STANDARD`, `VMWARE_ENGINE_NETWORK`, `PRIVATE_SERVICES_ACCESS`, `NETAPP_CLOUD_VOLUMES`, `THIRD_PARTY_SERVICE`, `DELL_POWERSCALE`, `GOOGLE_CLOUD_NETAPP_VOLUMES`.
         * 
         * @return builder
         * 
         */
        public Builder peerNetworkType(Output<String> peerNetworkType) {
            $.peerNetworkType = peerNetworkType;
            return this;
        }

        /**
         * @param peerNetworkType The type of the network to peer with the VMware Engine network.
         * Possible values are: `STANDARD`, `VMWARE_ENGINE_NETWORK`, `PRIVATE_SERVICES_ACCESS`, `NETAPP_CLOUD_VOLUMES`, `THIRD_PARTY_SERVICE`, `DELL_POWERSCALE`, `GOOGLE_CLOUD_NETAPP_VOLUMES`.
         * 
         * @return builder
         * 
         */
        public Builder peerNetworkType(String peerNetworkType) {
            return peerNetworkType(Output.of(peerNetworkType));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param vmwareEngineNetwork The relative resource name of the VMware Engine network. Specify the name in the following form:
         * projects/{project}/locations/{location}/vmwareEngineNetworks/{vmwareEngineNetworkId} where {project}
         * can either be a project number or a project ID.
         * 
         * @return builder
         * 
         */
        public Builder vmwareEngineNetwork(Output<String> vmwareEngineNetwork) {
            $.vmwareEngineNetwork = vmwareEngineNetwork;
            return this;
        }

        /**
         * @param vmwareEngineNetwork The relative resource name of the VMware Engine network. Specify the name in the following form:
         * projects/{project}/locations/{location}/vmwareEngineNetworks/{vmwareEngineNetworkId} where {project}
         * can either be a project number or a project ID.
         * 
         * @return builder
         * 
         */
        public Builder vmwareEngineNetwork(String vmwareEngineNetwork) {
            return vmwareEngineNetwork(Output.of(vmwareEngineNetwork));
        }

        public NetworkPeeringArgs build() {
            if ($.peerNetwork == null) {
                throw new MissingRequiredPropertyException("NetworkPeeringArgs", "peerNetwork");
            }
            if ($.peerNetworkType == null) {
                throw new MissingRequiredPropertyException("NetworkPeeringArgs", "peerNetworkType");
            }
            if ($.vmwareEngineNetwork == null) {
                throw new MissingRequiredPropertyException("NetworkPeeringArgs", "vmwareEngineNetwork");
            }
            return $;
        }
    }

}
