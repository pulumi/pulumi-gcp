// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.gemini;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LoggingSettingArgs extends com.pulumi.resources.ResourceArgs {

    public static final LoggingSettingArgs Empty = new LoggingSettingArgs();

    /**
     * Labels as key value pairs.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Labels as key value pairs.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * Whether to log metadata.
     * 
     */
    @Import(name="logMetadata")
    private @Nullable Output<Boolean> logMetadata;

    /**
     * @return Whether to log metadata.
     * 
     */
    public Optional<Output<Boolean>> logMetadata() {
        return Optional.ofNullable(this.logMetadata);
    }

    /**
     * Whether to log prompts and responses.
     * 
     */
    @Import(name="logPromptsAndResponses")
    private @Nullable Output<Boolean> logPromptsAndResponses;

    /**
     * @return Whether to log prompts and responses.
     * 
     */
    public Optional<Output<Boolean>> logPromptsAndResponses() {
        return Optional.ofNullable(this.logPromptsAndResponses);
    }

    /**
     * Id of the Logging Setting.
     * 
     */
    @Import(name="loggingSettingId", required=true)
    private Output<String> loggingSettingId;

    /**
     * @return Id of the Logging Setting.
     * 
     */
    public Output<String> loggingSettingId() {
        return this.loggingSettingId;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    private LoggingSettingArgs() {}

    private LoggingSettingArgs(LoggingSettingArgs $) {
        this.labels = $.labels;
        this.location = $.location;
        this.logMetadata = $.logMetadata;
        this.logPromptsAndResponses = $.logPromptsAndResponses;
        this.loggingSettingId = $.loggingSettingId;
        this.project = $.project;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LoggingSettingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LoggingSettingArgs $;

        public Builder() {
            $ = new LoggingSettingArgs();
        }

        public Builder(LoggingSettingArgs defaults) {
            $ = new LoggingSettingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param labels Labels as key value pairs.
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Labels as key value pairs.
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param location Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param logMetadata Whether to log metadata.
         * 
         * @return builder
         * 
         */
        public Builder logMetadata(@Nullable Output<Boolean> logMetadata) {
            $.logMetadata = logMetadata;
            return this;
        }

        /**
         * @param logMetadata Whether to log metadata.
         * 
         * @return builder
         * 
         */
        public Builder logMetadata(Boolean logMetadata) {
            return logMetadata(Output.of(logMetadata));
        }

        /**
         * @param logPromptsAndResponses Whether to log prompts and responses.
         * 
         * @return builder
         * 
         */
        public Builder logPromptsAndResponses(@Nullable Output<Boolean> logPromptsAndResponses) {
            $.logPromptsAndResponses = logPromptsAndResponses;
            return this;
        }

        /**
         * @param logPromptsAndResponses Whether to log prompts and responses.
         * 
         * @return builder
         * 
         */
        public Builder logPromptsAndResponses(Boolean logPromptsAndResponses) {
            return logPromptsAndResponses(Output.of(logPromptsAndResponses));
        }

        /**
         * @param loggingSettingId Id of the Logging Setting.
         * 
         * @return builder
         * 
         */
        public Builder loggingSettingId(Output<String> loggingSettingId) {
            $.loggingSettingId = loggingSettingId;
            return this;
        }

        /**
         * @param loggingSettingId Id of the Logging Setting.
         * 
         * @return builder
         * 
         */
        public Builder loggingSettingId(String loggingSettingId) {
            return loggingSettingId(Output.of(loggingSettingId));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        public LoggingSettingArgs build() {
            if ($.location == null) {
                throw new MissingRequiredPropertyException("LoggingSettingArgs", "location");
            }
            if ($.loggingSettingId == null) {
                throw new MissingRequiredPropertyException("LoggingSettingArgs", "loggingSettingId");
            }
            return $;
        }
    }

}
