// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.networkservices;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.networkservices.WasmPluginArgs;
import com.pulumi.gcp.networkservices.inputs.WasmPluginState;
import com.pulumi.gcp.networkservices.outputs.WasmPluginLogConfig;
import com.pulumi.gcp.networkservices.outputs.WasmPluginUsedBy;
import com.pulumi.gcp.networkservices.outputs.WasmPluginVersion;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * WasmPlugin is a resource representing a service executing a customer-provided Wasm module.
 * 
 * To get more information about WasmPlugin, see:
 * 
 * * [API documentation](https://cloud.google.com/service-extensions/docs/reference/rest/v1/projects.locations.wasmPlugins)
 * * How-to Guides
 *     * [Configure a route extension](https://cloud.google.com/service-extensions/docs/create-plugin)
 * 
 * ## Example Usage
 * 
 * ### Wasm Plugin Basic Docker Repository
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.organizations.OrganizationsFunctions;
 * import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
 * import com.pulumi.gcp.networkservices.WasmPlugin;
 * import com.pulumi.gcp.networkservices.WasmPluginArgs;
 * import com.pulumi.gcp.networkservices.inputs.WasmPluginLogConfigArgs;
 * import com.pulumi.gcp.networkservices.inputs.WasmPluginVersionArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var project = OrganizationsFunctions.getProject(GetProjectArgs.builder()
 *             .build());
 * 
 *         var wasmPlugin = new WasmPlugin("wasmPlugin", WasmPluginArgs.builder()
 *             .name("my-wasm-plugin")
 *             .description("my wasm plugin from a docker repository")
 *             .mainVersionId("v1")
 *             .labels(Map.of("test_label", "test_value"))
 *             .logConfig(WasmPluginLogConfigArgs.builder()
 *                 .enable(true)
 *                 .sampleRate(1.0)
 *                 .minLogLevel("WARN")
 *                 .build())
 *             .versions(WasmPluginVersionArgs.builder()
 *                 .versionName("v1")
 *                 .description("v1 version of my wasm plugin")
 *                 .imageUri(String.format("us-central1-docker.pkg.dev/%s/my-artifact-registry-docker-repository/my-wasm-plugin-data:prod", project.name()))
 *                 .labels(Map.of("test_label", "test_value"))
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * ### Wasm Plugin Basic Generic Repository
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.organizations.OrganizationsFunctions;
 * import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
 * import com.pulumi.gcp.networkservices.WasmPlugin;
 * import com.pulumi.gcp.networkservices.WasmPluginArgs;
 * import com.pulumi.gcp.networkservices.inputs.WasmPluginLogConfigArgs;
 * import com.pulumi.gcp.networkservices.inputs.WasmPluginVersionArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var project = OrganizationsFunctions.getProject(GetProjectArgs.builder()
 *             .build());
 * 
 *         var wasmPlugin = new WasmPlugin("wasmPlugin", WasmPluginArgs.builder()
 *             .name("my-wasm-plugin")
 *             .description("my wasm plugin from a generic repository")
 *             .mainVersionId("v1")
 *             .labels(Map.of("test_label", "test_value"))
 *             .logConfig(WasmPluginLogConfigArgs.builder()
 *                 .enable(true)
 *                 .sampleRate(1.0)
 *                 .minLogLevel("WARN")
 *                 .build())
 *             .versions(WasmPluginVersionArgs.builder()
 *                 .versionName("v1")
 *                 .description("v1 version of my wasm plugin")
 *                 .imageUri(String.format("projects/%s/locations/us-central1/repositories/my-artifact-registry-generic-repository/genericArtifacts/my-wasm-plugin-data:v1", project.name()))
 *                 .labels(Map.of("test_label", "test_value"))
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * WasmPlugin can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/locations/{{location}}/wasmPlugins/{{name}}`
 * 
 * * `{{project}}/{{location}}/{{name}}`
 * 
 * * `{{location}}/{{name}}`
 * 
 * When using the `pulumi import` command, WasmPlugin can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:networkservices/wasmPlugin:WasmPlugin default projects/{{project}}/locations/{{location}}/wasmPlugins/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:networkservices/wasmPlugin:WasmPlugin default {{project}}/{{location}}/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:networkservices/wasmPlugin:WasmPlugin default {{location}}/{{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:networkservices/wasmPlugin:WasmPlugin")
public class WasmPlugin extends com.pulumi.resources.CustomResource {
    /**
     * Output only. The timestamp when the resource was created.
     * 
     */
    @Export(name="createTime", refs={String.class}, tree="[0]")
    private Output<String> createTime;

    /**
     * @return Output only. The timestamp when the resource was created.
     * 
     */
    public Output<String> createTime() {
        return this.createTime;
    }
    /**
     * Optional. A human-readable description of the resource.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return Optional. A human-readable description of the resource.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    @Export(name="effectiveLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> effectiveLabels;

    /**
     * @return All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    public Output<Map<String,String>> effectiveLabels() {
        return this.effectiveLabels;
    }
    /**
     * Optional. Set of labels associated with the WasmPlugin resource.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     * 
     */
    @Export(name="labels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> labels;

    /**
     * @return Optional. Set of labels associated with the WasmPlugin resource.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     * 
     */
    public Output<Optional<Map<String,String>>> labels() {
        return Codegen.optional(this.labels);
    }
    /**
     * The location of the traffic extension
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> location;

    /**
     * @return The location of the traffic extension
     * 
     */
    public Output<Optional<String>> location() {
        return Codegen.optional(this.location);
    }
    /**
     * Optional. Specifies the logging options for the activity performed by this plugin. If logging is enabled, plugin logs are exported to Cloud Logging.
     * Note that the settings relate to the logs generated by using logging statements in your Wasm code.
     * Structure is documented below.
     * 
     */
    @Export(name="logConfig", refs={WasmPluginLogConfig.class}, tree="[0]")
    private Output</* @Nullable */ WasmPluginLogConfig> logConfig;

    /**
     * @return Optional. Specifies the logging options for the activity performed by this plugin. If logging is enabled, plugin logs are exported to Cloud Logging.
     * Note that the settings relate to the logs generated by using logging statements in your Wasm code.
     * Structure is documented below.
     * 
     */
    public Output<Optional<WasmPluginLogConfig>> logConfig() {
        return Codegen.optional(this.logConfig);
    }
    /**
     * The ID of the WasmPluginVersion resource that is the currently serving one. The version referred to must be a child of this WasmPlugin resource and should be listed in the &#34;versions&#34; field.
     * 
     */
    @Export(name="mainVersionId", refs={String.class}, tree="[0]")
    private Output<String> mainVersionId;

    /**
     * @return The ID of the WasmPluginVersion resource that is the currently serving one. The version referred to must be a child of this WasmPlugin resource and should be listed in the &#34;versions&#34; field.
     * 
     */
    public Output<String> mainVersionId() {
        return this.mainVersionId;
    }
    /**
     * Identifier. Name of the WasmPlugin resource.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Identifier. Name of the WasmPlugin resource.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    @Export(name="pulumiLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> pulumiLabels;

    /**
     * @return The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    public Output<Map<String,String>> pulumiLabels() {
        return this.pulumiLabels;
    }
    /**
     * Output only. The timestamp when the resource was updated.
     * 
     */
    @Export(name="updateTime", refs={String.class}, tree="[0]")
    private Output<String> updateTime;

    /**
     * @return Output only. The timestamp when the resource was updated.
     * 
     */
    public Output<String> updateTime() {
        return this.updateTime;
    }
    /**
     * Output only. List of all extensions that use this WasmPlugin resource.
     * Structure is documented below.
     * 
     */
    @Export(name="usedBies", refs={List.class,WasmPluginUsedBy.class}, tree="[0,1]")
    private Output<List<WasmPluginUsedBy>> usedBies;

    /**
     * @return Output only. List of all extensions that use this WasmPlugin resource.
     * Structure is documented below.
     * 
     */
    public Output<List<WasmPluginUsedBy>> usedBies() {
        return this.usedBies;
    }
    /**
     * All versions of this WasmPlugin resource in the key-value format. The key is the resource ID, and the value is the VersionDetails object.
     * Structure is documented below.
     * 
     */
    @Export(name="versions", refs={List.class,WasmPluginVersion.class}, tree="[0,1]")
    private Output<List<WasmPluginVersion>> versions;

    /**
     * @return All versions of this WasmPlugin resource in the key-value format. The key is the resource ID, and the value is the VersionDetails object.
     * Structure is documented below.
     * 
     */
    public Output<List<WasmPluginVersion>> versions() {
        return this.versions;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public WasmPlugin(java.lang.String name) {
        this(name, WasmPluginArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public WasmPlugin(java.lang.String name, WasmPluginArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public WasmPlugin(java.lang.String name, WasmPluginArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:networkservices/wasmPlugin:WasmPlugin", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private WasmPlugin(java.lang.String name, Output<java.lang.String> id, @Nullable WasmPluginState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:networkservices/wasmPlugin:WasmPlugin", name, state, makeResourceOptions(options, id), false);
    }

    private static WasmPluginArgs makeArgs(WasmPluginArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? WasmPluginArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "effectiveLabels",
                "pulumiLabels"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static WasmPlugin get(java.lang.String name, Output<java.lang.String> id, @Nullable WasmPluginState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new WasmPlugin(name, id, state, options);
    }
}
