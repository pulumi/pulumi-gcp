// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class HealthCheckGrpcTlsHealthCheck {
    /**
     * @return The gRPC service name for the health check.
     * The value of grpcServiceName has the following meanings by convention:
     * - Empty serviceName means the overall status of all services at the backend.
     * - Non-empty serviceName means the health of that gRPC service, as defined by the owner of the service.
     *   The grpcServiceName can only be ASCII.
     * 
     */
    private @Nullable String grpcServiceName;
    /**
     * @return The port number for the health check request.
     * Must be specified if port_specification is USE_FIXED_PORT. Valid values are 1 through 65535.
     * 
     */
    private @Nullable Integer port;
    /**
     * @return Specifies how port is selected for health checking, can be one of the
     * following values:
     * * `USE_FIXED_PORT`: The port number in `port` is used for health checking.
     * * `USE_NAMED_PORT`: Not supported for GRPC with TLS health checking.
     * * `USE_SERVING_PORT`: For NetworkEndpointGroup, the port specified for each
     *   network endpoint is used for health checking. For other backends, the
     *   port or named port specified in the Backend Service is used for health
     *   checking.
     *   If not specified, gRPC with TLS health check follows behavior specified in the `port` field.
     *   Possible values are: `USE_FIXED_PORT`, `USE_NAMED_PORT`, `USE_SERVING_PORT`.
     * 
     */
    private @Nullable String portSpecification;

    private HealthCheckGrpcTlsHealthCheck() {}
    /**
     * @return The gRPC service name for the health check.
     * The value of grpcServiceName has the following meanings by convention:
     * - Empty serviceName means the overall status of all services at the backend.
     * - Non-empty serviceName means the health of that gRPC service, as defined by the owner of the service.
     *   The grpcServiceName can only be ASCII.
     * 
     */
    public Optional<String> grpcServiceName() {
        return Optional.ofNullable(this.grpcServiceName);
    }
    /**
     * @return The port number for the health check request.
     * Must be specified if port_specification is USE_FIXED_PORT. Valid values are 1 through 65535.
     * 
     */
    public Optional<Integer> port() {
        return Optional.ofNullable(this.port);
    }
    /**
     * @return Specifies how port is selected for health checking, can be one of the
     * following values:
     * * `USE_FIXED_PORT`: The port number in `port` is used for health checking.
     * * `USE_NAMED_PORT`: Not supported for GRPC with TLS health checking.
     * * `USE_SERVING_PORT`: For NetworkEndpointGroup, the port specified for each
     *   network endpoint is used for health checking. For other backends, the
     *   port or named port specified in the Backend Service is used for health
     *   checking.
     *   If not specified, gRPC with TLS health check follows behavior specified in the `port` field.
     *   Possible values are: `USE_FIXED_PORT`, `USE_NAMED_PORT`, `USE_SERVING_PORT`.
     * 
     */
    public Optional<String> portSpecification() {
        return Optional.ofNullable(this.portSpecification);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(HealthCheckGrpcTlsHealthCheck defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String grpcServiceName;
        private @Nullable Integer port;
        private @Nullable String portSpecification;
        public Builder() {}
        public Builder(HealthCheckGrpcTlsHealthCheck defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.grpcServiceName = defaults.grpcServiceName;
    	      this.port = defaults.port;
    	      this.portSpecification = defaults.portSpecification;
        }

        @CustomType.Setter
        public Builder grpcServiceName(@Nullable String grpcServiceName) {

            this.grpcServiceName = grpcServiceName;
            return this;
        }
        @CustomType.Setter
        public Builder port(@Nullable Integer port) {

            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder portSpecification(@Nullable String portSpecification) {

            this.portSpecification = portSpecification;
            return this;
        }
        public HealthCheckGrpcTlsHealthCheck build() {
            final var _resultValue = new HealthCheckGrpcTlsHealthCheck();
            _resultValue.grpcServiceName = grpcServiceName;
            _resultValue.port = port;
            _resultValue.portSpecification = portSpecification;
            return _resultValue;
        }
    }
}
