// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.alloydb.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.alloydb.outputs.GetClusterAutomatedBackupPolicy;
import com.pulumi.gcp.alloydb.outputs.GetClusterBackupSource;
import com.pulumi.gcp.alloydb.outputs.GetClusterContinuousBackupConfig;
import com.pulumi.gcp.alloydb.outputs.GetClusterContinuousBackupInfo;
import com.pulumi.gcp.alloydb.outputs.GetClusterEncryptionConfig;
import com.pulumi.gcp.alloydb.outputs.GetClusterEncryptionInfo;
import com.pulumi.gcp.alloydb.outputs.GetClusterInitialUser;
import com.pulumi.gcp.alloydb.outputs.GetClusterMaintenanceUpdatePolicy;
import com.pulumi.gcp.alloydb.outputs.GetClusterMigrationSource;
import com.pulumi.gcp.alloydb.outputs.GetClusterNetworkConfig;
import com.pulumi.gcp.alloydb.outputs.GetClusterPscConfig;
import com.pulumi.gcp.alloydb.outputs.GetClusterRestoreBackupSource;
import com.pulumi.gcp.alloydb.outputs.GetClusterRestoreContinuousBackupSource;
import com.pulumi.gcp.alloydb.outputs.GetClusterSecondaryConfig;
import com.pulumi.gcp.alloydb.outputs.GetClusterTrialMetadata;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetClusterResult {
    private Map<String,String> annotations;
    private List<GetClusterAutomatedBackupPolicy> automatedBackupPolicies;
    private List<GetClusterBackupSource> backupSources;
    private String clusterId;
    private String clusterType;
    private List<GetClusterContinuousBackupConfig> continuousBackupConfigs;
    private List<GetClusterContinuousBackupInfo> continuousBackupInfos;
    private String databaseVersion;
    private String deletionPolicy;
    private String displayName;
    private Map<String,String> effectiveAnnotations;
    private Map<String,String> effectiveLabels;
    private List<GetClusterEncryptionConfig> encryptionConfigs;
    private List<GetClusterEncryptionInfo> encryptionInfos;
    private String etag;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private List<GetClusterInitialUser> initialUsers;
    private Map<String,String> labels;
    private @Nullable String location;
    private List<GetClusterMaintenanceUpdatePolicy> maintenanceUpdatePolicies;
    private List<GetClusterMigrationSource> migrationSources;
    private String name;
    private List<GetClusterNetworkConfig> networkConfigs;
    private @Nullable String project;
    private List<GetClusterPscConfig> pscConfigs;
    private Map<String,String> pulumiLabels;
    private Boolean reconciling;
    private List<GetClusterRestoreBackupSource> restoreBackupSources;
    private List<GetClusterRestoreContinuousBackupSource> restoreContinuousBackupSources;
    private List<GetClusterSecondaryConfig> secondaryConfigs;
    private Boolean skipAwaitMajorVersionUpgrade;
    private String state;
    private String subscriptionType;
    private List<GetClusterTrialMetadata> trialMetadatas;
    private String uid;

    private GetClusterResult() {}
    public Map<String,String> annotations() {
        return this.annotations;
    }
    public List<GetClusterAutomatedBackupPolicy> automatedBackupPolicies() {
        return this.automatedBackupPolicies;
    }
    public List<GetClusterBackupSource> backupSources() {
        return this.backupSources;
    }
    public String clusterId() {
        return this.clusterId;
    }
    public String clusterType() {
        return this.clusterType;
    }
    public List<GetClusterContinuousBackupConfig> continuousBackupConfigs() {
        return this.continuousBackupConfigs;
    }
    public List<GetClusterContinuousBackupInfo> continuousBackupInfos() {
        return this.continuousBackupInfos;
    }
    public String databaseVersion() {
        return this.databaseVersion;
    }
    public String deletionPolicy() {
        return this.deletionPolicy;
    }
    public String displayName() {
        return this.displayName;
    }
    public Map<String,String> effectiveAnnotations() {
        return this.effectiveAnnotations;
    }
    public Map<String,String> effectiveLabels() {
        return this.effectiveLabels;
    }
    public List<GetClusterEncryptionConfig> encryptionConfigs() {
        return this.encryptionConfigs;
    }
    public List<GetClusterEncryptionInfo> encryptionInfos() {
        return this.encryptionInfos;
    }
    public String etag() {
        return this.etag;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public List<GetClusterInitialUser> initialUsers() {
        return this.initialUsers;
    }
    public Map<String,String> labels() {
        return this.labels;
    }
    public Optional<String> location() {
        return Optional.ofNullable(this.location);
    }
    public List<GetClusterMaintenanceUpdatePolicy> maintenanceUpdatePolicies() {
        return this.maintenanceUpdatePolicies;
    }
    public List<GetClusterMigrationSource> migrationSources() {
        return this.migrationSources;
    }
    public String name() {
        return this.name;
    }
    public List<GetClusterNetworkConfig> networkConfigs() {
        return this.networkConfigs;
    }
    public Optional<String> project() {
        return Optional.ofNullable(this.project);
    }
    public List<GetClusterPscConfig> pscConfigs() {
        return this.pscConfigs;
    }
    public Map<String,String> pulumiLabels() {
        return this.pulumiLabels;
    }
    public Boolean reconciling() {
        return this.reconciling;
    }
    public List<GetClusterRestoreBackupSource> restoreBackupSources() {
        return this.restoreBackupSources;
    }
    public List<GetClusterRestoreContinuousBackupSource> restoreContinuousBackupSources() {
        return this.restoreContinuousBackupSources;
    }
    public List<GetClusterSecondaryConfig> secondaryConfigs() {
        return this.secondaryConfigs;
    }
    public Boolean skipAwaitMajorVersionUpgrade() {
        return this.skipAwaitMajorVersionUpgrade;
    }
    public String state() {
        return this.state;
    }
    public String subscriptionType() {
        return this.subscriptionType;
    }
    public List<GetClusterTrialMetadata> trialMetadatas() {
        return this.trialMetadatas;
    }
    public String uid() {
        return this.uid;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetClusterResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Map<String,String> annotations;
        private List<GetClusterAutomatedBackupPolicy> automatedBackupPolicies;
        private List<GetClusterBackupSource> backupSources;
        private String clusterId;
        private String clusterType;
        private List<GetClusterContinuousBackupConfig> continuousBackupConfigs;
        private List<GetClusterContinuousBackupInfo> continuousBackupInfos;
        private String databaseVersion;
        private String deletionPolicy;
        private String displayName;
        private Map<String,String> effectiveAnnotations;
        private Map<String,String> effectiveLabels;
        private List<GetClusterEncryptionConfig> encryptionConfigs;
        private List<GetClusterEncryptionInfo> encryptionInfos;
        private String etag;
        private String id;
        private List<GetClusterInitialUser> initialUsers;
        private Map<String,String> labels;
        private @Nullable String location;
        private List<GetClusterMaintenanceUpdatePolicy> maintenanceUpdatePolicies;
        private List<GetClusterMigrationSource> migrationSources;
        private String name;
        private List<GetClusterNetworkConfig> networkConfigs;
        private @Nullable String project;
        private List<GetClusterPscConfig> pscConfigs;
        private Map<String,String> pulumiLabels;
        private Boolean reconciling;
        private List<GetClusterRestoreBackupSource> restoreBackupSources;
        private List<GetClusterRestoreContinuousBackupSource> restoreContinuousBackupSources;
        private List<GetClusterSecondaryConfig> secondaryConfigs;
        private Boolean skipAwaitMajorVersionUpgrade;
        private String state;
        private String subscriptionType;
        private List<GetClusterTrialMetadata> trialMetadatas;
        private String uid;
        public Builder() {}
        public Builder(GetClusterResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.annotations = defaults.annotations;
    	      this.automatedBackupPolicies = defaults.automatedBackupPolicies;
    	      this.backupSources = defaults.backupSources;
    	      this.clusterId = defaults.clusterId;
    	      this.clusterType = defaults.clusterType;
    	      this.continuousBackupConfigs = defaults.continuousBackupConfigs;
    	      this.continuousBackupInfos = defaults.continuousBackupInfos;
    	      this.databaseVersion = defaults.databaseVersion;
    	      this.deletionPolicy = defaults.deletionPolicy;
    	      this.displayName = defaults.displayName;
    	      this.effectiveAnnotations = defaults.effectiveAnnotations;
    	      this.effectiveLabels = defaults.effectiveLabels;
    	      this.encryptionConfigs = defaults.encryptionConfigs;
    	      this.encryptionInfos = defaults.encryptionInfos;
    	      this.etag = defaults.etag;
    	      this.id = defaults.id;
    	      this.initialUsers = defaults.initialUsers;
    	      this.labels = defaults.labels;
    	      this.location = defaults.location;
    	      this.maintenanceUpdatePolicies = defaults.maintenanceUpdatePolicies;
    	      this.migrationSources = defaults.migrationSources;
    	      this.name = defaults.name;
    	      this.networkConfigs = defaults.networkConfigs;
    	      this.project = defaults.project;
    	      this.pscConfigs = defaults.pscConfigs;
    	      this.pulumiLabels = defaults.pulumiLabels;
    	      this.reconciling = defaults.reconciling;
    	      this.restoreBackupSources = defaults.restoreBackupSources;
    	      this.restoreContinuousBackupSources = defaults.restoreContinuousBackupSources;
    	      this.secondaryConfigs = defaults.secondaryConfigs;
    	      this.skipAwaitMajorVersionUpgrade = defaults.skipAwaitMajorVersionUpgrade;
    	      this.state = defaults.state;
    	      this.subscriptionType = defaults.subscriptionType;
    	      this.trialMetadatas = defaults.trialMetadatas;
    	      this.uid = defaults.uid;
        }

        @CustomType.Setter
        public Builder annotations(Map<String,String> annotations) {
            if (annotations == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "annotations");
            }
            this.annotations = annotations;
            return this;
        }
        @CustomType.Setter
        public Builder automatedBackupPolicies(List<GetClusterAutomatedBackupPolicy> automatedBackupPolicies) {
            if (automatedBackupPolicies == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "automatedBackupPolicies");
            }
            this.automatedBackupPolicies = automatedBackupPolicies;
            return this;
        }
        public Builder automatedBackupPolicies(GetClusterAutomatedBackupPolicy... automatedBackupPolicies) {
            return automatedBackupPolicies(List.of(automatedBackupPolicies));
        }
        @CustomType.Setter
        public Builder backupSources(List<GetClusterBackupSource> backupSources) {
            if (backupSources == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "backupSources");
            }
            this.backupSources = backupSources;
            return this;
        }
        public Builder backupSources(GetClusterBackupSource... backupSources) {
            return backupSources(List.of(backupSources));
        }
        @CustomType.Setter
        public Builder clusterId(String clusterId) {
            if (clusterId == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "clusterId");
            }
            this.clusterId = clusterId;
            return this;
        }
        @CustomType.Setter
        public Builder clusterType(String clusterType) {
            if (clusterType == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "clusterType");
            }
            this.clusterType = clusterType;
            return this;
        }
        @CustomType.Setter
        public Builder continuousBackupConfigs(List<GetClusterContinuousBackupConfig> continuousBackupConfigs) {
            if (continuousBackupConfigs == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "continuousBackupConfigs");
            }
            this.continuousBackupConfigs = continuousBackupConfigs;
            return this;
        }
        public Builder continuousBackupConfigs(GetClusterContinuousBackupConfig... continuousBackupConfigs) {
            return continuousBackupConfigs(List.of(continuousBackupConfigs));
        }
        @CustomType.Setter
        public Builder continuousBackupInfos(List<GetClusterContinuousBackupInfo> continuousBackupInfos) {
            if (continuousBackupInfos == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "continuousBackupInfos");
            }
            this.continuousBackupInfos = continuousBackupInfos;
            return this;
        }
        public Builder continuousBackupInfos(GetClusterContinuousBackupInfo... continuousBackupInfos) {
            return continuousBackupInfos(List.of(continuousBackupInfos));
        }
        @CustomType.Setter
        public Builder databaseVersion(String databaseVersion) {
            if (databaseVersion == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "databaseVersion");
            }
            this.databaseVersion = databaseVersion;
            return this;
        }
        @CustomType.Setter
        public Builder deletionPolicy(String deletionPolicy) {
            if (deletionPolicy == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "deletionPolicy");
            }
            this.deletionPolicy = deletionPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder effectiveAnnotations(Map<String,String> effectiveAnnotations) {
            if (effectiveAnnotations == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "effectiveAnnotations");
            }
            this.effectiveAnnotations = effectiveAnnotations;
            return this;
        }
        @CustomType.Setter
        public Builder effectiveLabels(Map<String,String> effectiveLabels) {
            if (effectiveLabels == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "effectiveLabels");
            }
            this.effectiveLabels = effectiveLabels;
            return this;
        }
        @CustomType.Setter
        public Builder encryptionConfigs(List<GetClusterEncryptionConfig> encryptionConfigs) {
            if (encryptionConfigs == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "encryptionConfigs");
            }
            this.encryptionConfigs = encryptionConfigs;
            return this;
        }
        public Builder encryptionConfigs(GetClusterEncryptionConfig... encryptionConfigs) {
            return encryptionConfigs(List.of(encryptionConfigs));
        }
        @CustomType.Setter
        public Builder encryptionInfos(List<GetClusterEncryptionInfo> encryptionInfos) {
            if (encryptionInfos == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "encryptionInfos");
            }
            this.encryptionInfos = encryptionInfos;
            return this;
        }
        public Builder encryptionInfos(GetClusterEncryptionInfo... encryptionInfos) {
            return encryptionInfos(List.of(encryptionInfos));
        }
        @CustomType.Setter
        public Builder etag(String etag) {
            if (etag == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "etag");
            }
            this.etag = etag;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder initialUsers(List<GetClusterInitialUser> initialUsers) {
            if (initialUsers == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "initialUsers");
            }
            this.initialUsers = initialUsers;
            return this;
        }
        public Builder initialUsers(GetClusterInitialUser... initialUsers) {
            return initialUsers(List.of(initialUsers));
        }
        @CustomType.Setter
        public Builder labels(Map<String,String> labels) {
            if (labels == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "labels");
            }
            this.labels = labels;
            return this;
        }
        @CustomType.Setter
        public Builder location(@Nullable String location) {

            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder maintenanceUpdatePolicies(List<GetClusterMaintenanceUpdatePolicy> maintenanceUpdatePolicies) {
            if (maintenanceUpdatePolicies == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "maintenanceUpdatePolicies");
            }
            this.maintenanceUpdatePolicies = maintenanceUpdatePolicies;
            return this;
        }
        public Builder maintenanceUpdatePolicies(GetClusterMaintenanceUpdatePolicy... maintenanceUpdatePolicies) {
            return maintenanceUpdatePolicies(List.of(maintenanceUpdatePolicies));
        }
        @CustomType.Setter
        public Builder migrationSources(List<GetClusterMigrationSource> migrationSources) {
            if (migrationSources == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "migrationSources");
            }
            this.migrationSources = migrationSources;
            return this;
        }
        public Builder migrationSources(GetClusterMigrationSource... migrationSources) {
            return migrationSources(List.of(migrationSources));
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder networkConfigs(List<GetClusterNetworkConfig> networkConfigs) {
            if (networkConfigs == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "networkConfigs");
            }
            this.networkConfigs = networkConfigs;
            return this;
        }
        public Builder networkConfigs(GetClusterNetworkConfig... networkConfigs) {
            return networkConfigs(List.of(networkConfigs));
        }
        @CustomType.Setter
        public Builder project(@Nullable String project) {

            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder pscConfigs(List<GetClusterPscConfig> pscConfigs) {
            if (pscConfigs == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "pscConfigs");
            }
            this.pscConfigs = pscConfigs;
            return this;
        }
        public Builder pscConfigs(GetClusterPscConfig... pscConfigs) {
            return pscConfigs(List.of(pscConfigs));
        }
        @CustomType.Setter
        public Builder pulumiLabels(Map<String,String> pulumiLabels) {
            if (pulumiLabels == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "pulumiLabels");
            }
            this.pulumiLabels = pulumiLabels;
            return this;
        }
        @CustomType.Setter
        public Builder reconciling(Boolean reconciling) {
            if (reconciling == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "reconciling");
            }
            this.reconciling = reconciling;
            return this;
        }
        @CustomType.Setter
        public Builder restoreBackupSources(List<GetClusterRestoreBackupSource> restoreBackupSources) {
            if (restoreBackupSources == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "restoreBackupSources");
            }
            this.restoreBackupSources = restoreBackupSources;
            return this;
        }
        public Builder restoreBackupSources(GetClusterRestoreBackupSource... restoreBackupSources) {
            return restoreBackupSources(List.of(restoreBackupSources));
        }
        @CustomType.Setter
        public Builder restoreContinuousBackupSources(List<GetClusterRestoreContinuousBackupSource> restoreContinuousBackupSources) {
            if (restoreContinuousBackupSources == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "restoreContinuousBackupSources");
            }
            this.restoreContinuousBackupSources = restoreContinuousBackupSources;
            return this;
        }
        public Builder restoreContinuousBackupSources(GetClusterRestoreContinuousBackupSource... restoreContinuousBackupSources) {
            return restoreContinuousBackupSources(List.of(restoreContinuousBackupSources));
        }
        @CustomType.Setter
        public Builder secondaryConfigs(List<GetClusterSecondaryConfig> secondaryConfigs) {
            if (secondaryConfigs == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "secondaryConfigs");
            }
            this.secondaryConfigs = secondaryConfigs;
            return this;
        }
        public Builder secondaryConfigs(GetClusterSecondaryConfig... secondaryConfigs) {
            return secondaryConfigs(List.of(secondaryConfigs));
        }
        @CustomType.Setter
        public Builder skipAwaitMajorVersionUpgrade(Boolean skipAwaitMajorVersionUpgrade) {
            if (skipAwaitMajorVersionUpgrade == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "skipAwaitMajorVersionUpgrade");
            }
            this.skipAwaitMajorVersionUpgrade = skipAwaitMajorVersionUpgrade;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder subscriptionType(String subscriptionType) {
            if (subscriptionType == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "subscriptionType");
            }
            this.subscriptionType = subscriptionType;
            return this;
        }
        @CustomType.Setter
        public Builder trialMetadatas(List<GetClusterTrialMetadata> trialMetadatas) {
            if (trialMetadatas == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "trialMetadatas");
            }
            this.trialMetadatas = trialMetadatas;
            return this;
        }
        public Builder trialMetadatas(GetClusterTrialMetadata... trialMetadatas) {
            return trialMetadatas(List.of(trialMetadatas));
        }
        @CustomType.Setter
        public Builder uid(String uid) {
            if (uid == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "uid");
            }
            this.uid = uid;
            return this;
        }
        public GetClusterResult build() {
            final var _resultValue = new GetClusterResult();
            _resultValue.annotations = annotations;
            _resultValue.automatedBackupPolicies = automatedBackupPolicies;
            _resultValue.backupSources = backupSources;
            _resultValue.clusterId = clusterId;
            _resultValue.clusterType = clusterType;
            _resultValue.continuousBackupConfigs = continuousBackupConfigs;
            _resultValue.continuousBackupInfos = continuousBackupInfos;
            _resultValue.databaseVersion = databaseVersion;
            _resultValue.deletionPolicy = deletionPolicy;
            _resultValue.displayName = displayName;
            _resultValue.effectiveAnnotations = effectiveAnnotations;
            _resultValue.effectiveLabels = effectiveLabels;
            _resultValue.encryptionConfigs = encryptionConfigs;
            _resultValue.encryptionInfos = encryptionInfos;
            _resultValue.etag = etag;
            _resultValue.id = id;
            _resultValue.initialUsers = initialUsers;
            _resultValue.labels = labels;
            _resultValue.location = location;
            _resultValue.maintenanceUpdatePolicies = maintenanceUpdatePolicies;
            _resultValue.migrationSources = migrationSources;
            _resultValue.name = name;
            _resultValue.networkConfigs = networkConfigs;
            _resultValue.project = project;
            _resultValue.pscConfigs = pscConfigs;
            _resultValue.pulumiLabels = pulumiLabels;
            _resultValue.reconciling = reconciling;
            _resultValue.restoreBackupSources = restoreBackupSources;
            _resultValue.restoreContinuousBackupSources = restoreContinuousBackupSources;
            _resultValue.secondaryConfigs = secondaryConfigs;
            _resultValue.skipAwaitMajorVersionUpgrade = skipAwaitMajorVersionUpgrade;
            _resultValue.state = state;
            _resultValue.subscriptionType = subscriptionType;
            _resultValue.trialMetadatas = trialMetadatas;
            _resultValue.uid = uid;
            return _resultValue;
        }
    }
}
