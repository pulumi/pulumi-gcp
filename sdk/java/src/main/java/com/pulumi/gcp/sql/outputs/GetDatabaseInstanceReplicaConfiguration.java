// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.sql.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetDatabaseInstanceReplicaConfiguration {
    private String caCertificate;
    private String clientCertificate;
    private String clientKey;
    private Integer connectRetryInterval;
    private String dumpFilePath;
    private Boolean failoverTarget;
    private Integer masterHeartbeatPeriod;
    private String password;
    private String sslCipher;
    private String username;
    private Boolean verifyServerCertificate;

    private GetDatabaseInstanceReplicaConfiguration() {}
    public String caCertificate() {
        return this.caCertificate;
    }
    public String clientCertificate() {
        return this.clientCertificate;
    }
    public String clientKey() {
        return this.clientKey;
    }
    public Integer connectRetryInterval() {
        return this.connectRetryInterval;
    }
    public String dumpFilePath() {
        return this.dumpFilePath;
    }
    public Boolean failoverTarget() {
        return this.failoverTarget;
    }
    public Integer masterHeartbeatPeriod() {
        return this.masterHeartbeatPeriod;
    }
    public String password() {
        return this.password;
    }
    public String sslCipher() {
        return this.sslCipher;
    }
    public String username() {
        return this.username;
    }
    public Boolean verifyServerCertificate() {
        return this.verifyServerCertificate;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDatabaseInstanceReplicaConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String caCertificate;
        private String clientCertificate;
        private String clientKey;
        private Integer connectRetryInterval;
        private String dumpFilePath;
        private Boolean failoverTarget;
        private Integer masterHeartbeatPeriod;
        private String password;
        private String sslCipher;
        private String username;
        private Boolean verifyServerCertificate;
        public Builder() {}
        public Builder(GetDatabaseInstanceReplicaConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.caCertificate = defaults.caCertificate;
    	      this.clientCertificate = defaults.clientCertificate;
    	      this.clientKey = defaults.clientKey;
    	      this.connectRetryInterval = defaults.connectRetryInterval;
    	      this.dumpFilePath = defaults.dumpFilePath;
    	      this.failoverTarget = defaults.failoverTarget;
    	      this.masterHeartbeatPeriod = defaults.masterHeartbeatPeriod;
    	      this.password = defaults.password;
    	      this.sslCipher = defaults.sslCipher;
    	      this.username = defaults.username;
    	      this.verifyServerCertificate = defaults.verifyServerCertificate;
        }

        @CustomType.Setter
        public Builder caCertificate(String caCertificate) {
            if (caCertificate == null) {
              throw new MissingRequiredPropertyException("GetDatabaseInstanceReplicaConfiguration", "caCertificate");
            }
            this.caCertificate = caCertificate;
            return this;
        }
        @CustomType.Setter
        public Builder clientCertificate(String clientCertificate) {
            if (clientCertificate == null) {
              throw new MissingRequiredPropertyException("GetDatabaseInstanceReplicaConfiguration", "clientCertificate");
            }
            this.clientCertificate = clientCertificate;
            return this;
        }
        @CustomType.Setter
        public Builder clientKey(String clientKey) {
            if (clientKey == null) {
              throw new MissingRequiredPropertyException("GetDatabaseInstanceReplicaConfiguration", "clientKey");
            }
            this.clientKey = clientKey;
            return this;
        }
        @CustomType.Setter
        public Builder connectRetryInterval(Integer connectRetryInterval) {
            if (connectRetryInterval == null) {
              throw new MissingRequiredPropertyException("GetDatabaseInstanceReplicaConfiguration", "connectRetryInterval");
            }
            this.connectRetryInterval = connectRetryInterval;
            return this;
        }
        @CustomType.Setter
        public Builder dumpFilePath(String dumpFilePath) {
            if (dumpFilePath == null) {
              throw new MissingRequiredPropertyException("GetDatabaseInstanceReplicaConfiguration", "dumpFilePath");
            }
            this.dumpFilePath = dumpFilePath;
            return this;
        }
        @CustomType.Setter
        public Builder failoverTarget(Boolean failoverTarget) {
            if (failoverTarget == null) {
              throw new MissingRequiredPropertyException("GetDatabaseInstanceReplicaConfiguration", "failoverTarget");
            }
            this.failoverTarget = failoverTarget;
            return this;
        }
        @CustomType.Setter
        public Builder masterHeartbeatPeriod(Integer masterHeartbeatPeriod) {
            if (masterHeartbeatPeriod == null) {
              throw new MissingRequiredPropertyException("GetDatabaseInstanceReplicaConfiguration", "masterHeartbeatPeriod");
            }
            this.masterHeartbeatPeriod = masterHeartbeatPeriod;
            return this;
        }
        @CustomType.Setter
        public Builder password(String password) {
            if (password == null) {
              throw new MissingRequiredPropertyException("GetDatabaseInstanceReplicaConfiguration", "password");
            }
            this.password = password;
            return this;
        }
        @CustomType.Setter
        public Builder sslCipher(String sslCipher) {
            if (sslCipher == null) {
              throw new MissingRequiredPropertyException("GetDatabaseInstanceReplicaConfiguration", "sslCipher");
            }
            this.sslCipher = sslCipher;
            return this;
        }
        @CustomType.Setter
        public Builder username(String username) {
            if (username == null) {
              throw new MissingRequiredPropertyException("GetDatabaseInstanceReplicaConfiguration", "username");
            }
            this.username = username;
            return this;
        }
        @CustomType.Setter
        public Builder verifyServerCertificate(Boolean verifyServerCertificate) {
            if (verifyServerCertificate == null) {
              throw new MissingRequiredPropertyException("GetDatabaseInstanceReplicaConfiguration", "verifyServerCertificate");
            }
            this.verifyServerCertificate = verifyServerCertificate;
            return this;
        }
        public GetDatabaseInstanceReplicaConfiguration build() {
            final var _resultValue = new GetDatabaseInstanceReplicaConfiguration();
            _resultValue.caCertificate = caCertificate;
            _resultValue.clientCertificate = clientCertificate;
            _resultValue.clientKey = clientKey;
            _resultValue.connectRetryInterval = connectRetryInterval;
            _resultValue.dumpFilePath = dumpFilePath;
            _resultValue.failoverTarget = failoverTarget;
            _resultValue.masterHeartbeatPeriod = masterHeartbeatPeriod;
            _resultValue.password = password;
            _resultValue.sslCipher = sslCipher;
            _resultValue.username = username;
            _resultValue.verifyServerCertificate = verifyServerCertificate;
            return _resultValue;
        }
    }
}
