// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.sql.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetDatabaseInstanceReplicaConfiguration {
    private final String caCertificate;
    private final String clientCertificate;
    private final String clientKey;
    private final Integer connectRetryInterval;
    private final String dumpFilePath;
    private final Boolean failoverTarget;
    private final Integer masterHeartbeatPeriod;
    private final String password;
    private final String sslCipher;
    private final String username;
    private final Boolean verifyServerCertificate;

    @CustomType.Constructor
    private GetDatabaseInstanceReplicaConfiguration(
        @CustomType.Parameter("caCertificate") String caCertificate,
        @CustomType.Parameter("clientCertificate") String clientCertificate,
        @CustomType.Parameter("clientKey") String clientKey,
        @CustomType.Parameter("connectRetryInterval") Integer connectRetryInterval,
        @CustomType.Parameter("dumpFilePath") String dumpFilePath,
        @CustomType.Parameter("failoverTarget") Boolean failoverTarget,
        @CustomType.Parameter("masterHeartbeatPeriod") Integer masterHeartbeatPeriod,
        @CustomType.Parameter("password") String password,
        @CustomType.Parameter("sslCipher") String sslCipher,
        @CustomType.Parameter("username") String username,
        @CustomType.Parameter("verifyServerCertificate") Boolean verifyServerCertificate) {
        this.caCertificate = caCertificate;
        this.clientCertificate = clientCertificate;
        this.clientKey = clientKey;
        this.connectRetryInterval = connectRetryInterval;
        this.dumpFilePath = dumpFilePath;
        this.failoverTarget = failoverTarget;
        this.masterHeartbeatPeriod = masterHeartbeatPeriod;
        this.password = password;
        this.sslCipher = sslCipher;
        this.username = username;
        this.verifyServerCertificate = verifyServerCertificate;
    }

    public String caCertificate() {
        return this.caCertificate;
    }
    public String clientCertificate() {
        return this.clientCertificate;
    }
    public String clientKey() {
        return this.clientKey;
    }
    public Integer connectRetryInterval() {
        return this.connectRetryInterval;
    }
    public String dumpFilePath() {
        return this.dumpFilePath;
    }
    public Boolean failoverTarget() {
        return this.failoverTarget;
    }
    public Integer masterHeartbeatPeriod() {
        return this.masterHeartbeatPeriod;
    }
    public String password() {
        return this.password;
    }
    public String sslCipher() {
        return this.sslCipher;
    }
    public String username() {
        return this.username;
    }
    public Boolean verifyServerCertificate() {
        return this.verifyServerCertificate;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDatabaseInstanceReplicaConfiguration defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String caCertificate;
        private String clientCertificate;
        private String clientKey;
        private Integer connectRetryInterval;
        private String dumpFilePath;
        private Boolean failoverTarget;
        private Integer masterHeartbeatPeriod;
        private String password;
        private String sslCipher;
        private String username;
        private Boolean verifyServerCertificate;

        public Builder() {
    	      // Empty
        }

        public Builder(GetDatabaseInstanceReplicaConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.caCertificate = defaults.caCertificate;
    	      this.clientCertificate = defaults.clientCertificate;
    	      this.clientKey = defaults.clientKey;
    	      this.connectRetryInterval = defaults.connectRetryInterval;
    	      this.dumpFilePath = defaults.dumpFilePath;
    	      this.failoverTarget = defaults.failoverTarget;
    	      this.masterHeartbeatPeriod = defaults.masterHeartbeatPeriod;
    	      this.password = defaults.password;
    	      this.sslCipher = defaults.sslCipher;
    	      this.username = defaults.username;
    	      this.verifyServerCertificate = defaults.verifyServerCertificate;
        }

        public Builder caCertificate(String caCertificate) {
            this.caCertificate = Objects.requireNonNull(caCertificate);
            return this;
        }
        public Builder clientCertificate(String clientCertificate) {
            this.clientCertificate = Objects.requireNonNull(clientCertificate);
            return this;
        }
        public Builder clientKey(String clientKey) {
            this.clientKey = Objects.requireNonNull(clientKey);
            return this;
        }
        public Builder connectRetryInterval(Integer connectRetryInterval) {
            this.connectRetryInterval = Objects.requireNonNull(connectRetryInterval);
            return this;
        }
        public Builder dumpFilePath(String dumpFilePath) {
            this.dumpFilePath = Objects.requireNonNull(dumpFilePath);
            return this;
        }
        public Builder failoverTarget(Boolean failoverTarget) {
            this.failoverTarget = Objects.requireNonNull(failoverTarget);
            return this;
        }
        public Builder masterHeartbeatPeriod(Integer masterHeartbeatPeriod) {
            this.masterHeartbeatPeriod = Objects.requireNonNull(masterHeartbeatPeriod);
            return this;
        }
        public Builder password(String password) {
            this.password = Objects.requireNonNull(password);
            return this;
        }
        public Builder sslCipher(String sslCipher) {
            this.sslCipher = Objects.requireNonNull(sslCipher);
            return this;
        }
        public Builder username(String username) {
            this.username = Objects.requireNonNull(username);
            return this;
        }
        public Builder verifyServerCertificate(Boolean verifyServerCertificate) {
            this.verifyServerCertificate = Objects.requireNonNull(verifyServerCertificate);
            return this;
        }        public GetDatabaseInstanceReplicaConfiguration build() {
            return new GetDatabaseInstanceReplicaConfiguration(caCertificate, clientCertificate, clientKey, connectRetryInterval, dumpFilePath, failoverTarget, masterHeartbeatPeriod, password, sslCipher, username, verifyServerCertificate);
        }
    }
}
