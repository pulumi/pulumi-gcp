// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.sql.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetDatabaseInstanceReplicaConfiguration {
    private String caCertificate;
    private String clientCertificate;
    private String clientKey;
    private Integer connectRetryInterval;
    private String dumpFilePath;
    private Boolean failoverTarget;
    private Integer masterHeartbeatPeriod;
    private String password;
    private String sslCipher;
    private String username;
    private Boolean verifyServerCertificate;

    private GetDatabaseInstanceReplicaConfiguration() {}
    public String caCertificate() {
        return this.caCertificate;
    }
    public String clientCertificate() {
        return this.clientCertificate;
    }
    public String clientKey() {
        return this.clientKey;
    }
    public Integer connectRetryInterval() {
        return this.connectRetryInterval;
    }
    public String dumpFilePath() {
        return this.dumpFilePath;
    }
    public Boolean failoverTarget() {
        return this.failoverTarget;
    }
    public Integer masterHeartbeatPeriod() {
        return this.masterHeartbeatPeriod;
    }
    public String password() {
        return this.password;
    }
    public String sslCipher() {
        return this.sslCipher;
    }
    public String username() {
        return this.username;
    }
    public Boolean verifyServerCertificate() {
        return this.verifyServerCertificate;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDatabaseInstanceReplicaConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String caCertificate;
        private String clientCertificate;
        private String clientKey;
        private Integer connectRetryInterval;
        private String dumpFilePath;
        private Boolean failoverTarget;
        private Integer masterHeartbeatPeriod;
        private String password;
        private String sslCipher;
        private String username;
        private Boolean verifyServerCertificate;
        public Builder() {}
        public Builder(GetDatabaseInstanceReplicaConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.caCertificate = defaults.caCertificate;
    	      this.clientCertificate = defaults.clientCertificate;
    	      this.clientKey = defaults.clientKey;
    	      this.connectRetryInterval = defaults.connectRetryInterval;
    	      this.dumpFilePath = defaults.dumpFilePath;
    	      this.failoverTarget = defaults.failoverTarget;
    	      this.masterHeartbeatPeriod = defaults.masterHeartbeatPeriod;
    	      this.password = defaults.password;
    	      this.sslCipher = defaults.sslCipher;
    	      this.username = defaults.username;
    	      this.verifyServerCertificate = defaults.verifyServerCertificate;
        }

        @CustomType.Setter
        public Builder caCertificate(String caCertificate) {
            this.caCertificate = Objects.requireNonNull(caCertificate);
            return this;
        }
        @CustomType.Setter
        public Builder clientCertificate(String clientCertificate) {
            this.clientCertificate = Objects.requireNonNull(clientCertificate);
            return this;
        }
        @CustomType.Setter
        public Builder clientKey(String clientKey) {
            this.clientKey = Objects.requireNonNull(clientKey);
            return this;
        }
        @CustomType.Setter
        public Builder connectRetryInterval(Integer connectRetryInterval) {
            this.connectRetryInterval = Objects.requireNonNull(connectRetryInterval);
            return this;
        }
        @CustomType.Setter
        public Builder dumpFilePath(String dumpFilePath) {
            this.dumpFilePath = Objects.requireNonNull(dumpFilePath);
            return this;
        }
        @CustomType.Setter
        public Builder failoverTarget(Boolean failoverTarget) {
            this.failoverTarget = Objects.requireNonNull(failoverTarget);
            return this;
        }
        @CustomType.Setter
        public Builder masterHeartbeatPeriod(Integer masterHeartbeatPeriod) {
            this.masterHeartbeatPeriod = Objects.requireNonNull(masterHeartbeatPeriod);
            return this;
        }
        @CustomType.Setter
        public Builder password(String password) {
            this.password = Objects.requireNonNull(password);
            return this;
        }
        @CustomType.Setter
        public Builder sslCipher(String sslCipher) {
            this.sslCipher = Objects.requireNonNull(sslCipher);
            return this;
        }
        @CustomType.Setter
        public Builder username(String username) {
            this.username = Objects.requireNonNull(username);
            return this;
        }
        @CustomType.Setter
        public Builder verifyServerCertificate(Boolean verifyServerCertificate) {
            this.verifyServerCertificate = Objects.requireNonNull(verifyServerCertificate);
            return this;
        }
        public GetDatabaseInstanceReplicaConfiguration build() {
            final var o = new GetDatabaseInstanceReplicaConfiguration();
            o.caCertificate = caCertificate;
            o.clientCertificate = clientCertificate;
            o.clientKey = clientKey;
            o.connectRetryInterval = connectRetryInterval;
            o.dumpFilePath = dumpFilePath;
            o.failoverTarget = failoverTarget;
            o.masterHeartbeatPeriod = masterHeartbeatPeriod;
            o.password = password;
            o.sslCipher = sslCipher;
            o.username = username;
            o.verifyServerCertificate = verifyServerCertificate;
            return o;
        }
    }
}
