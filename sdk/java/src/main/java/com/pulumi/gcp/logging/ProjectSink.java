// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.logging;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.logging.ProjectSinkArgs;
import com.pulumi.gcp.logging.inputs.ProjectSinkState;
import com.pulumi.gcp.logging.outputs.ProjectSinkBigqueryOptions;
import com.pulumi.gcp.logging.outputs.ProjectSinkExclusion;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.logging.ProjectSink;
 * import com.pulumi.gcp.logging.ProjectSinkArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var my_sink = new ProjectSink(&#34;my-sink&#34;, ProjectSinkArgs.builder()        
 *             .destination(&#34;pubsub.googleapis.com/projects/my-project/topics/instance-activity&#34;)
 *             .filter(&#34;resource.type = gce_instance AND severity &gt;= WARNING&#34;)
 *             .uniqueWriterIdentity(true)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * A more complete example follows: this creates a compute instance, as well as a log sink that logs all activity to a
 * cloud storage bucket. Because we are using `unique_writer_identity`, we must grant it access to the bucket. Note that
 * this grant requires the &#34;Project IAM Admin&#34; IAM role (`roles/resourcemanager.projectIamAdmin`) granted to the credentials
 * used with this provider.
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.Instance;
 * import com.pulumi.gcp.compute.InstanceArgs;
 * import com.pulumi.gcp.compute.inputs.InstanceBootDiskArgs;
 * import com.pulumi.gcp.compute.inputs.InstanceBootDiskInitializeParamsArgs;
 * import com.pulumi.gcp.compute.inputs.InstanceNetworkInterfaceArgs;
 * import com.pulumi.gcp.storage.Bucket;
 * import com.pulumi.gcp.storage.BucketArgs;
 * import com.pulumi.gcp.logging.ProjectSink;
 * import com.pulumi.gcp.logging.ProjectSinkArgs;
 * import com.pulumi.gcp.projects.IAMBinding;
 * import com.pulumi.gcp.projects.IAMBindingArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var my_logged_instance = new Instance(&#34;my-logged-instance&#34;, InstanceArgs.builder()        
 *             .machineType(&#34;e2-medium&#34;)
 *             .zone(&#34;us-central1-a&#34;)
 *             .bootDisk(InstanceBootDiskArgs.builder()
 *                 .initializeParams(InstanceBootDiskInitializeParamsArgs.builder()
 *                     .image(&#34;debian-cloud/debian-9&#34;)
 *                     .build())
 *                 .build())
 *             .networkInterfaces(InstanceNetworkInterfaceArgs.builder()
 *                 .network(&#34;default&#34;)
 *                 .accessConfigs()
 *                 .build())
 *             .build());
 * 
 *         var log_bucket = new Bucket(&#34;log-bucket&#34;, BucketArgs.builder()        
 *             .location(&#34;US&#34;)
 *             .build());
 * 
 *         var instance_sink = new ProjectSink(&#34;instance-sink&#34;, ProjectSinkArgs.builder()        
 *             .description(&#34;some explanation on what this is&#34;)
 *             .destination(log_bucket.name().applyValue(name -&gt; String.format(&#34;storage.googleapis.com/%s&#34;, name)))
 *             .filter(my_logged_instance.instanceId().applyValue(instanceId -&gt; String.format(&#34;resource.type = gce_instance AND resource.labels.instance_id = \&#34;%s\&#34;&#34;, instanceId)))
 *             .uniqueWriterIdentity(true)
 *             .build());
 * 
 *         var log_writer = new IAMBinding(&#34;log-writer&#34;, IAMBindingArgs.builder()        
 *             .project(&#34;your-project-id&#34;)
 *             .role(&#34;roles/storage.objectCreator&#34;)
 *             .members(instance_sink.writerIdentity())
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * The following example uses `exclusions` to filter logs that will not be exported. In this example logs are exported to a [log bucket](https://cloud.google.com/logging/docs/buckets) and there are 2 exclusions configured
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.logging.ProjectSink;
 * import com.pulumi.gcp.logging.ProjectSinkArgs;
 * import com.pulumi.gcp.logging.inputs.ProjectSinkExclusionArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var log_bucket = new ProjectSink(&#34;log-bucket&#34;, ProjectSinkArgs.builder()        
 *             .destination(&#34;logging.googleapis.com/projects/my-project/locations/global/buckets/_Default&#34;)
 *             .exclusions(            
 *                 ProjectSinkExclusionArgs.builder()
 *                     .description(&#34;Exclude logs from namespace-1 in k8s&#34;)
 *                     .filter(&#34;resource.type = k8s_container resource.labels.namespace_name=\&#34;namespace-1\&#34; &#34;)
 *                     .name(&#34;nsexcllusion1&#34;)
 *                     .build(),
 *                 ProjectSinkExclusionArgs.builder()
 *                     .description(&#34;Exclude logs from namespace-2 in k8s&#34;)
 *                     .filter(&#34;resource.type = k8s_container resource.labels.namespace_name=\&#34;namespace-2\&#34; &#34;)
 *                     .name(&#34;nsexcllusion2&#34;)
 *                     .build())
 *             .uniqueWriterIdentity(true)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * Project-level logging sinks can be imported using their URI, e.g.
 * 
 * ```sh
 *  $ pulumi import gcp:logging/projectSink:ProjectSink my_sink projects/my-project/sinks/my-sink
 * ```
 * 
 */
@ResourceType(type="gcp:logging/projectSink:ProjectSink")
public class ProjectSink extends com.pulumi.resources.CustomResource {
    /**
     * Options that affect sinks exporting data to BigQuery. Structure documented below.
     * 
     */
    @Export(name="bigqueryOptions", type=ProjectSinkBigqueryOptions.class, parameters={})
    private Output<ProjectSinkBigqueryOptions> bigqueryOptions;

    /**
     * @return Options that affect sinks exporting data to BigQuery. Structure documented below.
     * 
     */
    public Output<ProjectSinkBigqueryOptions> bigqueryOptions() {
        return this.bigqueryOptions;
    }
    /**
     * A description of this exclusion.
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output</* @Nullable */ String> description;

    /**
     * @return A description of this exclusion.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * The destination of the sink (or, in other words, where logs are written to). Can be a
     * Cloud Storage bucket, a PubSub topic, a BigQuery dataset or a Cloud Logging bucket . Examples:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *     }
     * }
     * ```
     * The writer associated with the sink must have access to write to the above resource.
     * 
     */
    @Export(name="destination", type=String.class, parameters={})
    private Output<String> destination;

    /**
     * @return The destination of the sink (or, in other words, where logs are written to). Can be a
     * Cloud Storage bucket, a PubSub topic, a BigQuery dataset or a Cloud Logging bucket . Examples:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *     }
     * }
     * ```
     * The writer associated with the sink must have access to write to the above resource.
     * 
     */
    public Output<String> destination() {
        return this.destination;
    }
    /**
     * If set to True, then this exclusion is disabled and it does not exclude any log entries.
     * 
     */
    @Export(name="disabled", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> disabled;

    /**
     * @return If set to True, then this exclusion is disabled and it does not exclude any log entries.
     * 
     */
    public Output<Optional<Boolean>> disabled() {
        return Codegen.optional(this.disabled);
    }
    /**
     * Log entries that match any of the exclusion filters will not be exported. If a log entry is matched by both filter and one of exclusion_filters it will not be exported.  Can be repeated multiple times for multiple exclusions. Structure is documented below.
     * 
     */
    @Export(name="exclusions", type=List.class, parameters={ProjectSinkExclusion.class})
    private Output</* @Nullable */ List<ProjectSinkExclusion>> exclusions;

    /**
     * @return Log entries that match any of the exclusion filters will not be exported. If a log entry is matched by both filter and one of exclusion_filters it will not be exported.  Can be repeated multiple times for multiple exclusions. Structure is documented below.
     * 
     */
    public Output<Optional<List<ProjectSinkExclusion>>> exclusions() {
        return Codegen.optional(this.exclusions);
    }
    /**
     * An advanced logs filter that matches the log entries to be excluded. By using the sample function, you can exclude less than 100% of the matching log entries. See [Advanced Log Filters](https://cloud.google.com/logging/docs/view/advanced_filters) for information on how to
     * write a filter.
     * 
     */
    @Export(name="filter", type=String.class, parameters={})
    private Output</* @Nullable */ String> filter;

    /**
     * @return An advanced logs filter that matches the log entries to be excluded. By using the sample function, you can exclude less than 100% of the matching log entries. See [Advanced Log Filters](https://cloud.google.com/logging/docs/view/advanced_filters) for information on how to
     * write a filter.
     * 
     */
    public Output<Optional<String>> filter() {
        return Codegen.optional(this.filter);
    }
    /**
     * A client-assigned identifier, such as `load-balancer-exclusion`. Identifiers are limited to 100 characters and can include only letters, digits, underscores, hyphens, and periods. First character has to be alphanumeric.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return A client-assigned identifier, such as `load-balancer-exclusion`. Identifiers are limited to 100 characters and can include only letters, digits, underscores, hyphens, and periods. First character has to be alphanumeric.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The ID of the project to create the sink in. If omitted, the project associated with the provider is
     * used.
     * 
     */
    @Export(name="project", type=String.class, parameters={})
    private Output<String> project;

    /**
     * @return The ID of the project to create the sink in. If omitted, the project associated with the provider is
     * used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * Whether or not to create a unique identity associated with this sink. If `false`
     * (the default), then the `writer_identity` used is `serviceAccount:cloud-logs@system.gserviceaccount.com`. If `true`,
     * then a unique service account is created and used for this sink. If you wish to publish logs across projects or utilize
     * `bigquery_options`, you must set `unique_writer_identity` to true.
     * 
     */
    @Export(name="uniqueWriterIdentity", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> uniqueWriterIdentity;

    /**
     * @return Whether or not to create a unique identity associated with this sink. If `false`
     * (the default), then the `writer_identity` used is `serviceAccount:cloud-logs@system.gserviceaccount.com`. If `true`,
     * then a unique service account is created and used for this sink. If you wish to publish logs across projects or utilize
     * `bigquery_options`, you must set `unique_writer_identity` to true.
     * 
     */
    public Output<Optional<Boolean>> uniqueWriterIdentity() {
        return Codegen.optional(this.uniqueWriterIdentity);
    }
    /**
     * The identity associated with this sink. This identity must be granted write access to the
     * configured `destination`.
     * 
     */
    @Export(name="writerIdentity", type=String.class, parameters={})
    private Output<String> writerIdentity;

    /**
     * @return The identity associated with this sink. This identity must be granted write access to the
     * configured `destination`.
     * 
     */
    public Output<String> writerIdentity() {
        return this.writerIdentity;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ProjectSink(String name) {
        this(name, ProjectSinkArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ProjectSink(String name, ProjectSinkArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ProjectSink(String name, ProjectSinkArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:logging/projectSink:ProjectSink", name, args == null ? ProjectSinkArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private ProjectSink(String name, Output<String> id, @Nullable ProjectSinkState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:logging/projectSink:ProjectSink", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ProjectSink get(String name, Output<String> id, @Nullable ProjectSinkState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ProjectSink(name, id, state, options);
    }
}
