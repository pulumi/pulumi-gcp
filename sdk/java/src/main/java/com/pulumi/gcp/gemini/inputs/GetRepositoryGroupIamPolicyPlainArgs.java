// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.gemini.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetRepositoryGroupIamPolicyPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetRepositoryGroupIamPolicyPlainArgs Empty = new GetRepositoryGroupIamPolicyPlainArgs();

    /**
     * Required. Id of the Code Repository Index. Used to find the parent resource to bind the IAM policy to
     * 
     */
    @Import(name="codeRepositoryIndex", required=true)
    private String codeRepositoryIndex;

    /**
     * @return Required. Id of the Code Repository Index. Used to find the parent resource to bind the IAM policy to
     * 
     */
    public String codeRepositoryIndex() {
        return this.codeRepositoryIndex;
    }

    /**
     * The location of the Code Repository Index, for example `us-central1`. Used to find the parent resource to bind the IAM policy to. If not specified,
     * the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
     * location is specified, it is taken from the provider configuration.
     * 
     */
    @Import(name="location")
    private @Nullable String location;

    /**
     * @return The location of the Code Repository Index, for example `us-central1`. Used to find the parent resource to bind the IAM policy to. If not specified,
     * the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
     * location is specified, it is taken from the provider configuration.
     * 
     */
    public Optional<String> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable String project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
     * 
     */
    public Optional<String> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Used to find the parent resource to bind the IAM policy to
     * 
     */
    @Import(name="repositoryGroupId", required=true)
    private String repositoryGroupId;

    /**
     * @return Used to find the parent resource to bind the IAM policy to
     * 
     */
    public String repositoryGroupId() {
        return this.repositoryGroupId;
    }

    private GetRepositoryGroupIamPolicyPlainArgs() {}

    private GetRepositoryGroupIamPolicyPlainArgs(GetRepositoryGroupIamPolicyPlainArgs $) {
        this.codeRepositoryIndex = $.codeRepositoryIndex;
        this.location = $.location;
        this.project = $.project;
        this.repositoryGroupId = $.repositoryGroupId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetRepositoryGroupIamPolicyPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetRepositoryGroupIamPolicyPlainArgs $;

        public Builder() {
            $ = new GetRepositoryGroupIamPolicyPlainArgs();
        }

        public Builder(GetRepositoryGroupIamPolicyPlainArgs defaults) {
            $ = new GetRepositoryGroupIamPolicyPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param codeRepositoryIndex Required. Id of the Code Repository Index. Used to find the parent resource to bind the IAM policy to
         * 
         * @return builder
         * 
         */
        public Builder codeRepositoryIndex(String codeRepositoryIndex) {
            $.codeRepositoryIndex = codeRepositoryIndex;
            return this;
        }

        /**
         * @param location The location of the Code Repository Index, for example `us-central1`. Used to find the parent resource to bind the IAM policy to. If not specified,
         * the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
         * location is specified, it is taken from the provider configuration.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable String location) {
            $.location = location;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable String project) {
            $.project = project;
            return this;
        }

        /**
         * @param repositoryGroupId Used to find the parent resource to bind the IAM policy to
         * 
         * @return builder
         * 
         */
        public Builder repositoryGroupId(String repositoryGroupId) {
            $.repositoryGroupId = repositoryGroupId;
            return this;
        }

        public GetRepositoryGroupIamPolicyPlainArgs build() {
            if ($.codeRepositoryIndex == null) {
                throw new MissingRequiredPropertyException("GetRepositoryGroupIamPolicyPlainArgs", "codeRepositoryIndex");
            }
            if ($.repositoryGroupId == null) {
                throw new MissingRequiredPropertyException("GetRepositoryGroupIamPolicyPlainArgs", "repositoryGroupId");
            }
            return $;
        }
    }

}
