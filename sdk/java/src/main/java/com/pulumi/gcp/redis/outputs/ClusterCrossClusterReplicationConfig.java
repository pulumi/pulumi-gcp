// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.redis.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.redis.outputs.ClusterCrossClusterReplicationConfigMembership;
import com.pulumi.gcp.redis.outputs.ClusterCrossClusterReplicationConfigPrimaryCluster;
import com.pulumi.gcp.redis.outputs.ClusterCrossClusterReplicationConfigSecondaryCluster;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ClusterCrossClusterReplicationConfig {
    /**
     * @return The role of the cluster in cross cluster replication. Supported values are:
     * 1. `CLUSTER_ROLE_UNSPECIFIED`: This is an independent cluster that has never participated in cross cluster replication. It allows both reads and writes.
     * 2. `NONE`: This is an independent cluster that previously participated in cross cluster replication(either as a `PRIMARY` or `SECONDARY` cluster). It allows both reads and writes.
     * 3. `PRIMARY`: This cluster serves as the replication source for secondary clusters that are replicating from it. Any data written to it is automatically replicated to its secondary clusters. It allows both reads and writes.
     * 4. `SECONDARY`: This cluster replicates data from the primary cluster. It allows only reads.
     *    Possible values are: `CLUSTER_ROLE_UNSPECIFIED`, `NONE`, `PRIMARY`, `SECONDARY`.
     * 
     */
    private @Nullable String clusterRole;
    /**
     * @return (Output)
     * An output only view of all the member clusters participating in cross cluster replication. This field is populated for all the member clusters irrespective of their cluster role.
     * Structure is documented below.
     * 
     */
    private @Nullable List<ClusterCrossClusterReplicationConfigMembership> memberships;
    /**
     * @return Details of the primary cluster that is used as the replication source for this secondary cluster. This is allowed to be set only for clusters whose cluster role is of type `SECONDARY`.
     * Structure is documented below.
     * 
     */
    private @Nullable ClusterCrossClusterReplicationConfigPrimaryCluster primaryCluster;
    /**
     * @return List of secondary clusters that are replicating from this primary cluster. This is allowed to be set only for clusters whose cluster role is of type `PRIMARY`.
     * Structure is documented below.
     * 
     */
    private @Nullable List<ClusterCrossClusterReplicationConfigSecondaryCluster> secondaryClusters;
    /**
     * @return (Output)
     * The last time cross cluster replication config was updated.
     * 
     */
    private @Nullable String updateTime;

    private ClusterCrossClusterReplicationConfig() {}
    /**
     * @return The role of the cluster in cross cluster replication. Supported values are:
     * 1. `CLUSTER_ROLE_UNSPECIFIED`: This is an independent cluster that has never participated in cross cluster replication. It allows both reads and writes.
     * 2. `NONE`: This is an independent cluster that previously participated in cross cluster replication(either as a `PRIMARY` or `SECONDARY` cluster). It allows both reads and writes.
     * 3. `PRIMARY`: This cluster serves as the replication source for secondary clusters that are replicating from it. Any data written to it is automatically replicated to its secondary clusters. It allows both reads and writes.
     * 4. `SECONDARY`: This cluster replicates data from the primary cluster. It allows only reads.
     *    Possible values are: `CLUSTER_ROLE_UNSPECIFIED`, `NONE`, `PRIMARY`, `SECONDARY`.
     * 
     */
    public Optional<String> clusterRole() {
        return Optional.ofNullable(this.clusterRole);
    }
    /**
     * @return (Output)
     * An output only view of all the member clusters participating in cross cluster replication. This field is populated for all the member clusters irrespective of their cluster role.
     * Structure is documented below.
     * 
     */
    public List<ClusterCrossClusterReplicationConfigMembership> memberships() {
        return this.memberships == null ? List.of() : this.memberships;
    }
    /**
     * @return Details of the primary cluster that is used as the replication source for this secondary cluster. This is allowed to be set only for clusters whose cluster role is of type `SECONDARY`.
     * Structure is documented below.
     * 
     */
    public Optional<ClusterCrossClusterReplicationConfigPrimaryCluster> primaryCluster() {
        return Optional.ofNullable(this.primaryCluster);
    }
    /**
     * @return List of secondary clusters that are replicating from this primary cluster. This is allowed to be set only for clusters whose cluster role is of type `PRIMARY`.
     * Structure is documented below.
     * 
     */
    public List<ClusterCrossClusterReplicationConfigSecondaryCluster> secondaryClusters() {
        return this.secondaryClusters == null ? List.of() : this.secondaryClusters;
    }
    /**
     * @return (Output)
     * The last time cross cluster replication config was updated.
     * 
     */
    public Optional<String> updateTime() {
        return Optional.ofNullable(this.updateTime);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ClusterCrossClusterReplicationConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String clusterRole;
        private @Nullable List<ClusterCrossClusterReplicationConfigMembership> memberships;
        private @Nullable ClusterCrossClusterReplicationConfigPrimaryCluster primaryCluster;
        private @Nullable List<ClusterCrossClusterReplicationConfigSecondaryCluster> secondaryClusters;
        private @Nullable String updateTime;
        public Builder() {}
        public Builder(ClusterCrossClusterReplicationConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clusterRole = defaults.clusterRole;
    	      this.memberships = defaults.memberships;
    	      this.primaryCluster = defaults.primaryCluster;
    	      this.secondaryClusters = defaults.secondaryClusters;
    	      this.updateTime = defaults.updateTime;
        }

        @CustomType.Setter
        public Builder clusterRole(@Nullable String clusterRole) {

            this.clusterRole = clusterRole;
            return this;
        }
        @CustomType.Setter
        public Builder memberships(@Nullable List<ClusterCrossClusterReplicationConfigMembership> memberships) {

            this.memberships = memberships;
            return this;
        }
        public Builder memberships(ClusterCrossClusterReplicationConfigMembership... memberships) {
            return memberships(List.of(memberships));
        }
        @CustomType.Setter
        public Builder primaryCluster(@Nullable ClusterCrossClusterReplicationConfigPrimaryCluster primaryCluster) {

            this.primaryCluster = primaryCluster;
            return this;
        }
        @CustomType.Setter
        public Builder secondaryClusters(@Nullable List<ClusterCrossClusterReplicationConfigSecondaryCluster> secondaryClusters) {

            this.secondaryClusters = secondaryClusters;
            return this;
        }
        public Builder secondaryClusters(ClusterCrossClusterReplicationConfigSecondaryCluster... secondaryClusters) {
            return secondaryClusters(List.of(secondaryClusters));
        }
        @CustomType.Setter
        public Builder updateTime(@Nullable String updateTime) {

            this.updateTime = updateTime;
            return this;
        }
        public ClusterCrossClusterReplicationConfig build() {
            final var _resultValue = new ClusterCrossClusterReplicationConfig();
            _resultValue.clusterRole = clusterRole;
            _resultValue.memberships = memberships;
            _resultValue.primaryCluster = primaryCluster;
            _resultValue.secondaryClusters = secondaryClusters;
            _resultValue.updateTime = updateTime;
            return _resultValue;
        }
    }
}
