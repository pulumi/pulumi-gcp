// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.networkservices.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.networkservices.inputs.EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArgs;
import com.pulumi.gcp.networkservices.inputs.EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArgs;
import com.pulumi.gcp.networkservices.inputs.EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArgs;
import com.pulumi.gcp.networkservices.inputs.EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArgs;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionArgs extends com.pulumi.resources.ResourceArgs {

    public static final EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionArgs Empty = new EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionArgs();

    /**
     * Describes a header to add.
     * Structure is documented below.
     * 
     */
    @Import(name="requestHeaderToAdds")
    private @Nullable Output<List<EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArgs>> requestHeaderToAdds;

    /**
     * @return Describes a header to add.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArgs>>> requestHeaderToAdds() {
        return Optional.ofNullable(this.requestHeaderToAdds);
    }

    /**
     * A list of header names for headers that need to be removed from the request prior to forwarding the request to the origin.
     * Structure is documented below.
     * 
     */
    @Import(name="requestHeaderToRemoves")
    private @Nullable Output<List<EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArgs>> requestHeaderToRemoves;

    /**
     * @return A list of header names for headers that need to be removed from the request prior to forwarding the request to the origin.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArgs>>> requestHeaderToRemoves() {
        return Optional.ofNullable(this.requestHeaderToRemoves);
    }

    /**
     * Headers to add to the response prior to sending it back to the client.
     * Response headers are only sent to the client, and do not have an effect on the cache serving the response.
     * Structure is documented below.
     * 
     */
    @Import(name="responseHeaderToAdds")
    private @Nullable Output<List<EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArgs>> responseHeaderToAdds;

    /**
     * @return Headers to add to the response prior to sending it back to the client.
     * Response headers are only sent to the client, and do not have an effect on the cache serving the response.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArgs>>> responseHeaderToAdds() {
        return Optional.ofNullable(this.responseHeaderToAdds);
    }

    /**
     * A list of header names for headers that need to be removed from the request prior to forwarding the request to the origin.
     * Structure is documented below.
     * 
     */
    @Import(name="responseHeaderToRemoves")
    private @Nullable Output<List<EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArgs>> responseHeaderToRemoves;

    /**
     * @return A list of header names for headers that need to be removed from the request prior to forwarding the request to the origin.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArgs>>> responseHeaderToRemoves() {
        return Optional.ofNullable(this.responseHeaderToRemoves);
    }

    private EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionArgs() {}

    private EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionArgs(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionArgs $) {
        this.requestHeaderToAdds = $.requestHeaderToAdds;
        this.requestHeaderToRemoves = $.requestHeaderToRemoves;
        this.responseHeaderToAdds = $.responseHeaderToAdds;
        this.responseHeaderToRemoves = $.responseHeaderToRemoves;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionArgs $;

        public Builder() {
            $ = new EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionArgs();
        }

        public Builder(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionArgs defaults) {
            $ = new EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param requestHeaderToAdds Describes a header to add.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder requestHeaderToAdds(@Nullable Output<List<EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArgs>> requestHeaderToAdds) {
            $.requestHeaderToAdds = requestHeaderToAdds;
            return this;
        }

        /**
         * @param requestHeaderToAdds Describes a header to add.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder requestHeaderToAdds(List<EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArgs> requestHeaderToAdds) {
            return requestHeaderToAdds(Output.of(requestHeaderToAdds));
        }

        /**
         * @param requestHeaderToAdds Describes a header to add.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder requestHeaderToAdds(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToAddArgs... requestHeaderToAdds) {
            return requestHeaderToAdds(List.of(requestHeaderToAdds));
        }

        /**
         * @param requestHeaderToRemoves A list of header names for headers that need to be removed from the request prior to forwarding the request to the origin.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder requestHeaderToRemoves(@Nullable Output<List<EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArgs>> requestHeaderToRemoves) {
            $.requestHeaderToRemoves = requestHeaderToRemoves;
            return this;
        }

        /**
         * @param requestHeaderToRemoves A list of header names for headers that need to be removed from the request prior to forwarding the request to the origin.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder requestHeaderToRemoves(List<EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArgs> requestHeaderToRemoves) {
            return requestHeaderToRemoves(Output.of(requestHeaderToRemoves));
        }

        /**
         * @param requestHeaderToRemoves A list of header names for headers that need to be removed from the request prior to forwarding the request to the origin.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder requestHeaderToRemoves(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionRequestHeaderToRemoveArgs... requestHeaderToRemoves) {
            return requestHeaderToRemoves(List.of(requestHeaderToRemoves));
        }

        /**
         * @param responseHeaderToAdds Headers to add to the response prior to sending it back to the client.
         * Response headers are only sent to the client, and do not have an effect on the cache serving the response.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder responseHeaderToAdds(@Nullable Output<List<EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArgs>> responseHeaderToAdds) {
            $.responseHeaderToAdds = responseHeaderToAdds;
            return this;
        }

        /**
         * @param responseHeaderToAdds Headers to add to the response prior to sending it back to the client.
         * Response headers are only sent to the client, and do not have an effect on the cache serving the response.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder responseHeaderToAdds(List<EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArgs> responseHeaderToAdds) {
            return responseHeaderToAdds(Output.of(responseHeaderToAdds));
        }

        /**
         * @param responseHeaderToAdds Headers to add to the response prior to sending it back to the client.
         * Response headers are only sent to the client, and do not have an effect on the cache serving the response.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder responseHeaderToAdds(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToAddArgs... responseHeaderToAdds) {
            return responseHeaderToAdds(List.of(responseHeaderToAdds));
        }

        /**
         * @param responseHeaderToRemoves A list of header names for headers that need to be removed from the request prior to forwarding the request to the origin.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder responseHeaderToRemoves(@Nullable Output<List<EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArgs>> responseHeaderToRemoves) {
            $.responseHeaderToRemoves = responseHeaderToRemoves;
            return this;
        }

        /**
         * @param responseHeaderToRemoves A list of header names for headers that need to be removed from the request prior to forwarding the request to the origin.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder responseHeaderToRemoves(List<EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArgs> responseHeaderToRemoves) {
            return responseHeaderToRemoves(Output.of(responseHeaderToRemoves));
        }

        /**
         * @param responseHeaderToRemoves A list of header names for headers that need to be removed from the request prior to forwarding the request to the origin.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder responseHeaderToRemoves(EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionResponseHeaderToRemoveArgs... responseHeaderToRemoves) {
            return responseHeaderToRemoves(List.of(responseHeaderToRemoves));
        }

        public EdgeCacheServiceRoutingPathMatcherRouteRuleHeaderActionArgs build() {
            return $;
        }
    }

}
