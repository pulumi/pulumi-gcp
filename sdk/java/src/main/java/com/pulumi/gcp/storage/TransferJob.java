// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.storage;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.storage.TransferJobArgs;
import com.pulumi.gcp.storage.inputs.TransferJobState;
import com.pulumi.gcp.storage.outputs.TransferJobEventStream;
import com.pulumi.gcp.storage.outputs.TransferJobNotificationConfig;
import com.pulumi.gcp.storage.outputs.TransferJobSchedule;
import com.pulumi.gcp.storage.outputs.TransferJobTransferSpec;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Creates a new Transfer Job in Google Cloud Storage Transfer.
 * 
 * To get more information about Google Cloud Storage Transfer, see:
 * 
 * * [Overview](https://cloud.google.com/storage-transfer/docs/overview)
 * * [API documentation](https://cloud.google.com/storage-transfer/docs/reference/rest/v1/transferJobs)
 * * How-to Guides
 *   * [Configuring Access to Data Sources and Sinks](https://cloud.google.com/storage-transfer/docs/configure-access)
 * 
 * ## Example Usage
 * 
 * Example creating a nightly Transfer Job from an AWS S3 Bucket to a GCS bucket.
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.storage.StorageFunctions;
 * import com.pulumi.gcp.storage.inputs.GetTransferProjectServiceAccountArgs;
 * import com.pulumi.gcp.storage.Bucket;
 * import com.pulumi.gcp.storage.BucketArgs;
 * import com.pulumi.gcp.storage.BucketIAMMember;
 * import com.pulumi.gcp.storage.BucketIAMMemberArgs;
 * import com.pulumi.gcp.pubsub.Topic;
 * import com.pulumi.gcp.pubsub.TopicArgs;
 * import com.pulumi.gcp.pubsub.TopicIAMMember;
 * import com.pulumi.gcp.pubsub.TopicIAMMemberArgs;
 * import com.pulumi.gcp.storage.TransferJob;
 * import com.pulumi.gcp.storage.TransferJobArgs;
 * import com.pulumi.gcp.storage.inputs.TransferJobTransferSpecArgs;
 * import com.pulumi.gcp.storage.inputs.TransferJobTransferSpecObjectConditionsArgs;
 * import com.pulumi.gcp.storage.inputs.TransferJobTransferSpecTransferOptionsArgs;
 * import com.pulumi.gcp.storage.inputs.TransferJobTransferSpecAwsS3DataSourceArgs;
 * import com.pulumi.gcp.storage.inputs.TransferJobTransferSpecAwsS3DataSourceAwsAccessKeyArgs;
 * import com.pulumi.gcp.storage.inputs.TransferJobTransferSpecGcsDataSinkArgs;
 * import com.pulumi.gcp.storage.inputs.TransferJobScheduleArgs;
 * import com.pulumi.gcp.storage.inputs.TransferJobScheduleScheduleStartDateArgs;
 * import com.pulumi.gcp.storage.inputs.TransferJobScheduleScheduleEndDateArgs;
 * import com.pulumi.gcp.storage.inputs.TransferJobScheduleStartTimeOfDayArgs;
 * import com.pulumi.gcp.storage.inputs.TransferJobNotificationConfigArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var default = StorageFunctions.getTransferProjectServiceAccount(GetTransferProjectServiceAccountArgs.builder()
 *             .project(project)
 *             .build());
 * 
 *         var s3_backup_bucket = new Bucket("s3-backup-bucket", BucketArgs.builder()
 *             .name(String.format("%s-backup", awsS3Bucket))
 *             .storageClass("NEARLINE")
 *             .project(project)
 *             .location("US")
 *             .build());
 * 
 *         var s3_backup_bucketBucketIAMMember = new BucketIAMMember("s3-backup-bucketBucketIAMMember", BucketIAMMemberArgs.builder()
 *             .bucket(s3_backup_bucket.name())
 *             .role("roles/storage.admin")
 *             .member(String.format("serviceAccount:%s", default_.email()))
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(s3_backup_bucket)
 *                 .build());
 * 
 *         var topic = new Topic("topic", TopicArgs.builder()
 *             .name(pubsubTopicName)
 *             .build());
 * 
 *         var notificationConfig = new TopicIAMMember("notificationConfig", TopicIAMMemberArgs.builder()
 *             .topic(topic.id())
 *             .role("roles/pubsub.publisher")
 *             .member(String.format("serviceAccount:%s", default_.email()))
 *             .build());
 * 
 *         var s3_bucket_nightly_backup = new TransferJob("s3-bucket-nightly-backup", TransferJobArgs.builder()
 *             .description("Nightly backup of S3 bucket")
 *             .project(project)
 *             .transferSpec(TransferJobTransferSpecArgs.builder()
 *                 .objectConditions(TransferJobTransferSpecObjectConditionsArgs.builder()
 *                     .maxTimeElapsedSinceLastModification("600s")
 *                     .excludePrefixes("requests.gz")
 *                     .build())
 *                 .transferOptions(TransferJobTransferSpecTransferOptionsArgs.builder()
 *                     .deleteObjectsUniqueInSink(false)
 *                     .build())
 *                 .awsS3DataSource(TransferJobTransferSpecAwsS3DataSourceArgs.builder()
 *                     .bucketName(awsS3Bucket)
 *                     .awsAccessKey(TransferJobTransferSpecAwsS3DataSourceAwsAccessKeyArgs.builder()
 *                         .accessKeyId(awsAccessKey)
 *                         .secretAccessKey(awsSecretKey)
 *                         .build())
 *                     .build())
 *                 .gcsDataSink(TransferJobTransferSpecGcsDataSinkArgs.builder()
 *                     .bucketName(s3_backup_bucket.name())
 *                     .path("foo/bar/")
 *                     .build())
 *                 .build())
 *             .schedule(TransferJobScheduleArgs.builder()
 *                 .scheduleStartDate(TransferJobScheduleScheduleStartDateArgs.builder()
 *                     .year(2018)
 *                     .month(10)
 *                     .day(1)
 *                     .build())
 *                 .scheduleEndDate(TransferJobScheduleScheduleEndDateArgs.builder()
 *                     .year(2019)
 *                     .month(1)
 *                     .day(15)
 *                     .build())
 *                 .startTimeOfDay(TransferJobScheduleStartTimeOfDayArgs.builder()
 *                     .hours(23)
 *                     .minutes(30)
 *                     .seconds(0)
 *                     .nanos(0)
 *                     .build())
 *                 .repeatInterval("604800s")
 *                 .build())
 *             .notificationConfig(TransferJobNotificationConfigArgs.builder()
 *                 .pubsubTopic(topic.id())
 *                 .eventTypes(                
 *                     "TRANSFER_OPERATION_SUCCESS",
 *                     "TRANSFER_OPERATION_FAILED")
 *                 .payloadFormat("JSON")
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(                
 *                     s3_backup_bucketBucketIAMMember,
 *                     notificationConfig)
 *                 .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Storage Transfer Jobs can be imported using the Transfer Job&#39;s `project` and `name` (without the `transferJob/` prefix), e.g.
 * 
 * * `{{project_id}}/{{name}}`, where `name` is a numeric value.
 * 
 * When using the `pulumi import` command, Storage Transfer Jobs can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:storage/transferJob:TransferJob default {{project_id}}/123456789
 * ```
 * 
 */
@ResourceType(type="gcp:storage/transferJob:TransferJob")
public class TransferJob extends com.pulumi.resources.CustomResource {
    /**
     * When the Transfer Job was created.
     * 
     */
    @Export(name="creationTime", refs={String.class}, tree="[0]")
    private Output<String> creationTime;

    /**
     * @return When the Transfer Job was created.
     * 
     */
    public Output<String> creationTime() {
        return this.creationTime;
    }
    /**
     * When the Transfer Job was deleted.
     * 
     */
    @Export(name="deletionTime", refs={String.class}, tree="[0]")
    private Output<String> deletionTime;

    /**
     * @return When the Transfer Job was deleted.
     * 
     */
    public Output<String> deletionTime() {
        return this.deletionTime;
    }
    /**
     * Unique description to identify the Transfer Job.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output<String> description;

    /**
     * @return Unique description to identify the Transfer Job.
     * 
     */
    public Output<String> description() {
        return this.description;
    }
    /**
     * Specifies the Event-driven transfer options. Event-driven transfers listen to an event stream to transfer updated files. Structure documented below Either `event_stream` or `schedule` must be set.
     * 
     */
    @Export(name="eventStream", refs={TransferJobEventStream.class}, tree="[0]")
    private Output</* @Nullable */ TransferJobEventStream> eventStream;

    /**
     * @return Specifies the Event-driven transfer options. Event-driven transfers listen to an event stream to transfer updated files. Structure documented below Either `event_stream` or `schedule` must be set.
     * 
     */
    public Output<Optional<TransferJobEventStream>> eventStream() {
        return Codegen.optional(this.eventStream);
    }
    /**
     * When the Transfer Job was last modified.
     * 
     */
    @Export(name="lastModificationTime", refs={String.class}, tree="[0]")
    private Output<String> lastModificationTime;

    /**
     * @return When the Transfer Job was last modified.
     * 
     */
    public Output<String> lastModificationTime() {
        return this.lastModificationTime;
    }
    /**
     * The name of the Transfer Job. This name must start with &#34;transferJobs/&#34; prefix and end with a letter or a number, and should be no more than 128 characters ( `transferJobs/^(?!OPI)[A-Za-z0-9-._~]*[A-Za-z0-9]$` ). For transfers involving PosixFilesystem, this name must start with transferJobs/OPI specifically ( `transferJobs/OPI^[A-Za-z0-9-._~]*[A-Za-z0-9]$` ). For all other transfer types, this name must not start with transferJobs/OPI. Default the provider will assign a random unique name with `transferJobs/{{name}}` format, where `name` is a numeric value.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the Transfer Job. This name must start with &#34;transferJobs/&#34; prefix and end with a letter or a number, and should be no more than 128 characters ( `transferJobs/^(?!OPI)[A-Za-z0-9-._~]*[A-Za-z0-9]$` ). For transfers involving PosixFilesystem, this name must start with transferJobs/OPI specifically ( `transferJobs/OPI^[A-Za-z0-9-._~]*[A-Za-z0-9]$` ). For all other transfer types, this name must not start with transferJobs/OPI. Default the provider will assign a random unique name with `transferJobs/{{name}}` format, where `name` is a numeric value.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Notification configuration. This is not supported for transfers involving PosixFilesystem. Structure documented below.
     * 
     */
    @Export(name="notificationConfig", refs={TransferJobNotificationConfig.class}, tree="[0]")
    private Output</* @Nullable */ TransferJobNotificationConfig> notificationConfig;

    /**
     * @return Notification configuration. This is not supported for transfers involving PosixFilesystem. Structure documented below.
     * 
     */
    public Output<Optional<TransferJobNotificationConfig>> notificationConfig() {
        return Codegen.optional(this.notificationConfig);
    }
    /**
     * The project in which the resource belongs. If it
     * is not provided, the provider project is used.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The project in which the resource belongs. If it
     * is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * Schedule specification defining when the Transfer Job should be scheduled to start, end and what time to run. Structure documented below. Either `schedule` or `event_stream` must be set.
     * 
     */
    @Export(name="schedule", refs={TransferJobSchedule.class}, tree="[0]")
    private Output</* @Nullable */ TransferJobSchedule> schedule;

    /**
     * @return Schedule specification defining when the Transfer Job should be scheduled to start, end and what time to run. Structure documented below. Either `schedule` or `event_stream` must be set.
     * 
     */
    public Output<Optional<TransferJobSchedule>> schedule() {
        return Codegen.optional(this.schedule);
    }
    /**
     * Status of the job. Default: `ENABLED`. **NOTE: The effect of the new job status takes place during a subsequent job run. For example, if you change the job status from ENABLED to DISABLED, and an operation spawned by the transfer is running, the status change would not affect the current operation.**
     * 
     */
    @Export(name="status", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> status;

    /**
     * @return Status of the job. Default: `ENABLED`. **NOTE: The effect of the new job status takes place during a subsequent job run. For example, if you change the job status from ENABLED to DISABLED, and an operation spawned by the transfer is running, the status change would not affect the current operation.**
     * 
     */
    public Output<Optional<String>> status() {
        return Codegen.optional(this.status);
    }
    /**
     * Transfer specification. Structure documented below.
     * 
     */
    @Export(name="transferSpec", refs={TransferJobTransferSpec.class}, tree="[0]")
    private Output<TransferJobTransferSpec> transferSpec;

    /**
     * @return Transfer specification. Structure documented below.
     * 
     */
    public Output<TransferJobTransferSpec> transferSpec() {
        return this.transferSpec;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public TransferJob(java.lang.String name) {
        this(name, TransferJobArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public TransferJob(java.lang.String name, TransferJobArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public TransferJob(java.lang.String name, TransferJobArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:storage/transferJob:TransferJob", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private TransferJob(java.lang.String name, Output<java.lang.String> id, @Nullable TransferJobState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:storage/transferJob:TransferJob", name, state, makeResourceOptions(options, id), false);
    }

    private static TransferJobArgs makeArgs(TransferJobArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? TransferJobArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static TransferJob get(java.lang.String name, Output<java.lang.String> id, @Nullable TransferJobState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new TransferJob(name, id, state, options);
    }
}
