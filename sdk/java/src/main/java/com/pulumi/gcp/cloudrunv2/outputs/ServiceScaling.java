// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudrunv2.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ServiceScaling {
    /**
     * @return Total instance count for the service in manual scaling mode. This number of instances is divided among all revisions with specified traffic based on the percent of traffic they are receiving.
     * 
     */
    private @Nullable Integer manualInstanceCount;
    /**
     * @return Combined maximum number of instances for all revisions receiving traffic.
     * 
     */
    private @Nullable Integer maxInstanceCount;
    /**
     * @return Minimum number of instances for the service, to be divided among all revisions receiving traffic.
     * 
     */
    private @Nullable Integer minInstanceCount;
    /**
     * @return The [scaling mode](https://cloud.google.com/run/docs/reference/rest/v2/projects.locations.services#scalingmode) for the service.
     * Possible values are: `AUTOMATIC`, `MANUAL`.
     * 
     */
    private @Nullable String scalingMode;

    private ServiceScaling() {}
    /**
     * @return Total instance count for the service in manual scaling mode. This number of instances is divided among all revisions with specified traffic based on the percent of traffic they are receiving.
     * 
     */
    public Optional<Integer> manualInstanceCount() {
        return Optional.ofNullable(this.manualInstanceCount);
    }
    /**
     * @return Combined maximum number of instances for all revisions receiving traffic.
     * 
     */
    public Optional<Integer> maxInstanceCount() {
        return Optional.ofNullable(this.maxInstanceCount);
    }
    /**
     * @return Minimum number of instances for the service, to be divided among all revisions receiving traffic.
     * 
     */
    public Optional<Integer> minInstanceCount() {
        return Optional.ofNullable(this.minInstanceCount);
    }
    /**
     * @return The [scaling mode](https://cloud.google.com/run/docs/reference/rest/v2/projects.locations.services#scalingmode) for the service.
     * Possible values are: `AUTOMATIC`, `MANUAL`.
     * 
     */
    public Optional<String> scalingMode() {
        return Optional.ofNullable(this.scalingMode);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServiceScaling defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer manualInstanceCount;
        private @Nullable Integer maxInstanceCount;
        private @Nullable Integer minInstanceCount;
        private @Nullable String scalingMode;
        public Builder() {}
        public Builder(ServiceScaling defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.manualInstanceCount = defaults.manualInstanceCount;
    	      this.maxInstanceCount = defaults.maxInstanceCount;
    	      this.minInstanceCount = defaults.minInstanceCount;
    	      this.scalingMode = defaults.scalingMode;
        }

        @CustomType.Setter
        public Builder manualInstanceCount(@Nullable Integer manualInstanceCount) {

            this.manualInstanceCount = manualInstanceCount;
            return this;
        }
        @CustomType.Setter
        public Builder maxInstanceCount(@Nullable Integer maxInstanceCount) {

            this.maxInstanceCount = maxInstanceCount;
            return this;
        }
        @CustomType.Setter
        public Builder minInstanceCount(@Nullable Integer minInstanceCount) {

            this.minInstanceCount = minInstanceCount;
            return this;
        }
        @CustomType.Setter
        public Builder scalingMode(@Nullable String scalingMode) {

            this.scalingMode = scalingMode;
            return this;
        }
        public ServiceScaling build() {
            final var _resultValue = new ServiceScaling();
            _resultValue.manualInstanceCount = manualInstanceCount;
            _resultValue.maxInstanceCount = maxInstanceCount;
            _resultValue.minInstanceCount = minInstanceCount;
            _resultValue.scalingMode = scalingMode;
            return _resultValue;
        }
    }
}
