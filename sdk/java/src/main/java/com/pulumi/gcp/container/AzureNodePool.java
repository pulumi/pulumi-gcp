// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.container;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.container.AzureNodePoolArgs;
import com.pulumi.gcp.container.inputs.AzureNodePoolState;
import com.pulumi.gcp.container.outputs.AzureNodePoolAutoscaling;
import com.pulumi.gcp.container.outputs.AzureNodePoolConfig;
import com.pulumi.gcp.container.outputs.AzureNodePoolManagement;
import com.pulumi.gcp.container.outputs.AzureNodePoolMaxPodsConstraint;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * An Anthos node pool running on Azure.
 * 
 * For more information, see:
 * * [Multicloud overview](https://cloud.google.com/kubernetes-engine/multi-cloud/docs)
 * ## Example Usage
 * 
 * ### Basic_azure_node_pool
 * A basic example of a containerazure azure node pool
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.container.ContainerFunctions;
 * import com.pulumi.gcp.container.inputs.GetAzureVersionsArgs;
 * import com.pulumi.gcp.container.AzureClient;
 * import com.pulumi.gcp.container.AzureClientArgs;
 * import com.pulumi.gcp.container.AzureCluster;
 * import com.pulumi.gcp.container.AzureClusterArgs;
 * import com.pulumi.gcp.container.inputs.AzureClusterAuthorizationArgs;
 * import com.pulumi.gcp.container.inputs.AzureClusterControlPlaneArgs;
 * import com.pulumi.gcp.container.inputs.AzureClusterControlPlaneSshConfigArgs;
 * import com.pulumi.gcp.container.inputs.AzureClusterFleetArgs;
 * import com.pulumi.gcp.container.inputs.AzureClusterNetworkingArgs;
 * import com.pulumi.gcp.container.AzureNodePool;
 * import com.pulumi.gcp.container.AzureNodePoolArgs;
 * import com.pulumi.gcp.container.inputs.AzureNodePoolAutoscalingArgs;
 * import com.pulumi.gcp.container.inputs.AzureNodePoolConfigArgs;
 * import com.pulumi.gcp.container.inputs.AzureNodePoolConfigSshConfigArgs;
 * import com.pulumi.gcp.container.inputs.AzureNodePoolConfigProxyConfigArgs;
 * import com.pulumi.gcp.container.inputs.AzureNodePoolConfigRootVolumeArgs;
 * import com.pulumi.gcp.container.inputs.AzureNodePoolMaxPodsConstraintArgs;
 * import com.pulumi.gcp.container.inputs.AzureNodePoolManagementArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var versions = ContainerFunctions.getAzureVersions(GetAzureVersionsArgs.builder()
 *             .project("my-project-name")
 *             .location("us-west1")
 *             .build());
 * 
 *         var basic = new AzureClient("basic", AzureClientArgs.builder()
 *             .applicationId("12345678-1234-1234-1234-123456789111")
 *             .location("us-west1")
 *             .name("client-name")
 *             .tenantId("12345678-1234-1234-1234-123456789111")
 *             .project("my-project-name")
 *             .build());
 * 
 *         var primary = new AzureCluster("primary", AzureClusterArgs.builder()
 *             .authorization(AzureClusterAuthorizationArgs.builder()
 *                 .adminUsers(AzureClusterAuthorizationAdminUserArgs.builder()
 *                     .username("mmv2{@literal @}google.com")
 *                     .build())
 *                 .build())
 *             .azureRegion("westus2")
 *             .client(basic.name().applyValue(name -> String.format("projects/my-project-number/locations/us-west1/azureClients/%s", name)))
 *             .controlPlane(AzureClusterControlPlaneArgs.builder()
 *                 .sshConfig(AzureClusterControlPlaneSshConfigArgs.builder()
 *                     .authorizedKey("ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC8yaayO6lnb2v+SedxUMa2c8vtIEzCzBjM3EJJsv8Vm9zUDWR7dXWKoNGARUb2mNGXASvI6mFIDXTIlkQ0poDEPpMaXR0g2cb5xT8jAAJq7fqXL3+0rcJhY/uigQ+MrT6s+ub0BFVbsmGHNrMQttXX9gtmwkeAEvj3mra9e5pkNf90qlKnZz6U0SVArxVsLx07vHPHDIYrl0OPG4zUREF52igbBPiNrHJFDQJT/4YlDMJmo/QT/A1D6n9ocemvZSzhRx15/Arjowhr+VVKSbaxzPtEfY0oIg2SrqJnnr/l3Du5qIefwh5VmCZe4xopPUaDDoOIEFriZ88sB+3zz8ib8sk8zJJQCgeP78tQvXCgS+4e5W3TUg9mxjB6KjXTyHIVhDZqhqde0OI3Fy1UuVzRUwnBaLjBnAwP5EoFQGRmDYk/rEYe7HTmovLeEBUDQocBQKT4Ripm/xJkkWY7B07K/tfo56dGUCkvyIVXKBInCh+dLK7gZapnd4UWkY0xBYcwo1geMLRq58iFTLA2j/JmpmHXp7m0l7jJii7d44uD3tTIFYThn7NlOnvhLim/YcBK07GMGIN7XwrrKZKmxXaspw6KBWVhzuw1UPxctxshYEaMLfFg/bwOw8HvMPr9VtrElpSB7oiOh91PDIPdPBgHCi7N2QgQ5l/ZDBHieSpNrQ== thomasrodgers")
 *                     .build())
 *                 .subnetId("/subscriptions/12345678-1234-1234-1234-123456789111/resourceGroups/my--dev-byo/providers/Microsoft.Network/virtualNetworks/my--dev-vnet/subnets/default")
 *                 .version(versions.applyValue(getAzureVersionsResult -> getAzureVersionsResult.validVersions()[0]))
 *                 .build())
 *             .fleet(AzureClusterFleetArgs.builder()
 *                 .project("my-project-number")
 *                 .build())
 *             .location("us-west1")
 *             .name("name")
 *             .networking(AzureClusterNetworkingArgs.builder()
 *                 .podAddressCidrBlocks("10.200.0.0/16")
 *                 .serviceAddressCidrBlocks("10.32.0.0/24")
 *                 .virtualNetworkId("/subscriptions/12345678-1234-1234-1234-123456789111/resourceGroups/my--dev-byo/providers/Microsoft.Network/virtualNetworks/my--dev-vnet")
 *                 .build())
 *             .resourceGroupId("/subscriptions/12345678-1234-1234-1234-123456789111/resourceGroups/my--dev-cluster")
 *             .project("my-project-name")
 *             .build());
 * 
 *         var primaryAzureNodePool = new AzureNodePool("primaryAzureNodePool", AzureNodePoolArgs.builder()
 *             .autoscaling(AzureNodePoolAutoscalingArgs.builder()
 *                 .maxNodeCount(3)
 *                 .minNodeCount(2)
 *                 .build())
 *             .cluster(primary.name())
 *             .config(AzureNodePoolConfigArgs.builder()
 *                 .sshConfig(AzureNodePoolConfigSshConfigArgs.builder()
 *                     .authorizedKey("ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC8yaayO6lnb2v+SedxUMa2c8vtIEzCzBjM3EJJsv8Vm9zUDWR7dXWKoNGARUb2mNGXASvI6mFIDXTIlkQ0poDEPpMaXR0g2cb5xT8jAAJq7fqXL3+0rcJhY/uigQ+MrT6s+ub0BFVbsmGHNrMQttXX9gtmwkeAEvj3mra9e5pkNf90qlKnZz6U0SVArxVsLx07vHPHDIYrl0OPG4zUREF52igbBPiNrHJFDQJT/4YlDMJmo/QT/A1D6n9ocemvZSzhRx15/Arjowhr+VVKSbaxzPtEfY0oIg2SrqJnnr/l3Du5qIefwh5VmCZe4xopPUaDDoOIEFriZ88sB+3zz8ib8sk8zJJQCgeP78tQvXCgS+4e5W3TUg9mxjB6KjXTyHIVhDZqhqde0OI3Fy1UuVzRUwnBaLjBnAwP5EoFQGRmDYk/rEYe7HTmovLeEBUDQocBQKT4Ripm/xJkkWY7B07K/tfo56dGUCkvyIVXKBInCh+dLK7gZapnd4UWkY0xBYcwo1geMLRq58iFTLA2j/JmpmHXp7m0l7jJii7d44uD3tTIFYThn7NlOnvhLim/YcBK07GMGIN7XwrrKZKmxXaspw6KBWVhzuw1UPxctxshYEaMLfFg/bwOw8HvMPr9VtrElpSB7oiOh91PDIPdPBgHCi7N2QgQ5l/ZDBHieSpNrQ== thomasrodgers")
 *                     .build())
 *                 .proxyConfig(AzureNodePoolConfigProxyConfigArgs.builder()
 *                     .resourceGroupId("/subscriptions/12345678-1234-1234-1234-123456789111/resourceGroups/my--dev-cluster")
 *                     .secretId("https://my--dev-keyvault.vault.azure.net/secrets/my--dev-secret/0000000000000000000000000000000000")
 *                     .build())
 *                 .rootVolume(AzureNodePoolConfigRootVolumeArgs.builder()
 *                     .sizeGib(32)
 *                     .build())
 *                 .tags(Map.of("owner", "mmv2"))
 *                 .labels(Map.of("key_one", "label_one"))
 *                 .vmSize("Standard_DS2_v2")
 *                 .build())
 *             .location("us-west1")
 *             .maxPodsConstraint(AzureNodePoolMaxPodsConstraintArgs.builder()
 *                 .maxPodsPerNode(110)
 *                 .build())
 *             .name("node-pool-name")
 *             .subnetId("/subscriptions/12345678-1234-1234-1234-123456789111/resourceGroups/my--dev-byo/providers/Microsoft.Network/virtualNetworks/my--dev-vnet/subnets/default")
 *             .version(versions.applyValue(getAzureVersionsResult -> getAzureVersionsResult.validVersions()[0]))
 *             .annotations(Map.of("annotation-one", "value-one"))
 *             .management(AzureNodePoolManagementArgs.builder()
 *                 .autoRepair(true)
 *                 .build())
 *             .project("my-project-name")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * NodePool can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/locations/{{location}}/azureClusters/{{cluster}}/azureNodePools/{{name}}`
 * 
 * * `{{project}}/{{location}}/{{cluster}}/{{name}}`
 * 
 * * `{{location}}/{{cluster}}/{{name}}`
 * 
 * When using the `pulumi import` command, NodePool can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:container/azureNodePool:AzureNodePool default projects/{{project}}/locations/{{location}}/azureClusters/{{cluster}}/azureNodePools/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:container/azureNodePool:AzureNodePool default {{project}}/{{location}}/{{cluster}}/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:container/azureNodePool:AzureNodePool default {{location}}/{{cluster}}/{{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:container/azureNodePool:AzureNodePool")
public class AzureNodePool extends com.pulumi.resources.CustomResource {
    /**
     * Optional. Annotations on the node pool. This field has the same restrictions as Kubernetes annotations. The total size
     * of all keys and values combined is limited to 256k. Keys can have 2 segments: prefix (optional) and name (required),
     * separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with
     * alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between. **Note**: This field is
     * non-authoritative, and will only manage the annotations present in your configuration. Please refer to the field
     * `effective_annotations` for all of the annotations present on the resource.
     * 
     */
    @Export(name="annotations", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> annotations;

    /**
     * @return Optional. Annotations on the node pool. This field has the same restrictions as Kubernetes annotations. The total size
     * of all keys and values combined is limited to 256k. Keys can have 2 segments: prefix (optional) and name (required),
     * separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with
     * alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between. **Note**: This field is
     * non-authoritative, and will only manage the annotations present in your configuration. Please refer to the field
     * `effective_annotations` for all of the annotations present on the resource.
     * 
     */
    public Output<Optional<Map<String,String>>> annotations() {
        return Codegen.optional(this.annotations);
    }
    /**
     * Autoscaler configuration for this node pool.
     * 
     */
    @Export(name="autoscaling", refs={AzureNodePoolAutoscaling.class}, tree="[0]")
    private Output<AzureNodePoolAutoscaling> autoscaling;

    /**
     * @return Autoscaler configuration for this node pool.
     * 
     */
    public Output<AzureNodePoolAutoscaling> autoscaling() {
        return this.autoscaling;
    }
    /**
     * Optional. The Azure availability zone of the nodes in this nodepool. When unspecified, it defaults to `1`.
     * 
     */
    @Export(name="azureAvailabilityZone", refs={String.class}, tree="[0]")
    private Output<String> azureAvailabilityZone;

    /**
     * @return Optional. The Azure availability zone of the nodes in this nodepool. When unspecified, it defaults to `1`.
     * 
     */
    public Output<String> azureAvailabilityZone() {
        return this.azureAvailabilityZone;
    }
    /**
     * The azureCluster for the resource
     * 
     */
    @Export(name="cluster", refs={String.class}, tree="[0]")
    private Output<String> cluster;

    /**
     * @return The azureCluster for the resource
     * 
     */
    public Output<String> cluster() {
        return this.cluster;
    }
    /**
     * The node configuration of the node pool.
     * 
     */
    @Export(name="config", refs={AzureNodePoolConfig.class}, tree="[0]")
    private Output<AzureNodePoolConfig> config;

    /**
     * @return The node configuration of the node pool.
     * 
     */
    public Output<AzureNodePoolConfig> config() {
        return this.config;
    }
    /**
     * Output only. The time at which this node pool was created.
     * 
     */
    @Export(name="createTime", refs={String.class}, tree="[0]")
    private Output<String> createTime;

    /**
     * @return Output only. The time at which this node pool was created.
     * 
     */
    public Output<String> createTime() {
        return this.createTime;
    }
    @Export(name="effectiveAnnotations", refs={Map.class,String.class,Object.class}, tree="[0,1,2]")
    private Output<Map<String,Object>> effectiveAnnotations;

    public Output<Map<String,Object>> effectiveAnnotations() {
        return this.effectiveAnnotations;
    }
    /**
     * Allows clients to perform consistent read-modify-writes through optimistic concurrency control. May be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
     * 
     */
    @Export(name="etag", refs={String.class}, tree="[0]")
    private Output<String> etag;

    /**
     * @return Allows clients to perform consistent read-modify-writes through optimistic concurrency control. May be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
     * 
     */
    public Output<String> etag() {
        return this.etag;
    }
    /**
     * The location for the resource
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output<String> location;

    /**
     * @return The location for the resource
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * The Management configuration for this node pool.
     * 
     */
    @Export(name="management", refs={AzureNodePoolManagement.class}, tree="[0]")
    private Output<AzureNodePoolManagement> management;

    /**
     * @return The Management configuration for this node pool.
     * 
     */
    public Output<AzureNodePoolManagement> management() {
        return this.management;
    }
    /**
     * The constraint on the maximum number of pods that can be run simultaneously on a node in the node pool.
     * 
     */
    @Export(name="maxPodsConstraint", refs={AzureNodePoolMaxPodsConstraint.class}, tree="[0]")
    private Output<AzureNodePoolMaxPodsConstraint> maxPodsConstraint;

    /**
     * @return The constraint on the maximum number of pods that can be run simultaneously on a node in the node pool.
     * 
     */
    public Output<AzureNodePoolMaxPodsConstraint> maxPodsConstraint() {
        return this.maxPodsConstraint;
    }
    /**
     * The name of this resource.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of this resource.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The project for the resource
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The project for the resource
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * Output only. If set, there are currently pending changes to the node pool.
     * 
     */
    @Export(name="reconciling", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> reconciling;

    /**
     * @return Output only. If set, there are currently pending changes to the node pool.
     * 
     */
    public Output<Boolean> reconciling() {
        return this.reconciling;
    }
    /**
     * Output only. The current state of the node pool. Possible values: STATE_UNSPECIFIED, PROVISIONING, RUNNING, RECONCILING, STOPPING, ERROR, DEGRADED
     * 
     */
    @Export(name="state", refs={String.class}, tree="[0]")
    private Output<String> state;

    /**
     * @return Output only. The current state of the node pool. Possible values: STATE_UNSPECIFIED, PROVISIONING, RUNNING, RECONCILING, STOPPING, ERROR, DEGRADED
     * 
     */
    public Output<String> state() {
        return this.state;
    }
    /**
     * The ARM ID of the subnet where the node pool VMs run. Make sure it&#39;s a subnet under the virtual network in the cluster configuration.
     * 
     */
    @Export(name="subnetId", refs={String.class}, tree="[0]")
    private Output<String> subnetId;

    /**
     * @return The ARM ID of the subnet where the node pool VMs run. Make sure it&#39;s a subnet under the virtual network in the cluster configuration.
     * 
     */
    public Output<String> subnetId() {
        return this.subnetId;
    }
    /**
     * Output only. A globally unique identifier for the node pool.
     * 
     */
    @Export(name="uid", refs={String.class}, tree="[0]")
    private Output<String> uid;

    /**
     * @return Output only. A globally unique identifier for the node pool.
     * 
     */
    public Output<String> uid() {
        return this.uid;
    }
    /**
     * Output only. The time at which this node pool was last updated.
     * 
     */
    @Export(name="updateTime", refs={String.class}, tree="[0]")
    private Output<String> updateTime;

    /**
     * @return Output only. The time at which this node pool was last updated.
     * 
     */
    public Output<String> updateTime() {
        return this.updateTime;
    }
    /**
     * The Kubernetes version (e.g. `1.19.10-gke.1000`) running on this node pool.
     * 
     */
    @Export(name="version", refs={String.class}, tree="[0]")
    private Output<String> version;

    /**
     * @return The Kubernetes version (e.g. `1.19.10-gke.1000`) running on this node pool.
     * 
     */
    public Output<String> version() {
        return this.version;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public AzureNodePool(String name) {
        this(name, AzureNodePoolArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public AzureNodePool(String name, AzureNodePoolArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public AzureNodePool(String name, AzureNodePoolArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:container/azureNodePool:AzureNodePool", name, args == null ? AzureNodePoolArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private AzureNodePool(String name, Output<String> id, @Nullable AzureNodePoolState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:container/azureNodePool:AzureNodePool", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static AzureNodePool get(String name, Output<String> id, @Nullable AzureNodePoolState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new AzureNodePool(name, id, state, options);
    }
}
