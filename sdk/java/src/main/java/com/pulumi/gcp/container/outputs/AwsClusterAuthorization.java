// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.container.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.container.outputs.AwsClusterAuthorizationAdminUser;
import java.util.List;
import java.util.Objects;

@CustomType
public final class AwsClusterAuthorization {
    /**
     * @return Users to perform operations as a cluster admin. A managed ClusterRoleBinding will be created to grant the `cluster-admin` ClusterRole to the users. Up to ten admin users can be provided. For more info on RBAC, see https://kubernetes.io/docs/reference/access-authn-authz/rbac/#user-facing-roles
     * 
     */
    private List<AwsClusterAuthorizationAdminUser> adminUsers;

    private AwsClusterAuthorization() {}
    /**
     * @return Users to perform operations as a cluster admin. A managed ClusterRoleBinding will be created to grant the `cluster-admin` ClusterRole to the users. Up to ten admin users can be provided. For more info on RBAC, see https://kubernetes.io/docs/reference/access-authn-authz/rbac/#user-facing-roles
     * 
     */
    public List<AwsClusterAuthorizationAdminUser> adminUsers() {
        return this.adminUsers;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AwsClusterAuthorization defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<AwsClusterAuthorizationAdminUser> adminUsers;
        public Builder() {}
        public Builder(AwsClusterAuthorization defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.adminUsers = defaults.adminUsers;
        }

        @CustomType.Setter
        public Builder adminUsers(List<AwsClusterAuthorizationAdminUser> adminUsers) {
            this.adminUsers = Objects.requireNonNull(adminUsers);
            return this;
        }
        public Builder adminUsers(AwsClusterAuthorizationAdminUser... adminUsers) {
            return adminUsers(List.of(adminUsers));
        }
        public AwsClusterAuthorization build() {
            final var o = new AwsClusterAuthorization();
            o.adminUsers = adminUsers;
            return o;
        }
    }
}
