// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudasset.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetResourcesSearchAllArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetResourcesSearchAllArgs Empty = new GetResourcesSearchAllArgs();

    /**
     * A list of asset types that this request searches for. If empty, it will search all the [supported asset types](https://cloud.google.com/asset-inventory/docs/supported-asset-types).
     * 
     */
    @Import(name="assetTypes")
    private @Nullable Output<List<String>> assetTypes;

    /**
     * @return A list of asset types that this request searches for. If empty, it will search all the [supported asset types](https://cloud.google.com/asset-inventory/docs/supported-asset-types).
     * 
     */
    public Optional<Output<List<String>>> assetTypes() {
        return Optional.ofNullable(this.assetTypes);
    }

    /**
     * The query statement. See [how to construct a query](https://cloud.google.com/asset-inventory/docs/searching-resources#how_to_construct_a_query) for more information. If not specified or empty, it will search all the resources within the specified `scope` and `asset_types`.
     * 
     */
    @Import(name="query")
    private @Nullable Output<String> query;

    /**
     * @return The query statement. See [how to construct a query](https://cloud.google.com/asset-inventory/docs/searching-resources#how_to_construct_a_query) for more information. If not specified or empty, it will search all the resources within the specified `scope` and `asset_types`.
     * 
     */
    public Optional<Output<String>> query() {
        return Optional.ofNullable(this.query);
    }

    /**
     * A scope can be a project, a folder, or an organization. The allowed value must be: organization number (such as &#34;organizations/123&#34;), folder number (such as &#34;folders/1234&#34;), project number (such as &#34;projects/12345&#34;) or project id (such as &#34;projects/abc&#34;)
     * 
     */
    @Import(name="scope", required=true)
    private Output<String> scope;

    /**
     * @return A scope can be a project, a folder, or an organization. The allowed value must be: organization number (such as &#34;organizations/123&#34;), folder number (such as &#34;folders/1234&#34;), project number (such as &#34;projects/12345&#34;) or project id (such as &#34;projects/abc&#34;)
     * 
     */
    public Output<String> scope() {
        return this.scope;
    }

    private GetResourcesSearchAllArgs() {}

    private GetResourcesSearchAllArgs(GetResourcesSearchAllArgs $) {
        this.assetTypes = $.assetTypes;
        this.query = $.query;
        this.scope = $.scope;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetResourcesSearchAllArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetResourcesSearchAllArgs $;

        public Builder() {
            $ = new GetResourcesSearchAllArgs();
        }

        public Builder(GetResourcesSearchAllArgs defaults) {
            $ = new GetResourcesSearchAllArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param assetTypes A list of asset types that this request searches for. If empty, it will search all the [supported asset types](https://cloud.google.com/asset-inventory/docs/supported-asset-types).
         * 
         * @return builder
         * 
         */
        public Builder assetTypes(@Nullable Output<List<String>> assetTypes) {
            $.assetTypes = assetTypes;
            return this;
        }

        /**
         * @param assetTypes A list of asset types that this request searches for. If empty, it will search all the [supported asset types](https://cloud.google.com/asset-inventory/docs/supported-asset-types).
         * 
         * @return builder
         * 
         */
        public Builder assetTypes(List<String> assetTypes) {
            return assetTypes(Output.of(assetTypes));
        }

        /**
         * @param assetTypes A list of asset types that this request searches for. If empty, it will search all the [supported asset types](https://cloud.google.com/asset-inventory/docs/supported-asset-types).
         * 
         * @return builder
         * 
         */
        public Builder assetTypes(String... assetTypes) {
            return assetTypes(List.of(assetTypes));
        }

        /**
         * @param query The query statement. See [how to construct a query](https://cloud.google.com/asset-inventory/docs/searching-resources#how_to_construct_a_query) for more information. If not specified or empty, it will search all the resources within the specified `scope` and `asset_types`.
         * 
         * @return builder
         * 
         */
        public Builder query(@Nullable Output<String> query) {
            $.query = query;
            return this;
        }

        /**
         * @param query The query statement. See [how to construct a query](https://cloud.google.com/asset-inventory/docs/searching-resources#how_to_construct_a_query) for more information. If not specified or empty, it will search all the resources within the specified `scope` and `asset_types`.
         * 
         * @return builder
         * 
         */
        public Builder query(String query) {
            return query(Output.of(query));
        }

        /**
         * @param scope A scope can be a project, a folder, or an organization. The allowed value must be: organization number (such as &#34;organizations/123&#34;), folder number (such as &#34;folders/1234&#34;), project number (such as &#34;projects/12345&#34;) or project id (such as &#34;projects/abc&#34;)
         * 
         * @return builder
         * 
         */
        public Builder scope(Output<String> scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param scope A scope can be a project, a folder, or an organization. The allowed value must be: organization number (such as &#34;organizations/123&#34;), folder number (such as &#34;folders/1234&#34;), project number (such as &#34;projects/12345&#34;) or project id (such as &#34;projects/abc&#34;)
         * 
         * @return builder
         * 
         */
        public Builder scope(String scope) {
            return scope(Output.of(scope));
        }

        public GetResourcesSearchAllArgs build() {
            $.scope = Objects.requireNonNull($.scope, "expected parameter 'scope' to be non-null");
            return $;
        }
    }

}
