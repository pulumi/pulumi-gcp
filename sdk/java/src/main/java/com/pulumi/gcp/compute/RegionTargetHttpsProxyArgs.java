// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RegionTargetHttpsProxyArgs extends com.pulumi.resources.ResourceArgs {

    public static final RegionTargetHttpsProxyArgs Empty = new RegionTargetHttpsProxyArgs();

    /**
     * URLs to certificate manager certificate resources that are used to authenticate connections between users and the load balancer.
     * sslCertificates and certificateManagerCertificates can&#39;t be defined together.
     * Accepted format is `//certificatemanager.googleapis.com/projects/{project}/locations/{location}/certificates/{resourceName}` or just the self_link `projects/{project}/locations/{location}/certificates/{resourceName}`
     * 
     */
    @Import(name="certificateManagerCertificates")
    private @Nullable Output<List<String>> certificateManagerCertificates;

    /**
     * @return URLs to certificate manager certificate resources that are used to authenticate connections between users and the load balancer.
     * sslCertificates and certificateManagerCertificates can&#39;t be defined together.
     * Accepted format is `//certificatemanager.googleapis.com/projects/{project}/locations/{location}/certificates/{resourceName}` or just the self_link `projects/{project}/locations/{location}/certificates/{resourceName}`
     * 
     */
    public Optional<Output<List<String>>> certificateManagerCertificates() {
        return Optional.ofNullable(this.certificateManagerCertificates);
    }

    /**
     * An optional description of this resource.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return An optional description of this resource.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Specifies how long to keep a connection open, after completing a response,
     * while there is no matching traffic (in seconds). If an HTTP keepalive is
     * not specified, a default value (600 seconds) will be used. For Regioanl
     * HTTP(S) load balancer, the minimum allowed value is 5 seconds and the
     * maximum allowed value is 600 seconds.
     * 
     */
    @Import(name="httpKeepAliveTimeoutSec")
    private @Nullable Output<Integer> httpKeepAliveTimeoutSec;

    /**
     * @return Specifies how long to keep a connection open, after completing a response,
     * while there is no matching traffic (in seconds). If an HTTP keepalive is
     * not specified, a default value (600 seconds) will be used. For Regioanl
     * HTTP(S) load balancer, the minimum allowed value is 5 seconds and the
     * maximum allowed value is 600 seconds.
     * 
     */
    public Optional<Output<Integer>> httpKeepAliveTimeoutSec() {
        return Optional.ofNullable(this.httpKeepAliveTimeoutSec);
    }

    /**
     * Name of the resource. Provided by the client when the resource is
     * created. The name must be 1-63 characters long, and comply with
     * RFC1035. Specifically, the name must be 1-63 characters long and match
     * the regular expression `a-z?` which means the
     * first character must be a lowercase letter, and all following
     * characters must be a dash, lowercase letter, or digit, except the last
     * character, which cannot be a dash.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the resource. Provided by the client when the resource is
     * created. The name must be 1-63 characters long, and comply with
     * RFC1035. Specifically, the name must be 1-63 characters long and match
     * the regular expression `a-z?` which means the
     * first character must be a lowercase letter, and all following
     * characters must be a dash, lowercase letter, or digit, except the last
     * character, which cannot be a dash.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The Region in which the created target https proxy should reside.
     * If it is not provided, the provider region is used.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The Region in which the created target https proxy should reside.
     * If it is not provided, the provider region is used.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * A URL referring to a networksecurity.ServerTlsPolicy
     * resource that describes how the proxy should authenticate inbound
     * traffic. serverTlsPolicy only applies to a global TargetHttpsProxy
     * attached to globalForwardingRules with the loadBalancingScheme
     * set to INTERNAL_SELF_MANAGED or EXTERNAL or EXTERNAL_MANAGED.
     * For details which ServerTlsPolicy resources are accepted with
     * INTERNAL_SELF_MANAGED and which with EXTERNAL, EXTERNAL_MANAGED
     * loadBalancingScheme consult ServerTlsPolicy documentation.
     * If left blank, communications are not encrypted.
     * If you remove this field from your configuration at the same time as
     * deleting or recreating a referenced ServerTlsPolicy resource, you will
     * receive a resourceInUseByAnotherResource error. Use lifecycle.create_before_destroy
     * within the ServerTlsPolicy resource to avoid this.
     * 
     */
    @Import(name="serverTlsPolicy")
    private @Nullable Output<String> serverTlsPolicy;

    /**
     * @return A URL referring to a networksecurity.ServerTlsPolicy
     * resource that describes how the proxy should authenticate inbound
     * traffic. serverTlsPolicy only applies to a global TargetHttpsProxy
     * attached to globalForwardingRules with the loadBalancingScheme
     * set to INTERNAL_SELF_MANAGED or EXTERNAL or EXTERNAL_MANAGED.
     * For details which ServerTlsPolicy resources are accepted with
     * INTERNAL_SELF_MANAGED and which with EXTERNAL, EXTERNAL_MANAGED
     * loadBalancingScheme consult ServerTlsPolicy documentation.
     * If left blank, communications are not encrypted.
     * If you remove this field from your configuration at the same time as
     * deleting or recreating a referenced ServerTlsPolicy resource, you will
     * receive a resourceInUseByAnotherResource error. Use lifecycle.create_before_destroy
     * within the ServerTlsPolicy resource to avoid this.
     * 
     */
    public Optional<Output<String>> serverTlsPolicy() {
        return Optional.ofNullable(this.serverTlsPolicy);
    }

    /**
     * URLs to SslCertificate resources that are used to authenticate connections between users and the load balancer.
     * At least one SSL certificate must be specified. Currently, you may specify up to 15 SSL certificates.
     * sslCertificates do not apply when the load balancing scheme is set to INTERNAL_SELF_MANAGED.
     * 
     */
    @Import(name="sslCertificates")
    private @Nullable Output<List<String>> sslCertificates;

    /**
     * @return URLs to SslCertificate resources that are used to authenticate connections between users and the load balancer.
     * At least one SSL certificate must be specified. Currently, you may specify up to 15 SSL certificates.
     * sslCertificates do not apply when the load balancing scheme is set to INTERNAL_SELF_MANAGED.
     * 
     */
    public Optional<Output<List<String>>> sslCertificates() {
        return Optional.ofNullable(this.sslCertificates);
    }

    /**
     * A reference to the Region SslPolicy resource that will be associated with
     * the TargetHttpsProxy resource. If not set, the TargetHttpsProxy
     * resource will not have any SSL policy configured.
     * 
     */
    @Import(name="sslPolicy")
    private @Nullable Output<String> sslPolicy;

    /**
     * @return A reference to the Region SslPolicy resource that will be associated with
     * the TargetHttpsProxy resource. If not set, the TargetHttpsProxy
     * resource will not have any SSL policy configured.
     * 
     */
    public Optional<Output<String>> sslPolicy() {
        return Optional.ofNullable(this.sslPolicy);
    }

    /**
     * A reference to the RegionUrlMap resource that defines the mapping from URL
     * to the RegionBackendService.
     * 
     * ***
     * 
     */
    @Import(name="urlMap", required=true)
    private Output<String> urlMap;

    /**
     * @return A reference to the RegionUrlMap resource that defines the mapping from URL
     * to the RegionBackendService.
     * 
     * ***
     * 
     */
    public Output<String> urlMap() {
        return this.urlMap;
    }

    private RegionTargetHttpsProxyArgs() {}

    private RegionTargetHttpsProxyArgs(RegionTargetHttpsProxyArgs $) {
        this.certificateManagerCertificates = $.certificateManagerCertificates;
        this.description = $.description;
        this.httpKeepAliveTimeoutSec = $.httpKeepAliveTimeoutSec;
        this.name = $.name;
        this.project = $.project;
        this.region = $.region;
        this.serverTlsPolicy = $.serverTlsPolicy;
        this.sslCertificates = $.sslCertificates;
        this.sslPolicy = $.sslPolicy;
        this.urlMap = $.urlMap;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RegionTargetHttpsProxyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RegionTargetHttpsProxyArgs $;

        public Builder() {
            $ = new RegionTargetHttpsProxyArgs();
        }

        public Builder(RegionTargetHttpsProxyArgs defaults) {
            $ = new RegionTargetHttpsProxyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificateManagerCertificates URLs to certificate manager certificate resources that are used to authenticate connections between users and the load balancer.
         * sslCertificates and certificateManagerCertificates can&#39;t be defined together.
         * Accepted format is `//certificatemanager.googleapis.com/projects/{project}/locations/{location}/certificates/{resourceName}` or just the self_link `projects/{project}/locations/{location}/certificates/{resourceName}`
         * 
         * @return builder
         * 
         */
        public Builder certificateManagerCertificates(@Nullable Output<List<String>> certificateManagerCertificates) {
            $.certificateManagerCertificates = certificateManagerCertificates;
            return this;
        }

        /**
         * @param certificateManagerCertificates URLs to certificate manager certificate resources that are used to authenticate connections between users and the load balancer.
         * sslCertificates and certificateManagerCertificates can&#39;t be defined together.
         * Accepted format is `//certificatemanager.googleapis.com/projects/{project}/locations/{location}/certificates/{resourceName}` or just the self_link `projects/{project}/locations/{location}/certificates/{resourceName}`
         * 
         * @return builder
         * 
         */
        public Builder certificateManagerCertificates(List<String> certificateManagerCertificates) {
            return certificateManagerCertificates(Output.of(certificateManagerCertificates));
        }

        /**
         * @param certificateManagerCertificates URLs to certificate manager certificate resources that are used to authenticate connections between users and the load balancer.
         * sslCertificates and certificateManagerCertificates can&#39;t be defined together.
         * Accepted format is `//certificatemanager.googleapis.com/projects/{project}/locations/{location}/certificates/{resourceName}` or just the self_link `projects/{project}/locations/{location}/certificates/{resourceName}`
         * 
         * @return builder
         * 
         */
        public Builder certificateManagerCertificates(String... certificateManagerCertificates) {
            return certificateManagerCertificates(List.of(certificateManagerCertificates));
        }

        /**
         * @param description An optional description of this resource.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description An optional description of this resource.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param httpKeepAliveTimeoutSec Specifies how long to keep a connection open, after completing a response,
         * while there is no matching traffic (in seconds). If an HTTP keepalive is
         * not specified, a default value (600 seconds) will be used. For Regioanl
         * HTTP(S) load balancer, the minimum allowed value is 5 seconds and the
         * maximum allowed value is 600 seconds.
         * 
         * @return builder
         * 
         */
        public Builder httpKeepAliveTimeoutSec(@Nullable Output<Integer> httpKeepAliveTimeoutSec) {
            $.httpKeepAliveTimeoutSec = httpKeepAliveTimeoutSec;
            return this;
        }

        /**
         * @param httpKeepAliveTimeoutSec Specifies how long to keep a connection open, after completing a response,
         * while there is no matching traffic (in seconds). If an HTTP keepalive is
         * not specified, a default value (600 seconds) will be used. For Regioanl
         * HTTP(S) load balancer, the minimum allowed value is 5 seconds and the
         * maximum allowed value is 600 seconds.
         * 
         * @return builder
         * 
         */
        public Builder httpKeepAliveTimeoutSec(Integer httpKeepAliveTimeoutSec) {
            return httpKeepAliveTimeoutSec(Output.of(httpKeepAliveTimeoutSec));
        }

        /**
         * @param name Name of the resource. Provided by the client when the resource is
         * created. The name must be 1-63 characters long, and comply with
         * RFC1035. Specifically, the name must be 1-63 characters long and match
         * the regular expression `a-z?` which means the
         * first character must be a lowercase letter, and all following
         * characters must be a dash, lowercase letter, or digit, except the last
         * character, which cannot be a dash.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the resource. Provided by the client when the resource is
         * created. The name must be 1-63 characters long, and comply with
         * RFC1035. Specifically, the name must be 1-63 characters long and match
         * the regular expression `a-z?` which means the
         * first character must be a lowercase letter, and all following
         * characters must be a dash, lowercase letter, or digit, except the last
         * character, which cannot be a dash.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param region The Region in which the created target https proxy should reside.
         * If it is not provided, the provider region is used.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The Region in which the created target https proxy should reside.
         * If it is not provided, the provider region is used.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param serverTlsPolicy A URL referring to a networksecurity.ServerTlsPolicy
         * resource that describes how the proxy should authenticate inbound
         * traffic. serverTlsPolicy only applies to a global TargetHttpsProxy
         * attached to globalForwardingRules with the loadBalancingScheme
         * set to INTERNAL_SELF_MANAGED or EXTERNAL or EXTERNAL_MANAGED.
         * For details which ServerTlsPolicy resources are accepted with
         * INTERNAL_SELF_MANAGED and which with EXTERNAL, EXTERNAL_MANAGED
         * loadBalancingScheme consult ServerTlsPolicy documentation.
         * If left blank, communications are not encrypted.
         * If you remove this field from your configuration at the same time as
         * deleting or recreating a referenced ServerTlsPolicy resource, you will
         * receive a resourceInUseByAnotherResource error. Use lifecycle.create_before_destroy
         * within the ServerTlsPolicy resource to avoid this.
         * 
         * @return builder
         * 
         */
        public Builder serverTlsPolicy(@Nullable Output<String> serverTlsPolicy) {
            $.serverTlsPolicy = serverTlsPolicy;
            return this;
        }

        /**
         * @param serverTlsPolicy A URL referring to a networksecurity.ServerTlsPolicy
         * resource that describes how the proxy should authenticate inbound
         * traffic. serverTlsPolicy only applies to a global TargetHttpsProxy
         * attached to globalForwardingRules with the loadBalancingScheme
         * set to INTERNAL_SELF_MANAGED or EXTERNAL or EXTERNAL_MANAGED.
         * For details which ServerTlsPolicy resources are accepted with
         * INTERNAL_SELF_MANAGED and which with EXTERNAL, EXTERNAL_MANAGED
         * loadBalancingScheme consult ServerTlsPolicy documentation.
         * If left blank, communications are not encrypted.
         * If you remove this field from your configuration at the same time as
         * deleting or recreating a referenced ServerTlsPolicy resource, you will
         * receive a resourceInUseByAnotherResource error. Use lifecycle.create_before_destroy
         * within the ServerTlsPolicy resource to avoid this.
         * 
         * @return builder
         * 
         */
        public Builder serverTlsPolicy(String serverTlsPolicy) {
            return serverTlsPolicy(Output.of(serverTlsPolicy));
        }

        /**
         * @param sslCertificates URLs to SslCertificate resources that are used to authenticate connections between users and the load balancer.
         * At least one SSL certificate must be specified. Currently, you may specify up to 15 SSL certificates.
         * sslCertificates do not apply when the load balancing scheme is set to INTERNAL_SELF_MANAGED.
         * 
         * @return builder
         * 
         */
        public Builder sslCertificates(@Nullable Output<List<String>> sslCertificates) {
            $.sslCertificates = sslCertificates;
            return this;
        }

        /**
         * @param sslCertificates URLs to SslCertificate resources that are used to authenticate connections between users and the load balancer.
         * At least one SSL certificate must be specified. Currently, you may specify up to 15 SSL certificates.
         * sslCertificates do not apply when the load balancing scheme is set to INTERNAL_SELF_MANAGED.
         * 
         * @return builder
         * 
         */
        public Builder sslCertificates(List<String> sslCertificates) {
            return sslCertificates(Output.of(sslCertificates));
        }

        /**
         * @param sslCertificates URLs to SslCertificate resources that are used to authenticate connections between users and the load balancer.
         * At least one SSL certificate must be specified. Currently, you may specify up to 15 SSL certificates.
         * sslCertificates do not apply when the load balancing scheme is set to INTERNAL_SELF_MANAGED.
         * 
         * @return builder
         * 
         */
        public Builder sslCertificates(String... sslCertificates) {
            return sslCertificates(List.of(sslCertificates));
        }

        /**
         * @param sslPolicy A reference to the Region SslPolicy resource that will be associated with
         * the TargetHttpsProxy resource. If not set, the TargetHttpsProxy
         * resource will not have any SSL policy configured.
         * 
         * @return builder
         * 
         */
        public Builder sslPolicy(@Nullable Output<String> sslPolicy) {
            $.sslPolicy = sslPolicy;
            return this;
        }

        /**
         * @param sslPolicy A reference to the Region SslPolicy resource that will be associated with
         * the TargetHttpsProxy resource. If not set, the TargetHttpsProxy
         * resource will not have any SSL policy configured.
         * 
         * @return builder
         * 
         */
        public Builder sslPolicy(String sslPolicy) {
            return sslPolicy(Output.of(sslPolicy));
        }

        /**
         * @param urlMap A reference to the RegionUrlMap resource that defines the mapping from URL
         * to the RegionBackendService.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder urlMap(Output<String> urlMap) {
            $.urlMap = urlMap;
            return this;
        }

        /**
         * @param urlMap A reference to the RegionUrlMap resource that defines the mapping from URL
         * to the RegionBackendService.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder urlMap(String urlMap) {
            return urlMap(Output.of(urlMap));
        }

        public RegionTargetHttpsProxyArgs build() {
            if ($.urlMap == null) {
                throw new MissingRequiredPropertyException("RegionTargetHttpsProxyArgs", "urlMap");
            }
            return $;
        }
    }

}
