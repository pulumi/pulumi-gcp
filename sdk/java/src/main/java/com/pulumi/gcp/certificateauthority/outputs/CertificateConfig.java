// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.certificateauthority.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.certificateauthority.outputs.CertificateConfigPublicKey;
import com.pulumi.gcp.certificateauthority.outputs.CertificateConfigSubjectConfig;
import com.pulumi.gcp.certificateauthority.outputs.CertificateConfigSubjectKeyId;
import com.pulumi.gcp.certificateauthority.outputs.CertificateConfigX509Config;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class CertificateConfig {
    /**
     * @return A PublicKey describes a public key.
     * Structure is documented below.
     * 
     * &lt;a name=&#34;nested_x509_config&#34;&gt;&lt;/a&gt;The `x509_config` block supports:
     * 
     */
    private CertificateConfigPublicKey publicKey;
    /**
     * @return Specifies some of the values in a certificate that are related to the subject.
     * Structure is documented below.
     * 
     */
    private CertificateConfigSubjectConfig subjectConfig;
    /**
     * @return When specified this provides a custom SKI to be used in the certificate. This should only be used to maintain a SKI of an existing CA originally created outside CA service, which was not generated using method (1) described in RFC 5280 section 4.2.1.2..
     * Structure is documented below.
     * 
     */
    private @Nullable CertificateConfigSubjectKeyId subjectKeyId;
    /**
     * @return Describes how some of the technical X.509 fields in a certificate should be populated.
     * Structure is documented below.
     * 
     */
    private CertificateConfigX509Config x509Config;

    private CertificateConfig() {}
    /**
     * @return A PublicKey describes a public key.
     * Structure is documented below.
     * 
     * &lt;a name=&#34;nested_x509_config&#34;&gt;&lt;/a&gt;The `x509_config` block supports:
     * 
     */
    public CertificateConfigPublicKey publicKey() {
        return this.publicKey;
    }
    /**
     * @return Specifies some of the values in a certificate that are related to the subject.
     * Structure is documented below.
     * 
     */
    public CertificateConfigSubjectConfig subjectConfig() {
        return this.subjectConfig;
    }
    /**
     * @return When specified this provides a custom SKI to be used in the certificate. This should only be used to maintain a SKI of an existing CA originally created outside CA service, which was not generated using method (1) described in RFC 5280 section 4.2.1.2..
     * Structure is documented below.
     * 
     */
    public Optional<CertificateConfigSubjectKeyId> subjectKeyId() {
        return Optional.ofNullable(this.subjectKeyId);
    }
    /**
     * @return Describes how some of the technical X.509 fields in a certificate should be populated.
     * Structure is documented below.
     * 
     */
    public CertificateConfigX509Config x509Config() {
        return this.x509Config;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CertificateConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private CertificateConfigPublicKey publicKey;
        private CertificateConfigSubjectConfig subjectConfig;
        private @Nullable CertificateConfigSubjectKeyId subjectKeyId;
        private CertificateConfigX509Config x509Config;
        public Builder() {}
        public Builder(CertificateConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.publicKey = defaults.publicKey;
    	      this.subjectConfig = defaults.subjectConfig;
    	      this.subjectKeyId = defaults.subjectKeyId;
    	      this.x509Config = defaults.x509Config;
        }

        @CustomType.Setter
        public Builder publicKey(CertificateConfigPublicKey publicKey) {
            if (publicKey == null) {
              throw new MissingRequiredPropertyException("CertificateConfig", "publicKey");
            }
            this.publicKey = publicKey;
            return this;
        }
        @CustomType.Setter
        public Builder subjectConfig(CertificateConfigSubjectConfig subjectConfig) {
            if (subjectConfig == null) {
              throw new MissingRequiredPropertyException("CertificateConfig", "subjectConfig");
            }
            this.subjectConfig = subjectConfig;
            return this;
        }
        @CustomType.Setter
        public Builder subjectKeyId(@Nullable CertificateConfigSubjectKeyId subjectKeyId) {

            this.subjectKeyId = subjectKeyId;
            return this;
        }
        @CustomType.Setter
        public Builder x509Config(CertificateConfigX509Config x509Config) {
            if (x509Config == null) {
              throw new MissingRequiredPropertyException("CertificateConfig", "x509Config");
            }
            this.x509Config = x509Config;
            return this;
        }
        public CertificateConfig build() {
            final var _resultValue = new CertificateConfig();
            _resultValue.publicKey = publicKey;
            _resultValue.subjectConfig = subjectConfig;
            _resultValue.subjectKeyId = subjectKeyId;
            _resultValue.x509Config = x509Config;
            return _resultValue;
        }
    }
}
