// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataplex;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.dataplex.GlossaryTermArgs;
import com.pulumi.gcp.dataplex.inputs.GlossaryTermState;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Represents a collection of terms within a Glossary that are related to each other.
 * 
 * ## Example Usage
 * 
 * ### Dataplex Glossary Term Basic
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.dataplex.Glossary;
 * import com.pulumi.gcp.dataplex.GlossaryArgs;
 * import com.pulumi.gcp.dataplex.GlossaryTerm;
 * import com.pulumi.gcp.dataplex.GlossaryTermArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var termTestId = new Glossary("termTestId", GlossaryArgs.builder()
 *             .glossaryId("tf-test-glossary_88722")
 *             .location("us-central1")
 *             .build());
 * 
 *         var termTestIdGlossaryTerm = new GlossaryTerm("termTestIdGlossaryTerm", GlossaryTermArgs.builder()
 *             .parent(Output.tuple(termTestId.project(), termTestId.glossaryId()).applyValue(values -> {
 *                 var project = values.t1;
 *                 var glossaryId = values.t2;
 *                 return String.format("projects/%s/locations/us-central1/glossaries/%s", project,glossaryId);
 *             }))
 *             .glossaryId(termTestId.glossaryId())
 *             .location("us-central1")
 *             .termId("tf-test-term-basic_39249")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * ### Dataplex Glossary Term Full
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.dataplex.Glossary;
 * import com.pulumi.gcp.dataplex.GlossaryArgs;
 * import com.pulumi.gcp.dataplex.GlossaryTerm;
 * import com.pulumi.gcp.dataplex.GlossaryTermArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var termTestIdFull = new Glossary("termTestIdFull", GlossaryArgs.builder()
 *             .glossaryId("tf-test-glossary_74391")
 *             .location("us-central1")
 *             .build());
 * 
 *         var termTestIdFullGlossaryTerm = new GlossaryTerm("termTestIdFullGlossaryTerm", GlossaryTermArgs.builder()
 *             .parent(Output.tuple(termTestIdFull.project(), termTestIdFull.glossaryId()).applyValue(values -> {
 *                 var project = values.t1;
 *                 var glossaryId = values.t2;
 *                 return String.format("projects/%s/locations/us-central1/glossaries/%s", project,glossaryId);
 *             }))
 *             .glossaryId(termTestIdFull.glossaryId())
 *             .location("us-central1")
 *             .termId("tf-test-term-full_16511")
 *             .labels(Map.of("tag", "test-tf"))
 *             .displayName("terraform term")
 *             .description("term created by Terraform")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * GlossaryTerm can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/locations/{{location}}/glossaries/{{glossary_id}}/terms/{{term_id}}`
 * 
 * * `{{project}}/{{location}}/{{glossary_id}}/{{term_id}}`
 * 
 * * `{{location}}/{{glossary_id}}/{{term_id}}`
 * 
 * When using the `pulumi import` command, GlossaryTerm can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:dataplex/glossaryTerm:GlossaryTerm default projects/{{project}}/locations/{{location}}/glossaries/{{glossary_id}}/terms/{{term_id}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:dataplex/glossaryTerm:GlossaryTerm default {{project}}/{{location}}/{{glossary_id}}/{{term_id}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:dataplex/glossaryTerm:GlossaryTerm default {{location}}/{{glossary_id}}/{{term_id}}
 * ```
 * 
 */
@ResourceType(type="gcp:dataplex/glossaryTerm:GlossaryTerm")
public class GlossaryTerm extends com.pulumi.resources.CustomResource {
    /**
     * The time at which the GlossaryTerm was created.
     * 
     */
    @Export(name="createTime", refs={String.class}, tree="[0]")
    private Output<String> createTime;

    /**
     * @return The time at which the GlossaryTerm was created.
     * 
     */
    public Output<String> createTime() {
        return this.createTime;
    }
    /**
     * The user-mutable description of the GlossaryTerm.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return The user-mutable description of the GlossaryTerm.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * User friendly display name of the GlossaryTerm. This is user-mutable. This will be same as the termId, if not specified.
     * 
     */
    @Export(name="displayName", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> displayName;

    /**
     * @return User friendly display name of the GlossaryTerm. This is user-mutable. This will be same as the termId, if not specified.
     * 
     */
    public Output<Optional<String>> displayName() {
        return Codegen.optional(this.displayName);
    }
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    @Export(name="effectiveLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> effectiveLabels;

    /**
     * @return All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    public Output<Map<String,String>> effectiveLabels() {
        return this.effectiveLabels;
    }
    /**
     * The glossary id for creation.
     * 
     */
    @Export(name="glossaryId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> glossaryId;

    /**
     * @return The glossary id for creation.
     * 
     */
    public Output<Optional<String>> glossaryId() {
        return Codegen.optional(this.glossaryId);
    }
    /**
     * User-defined labels for the GlossaryTerm.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    @Export(name="labels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> labels;

    /**
     * @return User-defined labels for the GlossaryTerm.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    public Output<Optional<Map<String,String>>> labels() {
        return Codegen.optional(this.labels);
    }
    /**
     * The location where the glossary term should reside.
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output<String> location;

    /**
     * @return The location where the glossary term should reside.
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * The resource name of the GlossaryTerm. Format: projects/{projectId}/locations/{locationId}/glossaries/{glossaryId}/categories/{termId}
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The resource name of the GlossaryTerm. Format: projects/{projectId}/locations/{locationId}/glossaries/{glossaryId}/categories/{termId}
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The immediate parent of the GlossaryTerm in the resource-hierarchy. It can either be a Glossary or a Term. Format: projects/{projectId}/locations/{locationId}/glossaries/{glossaryId} OR projects/{projectId}/locations/{locationId}/glossaries/{glossaryId}/terms/{termId}
     * 
     */
    @Export(name="parent", refs={String.class}, tree="[0]")
    private Output<String> parent;

    /**
     * @return The immediate parent of the GlossaryTerm in the resource-hierarchy. It can either be a Glossary or a Term. Format: projects/{projectId}/locations/{locationId}/glossaries/{glossaryId} OR projects/{projectId}/locations/{locationId}/glossaries/{glossaryId}/terms/{termId}
     * 
     */
    public Output<String> parent() {
        return this.parent;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    @Export(name="pulumiLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> pulumiLabels;

    /**
     * @return The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    public Output<Map<String,String>> pulumiLabels() {
        return this.pulumiLabels;
    }
    /**
     * The term id for creation.
     * 
     */
    @Export(name="termId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> termId;

    /**
     * @return The term id for creation.
     * 
     */
    public Output<Optional<String>> termId() {
        return Codegen.optional(this.termId);
    }
    /**
     * System generated unique id for the GlossaryTerm. This ID will be different if the GlossaryTerm is deleted and re-created with the same name.
     * 
     */
    @Export(name="uid", refs={String.class}, tree="[0]")
    private Output<String> uid;

    /**
     * @return System generated unique id for the GlossaryTerm. This ID will be different if the GlossaryTerm is deleted and re-created with the same name.
     * 
     */
    public Output<String> uid() {
        return this.uid;
    }
    /**
     * The time at which the GlossaryTerm was last updated.
     * 
     */
    @Export(name="updateTime", refs={String.class}, tree="[0]")
    private Output<String> updateTime;

    /**
     * @return The time at which the GlossaryTerm was last updated.
     * 
     */
    public Output<String> updateTime() {
        return this.updateTime;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public GlossaryTerm(java.lang.String name) {
        this(name, GlossaryTermArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public GlossaryTerm(java.lang.String name, GlossaryTermArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public GlossaryTerm(java.lang.String name, GlossaryTermArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:dataplex/glossaryTerm:GlossaryTerm", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private GlossaryTerm(java.lang.String name, Output<java.lang.String> id, @Nullable GlossaryTermState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:dataplex/glossaryTerm:GlossaryTerm", name, state, makeResourceOptions(options, id), false);
    }

    private static GlossaryTermArgs makeArgs(GlossaryTermArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? GlossaryTermArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "effectiveLabels",
                "pulumiLabels"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static GlossaryTerm get(java.lang.String name, Output<java.lang.String> id, @Nullable GlossaryTermState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new GlossaryTerm(name, id, state, options);
    }
}
