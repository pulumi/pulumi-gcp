// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.compute.inputs.DiskAsyncPrimaryDiskArgs;
import com.pulumi.gcp.compute.inputs.DiskDiskEncryptionKeyArgs;
import com.pulumi.gcp.compute.inputs.DiskGuestOsFeatureArgs;
import com.pulumi.gcp.compute.inputs.DiskParamsArgs;
import com.pulumi.gcp.compute.inputs.DiskSourceImageEncryptionKeyArgs;
import com.pulumi.gcp.compute.inputs.DiskSourceSnapshotEncryptionKeyArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DiskArgs extends com.pulumi.resources.ResourceArgs {

    public static final DiskArgs Empty = new DiskArgs();

    /**
     * The access mode of the disk.
     * For example:
     * * READ_WRITE_SINGLE: The default AccessMode, means the disk can be attached to single instance in RW mode.
     * * READ_WRITE_MANY: The AccessMode means the disk can be attached to multiple instances in RW mode.
     * * READ_ONLY_SINGLE: The AccessMode means the disk can be attached to multiple instances in RO mode.
     *   The AccessMode is only valid for Hyperdisk disk types.
     * 
     */
    @Import(name="accessMode")
    private @Nullable Output<String> accessMode;

    /**
     * @return The access mode of the disk.
     * For example:
     * * READ_WRITE_SINGLE: The default AccessMode, means the disk can be attached to single instance in RW mode.
     * * READ_WRITE_MANY: The AccessMode means the disk can be attached to multiple instances in RW mode.
     * * READ_ONLY_SINGLE: The AccessMode means the disk can be attached to multiple instances in RO mode.
     *   The AccessMode is only valid for Hyperdisk disk types.
     * 
     */
    public Optional<Output<String>> accessMode() {
        return Optional.ofNullable(this.accessMode);
    }

    /**
     * The architecture of the disk. Values include `X86_64`, `ARM64`.
     * 
     */
    @Import(name="architecture")
    private @Nullable Output<String> architecture;

    /**
     * @return The architecture of the disk. Values include `X86_64`, `ARM64`.
     * 
     */
    public Optional<Output<String>> architecture() {
        return Optional.ofNullable(this.architecture);
    }

    /**
     * A nested object resource.
     * Structure is documented below.
     * 
     */
    @Import(name="asyncPrimaryDisk")
    private @Nullable Output<DiskAsyncPrimaryDiskArgs> asyncPrimaryDisk;

    /**
     * @return A nested object resource.
     * Structure is documented below.
     * 
     */
    public Optional<Output<DiskAsyncPrimaryDiskArgs>> asyncPrimaryDisk() {
        return Optional.ofNullable(this.asyncPrimaryDisk);
    }

    /**
     * If set to true, a snapshot of the disk will be created before it is destroyed.
     * If your disk is encrypted with customer managed encryption keys these will be reused for the snapshot creation.
     * The name of the snapshot by default will be `{{disk-name}}-YYYYMMDD-HHmm`
     * 
     */
    @Import(name="createSnapshotBeforeDestroy")
    private @Nullable Output<Boolean> createSnapshotBeforeDestroy;

    /**
     * @return If set to true, a snapshot of the disk will be created before it is destroyed.
     * If your disk is encrypted with customer managed encryption keys these will be reused for the snapshot creation.
     * The name of the snapshot by default will be `{{disk-name}}-YYYYMMDD-HHmm`
     * 
     */
    public Optional<Output<Boolean>> createSnapshotBeforeDestroy() {
        return Optional.ofNullable(this.createSnapshotBeforeDestroy);
    }

    /**
     * This will set a custom name prefix for the snapshot that&#39;s created when the disk is deleted.
     * 
     */
    @Import(name="createSnapshotBeforeDestroyPrefix")
    private @Nullable Output<String> createSnapshotBeforeDestroyPrefix;

    /**
     * @return This will set a custom name prefix for the snapshot that&#39;s created when the disk is deleted.
     * 
     */
    public Optional<Output<String>> createSnapshotBeforeDestroyPrefix() {
        return Optional.ofNullable(this.createSnapshotBeforeDestroyPrefix);
    }

    /**
     * An optional description of this resource. Provide this property when
     * you create the resource.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return An optional description of this resource. Provide this property when
     * you create the resource.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Encrypts the disk using a customer-supplied encryption key.
     * After you encrypt a disk with a customer-supplied key, you must
     * provide the same key if you use the disk later (e.g. to create a disk
     * snapshot or an image, or to attach the disk to a virtual machine).
     * Customer-supplied encryption keys do not protect access to metadata of
     * the disk.
     * If you do not provide an encryption key when creating the disk, then
     * the disk will be encrypted using an automatically generated key and
     * you do not need to provide a key to use the disk later.
     * Structure is documented below.
     * 
     */
    @Import(name="diskEncryptionKey")
    private @Nullable Output<DiskDiskEncryptionKeyArgs> diskEncryptionKey;

    /**
     * @return Encrypts the disk using a customer-supplied encryption key.
     * After you encrypt a disk with a customer-supplied key, you must
     * provide the same key if you use the disk later (e.g. to create a disk
     * snapshot or an image, or to attach the disk to a virtual machine).
     * Customer-supplied encryption keys do not protect access to metadata of
     * the disk.
     * If you do not provide an encryption key when creating the disk, then
     * the disk will be encrypted using an automatically generated key and
     * you do not need to provide a key to use the disk later.
     * Structure is documented below.
     * 
     */
    public Optional<Output<DiskDiskEncryptionKeyArgs>> diskEncryptionKey() {
        return Optional.ofNullable(this.diskEncryptionKey);
    }

    /**
     * Whether this disk is using confidential compute mode.
     * Note: Only supported on hyperdisk skus, disk_encryption_key is required when setting to true
     * 
     */
    @Import(name="enableConfidentialCompute")
    private @Nullable Output<Boolean> enableConfidentialCompute;

    /**
     * @return Whether this disk is using confidential compute mode.
     * Note: Only supported on hyperdisk skus, disk_encryption_key is required when setting to true
     * 
     */
    public Optional<Output<Boolean>> enableConfidentialCompute() {
        return Optional.ofNullable(this.enableConfidentialCompute);
    }

    /**
     * A list of features to enable on the guest operating system.
     * Applicable only for bootable disks.
     * Structure is documented below.
     * 
     */
    @Import(name="guestOsFeatures")
    private @Nullable Output<List<DiskGuestOsFeatureArgs>> guestOsFeatures;

    /**
     * @return A list of features to enable on the guest operating system.
     * Applicable only for bootable disks.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<DiskGuestOsFeatureArgs>>> guestOsFeatures() {
        return Optional.ofNullable(this.guestOsFeatures);
    }

    /**
     * The image from which to initialize this disk. This can be
     * one of: the image&#39;s `self_link`, `projects/{project}/global/images/{image}`,
     * `projects/{project}/global/images/family/{family}`, `global/images/{image}`,
     * `global/images/family/{family}`, `family/{family}`, `{project}/{family}`,
     * `{project}/{image}`, `{family}`, or `{image}`. If referred by family, the
     * images names must include the family name. If they don&#39;t, use the
     * [gcp.compute.Image data source](https://www.terraform.io/docs/providers/google/d/compute_image.html).
     * For instance, the image `centos-6-v20180104` includes its family name `centos-6`.
     * These images can be referred by family name here.
     * 
     */
    @Import(name="image")
    private @Nullable Output<String> image;

    /**
     * @return The image from which to initialize this disk. This can be
     * one of: the image&#39;s `self_link`, `projects/{project}/global/images/{image}`,
     * `projects/{project}/global/images/family/{family}`, `global/images/{image}`,
     * `global/images/family/{family}`, `family/{family}`, `{project}/{family}`,
     * `{project}/{image}`, `{family}`, or `{image}`. If referred by family, the
     * images names must include the family name. If they don&#39;t, use the
     * [gcp.compute.Image data source](https://www.terraform.io/docs/providers/google/d/compute_image.html).
     * For instance, the image `centos-6-v20180104` includes its family name `centos-6`.
     * These images can be referred by family name here.
     * 
     */
    public Optional<Output<String>> image() {
        return Optional.ofNullable(this.image);
    }

    /**
     * Specifies the disk interface to use for attaching this disk, which is either SCSI or NVME. The default is SCSI.
     * 
     * &gt; **Warning:** `interface` is deprecated and will be removed in a future major release. This field is no longer used and can be safely removed from your configurations; disk interfaces are automatically determined on attachment.
     * 
     * @deprecated
     * `interface` is deprecated and will be removed in a future major release. This field is no longer used and can be safely removed from your configurations; disk interfaces are automatically determined on attachment.
     * 
     */
    @Deprecated /* `interface` is deprecated and will be removed in a future major release. This field is no longer used and can be safely removed from your configurations; disk interfaces are automatically determined on attachment. */
    @Import(name="interface")
    private @Nullable Output<String> interface_;

    /**
     * @return Specifies the disk interface to use for attaching this disk, which is either SCSI or NVME. The default is SCSI.
     * 
     * &gt; **Warning:** `interface` is deprecated and will be removed in a future major release. This field is no longer used and can be safely removed from your configurations; disk interfaces are automatically determined on attachment.
     * 
     * @deprecated
     * `interface` is deprecated and will be removed in a future major release. This field is no longer used and can be safely removed from your configurations; disk interfaces are automatically determined on attachment.
     * 
     */
    @Deprecated /* `interface` is deprecated and will be removed in a future major release. This field is no longer used and can be safely removed from your configurations; disk interfaces are automatically determined on attachment. */
    public Optional<Output<String>> interface_() {
        return Optional.ofNullable(this.interface_);
    }

    /**
     * Labels to apply to this disk.  A list of key-&gt;value pairs.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Labels to apply to this disk.  A list of key-&gt;value pairs.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * Any applicable license URI.
     * 
     */
    @Import(name="licenses")
    private @Nullable Output<List<String>> licenses;

    /**
     * @return Any applicable license URI.
     * 
     */
    public Optional<Output<List<String>>> licenses() {
        return Optional.ofNullable(this.licenses);
    }

    /**
     * Indicates whether or not the disk can be read/write attached to more than one instance.
     * 
     */
    @Import(name="multiWriter")
    private @Nullable Output<Boolean> multiWriter;

    /**
     * @return Indicates whether or not the disk can be read/write attached to more than one instance.
     * 
     */
    public Optional<Output<Boolean>> multiWriter() {
        return Optional.ofNullable(this.multiWriter);
    }

    /**
     * Name of the resource. Provided by the client when the resource is
     * created. The name must be 1-63 characters long, and comply with
     * RFC1035. Specifically, the name must be 1-63 characters long and match
     * the regular expression `a-z?` which means the
     * first character must be a lowercase letter, and all following
     * characters must be a dash, lowercase letter, or digit, except the last
     * character, which cannot be a dash.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the resource. Provided by the client when the resource is
     * created. The name must be 1-63 characters long, and comply with
     * RFC1035. Specifically, the name must be 1-63 characters long and match
     * the regular expression `a-z?` which means the
     * first character must be a lowercase letter, and all following
     * characters must be a dash, lowercase letter, or digit, except the last
     * character, which cannot be a dash.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Additional params passed with the request, but not persisted as part of resource payload
     * Structure is documented below.
     * 
     */
    @Import(name="params")
    private @Nullable Output<DiskParamsArgs> params;

    /**
     * @return Additional params passed with the request, but not persisted as part of resource payload
     * Structure is documented below.
     * 
     */
    public Optional<Output<DiskParamsArgs>> params() {
        return Optional.ofNullable(this.params);
    }

    /**
     * Physical block size of the persistent disk, in bytes. If not present
     * in a request, a default value is used. Currently supported sizes
     * are 4096 and 16384, other sizes may be added in the future.
     * If an unsupported value is requested, the error message will list
     * the supported values for the caller&#39;s project.
     * 
     */
    @Import(name="physicalBlockSizeBytes")
    private @Nullable Output<Integer> physicalBlockSizeBytes;

    /**
     * @return Physical block size of the persistent disk, in bytes. If not present
     * in a request, a default value is used. Currently supported sizes
     * are 4096 and 16384, other sizes may be added in the future.
     * If an unsupported value is requested, the error message will list
     * the supported values for the caller&#39;s project.
     * 
     */
    public Optional<Output<Integer>> physicalBlockSizeBytes() {
        return Optional.ofNullable(this.physicalBlockSizeBytes);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Indicates how many IOPS must be provisioned for the disk.
     * Note: Updating currently is only supported by hyperdisk skus without the need to delete and recreate the disk, hyperdisk
     * allows for an update of IOPS every 4 hours. To update your hyperdisk more frequently, you&#39;ll need to manually delete and recreate it
     * 
     */
    @Import(name="provisionedIops")
    private @Nullable Output<Integer> provisionedIops;

    /**
     * @return Indicates how many IOPS must be provisioned for the disk.
     * Note: Updating currently is only supported by hyperdisk skus without the need to delete and recreate the disk, hyperdisk
     * allows for an update of IOPS every 4 hours. To update your hyperdisk more frequently, you&#39;ll need to manually delete and recreate it
     * 
     */
    public Optional<Output<Integer>> provisionedIops() {
        return Optional.ofNullable(this.provisionedIops);
    }

    /**
     * Indicates how much Throughput must be provisioned for the disk.
     * Note: Updating currently is only supported by hyperdisk skus without the need to delete and recreate the disk, hyperdisk
     * allows for an update of Throughput every 4 hours. To update your hyperdisk more frequently, you&#39;ll need to manually delete and recreate it
     * 
     */
    @Import(name="provisionedThroughput")
    private @Nullable Output<Integer> provisionedThroughput;

    /**
     * @return Indicates how much Throughput must be provisioned for the disk.
     * Note: Updating currently is only supported by hyperdisk skus without the need to delete and recreate the disk, hyperdisk
     * allows for an update of Throughput every 4 hours. To update your hyperdisk more frequently, you&#39;ll need to manually delete and recreate it
     * 
     */
    public Optional<Output<Integer>> provisionedThroughput() {
        return Optional.ofNullable(this.provisionedThroughput);
    }

    /**
     * Resource policies applied to this disk for automatic snapshot creations.
     * ~&gt;**NOTE** This value does not support updating the
     * resource policy, as resource policies can not be updated more than
     * one at a time. Use
     * `gcp.compute.DiskResourcePolicyAttachment`
     * to allow for updating the resource policy attached to the disk.
     * 
     */
    @Import(name="resourcePolicies")
    private @Nullable Output<List<String>> resourcePolicies;

    /**
     * @return Resource policies applied to this disk for automatic snapshot creations.
     * ~&gt;**NOTE** This value does not support updating the
     * resource policy, as resource policies can not be updated more than
     * one at a time. Use
     * `gcp.compute.DiskResourcePolicyAttachment`
     * to allow for updating the resource policy attached to the disk.
     * 
     */
    public Optional<Output<List<String>>> resourcePolicies() {
        return Optional.ofNullable(this.resourcePolicies);
    }

    @Import(name="size")
    private @Nullable Output<Integer> size;

    public Optional<Output<Integer>> size() {
        return Optional.ofNullable(this.size);
    }

    /**
     * The source snapshot used to create this disk. You can provide this as
     * a partial or full URL to the resource. If the snapshot is in another
     * project than this disk, you must supply a full URL. For example, the
     * following are valid values:
     * * `https://www.googleapis.com/compute/v1/projects/project/global/snapshots/snapshot`
     * * `projects/project/global/snapshots/snapshot`
     * * `global/snapshots/snapshot`
     * 
     */
    @Import(name="snapshot")
    private @Nullable Output<String> snapshot;

    /**
     * @return The source snapshot used to create this disk. You can provide this as
     * a partial or full URL to the resource. If the snapshot is in another
     * project than this disk, you must supply a full URL. For example, the
     * following are valid values:
     * * `https://www.googleapis.com/compute/v1/projects/project/global/snapshots/snapshot`
     * * `projects/project/global/snapshots/snapshot`
     * * `global/snapshots/snapshot`
     * 
     */
    public Optional<Output<String>> snapshot() {
        return Optional.ofNullable(this.snapshot);
    }

    /**
     * The source disk used to create this disk. You can provide this as a partial or full URL to the resource.
     * For example, the following are valid values:
     * * https://www.googleapis.com/compute/v1/projects/{project}/zones/{zone}/disks/{disk}
     * * https://www.googleapis.com/compute/v1/projects/{project}/regions/{region}/disks/{disk}
     * * projects/{project}/zones/{zone}/disks/{disk}
     * * projects/{project}/regions/{region}/disks/{disk}
     * * zones/{zone}/disks/{disk}
     * * regions/{region}/disks/{disk}
     * 
     */
    @Import(name="sourceDisk")
    private @Nullable Output<String> sourceDisk;

    /**
     * @return The source disk used to create this disk. You can provide this as a partial or full URL to the resource.
     * For example, the following are valid values:
     * * https://www.googleapis.com/compute/v1/projects/{project}/zones/{zone}/disks/{disk}
     * * https://www.googleapis.com/compute/v1/projects/{project}/regions/{region}/disks/{disk}
     * * projects/{project}/zones/{zone}/disks/{disk}
     * * projects/{project}/regions/{region}/disks/{disk}
     * * zones/{zone}/disks/{disk}
     * * regions/{region}/disks/{disk}
     * 
     */
    public Optional<Output<String>> sourceDisk() {
        return Optional.ofNullable(this.sourceDisk);
    }

    /**
     * The customer-supplied encryption key of the source image. Required if
     * the source image is protected by a customer-supplied encryption key.
     * Structure is documented below.
     * 
     */
    @Import(name="sourceImageEncryptionKey")
    private @Nullable Output<DiskSourceImageEncryptionKeyArgs> sourceImageEncryptionKey;

    /**
     * @return The customer-supplied encryption key of the source image. Required if
     * the source image is protected by a customer-supplied encryption key.
     * Structure is documented below.
     * 
     */
    public Optional<Output<DiskSourceImageEncryptionKeyArgs>> sourceImageEncryptionKey() {
        return Optional.ofNullable(this.sourceImageEncryptionKey);
    }

    /**
     * The source instant snapshot used to create this disk. You can provide this as a partial or full URL to the resource.
     * For example, the following are valid values:
     * * `https://www.googleapis.com/compute/v1/projects/project/zones/zone/instantSnapshots/instantSnapshot`
     * * `projects/project/zones/zone/instantSnapshots/instantSnapshot`
     * * `zones/zone/instantSnapshots/instantSnapshot`
     * 
     */
    @Import(name="sourceInstantSnapshot")
    private @Nullable Output<String> sourceInstantSnapshot;

    /**
     * @return The source instant snapshot used to create this disk. You can provide this as a partial or full URL to the resource.
     * For example, the following are valid values:
     * * `https://www.googleapis.com/compute/v1/projects/project/zones/zone/instantSnapshots/instantSnapshot`
     * * `projects/project/zones/zone/instantSnapshots/instantSnapshot`
     * * `zones/zone/instantSnapshots/instantSnapshot`
     * 
     */
    public Optional<Output<String>> sourceInstantSnapshot() {
        return Optional.ofNullable(this.sourceInstantSnapshot);
    }

    /**
     * The customer-supplied encryption key of the source snapshot. Required
     * if the source snapshot is protected by a customer-supplied encryption
     * key.
     * Structure is documented below.
     * 
     */
    @Import(name="sourceSnapshotEncryptionKey")
    private @Nullable Output<DiskSourceSnapshotEncryptionKeyArgs> sourceSnapshotEncryptionKey;

    /**
     * @return The customer-supplied encryption key of the source snapshot. Required
     * if the source snapshot is protected by a customer-supplied encryption
     * key.
     * Structure is documented below.
     * 
     */
    public Optional<Output<DiskSourceSnapshotEncryptionKeyArgs>> sourceSnapshotEncryptionKey() {
        return Optional.ofNullable(this.sourceSnapshotEncryptionKey);
    }

    /**
     * The full Google Cloud Storage URI where the disk image is stored.
     * This file must be a gzip-compressed tarball whose name ends in .tar.gz or virtual machine disk whose name ends in vmdk.
     * Valid URIs may start with gs:// or https://storage.googleapis.com/.
     * This flag is not optimized for creating multiple disks from a source storage object.
     * To create many disks from a source storage object, use gcloud compute images import instead.
     * 
     */
    @Import(name="sourceStorageObject")
    private @Nullable Output<String> sourceStorageObject;

    /**
     * @return The full Google Cloud Storage URI where the disk image is stored.
     * This file must be a gzip-compressed tarball whose name ends in .tar.gz or virtual machine disk whose name ends in vmdk.
     * Valid URIs may start with gs:// or https://storage.googleapis.com/.
     * This flag is not optimized for creating multiple disks from a source storage object.
     * To create many disks from a source storage object, use gcloud compute images import instead.
     * 
     */
    public Optional<Output<String>> sourceStorageObject() {
        return Optional.ofNullable(this.sourceStorageObject);
    }

    /**
     * The URL or the name of the storage pool in which the new disk is created.
     * For example:
     * * https://www.googleapis.com/compute/v1/projects/{project}/zones/{zone}/storagePools/{storagePool}
     * * /projects/{project}/zones/{zone}/storagePools/{storagePool}
     * * /zones/{zone}/storagePools/{storagePool}
     * * /{storagePool}
     * 
     */
    @Import(name="storagePool")
    private @Nullable Output<String> storagePool;

    /**
     * @return The URL or the name of the storage pool in which the new disk is created.
     * For example:
     * * https://www.googleapis.com/compute/v1/projects/{project}/zones/{zone}/storagePools/{storagePool}
     * * /projects/{project}/zones/{zone}/storagePools/{storagePool}
     * * /zones/{zone}/storagePools/{storagePool}
     * * /{storagePool}
     * 
     */
    public Optional<Output<String>> storagePool() {
        return Optional.ofNullable(this.storagePool);
    }

    /**
     * URL of the disk type resource describing which disk type to use to
     * create the disk. Provide this when creating the disk.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return URL of the disk type resource describing which disk type to use to
     * create the disk. Provide this when creating the disk.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * A reference to the zone where the disk resides.
     * 
     */
    @Import(name="zone")
    private @Nullable Output<String> zone;

    /**
     * @return A reference to the zone where the disk resides.
     * 
     */
    public Optional<Output<String>> zone() {
        return Optional.ofNullable(this.zone);
    }

    private DiskArgs() {}

    private DiskArgs(DiskArgs $) {
        this.accessMode = $.accessMode;
        this.architecture = $.architecture;
        this.asyncPrimaryDisk = $.asyncPrimaryDisk;
        this.createSnapshotBeforeDestroy = $.createSnapshotBeforeDestroy;
        this.createSnapshotBeforeDestroyPrefix = $.createSnapshotBeforeDestroyPrefix;
        this.description = $.description;
        this.diskEncryptionKey = $.diskEncryptionKey;
        this.enableConfidentialCompute = $.enableConfidentialCompute;
        this.guestOsFeatures = $.guestOsFeatures;
        this.image = $.image;
        this.interface_ = $.interface_;
        this.labels = $.labels;
        this.licenses = $.licenses;
        this.multiWriter = $.multiWriter;
        this.name = $.name;
        this.params = $.params;
        this.physicalBlockSizeBytes = $.physicalBlockSizeBytes;
        this.project = $.project;
        this.provisionedIops = $.provisionedIops;
        this.provisionedThroughput = $.provisionedThroughput;
        this.resourcePolicies = $.resourcePolicies;
        this.size = $.size;
        this.snapshot = $.snapshot;
        this.sourceDisk = $.sourceDisk;
        this.sourceImageEncryptionKey = $.sourceImageEncryptionKey;
        this.sourceInstantSnapshot = $.sourceInstantSnapshot;
        this.sourceSnapshotEncryptionKey = $.sourceSnapshotEncryptionKey;
        this.sourceStorageObject = $.sourceStorageObject;
        this.storagePool = $.storagePool;
        this.type = $.type;
        this.zone = $.zone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DiskArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DiskArgs $;

        public Builder() {
            $ = new DiskArgs();
        }

        public Builder(DiskArgs defaults) {
            $ = new DiskArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessMode The access mode of the disk.
         * For example:
         * * READ_WRITE_SINGLE: The default AccessMode, means the disk can be attached to single instance in RW mode.
         * * READ_WRITE_MANY: The AccessMode means the disk can be attached to multiple instances in RW mode.
         * * READ_ONLY_SINGLE: The AccessMode means the disk can be attached to multiple instances in RO mode.
         *   The AccessMode is only valid for Hyperdisk disk types.
         * 
         * @return builder
         * 
         */
        public Builder accessMode(@Nullable Output<String> accessMode) {
            $.accessMode = accessMode;
            return this;
        }

        /**
         * @param accessMode The access mode of the disk.
         * For example:
         * * READ_WRITE_SINGLE: The default AccessMode, means the disk can be attached to single instance in RW mode.
         * * READ_WRITE_MANY: The AccessMode means the disk can be attached to multiple instances in RW mode.
         * * READ_ONLY_SINGLE: The AccessMode means the disk can be attached to multiple instances in RO mode.
         *   The AccessMode is only valid for Hyperdisk disk types.
         * 
         * @return builder
         * 
         */
        public Builder accessMode(String accessMode) {
            return accessMode(Output.of(accessMode));
        }

        /**
         * @param architecture The architecture of the disk. Values include `X86_64`, `ARM64`.
         * 
         * @return builder
         * 
         */
        public Builder architecture(@Nullable Output<String> architecture) {
            $.architecture = architecture;
            return this;
        }

        /**
         * @param architecture The architecture of the disk. Values include `X86_64`, `ARM64`.
         * 
         * @return builder
         * 
         */
        public Builder architecture(String architecture) {
            return architecture(Output.of(architecture));
        }

        /**
         * @param asyncPrimaryDisk A nested object resource.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder asyncPrimaryDisk(@Nullable Output<DiskAsyncPrimaryDiskArgs> asyncPrimaryDisk) {
            $.asyncPrimaryDisk = asyncPrimaryDisk;
            return this;
        }

        /**
         * @param asyncPrimaryDisk A nested object resource.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder asyncPrimaryDisk(DiskAsyncPrimaryDiskArgs asyncPrimaryDisk) {
            return asyncPrimaryDisk(Output.of(asyncPrimaryDisk));
        }

        /**
         * @param createSnapshotBeforeDestroy If set to true, a snapshot of the disk will be created before it is destroyed.
         * If your disk is encrypted with customer managed encryption keys these will be reused for the snapshot creation.
         * The name of the snapshot by default will be `{{disk-name}}-YYYYMMDD-HHmm`
         * 
         * @return builder
         * 
         */
        public Builder createSnapshotBeforeDestroy(@Nullable Output<Boolean> createSnapshotBeforeDestroy) {
            $.createSnapshotBeforeDestroy = createSnapshotBeforeDestroy;
            return this;
        }

        /**
         * @param createSnapshotBeforeDestroy If set to true, a snapshot of the disk will be created before it is destroyed.
         * If your disk is encrypted with customer managed encryption keys these will be reused for the snapshot creation.
         * The name of the snapshot by default will be `{{disk-name}}-YYYYMMDD-HHmm`
         * 
         * @return builder
         * 
         */
        public Builder createSnapshotBeforeDestroy(Boolean createSnapshotBeforeDestroy) {
            return createSnapshotBeforeDestroy(Output.of(createSnapshotBeforeDestroy));
        }

        /**
         * @param createSnapshotBeforeDestroyPrefix This will set a custom name prefix for the snapshot that&#39;s created when the disk is deleted.
         * 
         * @return builder
         * 
         */
        public Builder createSnapshotBeforeDestroyPrefix(@Nullable Output<String> createSnapshotBeforeDestroyPrefix) {
            $.createSnapshotBeforeDestroyPrefix = createSnapshotBeforeDestroyPrefix;
            return this;
        }

        /**
         * @param createSnapshotBeforeDestroyPrefix This will set a custom name prefix for the snapshot that&#39;s created when the disk is deleted.
         * 
         * @return builder
         * 
         */
        public Builder createSnapshotBeforeDestroyPrefix(String createSnapshotBeforeDestroyPrefix) {
            return createSnapshotBeforeDestroyPrefix(Output.of(createSnapshotBeforeDestroyPrefix));
        }

        /**
         * @param description An optional description of this resource. Provide this property when
         * you create the resource.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description An optional description of this resource. Provide this property when
         * you create the resource.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param diskEncryptionKey Encrypts the disk using a customer-supplied encryption key.
         * After you encrypt a disk with a customer-supplied key, you must
         * provide the same key if you use the disk later (e.g. to create a disk
         * snapshot or an image, or to attach the disk to a virtual machine).
         * Customer-supplied encryption keys do not protect access to metadata of
         * the disk.
         * If you do not provide an encryption key when creating the disk, then
         * the disk will be encrypted using an automatically generated key and
         * you do not need to provide a key to use the disk later.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder diskEncryptionKey(@Nullable Output<DiskDiskEncryptionKeyArgs> diskEncryptionKey) {
            $.diskEncryptionKey = diskEncryptionKey;
            return this;
        }

        /**
         * @param diskEncryptionKey Encrypts the disk using a customer-supplied encryption key.
         * After you encrypt a disk with a customer-supplied key, you must
         * provide the same key if you use the disk later (e.g. to create a disk
         * snapshot or an image, or to attach the disk to a virtual machine).
         * Customer-supplied encryption keys do not protect access to metadata of
         * the disk.
         * If you do not provide an encryption key when creating the disk, then
         * the disk will be encrypted using an automatically generated key and
         * you do not need to provide a key to use the disk later.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder diskEncryptionKey(DiskDiskEncryptionKeyArgs diskEncryptionKey) {
            return diskEncryptionKey(Output.of(diskEncryptionKey));
        }

        /**
         * @param enableConfidentialCompute Whether this disk is using confidential compute mode.
         * Note: Only supported on hyperdisk skus, disk_encryption_key is required when setting to true
         * 
         * @return builder
         * 
         */
        public Builder enableConfidentialCompute(@Nullable Output<Boolean> enableConfidentialCompute) {
            $.enableConfidentialCompute = enableConfidentialCompute;
            return this;
        }

        /**
         * @param enableConfidentialCompute Whether this disk is using confidential compute mode.
         * Note: Only supported on hyperdisk skus, disk_encryption_key is required when setting to true
         * 
         * @return builder
         * 
         */
        public Builder enableConfidentialCompute(Boolean enableConfidentialCompute) {
            return enableConfidentialCompute(Output.of(enableConfidentialCompute));
        }

        /**
         * @param guestOsFeatures A list of features to enable on the guest operating system.
         * Applicable only for bootable disks.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder guestOsFeatures(@Nullable Output<List<DiskGuestOsFeatureArgs>> guestOsFeatures) {
            $.guestOsFeatures = guestOsFeatures;
            return this;
        }

        /**
         * @param guestOsFeatures A list of features to enable on the guest operating system.
         * Applicable only for bootable disks.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder guestOsFeatures(List<DiskGuestOsFeatureArgs> guestOsFeatures) {
            return guestOsFeatures(Output.of(guestOsFeatures));
        }

        /**
         * @param guestOsFeatures A list of features to enable on the guest operating system.
         * Applicable only for bootable disks.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder guestOsFeatures(DiskGuestOsFeatureArgs... guestOsFeatures) {
            return guestOsFeatures(List.of(guestOsFeatures));
        }

        /**
         * @param image The image from which to initialize this disk. This can be
         * one of: the image&#39;s `self_link`, `projects/{project}/global/images/{image}`,
         * `projects/{project}/global/images/family/{family}`, `global/images/{image}`,
         * `global/images/family/{family}`, `family/{family}`, `{project}/{family}`,
         * `{project}/{image}`, `{family}`, or `{image}`. If referred by family, the
         * images names must include the family name. If they don&#39;t, use the
         * [gcp.compute.Image data source](https://www.terraform.io/docs/providers/google/d/compute_image.html).
         * For instance, the image `centos-6-v20180104` includes its family name `centos-6`.
         * These images can be referred by family name here.
         * 
         * @return builder
         * 
         */
        public Builder image(@Nullable Output<String> image) {
            $.image = image;
            return this;
        }

        /**
         * @param image The image from which to initialize this disk. This can be
         * one of: the image&#39;s `self_link`, `projects/{project}/global/images/{image}`,
         * `projects/{project}/global/images/family/{family}`, `global/images/{image}`,
         * `global/images/family/{family}`, `family/{family}`, `{project}/{family}`,
         * `{project}/{image}`, `{family}`, or `{image}`. If referred by family, the
         * images names must include the family name. If they don&#39;t, use the
         * [gcp.compute.Image data source](https://www.terraform.io/docs/providers/google/d/compute_image.html).
         * For instance, the image `centos-6-v20180104` includes its family name `centos-6`.
         * These images can be referred by family name here.
         * 
         * @return builder
         * 
         */
        public Builder image(String image) {
            return image(Output.of(image));
        }

        /**
         * @param interface_ Specifies the disk interface to use for attaching this disk, which is either SCSI or NVME. The default is SCSI.
         * 
         * &gt; **Warning:** `interface` is deprecated and will be removed in a future major release. This field is no longer used and can be safely removed from your configurations; disk interfaces are automatically determined on attachment.
         * 
         * @return builder
         * 
         * @deprecated
         * `interface` is deprecated and will be removed in a future major release. This field is no longer used and can be safely removed from your configurations; disk interfaces are automatically determined on attachment.
         * 
         */
        @Deprecated /* `interface` is deprecated and will be removed in a future major release. This field is no longer used and can be safely removed from your configurations; disk interfaces are automatically determined on attachment. */
        public Builder interface_(@Nullable Output<String> interface_) {
            $.interface_ = interface_;
            return this;
        }

        /**
         * @param interface_ Specifies the disk interface to use for attaching this disk, which is either SCSI or NVME. The default is SCSI.
         * 
         * &gt; **Warning:** `interface` is deprecated and will be removed in a future major release. This field is no longer used and can be safely removed from your configurations; disk interfaces are automatically determined on attachment.
         * 
         * @return builder
         * 
         * @deprecated
         * `interface` is deprecated and will be removed in a future major release. This field is no longer used and can be safely removed from your configurations; disk interfaces are automatically determined on attachment.
         * 
         */
        @Deprecated /* `interface` is deprecated and will be removed in a future major release. This field is no longer used and can be safely removed from your configurations; disk interfaces are automatically determined on attachment. */
        public Builder interface_(String interface_) {
            return interface_(Output.of(interface_));
        }

        /**
         * @param labels Labels to apply to this disk.  A list of key-&gt;value pairs.
         * 
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Labels to apply to this disk.  A list of key-&gt;value pairs.
         * 
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param licenses Any applicable license URI.
         * 
         * @return builder
         * 
         */
        public Builder licenses(@Nullable Output<List<String>> licenses) {
            $.licenses = licenses;
            return this;
        }

        /**
         * @param licenses Any applicable license URI.
         * 
         * @return builder
         * 
         */
        public Builder licenses(List<String> licenses) {
            return licenses(Output.of(licenses));
        }

        /**
         * @param licenses Any applicable license URI.
         * 
         * @return builder
         * 
         */
        public Builder licenses(String... licenses) {
            return licenses(List.of(licenses));
        }

        /**
         * @param multiWriter Indicates whether or not the disk can be read/write attached to more than one instance.
         * 
         * @return builder
         * 
         */
        public Builder multiWriter(@Nullable Output<Boolean> multiWriter) {
            $.multiWriter = multiWriter;
            return this;
        }

        /**
         * @param multiWriter Indicates whether or not the disk can be read/write attached to more than one instance.
         * 
         * @return builder
         * 
         */
        public Builder multiWriter(Boolean multiWriter) {
            return multiWriter(Output.of(multiWriter));
        }

        /**
         * @param name Name of the resource. Provided by the client when the resource is
         * created. The name must be 1-63 characters long, and comply with
         * RFC1035. Specifically, the name must be 1-63 characters long and match
         * the regular expression `a-z?` which means the
         * first character must be a lowercase letter, and all following
         * characters must be a dash, lowercase letter, or digit, except the last
         * character, which cannot be a dash.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the resource. Provided by the client when the resource is
         * created. The name must be 1-63 characters long, and comply with
         * RFC1035. Specifically, the name must be 1-63 characters long and match
         * the regular expression `a-z?` which means the
         * first character must be a lowercase letter, and all following
         * characters must be a dash, lowercase letter, or digit, except the last
         * character, which cannot be a dash.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param params Additional params passed with the request, but not persisted as part of resource payload
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder params(@Nullable Output<DiskParamsArgs> params) {
            $.params = params;
            return this;
        }

        /**
         * @param params Additional params passed with the request, but not persisted as part of resource payload
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder params(DiskParamsArgs params) {
            return params(Output.of(params));
        }

        /**
         * @param physicalBlockSizeBytes Physical block size of the persistent disk, in bytes. If not present
         * in a request, a default value is used. Currently supported sizes
         * are 4096 and 16384, other sizes may be added in the future.
         * If an unsupported value is requested, the error message will list
         * the supported values for the caller&#39;s project.
         * 
         * @return builder
         * 
         */
        public Builder physicalBlockSizeBytes(@Nullable Output<Integer> physicalBlockSizeBytes) {
            $.physicalBlockSizeBytes = physicalBlockSizeBytes;
            return this;
        }

        /**
         * @param physicalBlockSizeBytes Physical block size of the persistent disk, in bytes. If not present
         * in a request, a default value is used. Currently supported sizes
         * are 4096 and 16384, other sizes may be added in the future.
         * If an unsupported value is requested, the error message will list
         * the supported values for the caller&#39;s project.
         * 
         * @return builder
         * 
         */
        public Builder physicalBlockSizeBytes(Integer physicalBlockSizeBytes) {
            return physicalBlockSizeBytes(Output.of(physicalBlockSizeBytes));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param provisionedIops Indicates how many IOPS must be provisioned for the disk.
         * Note: Updating currently is only supported by hyperdisk skus without the need to delete and recreate the disk, hyperdisk
         * allows for an update of IOPS every 4 hours. To update your hyperdisk more frequently, you&#39;ll need to manually delete and recreate it
         * 
         * @return builder
         * 
         */
        public Builder provisionedIops(@Nullable Output<Integer> provisionedIops) {
            $.provisionedIops = provisionedIops;
            return this;
        }

        /**
         * @param provisionedIops Indicates how many IOPS must be provisioned for the disk.
         * Note: Updating currently is only supported by hyperdisk skus without the need to delete and recreate the disk, hyperdisk
         * allows for an update of IOPS every 4 hours. To update your hyperdisk more frequently, you&#39;ll need to manually delete and recreate it
         * 
         * @return builder
         * 
         */
        public Builder provisionedIops(Integer provisionedIops) {
            return provisionedIops(Output.of(provisionedIops));
        }

        /**
         * @param provisionedThroughput Indicates how much Throughput must be provisioned for the disk.
         * Note: Updating currently is only supported by hyperdisk skus without the need to delete and recreate the disk, hyperdisk
         * allows for an update of Throughput every 4 hours. To update your hyperdisk more frequently, you&#39;ll need to manually delete and recreate it
         * 
         * @return builder
         * 
         */
        public Builder provisionedThroughput(@Nullable Output<Integer> provisionedThroughput) {
            $.provisionedThroughput = provisionedThroughput;
            return this;
        }

        /**
         * @param provisionedThroughput Indicates how much Throughput must be provisioned for the disk.
         * Note: Updating currently is only supported by hyperdisk skus without the need to delete and recreate the disk, hyperdisk
         * allows for an update of Throughput every 4 hours. To update your hyperdisk more frequently, you&#39;ll need to manually delete and recreate it
         * 
         * @return builder
         * 
         */
        public Builder provisionedThroughput(Integer provisionedThroughput) {
            return provisionedThroughput(Output.of(provisionedThroughput));
        }

        /**
         * @param resourcePolicies Resource policies applied to this disk for automatic snapshot creations.
         * ~&gt;**NOTE** This value does not support updating the
         * resource policy, as resource policies can not be updated more than
         * one at a time. Use
         * `gcp.compute.DiskResourcePolicyAttachment`
         * to allow for updating the resource policy attached to the disk.
         * 
         * @return builder
         * 
         */
        public Builder resourcePolicies(@Nullable Output<List<String>> resourcePolicies) {
            $.resourcePolicies = resourcePolicies;
            return this;
        }

        /**
         * @param resourcePolicies Resource policies applied to this disk for automatic snapshot creations.
         * ~&gt;**NOTE** This value does not support updating the
         * resource policy, as resource policies can not be updated more than
         * one at a time. Use
         * `gcp.compute.DiskResourcePolicyAttachment`
         * to allow for updating the resource policy attached to the disk.
         * 
         * @return builder
         * 
         */
        public Builder resourcePolicies(List<String> resourcePolicies) {
            return resourcePolicies(Output.of(resourcePolicies));
        }

        /**
         * @param resourcePolicies Resource policies applied to this disk for automatic snapshot creations.
         * ~&gt;**NOTE** This value does not support updating the
         * resource policy, as resource policies can not be updated more than
         * one at a time. Use
         * `gcp.compute.DiskResourcePolicyAttachment`
         * to allow for updating the resource policy attached to the disk.
         * 
         * @return builder
         * 
         */
        public Builder resourcePolicies(String... resourcePolicies) {
            return resourcePolicies(List.of(resourcePolicies));
        }

        public Builder size(@Nullable Output<Integer> size) {
            $.size = size;
            return this;
        }

        public Builder size(Integer size) {
            return size(Output.of(size));
        }

        /**
         * @param snapshot The source snapshot used to create this disk. You can provide this as
         * a partial or full URL to the resource. If the snapshot is in another
         * project than this disk, you must supply a full URL. For example, the
         * following are valid values:
         * * `https://www.googleapis.com/compute/v1/projects/project/global/snapshots/snapshot`
         * * `projects/project/global/snapshots/snapshot`
         * * `global/snapshots/snapshot`
         * 
         * @return builder
         * 
         */
        public Builder snapshot(@Nullable Output<String> snapshot) {
            $.snapshot = snapshot;
            return this;
        }

        /**
         * @param snapshot The source snapshot used to create this disk. You can provide this as
         * a partial or full URL to the resource. If the snapshot is in another
         * project than this disk, you must supply a full URL. For example, the
         * following are valid values:
         * * `https://www.googleapis.com/compute/v1/projects/project/global/snapshots/snapshot`
         * * `projects/project/global/snapshots/snapshot`
         * * `global/snapshots/snapshot`
         * 
         * @return builder
         * 
         */
        public Builder snapshot(String snapshot) {
            return snapshot(Output.of(snapshot));
        }

        /**
         * @param sourceDisk The source disk used to create this disk. You can provide this as a partial or full URL to the resource.
         * For example, the following are valid values:
         * * https://www.googleapis.com/compute/v1/projects/{project}/zones/{zone}/disks/{disk}
         * * https://www.googleapis.com/compute/v1/projects/{project}/regions/{region}/disks/{disk}
         * * projects/{project}/zones/{zone}/disks/{disk}
         * * projects/{project}/regions/{region}/disks/{disk}
         * * zones/{zone}/disks/{disk}
         * * regions/{region}/disks/{disk}
         * 
         * @return builder
         * 
         */
        public Builder sourceDisk(@Nullable Output<String> sourceDisk) {
            $.sourceDisk = sourceDisk;
            return this;
        }

        /**
         * @param sourceDisk The source disk used to create this disk. You can provide this as a partial or full URL to the resource.
         * For example, the following are valid values:
         * * https://www.googleapis.com/compute/v1/projects/{project}/zones/{zone}/disks/{disk}
         * * https://www.googleapis.com/compute/v1/projects/{project}/regions/{region}/disks/{disk}
         * * projects/{project}/zones/{zone}/disks/{disk}
         * * projects/{project}/regions/{region}/disks/{disk}
         * * zones/{zone}/disks/{disk}
         * * regions/{region}/disks/{disk}
         * 
         * @return builder
         * 
         */
        public Builder sourceDisk(String sourceDisk) {
            return sourceDisk(Output.of(sourceDisk));
        }

        /**
         * @param sourceImageEncryptionKey The customer-supplied encryption key of the source image. Required if
         * the source image is protected by a customer-supplied encryption key.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder sourceImageEncryptionKey(@Nullable Output<DiskSourceImageEncryptionKeyArgs> sourceImageEncryptionKey) {
            $.sourceImageEncryptionKey = sourceImageEncryptionKey;
            return this;
        }

        /**
         * @param sourceImageEncryptionKey The customer-supplied encryption key of the source image. Required if
         * the source image is protected by a customer-supplied encryption key.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder sourceImageEncryptionKey(DiskSourceImageEncryptionKeyArgs sourceImageEncryptionKey) {
            return sourceImageEncryptionKey(Output.of(sourceImageEncryptionKey));
        }

        /**
         * @param sourceInstantSnapshot The source instant snapshot used to create this disk. You can provide this as a partial or full URL to the resource.
         * For example, the following are valid values:
         * * `https://www.googleapis.com/compute/v1/projects/project/zones/zone/instantSnapshots/instantSnapshot`
         * * `projects/project/zones/zone/instantSnapshots/instantSnapshot`
         * * `zones/zone/instantSnapshots/instantSnapshot`
         * 
         * @return builder
         * 
         */
        public Builder sourceInstantSnapshot(@Nullable Output<String> sourceInstantSnapshot) {
            $.sourceInstantSnapshot = sourceInstantSnapshot;
            return this;
        }

        /**
         * @param sourceInstantSnapshot The source instant snapshot used to create this disk. You can provide this as a partial or full URL to the resource.
         * For example, the following are valid values:
         * * `https://www.googleapis.com/compute/v1/projects/project/zones/zone/instantSnapshots/instantSnapshot`
         * * `projects/project/zones/zone/instantSnapshots/instantSnapshot`
         * * `zones/zone/instantSnapshots/instantSnapshot`
         * 
         * @return builder
         * 
         */
        public Builder sourceInstantSnapshot(String sourceInstantSnapshot) {
            return sourceInstantSnapshot(Output.of(sourceInstantSnapshot));
        }

        /**
         * @param sourceSnapshotEncryptionKey The customer-supplied encryption key of the source snapshot. Required
         * if the source snapshot is protected by a customer-supplied encryption
         * key.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder sourceSnapshotEncryptionKey(@Nullable Output<DiskSourceSnapshotEncryptionKeyArgs> sourceSnapshotEncryptionKey) {
            $.sourceSnapshotEncryptionKey = sourceSnapshotEncryptionKey;
            return this;
        }

        /**
         * @param sourceSnapshotEncryptionKey The customer-supplied encryption key of the source snapshot. Required
         * if the source snapshot is protected by a customer-supplied encryption
         * key.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder sourceSnapshotEncryptionKey(DiskSourceSnapshotEncryptionKeyArgs sourceSnapshotEncryptionKey) {
            return sourceSnapshotEncryptionKey(Output.of(sourceSnapshotEncryptionKey));
        }

        /**
         * @param sourceStorageObject The full Google Cloud Storage URI where the disk image is stored.
         * This file must be a gzip-compressed tarball whose name ends in .tar.gz or virtual machine disk whose name ends in vmdk.
         * Valid URIs may start with gs:// or https://storage.googleapis.com/.
         * This flag is not optimized for creating multiple disks from a source storage object.
         * To create many disks from a source storage object, use gcloud compute images import instead.
         * 
         * @return builder
         * 
         */
        public Builder sourceStorageObject(@Nullable Output<String> sourceStorageObject) {
            $.sourceStorageObject = sourceStorageObject;
            return this;
        }

        /**
         * @param sourceStorageObject The full Google Cloud Storage URI where the disk image is stored.
         * This file must be a gzip-compressed tarball whose name ends in .tar.gz or virtual machine disk whose name ends in vmdk.
         * Valid URIs may start with gs:// or https://storage.googleapis.com/.
         * This flag is not optimized for creating multiple disks from a source storage object.
         * To create many disks from a source storage object, use gcloud compute images import instead.
         * 
         * @return builder
         * 
         */
        public Builder sourceStorageObject(String sourceStorageObject) {
            return sourceStorageObject(Output.of(sourceStorageObject));
        }

        /**
         * @param storagePool The URL or the name of the storage pool in which the new disk is created.
         * For example:
         * * https://www.googleapis.com/compute/v1/projects/{project}/zones/{zone}/storagePools/{storagePool}
         * * /projects/{project}/zones/{zone}/storagePools/{storagePool}
         * * /zones/{zone}/storagePools/{storagePool}
         * * /{storagePool}
         * 
         * @return builder
         * 
         */
        public Builder storagePool(@Nullable Output<String> storagePool) {
            $.storagePool = storagePool;
            return this;
        }

        /**
         * @param storagePool The URL or the name of the storage pool in which the new disk is created.
         * For example:
         * * https://www.googleapis.com/compute/v1/projects/{project}/zones/{zone}/storagePools/{storagePool}
         * * /projects/{project}/zones/{zone}/storagePools/{storagePool}
         * * /zones/{zone}/storagePools/{storagePool}
         * * /{storagePool}
         * 
         * @return builder
         * 
         */
        public Builder storagePool(String storagePool) {
            return storagePool(Output.of(storagePool));
        }

        /**
         * @param type URL of the disk type resource describing which disk type to use to
         * create the disk. Provide this when creating the disk.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type URL of the disk type resource describing which disk type to use to
         * create the disk. Provide this when creating the disk.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param zone A reference to the zone where the disk resides.
         * 
         * @return builder
         * 
         */
        public Builder zone(@Nullable Output<String> zone) {
            $.zone = zone;
            return this;
        }

        /**
         * @param zone A reference to the zone where the disk resides.
         * 
         * @return builder
         * 
         */
        public Builder zone(String zone) {
            return zone(Output.of(zone));
        }

        public DiskArgs build() {
            return $;
        }
    }

}
