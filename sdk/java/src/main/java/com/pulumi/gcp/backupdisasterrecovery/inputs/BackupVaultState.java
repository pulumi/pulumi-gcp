// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.backupdisasterrecovery.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BackupVaultState extends com.pulumi.resources.ResourceArgs {

    public static final BackupVaultState Empty = new BackupVaultState();

    /**
     * Access restriction for the backup vault. Default value is `WITHIN_ORGANIZATION` if not provided during creation.
     * Default value is `WITHIN_ORGANIZATION`.
     * Possible values are: `ACCESS_RESTRICTION_UNSPECIFIED`, `WITHIN_PROJECT`, `WITHIN_ORGANIZATION`, `UNRESTRICTED`, `WITHIN_ORG_BUT_UNRESTRICTED_FOR_BA`.
     * 
     */
    @Import(name="accessRestriction")
    private @Nullable Output<String> accessRestriction;

    /**
     * @return Access restriction for the backup vault. Default value is `WITHIN_ORGANIZATION` if not provided during creation.
     * Default value is `WITHIN_ORGANIZATION`.
     * Possible values are: `ACCESS_RESTRICTION_UNSPECIFIED`, `WITHIN_PROJECT`, `WITHIN_ORGANIZATION`, `UNRESTRICTED`, `WITHIN_ORG_BUT_UNRESTRICTED_FOR_BA`.
     * 
     */
    public Optional<Output<String>> accessRestriction() {
        return Optional.ofNullable(this.accessRestriction);
    }

    /**
     * Allow idempotent deletion of backup vault. The request will still succeed in case the backup vault does not exist.
     * 
     */
    @Import(name="allowMissing")
    private @Nullable Output<Boolean> allowMissing;

    /**
     * @return Allow idempotent deletion of backup vault. The request will still succeed in case the backup vault does not exist.
     * 
     */
    public Optional<Output<Boolean>> allowMissing() {
        return Optional.ofNullable(this.allowMissing);
    }

    /**
     * Optional. User annotations. See https://google.aip.dev/128#annotations
     * Stores small amounts of arbitrary data.
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
     * 
     */
    @Import(name="annotations")
    private @Nullable Output<Map<String,String>> annotations;

    /**
     * @return Optional. User annotations. See https://google.aip.dev/128#annotations
     * Stores small amounts of arbitrary data.
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> annotations() {
        return Optional.ofNullable(this.annotations);
    }

    /**
     * Output only. The number of backups in this backup vault.
     * 
     */
    @Import(name="backupCount")
    private @Nullable Output<String> backupCount;

    /**
     * @return Output only. The number of backups in this backup vault.
     * 
     */
    public Optional<Output<String>> backupCount() {
        return Optional.ofNullable(this.backupCount);
    }

    /**
     * Required. The default and minimum enforced retention for each backup within the backup vault. The enforced retention for each backup can be extended.
     * 
     */
    @Import(name="backupMinimumEnforcedRetentionDuration")
    private @Nullable Output<String> backupMinimumEnforcedRetentionDuration;

    /**
     * @return Required. The default and minimum enforced retention for each backup within the backup vault. The enforced retention for each backup can be extended.
     * 
     */
    public Optional<Output<String>> backupMinimumEnforcedRetentionDuration() {
        return Optional.ofNullable(this.backupMinimumEnforcedRetentionDuration);
    }

    /**
     * How a backup&#39;s enforced retention end time is inherited. Default value is `INHERIT_VAULT_RETENTION` if not provided during creation.
     * Possible values are: `BACKUP_RETENTION_INHERITANCE_UNSPECIFIED`, `INHERIT_VAULT_RETENTION`, `MATCH_BACKUP_EXPIRE_TIME`.
     * 
     */
    @Import(name="backupRetentionInheritance")
    private @Nullable Output<String> backupRetentionInheritance;

    /**
     * @return How a backup&#39;s enforced retention end time is inherited. Default value is `INHERIT_VAULT_RETENTION` if not provided during creation.
     * Possible values are: `BACKUP_RETENTION_INHERITANCE_UNSPECIFIED`, `INHERIT_VAULT_RETENTION`, `MATCH_BACKUP_EXPIRE_TIME`.
     * 
     */
    public Optional<Output<String>> backupRetentionInheritance() {
        return Optional.ofNullable(this.backupRetentionInheritance);
    }

    /**
     * Required. ID of the requesting object.
     * 
     */
    @Import(name="backupVaultId")
    private @Nullable Output<String> backupVaultId;

    /**
     * @return Required. ID of the requesting object.
     * 
     */
    public Optional<Output<String>> backupVaultId() {
        return Optional.ofNullable(this.backupVaultId);
    }

    /**
     * Output only. The time when the instance was created.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return Output only. The time when the instance was created.
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * Output only. Set to true when there are no backups nested under this resource.
     * 
     */
    @Import(name="deletable")
    private @Nullable Output<Boolean> deletable;

    /**
     * @return Output only. Set to true when there are no backups nested under this resource.
     * 
     */
    public Optional<Output<Boolean>> deletable() {
        return Optional.ofNullable(this.deletable);
    }

    /**
     * Optional. The description of the BackupVault instance (2048 characters or less).
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Optional. The description of the BackupVault instance (2048 characters or less).
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="effectiveAnnotations")
    private @Nullable Output<Map<String,String>> effectiveAnnotations;

    public Optional<Output<Map<String,String>>> effectiveAnnotations() {
        return Optional.ofNullable(this.effectiveAnnotations);
    }

    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    @Import(name="effectiveLabels")
    private @Nullable Output<Map<String,String>> effectiveLabels;

    /**
     * @return All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    public Optional<Output<Map<String,String>>> effectiveLabels() {
        return Optional.ofNullable(this.effectiveLabels);
    }

    /**
     * Optional. Time after which the BackupVault resource is locked.
     * 
     */
    @Import(name="effectiveTime")
    private @Nullable Output<String> effectiveTime;

    /**
     * @return Optional. Time after which the BackupVault resource is locked.
     * 
     */
    public Optional<Output<String>> effectiveTime() {
        return Optional.ofNullable(this.effectiveTime);
    }

    /**
     * Optional. Server specified ETag for the backup vault resource to prevent simultaneous updates from overwiting each other.
     * 
     */
    @Import(name="etag")
    private @Nullable Output<String> etag;

    /**
     * @return Optional. Server specified ETag for the backup vault resource to prevent simultaneous updates from overwiting each other.
     * 
     */
    public Optional<Output<String>> etag() {
        return Optional.ofNullable(this.etag);
    }

    /**
     * (Optional, Deprecated)
     * If set, the following restrictions against deletion of the backup vault instance can be overridden:
     * * deletion of a backup vault instance containing no backups, but still containing empty datasources.
     * * deletion of a backup vault instance that is being referenced by an active backup plan.
     * 
     * &gt; **Warning:** `forceDelete` is deprecated and will be removed in a future major release. Use `ignoreInactiveDatasources` instead.
     * 
     * @deprecated
     * `forceDelete` is deprecated and will be removed in a future major release. Use `ignoreInactiveDatasources` instead.
     * 
     */
    @Deprecated /* `forceDelete` is deprecated and will be removed in a future major release. Use `ignoreInactiveDatasources` instead. */
    @Import(name="forceDelete")
    private @Nullable Output<Boolean> forceDelete;

    /**
     * @return (Optional, Deprecated)
     * If set, the following restrictions against deletion of the backup vault instance can be overridden:
     * * deletion of a backup vault instance containing no backups, but still containing empty datasources.
     * * deletion of a backup vault instance that is being referenced by an active backup plan.
     * 
     * &gt; **Warning:** `forceDelete` is deprecated and will be removed in a future major release. Use `ignoreInactiveDatasources` instead.
     * 
     * @deprecated
     * `forceDelete` is deprecated and will be removed in a future major release. Use `ignoreInactiveDatasources` instead.
     * 
     */
    @Deprecated /* `forceDelete` is deprecated and will be removed in a future major release. Use `ignoreInactiveDatasources` instead. */
    public Optional<Output<Boolean>> forceDelete() {
        return Optional.ofNullable(this.forceDelete);
    }

    /**
     * If set, allow update to extend the minimum enforced retention for backup vault. This overrides
     * the restriction against conflicting retention periods. This conflict may occur when the
     * expiration schedule defined by the associated backup plan is shorter than the minimum
     * retention set by the backup vault.
     * 
     */
    @Import(name="forceUpdate")
    private @Nullable Output<Boolean> forceUpdate;

    /**
     * @return If set, allow update to extend the minimum enforced retention for backup vault. This overrides
     * the restriction against conflicting retention periods. This conflict may occur when the
     * expiration schedule defined by the associated backup plan is shorter than the minimum
     * retention set by the backup vault.
     * 
     */
    public Optional<Output<Boolean>> forceUpdate() {
        return Optional.ofNullable(this.forceUpdate);
    }

    /**
     * If set, the following restrictions against deletion of the backup vault instance can be overridden:
     * * deletion of a backup vault instance that is being referenced by an active backup plan.
     * 
     */
    @Import(name="ignoreBackupPlanReferences")
    private @Nullable Output<Boolean> ignoreBackupPlanReferences;

    /**
     * @return If set, the following restrictions against deletion of the backup vault instance can be overridden:
     * * deletion of a backup vault instance that is being referenced by an active backup plan.
     * 
     */
    public Optional<Output<Boolean>> ignoreBackupPlanReferences() {
        return Optional.ofNullable(this.ignoreBackupPlanReferences);
    }

    /**
     * If set, the following restrictions against deletion of the backup vault instance can be overridden:
     * * deletion of a backup vault instance containing no backups, but still containing empty datasources.
     * 
     */
    @Import(name="ignoreInactiveDatasources")
    private @Nullable Output<Boolean> ignoreInactiveDatasources;

    /**
     * @return If set, the following restrictions against deletion of the backup vault instance can be overridden:
     * * deletion of a backup vault instance containing no backups, but still containing empty datasources.
     * 
     */
    public Optional<Output<Boolean>> ignoreInactiveDatasources() {
        return Optional.ofNullable(this.ignoreInactiveDatasources);
    }

    /**
     * Optional. Resource labels to represent user provided metadata.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Optional. Resource labels to represent user provided metadata.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * The GCP location for the backup vault.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The GCP location for the backup vault.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Output only. Identifier. The resource name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Output only. Identifier. The resource name.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    @Import(name="pulumiLabels")
    private @Nullable Output<Map<String,String>> pulumiLabels;

    /**
     * @return The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    public Optional<Output<Map<String,String>>> pulumiLabels() {
        return Optional.ofNullable(this.pulumiLabels);
    }

    /**
     * Output only. Service account used by the BackupVault Service for this BackupVault.  The user should grant this account permissions in their workload project to enable the service to run backups and restores there.
     * 
     */
    @Import(name="serviceAccount")
    private @Nullable Output<String> serviceAccount;

    /**
     * @return Output only. Service account used by the BackupVault Service for this BackupVault.  The user should grant this account permissions in their workload project to enable the service to run backups and restores there.
     * 
     */
    public Optional<Output<String>> serviceAccount() {
        return Optional.ofNullable(this.serviceAccount);
    }

    /**
     * Output only. The BackupVault resource instance state.
     * Possible values:
     * STATE_UNSPECIFIED
     * CREATING
     * ACTIVE
     * DELETING
     * ERROR
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return Output only. The BackupVault resource instance state.
     * Possible values:
     * STATE_UNSPECIFIED
     * CREATING
     * ACTIVE
     * DELETING
     * ERROR
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * Output only. Total size of the storage used by all backup resources.
     * 
     */
    @Import(name="totalStoredBytes")
    private @Nullable Output<String> totalStoredBytes;

    /**
     * @return Output only. Total size of the storage used by all backup resources.
     * 
     */
    public Optional<Output<String>> totalStoredBytes() {
        return Optional.ofNullable(this.totalStoredBytes);
    }

    /**
     * Output only. Output only Immutable after resource creation until resource deletion.
     * 
     */
    @Import(name="uid")
    private @Nullable Output<String> uid;

    /**
     * @return Output only. Output only Immutable after resource creation until resource deletion.
     * 
     */
    public Optional<Output<String>> uid() {
        return Optional.ofNullable(this.uid);
    }

    /**
     * Output only. The time when the instance was updated.
     * 
     */
    @Import(name="updateTime")
    private @Nullable Output<String> updateTime;

    /**
     * @return Output only. The time when the instance was updated.
     * 
     */
    public Optional<Output<String>> updateTime() {
        return Optional.ofNullable(this.updateTime);
    }

    private BackupVaultState() {}

    private BackupVaultState(BackupVaultState $) {
        this.accessRestriction = $.accessRestriction;
        this.allowMissing = $.allowMissing;
        this.annotations = $.annotations;
        this.backupCount = $.backupCount;
        this.backupMinimumEnforcedRetentionDuration = $.backupMinimumEnforcedRetentionDuration;
        this.backupRetentionInheritance = $.backupRetentionInheritance;
        this.backupVaultId = $.backupVaultId;
        this.createTime = $.createTime;
        this.deletable = $.deletable;
        this.description = $.description;
        this.effectiveAnnotations = $.effectiveAnnotations;
        this.effectiveLabels = $.effectiveLabels;
        this.effectiveTime = $.effectiveTime;
        this.etag = $.etag;
        this.forceDelete = $.forceDelete;
        this.forceUpdate = $.forceUpdate;
        this.ignoreBackupPlanReferences = $.ignoreBackupPlanReferences;
        this.ignoreInactiveDatasources = $.ignoreInactiveDatasources;
        this.labels = $.labels;
        this.location = $.location;
        this.name = $.name;
        this.project = $.project;
        this.pulumiLabels = $.pulumiLabels;
        this.serviceAccount = $.serviceAccount;
        this.state = $.state;
        this.totalStoredBytes = $.totalStoredBytes;
        this.uid = $.uid;
        this.updateTime = $.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BackupVaultState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BackupVaultState $;

        public Builder() {
            $ = new BackupVaultState();
        }

        public Builder(BackupVaultState defaults) {
            $ = new BackupVaultState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessRestriction Access restriction for the backup vault. Default value is `WITHIN_ORGANIZATION` if not provided during creation.
         * Default value is `WITHIN_ORGANIZATION`.
         * Possible values are: `ACCESS_RESTRICTION_UNSPECIFIED`, `WITHIN_PROJECT`, `WITHIN_ORGANIZATION`, `UNRESTRICTED`, `WITHIN_ORG_BUT_UNRESTRICTED_FOR_BA`.
         * 
         * @return builder
         * 
         */
        public Builder accessRestriction(@Nullable Output<String> accessRestriction) {
            $.accessRestriction = accessRestriction;
            return this;
        }

        /**
         * @param accessRestriction Access restriction for the backup vault. Default value is `WITHIN_ORGANIZATION` if not provided during creation.
         * Default value is `WITHIN_ORGANIZATION`.
         * Possible values are: `ACCESS_RESTRICTION_UNSPECIFIED`, `WITHIN_PROJECT`, `WITHIN_ORGANIZATION`, `UNRESTRICTED`, `WITHIN_ORG_BUT_UNRESTRICTED_FOR_BA`.
         * 
         * @return builder
         * 
         */
        public Builder accessRestriction(String accessRestriction) {
            return accessRestriction(Output.of(accessRestriction));
        }

        /**
         * @param allowMissing Allow idempotent deletion of backup vault. The request will still succeed in case the backup vault does not exist.
         * 
         * @return builder
         * 
         */
        public Builder allowMissing(@Nullable Output<Boolean> allowMissing) {
            $.allowMissing = allowMissing;
            return this;
        }

        /**
         * @param allowMissing Allow idempotent deletion of backup vault. The request will still succeed in case the backup vault does not exist.
         * 
         * @return builder
         * 
         */
        public Builder allowMissing(Boolean allowMissing) {
            return allowMissing(Output.of(allowMissing));
        }

        /**
         * @param annotations Optional. User annotations. See https://google.aip.dev/128#annotations
         * Stores small amounts of arbitrary data.
         * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
         * Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder annotations(@Nullable Output<Map<String,String>> annotations) {
            $.annotations = annotations;
            return this;
        }

        /**
         * @param annotations Optional. User annotations. See https://google.aip.dev/128#annotations
         * Stores small amounts of arbitrary data.
         * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
         * Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder annotations(Map<String,String> annotations) {
            return annotations(Output.of(annotations));
        }

        /**
         * @param backupCount Output only. The number of backups in this backup vault.
         * 
         * @return builder
         * 
         */
        public Builder backupCount(@Nullable Output<String> backupCount) {
            $.backupCount = backupCount;
            return this;
        }

        /**
         * @param backupCount Output only. The number of backups in this backup vault.
         * 
         * @return builder
         * 
         */
        public Builder backupCount(String backupCount) {
            return backupCount(Output.of(backupCount));
        }

        /**
         * @param backupMinimumEnforcedRetentionDuration Required. The default and minimum enforced retention for each backup within the backup vault. The enforced retention for each backup can be extended.
         * 
         * @return builder
         * 
         */
        public Builder backupMinimumEnforcedRetentionDuration(@Nullable Output<String> backupMinimumEnforcedRetentionDuration) {
            $.backupMinimumEnforcedRetentionDuration = backupMinimumEnforcedRetentionDuration;
            return this;
        }

        /**
         * @param backupMinimumEnforcedRetentionDuration Required. The default and minimum enforced retention for each backup within the backup vault. The enforced retention for each backup can be extended.
         * 
         * @return builder
         * 
         */
        public Builder backupMinimumEnforcedRetentionDuration(String backupMinimumEnforcedRetentionDuration) {
            return backupMinimumEnforcedRetentionDuration(Output.of(backupMinimumEnforcedRetentionDuration));
        }

        /**
         * @param backupRetentionInheritance How a backup&#39;s enforced retention end time is inherited. Default value is `INHERIT_VAULT_RETENTION` if not provided during creation.
         * Possible values are: `BACKUP_RETENTION_INHERITANCE_UNSPECIFIED`, `INHERIT_VAULT_RETENTION`, `MATCH_BACKUP_EXPIRE_TIME`.
         * 
         * @return builder
         * 
         */
        public Builder backupRetentionInheritance(@Nullable Output<String> backupRetentionInheritance) {
            $.backupRetentionInheritance = backupRetentionInheritance;
            return this;
        }

        /**
         * @param backupRetentionInheritance How a backup&#39;s enforced retention end time is inherited. Default value is `INHERIT_VAULT_RETENTION` if not provided during creation.
         * Possible values are: `BACKUP_RETENTION_INHERITANCE_UNSPECIFIED`, `INHERIT_VAULT_RETENTION`, `MATCH_BACKUP_EXPIRE_TIME`.
         * 
         * @return builder
         * 
         */
        public Builder backupRetentionInheritance(String backupRetentionInheritance) {
            return backupRetentionInheritance(Output.of(backupRetentionInheritance));
        }

        /**
         * @param backupVaultId Required. ID of the requesting object.
         * 
         * @return builder
         * 
         */
        public Builder backupVaultId(@Nullable Output<String> backupVaultId) {
            $.backupVaultId = backupVaultId;
            return this;
        }

        /**
         * @param backupVaultId Required. ID of the requesting object.
         * 
         * @return builder
         * 
         */
        public Builder backupVaultId(String backupVaultId) {
            return backupVaultId(Output.of(backupVaultId));
        }

        /**
         * @param createTime Output only. The time when the instance was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime Output only. The time when the instance was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param deletable Output only. Set to true when there are no backups nested under this resource.
         * 
         * @return builder
         * 
         */
        public Builder deletable(@Nullable Output<Boolean> deletable) {
            $.deletable = deletable;
            return this;
        }

        /**
         * @param deletable Output only. Set to true when there are no backups nested under this resource.
         * 
         * @return builder
         * 
         */
        public Builder deletable(Boolean deletable) {
            return deletable(Output.of(deletable));
        }

        /**
         * @param description Optional. The description of the BackupVault instance (2048 characters or less).
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Optional. The description of the BackupVault instance (2048 characters or less).
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder effectiveAnnotations(@Nullable Output<Map<String,String>> effectiveAnnotations) {
            $.effectiveAnnotations = effectiveAnnotations;
            return this;
        }

        public Builder effectiveAnnotations(Map<String,String> effectiveAnnotations) {
            return effectiveAnnotations(Output.of(effectiveAnnotations));
        }

        /**
         * @param effectiveLabels All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
         * 
         * @return builder
         * 
         */
        public Builder effectiveLabels(@Nullable Output<Map<String,String>> effectiveLabels) {
            $.effectiveLabels = effectiveLabels;
            return this;
        }

        /**
         * @param effectiveLabels All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
         * 
         * @return builder
         * 
         */
        public Builder effectiveLabels(Map<String,String> effectiveLabels) {
            return effectiveLabels(Output.of(effectiveLabels));
        }

        /**
         * @param effectiveTime Optional. Time after which the BackupVault resource is locked.
         * 
         * @return builder
         * 
         */
        public Builder effectiveTime(@Nullable Output<String> effectiveTime) {
            $.effectiveTime = effectiveTime;
            return this;
        }

        /**
         * @param effectiveTime Optional. Time after which the BackupVault resource is locked.
         * 
         * @return builder
         * 
         */
        public Builder effectiveTime(String effectiveTime) {
            return effectiveTime(Output.of(effectiveTime));
        }

        /**
         * @param etag Optional. Server specified ETag for the backup vault resource to prevent simultaneous updates from overwiting each other.
         * 
         * @return builder
         * 
         */
        public Builder etag(@Nullable Output<String> etag) {
            $.etag = etag;
            return this;
        }

        /**
         * @param etag Optional. Server specified ETag for the backup vault resource to prevent simultaneous updates from overwiting each other.
         * 
         * @return builder
         * 
         */
        public Builder etag(String etag) {
            return etag(Output.of(etag));
        }

        /**
         * @param forceDelete (Optional, Deprecated)
         * If set, the following restrictions against deletion of the backup vault instance can be overridden:
         * * deletion of a backup vault instance containing no backups, but still containing empty datasources.
         * * deletion of a backup vault instance that is being referenced by an active backup plan.
         * 
         * &gt; **Warning:** `forceDelete` is deprecated and will be removed in a future major release. Use `ignoreInactiveDatasources` instead.
         * 
         * @return builder
         * 
         * @deprecated
         * `forceDelete` is deprecated and will be removed in a future major release. Use `ignoreInactiveDatasources` instead.
         * 
         */
        @Deprecated /* `forceDelete` is deprecated and will be removed in a future major release. Use `ignoreInactiveDatasources` instead. */
        public Builder forceDelete(@Nullable Output<Boolean> forceDelete) {
            $.forceDelete = forceDelete;
            return this;
        }

        /**
         * @param forceDelete (Optional, Deprecated)
         * If set, the following restrictions against deletion of the backup vault instance can be overridden:
         * * deletion of a backup vault instance containing no backups, but still containing empty datasources.
         * * deletion of a backup vault instance that is being referenced by an active backup plan.
         * 
         * &gt; **Warning:** `forceDelete` is deprecated and will be removed in a future major release. Use `ignoreInactiveDatasources` instead.
         * 
         * @return builder
         * 
         * @deprecated
         * `forceDelete` is deprecated and will be removed in a future major release. Use `ignoreInactiveDatasources` instead.
         * 
         */
        @Deprecated /* `forceDelete` is deprecated and will be removed in a future major release. Use `ignoreInactiveDatasources` instead. */
        public Builder forceDelete(Boolean forceDelete) {
            return forceDelete(Output.of(forceDelete));
        }

        /**
         * @param forceUpdate If set, allow update to extend the minimum enforced retention for backup vault. This overrides
         * the restriction against conflicting retention periods. This conflict may occur when the
         * expiration schedule defined by the associated backup plan is shorter than the minimum
         * retention set by the backup vault.
         * 
         * @return builder
         * 
         */
        public Builder forceUpdate(@Nullable Output<Boolean> forceUpdate) {
            $.forceUpdate = forceUpdate;
            return this;
        }

        /**
         * @param forceUpdate If set, allow update to extend the minimum enforced retention for backup vault. This overrides
         * the restriction against conflicting retention periods. This conflict may occur when the
         * expiration schedule defined by the associated backup plan is shorter than the minimum
         * retention set by the backup vault.
         * 
         * @return builder
         * 
         */
        public Builder forceUpdate(Boolean forceUpdate) {
            return forceUpdate(Output.of(forceUpdate));
        }

        /**
         * @param ignoreBackupPlanReferences If set, the following restrictions against deletion of the backup vault instance can be overridden:
         * * deletion of a backup vault instance that is being referenced by an active backup plan.
         * 
         * @return builder
         * 
         */
        public Builder ignoreBackupPlanReferences(@Nullable Output<Boolean> ignoreBackupPlanReferences) {
            $.ignoreBackupPlanReferences = ignoreBackupPlanReferences;
            return this;
        }

        /**
         * @param ignoreBackupPlanReferences If set, the following restrictions against deletion of the backup vault instance can be overridden:
         * * deletion of a backup vault instance that is being referenced by an active backup plan.
         * 
         * @return builder
         * 
         */
        public Builder ignoreBackupPlanReferences(Boolean ignoreBackupPlanReferences) {
            return ignoreBackupPlanReferences(Output.of(ignoreBackupPlanReferences));
        }

        /**
         * @param ignoreInactiveDatasources If set, the following restrictions against deletion of the backup vault instance can be overridden:
         * * deletion of a backup vault instance containing no backups, but still containing empty datasources.
         * 
         * @return builder
         * 
         */
        public Builder ignoreInactiveDatasources(@Nullable Output<Boolean> ignoreInactiveDatasources) {
            $.ignoreInactiveDatasources = ignoreInactiveDatasources;
            return this;
        }

        /**
         * @param ignoreInactiveDatasources If set, the following restrictions against deletion of the backup vault instance can be overridden:
         * * deletion of a backup vault instance containing no backups, but still containing empty datasources.
         * 
         * @return builder
         * 
         */
        public Builder ignoreInactiveDatasources(Boolean ignoreInactiveDatasources) {
            return ignoreInactiveDatasources(Output.of(ignoreInactiveDatasources));
        }

        /**
         * @param labels Optional. Resource labels to represent user provided metadata.
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Optional. Resource labels to represent user provided metadata.
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param location The GCP location for the backup vault.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The GCP location for the backup vault.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name Output only. Identifier. The resource name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Output only. Identifier. The resource name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param pulumiLabels The combination of labels configured directly on the resource
         * and default labels configured on the provider.
         * 
         * @return builder
         * 
         */
        public Builder pulumiLabels(@Nullable Output<Map<String,String>> pulumiLabels) {
            $.pulumiLabels = pulumiLabels;
            return this;
        }

        /**
         * @param pulumiLabels The combination of labels configured directly on the resource
         * and default labels configured on the provider.
         * 
         * @return builder
         * 
         */
        public Builder pulumiLabels(Map<String,String> pulumiLabels) {
            return pulumiLabels(Output.of(pulumiLabels));
        }

        /**
         * @param serviceAccount Output only. Service account used by the BackupVault Service for this BackupVault.  The user should grant this account permissions in their workload project to enable the service to run backups and restores there.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccount(@Nullable Output<String> serviceAccount) {
            $.serviceAccount = serviceAccount;
            return this;
        }

        /**
         * @param serviceAccount Output only. Service account used by the BackupVault Service for this BackupVault.  The user should grant this account permissions in their workload project to enable the service to run backups and restores there.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccount(String serviceAccount) {
            return serviceAccount(Output.of(serviceAccount));
        }

        /**
         * @param state Output only. The BackupVault resource instance state.
         * Possible values:
         * STATE_UNSPECIFIED
         * CREATING
         * ACTIVE
         * DELETING
         * ERROR
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state Output only. The BackupVault resource instance state.
         * Possible values:
         * STATE_UNSPECIFIED
         * CREATING
         * ACTIVE
         * DELETING
         * ERROR
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param totalStoredBytes Output only. Total size of the storage used by all backup resources.
         * 
         * @return builder
         * 
         */
        public Builder totalStoredBytes(@Nullable Output<String> totalStoredBytes) {
            $.totalStoredBytes = totalStoredBytes;
            return this;
        }

        /**
         * @param totalStoredBytes Output only. Total size of the storage used by all backup resources.
         * 
         * @return builder
         * 
         */
        public Builder totalStoredBytes(String totalStoredBytes) {
            return totalStoredBytes(Output.of(totalStoredBytes));
        }

        /**
         * @param uid Output only. Output only Immutable after resource creation until resource deletion.
         * 
         * @return builder
         * 
         */
        public Builder uid(@Nullable Output<String> uid) {
            $.uid = uid;
            return this;
        }

        /**
         * @param uid Output only. Output only Immutable after resource creation until resource deletion.
         * 
         * @return builder
         * 
         */
        public Builder uid(String uid) {
            return uid(Output.of(uid));
        }

        /**
         * @param updateTime Output only. The time when the instance was updated.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(@Nullable Output<String> updateTime) {
            $.updateTime = updateTime;
            return this;
        }

        /**
         * @param updateTime Output only. The time when the instance was updated.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(String updateTime) {
            return updateTime(Output.of(updateTime));
        }

        public BackupVaultState build() {
            return $;
        }
    }

}
