// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.bigquery.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.bigquery.inputs.TableTableConstraintsForeignKeyColumnReferencesArgs;
import com.pulumi.gcp.bigquery.inputs.TableTableConstraintsForeignKeyReferencedTableArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TableTableConstraintsForeignKeyArgs extends com.pulumi.resources.ResourceArgs {

    public static final TableTableConstraintsForeignKeyArgs Empty = new TableTableConstraintsForeignKeyArgs();

    /**
     * The pair of the foreign key column and primary key column.
     * Structure is documented below.
     * 
     */
    @Import(name="columnReferences", required=true)
    private Output<TableTableConstraintsForeignKeyColumnReferencesArgs> columnReferences;

    /**
     * @return The pair of the foreign key column and primary key column.
     * Structure is documented below.
     * 
     */
    public Output<TableTableConstraintsForeignKeyColumnReferencesArgs> columnReferences() {
        return this.columnReferences;
    }

    /**
     * Set only if the foreign key constraint is named.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Set only if the foreign key constraint is named.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The table that holds the primary key
     * and is referenced by this foreign key.
     * Structure is documented below.
     * 
     */
    @Import(name="referencedTable", required=true)
    private Output<TableTableConstraintsForeignKeyReferencedTableArgs> referencedTable;

    /**
     * @return The table that holds the primary key
     * and is referenced by this foreign key.
     * Structure is documented below.
     * 
     */
    public Output<TableTableConstraintsForeignKeyReferencedTableArgs> referencedTable() {
        return this.referencedTable;
    }

    private TableTableConstraintsForeignKeyArgs() {}

    private TableTableConstraintsForeignKeyArgs(TableTableConstraintsForeignKeyArgs $) {
        this.columnReferences = $.columnReferences;
        this.name = $.name;
        this.referencedTable = $.referencedTable;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TableTableConstraintsForeignKeyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TableTableConstraintsForeignKeyArgs $;

        public Builder() {
            $ = new TableTableConstraintsForeignKeyArgs();
        }

        public Builder(TableTableConstraintsForeignKeyArgs defaults) {
            $ = new TableTableConstraintsForeignKeyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param columnReferences The pair of the foreign key column and primary key column.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder columnReferences(Output<TableTableConstraintsForeignKeyColumnReferencesArgs> columnReferences) {
            $.columnReferences = columnReferences;
            return this;
        }

        /**
         * @param columnReferences The pair of the foreign key column and primary key column.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder columnReferences(TableTableConstraintsForeignKeyColumnReferencesArgs columnReferences) {
            return columnReferences(Output.of(columnReferences));
        }

        /**
         * @param name Set only if the foreign key constraint is named.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Set only if the foreign key constraint is named.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param referencedTable The table that holds the primary key
         * and is referenced by this foreign key.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder referencedTable(Output<TableTableConstraintsForeignKeyReferencedTableArgs> referencedTable) {
            $.referencedTable = referencedTable;
            return this;
        }

        /**
         * @param referencedTable The table that holds the primary key
         * and is referenced by this foreign key.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder referencedTable(TableTableConstraintsForeignKeyReferencedTableArgs referencedTable) {
            return referencedTable(Output.of(referencedTable));
        }

        public TableTableConstraintsForeignKeyArgs build() {
            $.columnReferences = Objects.requireNonNull($.columnReferences, "expected parameter 'columnReferences' to be non-null");
            $.referencedTable = Objects.requireNonNull($.referencedTable, "expected parameter 'referencedTable' to be non-null");
            return $;
        }
    }

}
