// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.osconfig.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.osconfig.outputs.PatchDeploymentPatchConfigApt;
import com.pulumi.gcp.osconfig.outputs.PatchDeploymentPatchConfigGoo;
import com.pulumi.gcp.osconfig.outputs.PatchDeploymentPatchConfigPostStep;
import com.pulumi.gcp.osconfig.outputs.PatchDeploymentPatchConfigPreStep;
import com.pulumi.gcp.osconfig.outputs.PatchDeploymentPatchConfigWindowsUpdate;
import com.pulumi.gcp.osconfig.outputs.PatchDeploymentPatchConfigYum;
import com.pulumi.gcp.osconfig.outputs.PatchDeploymentPatchConfigZypper;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class PatchDeploymentPatchConfig {
    /**
     * @return Apt update settings. Use this setting to override the default apt patch rules.
     * Structure is documented below.
     * 
     */
    private @Nullable PatchDeploymentPatchConfigApt apt;
    /**
     * @return goo update settings. Use this setting to override the default goo patch rules.
     * Structure is documented below.
     * 
     */
    private @Nullable PatchDeploymentPatchConfigGoo goo;
    /**
     * @return Allows the patch job to run on Managed instance groups (MIGs).
     * 
     */
    private @Nullable Boolean migInstancesAllowed;
    /**
     * @return The ExecStep to run after the patch update.
     * Structure is documented below.
     * 
     */
    private @Nullable PatchDeploymentPatchConfigPostStep postStep;
    /**
     * @return The ExecStep to run before the patch update.
     * Structure is documented below.
     * 
     */
    private @Nullable PatchDeploymentPatchConfigPreStep preStep;
    /**
     * @return Post-patch reboot settings.
     * Possible values are `DEFAULT`, `ALWAYS`, and `NEVER`.
     * 
     */
    private @Nullable String rebootConfig;
    /**
     * @return Windows update settings. Use this setting to override the default Windows patch rules.
     * Structure is documented below.
     * 
     */
    private @Nullable PatchDeploymentPatchConfigWindowsUpdate windowsUpdate;
    /**
     * @return Yum update settings. Use this setting to override the default yum patch rules.
     * Structure is documented below.
     * 
     */
    private @Nullable PatchDeploymentPatchConfigYum yum;
    /**
     * @return zypper update settings. Use this setting to override the default zypper patch rules.
     * Structure is documented below.
     * 
     */
    private @Nullable PatchDeploymentPatchConfigZypper zypper;

    private PatchDeploymentPatchConfig() {}
    /**
     * @return Apt update settings. Use this setting to override the default apt patch rules.
     * Structure is documented below.
     * 
     */
    public Optional<PatchDeploymentPatchConfigApt> apt() {
        return Optional.ofNullable(this.apt);
    }
    /**
     * @return goo update settings. Use this setting to override the default goo patch rules.
     * Structure is documented below.
     * 
     */
    public Optional<PatchDeploymentPatchConfigGoo> goo() {
        return Optional.ofNullable(this.goo);
    }
    /**
     * @return Allows the patch job to run on Managed instance groups (MIGs).
     * 
     */
    public Optional<Boolean> migInstancesAllowed() {
        return Optional.ofNullable(this.migInstancesAllowed);
    }
    /**
     * @return The ExecStep to run after the patch update.
     * Structure is documented below.
     * 
     */
    public Optional<PatchDeploymentPatchConfigPostStep> postStep() {
        return Optional.ofNullable(this.postStep);
    }
    /**
     * @return The ExecStep to run before the patch update.
     * Structure is documented below.
     * 
     */
    public Optional<PatchDeploymentPatchConfigPreStep> preStep() {
        return Optional.ofNullable(this.preStep);
    }
    /**
     * @return Post-patch reboot settings.
     * Possible values are `DEFAULT`, `ALWAYS`, and `NEVER`.
     * 
     */
    public Optional<String> rebootConfig() {
        return Optional.ofNullable(this.rebootConfig);
    }
    /**
     * @return Windows update settings. Use this setting to override the default Windows patch rules.
     * Structure is documented below.
     * 
     */
    public Optional<PatchDeploymentPatchConfigWindowsUpdate> windowsUpdate() {
        return Optional.ofNullable(this.windowsUpdate);
    }
    /**
     * @return Yum update settings. Use this setting to override the default yum patch rules.
     * Structure is documented below.
     * 
     */
    public Optional<PatchDeploymentPatchConfigYum> yum() {
        return Optional.ofNullable(this.yum);
    }
    /**
     * @return zypper update settings. Use this setting to override the default zypper patch rules.
     * Structure is documented below.
     * 
     */
    public Optional<PatchDeploymentPatchConfigZypper> zypper() {
        return Optional.ofNullable(this.zypper);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PatchDeploymentPatchConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable PatchDeploymentPatchConfigApt apt;
        private @Nullable PatchDeploymentPatchConfigGoo goo;
        private @Nullable Boolean migInstancesAllowed;
        private @Nullable PatchDeploymentPatchConfigPostStep postStep;
        private @Nullable PatchDeploymentPatchConfigPreStep preStep;
        private @Nullable String rebootConfig;
        private @Nullable PatchDeploymentPatchConfigWindowsUpdate windowsUpdate;
        private @Nullable PatchDeploymentPatchConfigYum yum;
        private @Nullable PatchDeploymentPatchConfigZypper zypper;
        public Builder() {}
        public Builder(PatchDeploymentPatchConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.apt = defaults.apt;
    	      this.goo = defaults.goo;
    	      this.migInstancesAllowed = defaults.migInstancesAllowed;
    	      this.postStep = defaults.postStep;
    	      this.preStep = defaults.preStep;
    	      this.rebootConfig = defaults.rebootConfig;
    	      this.windowsUpdate = defaults.windowsUpdate;
    	      this.yum = defaults.yum;
    	      this.zypper = defaults.zypper;
        }

        @CustomType.Setter
        public Builder apt(@Nullable PatchDeploymentPatchConfigApt apt) {
            this.apt = apt;
            return this;
        }
        @CustomType.Setter
        public Builder goo(@Nullable PatchDeploymentPatchConfigGoo goo) {
            this.goo = goo;
            return this;
        }
        @CustomType.Setter
        public Builder migInstancesAllowed(@Nullable Boolean migInstancesAllowed) {
            this.migInstancesAllowed = migInstancesAllowed;
            return this;
        }
        @CustomType.Setter
        public Builder postStep(@Nullable PatchDeploymentPatchConfigPostStep postStep) {
            this.postStep = postStep;
            return this;
        }
        @CustomType.Setter
        public Builder preStep(@Nullable PatchDeploymentPatchConfigPreStep preStep) {
            this.preStep = preStep;
            return this;
        }
        @CustomType.Setter
        public Builder rebootConfig(@Nullable String rebootConfig) {
            this.rebootConfig = rebootConfig;
            return this;
        }
        @CustomType.Setter
        public Builder windowsUpdate(@Nullable PatchDeploymentPatchConfigWindowsUpdate windowsUpdate) {
            this.windowsUpdate = windowsUpdate;
            return this;
        }
        @CustomType.Setter
        public Builder yum(@Nullable PatchDeploymentPatchConfigYum yum) {
            this.yum = yum;
            return this;
        }
        @CustomType.Setter
        public Builder zypper(@Nullable PatchDeploymentPatchConfigZypper zypper) {
            this.zypper = zypper;
            return this;
        }
        public PatchDeploymentPatchConfig build() {
            final var o = new PatchDeploymentPatchConfig();
            o.apt = apt;
            o.goo = goo;
            o.migInstancesAllowed = migInstancesAllowed;
            o.postStep = postStep;
            o.preStep = preStep;
            o.rebootConfig = rebootConfig;
            o.windowsUpdate = windowsUpdate;
            o.yum = yum;
            o.zypper = zypper;
            return o;
        }
    }
}
