// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudfunctionsv2.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.cloudfunctionsv2.outputs.FunctionEventTriggerEventFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class FunctionEventTrigger {
    /**
     * @return Criteria used to filter events.
     * Structure is documented below.
     * 
     */
    private @Nullable List<FunctionEventTriggerEventFilter> eventFilters;
    /**
     * @return Required. The type of event to observe.
     * 
     */
    private @Nullable String eventType;
    /**
     * @return The name of a Pub/Sub topic in the same project that will be used
     * as the transport topic for the event delivery.
     * 
     */
    private @Nullable String pubsubTopic;
    /**
     * @return Describes the retry policy in case of function&#39;s execution failure.
     * Retried execution is charged as any other execution.
     * Possible values are `RETRY_POLICY_UNSPECIFIED`, `RETRY_POLICY_DO_NOT_RETRY`, and `RETRY_POLICY_RETRY`.
     * 
     */
    private @Nullable String retryPolicy;
    /**
     * @return The email of the service account for this function.
     * 
     */
    private @Nullable String serviceAccountEmail;
    /**
     * @return -
     * Output only. The resource name of the Eventarc trigger.
     * 
     */
    private @Nullable String trigger;
    /**
     * @return The region that the trigger will be in. The trigger will only receive
     * events originating in this region. It can be the same
     * region as the function, a different region or multi-region, or the global
     * region. If not provided, defaults to the same region as the function.
     * 
     */
    private @Nullable String triggerRegion;

    private FunctionEventTrigger() {}
    /**
     * @return Criteria used to filter events.
     * Structure is documented below.
     * 
     */
    public List<FunctionEventTriggerEventFilter> eventFilters() {
        return this.eventFilters == null ? List.of() : this.eventFilters;
    }
    /**
     * @return Required. The type of event to observe.
     * 
     */
    public Optional<String> eventType() {
        return Optional.ofNullable(this.eventType);
    }
    /**
     * @return The name of a Pub/Sub topic in the same project that will be used
     * as the transport topic for the event delivery.
     * 
     */
    public Optional<String> pubsubTopic() {
        return Optional.ofNullable(this.pubsubTopic);
    }
    /**
     * @return Describes the retry policy in case of function&#39;s execution failure.
     * Retried execution is charged as any other execution.
     * Possible values are `RETRY_POLICY_UNSPECIFIED`, `RETRY_POLICY_DO_NOT_RETRY`, and `RETRY_POLICY_RETRY`.
     * 
     */
    public Optional<String> retryPolicy() {
        return Optional.ofNullable(this.retryPolicy);
    }
    /**
     * @return The email of the service account for this function.
     * 
     */
    public Optional<String> serviceAccountEmail() {
        return Optional.ofNullable(this.serviceAccountEmail);
    }
    /**
     * @return -
     * Output only. The resource name of the Eventarc trigger.
     * 
     */
    public Optional<String> trigger() {
        return Optional.ofNullable(this.trigger);
    }
    /**
     * @return The region that the trigger will be in. The trigger will only receive
     * events originating in this region. It can be the same
     * region as the function, a different region or multi-region, or the global
     * region. If not provided, defaults to the same region as the function.
     * 
     */
    public Optional<String> triggerRegion() {
        return Optional.ofNullable(this.triggerRegion);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FunctionEventTrigger defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<FunctionEventTriggerEventFilter> eventFilters;
        private @Nullable String eventType;
        private @Nullable String pubsubTopic;
        private @Nullable String retryPolicy;
        private @Nullable String serviceAccountEmail;
        private @Nullable String trigger;
        private @Nullable String triggerRegion;
        public Builder() {}
        public Builder(FunctionEventTrigger defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.eventFilters = defaults.eventFilters;
    	      this.eventType = defaults.eventType;
    	      this.pubsubTopic = defaults.pubsubTopic;
    	      this.retryPolicy = defaults.retryPolicy;
    	      this.serviceAccountEmail = defaults.serviceAccountEmail;
    	      this.trigger = defaults.trigger;
    	      this.triggerRegion = defaults.triggerRegion;
        }

        @CustomType.Setter
        public Builder eventFilters(@Nullable List<FunctionEventTriggerEventFilter> eventFilters) {
            this.eventFilters = eventFilters;
            return this;
        }
        public Builder eventFilters(FunctionEventTriggerEventFilter... eventFilters) {
            return eventFilters(List.of(eventFilters));
        }
        @CustomType.Setter
        public Builder eventType(@Nullable String eventType) {
            this.eventType = eventType;
            return this;
        }
        @CustomType.Setter
        public Builder pubsubTopic(@Nullable String pubsubTopic) {
            this.pubsubTopic = pubsubTopic;
            return this;
        }
        @CustomType.Setter
        public Builder retryPolicy(@Nullable String retryPolicy) {
            this.retryPolicy = retryPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder serviceAccountEmail(@Nullable String serviceAccountEmail) {
            this.serviceAccountEmail = serviceAccountEmail;
            return this;
        }
        @CustomType.Setter
        public Builder trigger(@Nullable String trigger) {
            this.trigger = trigger;
            return this;
        }
        @CustomType.Setter
        public Builder triggerRegion(@Nullable String triggerRegion) {
            this.triggerRegion = triggerRegion;
            return this;
        }
        public FunctionEventTrigger build() {
            final var o = new FunctionEventTrigger();
            o.eventFilters = eventFilters;
            o.eventType = eventType;
            o.pubsubTopic = pubsubTopic;
            o.retryPolicy = retryPolicy;
            o.serviceAccountEmail = serviceAccountEmail;
            o.trigger = trigger;
            o.triggerRegion = triggerRegion;
            return o;
        }
    }
}
