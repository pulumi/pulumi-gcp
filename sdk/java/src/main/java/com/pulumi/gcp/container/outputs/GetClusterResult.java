// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.container.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.container.outputs.GetClusterAddonsConfig;
import com.pulumi.gcp.container.outputs.GetClusterAnonymousAuthenticationConfig;
import com.pulumi.gcp.container.outputs.GetClusterAuthenticatorGroupsConfig;
import com.pulumi.gcp.container.outputs.GetClusterBinaryAuthorization;
import com.pulumi.gcp.container.outputs.GetClusterClusterAutoscaling;
import com.pulumi.gcp.container.outputs.GetClusterClusterTelemetry;
import com.pulumi.gcp.container.outputs.GetClusterConfidentialNode;
import com.pulumi.gcp.container.outputs.GetClusterControlPlaneEndpointsConfig;
import com.pulumi.gcp.container.outputs.GetClusterCostManagementConfig;
import com.pulumi.gcp.container.outputs.GetClusterDatabaseEncryption;
import com.pulumi.gcp.container.outputs.GetClusterDefaultSnatStatus;
import com.pulumi.gcp.container.outputs.GetClusterDnsConfig;
import com.pulumi.gcp.container.outputs.GetClusterEnableK8sBetaApi;
import com.pulumi.gcp.container.outputs.GetClusterEnterpriseConfig;
import com.pulumi.gcp.container.outputs.GetClusterFleet;
import com.pulumi.gcp.container.outputs.GetClusterGatewayApiConfig;
import com.pulumi.gcp.container.outputs.GetClusterGkeAutoUpgradeConfig;
import com.pulumi.gcp.container.outputs.GetClusterIdentityServiceConfig;
import com.pulumi.gcp.container.outputs.GetClusterIpAllocationPolicy;
import com.pulumi.gcp.container.outputs.GetClusterLoggingConfig;
import com.pulumi.gcp.container.outputs.GetClusterMaintenancePolicy;
import com.pulumi.gcp.container.outputs.GetClusterMasterAuth;
import com.pulumi.gcp.container.outputs.GetClusterMasterAuthorizedNetworksConfig;
import com.pulumi.gcp.container.outputs.GetClusterMeshCertificate;
import com.pulumi.gcp.container.outputs.GetClusterMonitoringConfig;
import com.pulumi.gcp.container.outputs.GetClusterNetworkPerformanceConfig;
import com.pulumi.gcp.container.outputs.GetClusterNetworkPolicy;
import com.pulumi.gcp.container.outputs.GetClusterNodeConfig;
import com.pulumi.gcp.container.outputs.GetClusterNodePool;
import com.pulumi.gcp.container.outputs.GetClusterNodePoolAutoConfig;
import com.pulumi.gcp.container.outputs.GetClusterNodePoolDefault;
import com.pulumi.gcp.container.outputs.GetClusterNotificationConfig;
import com.pulumi.gcp.container.outputs.GetClusterPodAutoscaling;
import com.pulumi.gcp.container.outputs.GetClusterPodSecurityPolicyConfig;
import com.pulumi.gcp.container.outputs.GetClusterPrivateClusterConfig;
import com.pulumi.gcp.container.outputs.GetClusterProtectConfig;
import com.pulumi.gcp.container.outputs.GetClusterRbacBindingConfig;
import com.pulumi.gcp.container.outputs.GetClusterReleaseChannel;
import com.pulumi.gcp.container.outputs.GetClusterResourceUsageExportConfig;
import com.pulumi.gcp.container.outputs.GetClusterSecretManagerConfig;
import com.pulumi.gcp.container.outputs.GetClusterSecurityPostureConfig;
import com.pulumi.gcp.container.outputs.GetClusterServiceExternalIpsConfig;
import com.pulumi.gcp.container.outputs.GetClusterTpuConfig;
import com.pulumi.gcp.container.outputs.GetClusterUserManagedKeysConfig;
import com.pulumi.gcp.container.outputs.GetClusterVerticalPodAutoscaling;
import com.pulumi.gcp.container.outputs.GetClusterWorkloadAltsConfig;
import com.pulumi.gcp.container.outputs.GetClusterWorkloadIdentityConfig;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetClusterResult {
    private List<GetClusterAddonsConfig> addonsConfigs;
    private Boolean allowNetAdmin;
    private List<GetClusterAnonymousAuthenticationConfig> anonymousAuthenticationConfigs;
    private List<GetClusterAuthenticatorGroupsConfig> authenticatorGroupsConfigs;
    private List<GetClusterBinaryAuthorization> binaryAuthorizations;
    private List<GetClusterClusterAutoscaling> clusterAutoscalings;
    private String clusterIpv4Cidr;
    private List<GetClusterClusterTelemetry> clusterTelemetries;
    private List<GetClusterConfidentialNode> confidentialNodes;
    private List<GetClusterControlPlaneEndpointsConfig> controlPlaneEndpointsConfigs;
    private List<GetClusterCostManagementConfig> costManagementConfigs;
    private List<GetClusterDatabaseEncryption> databaseEncryptions;
    private String datapathProvider;
    private Integer defaultMaxPodsPerNode;
    private List<GetClusterDefaultSnatStatus> defaultSnatStatuses;
    private Boolean deletionProtection;
    private String description;
    private Boolean disableL4LbFirewallReconciliation;
    private List<GetClusterDnsConfig> dnsConfigs;
    private Map<String,String> effectiveLabels;
    private Boolean enableAutopilot;
    private Boolean enableCiliumClusterwideNetworkPolicy;
    private Boolean enableFqdnNetworkPolicy;
    private Boolean enableIntranodeVisibility;
    private List<GetClusterEnableK8sBetaApi> enableK8sBetaApis;
    private Boolean enableKubernetesAlpha;
    private Boolean enableL4IlbSubsetting;
    private Boolean enableLegacyAbac;
    private Boolean enableMultiNetworking;
    private Boolean enableShieldedNodes;
    private Boolean enableTpu;
    private String endpoint;
    private List<GetClusterEnterpriseConfig> enterpriseConfigs;
    private List<GetClusterFleet> fleets;
    private List<GetClusterGatewayApiConfig> gatewayApiConfigs;
    private List<GetClusterGkeAutoUpgradeConfig> gkeAutoUpgradeConfigs;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private List<GetClusterIdentityServiceConfig> identityServiceConfigs;
    private String inTransitEncryptionConfig;
    private Integer initialNodeCount;
    private List<GetClusterIpAllocationPolicy> ipAllocationPolicies;
    private String labelFingerprint;
    private @Nullable String location;
    private List<GetClusterLoggingConfig> loggingConfigs;
    private String loggingService;
    private List<GetClusterMaintenancePolicy> maintenancePolicies;
    private List<GetClusterMasterAuthorizedNetworksConfig> masterAuthorizedNetworksConfigs;
    private List<GetClusterMasterAuth> masterAuths;
    private String masterVersion;
    private List<GetClusterMeshCertificate> meshCertificates;
    private String minMasterVersion;
    private List<GetClusterMonitoringConfig> monitoringConfigs;
    private String monitoringService;
    private String name;
    private String network;
    private List<GetClusterNetworkPerformanceConfig> networkPerformanceConfigs;
    private List<GetClusterNetworkPolicy> networkPolicies;
    private String networkingMode;
    private List<GetClusterNodeConfig> nodeConfigs;
    private List<String> nodeLocations;
    private List<GetClusterNodePoolAutoConfig> nodePoolAutoConfigs;
    private List<GetClusterNodePoolDefault> nodePoolDefaults;
    private List<GetClusterNodePool> nodePools;
    private String nodeVersion;
    private List<GetClusterNotificationConfig> notificationConfigs;
    private String operation;
    private List<GetClusterPodAutoscaling> podAutoscalings;
    private List<GetClusterPodSecurityPolicyConfig> podSecurityPolicyConfigs;
    private List<GetClusterPrivateClusterConfig> privateClusterConfigs;
    private String privateIpv6GoogleAccess;
    private @Nullable String project;
    private List<GetClusterProtectConfig> protectConfigs;
    private Map<String,String> pulumiLabels;
    private List<GetClusterRbacBindingConfig> rbacBindingConfigs;
    private List<GetClusterReleaseChannel> releaseChannels;
    private Boolean removeDefaultNodePool;
    private Map<String,String> resourceLabels;
    private List<GetClusterResourceUsageExportConfig> resourceUsageExportConfigs;
    private List<GetClusterSecretManagerConfig> secretManagerConfigs;
    private List<GetClusterSecurityPostureConfig> securityPostureConfigs;
    private String selfLink;
    private List<GetClusterServiceExternalIpsConfig> serviceExternalIpsConfigs;
    private String servicesIpv4Cidr;
    private String subnetwork;
    private List<GetClusterTpuConfig> tpuConfigs;
    private String tpuIpv4CidrBlock;
    private List<GetClusterUserManagedKeysConfig> userManagedKeysConfigs;
    private List<GetClusterVerticalPodAutoscaling> verticalPodAutoscalings;
    private List<GetClusterWorkloadAltsConfig> workloadAltsConfigs;
    private List<GetClusterWorkloadIdentityConfig> workloadIdentityConfigs;

    private GetClusterResult() {}
    public List<GetClusterAddonsConfig> addonsConfigs() {
        return this.addonsConfigs;
    }
    public Boolean allowNetAdmin() {
        return this.allowNetAdmin;
    }
    public List<GetClusterAnonymousAuthenticationConfig> anonymousAuthenticationConfigs() {
        return this.anonymousAuthenticationConfigs;
    }
    public List<GetClusterAuthenticatorGroupsConfig> authenticatorGroupsConfigs() {
        return this.authenticatorGroupsConfigs;
    }
    public List<GetClusterBinaryAuthorization> binaryAuthorizations() {
        return this.binaryAuthorizations;
    }
    public List<GetClusterClusterAutoscaling> clusterAutoscalings() {
        return this.clusterAutoscalings;
    }
    public String clusterIpv4Cidr() {
        return this.clusterIpv4Cidr;
    }
    public List<GetClusterClusterTelemetry> clusterTelemetries() {
        return this.clusterTelemetries;
    }
    public List<GetClusterConfidentialNode> confidentialNodes() {
        return this.confidentialNodes;
    }
    public List<GetClusterControlPlaneEndpointsConfig> controlPlaneEndpointsConfigs() {
        return this.controlPlaneEndpointsConfigs;
    }
    public List<GetClusterCostManagementConfig> costManagementConfigs() {
        return this.costManagementConfigs;
    }
    public List<GetClusterDatabaseEncryption> databaseEncryptions() {
        return this.databaseEncryptions;
    }
    public String datapathProvider() {
        return this.datapathProvider;
    }
    public Integer defaultMaxPodsPerNode() {
        return this.defaultMaxPodsPerNode;
    }
    public List<GetClusterDefaultSnatStatus> defaultSnatStatuses() {
        return this.defaultSnatStatuses;
    }
    public Boolean deletionProtection() {
        return this.deletionProtection;
    }
    public String description() {
        return this.description;
    }
    public Boolean disableL4LbFirewallReconciliation() {
        return this.disableL4LbFirewallReconciliation;
    }
    public List<GetClusterDnsConfig> dnsConfigs() {
        return this.dnsConfigs;
    }
    public Map<String,String> effectiveLabels() {
        return this.effectiveLabels;
    }
    public Boolean enableAutopilot() {
        return this.enableAutopilot;
    }
    public Boolean enableCiliumClusterwideNetworkPolicy() {
        return this.enableCiliumClusterwideNetworkPolicy;
    }
    public Boolean enableFqdnNetworkPolicy() {
        return this.enableFqdnNetworkPolicy;
    }
    public Boolean enableIntranodeVisibility() {
        return this.enableIntranodeVisibility;
    }
    public List<GetClusterEnableK8sBetaApi> enableK8sBetaApis() {
        return this.enableK8sBetaApis;
    }
    public Boolean enableKubernetesAlpha() {
        return this.enableKubernetesAlpha;
    }
    public Boolean enableL4IlbSubsetting() {
        return this.enableL4IlbSubsetting;
    }
    public Boolean enableLegacyAbac() {
        return this.enableLegacyAbac;
    }
    public Boolean enableMultiNetworking() {
        return this.enableMultiNetworking;
    }
    public Boolean enableShieldedNodes() {
        return this.enableShieldedNodes;
    }
    public Boolean enableTpu() {
        return this.enableTpu;
    }
    public String endpoint() {
        return this.endpoint;
    }
    public List<GetClusterEnterpriseConfig> enterpriseConfigs() {
        return this.enterpriseConfigs;
    }
    public List<GetClusterFleet> fleets() {
        return this.fleets;
    }
    public List<GetClusterGatewayApiConfig> gatewayApiConfigs() {
        return this.gatewayApiConfigs;
    }
    public List<GetClusterGkeAutoUpgradeConfig> gkeAutoUpgradeConfigs() {
        return this.gkeAutoUpgradeConfigs;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public List<GetClusterIdentityServiceConfig> identityServiceConfigs() {
        return this.identityServiceConfigs;
    }
    public String inTransitEncryptionConfig() {
        return this.inTransitEncryptionConfig;
    }
    public Integer initialNodeCount() {
        return this.initialNodeCount;
    }
    public List<GetClusterIpAllocationPolicy> ipAllocationPolicies() {
        return this.ipAllocationPolicies;
    }
    public String labelFingerprint() {
        return this.labelFingerprint;
    }
    public Optional<String> location() {
        return Optional.ofNullable(this.location);
    }
    public List<GetClusterLoggingConfig> loggingConfigs() {
        return this.loggingConfigs;
    }
    public String loggingService() {
        return this.loggingService;
    }
    public List<GetClusterMaintenancePolicy> maintenancePolicies() {
        return this.maintenancePolicies;
    }
    public List<GetClusterMasterAuthorizedNetworksConfig> masterAuthorizedNetworksConfigs() {
        return this.masterAuthorizedNetworksConfigs;
    }
    public List<GetClusterMasterAuth> masterAuths() {
        return this.masterAuths;
    }
    public String masterVersion() {
        return this.masterVersion;
    }
    public List<GetClusterMeshCertificate> meshCertificates() {
        return this.meshCertificates;
    }
    public String minMasterVersion() {
        return this.minMasterVersion;
    }
    public List<GetClusterMonitoringConfig> monitoringConfigs() {
        return this.monitoringConfigs;
    }
    public String monitoringService() {
        return this.monitoringService;
    }
    public String name() {
        return this.name;
    }
    public String network() {
        return this.network;
    }
    public List<GetClusterNetworkPerformanceConfig> networkPerformanceConfigs() {
        return this.networkPerformanceConfigs;
    }
    public List<GetClusterNetworkPolicy> networkPolicies() {
        return this.networkPolicies;
    }
    public String networkingMode() {
        return this.networkingMode;
    }
    public List<GetClusterNodeConfig> nodeConfigs() {
        return this.nodeConfigs;
    }
    public List<String> nodeLocations() {
        return this.nodeLocations;
    }
    public List<GetClusterNodePoolAutoConfig> nodePoolAutoConfigs() {
        return this.nodePoolAutoConfigs;
    }
    public List<GetClusterNodePoolDefault> nodePoolDefaults() {
        return this.nodePoolDefaults;
    }
    public List<GetClusterNodePool> nodePools() {
        return this.nodePools;
    }
    public String nodeVersion() {
        return this.nodeVersion;
    }
    public List<GetClusterNotificationConfig> notificationConfigs() {
        return this.notificationConfigs;
    }
    public String operation() {
        return this.operation;
    }
    public List<GetClusterPodAutoscaling> podAutoscalings() {
        return this.podAutoscalings;
    }
    public List<GetClusterPodSecurityPolicyConfig> podSecurityPolicyConfigs() {
        return this.podSecurityPolicyConfigs;
    }
    public List<GetClusterPrivateClusterConfig> privateClusterConfigs() {
        return this.privateClusterConfigs;
    }
    public String privateIpv6GoogleAccess() {
        return this.privateIpv6GoogleAccess;
    }
    public Optional<String> project() {
        return Optional.ofNullable(this.project);
    }
    public List<GetClusterProtectConfig> protectConfigs() {
        return this.protectConfigs;
    }
    public Map<String,String> pulumiLabels() {
        return this.pulumiLabels;
    }
    public List<GetClusterRbacBindingConfig> rbacBindingConfigs() {
        return this.rbacBindingConfigs;
    }
    public List<GetClusterReleaseChannel> releaseChannels() {
        return this.releaseChannels;
    }
    public Boolean removeDefaultNodePool() {
        return this.removeDefaultNodePool;
    }
    public Map<String,String> resourceLabels() {
        return this.resourceLabels;
    }
    public List<GetClusterResourceUsageExportConfig> resourceUsageExportConfigs() {
        return this.resourceUsageExportConfigs;
    }
    public List<GetClusterSecretManagerConfig> secretManagerConfigs() {
        return this.secretManagerConfigs;
    }
    public List<GetClusterSecurityPostureConfig> securityPostureConfigs() {
        return this.securityPostureConfigs;
    }
    public String selfLink() {
        return this.selfLink;
    }
    public List<GetClusterServiceExternalIpsConfig> serviceExternalIpsConfigs() {
        return this.serviceExternalIpsConfigs;
    }
    public String servicesIpv4Cidr() {
        return this.servicesIpv4Cidr;
    }
    public String subnetwork() {
        return this.subnetwork;
    }
    public List<GetClusterTpuConfig> tpuConfigs() {
        return this.tpuConfigs;
    }
    public String tpuIpv4CidrBlock() {
        return this.tpuIpv4CidrBlock;
    }
    public List<GetClusterUserManagedKeysConfig> userManagedKeysConfigs() {
        return this.userManagedKeysConfigs;
    }
    public List<GetClusterVerticalPodAutoscaling> verticalPodAutoscalings() {
        return this.verticalPodAutoscalings;
    }
    public List<GetClusterWorkloadAltsConfig> workloadAltsConfigs() {
        return this.workloadAltsConfigs;
    }
    public List<GetClusterWorkloadIdentityConfig> workloadIdentityConfigs() {
        return this.workloadIdentityConfigs;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetClusterResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetClusterAddonsConfig> addonsConfigs;
        private Boolean allowNetAdmin;
        private List<GetClusterAnonymousAuthenticationConfig> anonymousAuthenticationConfigs;
        private List<GetClusterAuthenticatorGroupsConfig> authenticatorGroupsConfigs;
        private List<GetClusterBinaryAuthorization> binaryAuthorizations;
        private List<GetClusterClusterAutoscaling> clusterAutoscalings;
        private String clusterIpv4Cidr;
        private List<GetClusterClusterTelemetry> clusterTelemetries;
        private List<GetClusterConfidentialNode> confidentialNodes;
        private List<GetClusterControlPlaneEndpointsConfig> controlPlaneEndpointsConfigs;
        private List<GetClusterCostManagementConfig> costManagementConfigs;
        private List<GetClusterDatabaseEncryption> databaseEncryptions;
        private String datapathProvider;
        private Integer defaultMaxPodsPerNode;
        private List<GetClusterDefaultSnatStatus> defaultSnatStatuses;
        private Boolean deletionProtection;
        private String description;
        private Boolean disableL4LbFirewallReconciliation;
        private List<GetClusterDnsConfig> dnsConfigs;
        private Map<String,String> effectiveLabels;
        private Boolean enableAutopilot;
        private Boolean enableCiliumClusterwideNetworkPolicy;
        private Boolean enableFqdnNetworkPolicy;
        private Boolean enableIntranodeVisibility;
        private List<GetClusterEnableK8sBetaApi> enableK8sBetaApis;
        private Boolean enableKubernetesAlpha;
        private Boolean enableL4IlbSubsetting;
        private Boolean enableLegacyAbac;
        private Boolean enableMultiNetworking;
        private Boolean enableShieldedNodes;
        private Boolean enableTpu;
        private String endpoint;
        private List<GetClusterEnterpriseConfig> enterpriseConfigs;
        private List<GetClusterFleet> fleets;
        private List<GetClusterGatewayApiConfig> gatewayApiConfigs;
        private List<GetClusterGkeAutoUpgradeConfig> gkeAutoUpgradeConfigs;
        private String id;
        private List<GetClusterIdentityServiceConfig> identityServiceConfigs;
        private String inTransitEncryptionConfig;
        private Integer initialNodeCount;
        private List<GetClusterIpAllocationPolicy> ipAllocationPolicies;
        private String labelFingerprint;
        private @Nullable String location;
        private List<GetClusterLoggingConfig> loggingConfigs;
        private String loggingService;
        private List<GetClusterMaintenancePolicy> maintenancePolicies;
        private List<GetClusterMasterAuthorizedNetworksConfig> masterAuthorizedNetworksConfigs;
        private List<GetClusterMasterAuth> masterAuths;
        private String masterVersion;
        private List<GetClusterMeshCertificate> meshCertificates;
        private String minMasterVersion;
        private List<GetClusterMonitoringConfig> monitoringConfigs;
        private String monitoringService;
        private String name;
        private String network;
        private List<GetClusterNetworkPerformanceConfig> networkPerformanceConfigs;
        private List<GetClusterNetworkPolicy> networkPolicies;
        private String networkingMode;
        private List<GetClusterNodeConfig> nodeConfigs;
        private List<String> nodeLocations;
        private List<GetClusterNodePoolAutoConfig> nodePoolAutoConfigs;
        private List<GetClusterNodePoolDefault> nodePoolDefaults;
        private List<GetClusterNodePool> nodePools;
        private String nodeVersion;
        private List<GetClusterNotificationConfig> notificationConfigs;
        private String operation;
        private List<GetClusterPodAutoscaling> podAutoscalings;
        private List<GetClusterPodSecurityPolicyConfig> podSecurityPolicyConfigs;
        private List<GetClusterPrivateClusterConfig> privateClusterConfigs;
        private String privateIpv6GoogleAccess;
        private @Nullable String project;
        private List<GetClusterProtectConfig> protectConfigs;
        private Map<String,String> pulumiLabels;
        private List<GetClusterRbacBindingConfig> rbacBindingConfigs;
        private List<GetClusterReleaseChannel> releaseChannels;
        private Boolean removeDefaultNodePool;
        private Map<String,String> resourceLabels;
        private List<GetClusterResourceUsageExportConfig> resourceUsageExportConfigs;
        private List<GetClusterSecretManagerConfig> secretManagerConfigs;
        private List<GetClusterSecurityPostureConfig> securityPostureConfigs;
        private String selfLink;
        private List<GetClusterServiceExternalIpsConfig> serviceExternalIpsConfigs;
        private String servicesIpv4Cidr;
        private String subnetwork;
        private List<GetClusterTpuConfig> tpuConfigs;
        private String tpuIpv4CidrBlock;
        private List<GetClusterUserManagedKeysConfig> userManagedKeysConfigs;
        private List<GetClusterVerticalPodAutoscaling> verticalPodAutoscalings;
        private List<GetClusterWorkloadAltsConfig> workloadAltsConfigs;
        private List<GetClusterWorkloadIdentityConfig> workloadIdentityConfigs;
        public Builder() {}
        public Builder(GetClusterResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.addonsConfigs = defaults.addonsConfigs;
    	      this.allowNetAdmin = defaults.allowNetAdmin;
    	      this.anonymousAuthenticationConfigs = defaults.anonymousAuthenticationConfigs;
    	      this.authenticatorGroupsConfigs = defaults.authenticatorGroupsConfigs;
    	      this.binaryAuthorizations = defaults.binaryAuthorizations;
    	      this.clusterAutoscalings = defaults.clusterAutoscalings;
    	      this.clusterIpv4Cidr = defaults.clusterIpv4Cidr;
    	      this.clusterTelemetries = defaults.clusterTelemetries;
    	      this.confidentialNodes = defaults.confidentialNodes;
    	      this.controlPlaneEndpointsConfigs = defaults.controlPlaneEndpointsConfigs;
    	      this.costManagementConfigs = defaults.costManagementConfigs;
    	      this.databaseEncryptions = defaults.databaseEncryptions;
    	      this.datapathProvider = defaults.datapathProvider;
    	      this.defaultMaxPodsPerNode = defaults.defaultMaxPodsPerNode;
    	      this.defaultSnatStatuses = defaults.defaultSnatStatuses;
    	      this.deletionProtection = defaults.deletionProtection;
    	      this.description = defaults.description;
    	      this.disableL4LbFirewallReconciliation = defaults.disableL4LbFirewallReconciliation;
    	      this.dnsConfigs = defaults.dnsConfigs;
    	      this.effectiveLabels = defaults.effectiveLabels;
    	      this.enableAutopilot = defaults.enableAutopilot;
    	      this.enableCiliumClusterwideNetworkPolicy = defaults.enableCiliumClusterwideNetworkPolicy;
    	      this.enableFqdnNetworkPolicy = defaults.enableFqdnNetworkPolicy;
    	      this.enableIntranodeVisibility = defaults.enableIntranodeVisibility;
    	      this.enableK8sBetaApis = defaults.enableK8sBetaApis;
    	      this.enableKubernetesAlpha = defaults.enableKubernetesAlpha;
    	      this.enableL4IlbSubsetting = defaults.enableL4IlbSubsetting;
    	      this.enableLegacyAbac = defaults.enableLegacyAbac;
    	      this.enableMultiNetworking = defaults.enableMultiNetworking;
    	      this.enableShieldedNodes = defaults.enableShieldedNodes;
    	      this.enableTpu = defaults.enableTpu;
    	      this.endpoint = defaults.endpoint;
    	      this.enterpriseConfigs = defaults.enterpriseConfigs;
    	      this.fleets = defaults.fleets;
    	      this.gatewayApiConfigs = defaults.gatewayApiConfigs;
    	      this.gkeAutoUpgradeConfigs = defaults.gkeAutoUpgradeConfigs;
    	      this.id = defaults.id;
    	      this.identityServiceConfigs = defaults.identityServiceConfigs;
    	      this.inTransitEncryptionConfig = defaults.inTransitEncryptionConfig;
    	      this.initialNodeCount = defaults.initialNodeCount;
    	      this.ipAllocationPolicies = defaults.ipAllocationPolicies;
    	      this.labelFingerprint = defaults.labelFingerprint;
    	      this.location = defaults.location;
    	      this.loggingConfigs = defaults.loggingConfigs;
    	      this.loggingService = defaults.loggingService;
    	      this.maintenancePolicies = defaults.maintenancePolicies;
    	      this.masterAuthorizedNetworksConfigs = defaults.masterAuthorizedNetworksConfigs;
    	      this.masterAuths = defaults.masterAuths;
    	      this.masterVersion = defaults.masterVersion;
    	      this.meshCertificates = defaults.meshCertificates;
    	      this.minMasterVersion = defaults.minMasterVersion;
    	      this.monitoringConfigs = defaults.monitoringConfigs;
    	      this.monitoringService = defaults.monitoringService;
    	      this.name = defaults.name;
    	      this.network = defaults.network;
    	      this.networkPerformanceConfigs = defaults.networkPerformanceConfigs;
    	      this.networkPolicies = defaults.networkPolicies;
    	      this.networkingMode = defaults.networkingMode;
    	      this.nodeConfigs = defaults.nodeConfigs;
    	      this.nodeLocations = defaults.nodeLocations;
    	      this.nodePoolAutoConfigs = defaults.nodePoolAutoConfigs;
    	      this.nodePoolDefaults = defaults.nodePoolDefaults;
    	      this.nodePools = defaults.nodePools;
    	      this.nodeVersion = defaults.nodeVersion;
    	      this.notificationConfigs = defaults.notificationConfigs;
    	      this.operation = defaults.operation;
    	      this.podAutoscalings = defaults.podAutoscalings;
    	      this.podSecurityPolicyConfigs = defaults.podSecurityPolicyConfigs;
    	      this.privateClusterConfigs = defaults.privateClusterConfigs;
    	      this.privateIpv6GoogleAccess = defaults.privateIpv6GoogleAccess;
    	      this.project = defaults.project;
    	      this.protectConfigs = defaults.protectConfigs;
    	      this.pulumiLabels = defaults.pulumiLabels;
    	      this.rbacBindingConfigs = defaults.rbacBindingConfigs;
    	      this.releaseChannels = defaults.releaseChannels;
    	      this.removeDefaultNodePool = defaults.removeDefaultNodePool;
    	      this.resourceLabels = defaults.resourceLabels;
    	      this.resourceUsageExportConfigs = defaults.resourceUsageExportConfigs;
    	      this.secretManagerConfigs = defaults.secretManagerConfigs;
    	      this.securityPostureConfigs = defaults.securityPostureConfigs;
    	      this.selfLink = defaults.selfLink;
    	      this.serviceExternalIpsConfigs = defaults.serviceExternalIpsConfigs;
    	      this.servicesIpv4Cidr = defaults.servicesIpv4Cidr;
    	      this.subnetwork = defaults.subnetwork;
    	      this.tpuConfigs = defaults.tpuConfigs;
    	      this.tpuIpv4CidrBlock = defaults.tpuIpv4CidrBlock;
    	      this.userManagedKeysConfigs = defaults.userManagedKeysConfigs;
    	      this.verticalPodAutoscalings = defaults.verticalPodAutoscalings;
    	      this.workloadAltsConfigs = defaults.workloadAltsConfigs;
    	      this.workloadIdentityConfigs = defaults.workloadIdentityConfigs;
        }

        @CustomType.Setter
        public Builder addonsConfigs(List<GetClusterAddonsConfig> addonsConfigs) {
            if (addonsConfigs == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "addonsConfigs");
            }
            this.addonsConfigs = addonsConfigs;
            return this;
        }
        public Builder addonsConfigs(GetClusterAddonsConfig... addonsConfigs) {
            return addonsConfigs(List.of(addonsConfigs));
        }
        @CustomType.Setter
        public Builder allowNetAdmin(Boolean allowNetAdmin) {
            if (allowNetAdmin == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "allowNetAdmin");
            }
            this.allowNetAdmin = allowNetAdmin;
            return this;
        }
        @CustomType.Setter
        public Builder anonymousAuthenticationConfigs(List<GetClusterAnonymousAuthenticationConfig> anonymousAuthenticationConfigs) {
            if (anonymousAuthenticationConfigs == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "anonymousAuthenticationConfigs");
            }
            this.anonymousAuthenticationConfigs = anonymousAuthenticationConfigs;
            return this;
        }
        public Builder anonymousAuthenticationConfigs(GetClusterAnonymousAuthenticationConfig... anonymousAuthenticationConfigs) {
            return anonymousAuthenticationConfigs(List.of(anonymousAuthenticationConfigs));
        }
        @CustomType.Setter
        public Builder authenticatorGroupsConfigs(List<GetClusterAuthenticatorGroupsConfig> authenticatorGroupsConfigs) {
            if (authenticatorGroupsConfigs == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "authenticatorGroupsConfigs");
            }
            this.authenticatorGroupsConfigs = authenticatorGroupsConfigs;
            return this;
        }
        public Builder authenticatorGroupsConfigs(GetClusterAuthenticatorGroupsConfig... authenticatorGroupsConfigs) {
            return authenticatorGroupsConfigs(List.of(authenticatorGroupsConfigs));
        }
        @CustomType.Setter
        public Builder binaryAuthorizations(List<GetClusterBinaryAuthorization> binaryAuthorizations) {
            if (binaryAuthorizations == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "binaryAuthorizations");
            }
            this.binaryAuthorizations = binaryAuthorizations;
            return this;
        }
        public Builder binaryAuthorizations(GetClusterBinaryAuthorization... binaryAuthorizations) {
            return binaryAuthorizations(List.of(binaryAuthorizations));
        }
        @CustomType.Setter
        public Builder clusterAutoscalings(List<GetClusterClusterAutoscaling> clusterAutoscalings) {
            if (clusterAutoscalings == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "clusterAutoscalings");
            }
            this.clusterAutoscalings = clusterAutoscalings;
            return this;
        }
        public Builder clusterAutoscalings(GetClusterClusterAutoscaling... clusterAutoscalings) {
            return clusterAutoscalings(List.of(clusterAutoscalings));
        }
        @CustomType.Setter
        public Builder clusterIpv4Cidr(String clusterIpv4Cidr) {
            if (clusterIpv4Cidr == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "clusterIpv4Cidr");
            }
            this.clusterIpv4Cidr = clusterIpv4Cidr;
            return this;
        }
        @CustomType.Setter
        public Builder clusterTelemetries(List<GetClusterClusterTelemetry> clusterTelemetries) {
            if (clusterTelemetries == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "clusterTelemetries");
            }
            this.clusterTelemetries = clusterTelemetries;
            return this;
        }
        public Builder clusterTelemetries(GetClusterClusterTelemetry... clusterTelemetries) {
            return clusterTelemetries(List.of(clusterTelemetries));
        }
        @CustomType.Setter
        public Builder confidentialNodes(List<GetClusterConfidentialNode> confidentialNodes) {
            if (confidentialNodes == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "confidentialNodes");
            }
            this.confidentialNodes = confidentialNodes;
            return this;
        }
        public Builder confidentialNodes(GetClusterConfidentialNode... confidentialNodes) {
            return confidentialNodes(List.of(confidentialNodes));
        }
        @CustomType.Setter
        public Builder controlPlaneEndpointsConfigs(List<GetClusterControlPlaneEndpointsConfig> controlPlaneEndpointsConfigs) {
            if (controlPlaneEndpointsConfigs == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "controlPlaneEndpointsConfigs");
            }
            this.controlPlaneEndpointsConfigs = controlPlaneEndpointsConfigs;
            return this;
        }
        public Builder controlPlaneEndpointsConfigs(GetClusterControlPlaneEndpointsConfig... controlPlaneEndpointsConfigs) {
            return controlPlaneEndpointsConfigs(List.of(controlPlaneEndpointsConfigs));
        }
        @CustomType.Setter
        public Builder costManagementConfigs(List<GetClusterCostManagementConfig> costManagementConfigs) {
            if (costManagementConfigs == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "costManagementConfigs");
            }
            this.costManagementConfigs = costManagementConfigs;
            return this;
        }
        public Builder costManagementConfigs(GetClusterCostManagementConfig... costManagementConfigs) {
            return costManagementConfigs(List.of(costManagementConfigs));
        }
        @CustomType.Setter
        public Builder databaseEncryptions(List<GetClusterDatabaseEncryption> databaseEncryptions) {
            if (databaseEncryptions == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "databaseEncryptions");
            }
            this.databaseEncryptions = databaseEncryptions;
            return this;
        }
        public Builder databaseEncryptions(GetClusterDatabaseEncryption... databaseEncryptions) {
            return databaseEncryptions(List.of(databaseEncryptions));
        }
        @CustomType.Setter
        public Builder datapathProvider(String datapathProvider) {
            if (datapathProvider == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "datapathProvider");
            }
            this.datapathProvider = datapathProvider;
            return this;
        }
        @CustomType.Setter
        public Builder defaultMaxPodsPerNode(Integer defaultMaxPodsPerNode) {
            if (defaultMaxPodsPerNode == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "defaultMaxPodsPerNode");
            }
            this.defaultMaxPodsPerNode = defaultMaxPodsPerNode;
            return this;
        }
        @CustomType.Setter
        public Builder defaultSnatStatuses(List<GetClusterDefaultSnatStatus> defaultSnatStatuses) {
            if (defaultSnatStatuses == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "defaultSnatStatuses");
            }
            this.defaultSnatStatuses = defaultSnatStatuses;
            return this;
        }
        public Builder defaultSnatStatuses(GetClusterDefaultSnatStatus... defaultSnatStatuses) {
            return defaultSnatStatuses(List.of(defaultSnatStatuses));
        }
        @CustomType.Setter
        public Builder deletionProtection(Boolean deletionProtection) {
            if (deletionProtection == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "deletionProtection");
            }
            this.deletionProtection = deletionProtection;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder disableL4LbFirewallReconciliation(Boolean disableL4LbFirewallReconciliation) {
            if (disableL4LbFirewallReconciliation == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "disableL4LbFirewallReconciliation");
            }
            this.disableL4LbFirewallReconciliation = disableL4LbFirewallReconciliation;
            return this;
        }
        @CustomType.Setter
        public Builder dnsConfigs(List<GetClusterDnsConfig> dnsConfigs) {
            if (dnsConfigs == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "dnsConfigs");
            }
            this.dnsConfigs = dnsConfigs;
            return this;
        }
        public Builder dnsConfigs(GetClusterDnsConfig... dnsConfigs) {
            return dnsConfigs(List.of(dnsConfigs));
        }
        @CustomType.Setter
        public Builder effectiveLabels(Map<String,String> effectiveLabels) {
            if (effectiveLabels == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "effectiveLabels");
            }
            this.effectiveLabels = effectiveLabels;
            return this;
        }
        @CustomType.Setter
        public Builder enableAutopilot(Boolean enableAutopilot) {
            if (enableAutopilot == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "enableAutopilot");
            }
            this.enableAutopilot = enableAutopilot;
            return this;
        }
        @CustomType.Setter
        public Builder enableCiliumClusterwideNetworkPolicy(Boolean enableCiliumClusterwideNetworkPolicy) {
            if (enableCiliumClusterwideNetworkPolicy == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "enableCiliumClusterwideNetworkPolicy");
            }
            this.enableCiliumClusterwideNetworkPolicy = enableCiliumClusterwideNetworkPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder enableFqdnNetworkPolicy(Boolean enableFqdnNetworkPolicy) {
            if (enableFqdnNetworkPolicy == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "enableFqdnNetworkPolicy");
            }
            this.enableFqdnNetworkPolicy = enableFqdnNetworkPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder enableIntranodeVisibility(Boolean enableIntranodeVisibility) {
            if (enableIntranodeVisibility == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "enableIntranodeVisibility");
            }
            this.enableIntranodeVisibility = enableIntranodeVisibility;
            return this;
        }
        @CustomType.Setter
        public Builder enableK8sBetaApis(List<GetClusterEnableK8sBetaApi> enableK8sBetaApis) {
            if (enableK8sBetaApis == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "enableK8sBetaApis");
            }
            this.enableK8sBetaApis = enableK8sBetaApis;
            return this;
        }
        public Builder enableK8sBetaApis(GetClusterEnableK8sBetaApi... enableK8sBetaApis) {
            return enableK8sBetaApis(List.of(enableK8sBetaApis));
        }
        @CustomType.Setter
        public Builder enableKubernetesAlpha(Boolean enableKubernetesAlpha) {
            if (enableKubernetesAlpha == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "enableKubernetesAlpha");
            }
            this.enableKubernetesAlpha = enableKubernetesAlpha;
            return this;
        }
        @CustomType.Setter
        public Builder enableL4IlbSubsetting(Boolean enableL4IlbSubsetting) {
            if (enableL4IlbSubsetting == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "enableL4IlbSubsetting");
            }
            this.enableL4IlbSubsetting = enableL4IlbSubsetting;
            return this;
        }
        @CustomType.Setter
        public Builder enableLegacyAbac(Boolean enableLegacyAbac) {
            if (enableLegacyAbac == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "enableLegacyAbac");
            }
            this.enableLegacyAbac = enableLegacyAbac;
            return this;
        }
        @CustomType.Setter
        public Builder enableMultiNetworking(Boolean enableMultiNetworking) {
            if (enableMultiNetworking == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "enableMultiNetworking");
            }
            this.enableMultiNetworking = enableMultiNetworking;
            return this;
        }
        @CustomType.Setter
        public Builder enableShieldedNodes(Boolean enableShieldedNodes) {
            if (enableShieldedNodes == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "enableShieldedNodes");
            }
            this.enableShieldedNodes = enableShieldedNodes;
            return this;
        }
        @CustomType.Setter
        public Builder enableTpu(Boolean enableTpu) {
            if (enableTpu == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "enableTpu");
            }
            this.enableTpu = enableTpu;
            return this;
        }
        @CustomType.Setter
        public Builder endpoint(String endpoint) {
            if (endpoint == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "endpoint");
            }
            this.endpoint = endpoint;
            return this;
        }
        @CustomType.Setter
        public Builder enterpriseConfigs(List<GetClusterEnterpriseConfig> enterpriseConfigs) {
            if (enterpriseConfigs == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "enterpriseConfigs");
            }
            this.enterpriseConfigs = enterpriseConfigs;
            return this;
        }
        public Builder enterpriseConfigs(GetClusterEnterpriseConfig... enterpriseConfigs) {
            return enterpriseConfigs(List.of(enterpriseConfigs));
        }
        @CustomType.Setter
        public Builder fleets(List<GetClusterFleet> fleets) {
            if (fleets == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "fleets");
            }
            this.fleets = fleets;
            return this;
        }
        public Builder fleets(GetClusterFleet... fleets) {
            return fleets(List.of(fleets));
        }
        @CustomType.Setter
        public Builder gatewayApiConfigs(List<GetClusterGatewayApiConfig> gatewayApiConfigs) {
            if (gatewayApiConfigs == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "gatewayApiConfigs");
            }
            this.gatewayApiConfigs = gatewayApiConfigs;
            return this;
        }
        public Builder gatewayApiConfigs(GetClusterGatewayApiConfig... gatewayApiConfigs) {
            return gatewayApiConfigs(List.of(gatewayApiConfigs));
        }
        @CustomType.Setter
        public Builder gkeAutoUpgradeConfigs(List<GetClusterGkeAutoUpgradeConfig> gkeAutoUpgradeConfigs) {
            if (gkeAutoUpgradeConfigs == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "gkeAutoUpgradeConfigs");
            }
            this.gkeAutoUpgradeConfigs = gkeAutoUpgradeConfigs;
            return this;
        }
        public Builder gkeAutoUpgradeConfigs(GetClusterGkeAutoUpgradeConfig... gkeAutoUpgradeConfigs) {
            return gkeAutoUpgradeConfigs(List.of(gkeAutoUpgradeConfigs));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder identityServiceConfigs(List<GetClusterIdentityServiceConfig> identityServiceConfigs) {
            if (identityServiceConfigs == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "identityServiceConfigs");
            }
            this.identityServiceConfigs = identityServiceConfigs;
            return this;
        }
        public Builder identityServiceConfigs(GetClusterIdentityServiceConfig... identityServiceConfigs) {
            return identityServiceConfigs(List.of(identityServiceConfigs));
        }
        @CustomType.Setter
        public Builder inTransitEncryptionConfig(String inTransitEncryptionConfig) {
            if (inTransitEncryptionConfig == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "inTransitEncryptionConfig");
            }
            this.inTransitEncryptionConfig = inTransitEncryptionConfig;
            return this;
        }
        @CustomType.Setter
        public Builder initialNodeCount(Integer initialNodeCount) {
            if (initialNodeCount == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "initialNodeCount");
            }
            this.initialNodeCount = initialNodeCount;
            return this;
        }
        @CustomType.Setter
        public Builder ipAllocationPolicies(List<GetClusterIpAllocationPolicy> ipAllocationPolicies) {
            if (ipAllocationPolicies == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "ipAllocationPolicies");
            }
            this.ipAllocationPolicies = ipAllocationPolicies;
            return this;
        }
        public Builder ipAllocationPolicies(GetClusterIpAllocationPolicy... ipAllocationPolicies) {
            return ipAllocationPolicies(List.of(ipAllocationPolicies));
        }
        @CustomType.Setter
        public Builder labelFingerprint(String labelFingerprint) {
            if (labelFingerprint == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "labelFingerprint");
            }
            this.labelFingerprint = labelFingerprint;
            return this;
        }
        @CustomType.Setter
        public Builder location(@Nullable String location) {

            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder loggingConfigs(List<GetClusterLoggingConfig> loggingConfigs) {
            if (loggingConfigs == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "loggingConfigs");
            }
            this.loggingConfigs = loggingConfigs;
            return this;
        }
        public Builder loggingConfigs(GetClusterLoggingConfig... loggingConfigs) {
            return loggingConfigs(List.of(loggingConfigs));
        }
        @CustomType.Setter
        public Builder loggingService(String loggingService) {
            if (loggingService == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "loggingService");
            }
            this.loggingService = loggingService;
            return this;
        }
        @CustomType.Setter
        public Builder maintenancePolicies(List<GetClusterMaintenancePolicy> maintenancePolicies) {
            if (maintenancePolicies == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "maintenancePolicies");
            }
            this.maintenancePolicies = maintenancePolicies;
            return this;
        }
        public Builder maintenancePolicies(GetClusterMaintenancePolicy... maintenancePolicies) {
            return maintenancePolicies(List.of(maintenancePolicies));
        }
        @CustomType.Setter
        public Builder masterAuthorizedNetworksConfigs(List<GetClusterMasterAuthorizedNetworksConfig> masterAuthorizedNetworksConfigs) {
            if (masterAuthorizedNetworksConfigs == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "masterAuthorizedNetworksConfigs");
            }
            this.masterAuthorizedNetworksConfigs = masterAuthorizedNetworksConfigs;
            return this;
        }
        public Builder masterAuthorizedNetworksConfigs(GetClusterMasterAuthorizedNetworksConfig... masterAuthorizedNetworksConfigs) {
            return masterAuthorizedNetworksConfigs(List.of(masterAuthorizedNetworksConfigs));
        }
        @CustomType.Setter
        public Builder masterAuths(List<GetClusterMasterAuth> masterAuths) {
            if (masterAuths == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "masterAuths");
            }
            this.masterAuths = masterAuths;
            return this;
        }
        public Builder masterAuths(GetClusterMasterAuth... masterAuths) {
            return masterAuths(List.of(masterAuths));
        }
        @CustomType.Setter
        public Builder masterVersion(String masterVersion) {
            if (masterVersion == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "masterVersion");
            }
            this.masterVersion = masterVersion;
            return this;
        }
        @CustomType.Setter
        public Builder meshCertificates(List<GetClusterMeshCertificate> meshCertificates) {
            if (meshCertificates == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "meshCertificates");
            }
            this.meshCertificates = meshCertificates;
            return this;
        }
        public Builder meshCertificates(GetClusterMeshCertificate... meshCertificates) {
            return meshCertificates(List.of(meshCertificates));
        }
        @CustomType.Setter
        public Builder minMasterVersion(String minMasterVersion) {
            if (minMasterVersion == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "minMasterVersion");
            }
            this.minMasterVersion = minMasterVersion;
            return this;
        }
        @CustomType.Setter
        public Builder monitoringConfigs(List<GetClusterMonitoringConfig> monitoringConfigs) {
            if (monitoringConfigs == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "monitoringConfigs");
            }
            this.monitoringConfigs = monitoringConfigs;
            return this;
        }
        public Builder monitoringConfigs(GetClusterMonitoringConfig... monitoringConfigs) {
            return monitoringConfigs(List.of(monitoringConfigs));
        }
        @CustomType.Setter
        public Builder monitoringService(String monitoringService) {
            if (monitoringService == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "monitoringService");
            }
            this.monitoringService = monitoringService;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder network(String network) {
            if (network == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "network");
            }
            this.network = network;
            return this;
        }
        @CustomType.Setter
        public Builder networkPerformanceConfigs(List<GetClusterNetworkPerformanceConfig> networkPerformanceConfigs) {
            if (networkPerformanceConfigs == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "networkPerformanceConfigs");
            }
            this.networkPerformanceConfigs = networkPerformanceConfigs;
            return this;
        }
        public Builder networkPerformanceConfigs(GetClusterNetworkPerformanceConfig... networkPerformanceConfigs) {
            return networkPerformanceConfigs(List.of(networkPerformanceConfigs));
        }
        @CustomType.Setter
        public Builder networkPolicies(List<GetClusterNetworkPolicy> networkPolicies) {
            if (networkPolicies == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "networkPolicies");
            }
            this.networkPolicies = networkPolicies;
            return this;
        }
        public Builder networkPolicies(GetClusterNetworkPolicy... networkPolicies) {
            return networkPolicies(List.of(networkPolicies));
        }
        @CustomType.Setter
        public Builder networkingMode(String networkingMode) {
            if (networkingMode == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "networkingMode");
            }
            this.networkingMode = networkingMode;
            return this;
        }
        @CustomType.Setter
        public Builder nodeConfigs(List<GetClusterNodeConfig> nodeConfigs) {
            if (nodeConfigs == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "nodeConfigs");
            }
            this.nodeConfigs = nodeConfigs;
            return this;
        }
        public Builder nodeConfigs(GetClusterNodeConfig... nodeConfigs) {
            return nodeConfigs(List.of(nodeConfigs));
        }
        @CustomType.Setter
        public Builder nodeLocations(List<String> nodeLocations) {
            if (nodeLocations == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "nodeLocations");
            }
            this.nodeLocations = nodeLocations;
            return this;
        }
        public Builder nodeLocations(String... nodeLocations) {
            return nodeLocations(List.of(nodeLocations));
        }
        @CustomType.Setter
        public Builder nodePoolAutoConfigs(List<GetClusterNodePoolAutoConfig> nodePoolAutoConfigs) {
            if (nodePoolAutoConfigs == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "nodePoolAutoConfigs");
            }
            this.nodePoolAutoConfigs = nodePoolAutoConfigs;
            return this;
        }
        public Builder nodePoolAutoConfigs(GetClusterNodePoolAutoConfig... nodePoolAutoConfigs) {
            return nodePoolAutoConfigs(List.of(nodePoolAutoConfigs));
        }
        @CustomType.Setter
        public Builder nodePoolDefaults(List<GetClusterNodePoolDefault> nodePoolDefaults) {
            if (nodePoolDefaults == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "nodePoolDefaults");
            }
            this.nodePoolDefaults = nodePoolDefaults;
            return this;
        }
        public Builder nodePoolDefaults(GetClusterNodePoolDefault... nodePoolDefaults) {
            return nodePoolDefaults(List.of(nodePoolDefaults));
        }
        @CustomType.Setter
        public Builder nodePools(List<GetClusterNodePool> nodePools) {
            if (nodePools == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "nodePools");
            }
            this.nodePools = nodePools;
            return this;
        }
        public Builder nodePools(GetClusterNodePool... nodePools) {
            return nodePools(List.of(nodePools));
        }
        @CustomType.Setter
        public Builder nodeVersion(String nodeVersion) {
            if (nodeVersion == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "nodeVersion");
            }
            this.nodeVersion = nodeVersion;
            return this;
        }
        @CustomType.Setter
        public Builder notificationConfigs(List<GetClusterNotificationConfig> notificationConfigs) {
            if (notificationConfigs == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "notificationConfigs");
            }
            this.notificationConfigs = notificationConfigs;
            return this;
        }
        public Builder notificationConfigs(GetClusterNotificationConfig... notificationConfigs) {
            return notificationConfigs(List.of(notificationConfigs));
        }
        @CustomType.Setter
        public Builder operation(String operation) {
            if (operation == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "operation");
            }
            this.operation = operation;
            return this;
        }
        @CustomType.Setter
        public Builder podAutoscalings(List<GetClusterPodAutoscaling> podAutoscalings) {
            if (podAutoscalings == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "podAutoscalings");
            }
            this.podAutoscalings = podAutoscalings;
            return this;
        }
        public Builder podAutoscalings(GetClusterPodAutoscaling... podAutoscalings) {
            return podAutoscalings(List.of(podAutoscalings));
        }
        @CustomType.Setter
        public Builder podSecurityPolicyConfigs(List<GetClusterPodSecurityPolicyConfig> podSecurityPolicyConfigs) {
            if (podSecurityPolicyConfigs == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "podSecurityPolicyConfigs");
            }
            this.podSecurityPolicyConfigs = podSecurityPolicyConfigs;
            return this;
        }
        public Builder podSecurityPolicyConfigs(GetClusterPodSecurityPolicyConfig... podSecurityPolicyConfigs) {
            return podSecurityPolicyConfigs(List.of(podSecurityPolicyConfigs));
        }
        @CustomType.Setter
        public Builder privateClusterConfigs(List<GetClusterPrivateClusterConfig> privateClusterConfigs) {
            if (privateClusterConfigs == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "privateClusterConfigs");
            }
            this.privateClusterConfigs = privateClusterConfigs;
            return this;
        }
        public Builder privateClusterConfigs(GetClusterPrivateClusterConfig... privateClusterConfigs) {
            return privateClusterConfigs(List.of(privateClusterConfigs));
        }
        @CustomType.Setter
        public Builder privateIpv6GoogleAccess(String privateIpv6GoogleAccess) {
            if (privateIpv6GoogleAccess == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "privateIpv6GoogleAccess");
            }
            this.privateIpv6GoogleAccess = privateIpv6GoogleAccess;
            return this;
        }
        @CustomType.Setter
        public Builder project(@Nullable String project) {

            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder protectConfigs(List<GetClusterProtectConfig> protectConfigs) {
            if (protectConfigs == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "protectConfigs");
            }
            this.protectConfigs = protectConfigs;
            return this;
        }
        public Builder protectConfigs(GetClusterProtectConfig... protectConfigs) {
            return protectConfigs(List.of(protectConfigs));
        }
        @CustomType.Setter
        public Builder pulumiLabels(Map<String,String> pulumiLabels) {
            if (pulumiLabels == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "pulumiLabels");
            }
            this.pulumiLabels = pulumiLabels;
            return this;
        }
        @CustomType.Setter
        public Builder rbacBindingConfigs(List<GetClusterRbacBindingConfig> rbacBindingConfigs) {
            if (rbacBindingConfigs == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "rbacBindingConfigs");
            }
            this.rbacBindingConfigs = rbacBindingConfigs;
            return this;
        }
        public Builder rbacBindingConfigs(GetClusterRbacBindingConfig... rbacBindingConfigs) {
            return rbacBindingConfigs(List.of(rbacBindingConfigs));
        }
        @CustomType.Setter
        public Builder releaseChannels(List<GetClusterReleaseChannel> releaseChannels) {
            if (releaseChannels == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "releaseChannels");
            }
            this.releaseChannels = releaseChannels;
            return this;
        }
        public Builder releaseChannels(GetClusterReleaseChannel... releaseChannels) {
            return releaseChannels(List.of(releaseChannels));
        }
        @CustomType.Setter
        public Builder removeDefaultNodePool(Boolean removeDefaultNodePool) {
            if (removeDefaultNodePool == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "removeDefaultNodePool");
            }
            this.removeDefaultNodePool = removeDefaultNodePool;
            return this;
        }
        @CustomType.Setter
        public Builder resourceLabels(Map<String,String> resourceLabels) {
            if (resourceLabels == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "resourceLabels");
            }
            this.resourceLabels = resourceLabels;
            return this;
        }
        @CustomType.Setter
        public Builder resourceUsageExportConfigs(List<GetClusterResourceUsageExportConfig> resourceUsageExportConfigs) {
            if (resourceUsageExportConfigs == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "resourceUsageExportConfigs");
            }
            this.resourceUsageExportConfigs = resourceUsageExportConfigs;
            return this;
        }
        public Builder resourceUsageExportConfigs(GetClusterResourceUsageExportConfig... resourceUsageExportConfigs) {
            return resourceUsageExportConfigs(List.of(resourceUsageExportConfigs));
        }
        @CustomType.Setter
        public Builder secretManagerConfigs(List<GetClusterSecretManagerConfig> secretManagerConfigs) {
            if (secretManagerConfigs == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "secretManagerConfigs");
            }
            this.secretManagerConfigs = secretManagerConfigs;
            return this;
        }
        public Builder secretManagerConfigs(GetClusterSecretManagerConfig... secretManagerConfigs) {
            return secretManagerConfigs(List.of(secretManagerConfigs));
        }
        @CustomType.Setter
        public Builder securityPostureConfigs(List<GetClusterSecurityPostureConfig> securityPostureConfigs) {
            if (securityPostureConfigs == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "securityPostureConfigs");
            }
            this.securityPostureConfigs = securityPostureConfigs;
            return this;
        }
        public Builder securityPostureConfigs(GetClusterSecurityPostureConfig... securityPostureConfigs) {
            return securityPostureConfigs(List.of(securityPostureConfigs));
        }
        @CustomType.Setter
        public Builder selfLink(String selfLink) {
            if (selfLink == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "selfLink");
            }
            this.selfLink = selfLink;
            return this;
        }
        @CustomType.Setter
        public Builder serviceExternalIpsConfigs(List<GetClusterServiceExternalIpsConfig> serviceExternalIpsConfigs) {
            if (serviceExternalIpsConfigs == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "serviceExternalIpsConfigs");
            }
            this.serviceExternalIpsConfigs = serviceExternalIpsConfigs;
            return this;
        }
        public Builder serviceExternalIpsConfigs(GetClusterServiceExternalIpsConfig... serviceExternalIpsConfigs) {
            return serviceExternalIpsConfigs(List.of(serviceExternalIpsConfigs));
        }
        @CustomType.Setter
        public Builder servicesIpv4Cidr(String servicesIpv4Cidr) {
            if (servicesIpv4Cidr == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "servicesIpv4Cidr");
            }
            this.servicesIpv4Cidr = servicesIpv4Cidr;
            return this;
        }
        @CustomType.Setter
        public Builder subnetwork(String subnetwork) {
            if (subnetwork == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "subnetwork");
            }
            this.subnetwork = subnetwork;
            return this;
        }
        @CustomType.Setter
        public Builder tpuConfigs(List<GetClusterTpuConfig> tpuConfigs) {
            if (tpuConfigs == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "tpuConfigs");
            }
            this.tpuConfigs = tpuConfigs;
            return this;
        }
        public Builder tpuConfigs(GetClusterTpuConfig... tpuConfigs) {
            return tpuConfigs(List.of(tpuConfigs));
        }
        @CustomType.Setter
        public Builder tpuIpv4CidrBlock(String tpuIpv4CidrBlock) {
            if (tpuIpv4CidrBlock == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "tpuIpv4CidrBlock");
            }
            this.tpuIpv4CidrBlock = tpuIpv4CidrBlock;
            return this;
        }
        @CustomType.Setter
        public Builder userManagedKeysConfigs(List<GetClusterUserManagedKeysConfig> userManagedKeysConfigs) {
            if (userManagedKeysConfigs == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "userManagedKeysConfigs");
            }
            this.userManagedKeysConfigs = userManagedKeysConfigs;
            return this;
        }
        public Builder userManagedKeysConfigs(GetClusterUserManagedKeysConfig... userManagedKeysConfigs) {
            return userManagedKeysConfigs(List.of(userManagedKeysConfigs));
        }
        @CustomType.Setter
        public Builder verticalPodAutoscalings(List<GetClusterVerticalPodAutoscaling> verticalPodAutoscalings) {
            if (verticalPodAutoscalings == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "verticalPodAutoscalings");
            }
            this.verticalPodAutoscalings = verticalPodAutoscalings;
            return this;
        }
        public Builder verticalPodAutoscalings(GetClusterVerticalPodAutoscaling... verticalPodAutoscalings) {
            return verticalPodAutoscalings(List.of(verticalPodAutoscalings));
        }
        @CustomType.Setter
        public Builder workloadAltsConfigs(List<GetClusterWorkloadAltsConfig> workloadAltsConfigs) {
            if (workloadAltsConfigs == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "workloadAltsConfigs");
            }
            this.workloadAltsConfigs = workloadAltsConfigs;
            return this;
        }
        public Builder workloadAltsConfigs(GetClusterWorkloadAltsConfig... workloadAltsConfigs) {
            return workloadAltsConfigs(List.of(workloadAltsConfigs));
        }
        @CustomType.Setter
        public Builder workloadIdentityConfigs(List<GetClusterWorkloadIdentityConfig> workloadIdentityConfigs) {
            if (workloadIdentityConfigs == null) {
              throw new MissingRequiredPropertyException("GetClusterResult", "workloadIdentityConfigs");
            }
            this.workloadIdentityConfigs = workloadIdentityConfigs;
            return this;
        }
        public Builder workloadIdentityConfigs(GetClusterWorkloadIdentityConfig... workloadIdentityConfigs) {
            return workloadIdentityConfigs(List.of(workloadIdentityConfigs));
        }
        public GetClusterResult build() {
            final var _resultValue = new GetClusterResult();
            _resultValue.addonsConfigs = addonsConfigs;
            _resultValue.allowNetAdmin = allowNetAdmin;
            _resultValue.anonymousAuthenticationConfigs = anonymousAuthenticationConfigs;
            _resultValue.authenticatorGroupsConfigs = authenticatorGroupsConfigs;
            _resultValue.binaryAuthorizations = binaryAuthorizations;
            _resultValue.clusterAutoscalings = clusterAutoscalings;
            _resultValue.clusterIpv4Cidr = clusterIpv4Cidr;
            _resultValue.clusterTelemetries = clusterTelemetries;
            _resultValue.confidentialNodes = confidentialNodes;
            _resultValue.controlPlaneEndpointsConfigs = controlPlaneEndpointsConfigs;
            _resultValue.costManagementConfigs = costManagementConfigs;
            _resultValue.databaseEncryptions = databaseEncryptions;
            _resultValue.datapathProvider = datapathProvider;
            _resultValue.defaultMaxPodsPerNode = defaultMaxPodsPerNode;
            _resultValue.defaultSnatStatuses = defaultSnatStatuses;
            _resultValue.deletionProtection = deletionProtection;
            _resultValue.description = description;
            _resultValue.disableL4LbFirewallReconciliation = disableL4LbFirewallReconciliation;
            _resultValue.dnsConfigs = dnsConfigs;
            _resultValue.effectiveLabels = effectiveLabels;
            _resultValue.enableAutopilot = enableAutopilot;
            _resultValue.enableCiliumClusterwideNetworkPolicy = enableCiliumClusterwideNetworkPolicy;
            _resultValue.enableFqdnNetworkPolicy = enableFqdnNetworkPolicy;
            _resultValue.enableIntranodeVisibility = enableIntranodeVisibility;
            _resultValue.enableK8sBetaApis = enableK8sBetaApis;
            _resultValue.enableKubernetesAlpha = enableKubernetesAlpha;
            _resultValue.enableL4IlbSubsetting = enableL4IlbSubsetting;
            _resultValue.enableLegacyAbac = enableLegacyAbac;
            _resultValue.enableMultiNetworking = enableMultiNetworking;
            _resultValue.enableShieldedNodes = enableShieldedNodes;
            _resultValue.enableTpu = enableTpu;
            _resultValue.endpoint = endpoint;
            _resultValue.enterpriseConfigs = enterpriseConfigs;
            _resultValue.fleets = fleets;
            _resultValue.gatewayApiConfigs = gatewayApiConfigs;
            _resultValue.gkeAutoUpgradeConfigs = gkeAutoUpgradeConfigs;
            _resultValue.id = id;
            _resultValue.identityServiceConfigs = identityServiceConfigs;
            _resultValue.inTransitEncryptionConfig = inTransitEncryptionConfig;
            _resultValue.initialNodeCount = initialNodeCount;
            _resultValue.ipAllocationPolicies = ipAllocationPolicies;
            _resultValue.labelFingerprint = labelFingerprint;
            _resultValue.location = location;
            _resultValue.loggingConfigs = loggingConfigs;
            _resultValue.loggingService = loggingService;
            _resultValue.maintenancePolicies = maintenancePolicies;
            _resultValue.masterAuthorizedNetworksConfigs = masterAuthorizedNetworksConfigs;
            _resultValue.masterAuths = masterAuths;
            _resultValue.masterVersion = masterVersion;
            _resultValue.meshCertificates = meshCertificates;
            _resultValue.minMasterVersion = minMasterVersion;
            _resultValue.monitoringConfigs = monitoringConfigs;
            _resultValue.monitoringService = monitoringService;
            _resultValue.name = name;
            _resultValue.network = network;
            _resultValue.networkPerformanceConfigs = networkPerformanceConfigs;
            _resultValue.networkPolicies = networkPolicies;
            _resultValue.networkingMode = networkingMode;
            _resultValue.nodeConfigs = nodeConfigs;
            _resultValue.nodeLocations = nodeLocations;
            _resultValue.nodePoolAutoConfigs = nodePoolAutoConfigs;
            _resultValue.nodePoolDefaults = nodePoolDefaults;
            _resultValue.nodePools = nodePools;
            _resultValue.nodeVersion = nodeVersion;
            _resultValue.notificationConfigs = notificationConfigs;
            _resultValue.operation = operation;
            _resultValue.podAutoscalings = podAutoscalings;
            _resultValue.podSecurityPolicyConfigs = podSecurityPolicyConfigs;
            _resultValue.privateClusterConfigs = privateClusterConfigs;
            _resultValue.privateIpv6GoogleAccess = privateIpv6GoogleAccess;
            _resultValue.project = project;
            _resultValue.protectConfigs = protectConfigs;
            _resultValue.pulumiLabels = pulumiLabels;
            _resultValue.rbacBindingConfigs = rbacBindingConfigs;
            _resultValue.releaseChannels = releaseChannels;
            _resultValue.removeDefaultNodePool = removeDefaultNodePool;
            _resultValue.resourceLabels = resourceLabels;
            _resultValue.resourceUsageExportConfigs = resourceUsageExportConfigs;
            _resultValue.secretManagerConfigs = secretManagerConfigs;
            _resultValue.securityPostureConfigs = securityPostureConfigs;
            _resultValue.selfLink = selfLink;
            _resultValue.serviceExternalIpsConfigs = serviceExternalIpsConfigs;
            _resultValue.servicesIpv4Cidr = servicesIpv4Cidr;
            _resultValue.subnetwork = subnetwork;
            _resultValue.tpuConfigs = tpuConfigs;
            _resultValue.tpuIpv4CidrBlock = tpuIpv4CidrBlock;
            _resultValue.userManagedKeysConfigs = userManagedKeysConfigs;
            _resultValue.verticalPodAutoscalings = verticalPodAutoscalings;
            _resultValue.workloadAltsConfigs = workloadAltsConfigs;
            _resultValue.workloadIdentityConfigs = workloadIdentityConfigs;
            return _resultValue;
        }
    }
}
