// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.accesscontextmanager;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.accesscontextmanager.inputs.ServicePerimetersServicePerimeterArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServicePerimetersArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServicePerimetersArgs Empty = new ServicePerimetersArgs();

    /**
     * The AccessPolicy this ServicePerimeter lives in.
     * Format: accessPolicies/{policy_id}
     * 
     */
    @Import(name="parent", required=true)
    private Output<String> parent;

    /**
     * @return The AccessPolicy this ServicePerimeter lives in.
     * Format: accessPolicies/{policy_id}
     * 
     */
    public Output<String> parent() {
        return this.parent;
    }

    /**
     * The desired Service Perimeters that should replace all existing Service Perimeters in the Access Policy.
     * Structure is documented below.
     * 
     */
    @Import(name="servicePerimeters")
    private @Nullable Output<List<ServicePerimetersServicePerimeterArgs>> servicePerimeters;

    /**
     * @return The desired Service Perimeters that should replace all existing Service Perimeters in the Access Policy.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<ServicePerimetersServicePerimeterArgs>>> servicePerimeters() {
        return Optional.ofNullable(this.servicePerimeters);
    }

    private ServicePerimetersArgs() {}

    private ServicePerimetersArgs(ServicePerimetersArgs $) {
        this.parent = $.parent;
        this.servicePerimeters = $.servicePerimeters;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServicePerimetersArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServicePerimetersArgs $;

        public Builder() {
            $ = new ServicePerimetersArgs();
        }

        public Builder(ServicePerimetersArgs defaults) {
            $ = new ServicePerimetersArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param parent The AccessPolicy this ServicePerimeter lives in.
         * Format: accessPolicies/{policy_id}
         * 
         * @return builder
         * 
         */
        public Builder parent(Output<String> parent) {
            $.parent = parent;
            return this;
        }

        /**
         * @param parent The AccessPolicy this ServicePerimeter lives in.
         * Format: accessPolicies/{policy_id}
         * 
         * @return builder
         * 
         */
        public Builder parent(String parent) {
            return parent(Output.of(parent));
        }

        /**
         * @param servicePerimeters The desired Service Perimeters that should replace all existing Service Perimeters in the Access Policy.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder servicePerimeters(@Nullable Output<List<ServicePerimetersServicePerimeterArgs>> servicePerimeters) {
            $.servicePerimeters = servicePerimeters;
            return this;
        }

        /**
         * @param servicePerimeters The desired Service Perimeters that should replace all existing Service Perimeters in the Access Policy.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder servicePerimeters(List<ServicePerimetersServicePerimeterArgs> servicePerimeters) {
            return servicePerimeters(Output.of(servicePerimeters));
        }

        /**
         * @param servicePerimeters The desired Service Perimeters that should replace all existing Service Perimeters in the Access Policy.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder servicePerimeters(ServicePerimetersServicePerimeterArgs... servicePerimeters) {
            return servicePerimeters(List.of(servicePerimeters));
        }

        public ServicePerimetersArgs build() {
            $.parent = Objects.requireNonNull($.parent, "expected parameter 'parent' to be non-null");
            return $;
        }
    }

}
