// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudasset.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetSearchAllResourcesResult {
    /**
     * @return The type of this resource.
     * 
     */
    private String assetType;
    /**
     * @return The create timestamp of this resource, at which the resource was created.
     * 
     */
    private String createTime;
    /**
     * @return One or more paragraphs of text description of this resource. Maximum length could be up to 1M bytes.
     * 
     */
    private String description;
    /**
     * @return The display name of this resource.
     * 
     */
    private String displayName;
    /**
     * @return The folder(s) that this resource belongs to, in the form of `folders/{FOLDER_NUMBER}`. This field is available when the resource belongs to one or more folders.
     * 
     */
    private List<String> folders;
    /**
     * @return The Cloud KMS CryptoKey names or CryptoKeyVersion names. This field is available only when the resource&#39;s Protobuf contains it.
     * 
     */
    private List<String> kmsKeys;
    /**
     * @return Labels associated with this resource.
     * 
     */
    private Map<String,String> labels;
    /**
     * @return Location can be `global`, regional like `us-east1`, or zonal like `us-west1-b`.
     * 
     */
    private String location;
    /**
     * @return The full resource name of this resource.. See [Resource Names](https://cloud.google.com/apis/design/resource_names#full_resource_name) for more information.
     * 
     */
    private String name;
    /**
     * @return Network tags associated with this resource.
     * 
     */
    private List<String> networkTags;
    /**
     * @return The organization that this resource belongs to, in the form of `organizations/{ORGANIZATION_NUMBER}`. This field is available when the resource belongs to an organization.
     * 
     */
    private String organization;
    /**
     * @return The type of this resource&#39;s immediate parent, if there is one.
     * 
     */
    private String parentAssetType;
    /**
     * @return The full resource name of this resource&#39;s parent, if it has one.
     * 
     */
    private String parentFullResourceName;
    /**
     * @return The project that this resource belongs to, in the form of `projects/{project_number}`.
     * 
     */
    private String project;
    /**
     * @return The state of this resource.
     * 
     */
    private String state;
    /**
     * @return The last update timestamp of this resource, at which the resource was last modified or deleted.
     * 
     */
    private String updateTime;

    private GetSearchAllResourcesResult() {}
    /**
     * @return The type of this resource.
     * 
     */
    public String assetType() {
        return this.assetType;
    }
    /**
     * @return The create timestamp of this resource, at which the resource was created.
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return One or more paragraphs of text description of this resource. Maximum length could be up to 1M bytes.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The display name of this resource.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return The folder(s) that this resource belongs to, in the form of `folders/{FOLDER_NUMBER}`. This field is available when the resource belongs to one or more folders.
     * 
     */
    public List<String> folders() {
        return this.folders;
    }
    /**
     * @return The Cloud KMS CryptoKey names or CryptoKeyVersion names. This field is available only when the resource&#39;s Protobuf contains it.
     * 
     */
    public List<String> kmsKeys() {
        return this.kmsKeys;
    }
    /**
     * @return Labels associated with this resource.
     * 
     */
    public Map<String,String> labels() {
        return this.labels;
    }
    /**
     * @return Location can be `global`, regional like `us-east1`, or zonal like `us-west1-b`.
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return The full resource name of this resource.. See [Resource Names](https://cloud.google.com/apis/design/resource_names#full_resource_name) for more information.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Network tags associated with this resource.
     * 
     */
    public List<String> networkTags() {
        return this.networkTags;
    }
    /**
     * @return The organization that this resource belongs to, in the form of `organizations/{ORGANIZATION_NUMBER}`. This field is available when the resource belongs to an organization.
     * 
     */
    public String organization() {
        return this.organization;
    }
    /**
     * @return The type of this resource&#39;s immediate parent, if there is one.
     * 
     */
    public String parentAssetType() {
        return this.parentAssetType;
    }
    /**
     * @return The full resource name of this resource&#39;s parent, if it has one.
     * 
     */
    public String parentFullResourceName() {
        return this.parentFullResourceName;
    }
    /**
     * @return The project that this resource belongs to, in the form of `projects/{project_number}`.
     * 
     */
    public String project() {
        return this.project;
    }
    /**
     * @return The state of this resource.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The last update timestamp of this resource, at which the resource was last modified or deleted.
     * 
     */
    public String updateTime() {
        return this.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSearchAllResourcesResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String assetType;
        private String createTime;
        private String description;
        private String displayName;
        private List<String> folders;
        private List<String> kmsKeys;
        private Map<String,String> labels;
        private String location;
        private String name;
        private List<String> networkTags;
        private String organization;
        private String parentAssetType;
        private String parentFullResourceName;
        private String project;
        private String state;
        private String updateTime;
        public Builder() {}
        public Builder(GetSearchAllResourcesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.assetType = defaults.assetType;
    	      this.createTime = defaults.createTime;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.folders = defaults.folders;
    	      this.kmsKeys = defaults.kmsKeys;
    	      this.labels = defaults.labels;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.networkTags = defaults.networkTags;
    	      this.organization = defaults.organization;
    	      this.parentAssetType = defaults.parentAssetType;
    	      this.parentFullResourceName = defaults.parentFullResourceName;
    	      this.project = defaults.project;
    	      this.state = defaults.state;
    	      this.updateTime = defaults.updateTime;
        }

        @CustomType.Setter
        public Builder assetType(String assetType) {
            if (assetType == null) {
              throw new MissingRequiredPropertyException("GetSearchAllResourcesResult", "assetType");
            }
            this.assetType = assetType;
            return this;
        }
        @CustomType.Setter
        public Builder createTime(String createTime) {
            if (createTime == null) {
              throw new MissingRequiredPropertyException("GetSearchAllResourcesResult", "createTime");
            }
            this.createTime = createTime;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetSearchAllResourcesResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetSearchAllResourcesResult", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder folders(List<String> folders) {
            if (folders == null) {
              throw new MissingRequiredPropertyException("GetSearchAllResourcesResult", "folders");
            }
            this.folders = folders;
            return this;
        }
        public Builder folders(String... folders) {
            return folders(List.of(folders));
        }
        @CustomType.Setter
        public Builder kmsKeys(List<String> kmsKeys) {
            if (kmsKeys == null) {
              throw new MissingRequiredPropertyException("GetSearchAllResourcesResult", "kmsKeys");
            }
            this.kmsKeys = kmsKeys;
            return this;
        }
        public Builder kmsKeys(String... kmsKeys) {
            return kmsKeys(List.of(kmsKeys));
        }
        @CustomType.Setter
        public Builder labels(Map<String,String> labels) {
            if (labels == null) {
              throw new MissingRequiredPropertyException("GetSearchAllResourcesResult", "labels");
            }
            this.labels = labels;
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetSearchAllResourcesResult", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetSearchAllResourcesResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder networkTags(List<String> networkTags) {
            if (networkTags == null) {
              throw new MissingRequiredPropertyException("GetSearchAllResourcesResult", "networkTags");
            }
            this.networkTags = networkTags;
            return this;
        }
        public Builder networkTags(String... networkTags) {
            return networkTags(List.of(networkTags));
        }
        @CustomType.Setter
        public Builder organization(String organization) {
            if (organization == null) {
              throw new MissingRequiredPropertyException("GetSearchAllResourcesResult", "organization");
            }
            this.organization = organization;
            return this;
        }
        @CustomType.Setter
        public Builder parentAssetType(String parentAssetType) {
            if (parentAssetType == null) {
              throw new MissingRequiredPropertyException("GetSearchAllResourcesResult", "parentAssetType");
            }
            this.parentAssetType = parentAssetType;
            return this;
        }
        @CustomType.Setter
        public Builder parentFullResourceName(String parentFullResourceName) {
            if (parentFullResourceName == null) {
              throw new MissingRequiredPropertyException("GetSearchAllResourcesResult", "parentFullResourceName");
            }
            this.parentFullResourceName = parentFullResourceName;
            return this;
        }
        @CustomType.Setter
        public Builder project(String project) {
            if (project == null) {
              throw new MissingRequiredPropertyException("GetSearchAllResourcesResult", "project");
            }
            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetSearchAllResourcesResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder updateTime(String updateTime) {
            if (updateTime == null) {
              throw new MissingRequiredPropertyException("GetSearchAllResourcesResult", "updateTime");
            }
            this.updateTime = updateTime;
            return this;
        }
        public GetSearchAllResourcesResult build() {
            final var _resultValue = new GetSearchAllResourcesResult();
            _resultValue.assetType = assetType;
            _resultValue.createTime = createTime;
            _resultValue.description = description;
            _resultValue.displayName = displayName;
            _resultValue.folders = folders;
            _resultValue.kmsKeys = kmsKeys;
            _resultValue.labels = labels;
            _resultValue.location = location;
            _resultValue.name = name;
            _resultValue.networkTags = networkTags;
            _resultValue.organization = organization;
            _resultValue.parentAssetType = parentAssetType;
            _resultValue.parentFullResourceName = parentFullResourceName;
            _resultValue.project = project;
            _resultValue.state = state;
            _resultValue.updateTime = updateTime;
            return _resultValue;
        }
    }
}
