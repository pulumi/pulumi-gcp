// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudfunctionsv2.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.cloudfunctionsv2.outputs.GetFunctionServiceConfigSecretEnvironmentVariable;
import com.pulumi.gcp.cloudfunctionsv2.outputs.GetFunctionServiceConfigSecretVolume;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetFunctionServiceConfig {
    /**
     * @return Whether 100%!o(MISSING)f traffic is routed to the latest revision. Defaults to true.
     * 
     */
    private Boolean allTrafficOnLatestRevision;
    /**
     * @return The number of CPUs used in a single container instance. Default value is calculated from available memory.
     * 
     */
    private String availableCpu;
    /**
     * @return The amount of memory available for a function.
     * Defaults to 256M. Supported units are k, M, G, Mi, Gi. If no unit is
     * supplied the value is interpreted as bytes.
     * 
     */
    private String availableMemory;
    /**
     * @return Environment variables that shall be available during function execution.
     * 
     */
    private Map<String,String> environmentVariables;
    /**
     * @return URIs of the Service deployed
     * 
     */
    private String gcfUri;
    /**
     * @return Available ingress settings. Defaults to &#34;ALLOW_ALL&#34; if unspecified. Default value: &#34;ALLOW_ALL&#34; Possible values: [&#34;ALLOW_ALL&#34;, &#34;ALLOW_INTERNAL_ONLY&#34;, &#34;ALLOW_INTERNAL_AND_GCLB&#34;]
     * 
     */
    private String ingressSettings;
    /**
     * @return The limit on the maximum number of function instances that may coexist at a
     * given time.
     * 
     */
    private Integer maxInstanceCount;
    /**
     * @return Sets the maximum number of concurrent requests that each instance can receive. Defaults to 1.
     * 
     */
    private Integer maxInstanceRequestConcurrency;
    /**
     * @return The limit on the minimum number of function instances that may coexist at a
     * given time.
     * 
     */
    private Integer minInstanceCount;
    /**
     * @return Secret environment variables configuration.
     * 
     */
    private List<GetFunctionServiceConfigSecretEnvironmentVariable> secretEnvironmentVariables;
    /**
     * @return Secret volumes configuration.
     * 
     */
    private List<GetFunctionServiceConfigSecretVolume> secretVolumes;
    /**
     * @return Name of the service associated with a Function.
     * 
     */
    private String service;
    /**
     * @return The email of the service account for this function.
     * 
     */
    private String serviceAccountEmail;
    /**
     * @return The function execution timeout. Execution is considered failed and
     * can be terminated if the function is not completed at the end of the
     * timeout period. Defaults to 60 seconds.
     * 
     */
    private Integer timeoutSeconds;
    /**
     * @return URI of the Service deployed.
     * 
     */
    private String uri;
    /**
     * @return The Serverless VPC Access connector that this cloud function can connect to.
     * 
     */
    private String vpcConnector;
    /**
     * @return Available egress settings. Possible values: [&#34;VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED&#34;, &#34;PRIVATE_RANGES_ONLY&#34;, &#34;ALL_TRAFFIC&#34;]
     * 
     */
    private String vpcConnectorEgressSettings;

    private GetFunctionServiceConfig() {}
    /**
     * @return Whether 100%!o(MISSING)f traffic is routed to the latest revision. Defaults to true.
     * 
     */
    public Boolean allTrafficOnLatestRevision() {
        return this.allTrafficOnLatestRevision;
    }
    /**
     * @return The number of CPUs used in a single container instance. Default value is calculated from available memory.
     * 
     */
    public String availableCpu() {
        return this.availableCpu;
    }
    /**
     * @return The amount of memory available for a function.
     * Defaults to 256M. Supported units are k, M, G, Mi, Gi. If no unit is
     * supplied the value is interpreted as bytes.
     * 
     */
    public String availableMemory() {
        return this.availableMemory;
    }
    /**
     * @return Environment variables that shall be available during function execution.
     * 
     */
    public Map<String,String> environmentVariables() {
        return this.environmentVariables;
    }
    /**
     * @return URIs of the Service deployed
     * 
     */
    public String gcfUri() {
        return this.gcfUri;
    }
    /**
     * @return Available ingress settings. Defaults to &#34;ALLOW_ALL&#34; if unspecified. Default value: &#34;ALLOW_ALL&#34; Possible values: [&#34;ALLOW_ALL&#34;, &#34;ALLOW_INTERNAL_ONLY&#34;, &#34;ALLOW_INTERNAL_AND_GCLB&#34;]
     * 
     */
    public String ingressSettings() {
        return this.ingressSettings;
    }
    /**
     * @return The limit on the maximum number of function instances that may coexist at a
     * given time.
     * 
     */
    public Integer maxInstanceCount() {
        return this.maxInstanceCount;
    }
    /**
     * @return Sets the maximum number of concurrent requests that each instance can receive. Defaults to 1.
     * 
     */
    public Integer maxInstanceRequestConcurrency() {
        return this.maxInstanceRequestConcurrency;
    }
    /**
     * @return The limit on the minimum number of function instances that may coexist at a
     * given time.
     * 
     */
    public Integer minInstanceCount() {
        return this.minInstanceCount;
    }
    /**
     * @return Secret environment variables configuration.
     * 
     */
    public List<GetFunctionServiceConfigSecretEnvironmentVariable> secretEnvironmentVariables() {
        return this.secretEnvironmentVariables;
    }
    /**
     * @return Secret volumes configuration.
     * 
     */
    public List<GetFunctionServiceConfigSecretVolume> secretVolumes() {
        return this.secretVolumes;
    }
    /**
     * @return Name of the service associated with a Function.
     * 
     */
    public String service() {
        return this.service;
    }
    /**
     * @return The email of the service account for this function.
     * 
     */
    public String serviceAccountEmail() {
        return this.serviceAccountEmail;
    }
    /**
     * @return The function execution timeout. Execution is considered failed and
     * can be terminated if the function is not completed at the end of the
     * timeout period. Defaults to 60 seconds.
     * 
     */
    public Integer timeoutSeconds() {
        return this.timeoutSeconds;
    }
    /**
     * @return URI of the Service deployed.
     * 
     */
    public String uri() {
        return this.uri;
    }
    /**
     * @return The Serverless VPC Access connector that this cloud function can connect to.
     * 
     */
    public String vpcConnector() {
        return this.vpcConnector;
    }
    /**
     * @return Available egress settings. Possible values: [&#34;VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED&#34;, &#34;PRIVATE_RANGES_ONLY&#34;, &#34;ALL_TRAFFIC&#34;]
     * 
     */
    public String vpcConnectorEgressSettings() {
        return this.vpcConnectorEgressSettings;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetFunctionServiceConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean allTrafficOnLatestRevision;
        private String availableCpu;
        private String availableMemory;
        private Map<String,String> environmentVariables;
        private String gcfUri;
        private String ingressSettings;
        private Integer maxInstanceCount;
        private Integer maxInstanceRequestConcurrency;
        private Integer minInstanceCount;
        private List<GetFunctionServiceConfigSecretEnvironmentVariable> secretEnvironmentVariables;
        private List<GetFunctionServiceConfigSecretVolume> secretVolumes;
        private String service;
        private String serviceAccountEmail;
        private Integer timeoutSeconds;
        private String uri;
        private String vpcConnector;
        private String vpcConnectorEgressSettings;
        public Builder() {}
        public Builder(GetFunctionServiceConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allTrafficOnLatestRevision = defaults.allTrafficOnLatestRevision;
    	      this.availableCpu = defaults.availableCpu;
    	      this.availableMemory = defaults.availableMemory;
    	      this.environmentVariables = defaults.environmentVariables;
    	      this.gcfUri = defaults.gcfUri;
    	      this.ingressSettings = defaults.ingressSettings;
    	      this.maxInstanceCount = defaults.maxInstanceCount;
    	      this.maxInstanceRequestConcurrency = defaults.maxInstanceRequestConcurrency;
    	      this.minInstanceCount = defaults.minInstanceCount;
    	      this.secretEnvironmentVariables = defaults.secretEnvironmentVariables;
    	      this.secretVolumes = defaults.secretVolumes;
    	      this.service = defaults.service;
    	      this.serviceAccountEmail = defaults.serviceAccountEmail;
    	      this.timeoutSeconds = defaults.timeoutSeconds;
    	      this.uri = defaults.uri;
    	      this.vpcConnector = defaults.vpcConnector;
    	      this.vpcConnectorEgressSettings = defaults.vpcConnectorEgressSettings;
        }

        @CustomType.Setter
        public Builder allTrafficOnLatestRevision(Boolean allTrafficOnLatestRevision) {
            if (allTrafficOnLatestRevision == null) {
              throw new MissingRequiredPropertyException("GetFunctionServiceConfig", "allTrafficOnLatestRevision");
            }
            this.allTrafficOnLatestRevision = allTrafficOnLatestRevision;
            return this;
        }
        @CustomType.Setter
        public Builder availableCpu(String availableCpu) {
            if (availableCpu == null) {
              throw new MissingRequiredPropertyException("GetFunctionServiceConfig", "availableCpu");
            }
            this.availableCpu = availableCpu;
            return this;
        }
        @CustomType.Setter
        public Builder availableMemory(String availableMemory) {
            if (availableMemory == null) {
              throw new MissingRequiredPropertyException("GetFunctionServiceConfig", "availableMemory");
            }
            this.availableMemory = availableMemory;
            return this;
        }
        @CustomType.Setter
        public Builder environmentVariables(Map<String,String> environmentVariables) {
            if (environmentVariables == null) {
              throw new MissingRequiredPropertyException("GetFunctionServiceConfig", "environmentVariables");
            }
            this.environmentVariables = environmentVariables;
            return this;
        }
        @CustomType.Setter
        public Builder gcfUri(String gcfUri) {
            if (gcfUri == null) {
              throw new MissingRequiredPropertyException("GetFunctionServiceConfig", "gcfUri");
            }
            this.gcfUri = gcfUri;
            return this;
        }
        @CustomType.Setter
        public Builder ingressSettings(String ingressSettings) {
            if (ingressSettings == null) {
              throw new MissingRequiredPropertyException("GetFunctionServiceConfig", "ingressSettings");
            }
            this.ingressSettings = ingressSettings;
            return this;
        }
        @CustomType.Setter
        public Builder maxInstanceCount(Integer maxInstanceCount) {
            if (maxInstanceCount == null) {
              throw new MissingRequiredPropertyException("GetFunctionServiceConfig", "maxInstanceCount");
            }
            this.maxInstanceCount = maxInstanceCount;
            return this;
        }
        @CustomType.Setter
        public Builder maxInstanceRequestConcurrency(Integer maxInstanceRequestConcurrency) {
            if (maxInstanceRequestConcurrency == null) {
              throw new MissingRequiredPropertyException("GetFunctionServiceConfig", "maxInstanceRequestConcurrency");
            }
            this.maxInstanceRequestConcurrency = maxInstanceRequestConcurrency;
            return this;
        }
        @CustomType.Setter
        public Builder minInstanceCount(Integer minInstanceCount) {
            if (minInstanceCount == null) {
              throw new MissingRequiredPropertyException("GetFunctionServiceConfig", "minInstanceCount");
            }
            this.minInstanceCount = minInstanceCount;
            return this;
        }
        @CustomType.Setter
        public Builder secretEnvironmentVariables(List<GetFunctionServiceConfigSecretEnvironmentVariable> secretEnvironmentVariables) {
            if (secretEnvironmentVariables == null) {
              throw new MissingRequiredPropertyException("GetFunctionServiceConfig", "secretEnvironmentVariables");
            }
            this.secretEnvironmentVariables = secretEnvironmentVariables;
            return this;
        }
        public Builder secretEnvironmentVariables(GetFunctionServiceConfigSecretEnvironmentVariable... secretEnvironmentVariables) {
            return secretEnvironmentVariables(List.of(secretEnvironmentVariables));
        }
        @CustomType.Setter
        public Builder secretVolumes(List<GetFunctionServiceConfigSecretVolume> secretVolumes) {
            if (secretVolumes == null) {
              throw new MissingRequiredPropertyException("GetFunctionServiceConfig", "secretVolumes");
            }
            this.secretVolumes = secretVolumes;
            return this;
        }
        public Builder secretVolumes(GetFunctionServiceConfigSecretVolume... secretVolumes) {
            return secretVolumes(List.of(secretVolumes));
        }
        @CustomType.Setter
        public Builder service(String service) {
            if (service == null) {
              throw new MissingRequiredPropertyException("GetFunctionServiceConfig", "service");
            }
            this.service = service;
            return this;
        }
        @CustomType.Setter
        public Builder serviceAccountEmail(String serviceAccountEmail) {
            if (serviceAccountEmail == null) {
              throw new MissingRequiredPropertyException("GetFunctionServiceConfig", "serviceAccountEmail");
            }
            this.serviceAccountEmail = serviceAccountEmail;
            return this;
        }
        @CustomType.Setter
        public Builder timeoutSeconds(Integer timeoutSeconds) {
            if (timeoutSeconds == null) {
              throw new MissingRequiredPropertyException("GetFunctionServiceConfig", "timeoutSeconds");
            }
            this.timeoutSeconds = timeoutSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder uri(String uri) {
            if (uri == null) {
              throw new MissingRequiredPropertyException("GetFunctionServiceConfig", "uri");
            }
            this.uri = uri;
            return this;
        }
        @CustomType.Setter
        public Builder vpcConnector(String vpcConnector) {
            if (vpcConnector == null) {
              throw new MissingRequiredPropertyException("GetFunctionServiceConfig", "vpcConnector");
            }
            this.vpcConnector = vpcConnector;
            return this;
        }
        @CustomType.Setter
        public Builder vpcConnectorEgressSettings(String vpcConnectorEgressSettings) {
            if (vpcConnectorEgressSettings == null) {
              throw new MissingRequiredPropertyException("GetFunctionServiceConfig", "vpcConnectorEgressSettings");
            }
            this.vpcConnectorEgressSettings = vpcConnectorEgressSettings;
            return this;
        }
        public GetFunctionServiceConfig build() {
            final var _resultValue = new GetFunctionServiceConfig();
            _resultValue.allTrafficOnLatestRevision = allTrafficOnLatestRevision;
            _resultValue.availableCpu = availableCpu;
            _resultValue.availableMemory = availableMemory;
            _resultValue.environmentVariables = environmentVariables;
            _resultValue.gcfUri = gcfUri;
            _resultValue.ingressSettings = ingressSettings;
            _resultValue.maxInstanceCount = maxInstanceCount;
            _resultValue.maxInstanceRequestConcurrency = maxInstanceRequestConcurrency;
            _resultValue.minInstanceCount = minInstanceCount;
            _resultValue.secretEnvironmentVariables = secretEnvironmentVariables;
            _resultValue.secretVolumes = secretVolumes;
            _resultValue.service = service;
            _resultValue.serviceAccountEmail = serviceAccountEmail;
            _resultValue.timeoutSeconds = timeoutSeconds;
            _resultValue.uri = uri;
            _resultValue.vpcConnector = vpcConnector;
            _resultValue.vpcConnectorEgressSettings = vpcConnectorEgressSettings;
            return _resultValue;
        }
    }
}
