// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.filestore.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.filestore.outputs.GetInstanceFileShareNfsExportOption;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetInstanceFileShare {
    /**
     * @return File share capacity in GiB. This must be at least 1024 GiB
     * for the standard tier, or 2560 GiB for the premium tier.
     * 
     */
    private Integer capacityGb;
    /**
     * @return The name of a Filestore instance.
     * 
     * ***
     * 
     */
    private String name;
    /**
     * @return Nfs Export Options. There is a limit of 10 export options per file share.
     * 
     */
    private List<GetInstanceFileShareNfsExportOption> nfsExportOptions;
    /**
     * @return The resource name of the backup, in the format
     * projects/{projectId}/locations/{locationId}/backups/{backupId},
     * that this file share has been restored from.
     * 
     */
    private String sourceBackup;

    private GetInstanceFileShare() {}
    /**
     * @return File share capacity in GiB. This must be at least 1024 GiB
     * for the standard tier, or 2560 GiB for the premium tier.
     * 
     */
    public Integer capacityGb() {
        return this.capacityGb;
    }
    /**
     * @return The name of a Filestore instance.
     * 
     * ***
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Nfs Export Options. There is a limit of 10 export options per file share.
     * 
     */
    public List<GetInstanceFileShareNfsExportOption> nfsExportOptions() {
        return this.nfsExportOptions;
    }
    /**
     * @return The resource name of the backup, in the format
     * projects/{projectId}/locations/{locationId}/backups/{backupId},
     * that this file share has been restored from.
     * 
     */
    public String sourceBackup() {
        return this.sourceBackup;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstanceFileShare defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer capacityGb;
        private String name;
        private List<GetInstanceFileShareNfsExportOption> nfsExportOptions;
        private String sourceBackup;
        public Builder() {}
        public Builder(GetInstanceFileShare defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.capacityGb = defaults.capacityGb;
    	      this.name = defaults.name;
    	      this.nfsExportOptions = defaults.nfsExportOptions;
    	      this.sourceBackup = defaults.sourceBackup;
        }

        @CustomType.Setter
        public Builder capacityGb(Integer capacityGb) {
            if (capacityGb == null) {
              throw new MissingRequiredPropertyException("GetInstanceFileShare", "capacityGb");
            }
            this.capacityGb = capacityGb;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetInstanceFileShare", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder nfsExportOptions(List<GetInstanceFileShareNfsExportOption> nfsExportOptions) {
            if (nfsExportOptions == null) {
              throw new MissingRequiredPropertyException("GetInstanceFileShare", "nfsExportOptions");
            }
            this.nfsExportOptions = nfsExportOptions;
            return this;
        }
        public Builder nfsExportOptions(GetInstanceFileShareNfsExportOption... nfsExportOptions) {
            return nfsExportOptions(List.of(nfsExportOptions));
        }
        @CustomType.Setter
        public Builder sourceBackup(String sourceBackup) {
            if (sourceBackup == null) {
              throw new MissingRequiredPropertyException("GetInstanceFileShare", "sourceBackup");
            }
            this.sourceBackup = sourceBackup;
            return this;
        }
        public GetInstanceFileShare build() {
            final var _resultValue = new GetInstanceFileShare();
            _resultValue.capacityGb = capacityGb;
            _resultValue.name = name;
            _resultValue.nfsExportOptions = nfsExportOptions;
            _resultValue.sourceBackup = sourceBackup;
            return _resultValue;
        }
    }
}
