// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.kms;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SecretCiphertextArgs extends com.pulumi.resources.ResourceArgs {

    public static final SecretCiphertextArgs Empty = new SecretCiphertextArgs();

    /**
     * The additional authenticated data used for integrity checks during encryption and decryption.
     * **Note**: This property is sensitive and will not be displayed in the plan.
     * 
     */
    @Import(name="additionalAuthenticatedData")
    private @Nullable Output<String> additionalAuthenticatedData;

    /**
     * @return The additional authenticated data used for integrity checks during encryption and decryption.
     * **Note**: This property is sensitive and will not be displayed in the plan.
     * 
     */
    public Optional<Output<String>> additionalAuthenticatedData() {
        return Optional.ofNullable(this.additionalAuthenticatedData);
    }

    /**
     * The full name of the CryptoKey that will be used to encrypt the provided plaintext.
     * Format: `&#39;projects/{{project}}/locations/{{location}}/keyRings/{{keyRing}}/cryptoKeys/{{cryptoKey}}&#39;`
     * 
     */
    @Import(name="cryptoKey", required=true)
    private Output<String> cryptoKey;

    /**
     * @return The full name of the CryptoKey that will be used to encrypt the provided plaintext.
     * Format: `&#39;projects/{{project}}/locations/{{location}}/keyRings/{{keyRing}}/cryptoKeys/{{cryptoKey}}&#39;`
     * 
     */
    public Output<String> cryptoKey() {
        return this.cryptoKey;
    }

    /**
     * The plaintext to be encrypted.
     * **Note**: This property is sensitive and will not be displayed in the plan.
     * 
     */
    @Import(name="plaintext", required=true)
    private Output<String> plaintext;

    /**
     * @return The plaintext to be encrypted.
     * **Note**: This property is sensitive and will not be displayed in the plan.
     * 
     */
    public Output<String> plaintext() {
        return this.plaintext;
    }

    private SecretCiphertextArgs() {}

    private SecretCiphertextArgs(SecretCiphertextArgs $) {
        this.additionalAuthenticatedData = $.additionalAuthenticatedData;
        this.cryptoKey = $.cryptoKey;
        this.plaintext = $.plaintext;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecretCiphertextArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecretCiphertextArgs $;

        public Builder() {
            $ = new SecretCiphertextArgs();
        }

        public Builder(SecretCiphertextArgs defaults) {
            $ = new SecretCiphertextArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param additionalAuthenticatedData The additional authenticated data used for integrity checks during encryption and decryption.
         * **Note**: This property is sensitive and will not be displayed in the plan.
         * 
         * @return builder
         * 
         */
        public Builder additionalAuthenticatedData(@Nullable Output<String> additionalAuthenticatedData) {
            $.additionalAuthenticatedData = additionalAuthenticatedData;
            return this;
        }

        /**
         * @param additionalAuthenticatedData The additional authenticated data used for integrity checks during encryption and decryption.
         * **Note**: This property is sensitive and will not be displayed in the plan.
         * 
         * @return builder
         * 
         */
        public Builder additionalAuthenticatedData(String additionalAuthenticatedData) {
            return additionalAuthenticatedData(Output.of(additionalAuthenticatedData));
        }

        /**
         * @param cryptoKey The full name of the CryptoKey that will be used to encrypt the provided plaintext.
         * Format: `&#39;projects/{{project}}/locations/{{location}}/keyRings/{{keyRing}}/cryptoKeys/{{cryptoKey}}&#39;`
         * 
         * @return builder
         * 
         */
        public Builder cryptoKey(Output<String> cryptoKey) {
            $.cryptoKey = cryptoKey;
            return this;
        }

        /**
         * @param cryptoKey The full name of the CryptoKey that will be used to encrypt the provided plaintext.
         * Format: `&#39;projects/{{project}}/locations/{{location}}/keyRings/{{keyRing}}/cryptoKeys/{{cryptoKey}}&#39;`
         * 
         * @return builder
         * 
         */
        public Builder cryptoKey(String cryptoKey) {
            return cryptoKey(Output.of(cryptoKey));
        }

        /**
         * @param plaintext The plaintext to be encrypted.
         * **Note**: This property is sensitive and will not be displayed in the plan.
         * 
         * @return builder
         * 
         */
        public Builder plaintext(Output<String> plaintext) {
            $.plaintext = plaintext;
            return this;
        }

        /**
         * @param plaintext The plaintext to be encrypted.
         * **Note**: This property is sensitive and will not be displayed in the plan.
         * 
         * @return builder
         * 
         */
        public Builder plaintext(String plaintext) {
            return plaintext(Output.of(plaintext));
        }

        public SecretCiphertextArgs build() {
            $.cryptoKey = Objects.requireNonNull($.cryptoKey, "expected parameter 'cryptoKey' to be non-null");
            $.plaintext = Objects.requireNonNull($.plaintext, "expected parameter 'plaintext' to be non-null");
            return $;
        }
    }

}
