// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudrun.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.cloudrun.outputs.GetServiceTemplateSpecContainer;
import com.pulumi.gcp.cloudrun.outputs.GetServiceTemplateSpecVolume;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetServiceTemplateSpec {
    /**
     * @return ContainerConcurrency specifies the maximum allowed in-flight (concurrent)
     * requests per container of the Revision. Values are:
     * - &#39;0&#39; thread-safe, the system should manage the max concurrency. This is
     *     the default value.
     * - &#39;1&#39; not-thread-safe. Single concurrency
     * - &#39;2-N&#39; thread-safe, max concurrency of N
     * 
     */
    private Integer containerConcurrency;
    /**
     * @return Containers defines the unit of execution for this Revision.
     * 
     */
    private List<GetServiceTemplateSpecContainer> containers;
    /**
     * @return Email address of the IAM service account associated with the revision of the
     * service. The service account represents the identity of the running revision,
     * and determines what permissions the revision has. If not provided, the revision
     * will use the project&#39;s default service account.
     * 
     */
    private String serviceAccountName;
    /**
     * @return ServingState holds a value describing the state the resources
     * are in for this Revision.
     * It is expected
     * that the system will manipulate this based on routability and load.
     * 
     */
    private String servingState;
    /**
     * @return TimeoutSeconds holds the max duration the instance is allowed for responding to a request.
     * 
     */
    private Integer timeoutSeconds;
    /**
     * @return Volume represents a named volume in a container.
     * 
     */
    private List<GetServiceTemplateSpecVolume> volumes;

    private GetServiceTemplateSpec() {}
    /**
     * @return ContainerConcurrency specifies the maximum allowed in-flight (concurrent)
     * requests per container of the Revision. Values are:
     * - &#39;0&#39; thread-safe, the system should manage the max concurrency. This is
     *     the default value.
     * - &#39;1&#39; not-thread-safe. Single concurrency
     * - &#39;2-N&#39; thread-safe, max concurrency of N
     * 
     */
    public Integer containerConcurrency() {
        return this.containerConcurrency;
    }
    /**
     * @return Containers defines the unit of execution for this Revision.
     * 
     */
    public List<GetServiceTemplateSpecContainer> containers() {
        return this.containers;
    }
    /**
     * @return Email address of the IAM service account associated with the revision of the
     * service. The service account represents the identity of the running revision,
     * and determines what permissions the revision has. If not provided, the revision
     * will use the project&#39;s default service account.
     * 
     */
    public String serviceAccountName() {
        return this.serviceAccountName;
    }
    /**
     * @return ServingState holds a value describing the state the resources
     * are in for this Revision.
     * It is expected
     * that the system will manipulate this based on routability and load.
     * 
     */
    public String servingState() {
        return this.servingState;
    }
    /**
     * @return TimeoutSeconds holds the max duration the instance is allowed for responding to a request.
     * 
     */
    public Integer timeoutSeconds() {
        return this.timeoutSeconds;
    }
    /**
     * @return Volume represents a named volume in a container.
     * 
     */
    public List<GetServiceTemplateSpecVolume> volumes() {
        return this.volumes;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServiceTemplateSpec defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer containerConcurrency;
        private List<GetServiceTemplateSpecContainer> containers;
        private String serviceAccountName;
        private String servingState;
        private Integer timeoutSeconds;
        private List<GetServiceTemplateSpecVolume> volumes;
        public Builder() {}
        public Builder(GetServiceTemplateSpec defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.containerConcurrency = defaults.containerConcurrency;
    	      this.containers = defaults.containers;
    	      this.serviceAccountName = defaults.serviceAccountName;
    	      this.servingState = defaults.servingState;
    	      this.timeoutSeconds = defaults.timeoutSeconds;
    	      this.volumes = defaults.volumes;
        }

        @CustomType.Setter
        public Builder containerConcurrency(Integer containerConcurrency) {
            if (containerConcurrency == null) {
              throw new MissingRequiredPropertyException("GetServiceTemplateSpec", "containerConcurrency");
            }
            this.containerConcurrency = containerConcurrency;
            return this;
        }
        @CustomType.Setter
        public Builder containers(List<GetServiceTemplateSpecContainer> containers) {
            if (containers == null) {
              throw new MissingRequiredPropertyException("GetServiceTemplateSpec", "containers");
            }
            this.containers = containers;
            return this;
        }
        public Builder containers(GetServiceTemplateSpecContainer... containers) {
            return containers(List.of(containers));
        }
        @CustomType.Setter
        public Builder serviceAccountName(String serviceAccountName) {
            if (serviceAccountName == null) {
              throw new MissingRequiredPropertyException("GetServiceTemplateSpec", "serviceAccountName");
            }
            this.serviceAccountName = serviceAccountName;
            return this;
        }
        @CustomType.Setter
        public Builder servingState(String servingState) {
            if (servingState == null) {
              throw new MissingRequiredPropertyException("GetServiceTemplateSpec", "servingState");
            }
            this.servingState = servingState;
            return this;
        }
        @CustomType.Setter
        public Builder timeoutSeconds(Integer timeoutSeconds) {
            if (timeoutSeconds == null) {
              throw new MissingRequiredPropertyException("GetServiceTemplateSpec", "timeoutSeconds");
            }
            this.timeoutSeconds = timeoutSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder volumes(List<GetServiceTemplateSpecVolume> volumes) {
            if (volumes == null) {
              throw new MissingRequiredPropertyException("GetServiceTemplateSpec", "volumes");
            }
            this.volumes = volumes;
            return this;
        }
        public Builder volumes(GetServiceTemplateSpecVolume... volumes) {
            return volumes(List.of(volumes));
        }
        public GetServiceTemplateSpec build() {
            final var _resultValue = new GetServiceTemplateSpec();
            _resultValue.containerConcurrency = containerConcurrency;
            _resultValue.containers = containers;
            _resultValue.serviceAccountName = serviceAccountName;
            _resultValue.servingState = servingState;
            _resultValue.timeoutSeconds = timeoutSeconds;
            _resultValue.volumes = volumes;
            return _resultValue;
        }
    }
}
