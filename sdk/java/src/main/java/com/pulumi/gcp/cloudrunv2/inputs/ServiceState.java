// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudrunv2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.cloudrunv2.inputs.ServiceBinaryAuthorizationArgs;
import com.pulumi.gcp.cloudrunv2.inputs.ServiceConditionArgs;
import com.pulumi.gcp.cloudrunv2.inputs.ServiceTemplateArgs;
import com.pulumi.gcp.cloudrunv2.inputs.ServiceTerminalConditionArgs;
import com.pulumi.gcp.cloudrunv2.inputs.ServiceTrafficArgs;
import com.pulumi.gcp.cloudrunv2.inputs.ServiceTrafficStatusArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceState extends com.pulumi.resources.ResourceArgs {

    public static final ServiceState Empty = new ServiceState();

    /**
     * Settings for the Binary Authorization feature.
     * Structure is documented below.
     * 
     */
    @Import(name="binaryAuthorization")
    private @Nullable Output<ServiceBinaryAuthorizationArgs> binaryAuthorization;

    /**
     * @return Settings for the Binary Authorization feature.
     * Structure is documented below.
     * 
     */
    public Optional<Output<ServiceBinaryAuthorizationArgs>> binaryAuthorization() {
        return Optional.ofNullable(this.binaryAuthorization);
    }

    /**
     * Arbitrary identifier for the API client.
     * 
     */
    @Import(name="client")
    private @Nullable Output<String> client;

    /**
     * @return Arbitrary identifier for the API client.
     * 
     */
    public Optional<Output<String>> client() {
        return Optional.ofNullable(this.client);
    }

    /**
     * Arbitrary version identifier for the API client.
     * 
     */
    @Import(name="clientVersion")
    private @Nullable Output<String> clientVersion;

    /**
     * @return Arbitrary version identifier for the API client.
     * 
     */
    public Optional<Output<String>> clientVersion() {
        return Optional.ofNullable(this.clientVersion);
    }

    /**
     * The Conditions of all other associated sub-resources. They contain additional diagnostics information in case the
     * Service does not reach its Serving state. See comments in reconciling for additional information on reconciliation
     * process in Cloud Run.
     * 
     */
    @Import(name="conditions")
    private @Nullable Output<List<ServiceConditionArgs>> conditions;

    /**
     * @return The Conditions of all other associated sub-resources. They contain additional diagnostics information in case the
     * Service does not reach its Serving state. See comments in reconciling for additional information on reconciliation
     * process in Cloud Run.
     * 
     */
    public Optional<Output<List<ServiceConditionArgs>>> conditions() {
        return Optional.ofNullable(this.conditions);
    }

    /**
     * User-provided description of the Service. This field currently has a 512-character limit.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return User-provided description of the Service. This field currently has a 512-character limit.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * A system-generated fingerprint for this version of the resource. May be used to detect modification conflict during
     * updates.
     * 
     */
    @Import(name="etag")
    private @Nullable Output<String> etag;

    /**
     * @return A system-generated fingerprint for this version of the resource. May be used to detect modification conflict during
     * updates.
     * 
     */
    public Optional<Output<String>> etag() {
        return Optional.ofNullable(this.etag);
    }

    /**
     * A number that monotonically increases every time the user modifies the desired state. Please note that unlike v1, this
     * is an int64 value. As with most Google APIs, its JSON representation will be a string instead of an integer.
     * 
     */
    @Import(name="generation")
    private @Nullable Output<String> generation;

    /**
     * @return A number that monotonically increases every time the user modifies the desired state. Please note that unlike v1, this
     * is an int64 value. As with most Google APIs, its JSON representation will be a string instead of an integer.
     * 
     */
    public Optional<Output<String>> generation() {
        return Optional.ofNullable(this.generation);
    }

    /**
     * Provides the ingress settings for this Service. On output, returns the currently observed ingress settings, or INGRESS_TRAFFIC_UNSPECIFIED if no revision is active.
     * Possible values are `INGRESS_TRAFFIC_ALL`, `INGRESS_TRAFFIC_INTERNAL_ONLY`, and `INGRESS_TRAFFIC_INTERNAL_LOAD_BALANCER`.
     * 
     */
    @Import(name="ingress")
    private @Nullable Output<String> ingress;

    /**
     * @return Provides the ingress settings for this Service. On output, returns the currently observed ingress settings, or INGRESS_TRAFFIC_UNSPECIFIED if no revision is active.
     * Possible values are `INGRESS_TRAFFIC_ALL`, `INGRESS_TRAFFIC_INTERNAL_ONLY`, and `INGRESS_TRAFFIC_INTERNAL_LOAD_BALANCER`.
     * 
     */
    public Optional<Output<String>> ingress() {
        return Optional.ofNullable(this.ingress);
    }

    /**
     * Map of string keys and values that can be used to organize and categorize objects. User-provided labels are shared with Google&#39;s billing system, so they can be used to filter, or break down billing charges by team, component, environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels Cloud Run will populate some labels with &#39;run.googleapis.com&#39; or &#39;serving.knative.dev&#39; namespaces. Those labels are read-only, and user changes will not be preserved.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Map of string keys and values that can be used to organize and categorize objects. User-provided labels are shared with Google&#39;s billing system, so they can be used to filter, or break down billing charges by team, component, environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels Cloud Run will populate some labels with &#39;run.googleapis.com&#39; or &#39;serving.knative.dev&#39; namespaces. Those labels are read-only, and user changes will not be preserved.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * Name of the last created revision. See comments in reconciling for additional information on reconciliation process in
     * Cloud Run.
     * 
     */
    @Import(name="latestCreatedRevision")
    private @Nullable Output<String> latestCreatedRevision;

    /**
     * @return Name of the last created revision. See comments in reconciling for additional information on reconciliation process in
     * Cloud Run.
     * 
     */
    public Optional<Output<String>> latestCreatedRevision() {
        return Optional.ofNullable(this.latestCreatedRevision);
    }

    /**
     * Name of the latest revision that is serving traffic. See comments in reconciling for additional information on
     * reconciliation process in Cloud Run.
     * 
     */
    @Import(name="latestReadyRevision")
    private @Nullable Output<String> latestReadyRevision;

    /**
     * @return Name of the latest revision that is serving traffic. See comments in reconciling for additional information on
     * reconciliation process in Cloud Run.
     * 
     */
    public Optional<Output<String>> latestReadyRevision() {
        return Optional.ofNullable(this.latestReadyRevision);
    }

    /**
     * The launch stage as defined by Google Cloud Platform Launch Stages. Cloud Run supports ALPHA, BETA, and GA. If no value is specified, GA is assumed.
     * Possible values are `UNIMPLEMENTED`, `PRELAUNCH`, `EARLY_ACCESS`, `ALPHA`, `BETA`, `GA`, and `DEPRECATED`.
     * 
     */
    @Import(name="launchStage")
    private @Nullable Output<String> launchStage;

    /**
     * @return The launch stage as defined by Google Cloud Platform Launch Stages. Cloud Run supports ALPHA, BETA, and GA. If no value is specified, GA is assumed.
     * Possible values are `UNIMPLEMENTED`, `PRELAUNCH`, `EARLY_ACCESS`, `ALPHA`, `BETA`, `GA`, and `DEPRECATED`.
     * 
     */
    public Optional<Output<String>> launchStage() {
        return Optional.ofNullable(this.launchStage);
    }

    /**
     * The location of the cloud run service
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The location of the cloud run service
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Volume&#39;s name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Volume&#39;s name.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The generation of this Service currently serving traffic. See comments in reconciling for additional information on
     * reconciliation process in Cloud Run. Please note that unlike v1, this is an int64 value. As with most Google APIs, its
     * JSON representation will be a string instead of an integer.
     * 
     */
    @Import(name="observedGeneration")
    private @Nullable Output<String> observedGeneration;

    /**
     * @return The generation of this Service currently serving traffic. See comments in reconciling for additional information on
     * reconciliation process in Cloud Run. Please note that unlike v1, this is an int64 value. As with most Google APIs, its
     * JSON representation will be a string instead of an integer.
     * 
     */
    public Optional<Output<String>> observedGeneration() {
        return Optional.ofNullable(this.observedGeneration);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Returns true if the Service is currently being acted upon by the system to bring it into the desired state. When a new
     * Service is created, or an existing one is updated, Cloud Run will asynchronously perform all necessary steps to bring
     * the Service to the desired serving state. This process is called reconciliation. While reconciliation is in process,
     * observedGeneration, latest_ready_revison, trafficStatuses, and uri will have transient values that might mismatch the
     * intended state: Once reconciliation is over (and this field is false), there are two possible outcomes: reconciliation
     * succeeded and the serving state matches the Service, or there was an error, and reconciliation failed. This state can be
     * found in terminalCondition.state. If reconciliation succeeded, the following fields will match: traffic and
     * trafficStatuses, observedGeneration and generation, latestReadyRevision and latestCreatedRevision. If reconciliation
     * failed, trafficStatuses, observedGeneration, and latestReadyRevision will have the state of the last serving revision,
     * or empty for newly created Services. Additional information on the failure can be found in terminalCondition and
     * conditions.
     * 
     */
    @Import(name="reconciling")
    private @Nullable Output<Boolean> reconciling;

    /**
     * @return Returns true if the Service is currently being acted upon by the system to bring it into the desired state. When a new
     * Service is created, or an existing one is updated, Cloud Run will asynchronously perform all necessary steps to bring
     * the Service to the desired serving state. This process is called reconciliation. While reconciliation is in process,
     * observedGeneration, latest_ready_revison, trafficStatuses, and uri will have transient values that might mismatch the
     * intended state: Once reconciliation is over (and this field is false), there are two possible outcomes: reconciliation
     * succeeded and the serving state matches the Service, or there was an error, and reconciliation failed. This state can be
     * found in terminalCondition.state. If reconciliation succeeded, the following fields will match: traffic and
     * trafficStatuses, observedGeneration and generation, latestReadyRevision and latestCreatedRevision. If reconciliation
     * failed, trafficStatuses, observedGeneration, and latestReadyRevision will have the state of the last serving revision,
     * or empty for newly created Services. Additional information on the failure can be found in terminalCondition and
     * conditions.
     * 
     */
    public Optional<Output<Boolean>> reconciling() {
        return Optional.ofNullable(this.reconciling);
    }

    /**
     * The template used to create revisions for this Service.
     * Structure is documented below.
     * 
     */
    @Import(name="template")
    private @Nullable Output<ServiceTemplateArgs> template;

    /**
     * @return The template used to create revisions for this Service.
     * Structure is documented below.
     * 
     */
    public Optional<Output<ServiceTemplateArgs>> template() {
        return Optional.ofNullable(this.template);
    }

    /**
     * The Condition of this Service, containing its readiness status, and detailed error information in case it did not reach
     * a serving state. See comments in reconciling for additional information on reconciliation process in Cloud Run.
     * 
     */
    @Import(name="terminalConditions")
    private @Nullable Output<List<ServiceTerminalConditionArgs>> terminalConditions;

    /**
     * @return The Condition of this Service, containing its readiness status, and detailed error information in case it did not reach
     * a serving state. See comments in reconciling for additional information on reconciliation process in Cloud Run.
     * 
     */
    public Optional<Output<List<ServiceTerminalConditionArgs>>> terminalConditions() {
        return Optional.ofNullable(this.terminalConditions);
    }

    /**
     * Detailed status information for corresponding traffic targets. See comments in reconciling for additional information on
     * reconciliation process in Cloud Run.
     * 
     */
    @Import(name="trafficStatuses")
    private @Nullable Output<List<ServiceTrafficStatusArgs>> trafficStatuses;

    /**
     * @return Detailed status information for corresponding traffic targets. See comments in reconciling for additional information on
     * reconciliation process in Cloud Run.
     * 
     */
    public Optional<Output<List<ServiceTrafficStatusArgs>>> trafficStatuses() {
        return Optional.ofNullable(this.trafficStatuses);
    }

    /**
     * Specifies how to distribute traffic over a collection of Revisions belonging to the Service. If traffic is empty or not provided, defaults to 100% traffic to the latest Ready Revision.
     * Structure is documented below.
     * 
     */
    @Import(name="traffics")
    private @Nullable Output<List<ServiceTrafficArgs>> traffics;

    /**
     * @return Specifies how to distribute traffic over a collection of Revisions belonging to the Service. If traffic is empty or not provided, defaults to 100% traffic to the latest Ready Revision.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<ServiceTrafficArgs>>> traffics() {
        return Optional.ofNullable(this.traffics);
    }

    /**
     * Server assigned unique identifier for the trigger. The value is a UUID4 string and guaranteed to remain unchanged until
     * the resource is deleted.
     * 
     */
    @Import(name="uid")
    private @Nullable Output<String> uid;

    /**
     * @return Server assigned unique identifier for the trigger. The value is a UUID4 string and guaranteed to remain unchanged until
     * the resource is deleted.
     * 
     */
    public Optional<Output<String>> uid() {
        return Optional.ofNullable(this.uid);
    }

    /**
     * The main URI in which this Service is serving traffic.
     * 
     */
    @Import(name="uri")
    private @Nullable Output<String> uri;

    /**
     * @return The main URI in which this Service is serving traffic.
     * 
     */
    public Optional<Output<String>> uri() {
        return Optional.ofNullable(this.uri);
    }

    private ServiceState() {}

    private ServiceState(ServiceState $) {
        this.binaryAuthorization = $.binaryAuthorization;
        this.client = $.client;
        this.clientVersion = $.clientVersion;
        this.conditions = $.conditions;
        this.description = $.description;
        this.etag = $.etag;
        this.generation = $.generation;
        this.ingress = $.ingress;
        this.labels = $.labels;
        this.latestCreatedRevision = $.latestCreatedRevision;
        this.latestReadyRevision = $.latestReadyRevision;
        this.launchStage = $.launchStage;
        this.location = $.location;
        this.name = $.name;
        this.observedGeneration = $.observedGeneration;
        this.project = $.project;
        this.reconciling = $.reconciling;
        this.template = $.template;
        this.terminalConditions = $.terminalConditions;
        this.trafficStatuses = $.trafficStatuses;
        this.traffics = $.traffics;
        this.uid = $.uid;
        this.uri = $.uri;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceState $;

        public Builder() {
            $ = new ServiceState();
        }

        public Builder(ServiceState defaults) {
            $ = new ServiceState(Objects.requireNonNull(defaults));
        }

        /**
         * @param binaryAuthorization Settings for the Binary Authorization feature.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder binaryAuthorization(@Nullable Output<ServiceBinaryAuthorizationArgs> binaryAuthorization) {
            $.binaryAuthorization = binaryAuthorization;
            return this;
        }

        /**
         * @param binaryAuthorization Settings for the Binary Authorization feature.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder binaryAuthorization(ServiceBinaryAuthorizationArgs binaryAuthorization) {
            return binaryAuthorization(Output.of(binaryAuthorization));
        }

        /**
         * @param client Arbitrary identifier for the API client.
         * 
         * @return builder
         * 
         */
        public Builder client(@Nullable Output<String> client) {
            $.client = client;
            return this;
        }

        /**
         * @param client Arbitrary identifier for the API client.
         * 
         * @return builder
         * 
         */
        public Builder client(String client) {
            return client(Output.of(client));
        }

        /**
         * @param clientVersion Arbitrary version identifier for the API client.
         * 
         * @return builder
         * 
         */
        public Builder clientVersion(@Nullable Output<String> clientVersion) {
            $.clientVersion = clientVersion;
            return this;
        }

        /**
         * @param clientVersion Arbitrary version identifier for the API client.
         * 
         * @return builder
         * 
         */
        public Builder clientVersion(String clientVersion) {
            return clientVersion(Output.of(clientVersion));
        }

        /**
         * @param conditions The Conditions of all other associated sub-resources. They contain additional diagnostics information in case the
         * Service does not reach its Serving state. See comments in reconciling for additional information on reconciliation
         * process in Cloud Run.
         * 
         * @return builder
         * 
         */
        public Builder conditions(@Nullable Output<List<ServiceConditionArgs>> conditions) {
            $.conditions = conditions;
            return this;
        }

        /**
         * @param conditions The Conditions of all other associated sub-resources. They contain additional diagnostics information in case the
         * Service does not reach its Serving state. See comments in reconciling for additional information on reconciliation
         * process in Cloud Run.
         * 
         * @return builder
         * 
         */
        public Builder conditions(List<ServiceConditionArgs> conditions) {
            return conditions(Output.of(conditions));
        }

        /**
         * @param conditions The Conditions of all other associated sub-resources. They contain additional diagnostics information in case the
         * Service does not reach its Serving state. See comments in reconciling for additional information on reconciliation
         * process in Cloud Run.
         * 
         * @return builder
         * 
         */
        public Builder conditions(ServiceConditionArgs... conditions) {
            return conditions(List.of(conditions));
        }

        /**
         * @param description User-provided description of the Service. This field currently has a 512-character limit.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description User-provided description of the Service. This field currently has a 512-character limit.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param etag A system-generated fingerprint for this version of the resource. May be used to detect modification conflict during
         * updates.
         * 
         * @return builder
         * 
         */
        public Builder etag(@Nullable Output<String> etag) {
            $.etag = etag;
            return this;
        }

        /**
         * @param etag A system-generated fingerprint for this version of the resource. May be used to detect modification conflict during
         * updates.
         * 
         * @return builder
         * 
         */
        public Builder etag(String etag) {
            return etag(Output.of(etag));
        }

        /**
         * @param generation A number that monotonically increases every time the user modifies the desired state. Please note that unlike v1, this
         * is an int64 value. As with most Google APIs, its JSON representation will be a string instead of an integer.
         * 
         * @return builder
         * 
         */
        public Builder generation(@Nullable Output<String> generation) {
            $.generation = generation;
            return this;
        }

        /**
         * @param generation A number that monotonically increases every time the user modifies the desired state. Please note that unlike v1, this
         * is an int64 value. As with most Google APIs, its JSON representation will be a string instead of an integer.
         * 
         * @return builder
         * 
         */
        public Builder generation(String generation) {
            return generation(Output.of(generation));
        }

        /**
         * @param ingress Provides the ingress settings for this Service. On output, returns the currently observed ingress settings, or INGRESS_TRAFFIC_UNSPECIFIED if no revision is active.
         * Possible values are `INGRESS_TRAFFIC_ALL`, `INGRESS_TRAFFIC_INTERNAL_ONLY`, and `INGRESS_TRAFFIC_INTERNAL_LOAD_BALANCER`.
         * 
         * @return builder
         * 
         */
        public Builder ingress(@Nullable Output<String> ingress) {
            $.ingress = ingress;
            return this;
        }

        /**
         * @param ingress Provides the ingress settings for this Service. On output, returns the currently observed ingress settings, or INGRESS_TRAFFIC_UNSPECIFIED if no revision is active.
         * Possible values are `INGRESS_TRAFFIC_ALL`, `INGRESS_TRAFFIC_INTERNAL_ONLY`, and `INGRESS_TRAFFIC_INTERNAL_LOAD_BALANCER`.
         * 
         * @return builder
         * 
         */
        public Builder ingress(String ingress) {
            return ingress(Output.of(ingress));
        }

        /**
         * @param labels Map of string keys and values that can be used to organize and categorize objects. User-provided labels are shared with Google&#39;s billing system, so they can be used to filter, or break down billing charges by team, component, environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels Cloud Run will populate some labels with &#39;run.googleapis.com&#39; or &#39;serving.knative.dev&#39; namespaces. Those labels are read-only, and user changes will not be preserved.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Map of string keys and values that can be used to organize and categorize objects. User-provided labels are shared with Google&#39;s billing system, so they can be used to filter, or break down billing charges by team, component, environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels Cloud Run will populate some labels with &#39;run.googleapis.com&#39; or &#39;serving.knative.dev&#39; namespaces. Those labels are read-only, and user changes will not be preserved.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param latestCreatedRevision Name of the last created revision. See comments in reconciling for additional information on reconciliation process in
         * Cloud Run.
         * 
         * @return builder
         * 
         */
        public Builder latestCreatedRevision(@Nullable Output<String> latestCreatedRevision) {
            $.latestCreatedRevision = latestCreatedRevision;
            return this;
        }

        /**
         * @param latestCreatedRevision Name of the last created revision. See comments in reconciling for additional information on reconciliation process in
         * Cloud Run.
         * 
         * @return builder
         * 
         */
        public Builder latestCreatedRevision(String latestCreatedRevision) {
            return latestCreatedRevision(Output.of(latestCreatedRevision));
        }

        /**
         * @param latestReadyRevision Name of the latest revision that is serving traffic. See comments in reconciling for additional information on
         * reconciliation process in Cloud Run.
         * 
         * @return builder
         * 
         */
        public Builder latestReadyRevision(@Nullable Output<String> latestReadyRevision) {
            $.latestReadyRevision = latestReadyRevision;
            return this;
        }

        /**
         * @param latestReadyRevision Name of the latest revision that is serving traffic. See comments in reconciling for additional information on
         * reconciliation process in Cloud Run.
         * 
         * @return builder
         * 
         */
        public Builder latestReadyRevision(String latestReadyRevision) {
            return latestReadyRevision(Output.of(latestReadyRevision));
        }

        /**
         * @param launchStage The launch stage as defined by Google Cloud Platform Launch Stages. Cloud Run supports ALPHA, BETA, and GA. If no value is specified, GA is assumed.
         * Possible values are `UNIMPLEMENTED`, `PRELAUNCH`, `EARLY_ACCESS`, `ALPHA`, `BETA`, `GA`, and `DEPRECATED`.
         * 
         * @return builder
         * 
         */
        public Builder launchStage(@Nullable Output<String> launchStage) {
            $.launchStage = launchStage;
            return this;
        }

        /**
         * @param launchStage The launch stage as defined by Google Cloud Platform Launch Stages. Cloud Run supports ALPHA, BETA, and GA. If no value is specified, GA is assumed.
         * Possible values are `UNIMPLEMENTED`, `PRELAUNCH`, `EARLY_ACCESS`, `ALPHA`, `BETA`, `GA`, and `DEPRECATED`.
         * 
         * @return builder
         * 
         */
        public Builder launchStage(String launchStage) {
            return launchStage(Output.of(launchStage));
        }

        /**
         * @param location The location of the cloud run service
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location of the cloud run service
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name Volume&#39;s name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Volume&#39;s name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param observedGeneration The generation of this Service currently serving traffic. See comments in reconciling for additional information on
         * reconciliation process in Cloud Run. Please note that unlike v1, this is an int64 value. As with most Google APIs, its
         * JSON representation will be a string instead of an integer.
         * 
         * @return builder
         * 
         */
        public Builder observedGeneration(@Nullable Output<String> observedGeneration) {
            $.observedGeneration = observedGeneration;
            return this;
        }

        /**
         * @param observedGeneration The generation of this Service currently serving traffic. See comments in reconciling for additional information on
         * reconciliation process in Cloud Run. Please note that unlike v1, this is an int64 value. As with most Google APIs, its
         * JSON representation will be a string instead of an integer.
         * 
         * @return builder
         * 
         */
        public Builder observedGeneration(String observedGeneration) {
            return observedGeneration(Output.of(observedGeneration));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param reconciling Returns true if the Service is currently being acted upon by the system to bring it into the desired state. When a new
         * Service is created, or an existing one is updated, Cloud Run will asynchronously perform all necessary steps to bring
         * the Service to the desired serving state. This process is called reconciliation. While reconciliation is in process,
         * observedGeneration, latest_ready_revison, trafficStatuses, and uri will have transient values that might mismatch the
         * intended state: Once reconciliation is over (and this field is false), there are two possible outcomes: reconciliation
         * succeeded and the serving state matches the Service, or there was an error, and reconciliation failed. This state can be
         * found in terminalCondition.state. If reconciliation succeeded, the following fields will match: traffic and
         * trafficStatuses, observedGeneration and generation, latestReadyRevision and latestCreatedRevision. If reconciliation
         * failed, trafficStatuses, observedGeneration, and latestReadyRevision will have the state of the last serving revision,
         * or empty for newly created Services. Additional information on the failure can be found in terminalCondition and
         * conditions.
         * 
         * @return builder
         * 
         */
        public Builder reconciling(@Nullable Output<Boolean> reconciling) {
            $.reconciling = reconciling;
            return this;
        }

        /**
         * @param reconciling Returns true if the Service is currently being acted upon by the system to bring it into the desired state. When a new
         * Service is created, or an existing one is updated, Cloud Run will asynchronously perform all necessary steps to bring
         * the Service to the desired serving state. This process is called reconciliation. While reconciliation is in process,
         * observedGeneration, latest_ready_revison, trafficStatuses, and uri will have transient values that might mismatch the
         * intended state: Once reconciliation is over (and this field is false), there are two possible outcomes: reconciliation
         * succeeded and the serving state matches the Service, or there was an error, and reconciliation failed. This state can be
         * found in terminalCondition.state. If reconciliation succeeded, the following fields will match: traffic and
         * trafficStatuses, observedGeneration and generation, latestReadyRevision and latestCreatedRevision. If reconciliation
         * failed, trafficStatuses, observedGeneration, and latestReadyRevision will have the state of the last serving revision,
         * or empty for newly created Services. Additional information on the failure can be found in terminalCondition and
         * conditions.
         * 
         * @return builder
         * 
         */
        public Builder reconciling(Boolean reconciling) {
            return reconciling(Output.of(reconciling));
        }

        /**
         * @param template The template used to create revisions for this Service.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder template(@Nullable Output<ServiceTemplateArgs> template) {
            $.template = template;
            return this;
        }

        /**
         * @param template The template used to create revisions for this Service.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder template(ServiceTemplateArgs template) {
            return template(Output.of(template));
        }

        /**
         * @param terminalConditions The Condition of this Service, containing its readiness status, and detailed error information in case it did not reach
         * a serving state. See comments in reconciling for additional information on reconciliation process in Cloud Run.
         * 
         * @return builder
         * 
         */
        public Builder terminalConditions(@Nullable Output<List<ServiceTerminalConditionArgs>> terminalConditions) {
            $.terminalConditions = terminalConditions;
            return this;
        }

        /**
         * @param terminalConditions The Condition of this Service, containing its readiness status, and detailed error information in case it did not reach
         * a serving state. See comments in reconciling for additional information on reconciliation process in Cloud Run.
         * 
         * @return builder
         * 
         */
        public Builder terminalConditions(List<ServiceTerminalConditionArgs> terminalConditions) {
            return terminalConditions(Output.of(terminalConditions));
        }

        /**
         * @param terminalConditions The Condition of this Service, containing its readiness status, and detailed error information in case it did not reach
         * a serving state. See comments in reconciling for additional information on reconciliation process in Cloud Run.
         * 
         * @return builder
         * 
         */
        public Builder terminalConditions(ServiceTerminalConditionArgs... terminalConditions) {
            return terminalConditions(List.of(terminalConditions));
        }

        /**
         * @param trafficStatuses Detailed status information for corresponding traffic targets. See comments in reconciling for additional information on
         * reconciliation process in Cloud Run.
         * 
         * @return builder
         * 
         */
        public Builder trafficStatuses(@Nullable Output<List<ServiceTrafficStatusArgs>> trafficStatuses) {
            $.trafficStatuses = trafficStatuses;
            return this;
        }

        /**
         * @param trafficStatuses Detailed status information for corresponding traffic targets. See comments in reconciling for additional information on
         * reconciliation process in Cloud Run.
         * 
         * @return builder
         * 
         */
        public Builder trafficStatuses(List<ServiceTrafficStatusArgs> trafficStatuses) {
            return trafficStatuses(Output.of(trafficStatuses));
        }

        /**
         * @param trafficStatuses Detailed status information for corresponding traffic targets. See comments in reconciling for additional information on
         * reconciliation process in Cloud Run.
         * 
         * @return builder
         * 
         */
        public Builder trafficStatuses(ServiceTrafficStatusArgs... trafficStatuses) {
            return trafficStatuses(List.of(trafficStatuses));
        }

        /**
         * @param traffics Specifies how to distribute traffic over a collection of Revisions belonging to the Service. If traffic is empty or not provided, defaults to 100% traffic to the latest Ready Revision.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder traffics(@Nullable Output<List<ServiceTrafficArgs>> traffics) {
            $.traffics = traffics;
            return this;
        }

        /**
         * @param traffics Specifies how to distribute traffic over a collection of Revisions belonging to the Service. If traffic is empty or not provided, defaults to 100% traffic to the latest Ready Revision.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder traffics(List<ServiceTrafficArgs> traffics) {
            return traffics(Output.of(traffics));
        }

        /**
         * @param traffics Specifies how to distribute traffic over a collection of Revisions belonging to the Service. If traffic is empty or not provided, defaults to 100% traffic to the latest Ready Revision.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder traffics(ServiceTrafficArgs... traffics) {
            return traffics(List.of(traffics));
        }

        /**
         * @param uid Server assigned unique identifier for the trigger. The value is a UUID4 string and guaranteed to remain unchanged until
         * the resource is deleted.
         * 
         * @return builder
         * 
         */
        public Builder uid(@Nullable Output<String> uid) {
            $.uid = uid;
            return this;
        }

        /**
         * @param uid Server assigned unique identifier for the trigger. The value is a UUID4 string and guaranteed to remain unchanged until
         * the resource is deleted.
         * 
         * @return builder
         * 
         */
        public Builder uid(String uid) {
            return uid(Output.of(uid));
        }

        /**
         * @param uri The main URI in which this Service is serving traffic.
         * 
         * @return builder
         * 
         */
        public Builder uri(@Nullable Output<String> uri) {
            $.uri = uri;
            return this;
        }

        /**
         * @param uri The main URI in which this Service is serving traffic.
         * 
         * @return builder
         * 
         */
        public Builder uri(String uri) {
            return uri(Output.of(uri));
        }

        public ServiceState build() {
            return $;
        }
    }

}
