// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.billing.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BudgetThresholdRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final BudgetThresholdRuleArgs Empty = new BudgetThresholdRuleArgs();

    /**
     * The type of basis used to determine if spend has passed
     * the threshold.
     * Default value is `CURRENT_SPEND`.
     * Possible values are `CURRENT_SPEND` and `FORECASTED_SPEND`.
     * 
     */
    @Import(name="spendBasis")
    private @Nullable Output<String> spendBasis;

    /**
     * @return The type of basis used to determine if spend has passed
     * the threshold.
     * Default value is `CURRENT_SPEND`.
     * Possible values are `CURRENT_SPEND` and `FORECASTED_SPEND`.
     * 
     */
    public Optional<Output<String>> spendBasis() {
        return Optional.ofNullable(this.spendBasis);
    }

    /**
     * Send an alert when this threshold is exceeded. This is a
     * 1.0-based percentage, so 0.5 = 50%. Must be &gt;= 0.
     * 
     */
    @Import(name="thresholdPercent", required=true)
    private Output<Double> thresholdPercent;

    /**
     * @return Send an alert when this threshold is exceeded. This is a
     * 1.0-based percentage, so 0.5 = 50%. Must be &gt;= 0.
     * 
     */
    public Output<Double> thresholdPercent() {
        return this.thresholdPercent;
    }

    private BudgetThresholdRuleArgs() {}

    private BudgetThresholdRuleArgs(BudgetThresholdRuleArgs $) {
        this.spendBasis = $.spendBasis;
        this.thresholdPercent = $.thresholdPercent;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BudgetThresholdRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BudgetThresholdRuleArgs $;

        public Builder() {
            $ = new BudgetThresholdRuleArgs();
        }

        public Builder(BudgetThresholdRuleArgs defaults) {
            $ = new BudgetThresholdRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param spendBasis The type of basis used to determine if spend has passed
         * the threshold.
         * Default value is `CURRENT_SPEND`.
         * Possible values are `CURRENT_SPEND` and `FORECASTED_SPEND`.
         * 
         * @return builder
         * 
         */
        public Builder spendBasis(@Nullable Output<String> spendBasis) {
            $.spendBasis = spendBasis;
            return this;
        }

        /**
         * @param spendBasis The type of basis used to determine if spend has passed
         * the threshold.
         * Default value is `CURRENT_SPEND`.
         * Possible values are `CURRENT_SPEND` and `FORECASTED_SPEND`.
         * 
         * @return builder
         * 
         */
        public Builder spendBasis(String spendBasis) {
            return spendBasis(Output.of(spendBasis));
        }

        /**
         * @param thresholdPercent Send an alert when this threshold is exceeded. This is a
         * 1.0-based percentage, so 0.5 = 50%. Must be &gt;= 0.
         * 
         * @return builder
         * 
         */
        public Builder thresholdPercent(Output<Double> thresholdPercent) {
            $.thresholdPercent = thresholdPercent;
            return this;
        }

        /**
         * @param thresholdPercent Send an alert when this threshold is exceeded. This is a
         * 1.0-based percentage, so 0.5 = 50%. Must be &gt;= 0.
         * 
         * @return builder
         * 
         */
        public Builder thresholdPercent(Double thresholdPercent) {
            return thresholdPercent(Output.of(thresholdPercent));
        }

        public BudgetThresholdRuleArgs build() {
            $.thresholdPercent = Objects.requireNonNull($.thresholdPercent, "expected parameter 'thresholdPercent' to be non-null");
            return $;
        }
    }

}
