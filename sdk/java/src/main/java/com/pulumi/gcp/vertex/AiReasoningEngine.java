// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.vertex;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.vertex.AiReasoningEngineArgs;
import com.pulumi.gcp.vertex.inputs.AiReasoningEngineState;
import com.pulumi.gcp.vertex.outputs.AiReasoningEngineEncryptionSpec;
import com.pulumi.gcp.vertex.outputs.AiReasoningEngineSpec;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ReasoningEngine provides a customizable runtime for models to determine which actions to take and in which order.
 * 
 * To get more information about ReasoningEngine, see:
 * 
 * * [API documentation](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.reasoningEngines/)
 * * How-to Guides
 *     * [Develop and deploy agents on Vertex AI Agent Engine](https://cloud.google.com/vertex-ai/generative-ai/docs/agent-engine/quickstart)
 * 
 * ## Example Usage
 * 
 * ### Vertex Ai Reasoning Engine Full
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.secretmanager.Secret;
 * import com.pulumi.gcp.secretmanager.SecretArgs;
 * import com.pulumi.gcp.secretmanager.inputs.SecretReplicationArgs;
 * import com.pulumi.gcp.secretmanager.inputs.SecretReplicationAutoArgs;
 * import com.pulumi.gcp.secretmanager.SecretVersion;
 * import com.pulumi.gcp.secretmanager.SecretVersionArgs;
 * import com.pulumi.gcp.serviceaccount.Account;
 * import com.pulumi.gcp.serviceaccount.AccountArgs;
 * import com.pulumi.gcp.secretmanager.SecretIamMember;
 * import com.pulumi.gcp.secretmanager.SecretIamMemberArgs;
 * import com.pulumi.gcp.organizations.OrganizationsFunctions;
 * import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
 * import com.pulumi.gcp.projects.IAMMember;
 * import com.pulumi.gcp.projects.IAMMemberArgs;
 * import com.pulumi.time.sleep;
 * import com.pulumi.time.sleepArgs;
 * import com.pulumi.gcp.storage.Bucket;
 * import com.pulumi.gcp.storage.BucketArgs;
 * import com.pulumi.gcp.storage.BucketObject;
 * import com.pulumi.gcp.storage.BucketObjectArgs;
 * import com.pulumi.gcp.vertex.AiReasoningEngine;
 * import com.pulumi.gcp.vertex.AiReasoningEngineArgs;
 * import com.pulumi.gcp.vertex.inputs.AiReasoningEngineEncryptionSpecArgs;
 * import com.pulumi.gcp.vertex.inputs.AiReasoningEngineSpecArgs;
 * import com.pulumi.gcp.vertex.inputs.AiReasoningEngineSpecDeploymentSpecArgs;
 * import com.pulumi.gcp.vertex.inputs.AiReasoningEngineSpecPackageSpecArgs;
 * import com.pulumi.asset.FileAsset;
 * import static com.pulumi.codegen.internal.Serialization.*;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var classMethods = List.of(Map.ofEntries(
 *             Map.entry("apiMode", "async"),
 *             Map.entry("description", null),
 *             Map.entry("name", "async_query"),
 *             Map.entry("parameters", Map.ofEntries(
 *                 Map.entry("type", "object"),
 *                 Map.entry("required", List.of()),
 *                 Map.entry("properties", Map.ofEntries(
 *                 ))
 *             ))
 *         ));
 * 
 *         var secret = new Secret("secret", SecretArgs.builder()
 *             .secretId("secret")
 *             .replication(SecretReplicationArgs.builder()
 *                 .auto(SecretReplicationAutoArgs.builder()
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         var secretVersion = new SecretVersion("secretVersion", SecretVersionArgs.builder()
 *             .secret(secret.id())
 *             .secretData("test")
 *             .build());
 * 
 *         var serviceAccount = new Account("serviceAccount", AccountArgs.builder()
 *             .accountId("sa")
 *             .build());
 * 
 *         var secretAccess = new SecretIamMember("secretAccess", SecretIamMemberArgs.builder()
 *             .secretId(secret.id())
 *             .role("roles/secretmanager.secretAccessor")
 *             .member(serviceAccount.member())
 *             .build());
 * 
 *         final var project = OrganizationsFunctions.getProject(GetProjectArgs.builder()
 *             .build());
 * 
 *         var saIamObjectViewer = new IAMMember("saIamObjectViewer", IAMMemberArgs.builder()
 *             .role("roles/storage.objectViewer")
 *             .project(project.id())
 *             .member(serviceAccount.member())
 *             .build());
 * 
 *         var saIamAiPlatformUser = new IAMMember("saIamAiPlatformUser", IAMMemberArgs.builder()
 *             .role("roles/aiplatform.user")
 *             .project(project.id())
 *             .member(serviceAccount.member())
 *             .build());
 * 
 *         var saIamViewer = new IAMMember("saIamViewer", IAMMemberArgs.builder()
 *             .role("roles/viewer")
 *             .project(project.id())
 *             .member(serviceAccount.member())
 *             .build());
 * 
 *         // Ensure we wait enough time for IAM permissions to be propagated
 *         var wait5Minutes = new Sleep("wait5Minutes", SleepArgs.builder()
 *             .createDuration("5m")
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(List.of(                
 *                     saIamAiPlatformUser,
 *                     saIamObjectViewer,
 *                     saIamViewer,
 *                     secretAccess,
 *                     secretVersion))
 *                 .build());
 * 
 *         var bucket = new Bucket("bucket", BucketArgs.builder()
 *             .name("reasoning-engine")
 *             .location("us-central1")
 *             .uniformBucketLevelAccess(true)
 *             .forceDestroy(true)
 *             .build());
 * 
 *         var bucketObjRequirementsTxt = new BucketObject("bucketObjRequirementsTxt", BucketObjectArgs.builder()
 *             .name("requirements.txt")
 *             .bucket(bucket.id())
 *             .source(new FileAsset("./test-fixtures/requirements_adk.txt"))
 *             .build());
 * 
 *         var bucketObjPickle = new BucketObject("bucketObjPickle", BucketObjectArgs.builder()
 *             .name("code.pkl")
 *             .bucket(bucket.id())
 *             .source(new FileAsset("./test-fixtures/pickle_adk.pkl"))
 *             .build());
 * 
 *         var bucketObjDependenciesTarGz = new BucketObject("bucketObjDependenciesTarGz", BucketObjectArgs.builder()
 *             .name("dependencies.tar.gz")
 *             .bucket(bucket.id())
 *             .source(new FileAsset("./test-fixtures/dependencies_adk.tar.gz"))
 *             .build());
 * 
 *         var reasoningEngine = new AiReasoningEngine("reasoningEngine", AiReasoningEngineArgs.builder()
 *             .displayName("reasoning-engine")
 *             .description("A basic reasoning engine")
 *             .region("us-central1")
 *             .encryptionSpec(AiReasoningEngineEncryptionSpecArgs.builder()
 *                 .kmsKeyName("example-key")
 *                 .build())
 *             .spec(AiReasoningEngineSpecArgs.builder()
 *                 .agentFramework("google-adk")
 *                 .classMethods(serializeJson(
 *                     classMethods))
 *                 .serviceAccount(serviceAccount.email())
 *                 .deploymentSpec(AiReasoningEngineSpecDeploymentSpecArgs.builder()
 *                     .envs(                    
 *                         AiReasoningEngineSpecDeploymentSpecEnvArgs.builder()
 *                             .name("var_1")
 *                             .value("value_2")
 *                             .build(),
 *                         AiReasoningEngineSpecDeploymentSpecEnvArgs.builder()
 *                             .name("var_2")
 *                             .value("value_2")
 *                             .build())
 *                     .secretEnvs(                    
 *                         AiReasoningEngineSpecDeploymentSpecSecretEnvArgs.builder()
 *                             .name("secret_var_1")
 *                             .secretRef(AiReasoningEngineSpecDeploymentSpecSecretEnvSecretRefArgs.builder()
 *                                 .secret(secret.secretId())
 *                                 .version("latest")
 *                                 .build())
 *                             .build(),
 *                         AiReasoningEngineSpecDeploymentSpecSecretEnvArgs.builder()
 *                             .name("secret_var_2")
 *                             .secretRef(AiReasoningEngineSpecDeploymentSpecSecretEnvSecretRefArgs.builder()
 *                                 .secret(secret.secretId())
 *                                 .version("latest")
 *                                 .build())
 *                             .build())
 *                     .build())
 *                 .packageSpec(AiReasoningEngineSpecPackageSpecArgs.builder()
 *                     .dependencyFilesGcsUri(Output.tuple(bucket.url(), bucketObjDependenciesTarGz.name()).applyValue(values -> {
 *                         var url = values.t1;
 *                         var name = values.t2;
 *                         return String.format("%s/%s", url,name);
 *                     }))
 *                     .pickleObjectGcsUri(Output.tuple(bucket.url(), bucketObjPickle.name()).applyValue(values -> {
 *                         var url = values.t1;
 *                         var name = values.t2;
 *                         return String.format("%s/%s", url,name);
 *                     }))
 *                     .pythonVersion("3.11")
 *                     .requirementsGcsUri(Output.tuple(bucket.url(), bucketObjRequirementsTxt.name()).applyValue(values -> {
 *                         var url = values.t1;
 *                         var name = values.t2;
 *                         return String.format("%s/%s", url,name);
 *                     }))
 *                     .build())
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(wait5Minutes)
 *                 .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * ReasoningEngine can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/locations/{{region}}/reasoningEngines/{{name}}`
 * 
 * * `{{project}}/{{region}}/{{name}}`
 * 
 * * `{{region}}/{{name}}`
 * 
 * * `{{name}}`
 * 
 * When using the `pulumi import` command, ReasoningEngine can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:vertex/aiReasoningEngine:AiReasoningEngine default projects/{{project}}/locations/{{region}}/reasoningEngines/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:vertex/aiReasoningEngine:AiReasoningEngine default {{project}}/{{region}}/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:vertex/aiReasoningEngine:AiReasoningEngine default {{region}}/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:vertex/aiReasoningEngine:AiReasoningEngine default {{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:vertex/aiReasoningEngine:AiReasoningEngine")
public class AiReasoningEngine extends com.pulumi.resources.CustomResource {
    /**
     * The timestamp of when the Index was created in RFC3339 UTC &#34;Zulu&#34; format,
     * with nanosecond resolution and up to nine fractional digits.
     * 
     */
    @Export(name="createTime", refs={String.class}, tree="[0]")
    private Output<String> createTime;

    /**
     * @return The timestamp of when the Index was created in RFC3339 UTC &#34;Zulu&#34; format,
     * with nanosecond resolution and up to nine fractional digits.
     * 
     */
    public Output<String> createTime() {
        return this.createTime;
    }
    /**
     * The description of the ReasoningEngine.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return The description of the ReasoningEngine.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * The display name of the ReasoningEngine.
     * 
     */
    @Export(name="displayName", refs={String.class}, tree="[0]")
    private Output<String> displayName;

    /**
     * @return The display name of the ReasoningEngine.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }
    /**
     * Optional. Customer-managed encryption key spec for a ReasoningEngine.
     * If set, this ReasoningEngine and all sub-resources of this ReasoningEngine will be secured by this key.
     * Structure is documented below.
     * 
     */
    @Export(name="encryptionSpec", refs={AiReasoningEngineEncryptionSpec.class}, tree="[0]")
    private Output</* @Nullable */ AiReasoningEngineEncryptionSpec> encryptionSpec;

    /**
     * @return Optional. Customer-managed encryption key spec for a ReasoningEngine.
     * If set, this ReasoningEngine and all sub-resources of this ReasoningEngine will be secured by this key.
     * Structure is documented below.
     * 
     */
    public Output<Optional<AiReasoningEngineEncryptionSpec>> encryptionSpec() {
        return Codegen.optional(this.encryptionSpec);
    }
    /**
     * The generated name of the ReasoningEngine, in the format
     * &#39;projects/{project}/locations/{location}/reasoningEngines/{reasoningEngine}&#39;
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The generated name of the ReasoningEngine, in the format
     * &#39;projects/{project}/locations/{location}/reasoningEngines/{reasoningEngine}&#39;
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * The region of the reasoning engine. eg us-central1
     * 
     */
    @Export(name="region", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> region;

    /**
     * @return The region of the reasoning engine. eg us-central1
     * 
     */
    public Output<Optional<String>> region() {
        return Codegen.optional(this.region);
    }
    /**
     * Optional. Configurations of the ReasoningEngine.
     * Structure is documented below.
     * 
     */
    @Export(name="spec", refs={AiReasoningEngineSpec.class}, tree="[0]")
    private Output</* @Nullable */ AiReasoningEngineSpec> spec;

    /**
     * @return Optional. Configurations of the ReasoningEngine.
     * Structure is documented below.
     * 
     */
    public Output<Optional<AiReasoningEngineSpec>> spec() {
        return Codegen.optional(this.spec);
    }
    /**
     * The timestamp of when the Index was last updated in RFC3339 UTC &#34;Zulu&#34; format,
     * with nanosecond resolution and up to nine fractional digits.
     * 
     */
    @Export(name="updateTime", refs={String.class}, tree="[0]")
    private Output<String> updateTime;

    /**
     * @return The timestamp of when the Index was last updated in RFC3339 UTC &#34;Zulu&#34; format,
     * with nanosecond resolution and up to nine fractional digits.
     * 
     */
    public Output<String> updateTime() {
        return this.updateTime;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public AiReasoningEngine(java.lang.String name) {
        this(name, AiReasoningEngineArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public AiReasoningEngine(java.lang.String name, AiReasoningEngineArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public AiReasoningEngine(java.lang.String name, AiReasoningEngineArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:vertex/aiReasoningEngine:AiReasoningEngine", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private AiReasoningEngine(java.lang.String name, Output<java.lang.String> id, @Nullable AiReasoningEngineState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:vertex/aiReasoningEngine:AiReasoningEngine", name, state, makeResourceOptions(options, id), false);
    }

    private static AiReasoningEngineArgs makeArgs(AiReasoningEngineArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? AiReasoningEngineArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static AiReasoningEngine get(java.lang.String name, Output<java.lang.String> id, @Nullable AiReasoningEngineState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new AiReasoningEngine(name, id, state, options);
    }
}
