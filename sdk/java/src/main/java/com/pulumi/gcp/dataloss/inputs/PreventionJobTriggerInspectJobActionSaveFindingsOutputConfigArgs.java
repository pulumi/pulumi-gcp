// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataloss.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.dataloss.inputs.PreventionJobTriggerInspectJobActionSaveFindingsOutputConfigTableArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PreventionJobTriggerInspectJobActionSaveFindingsOutputConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final PreventionJobTriggerInspectJobActionSaveFindingsOutputConfigArgs Empty = new PreventionJobTriggerInspectJobActionSaveFindingsOutputConfigArgs();

    /**
     * Schema used for writing the findings for Inspect jobs. This field is only used for
     * Inspect and must be unspecified for Risk jobs. Columns are derived from the Finding
     * object. If appending to an existing table, any columns from the predefined schema
     * that are missing will be added. No columns in the existing table will be deleted.
     * If unspecified, then all available columns will be used for a new table or an (existing)
     * table with no schema, and no changes will be made to an existing table that has a schema.
     * Only for use with external storage.
     * Possible values are `BASIC_COLUMNS`, `GCS_COLUMNS`, `DATASTORE_COLUMNS`, `BIG_QUERY_COLUMNS`, and `ALL_COLUMNS`.
     * 
     */
    @Import(name="outputSchema")
    private @Nullable Output<String> outputSchema;

    /**
     * @return Schema used for writing the findings for Inspect jobs. This field is only used for
     * Inspect and must be unspecified for Risk jobs. Columns are derived from the Finding
     * object. If appending to an existing table, any columns from the predefined schema
     * that are missing will be added. No columns in the existing table will be deleted.
     * If unspecified, then all available columns will be used for a new table or an (existing)
     * table with no schema, and no changes will be made to an existing table that has a schema.
     * Only for use with external storage.
     * Possible values are `BASIC_COLUMNS`, `GCS_COLUMNS`, `DATASTORE_COLUMNS`, `BIG_QUERY_COLUMNS`, and `ALL_COLUMNS`.
     * 
     */
    public Optional<Output<String>> outputSchema() {
        return Optional.ofNullable(this.outputSchema);
    }

    /**
     * Information on the location of the target BigQuery Table.
     * Structure is documented below.
     * 
     */
    @Import(name="table", required=true)
    private Output<PreventionJobTriggerInspectJobActionSaveFindingsOutputConfigTableArgs> table;

    /**
     * @return Information on the location of the target BigQuery Table.
     * Structure is documented below.
     * 
     */
    public Output<PreventionJobTriggerInspectJobActionSaveFindingsOutputConfigTableArgs> table() {
        return this.table;
    }

    private PreventionJobTriggerInspectJobActionSaveFindingsOutputConfigArgs() {}

    private PreventionJobTriggerInspectJobActionSaveFindingsOutputConfigArgs(PreventionJobTriggerInspectJobActionSaveFindingsOutputConfigArgs $) {
        this.outputSchema = $.outputSchema;
        this.table = $.table;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PreventionJobTriggerInspectJobActionSaveFindingsOutputConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PreventionJobTriggerInspectJobActionSaveFindingsOutputConfigArgs $;

        public Builder() {
            $ = new PreventionJobTriggerInspectJobActionSaveFindingsOutputConfigArgs();
        }

        public Builder(PreventionJobTriggerInspectJobActionSaveFindingsOutputConfigArgs defaults) {
            $ = new PreventionJobTriggerInspectJobActionSaveFindingsOutputConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param outputSchema Schema used for writing the findings for Inspect jobs. This field is only used for
         * Inspect and must be unspecified for Risk jobs. Columns are derived from the Finding
         * object. If appending to an existing table, any columns from the predefined schema
         * that are missing will be added. No columns in the existing table will be deleted.
         * If unspecified, then all available columns will be used for a new table or an (existing)
         * table with no schema, and no changes will be made to an existing table that has a schema.
         * Only for use with external storage.
         * Possible values are `BASIC_COLUMNS`, `GCS_COLUMNS`, `DATASTORE_COLUMNS`, `BIG_QUERY_COLUMNS`, and `ALL_COLUMNS`.
         * 
         * @return builder
         * 
         */
        public Builder outputSchema(@Nullable Output<String> outputSchema) {
            $.outputSchema = outputSchema;
            return this;
        }

        /**
         * @param outputSchema Schema used for writing the findings for Inspect jobs. This field is only used for
         * Inspect and must be unspecified for Risk jobs. Columns are derived from the Finding
         * object. If appending to an existing table, any columns from the predefined schema
         * that are missing will be added. No columns in the existing table will be deleted.
         * If unspecified, then all available columns will be used for a new table or an (existing)
         * table with no schema, and no changes will be made to an existing table that has a schema.
         * Only for use with external storage.
         * Possible values are `BASIC_COLUMNS`, `GCS_COLUMNS`, `DATASTORE_COLUMNS`, `BIG_QUERY_COLUMNS`, and `ALL_COLUMNS`.
         * 
         * @return builder
         * 
         */
        public Builder outputSchema(String outputSchema) {
            return outputSchema(Output.of(outputSchema));
        }

        /**
         * @param table Information on the location of the target BigQuery Table.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder table(Output<PreventionJobTriggerInspectJobActionSaveFindingsOutputConfigTableArgs> table) {
            $.table = table;
            return this;
        }

        /**
         * @param table Information on the location of the target BigQuery Table.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder table(PreventionJobTriggerInspectJobActionSaveFindingsOutputConfigTableArgs table) {
            return table(Output.of(table));
        }

        public PreventionJobTriggerInspectJobActionSaveFindingsOutputConfigArgs build() {
            $.table = Objects.requireNonNull($.table, "expected parameter 'table' to be non-null");
            return $;
        }
    }

}
