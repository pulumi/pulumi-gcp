// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.identityplatform.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.identityplatform.inputs.ConfigMfaProviderConfigArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConfigMfaArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConfigMfaArgs Empty = new ConfigMfaArgs();

    /**
     * A list of usable second factors for this project.
     * Each value may be one of: `PHONE_SMS`.
     * 
     */
    @Import(name="enabledProviders")
    private @Nullable Output<List<String>> enabledProviders;

    /**
     * @return A list of usable second factors for this project.
     * Each value may be one of: `PHONE_SMS`.
     * 
     */
    public Optional<Output<List<String>>> enabledProviders() {
        return Optional.ofNullable(this.enabledProviders);
    }

    /**
     * A list of usable second factors for this project along with their configurations.
     * This field does not support phone based MFA, for that use the &#39;enabledProviders&#39; field.
     * Structure is documented below.
     * 
     */
    @Import(name="providerConfigs")
    private @Nullable Output<List<ConfigMfaProviderConfigArgs>> providerConfigs;

    /**
     * @return A list of usable second factors for this project along with their configurations.
     * This field does not support phone based MFA, for that use the &#39;enabledProviders&#39; field.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<ConfigMfaProviderConfigArgs>>> providerConfigs() {
        return Optional.ofNullable(this.providerConfigs);
    }

    /**
     * Whether MultiFactor Authentication has been enabled for this project.
     * Possible values are: `DISABLED`, `ENABLED`, `MANDATORY`.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return Whether MultiFactor Authentication has been enabled for this project.
     * Possible values are: `DISABLED`, `ENABLED`, `MANDATORY`.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    private ConfigMfaArgs() {}

    private ConfigMfaArgs(ConfigMfaArgs $) {
        this.enabledProviders = $.enabledProviders;
        this.providerConfigs = $.providerConfigs;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConfigMfaArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConfigMfaArgs $;

        public Builder() {
            $ = new ConfigMfaArgs();
        }

        public Builder(ConfigMfaArgs defaults) {
            $ = new ConfigMfaArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enabledProviders A list of usable second factors for this project.
         * Each value may be one of: `PHONE_SMS`.
         * 
         * @return builder
         * 
         */
        public Builder enabledProviders(@Nullable Output<List<String>> enabledProviders) {
            $.enabledProviders = enabledProviders;
            return this;
        }

        /**
         * @param enabledProviders A list of usable second factors for this project.
         * Each value may be one of: `PHONE_SMS`.
         * 
         * @return builder
         * 
         */
        public Builder enabledProviders(List<String> enabledProviders) {
            return enabledProviders(Output.of(enabledProviders));
        }

        /**
         * @param enabledProviders A list of usable second factors for this project.
         * Each value may be one of: `PHONE_SMS`.
         * 
         * @return builder
         * 
         */
        public Builder enabledProviders(String... enabledProviders) {
            return enabledProviders(List.of(enabledProviders));
        }

        /**
         * @param providerConfigs A list of usable second factors for this project along with their configurations.
         * This field does not support phone based MFA, for that use the &#39;enabledProviders&#39; field.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder providerConfigs(@Nullable Output<List<ConfigMfaProviderConfigArgs>> providerConfigs) {
            $.providerConfigs = providerConfigs;
            return this;
        }

        /**
         * @param providerConfigs A list of usable second factors for this project along with their configurations.
         * This field does not support phone based MFA, for that use the &#39;enabledProviders&#39; field.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder providerConfigs(List<ConfigMfaProviderConfigArgs> providerConfigs) {
            return providerConfigs(Output.of(providerConfigs));
        }

        /**
         * @param providerConfigs A list of usable second factors for this project along with their configurations.
         * This field does not support phone based MFA, for that use the &#39;enabledProviders&#39; field.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder providerConfigs(ConfigMfaProviderConfigArgs... providerConfigs) {
            return providerConfigs(List.of(providerConfigs));
        }

        /**
         * @param state Whether MultiFactor Authentication has been enabled for this project.
         * Possible values are: `DISABLED`, `ENABLED`, `MANDATORY`.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state Whether MultiFactor Authentication has been enabled for this project.
         * Possible values are: `DISABLED`, `ENABLED`, `MANDATORY`.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        public ConfigMfaArgs build() {
            return $;
        }
    }

}
