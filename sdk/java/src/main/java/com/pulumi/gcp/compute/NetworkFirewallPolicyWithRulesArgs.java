// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.compute.inputs.NetworkFirewallPolicyWithRulesRuleArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NetworkFirewallPolicyWithRulesArgs extends com.pulumi.resources.ResourceArgs {

    public static final NetworkFirewallPolicyWithRulesArgs Empty = new NetworkFirewallPolicyWithRulesArgs();

    /**
     * An optional description of this resource.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return An optional description of this resource.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * User-provided name of the Network firewall policy.
     * The name should be unique in the project in which the firewall policy is created.
     * The name must be 1-63 characters long, and comply with RFC1035. Specifically,
     * the name must be 1-63 characters long and match the regular expression a-z?
     * which means the first character must be a lowercase letter, and all following characters must be a dash,
     * lowercase letter, or digit, except the last character, which cannot be a dash.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return User-provided name of the Network firewall policy.
     * The name should be unique in the project in which the firewall policy is created.
     * The name must be 1-63 characters long, and comply with RFC1035. Specifically,
     * the name must be 1-63 characters long and match the regular expression a-z?
     * which means the first character must be a lowercase letter, and all following characters must be a dash,
     * lowercase letter, or digit, except the last character, which cannot be a dash.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Policy type is used to determine which resources (networks) the policy can be associated with.
     * A policy can be associated with a network only if the network has the matching policyType in its network profile.
     * Different policy types may support some of the Firewall Rules features.
     * Possible values are: `VPC_POLICY`.
     * 
     */
    @Import(name="policyType")
    private @Nullable Output<String> policyType;

    /**
     * @return Policy type is used to determine which resources (networks) the policy can be associated with.
     * A policy can be associated with a network only if the network has the matching policyType in its network profile.
     * Different policy types may support some of the Firewall Rules features.
     * Possible values are: `VPC_POLICY`.
     * 
     */
    public Optional<Output<String>> policyType() {
        return Optional.ofNullable(this.policyType);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * A list of firewall policy rules.
     * Structure is documented below.
     * 
     */
    @Import(name="rules", required=true)
    private Output<List<NetworkFirewallPolicyWithRulesRuleArgs>> rules;

    /**
     * @return A list of firewall policy rules.
     * Structure is documented below.
     * 
     */
    public Output<List<NetworkFirewallPolicyWithRulesRuleArgs>> rules() {
        return this.rules;
    }

    private NetworkFirewallPolicyWithRulesArgs() {}

    private NetworkFirewallPolicyWithRulesArgs(NetworkFirewallPolicyWithRulesArgs $) {
        this.description = $.description;
        this.name = $.name;
        this.policyType = $.policyType;
        this.project = $.project;
        this.rules = $.rules;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetworkFirewallPolicyWithRulesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetworkFirewallPolicyWithRulesArgs $;

        public Builder() {
            $ = new NetworkFirewallPolicyWithRulesArgs();
        }

        public Builder(NetworkFirewallPolicyWithRulesArgs defaults) {
            $ = new NetworkFirewallPolicyWithRulesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description An optional description of this resource.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description An optional description of this resource.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param name User-provided name of the Network firewall policy.
         * The name should be unique in the project in which the firewall policy is created.
         * The name must be 1-63 characters long, and comply with RFC1035. Specifically,
         * the name must be 1-63 characters long and match the regular expression a-z?
         * which means the first character must be a lowercase letter, and all following characters must be a dash,
         * lowercase letter, or digit, except the last character, which cannot be a dash.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name User-provided name of the Network firewall policy.
         * The name should be unique in the project in which the firewall policy is created.
         * The name must be 1-63 characters long, and comply with RFC1035. Specifically,
         * the name must be 1-63 characters long and match the regular expression a-z?
         * which means the first character must be a lowercase letter, and all following characters must be a dash,
         * lowercase letter, or digit, except the last character, which cannot be a dash.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param policyType Policy type is used to determine which resources (networks) the policy can be associated with.
         * A policy can be associated with a network only if the network has the matching policyType in its network profile.
         * Different policy types may support some of the Firewall Rules features.
         * Possible values are: `VPC_POLICY`.
         * 
         * @return builder
         * 
         */
        public Builder policyType(@Nullable Output<String> policyType) {
            $.policyType = policyType;
            return this;
        }

        /**
         * @param policyType Policy type is used to determine which resources (networks) the policy can be associated with.
         * A policy can be associated with a network only if the network has the matching policyType in its network profile.
         * Different policy types may support some of the Firewall Rules features.
         * Possible values are: `VPC_POLICY`.
         * 
         * @return builder
         * 
         */
        public Builder policyType(String policyType) {
            return policyType(Output.of(policyType));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param rules A list of firewall policy rules.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder rules(Output<List<NetworkFirewallPolicyWithRulesRuleArgs>> rules) {
            $.rules = rules;
            return this;
        }

        /**
         * @param rules A list of firewall policy rules.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder rules(List<NetworkFirewallPolicyWithRulesRuleArgs> rules) {
            return rules(Output.of(rules));
        }

        /**
         * @param rules A list of firewall policy rules.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder rules(NetworkFirewallPolicyWithRulesRuleArgs... rules) {
            return rules(List.of(rules));
        }

        public NetworkFirewallPolicyWithRulesArgs build() {
            if ($.rules == null) {
                throw new MissingRequiredPropertyException("NetworkFirewallPolicyWithRulesArgs", "rules");
            }
            return $;
        }
    }

}
