// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.compute.outputs.GetMachineTypesMachineTypeAccelerator;
import com.pulumi.gcp.compute.outputs.GetMachineTypesMachineTypeBundledLocalSsd;
import com.pulumi.gcp.compute.outputs.GetMachineTypesMachineTypeDeprecated;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetMachineTypesMachineType {
    /**
     * @return A list of accelerator configurations assigned to this machine type. Structure is documented below.
     * 
     */
    private List<GetMachineTypesMachineTypeAccelerator> accelerators;
    /**
     * @return The configuration of bundled local SSD for the machine type. Structure is documented below.
     * 
     */
    private List<GetMachineTypesMachineTypeBundledLocalSsd> bundledLocalSsds;
    /**
     * @return The deprecation status associated with this machine type. Structure is documented below.
     * 
     */
    private List<GetMachineTypesMachineTypeDeprecated> deprecateds;
    /**
     * @return A textual description of the machine type.
     * 
     */
    private String description;
    /**
     * @return The number of virtual CPUs that are available to the instance.
     * 
     */
    private Integer guestCpus;
    /**
     * @return Whether this machine type has a shared CPU.
     * 
     */
    private Boolean isSharedCpus;
    /**
     * @return The maximum persistent disks allowed.
     * 
     */
    private Integer maximumPersistentDisks;
    /**
     * @return The maximum total persistent disks size (GB) allowed.
     * 
     */
    private Integer maximumPersistentDisksSizeGb;
    /**
     * @return The amount of physical memory available to the instance, defined in MB.
     * 
     */
    private Integer memoryMb;
    /**
     * @return The name of the machine type.
     * 
     */
    private String name;
    /**
     * @return The server-defined URL for the machine type.
     * 
     */
    private String selfLink;

    private GetMachineTypesMachineType() {}
    /**
     * @return A list of accelerator configurations assigned to this machine type. Structure is documented below.
     * 
     */
    public List<GetMachineTypesMachineTypeAccelerator> accelerators() {
        return this.accelerators;
    }
    /**
     * @return The configuration of bundled local SSD for the machine type. Structure is documented below.
     * 
     */
    public List<GetMachineTypesMachineTypeBundledLocalSsd> bundledLocalSsds() {
        return this.bundledLocalSsds;
    }
    /**
     * @return The deprecation status associated with this machine type. Structure is documented below.
     * 
     */
    public List<GetMachineTypesMachineTypeDeprecated> deprecateds() {
        return this.deprecateds;
    }
    /**
     * @return A textual description of the machine type.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The number of virtual CPUs that are available to the instance.
     * 
     */
    public Integer guestCpus() {
        return this.guestCpus;
    }
    /**
     * @return Whether this machine type has a shared CPU.
     * 
     */
    public Boolean isSharedCpus() {
        return this.isSharedCpus;
    }
    /**
     * @return The maximum persistent disks allowed.
     * 
     */
    public Integer maximumPersistentDisks() {
        return this.maximumPersistentDisks;
    }
    /**
     * @return The maximum total persistent disks size (GB) allowed.
     * 
     */
    public Integer maximumPersistentDisksSizeGb() {
        return this.maximumPersistentDisksSizeGb;
    }
    /**
     * @return The amount of physical memory available to the instance, defined in MB.
     * 
     */
    public Integer memoryMb() {
        return this.memoryMb;
    }
    /**
     * @return The name of the machine type.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The server-defined URL for the machine type.
     * 
     */
    public String selfLink() {
        return this.selfLink;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMachineTypesMachineType defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetMachineTypesMachineTypeAccelerator> accelerators;
        private List<GetMachineTypesMachineTypeBundledLocalSsd> bundledLocalSsds;
        private List<GetMachineTypesMachineTypeDeprecated> deprecateds;
        private String description;
        private Integer guestCpus;
        private Boolean isSharedCpus;
        private Integer maximumPersistentDisks;
        private Integer maximumPersistentDisksSizeGb;
        private Integer memoryMb;
        private String name;
        private String selfLink;
        public Builder() {}
        public Builder(GetMachineTypesMachineType defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accelerators = defaults.accelerators;
    	      this.bundledLocalSsds = defaults.bundledLocalSsds;
    	      this.deprecateds = defaults.deprecateds;
    	      this.description = defaults.description;
    	      this.guestCpus = defaults.guestCpus;
    	      this.isSharedCpus = defaults.isSharedCpus;
    	      this.maximumPersistentDisks = defaults.maximumPersistentDisks;
    	      this.maximumPersistentDisksSizeGb = defaults.maximumPersistentDisksSizeGb;
    	      this.memoryMb = defaults.memoryMb;
    	      this.name = defaults.name;
    	      this.selfLink = defaults.selfLink;
        }

        @CustomType.Setter
        public Builder accelerators(List<GetMachineTypesMachineTypeAccelerator> accelerators) {
            if (accelerators == null) {
              throw new MissingRequiredPropertyException("GetMachineTypesMachineType", "accelerators");
            }
            this.accelerators = accelerators;
            return this;
        }
        public Builder accelerators(GetMachineTypesMachineTypeAccelerator... accelerators) {
            return accelerators(List.of(accelerators));
        }
        @CustomType.Setter
        public Builder bundledLocalSsds(List<GetMachineTypesMachineTypeBundledLocalSsd> bundledLocalSsds) {
            if (bundledLocalSsds == null) {
              throw new MissingRequiredPropertyException("GetMachineTypesMachineType", "bundledLocalSsds");
            }
            this.bundledLocalSsds = bundledLocalSsds;
            return this;
        }
        public Builder bundledLocalSsds(GetMachineTypesMachineTypeBundledLocalSsd... bundledLocalSsds) {
            return bundledLocalSsds(List.of(bundledLocalSsds));
        }
        @CustomType.Setter
        public Builder deprecateds(List<GetMachineTypesMachineTypeDeprecated> deprecateds) {
            if (deprecateds == null) {
              throw new MissingRequiredPropertyException("GetMachineTypesMachineType", "deprecateds");
            }
            this.deprecateds = deprecateds;
            return this;
        }
        public Builder deprecateds(GetMachineTypesMachineTypeDeprecated... deprecateds) {
            return deprecateds(List.of(deprecateds));
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetMachineTypesMachineType", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder guestCpus(Integer guestCpus) {
            if (guestCpus == null) {
              throw new MissingRequiredPropertyException("GetMachineTypesMachineType", "guestCpus");
            }
            this.guestCpus = guestCpus;
            return this;
        }
        @CustomType.Setter
        public Builder isSharedCpus(Boolean isSharedCpus) {
            if (isSharedCpus == null) {
              throw new MissingRequiredPropertyException("GetMachineTypesMachineType", "isSharedCpus");
            }
            this.isSharedCpus = isSharedCpus;
            return this;
        }
        @CustomType.Setter
        public Builder maximumPersistentDisks(Integer maximumPersistentDisks) {
            if (maximumPersistentDisks == null) {
              throw new MissingRequiredPropertyException("GetMachineTypesMachineType", "maximumPersistentDisks");
            }
            this.maximumPersistentDisks = maximumPersistentDisks;
            return this;
        }
        @CustomType.Setter
        public Builder maximumPersistentDisksSizeGb(Integer maximumPersistentDisksSizeGb) {
            if (maximumPersistentDisksSizeGb == null) {
              throw new MissingRequiredPropertyException("GetMachineTypesMachineType", "maximumPersistentDisksSizeGb");
            }
            this.maximumPersistentDisksSizeGb = maximumPersistentDisksSizeGb;
            return this;
        }
        @CustomType.Setter
        public Builder memoryMb(Integer memoryMb) {
            if (memoryMb == null) {
              throw new MissingRequiredPropertyException("GetMachineTypesMachineType", "memoryMb");
            }
            this.memoryMb = memoryMb;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetMachineTypesMachineType", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder selfLink(String selfLink) {
            if (selfLink == null) {
              throw new MissingRequiredPropertyException("GetMachineTypesMachineType", "selfLink");
            }
            this.selfLink = selfLink;
            return this;
        }
        public GetMachineTypesMachineType build() {
            final var _resultValue = new GetMachineTypesMachineType();
            _resultValue.accelerators = accelerators;
            _resultValue.bundledLocalSsds = bundledLocalSsds;
            _resultValue.deprecateds = deprecateds;
            _resultValue.description = description;
            _resultValue.guestCpus = guestCpus;
            _resultValue.isSharedCpus = isSharedCpus;
            _resultValue.maximumPersistentDisks = maximumPersistentDisks;
            _resultValue.maximumPersistentDisksSizeGb = maximumPersistentDisksSizeGb;
            _resultValue.memoryMb = memoryMb;
            _resultValue.name = name;
            _resultValue.selfLink = selfLink;
            return _resultValue;
        }
    }
}
