// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.compute.RegionUrlMapArgs;
import com.pulumi.gcp.compute.inputs.RegionUrlMapState;
import com.pulumi.gcp.compute.outputs.RegionUrlMapDefaultRouteAction;
import com.pulumi.gcp.compute.outputs.RegionUrlMapDefaultUrlRedirect;
import com.pulumi.gcp.compute.outputs.RegionUrlMapHostRule;
import com.pulumi.gcp.compute.outputs.RegionUrlMapPathMatcher;
import com.pulumi.gcp.compute.outputs.RegionUrlMapTest;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * UrlMaps are used to route requests to a backend service based on rules
 * that you define for the host and path of an incoming URL.
 * 
 * ## Example Usage
 * 
 * ### Region Url Map Basic
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.RegionHealthCheck;
 * import com.pulumi.gcp.compute.RegionHealthCheckArgs;
 * import com.pulumi.gcp.compute.inputs.RegionHealthCheckHttpHealthCheckArgs;
 * import com.pulumi.gcp.compute.RegionBackendService;
 * import com.pulumi.gcp.compute.RegionBackendServiceArgs;
 * import com.pulumi.gcp.compute.RegionUrlMap;
 * import com.pulumi.gcp.compute.RegionUrlMapArgs;
 * import com.pulumi.gcp.compute.inputs.RegionUrlMapHostRuleArgs;
 * import com.pulumi.gcp.compute.inputs.RegionUrlMapPathMatcherArgs;
 * import com.pulumi.gcp.compute.inputs.RegionUrlMapTestArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var default_ = new RegionHealthCheck(&#34;default&#34;, RegionHealthCheckArgs.builder()        
 *             .region(&#34;us-central1&#34;)
 *             .name(&#34;health-check&#34;)
 *             .checkIntervalSec(1)
 *             .timeoutSec(1)
 *             .httpHealthCheck(RegionHealthCheckHttpHealthCheckArgs.builder()
 *                 .port(80)
 *                 .requestPath(&#34;/&#34;)
 *                 .build())
 *             .build());
 * 
 *         var login = new RegionBackendService(&#34;login&#34;, RegionBackendServiceArgs.builder()        
 *             .region(&#34;us-central1&#34;)
 *             .name(&#34;login&#34;)
 *             .protocol(&#34;HTTP&#34;)
 *             .loadBalancingScheme(&#34;INTERNAL_MANAGED&#34;)
 *             .timeoutSec(10)
 *             .healthChecks(default_.id())
 *             .build());
 * 
 *         var home = new RegionBackendService(&#34;home&#34;, RegionBackendServiceArgs.builder()        
 *             .region(&#34;us-central1&#34;)
 *             .name(&#34;home&#34;)
 *             .protocol(&#34;HTTP&#34;)
 *             .loadBalancingScheme(&#34;INTERNAL_MANAGED&#34;)
 *             .timeoutSec(10)
 *             .healthChecks(default_.id())
 *             .build());
 * 
 *         var regionurlmap = new RegionUrlMap(&#34;regionurlmap&#34;, RegionUrlMapArgs.builder()        
 *             .region(&#34;us-central1&#34;)
 *             .name(&#34;regionurlmap&#34;)
 *             .description(&#34;a description&#34;)
 *             .defaultService(home.id())
 *             .hostRules(RegionUrlMapHostRuleArgs.builder()
 *                 .hosts(&#34;mysite.com&#34;)
 *                 .pathMatcher(&#34;allpaths&#34;)
 *                 .build())
 *             .pathMatchers(RegionUrlMapPathMatcherArgs.builder()
 *                 .name(&#34;allpaths&#34;)
 *                 .defaultService(home.id())
 *                 .pathRules(                
 *                     RegionUrlMapPathMatcherPathRuleArgs.builder()
 *                         .paths(&#34;/home&#34;)
 *                         .service(home.id())
 *                         .build(),
 *                     RegionUrlMapPathMatcherPathRuleArgs.builder()
 *                         .paths(&#34;/login&#34;)
 *                         .service(login.id())
 *                         .build())
 *                 .build())
 *             .tests(RegionUrlMapTestArgs.builder()
 *                 .service(home.id())
 *                 .host(&#34;hi.com&#34;)
 *                 .path(&#34;/home&#34;)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Region Url Map Default Route Action
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.RegionHealthCheck;
 * import com.pulumi.gcp.compute.RegionHealthCheckArgs;
 * import com.pulumi.gcp.compute.inputs.RegionHealthCheckHttpHealthCheckArgs;
 * import com.pulumi.gcp.compute.RegionBackendService;
 * import com.pulumi.gcp.compute.RegionBackendServiceArgs;
 * import com.pulumi.gcp.compute.RegionUrlMap;
 * import com.pulumi.gcp.compute.RegionUrlMapArgs;
 * import com.pulumi.gcp.compute.inputs.RegionUrlMapDefaultRouteActionArgs;
 * import com.pulumi.gcp.compute.inputs.RegionUrlMapDefaultRouteActionRetryPolicyArgs;
 * import com.pulumi.gcp.compute.inputs.RegionUrlMapDefaultRouteActionRetryPolicyPerTryTimeoutArgs;
 * import com.pulumi.gcp.compute.inputs.RegionUrlMapDefaultRouteActionRequestMirrorPolicyArgs;
 * import com.pulumi.gcp.compute.inputs.RegionUrlMapDefaultRouteActionUrlRewriteArgs;
 * import com.pulumi.gcp.compute.inputs.RegionUrlMapDefaultRouteActionCorsPolicyArgs;
 * import com.pulumi.gcp.compute.inputs.RegionUrlMapDefaultRouteActionFaultInjectionPolicyArgs;
 * import com.pulumi.gcp.compute.inputs.RegionUrlMapDefaultRouteActionFaultInjectionPolicyDelayArgs;
 * import com.pulumi.gcp.compute.inputs.RegionUrlMapDefaultRouteActionFaultInjectionPolicyDelayFixedDelayArgs;
 * import com.pulumi.gcp.compute.inputs.RegionUrlMapDefaultRouteActionFaultInjectionPolicyAbortArgs;
 * import com.pulumi.gcp.compute.inputs.RegionUrlMapDefaultRouteActionTimeoutArgs;
 * import com.pulumi.gcp.compute.inputs.RegionUrlMapHostRuleArgs;
 * import com.pulumi.gcp.compute.inputs.RegionUrlMapPathMatcherArgs;
 * import com.pulumi.gcp.compute.inputs.RegionUrlMapTestArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var default_ = new RegionHealthCheck(&#34;default&#34;, RegionHealthCheckArgs.builder()        
 *             .region(&#34;us-central1&#34;)
 *             .name(&#34;health-check&#34;)
 *             .checkIntervalSec(1)
 *             .timeoutSec(1)
 *             .httpHealthCheck(RegionHealthCheckHttpHealthCheckArgs.builder()
 *                 .port(80)
 *                 .requestPath(&#34;/&#34;)
 *                 .build())
 *             .build());
 * 
 *         var login = new RegionBackendService(&#34;login&#34;, RegionBackendServiceArgs.builder()        
 *             .region(&#34;us-central1&#34;)
 *             .name(&#34;login&#34;)
 *             .protocol(&#34;HTTP&#34;)
 *             .loadBalancingScheme(&#34;INTERNAL_MANAGED&#34;)
 *             .timeoutSec(10)
 *             .healthChecks(default_.id())
 *             .build());
 * 
 *         var home = new RegionBackendService(&#34;home&#34;, RegionBackendServiceArgs.builder()        
 *             .region(&#34;us-central1&#34;)
 *             .name(&#34;home&#34;)
 *             .protocol(&#34;HTTP&#34;)
 *             .loadBalancingScheme(&#34;INTERNAL_MANAGED&#34;)
 *             .timeoutSec(10)
 *             .healthChecks(default_.id())
 *             .build());
 * 
 *         var regionurlmap = new RegionUrlMap(&#34;regionurlmap&#34;, RegionUrlMapArgs.builder()        
 *             .region(&#34;us-central1&#34;)
 *             .name(&#34;regionurlmap&#34;)
 *             .description(&#34;a description&#34;)
 *             .defaultRouteAction(RegionUrlMapDefaultRouteActionArgs.builder()
 *                 .retryPolicy(RegionUrlMapDefaultRouteActionRetryPolicyArgs.builder()
 *                     .retryConditions(                    
 *                         &#34;5xx&#34;,
 *                         &#34;gateway-error&#34;)
 *                     .numRetries(3)
 *                     .perTryTimeout(RegionUrlMapDefaultRouteActionRetryPolicyPerTryTimeoutArgs.builder()
 *                         .seconds(0)
 *                         .nanos(500)
 *                         .build())
 *                     .build())
 *                 .requestMirrorPolicy(RegionUrlMapDefaultRouteActionRequestMirrorPolicyArgs.builder()
 *                     .backendService(home.id())
 *                     .build())
 *                 .weightedBackendServices(                
 *                     RegionUrlMapDefaultRouteActionWeightedBackendServiceArgs.builder()
 *                         .backendService(login.id())
 *                         .weight(200)
 *                         .headerAction(RegionUrlMapDefaultRouteActionWeightedBackendServiceHeaderActionArgs.builder()
 *                             .requestHeadersToAdds(RegionUrlMapDefaultRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArgs.builder()
 *                                 .headerName(&#34;foo-request-1&#34;)
 *                                 .headerValue(&#34;bar&#34;)
 *                                 .replace(true)
 *                                 .build())
 *                             .requestHeadersToRemoves(&#34;fizz&#34;)
 *                             .responseHeadersToAdds(RegionUrlMapDefaultRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArgs.builder()
 *                                 .headerName(&#34;foo-response-1&#34;)
 *                                 .headerValue(&#34;bar&#34;)
 *                                 .replace(true)
 *                                 .build())
 *                             .responseHeadersToRemoves(&#34;buzz&#34;)
 *                             .build())
 *                         .build(),
 *                     RegionUrlMapDefaultRouteActionWeightedBackendServiceArgs.builder()
 *                         .backendService(home.id())
 *                         .weight(100)
 *                         .headerAction(RegionUrlMapDefaultRouteActionWeightedBackendServiceHeaderActionArgs.builder()
 *                             .requestHeadersToAdds(                            
 *                                 RegionUrlMapDefaultRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArgs.builder()
 *                                     .headerName(&#34;foo-request-1&#34;)
 *                                     .headerValue(&#34;bar&#34;)
 *                                     .replace(true)
 *                                     .build(),
 *                                 RegionUrlMapDefaultRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArgs.builder()
 *                                     .headerName(&#34;foo-request-2&#34;)
 *                                     .headerValue(&#34;bar&#34;)
 *                                     .replace(true)
 *                                     .build())
 *                             .requestHeadersToRemoves(&#34;fizz&#34;)
 *                             .responseHeadersToAdds(                            
 *                                 RegionUrlMapDefaultRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArgs.builder()
 *                                     .headerName(&#34;foo-response-2&#34;)
 *                                     .headerValue(&#34;bar&#34;)
 *                                     .replace(true)
 *                                     .build(),
 *                                 RegionUrlMapDefaultRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArgs.builder()
 *                                     .headerName(&#34;foo-response-1&#34;)
 *                                     .headerValue(&#34;bar&#34;)
 *                                     .replace(true)
 *                                     .build())
 *                             .responseHeadersToRemoves(&#34;buzz&#34;)
 *                             .build())
 *                         .build())
 *                 .urlRewrite(RegionUrlMapDefaultRouteActionUrlRewriteArgs.builder()
 *                     .hostRewrite(&#34;dev.example.com&#34;)
 *                     .pathPrefixRewrite(&#34;/v1/api/&#34;)
 *                     .build())
 *                 .corsPolicy(RegionUrlMapDefaultRouteActionCorsPolicyArgs.builder()
 *                     .disabled(false)
 *                     .allowCredentials(true)
 *                     .allowHeaders(&#34;foobar&#34;)
 *                     .allowMethods(                    
 *                         &#34;GET&#34;,
 *                         &#34;POST&#34;)
 *                     .allowOrigins(&#34;example.com&#34;)
 *                     .exposeHeaders(&#34;foobar&#34;)
 *                     .maxAge(60)
 *                     .build())
 *                 .faultInjectionPolicy(RegionUrlMapDefaultRouteActionFaultInjectionPolicyArgs.builder()
 *                     .delay(RegionUrlMapDefaultRouteActionFaultInjectionPolicyDelayArgs.builder()
 *                         .fixedDelay(RegionUrlMapDefaultRouteActionFaultInjectionPolicyDelayFixedDelayArgs.builder()
 *                             .seconds(0)
 *                             .nanos(500)
 *                             .build())
 *                         .percentage(0.5)
 *                         .build())
 *                     .abort(RegionUrlMapDefaultRouteActionFaultInjectionPolicyAbortArgs.builder()
 *                         .httpStatus(500)
 *                         .percentage(0.5)
 *                         .build())
 *                     .build())
 *                 .timeout(RegionUrlMapDefaultRouteActionTimeoutArgs.builder()
 *                     .seconds(0)
 *                     .nanos(500)
 *                     .build())
 *                 .build())
 *             .hostRules(RegionUrlMapHostRuleArgs.builder()
 *                 .hosts(&#34;mysite.com&#34;)
 *                 .pathMatcher(&#34;allpaths&#34;)
 *                 .build())
 *             .pathMatchers(RegionUrlMapPathMatcherArgs.builder()
 *                 .name(&#34;allpaths&#34;)
 *                 .defaultService(home.id())
 *                 .pathRules(                
 *                     RegionUrlMapPathMatcherPathRuleArgs.builder()
 *                         .paths(&#34;/home&#34;)
 *                         .service(home.id())
 *                         .build(),
 *                     RegionUrlMapPathMatcherPathRuleArgs.builder()
 *                         .paths(&#34;/login&#34;)
 *                         .service(login.id())
 *                         .build())
 *                 .build())
 *             .tests(RegionUrlMapTestArgs.builder()
 *                 .service(home.id())
 *                 .host(&#34;hi.com&#34;)
 *                 .path(&#34;/home&#34;)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Region Url Map L7 Ilb Path
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.RegionHealthCheck;
 * import com.pulumi.gcp.compute.RegionHealthCheckArgs;
 * import com.pulumi.gcp.compute.inputs.RegionHealthCheckHttpHealthCheckArgs;
 * import com.pulumi.gcp.compute.RegionBackendService;
 * import com.pulumi.gcp.compute.RegionBackendServiceArgs;
 * import com.pulumi.gcp.compute.RegionUrlMap;
 * import com.pulumi.gcp.compute.RegionUrlMapArgs;
 * import com.pulumi.gcp.compute.inputs.RegionUrlMapHostRuleArgs;
 * import com.pulumi.gcp.compute.inputs.RegionUrlMapPathMatcherArgs;
 * import com.pulumi.gcp.compute.inputs.RegionUrlMapTestArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var default_ = new RegionHealthCheck(&#34;default&#34;, RegionHealthCheckArgs.builder()        
 *             .name(&#34;health-check&#34;)
 *             .httpHealthCheck(RegionHealthCheckHttpHealthCheckArgs.builder()
 *                 .port(80)
 *                 .build())
 *             .build());
 * 
 *         var home = new RegionBackendService(&#34;home&#34;, RegionBackendServiceArgs.builder()        
 *             .name(&#34;home&#34;)
 *             .protocol(&#34;HTTP&#34;)
 *             .timeoutSec(10)
 *             .healthChecks(default_.id())
 *             .loadBalancingScheme(&#34;INTERNAL_MANAGED&#34;)
 *             .build());
 * 
 *         var regionurlmap = new RegionUrlMap(&#34;regionurlmap&#34;, RegionUrlMapArgs.builder()        
 *             .name(&#34;regionurlmap&#34;)
 *             .description(&#34;a description&#34;)
 *             .defaultService(home.id())
 *             .hostRules(RegionUrlMapHostRuleArgs.builder()
 *                 .hosts(&#34;mysite.com&#34;)
 *                 .pathMatcher(&#34;allpaths&#34;)
 *                 .build())
 *             .pathMatchers(RegionUrlMapPathMatcherArgs.builder()
 *                 .name(&#34;allpaths&#34;)
 *                 .defaultService(home.id())
 *                 .pathRules(RegionUrlMapPathMatcherPathRuleArgs.builder()
 *                     .paths(&#34;/home&#34;)
 *                     .routeAction(RegionUrlMapPathMatcherPathRuleRouteActionArgs.builder()
 *                         .corsPolicy(RegionUrlMapPathMatcherPathRuleRouteActionCorsPolicyArgs.builder()
 *                             .allowCredentials(true)
 *                             .allowHeaders(&#34;Allowed content&#34;)
 *                             .allowMethods(&#34;GET&#34;)
 *                             .allowOrigins(&#34;Allowed origin&#34;)
 *                             .exposeHeaders(&#34;Exposed header&#34;)
 *                             .maxAge(30)
 *                             .disabled(false)
 *                             .build())
 *                         .faultInjectionPolicy(RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyArgs.builder()
 *                             .abort(RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyAbortArgs.builder()
 *                                 .httpStatus(234)
 *                                 .percentage(5.6)
 *                                 .build())
 *                             .delay(RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayArgs.builder()
 *                                 .fixedDelay(RegionUrlMapPathMatcherPathRuleRouteActionFaultInjectionPolicyDelayFixedDelayArgs.builder()
 *                                     .seconds(0)
 *                                     .nanos(50000)
 *                                     .build())
 *                                 .percentage(7.8)
 *                                 .build())
 *                             .build())
 *                         .requestMirrorPolicy(RegionUrlMapPathMatcherPathRuleRouteActionRequestMirrorPolicyArgs.builder()
 *                             .backendService(home.id())
 *                             .build())
 *                         .retryPolicy(RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyArgs.builder()
 *                             .numRetries(4)
 *                             .perTryTimeout(RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutArgs.builder()
 *                                 .seconds(30)
 *                                 .build())
 *                             .retryConditions(                            
 *                                 &#34;5xx&#34;,
 *                                 &#34;deadline-exceeded&#34;)
 *                             .build())
 *                         .timeout(RegionUrlMapPathMatcherPathRuleRouteActionTimeoutArgs.builder()
 *                             .seconds(20)
 *                             .nanos(750000000)
 *                             .build())
 *                         .urlRewrite(RegionUrlMapPathMatcherPathRuleRouteActionUrlRewriteArgs.builder()
 *                             .hostRewrite(&#34;dev.example.com&#34;)
 *                             .pathPrefixRewrite(&#34;/v1/api/&#34;)
 *                             .build())
 *                         .weightedBackendServices(RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceArgs.builder()
 *                             .backendService(home.id())
 *                             .weight(400)
 *                             .headerAction(RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionArgs.builder()
 *                                 .requestHeadersToRemoves(&#34;RemoveMe&#34;)
 *                                 .requestHeadersToAdds(RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionRequestHeadersToAddArgs.builder()
 *                                     .headerName(&#34;AddMe&#34;)
 *                                     .headerValue(&#34;MyValue&#34;)
 *                                     .replace(true)
 *                                     .build())
 *                                 .responseHeadersToRemoves(&#34;RemoveMe&#34;)
 *                                 .responseHeadersToAdds(RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArgs.builder()
 *                                     .headerName(&#34;AddMe&#34;)
 *                                     .headerValue(&#34;MyValue&#34;)
 *                                     .replace(false)
 *                                     .build())
 *                                 .build())
 *                             .build())
 *                         .build())
 *                     .build())
 *                 .build())
 *             .tests(RegionUrlMapTestArgs.builder()
 *                 .service(home.id())
 *                 .host(&#34;hi.com&#34;)
 *                 .path(&#34;/home&#34;)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Region Url Map L7 Ilb Path Partial
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.RegionHealthCheck;
 * import com.pulumi.gcp.compute.RegionHealthCheckArgs;
 * import com.pulumi.gcp.compute.inputs.RegionHealthCheckHttpHealthCheckArgs;
 * import com.pulumi.gcp.compute.RegionBackendService;
 * import com.pulumi.gcp.compute.RegionBackendServiceArgs;
 * import com.pulumi.gcp.compute.RegionUrlMap;
 * import com.pulumi.gcp.compute.RegionUrlMapArgs;
 * import com.pulumi.gcp.compute.inputs.RegionUrlMapHostRuleArgs;
 * import com.pulumi.gcp.compute.inputs.RegionUrlMapPathMatcherArgs;
 * import com.pulumi.gcp.compute.inputs.RegionUrlMapTestArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var default_ = new RegionHealthCheck(&#34;default&#34;, RegionHealthCheckArgs.builder()        
 *             .name(&#34;health-check&#34;)
 *             .httpHealthCheck(RegionHealthCheckHttpHealthCheckArgs.builder()
 *                 .port(80)
 *                 .build())
 *             .build());
 * 
 *         var home = new RegionBackendService(&#34;home&#34;, RegionBackendServiceArgs.builder()        
 *             .name(&#34;home&#34;)
 *             .protocol(&#34;HTTP&#34;)
 *             .timeoutSec(10)
 *             .healthChecks(default_.id())
 *             .loadBalancingScheme(&#34;INTERNAL_MANAGED&#34;)
 *             .build());
 * 
 *         var regionurlmap = new RegionUrlMap(&#34;regionurlmap&#34;, RegionUrlMapArgs.builder()        
 *             .name(&#34;regionurlmap&#34;)
 *             .description(&#34;a description&#34;)
 *             .defaultService(home.id())
 *             .hostRules(RegionUrlMapHostRuleArgs.builder()
 *                 .hosts(&#34;mysite.com&#34;)
 *                 .pathMatcher(&#34;allpaths&#34;)
 *                 .build())
 *             .pathMatchers(RegionUrlMapPathMatcherArgs.builder()
 *                 .name(&#34;allpaths&#34;)
 *                 .defaultService(home.id())
 *                 .pathRules(RegionUrlMapPathMatcherPathRuleArgs.builder()
 *                     .paths(&#34;/home&#34;)
 *                     .routeAction(RegionUrlMapPathMatcherPathRuleRouteActionArgs.builder()
 *                         .retryPolicy(RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyArgs.builder()
 *                             .numRetries(4)
 *                             .perTryTimeout(RegionUrlMapPathMatcherPathRuleRouteActionRetryPolicyPerTryTimeoutArgs.builder()
 *                                 .seconds(30)
 *                                 .build())
 *                             .retryConditions(                            
 *                                 &#34;5xx&#34;,
 *                                 &#34;deadline-exceeded&#34;)
 *                             .build())
 *                         .timeout(RegionUrlMapPathMatcherPathRuleRouteActionTimeoutArgs.builder()
 *                             .seconds(20)
 *                             .nanos(750000000)
 *                             .build())
 *                         .urlRewrite(RegionUrlMapPathMatcherPathRuleRouteActionUrlRewriteArgs.builder()
 *                             .hostRewrite(&#34;dev.example.com&#34;)
 *                             .pathPrefixRewrite(&#34;/v1/api/&#34;)
 *                             .build())
 *                         .weightedBackendServices(RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceArgs.builder()
 *                             .backendService(home.id())
 *                             .weight(400)
 *                             .headerAction(RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionArgs.builder()
 *                                 .responseHeadersToAdds(RegionUrlMapPathMatcherPathRuleRouteActionWeightedBackendServiceHeaderActionResponseHeadersToAddArgs.builder()
 *                                     .headerName(&#34;AddMe&#34;)
 *                                     .headerValue(&#34;MyValue&#34;)
 *                                     .replace(false)
 *                                     .build())
 *                                 .build())
 *                             .build())
 *                         .build())
 *                     .build())
 *                 .build())
 *             .tests(RegionUrlMapTestArgs.builder()
 *                 .service(home.id())
 *                 .host(&#34;hi.com&#34;)
 *                 .path(&#34;/home&#34;)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Region Url Map L7 Ilb Route
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.RegionHealthCheck;
 * import com.pulumi.gcp.compute.RegionHealthCheckArgs;
 * import com.pulumi.gcp.compute.inputs.RegionHealthCheckHttpHealthCheckArgs;
 * import com.pulumi.gcp.compute.RegionBackendService;
 * import com.pulumi.gcp.compute.RegionBackendServiceArgs;
 * import com.pulumi.gcp.compute.RegionUrlMap;
 * import com.pulumi.gcp.compute.RegionUrlMapArgs;
 * import com.pulumi.gcp.compute.inputs.RegionUrlMapHostRuleArgs;
 * import com.pulumi.gcp.compute.inputs.RegionUrlMapPathMatcherArgs;
 * import com.pulumi.gcp.compute.inputs.RegionUrlMapTestArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var default_ = new RegionHealthCheck(&#34;default&#34;, RegionHealthCheckArgs.builder()        
 *             .name(&#34;health-check&#34;)
 *             .httpHealthCheck(RegionHealthCheckHttpHealthCheckArgs.builder()
 *                 .port(80)
 *                 .build())
 *             .build());
 * 
 *         var home = new RegionBackendService(&#34;home&#34;, RegionBackendServiceArgs.builder()        
 *             .name(&#34;home&#34;)
 *             .protocol(&#34;HTTP&#34;)
 *             .timeoutSec(10)
 *             .healthChecks(default_.id())
 *             .loadBalancingScheme(&#34;INTERNAL_MANAGED&#34;)
 *             .build());
 * 
 *         var regionurlmap = new RegionUrlMap(&#34;regionurlmap&#34;, RegionUrlMapArgs.builder()        
 *             .name(&#34;regionurlmap&#34;)
 *             .description(&#34;a description&#34;)
 *             .defaultService(home.id())
 *             .hostRules(RegionUrlMapHostRuleArgs.builder()
 *                 .hosts(&#34;mysite.com&#34;)
 *                 .pathMatcher(&#34;allpaths&#34;)
 *                 .build())
 *             .pathMatchers(RegionUrlMapPathMatcherArgs.builder()
 *                 .name(&#34;allpaths&#34;)
 *                 .defaultService(home.id())
 *                 .routeRules(RegionUrlMapPathMatcherRouteRuleArgs.builder()
 *                     .priority(1)
 *                     .headerAction(RegionUrlMapPathMatcherRouteRuleHeaderActionArgs.builder()
 *                         .requestHeadersToRemoves(&#34;RemoveMe2&#34;)
 *                         .requestHeadersToAdds(RegionUrlMapPathMatcherRouteRuleHeaderActionRequestHeadersToAddArgs.builder()
 *                             .headerName(&#34;AddSomethingElse&#34;)
 *                             .headerValue(&#34;MyOtherValue&#34;)
 *                             .replace(true)
 *                             .build())
 *                         .responseHeadersToRemoves(&#34;RemoveMe3&#34;)
 *                         .responseHeadersToAdds(RegionUrlMapPathMatcherRouteRuleHeaderActionResponseHeadersToAddArgs.builder()
 *                             .headerName(&#34;AddMe&#34;)
 *                             .headerValue(&#34;MyValue&#34;)
 *                             .replace(false)
 *                             .build())
 *                         .build())
 *                     .matchRules(RegionUrlMapPathMatcherRouteRuleMatchRuleArgs.builder()
 *                         .fullPathMatch(&#34;a full path&#34;)
 *                         .headerMatches(RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchArgs.builder()
 *                             .headerName(&#34;someheader&#34;)
 *                             .exactMatch(&#34;match this exactly&#34;)
 *                             .invertMatch(true)
 *                             .build())
 *                         .ignoreCase(true)
 *                         .metadataFilters(RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterArgs.builder()
 *                             .filterMatchCriteria(&#34;MATCH_ANY&#34;)
 *                             .filterLabels(RegionUrlMapPathMatcherRouteRuleMatchRuleMetadataFilterFilterLabelArgs.builder()
 *                                 .name(&#34;PLANET&#34;)
 *                                 .value(&#34;MARS&#34;)
 *                                 .build())
 *                             .build())
 *                         .queryParameterMatches(RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArgs.builder()
 *                             .name(&#34;a query parameter&#34;)
 *                             .presentMatch(true)
 *                             .build())
 *                         .build())
 *                     .urlRedirect(RegionUrlMapPathMatcherRouteRuleUrlRedirectArgs.builder()
 *                         .hostRedirect(&#34;A host&#34;)
 *                         .httpsRedirect(false)
 *                         .pathRedirect(&#34;some/path&#34;)
 *                         .redirectResponseCode(&#34;TEMPORARY_REDIRECT&#34;)
 *                         .stripQuery(true)
 *                         .build())
 *                     .build())
 *                 .build())
 *             .tests(RegionUrlMapTestArgs.builder()
 *                 .service(home.id())
 *                 .host(&#34;hi.com&#34;)
 *                 .path(&#34;/home&#34;)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Region Url Map L7 Ilb Route Partial
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.RegionHealthCheck;
 * import com.pulumi.gcp.compute.RegionHealthCheckArgs;
 * import com.pulumi.gcp.compute.inputs.RegionHealthCheckHttpHealthCheckArgs;
 * import com.pulumi.gcp.compute.RegionBackendService;
 * import com.pulumi.gcp.compute.RegionBackendServiceArgs;
 * import com.pulumi.gcp.compute.RegionUrlMap;
 * import com.pulumi.gcp.compute.RegionUrlMapArgs;
 * import com.pulumi.gcp.compute.inputs.RegionUrlMapHostRuleArgs;
 * import com.pulumi.gcp.compute.inputs.RegionUrlMapPathMatcherArgs;
 * import com.pulumi.gcp.compute.inputs.RegionUrlMapTestArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var default_ = new RegionHealthCheck(&#34;default&#34;, RegionHealthCheckArgs.builder()        
 *             .name(&#34;health-check&#34;)
 *             .httpHealthCheck(RegionHealthCheckHttpHealthCheckArgs.builder()
 *                 .port(80)
 *                 .build())
 *             .build());
 * 
 *         var home = new RegionBackendService(&#34;home&#34;, RegionBackendServiceArgs.builder()        
 *             .name(&#34;home&#34;)
 *             .protocol(&#34;HTTP&#34;)
 *             .timeoutSec(10)
 *             .healthChecks(default_.id())
 *             .loadBalancingScheme(&#34;INTERNAL_MANAGED&#34;)
 *             .build());
 * 
 *         var regionurlmap = new RegionUrlMap(&#34;regionurlmap&#34;, RegionUrlMapArgs.builder()        
 *             .name(&#34;regionurlmap&#34;)
 *             .description(&#34;a description&#34;)
 *             .defaultService(home.id())
 *             .hostRules(RegionUrlMapHostRuleArgs.builder()
 *                 .hosts(&#34;mysite.com&#34;)
 *                 .pathMatcher(&#34;allpaths&#34;)
 *                 .build())
 *             .pathMatchers(RegionUrlMapPathMatcherArgs.builder()
 *                 .name(&#34;allpaths&#34;)
 *                 .defaultService(home.id())
 *                 .routeRules(RegionUrlMapPathMatcherRouteRuleArgs.builder()
 *                     .priority(1)
 *                     .service(home.id())
 *                     .headerAction(RegionUrlMapPathMatcherRouteRuleHeaderActionArgs.builder()
 *                         .requestHeadersToRemoves(&#34;RemoveMe2&#34;)
 *                         .build())
 *                     .matchRules(RegionUrlMapPathMatcherRouteRuleMatchRuleArgs.builder()
 *                         .fullPathMatch(&#34;a full path&#34;)
 *                         .headerMatches(RegionUrlMapPathMatcherRouteRuleMatchRuleHeaderMatchArgs.builder()
 *                             .headerName(&#34;someheader&#34;)
 *                             .exactMatch(&#34;match this exactly&#34;)
 *                             .invertMatch(true)
 *                             .build())
 *                         .queryParameterMatches(RegionUrlMapPathMatcherRouteRuleMatchRuleQueryParameterMatchArgs.builder()
 *                             .name(&#34;a query parameter&#34;)
 *                             .presentMatch(true)
 *                             .build())
 *                         .build())
 *                     .build())
 *                 .build())
 *             .tests(RegionUrlMapTestArgs.builder()
 *                 .service(home.id())
 *                 .host(&#34;hi.com&#34;)
 *                 .path(&#34;/home&#34;)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Int Https Lb Https Redirect
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.Network;
 * import com.pulumi.gcp.compute.NetworkArgs;
 * import com.pulumi.gcp.compute.Subnetwork;
 * import com.pulumi.gcp.compute.SubnetworkArgs;
 * import com.pulumi.gcp.compute.Address;
 * import com.pulumi.gcp.compute.AddressArgs;
 * import com.pulumi.tls.PrivateKey;
 * import com.pulumi.tls.PrivateKeyArgs;
 * import com.pulumi.tls.SelfSignedCert;
 * import com.pulumi.tls.SelfSignedCertArgs;
 * import com.pulumi.tls.inputs.SelfSignedCertSubjectArgs;
 * import com.pulumi.gcp.compute.RegionSslCertificate;
 * import com.pulumi.gcp.compute.RegionSslCertificateArgs;
 * import com.pulumi.gcp.compute.RegionHealthCheck;
 * import com.pulumi.gcp.compute.RegionHealthCheckArgs;
 * import com.pulumi.gcp.compute.inputs.RegionHealthCheckHttpHealthCheckArgs;
 * import com.pulumi.gcp.compute.InstanceTemplate;
 * import com.pulumi.gcp.compute.InstanceTemplateArgs;
 * import com.pulumi.gcp.compute.inputs.InstanceTemplateNetworkInterfaceArgs;
 * import com.pulumi.gcp.compute.inputs.InstanceTemplateDiskArgs;
 * import com.pulumi.gcp.compute.RegionInstanceGroupManager;
 * import com.pulumi.gcp.compute.RegionInstanceGroupManagerArgs;
 * import com.pulumi.gcp.compute.inputs.RegionInstanceGroupManagerVersionArgs;
 * import com.pulumi.gcp.compute.inputs.RegionInstanceGroupManagerNamedPortArgs;
 * import com.pulumi.gcp.compute.RegionBackendService;
 * import com.pulumi.gcp.compute.RegionBackendServiceArgs;
 * import com.pulumi.gcp.compute.inputs.RegionBackendServiceBackendArgs;
 * import com.pulumi.gcp.compute.RegionUrlMap;
 * import com.pulumi.gcp.compute.RegionUrlMapArgs;
 * import com.pulumi.gcp.compute.RegionTargetHttpsProxy;
 * import com.pulumi.gcp.compute.RegionTargetHttpsProxyArgs;
 * import com.pulumi.gcp.compute.ForwardingRule;
 * import com.pulumi.gcp.compute.ForwardingRuleArgs;
 * import com.pulumi.gcp.compute.Firewall;
 * import com.pulumi.gcp.compute.FirewallArgs;
 * import com.pulumi.gcp.compute.inputs.FirewallAllowArgs;
 * import com.pulumi.gcp.compute.Instance;
 * import com.pulumi.gcp.compute.InstanceArgs;
 * import com.pulumi.gcp.compute.inputs.InstanceNetworkInterfaceArgs;
 * import com.pulumi.gcp.compute.inputs.InstanceBootDiskArgs;
 * import com.pulumi.gcp.compute.inputs.InstanceBootDiskInitializeParamsArgs;
 * import com.pulumi.gcp.compute.inputs.RegionUrlMapHostRuleArgs;
 * import com.pulumi.gcp.compute.inputs.RegionUrlMapPathMatcherArgs;
 * import com.pulumi.gcp.compute.RegionTargetHttpProxy;
 * import com.pulumi.gcp.compute.RegionTargetHttpProxyArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var default_ = new Network(&#34;default&#34;, NetworkArgs.builder()        
 *             .name(&#34;l7-ilb-network&#34;)
 *             .autoCreateSubnetworks(false)
 *             .build());
 * 
 *         var proxySubnet = new Subnetwork(&#34;proxySubnet&#34;, SubnetworkArgs.builder()        
 *             .name(&#34;l7-ilb-proxy-subnet&#34;)
 *             .ipCidrRange(&#34;10.0.0.0/24&#34;)
 *             .region(&#34;europe-west1&#34;)
 *             .purpose(&#34;REGIONAL_MANAGED_PROXY&#34;)
 *             .role(&#34;ACTIVE&#34;)
 *             .network(default_.id())
 *             .build());
 * 
 *         var defaultSubnetwork = new Subnetwork(&#34;defaultSubnetwork&#34;, SubnetworkArgs.builder()        
 *             .name(&#34;l7-ilb-subnet&#34;)
 *             .ipCidrRange(&#34;10.0.1.0/24&#34;)
 *             .region(&#34;europe-west1&#34;)
 *             .network(default_.id())
 *             .build());
 * 
 *         var defaultAddress = new Address(&#34;defaultAddress&#34;, AddressArgs.builder()        
 *             .name(&#34;l7-ilb-ip&#34;)
 *             .subnetwork(defaultSubnetwork.id())
 *             .addressType(&#34;INTERNAL&#34;)
 *             .address(&#34;10.0.1.5&#34;)
 *             .region(&#34;europe-west1&#34;)
 *             .purpose(&#34;SHARED_LOADBALANCER_VIP&#34;)
 *             .build());
 * 
 *         var defaultPrivateKey = new PrivateKey(&#34;defaultPrivateKey&#34;, PrivateKeyArgs.builder()        
 *             .algorithm(&#34;RSA&#34;)
 *             .rsaBits(2048)
 *             .build());
 * 
 *         var defaultSelfSignedCert = new SelfSignedCert(&#34;defaultSelfSignedCert&#34;, SelfSignedCertArgs.builder()        
 *             .keyAlgorithm(defaultPrivateKey.algorithm())
 *             .privateKeyPem(defaultPrivateKey.privateKeyPem())
 *             .validityPeriodHours(12)
 *             .earlyRenewalHours(3)
 *             .allowedUses(            
 *                 &#34;key_encipherment&#34;,
 *                 &#34;digital_signature&#34;,
 *                 &#34;server_auth&#34;)
 *             .dnsNames(&#34;example.com&#34;)
 *             .subject(SelfSignedCertSubjectArgs.builder()
 *                 .commonName(&#34;example.com&#34;)
 *                 .organization(&#34;ACME Examples, Inc&#34;)
 *                 .build())
 *             .build());
 * 
 *         var defaultRegionSslCertificate = new RegionSslCertificate(&#34;defaultRegionSslCertificate&#34;, RegionSslCertificateArgs.builder()        
 *             .namePrefix(&#34;my-certificate-&#34;)
 *             .privateKey(defaultPrivateKey.privateKeyPem())
 *             .certificate(defaultSelfSignedCert.certPem())
 *             .region(&#34;europe-west1&#34;)
 *             .build());
 * 
 *         var defaultRegionHealthCheck = new RegionHealthCheck(&#34;defaultRegionHealthCheck&#34;, RegionHealthCheckArgs.builder()        
 *             .name(&#34;l7-ilb-hc&#34;)
 *             .region(&#34;europe-west1&#34;)
 *             .httpHealthCheck(RegionHealthCheckHttpHealthCheckArgs.builder()
 *                 .portSpecification(&#34;USE_SERVING_PORT&#34;)
 *                 .build())
 *             .build());
 * 
 *         var defaultInstanceTemplate = new InstanceTemplate(&#34;defaultInstanceTemplate&#34;, InstanceTemplateArgs.builder()        
 *             .networkInterfaces(InstanceTemplateNetworkInterfaceArgs.builder()
 *                 .accessConfigs()
 *                 .network(default_.id())
 *                 .subnetwork(defaultSubnetwork.id())
 *                 .build())
 *             .name(&#34;l7-ilb-mig-template&#34;)
 *             .machineType(&#34;e2-small&#34;)
 *             .tags(&#34;http-server&#34;)
 *             .disks(InstanceTemplateDiskArgs.builder()
 *                 .sourceImage(&#34;debian-cloud/debian-10&#34;)
 *                 .autoDelete(true)
 *                 .boot(true)
 *                 .build())
 *             .metadata(Map.of(&#34;startup-script&#34;, &#34;&#34;&#34;
 * #! /bin/bash
 * set -euo pipefail
 * 
 * export DEBIAN_FRONTEND=noninteractive
 * apt-get update
 * apt-get install -y nginx-light jq
 * 
 * NAME=$(curl -H &#34;Metadata-Flavor: Google&#34; &#34;http://metadata.google.internal/computeMetadata/v1/instance/hostname&#34;)
 * IP=$(curl -H &#34;Metadata-Flavor: Google&#34; &#34;http://metadata.google.internal/computeMetadata/v1/instance/network-interfaces/0/ip&#34;)
 * METADATA=$(curl -f -H &#34;Metadata-Flavor: Google&#34; &#34;http://metadata.google.internal/computeMetadata/v1/instance/attributes/?recursive=True&#34; | jq &#39;del(.[&#34;startup-script&#34;])&#39;)
 * 
 * cat &lt;&lt;EOF &gt; /var/www/html/index.html
 * &lt;pre&gt;
 * Name: $NAME
 * IP: $IP
 * Metadata: $METADATA
 * &lt;/pre&gt;
 * EOF
 *             &#34;&#34;&#34;))
 *             .build());
 * 
 *         var defaultRegionInstanceGroupManager = new RegionInstanceGroupManager(&#34;defaultRegionInstanceGroupManager&#34;, RegionInstanceGroupManagerArgs.builder()        
 *             .name(&#34;l7-ilb-mig1&#34;)
 *             .region(&#34;europe-west1&#34;)
 *             .versions(RegionInstanceGroupManagerVersionArgs.builder()
 *                 .instanceTemplate(defaultInstanceTemplate.id())
 *                 .name(&#34;primary&#34;)
 *                 .build())
 *             .namedPorts(RegionInstanceGroupManagerNamedPortArgs.builder()
 *                 .name(&#34;http-server&#34;)
 *                 .port(80)
 *                 .build())
 *             .baseInstanceName(&#34;vm&#34;)
 *             .targetSize(2)
 *             .build());
 * 
 *         var defaultRegionBackendService = new RegionBackendService(&#34;defaultRegionBackendService&#34;, RegionBackendServiceArgs.builder()        
 *             .name(&#34;l7-ilb-backend-service&#34;)
 *             .region(&#34;europe-west1&#34;)
 *             .protocol(&#34;HTTP&#34;)
 *             .portName(&#34;http-server&#34;)
 *             .loadBalancingScheme(&#34;INTERNAL_MANAGED&#34;)
 *             .timeoutSec(10)
 *             .healthChecks(defaultRegionHealthCheck.id())
 *             .backends(RegionBackendServiceBackendArgs.builder()
 *                 .group(defaultRegionInstanceGroupManager.instanceGroup())
 *                 .balancingMode(&#34;UTILIZATION&#34;)
 *                 .capacityScaler(1)
 *                 .build())
 *             .build());
 * 
 *         var httpsLb = new RegionUrlMap(&#34;httpsLb&#34;, RegionUrlMapArgs.builder()        
 *             .name(&#34;l7-ilb-regional-url-map&#34;)
 *             .region(&#34;europe-west1&#34;)
 *             .defaultService(defaultRegionBackendService.id())
 *             .build());
 * 
 *         var defaultRegionTargetHttpsProxy = new RegionTargetHttpsProxy(&#34;defaultRegionTargetHttpsProxy&#34;, RegionTargetHttpsProxyArgs.builder()        
 *             .name(&#34;l7-ilb-target-https-proxy&#34;)
 *             .region(&#34;europe-west1&#34;)
 *             .urlMap(httpsLb.id())
 *             .sslCertificates(defaultRegionSslCertificate.selfLink())
 *             .build());
 * 
 *         var defaultForwardingRule = new ForwardingRule(&#34;defaultForwardingRule&#34;, ForwardingRuleArgs.builder()        
 *             .name(&#34;l7-ilb-forwarding-rule&#34;)
 *             .region(&#34;europe-west1&#34;)
 *             .ipProtocol(&#34;TCP&#34;)
 *             .ipAddress(defaultAddress.id())
 *             .loadBalancingScheme(&#34;INTERNAL_MANAGED&#34;)
 *             .portRange(&#34;443&#34;)
 *             .target(defaultRegionTargetHttpsProxy.id())
 *             .network(default_.id())
 *             .subnetwork(defaultSubnetwork.id())
 *             .networkTier(&#34;PREMIUM&#34;)
 *             .build());
 * 
 *         var defaultFirewall = new Firewall(&#34;defaultFirewall&#34;, FirewallArgs.builder()        
 *             .name(&#34;l7-ilb-fw-allow-hc&#34;)
 *             .direction(&#34;INGRESS&#34;)
 *             .network(default_.id())
 *             .sourceRanges(            
 *                 &#34;130.211.0.0/22&#34;,
 *                 &#34;35.191.0.0/16&#34;,
 *                 &#34;35.235.240.0/20&#34;)
 *             .allows(FirewallAllowArgs.builder()
 *                 .protocol(&#34;tcp&#34;)
 *                 .build())
 *             .build());
 * 
 *         var backends = new Firewall(&#34;backends&#34;, FirewallArgs.builder()        
 *             .name(&#34;l7-ilb-fw-allow-ilb-to-backends&#34;)
 *             .direction(&#34;INGRESS&#34;)
 *             .network(default_.id())
 *             .sourceRanges(&#34;10.0.0.0/24&#34;)
 *             .targetTags(&#34;http-server&#34;)
 *             .allows(FirewallAllowArgs.builder()
 *                 .protocol(&#34;tcp&#34;)
 *                 .ports(                
 *                     &#34;80&#34;,
 *                     &#34;443&#34;,
 *                     &#34;8080&#34;)
 *                 .build())
 *             .build());
 * 
 *         var defaultInstance = new Instance(&#34;defaultInstance&#34;, InstanceArgs.builder()        
 *             .name(&#34;l7-ilb-test-vm&#34;)
 *             .zone(&#34;europe-west1-b&#34;)
 *             .machineType(&#34;e2-small&#34;)
 *             .networkInterfaces(InstanceNetworkInterfaceArgs.builder()
 *                 .network(default_.id())
 *                 .subnetwork(defaultSubnetwork.id())
 *                 .build())
 *             .bootDisk(InstanceBootDiskArgs.builder()
 *                 .initializeParams(InstanceBootDiskInitializeParamsArgs.builder()
 *                     .image(&#34;debian-cloud/debian-10&#34;)
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         var redirectRegionUrlMap = new RegionUrlMap(&#34;redirectRegionUrlMap&#34;, RegionUrlMapArgs.builder()        
 *             .name(&#34;l7-ilb-redirect-url-map&#34;)
 *             .region(&#34;europe-west1&#34;)
 *             .defaultService(defaultRegionBackendService.id())
 *             .hostRules(RegionUrlMapHostRuleArgs.builder()
 *                 .hosts(&#34;*&#34;)
 *                 .pathMatcher(&#34;allpaths&#34;)
 *                 .build())
 *             .pathMatchers(RegionUrlMapPathMatcherArgs.builder()
 *                 .name(&#34;allpaths&#34;)
 *                 .defaultService(defaultRegionBackendService.id())
 *                 .pathRules(RegionUrlMapPathMatcherPathRuleArgs.builder()
 *                     .paths(&#34;/&#34;)
 *                     .urlRedirect(RegionUrlMapPathMatcherPathRuleUrlRedirectArgs.builder()
 *                         .httpsRedirect(true)
 *                         .hostRedirect(&#34;10.0.1.5:443&#34;)
 *                         .redirectResponseCode(&#34;PERMANENT_REDIRECT&#34;)
 *                         .stripQuery(true)
 *                         .build())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         var defaultRegionTargetHttpProxy = new RegionTargetHttpProxy(&#34;defaultRegionTargetHttpProxy&#34;, RegionTargetHttpProxyArgs.builder()        
 *             .name(&#34;l7-ilb-target-http-proxy&#34;)
 *             .region(&#34;europe-west1&#34;)
 *             .urlMap(redirectRegionUrlMap.id())
 *             .build());
 * 
 *         var redirect = new ForwardingRule(&#34;redirect&#34;, ForwardingRuleArgs.builder()        
 *             .name(&#34;l7-ilb-redirect&#34;)
 *             .region(&#34;europe-west1&#34;)
 *             .ipProtocol(&#34;TCP&#34;)
 *             .ipAddress(defaultAddress.id())
 *             .loadBalancingScheme(&#34;INTERNAL_MANAGED&#34;)
 *             .portRange(&#34;80&#34;)
 *             .target(defaultRegionTargetHttpProxy.id())
 *             .network(default_.id())
 *             .subnetwork(defaultSubnetwork.id())
 *             .networkTier(&#34;PREMIUM&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Region Url Map Path Template Match
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.RegionHealthCheck;
 * import com.pulumi.gcp.compute.RegionHealthCheckArgs;
 * import com.pulumi.gcp.compute.inputs.RegionHealthCheckHttpHealthCheckArgs;
 * import com.pulumi.gcp.compute.RegionBackendService;
 * import com.pulumi.gcp.compute.RegionBackendServiceArgs;
 * import com.pulumi.gcp.compute.RegionUrlMap;
 * import com.pulumi.gcp.compute.RegionUrlMapArgs;
 * import com.pulumi.gcp.compute.inputs.RegionUrlMapHostRuleArgs;
 * import com.pulumi.gcp.compute.inputs.RegionUrlMapPathMatcherArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var default_ = new RegionHealthCheck(&#34;default&#34;, RegionHealthCheckArgs.builder()        
 *             .region(&#34;us-central1&#34;)
 *             .name(&#34;health-check&#34;)
 *             .checkIntervalSec(1)
 *             .timeoutSec(1)
 *             .httpHealthCheck(RegionHealthCheckHttpHealthCheckArgs.builder()
 *                 .port(80)
 *                 .requestPath(&#34;/&#34;)
 *                 .build())
 *             .build());
 * 
 *         var home_backend = new RegionBackendService(&#34;home-backend&#34;, RegionBackendServiceArgs.builder()        
 *             .region(&#34;us-central1&#34;)
 *             .name(&#34;home-service&#34;)
 *             .portName(&#34;http&#34;)
 *             .protocol(&#34;HTTP&#34;)
 *             .timeoutSec(10)
 *             .loadBalancingScheme(&#34;EXTERNAL_MANAGED&#34;)
 *             .healthChecks(default_.id())
 *             .build());
 * 
 *         var cart_backend = new RegionBackendService(&#34;cart-backend&#34;, RegionBackendServiceArgs.builder()        
 *             .region(&#34;us-central1&#34;)
 *             .name(&#34;cart-service&#34;)
 *             .portName(&#34;http&#34;)
 *             .protocol(&#34;HTTP&#34;)
 *             .timeoutSec(10)
 *             .loadBalancingScheme(&#34;EXTERNAL_MANAGED&#34;)
 *             .healthChecks(default_.id())
 *             .build());
 * 
 *         var user_backend = new RegionBackendService(&#34;user-backend&#34;, RegionBackendServiceArgs.builder()        
 *             .region(&#34;us-central1&#34;)
 *             .name(&#34;user-service&#34;)
 *             .portName(&#34;http&#34;)
 *             .protocol(&#34;HTTP&#34;)
 *             .timeoutSec(10)
 *             .loadBalancingScheme(&#34;EXTERNAL_MANAGED&#34;)
 *             .healthChecks(default_.id())
 *             .build());
 * 
 *         var urlmap = new RegionUrlMap(&#34;urlmap&#34;, RegionUrlMapArgs.builder()        
 *             .region(&#34;us-central1&#34;)
 *             .name(&#34;urlmap&#34;)
 *             .description(&#34;a description&#34;)
 *             .defaultService(home_backend.id())
 *             .hostRules(RegionUrlMapHostRuleArgs.builder()
 *                 .hosts(&#34;mysite.com&#34;)
 *                 .pathMatcher(&#34;mysite&#34;)
 *                 .build())
 *             .pathMatchers(RegionUrlMapPathMatcherArgs.builder()
 *                 .name(&#34;mysite&#34;)
 *                 .defaultService(home_backend.id())
 *                 .routeRules(                
 *                     RegionUrlMapPathMatcherRouteRuleArgs.builder()
 *                         .matchRules(RegionUrlMapPathMatcherRouteRuleMatchRuleArgs.builder()
 *                             .pathTemplateMatch(&#34;/xyzwebservices/v2/xyz/users/{username=*}/carts/{cartid=**}&#34;)
 *                             .build())
 *                         .service(cart_backend.id())
 *                         .priority(1)
 *                         .routeAction(RegionUrlMapPathMatcherRouteRuleRouteActionArgs.builder()
 *                             .urlRewrite(RegionUrlMapPathMatcherRouteRuleRouteActionUrlRewriteArgs.builder()
 *                                 .pathTemplateRewrite(&#34;/{username}-{cartid}/&#34;)
 *                                 .build())
 *                             .build())
 *                         .build(),
 *                     RegionUrlMapPathMatcherRouteRuleArgs.builder()
 *                         .matchRules(RegionUrlMapPathMatcherRouteRuleMatchRuleArgs.builder()
 *                             .pathTemplateMatch(&#34;/xyzwebservices/v2/xyz/users/*{@literal /}accountinfo/*&#34;)
 *                             .build())
 *                         .service(user_backend.id())
 *                         .priority(2)
 *                         .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * RegionUrlMap can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/regions/{{region}}/urlMaps/{{name}}`
 * 
 * * `{{project}}/{{region}}/{{name}}`
 * 
 * * `{{region}}/{{name}}`
 * 
 * * `{{name}}`
 * 
 * When using the `pulumi import` command, RegionUrlMap can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:compute/regionUrlMap:RegionUrlMap default projects/{{project}}/regions/{{region}}/urlMaps/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:compute/regionUrlMap:RegionUrlMap default {{project}}/{{region}}/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:compute/regionUrlMap:RegionUrlMap default {{region}}/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:compute/regionUrlMap:RegionUrlMap default {{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:compute/regionUrlMap:RegionUrlMap")
public class RegionUrlMap extends com.pulumi.resources.CustomResource {
    /**
     * Creation timestamp in RFC3339 text format.
     * 
     */
    @Export(name="creationTimestamp", refs={String.class}, tree="[0]")
    private Output<String> creationTimestamp;

    /**
     * @return Creation timestamp in RFC3339 text format.
     * 
     */
    public Output<String> creationTimestamp() {
        return this.creationTimestamp;
    }
    /**
     * defaultRouteAction takes effect when none of the hostRules match. The load balancer performs advanced routing actions, such as URL rewrites and header transformations, before forwarding the request to the selected backend. If defaultRouteAction specifies any weightedBackendServices, defaultService must not be set. Conversely if defaultService is set, defaultRouteAction cannot contain any weightedBackendServices.
     * Only one of defaultRouteAction or defaultUrlRedirect must be set.
     * URL maps for Classic external HTTP(S) load balancers only support the urlRewrite action within defaultRouteAction.
     * defaultRouteAction has no effect when the URL map is bound to a target gRPC proxy that has the validateForProxyless field set to true.
     * Structure is documented below.
     * 
     */
    @Export(name="defaultRouteAction", refs={RegionUrlMapDefaultRouteAction.class}, tree="[0]")
    private Output</* @Nullable */ RegionUrlMapDefaultRouteAction> defaultRouteAction;

    /**
     * @return defaultRouteAction takes effect when none of the hostRules match. The load balancer performs advanced routing actions, such as URL rewrites and header transformations, before forwarding the request to the selected backend. If defaultRouteAction specifies any weightedBackendServices, defaultService must not be set. Conversely if defaultService is set, defaultRouteAction cannot contain any weightedBackendServices.
     * Only one of defaultRouteAction or defaultUrlRedirect must be set.
     * URL maps for Classic external HTTP(S) load balancers only support the urlRewrite action within defaultRouteAction.
     * defaultRouteAction has no effect when the URL map is bound to a target gRPC proxy that has the validateForProxyless field set to true.
     * Structure is documented below.
     * 
     */
    public Output<Optional<RegionUrlMapDefaultRouteAction>> defaultRouteAction() {
        return Codegen.optional(this.defaultRouteAction);
    }
    /**
     * The full or partial URL of the defaultService resource to which traffic is directed if
     * none of the hostRules match. If defaultRouteAction is additionally specified, advanced
     * routing actions like URL Rewrites, etc. take effect prior to sending the request to the
     * backend. However, if defaultService is specified, defaultRouteAction cannot contain any
     * weightedBackendServices. Conversely, if routeAction specifies any
     * weightedBackendServices, service must not be specified.  Only one of defaultService,
     * defaultUrlRedirect or defaultRouteAction.weightedBackendService must be set.
     * 
     */
    @Export(name="defaultService", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> defaultService;

    /**
     * @return The full or partial URL of the defaultService resource to which traffic is directed if
     * none of the hostRules match. If defaultRouteAction is additionally specified, advanced
     * routing actions like URL Rewrites, etc. take effect prior to sending the request to the
     * backend. However, if defaultService is specified, defaultRouteAction cannot contain any
     * weightedBackendServices. Conversely, if routeAction specifies any
     * weightedBackendServices, service must not be specified.  Only one of defaultService,
     * defaultUrlRedirect or defaultRouteAction.weightedBackendService must be set.
     * 
     */
    public Output<Optional<String>> defaultService() {
        return Codegen.optional(this.defaultService);
    }
    /**
     * When none of the specified hostRules match, the request is redirected to a URL specified
     * by defaultUrlRedirect. If defaultUrlRedirect is specified, defaultService or
     * defaultRouteAction must not be set.
     * Structure is documented below.
     * 
     */
    @Export(name="defaultUrlRedirect", refs={RegionUrlMapDefaultUrlRedirect.class}, tree="[0]")
    private Output</* @Nullable */ RegionUrlMapDefaultUrlRedirect> defaultUrlRedirect;

    /**
     * @return When none of the specified hostRules match, the request is redirected to a URL specified
     * by defaultUrlRedirect. If defaultUrlRedirect is specified, defaultService or
     * defaultRouteAction must not be set.
     * Structure is documented below.
     * 
     */
    public Output<Optional<RegionUrlMapDefaultUrlRedirect>> defaultUrlRedirect() {
        return Codegen.optional(this.defaultUrlRedirect);
    }
    /**
     * An optional description of this resource. Provide this property when
     * you create the resource.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return An optional description of this resource. Provide this property when
     * you create the resource.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * Fingerprint of this resource. This field is used internally during
     * updates of this resource.
     * 
     */
    @Export(name="fingerprint", refs={String.class}, tree="[0]")
    private Output<String> fingerprint;

    /**
     * @return Fingerprint of this resource. This field is used internally during
     * updates of this resource.
     * 
     */
    public Output<String> fingerprint() {
        return this.fingerprint;
    }
    /**
     * The list of HostRules to use against the URL.
     * Structure is documented below.
     * 
     */
    @Export(name="hostRules", refs={List.class,RegionUrlMapHostRule.class}, tree="[0,1]")
    private Output</* @Nullable */ List<RegionUrlMapHostRule>> hostRules;

    /**
     * @return The list of HostRules to use against the URL.
     * Structure is documented below.
     * 
     */
    public Output<Optional<List<RegionUrlMapHostRule>>> hostRules() {
        return Codegen.optional(this.hostRules);
    }
    /**
     * The unique identifier for the resource.
     * 
     */
    @Export(name="mapId", refs={Integer.class}, tree="[0]")
    private Output<Integer> mapId;

    /**
     * @return The unique identifier for the resource.
     * 
     */
    public Output<Integer> mapId() {
        return this.mapId;
    }
    /**
     * Name of the resource. Provided by the client when the resource is
     * created. The name must be 1-63 characters long, and comply with
     * RFC1035. Specifically, the name must be 1-63 characters long and match
     * the regular expression `a-z?` which means the
     * first character must be a lowercase letter, and all following
     * characters must be a dash, lowercase letter, or digit, except the last
     * character, which cannot be a dash.
     * 
     * ***
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the resource. Provided by the client when the resource is
     * created. The name must be 1-63 characters long, and comply with
     * RFC1035. Specifically, the name must be 1-63 characters long and match
     * the regular expression `a-z?` which means the
     * first character must be a lowercase letter, and all following
     * characters must be a dash, lowercase letter, or digit, except the last
     * character, which cannot be a dash.
     * 
     * ***
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The list of named PathMatchers to use against the URL.
     * Structure is documented below.
     * 
     */
    @Export(name="pathMatchers", refs={List.class,RegionUrlMapPathMatcher.class}, tree="[0,1]")
    private Output</* @Nullable */ List<RegionUrlMapPathMatcher>> pathMatchers;

    /**
     * @return The list of named PathMatchers to use against the URL.
     * Structure is documented below.
     * 
     */
    public Output<Optional<List<RegionUrlMapPathMatcher>>> pathMatchers() {
        return Codegen.optional(this.pathMatchers);
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * The Region in which the url map should reside.
     * If it is not provided, the provider region is used.
     * 
     */
    @Export(name="region", refs={String.class}, tree="[0]")
    private Output<String> region;

    /**
     * @return The Region in which the url map should reside.
     * If it is not provided, the provider region is used.
     * 
     */
    public Output<String> region() {
        return this.region;
    }
    /**
     * The URI of the created resource.
     * 
     */
    @Export(name="selfLink", refs={String.class}, tree="[0]")
    private Output<String> selfLink;

    /**
     * @return The URI of the created resource.
     * 
     */
    public Output<String> selfLink() {
        return this.selfLink;
    }
    /**
     * The list of expected URL mappings. Requests to update this UrlMap will
     * succeed only if all of the test cases pass.
     * Structure is documented below.
     * 
     */
    @Export(name="tests", refs={List.class,RegionUrlMapTest.class}, tree="[0,1]")
    private Output</* @Nullable */ List<RegionUrlMapTest>> tests;

    /**
     * @return The list of expected URL mappings. Requests to update this UrlMap will
     * succeed only if all of the test cases pass.
     * Structure is documented below.
     * 
     */
    public Output<Optional<List<RegionUrlMapTest>>> tests() {
        return Codegen.optional(this.tests);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public RegionUrlMap(String name) {
        this(name, RegionUrlMapArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public RegionUrlMap(String name, @Nullable RegionUrlMapArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public RegionUrlMap(String name, @Nullable RegionUrlMapArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:compute/regionUrlMap:RegionUrlMap", name, args == null ? RegionUrlMapArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private RegionUrlMap(String name, Output<String> id, @Nullable RegionUrlMapState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:compute/regionUrlMap:RegionUrlMap", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static RegionUrlMap get(String name, Output<String> id, @Nullable RegionUrlMapState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new RegionUrlMap(name, id, state, options);
    }
}
