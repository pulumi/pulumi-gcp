// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudrun.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.cloudrun.outputs.GetServiceMetadata;
import com.pulumi.gcp.cloudrun.outputs.GetServiceStatus;
import com.pulumi.gcp.cloudrun.outputs.GetServiceTemplate;
import com.pulumi.gcp.cloudrun.outputs.GetServiceTraffic;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetServiceResult {
    private Boolean autogenerateRevisionName;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String location;
    private List<GetServiceMetadata> metadatas;
    private String name;
    private @Nullable String project;
    private List<GetServiceStatus> statuses;
    private List<GetServiceTemplate> templates;
    private List<GetServiceTraffic> traffics;

    private GetServiceResult() {}
    public Boolean autogenerateRevisionName() {
        return this.autogenerateRevisionName;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String location() {
        return this.location;
    }
    public List<GetServiceMetadata> metadatas() {
        return this.metadatas;
    }
    public String name() {
        return this.name;
    }
    public Optional<String> project() {
        return Optional.ofNullable(this.project);
    }
    public List<GetServiceStatus> statuses() {
        return this.statuses;
    }
    public List<GetServiceTemplate> templates() {
        return this.templates;
    }
    public List<GetServiceTraffic> traffics() {
        return this.traffics;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServiceResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean autogenerateRevisionName;
        private String id;
        private String location;
        private List<GetServiceMetadata> metadatas;
        private String name;
        private @Nullable String project;
        private List<GetServiceStatus> statuses;
        private List<GetServiceTemplate> templates;
        private List<GetServiceTraffic> traffics;
        public Builder() {}
        public Builder(GetServiceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autogenerateRevisionName = defaults.autogenerateRevisionName;
    	      this.id = defaults.id;
    	      this.location = defaults.location;
    	      this.metadatas = defaults.metadatas;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.statuses = defaults.statuses;
    	      this.templates = defaults.templates;
    	      this.traffics = defaults.traffics;
        }

        @CustomType.Setter
        public Builder autogenerateRevisionName(Boolean autogenerateRevisionName) {
            if (autogenerateRevisionName == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "autogenerateRevisionName");
            }
            this.autogenerateRevisionName = autogenerateRevisionName;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder metadatas(List<GetServiceMetadata> metadatas) {
            if (metadatas == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "metadatas");
            }
            this.metadatas = metadatas;
            return this;
        }
        public Builder metadatas(GetServiceMetadata... metadatas) {
            return metadatas(List.of(metadatas));
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder project(@Nullable String project) {

            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder statuses(List<GetServiceStatus> statuses) {
            if (statuses == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "statuses");
            }
            this.statuses = statuses;
            return this;
        }
        public Builder statuses(GetServiceStatus... statuses) {
            return statuses(List.of(statuses));
        }
        @CustomType.Setter
        public Builder templates(List<GetServiceTemplate> templates) {
            if (templates == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "templates");
            }
            this.templates = templates;
            return this;
        }
        public Builder templates(GetServiceTemplate... templates) {
            return templates(List.of(templates));
        }
        @CustomType.Setter
        public Builder traffics(List<GetServiceTraffic> traffics) {
            if (traffics == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "traffics");
            }
            this.traffics = traffics;
            return this;
        }
        public Builder traffics(GetServiceTraffic... traffics) {
            return traffics(List.of(traffics));
        }
        public GetServiceResult build() {
            final var _resultValue = new GetServiceResult();
            _resultValue.autogenerateRevisionName = autogenerateRevisionName;
            _resultValue.id = id;
            _resultValue.location = location;
            _resultValue.metadatas = metadatas;
            _resultValue.name = name;
            _resultValue.project = project;
            _resultValue.statuses = statuses;
            _resultValue.templates = templates;
            _resultValue.traffics = traffics;
            return _resultValue;
        }
    }
}
