// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.clouddeploy.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CustomTargetTypeCustomActionsIncludeSkaffoldModuleGitArgs extends com.pulumi.resources.ResourceArgs {

    public static final CustomTargetTypeCustomActionsIncludeSkaffoldModuleGitArgs Empty = new CustomTargetTypeCustomActionsIncludeSkaffoldModuleGitArgs();

    /**
     * Relative path from the repository root to the Skaffold file.
     * 
     */
    @Import(name="path")
    private @Nullable Output<String> path;

    /**
     * @return Relative path from the repository root to the Skaffold file.
     * 
     */
    public Optional<Output<String>> path() {
        return Optional.ofNullable(this.path);
    }

    /**
     * Git ref the package should be cloned from.
     * 
     */
    @Import(name="ref")
    private @Nullable Output<String> ref;

    /**
     * @return Git ref the package should be cloned from.
     * 
     */
    public Optional<Output<String>> ref() {
        return Optional.ofNullable(this.ref);
    }

    /**
     * Git repository the package should be cloned from.
     * 
     */
    @Import(name="repo", required=true)
    private Output<String> repo;

    /**
     * @return Git repository the package should be cloned from.
     * 
     */
    public Output<String> repo() {
        return this.repo;
    }

    private CustomTargetTypeCustomActionsIncludeSkaffoldModuleGitArgs() {}

    private CustomTargetTypeCustomActionsIncludeSkaffoldModuleGitArgs(CustomTargetTypeCustomActionsIncludeSkaffoldModuleGitArgs $) {
        this.path = $.path;
        this.ref = $.ref;
        this.repo = $.repo;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CustomTargetTypeCustomActionsIncludeSkaffoldModuleGitArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CustomTargetTypeCustomActionsIncludeSkaffoldModuleGitArgs $;

        public Builder() {
            $ = new CustomTargetTypeCustomActionsIncludeSkaffoldModuleGitArgs();
        }

        public Builder(CustomTargetTypeCustomActionsIncludeSkaffoldModuleGitArgs defaults) {
            $ = new CustomTargetTypeCustomActionsIncludeSkaffoldModuleGitArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param path Relative path from the repository root to the Skaffold file.
         * 
         * @return builder
         * 
         */
        public Builder path(@Nullable Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path Relative path from the repository root to the Skaffold file.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        /**
         * @param ref Git ref the package should be cloned from.
         * 
         * @return builder
         * 
         */
        public Builder ref(@Nullable Output<String> ref) {
            $.ref = ref;
            return this;
        }

        /**
         * @param ref Git ref the package should be cloned from.
         * 
         * @return builder
         * 
         */
        public Builder ref(String ref) {
            return ref(Output.of(ref));
        }

        /**
         * @param repo Git repository the package should be cloned from.
         * 
         * @return builder
         * 
         */
        public Builder repo(Output<String> repo) {
            $.repo = repo;
            return this;
        }

        /**
         * @param repo Git repository the package should be cloned from.
         * 
         * @return builder
         * 
         */
        public Builder repo(String repo) {
            return repo(Output.of(repo));
        }

        public CustomTargetTypeCustomActionsIncludeSkaffoldModuleGitArgs build() {
            if ($.repo == null) {
                throw new MissingRequiredPropertyException("CustomTargetTypeCustomActionsIncludeSkaffoldModuleGitArgs", "repo");
            }
            return $;
        }
    }

}
