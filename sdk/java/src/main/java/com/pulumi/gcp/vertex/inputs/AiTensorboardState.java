// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.vertex.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.vertex.inputs.AiTensorboardEncryptionSpecArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AiTensorboardState extends com.pulumi.resources.ResourceArgs {

    public static final AiTensorboardState Empty = new AiTensorboardState();

    /**
     * Consumer project Cloud Storage path prefix used to store blob data, which can either be a bucket or directory. Does not
     * end with a &#39;/&#39;.
     * 
     */
    @Import(name="blobStoragePathPrefix")
    private @Nullable Output<String> blobStoragePathPrefix;

    /**
     * @return Consumer project Cloud Storage path prefix used to store blob data, which can either be a bucket or directory. Does not
     * end with a &#39;/&#39;.
     * 
     */
    public Optional<Output<String>> blobStoragePathPrefix() {
        return Optional.ofNullable(this.blobStoragePathPrefix);
    }

    /**
     * The timestamp of when the Tensorboard was created in RFC3339 UTC &#34;Zulu&#34; format, with nanosecond resolution and up to
     * nine fractional digits.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return The timestamp of when the Tensorboard was created in RFC3339 UTC &#34;Zulu&#34; format, with nanosecond resolution and up to
     * nine fractional digits.
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * Description of this Tensorboard.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of this Tensorboard.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * User provided name of this Tensorboard.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return User provided name of this Tensorboard.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Customer-managed encryption key spec for a Tensorboard. If set, this Tensorboard and all sub-resources of this Tensorboard will be secured by this key.
     * Structure is documented below.
     * 
     */
    @Import(name="encryptionSpec")
    private @Nullable Output<AiTensorboardEncryptionSpecArgs> encryptionSpec;

    /**
     * @return Customer-managed encryption key spec for a Tensorboard. If set, this Tensorboard and all sub-resources of this Tensorboard will be secured by this key.
     * Structure is documented below.
     * 
     */
    public Optional<Output<AiTensorboardEncryptionSpecArgs>> encryptionSpec() {
        return Optional.ofNullable(this.encryptionSpec);
    }

    /**
     * The labels with user-defined metadata to organize your Tensorboards.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return The labels with user-defined metadata to organize your Tensorboards.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * Name of the Tensorboard.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the Tensorboard.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The region of the tensorboard. eg us-central1
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The region of the tensorboard. eg us-central1
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The number of Runs stored in this Tensorboard.
     * 
     */
    @Import(name="runCount")
    private @Nullable Output<String> runCount;

    /**
     * @return The number of Runs stored in this Tensorboard.
     * 
     */
    public Optional<Output<String>> runCount() {
        return Optional.ofNullable(this.runCount);
    }

    /**
     * The timestamp of when the Tensorboard was last updated in RFC3339 UTC &#34;Zulu&#34; format, with nanosecond resolution and up
     * to nine fractional digits.
     * 
     */
    @Import(name="updateTime")
    private @Nullable Output<String> updateTime;

    /**
     * @return The timestamp of when the Tensorboard was last updated in RFC3339 UTC &#34;Zulu&#34; format, with nanosecond resolution and up
     * to nine fractional digits.
     * 
     */
    public Optional<Output<String>> updateTime() {
        return Optional.ofNullable(this.updateTime);
    }

    private AiTensorboardState() {}

    private AiTensorboardState(AiTensorboardState $) {
        this.blobStoragePathPrefix = $.blobStoragePathPrefix;
        this.createTime = $.createTime;
        this.description = $.description;
        this.displayName = $.displayName;
        this.encryptionSpec = $.encryptionSpec;
        this.labels = $.labels;
        this.name = $.name;
        this.project = $.project;
        this.region = $.region;
        this.runCount = $.runCount;
        this.updateTime = $.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AiTensorboardState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AiTensorboardState $;

        public Builder() {
            $ = new AiTensorboardState();
        }

        public Builder(AiTensorboardState defaults) {
            $ = new AiTensorboardState(Objects.requireNonNull(defaults));
        }

        /**
         * @param blobStoragePathPrefix Consumer project Cloud Storage path prefix used to store blob data, which can either be a bucket or directory. Does not
         * end with a &#39;/&#39;.
         * 
         * @return builder
         * 
         */
        public Builder blobStoragePathPrefix(@Nullable Output<String> blobStoragePathPrefix) {
            $.blobStoragePathPrefix = blobStoragePathPrefix;
            return this;
        }

        /**
         * @param blobStoragePathPrefix Consumer project Cloud Storage path prefix used to store blob data, which can either be a bucket or directory. Does not
         * end with a &#39;/&#39;.
         * 
         * @return builder
         * 
         */
        public Builder blobStoragePathPrefix(String blobStoragePathPrefix) {
            return blobStoragePathPrefix(Output.of(blobStoragePathPrefix));
        }

        /**
         * @param createTime The timestamp of when the Tensorboard was created in RFC3339 UTC &#34;Zulu&#34; format, with nanosecond resolution and up to
         * nine fractional digits.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime The timestamp of when the Tensorboard was created in RFC3339 UTC &#34;Zulu&#34; format, with nanosecond resolution and up to
         * nine fractional digits.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param description Description of this Tensorboard.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of this Tensorboard.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName User provided name of this Tensorboard.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName User provided name of this Tensorboard.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param encryptionSpec Customer-managed encryption key spec for a Tensorboard. If set, this Tensorboard and all sub-resources of this Tensorboard will be secured by this key.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder encryptionSpec(@Nullable Output<AiTensorboardEncryptionSpecArgs> encryptionSpec) {
            $.encryptionSpec = encryptionSpec;
            return this;
        }

        /**
         * @param encryptionSpec Customer-managed encryption key spec for a Tensorboard. If set, this Tensorboard and all sub-resources of this Tensorboard will be secured by this key.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder encryptionSpec(AiTensorboardEncryptionSpecArgs encryptionSpec) {
            return encryptionSpec(Output.of(encryptionSpec));
        }

        /**
         * @param labels The labels with user-defined metadata to organize your Tensorboards.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels The labels with user-defined metadata to organize your Tensorboards.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param name Name of the Tensorboard.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the Tensorboard.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param region The region of the tensorboard. eg us-central1
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The region of the tensorboard. eg us-central1
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param runCount The number of Runs stored in this Tensorboard.
         * 
         * @return builder
         * 
         */
        public Builder runCount(@Nullable Output<String> runCount) {
            $.runCount = runCount;
            return this;
        }

        /**
         * @param runCount The number of Runs stored in this Tensorboard.
         * 
         * @return builder
         * 
         */
        public Builder runCount(String runCount) {
            return runCount(Output.of(runCount));
        }

        /**
         * @param updateTime The timestamp of when the Tensorboard was last updated in RFC3339 UTC &#34;Zulu&#34; format, with nanosecond resolution and up
         * to nine fractional digits.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(@Nullable Output<String> updateTime) {
            $.updateTime = updateTime;
            return this;
        }

        /**
         * @param updateTime The timestamp of when the Tensorboard was last updated in RFC3339 UTC &#34;Zulu&#34; format, with nanosecond resolution and up
         * to nine fractional digits.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(String updateTime) {
            return updateTime(Output.of(updateTime));
        }

        public AiTensorboardState build() {
            return $;
        }
    }

}
