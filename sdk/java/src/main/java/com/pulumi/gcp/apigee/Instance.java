// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.apigee;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.apigee.InstanceArgs;
import com.pulumi.gcp.apigee.inputs.InstanceState;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * An `Instance` is the runtime dataplane in Apigee.
 * 
 * To get more information about Instance, see:
 * 
 * * [API documentation](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations.instances/create)
 * * How-to Guides
 *     * [Creating a runtime instance](https://cloud.google.com/apigee/docs/api-platform/get-started/create-instance)
 * 
 * ## Example Usage
 * ### Apigee Instance Basic
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.organizations.OrganizationsFunctions;
 * import com.pulumi.gcp.compute.Network;
 * import com.pulumi.gcp.compute.GlobalAddress;
 * import com.pulumi.gcp.compute.GlobalAddressArgs;
 * import com.pulumi.gcp.servicenetworking.Connection;
 * import com.pulumi.gcp.servicenetworking.ConnectionArgs;
 * import com.pulumi.gcp.apigee.Organization;
 * import com.pulumi.gcp.apigee.OrganizationArgs;
 * import com.pulumi.gcp.apigee.Instance;
 * import com.pulumi.gcp.apigee.InstanceArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var current = OrganizationsFunctions.getClientConfig();
 * 
 *         var apigeeNetwork = new Network(&#34;apigeeNetwork&#34;);
 * 
 *         var apigeeRange = new GlobalAddress(&#34;apigeeRange&#34;, GlobalAddressArgs.builder()        
 *             .purpose(&#34;VPC_PEERING&#34;)
 *             .addressType(&#34;INTERNAL&#34;)
 *             .prefixLength(16)
 *             .network(apigeeNetwork.id())
 *             .build());
 * 
 *         var apigeeVpcConnection = new Connection(&#34;apigeeVpcConnection&#34;, ConnectionArgs.builder()        
 *             .network(apigeeNetwork.id())
 *             .service(&#34;servicenetworking.googleapis.com&#34;)
 *             .reservedPeeringRanges(apigeeRange.name())
 *             .build());
 * 
 *         var apigeeOrg = new Organization(&#34;apigeeOrg&#34;, OrganizationArgs.builder()        
 *             .analyticsRegion(&#34;us-central1&#34;)
 *             .projectId(current.applyValue(getClientConfigResult -&gt; getClientConfigResult.project()))
 *             .authorizedNetwork(apigeeNetwork.id())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(apigeeVpcConnection)
 *                 .build());
 * 
 *         var apigeeInstance = new Instance(&#34;apigeeInstance&#34;, InstanceArgs.builder()        
 *             .location(&#34;us-central1&#34;)
 *             .orgId(apigeeOrg.id())
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Apigee Instance Cidr Range
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.organizations.OrganizationsFunctions;
 * import com.pulumi.gcp.compute.Network;
 * import com.pulumi.gcp.compute.GlobalAddress;
 * import com.pulumi.gcp.compute.GlobalAddressArgs;
 * import com.pulumi.gcp.servicenetworking.Connection;
 * import com.pulumi.gcp.servicenetworking.ConnectionArgs;
 * import com.pulumi.gcp.apigee.Organization;
 * import com.pulumi.gcp.apigee.OrganizationArgs;
 * import com.pulumi.gcp.apigee.Instance;
 * import com.pulumi.gcp.apigee.InstanceArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var current = OrganizationsFunctions.getClientConfig();
 * 
 *         var apigeeNetwork = new Network(&#34;apigeeNetwork&#34;);
 * 
 *         var apigeeRange = new GlobalAddress(&#34;apigeeRange&#34;, GlobalAddressArgs.builder()        
 *             .purpose(&#34;VPC_PEERING&#34;)
 *             .addressType(&#34;INTERNAL&#34;)
 *             .prefixLength(22)
 *             .network(apigeeNetwork.id())
 *             .build());
 * 
 *         var apigeeVpcConnection = new Connection(&#34;apigeeVpcConnection&#34;, ConnectionArgs.builder()        
 *             .network(apigeeNetwork.id())
 *             .service(&#34;servicenetworking.googleapis.com&#34;)
 *             .reservedPeeringRanges(apigeeRange.name())
 *             .build());
 * 
 *         var apigeeOrg = new Organization(&#34;apigeeOrg&#34;, OrganizationArgs.builder()        
 *             .analyticsRegion(&#34;us-central1&#34;)
 *             .projectId(current.applyValue(getClientConfigResult -&gt; getClientConfigResult.project()))
 *             .authorizedNetwork(apigeeNetwork.id())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(apigeeVpcConnection)
 *                 .build());
 * 
 *         var apigeeInstance = new Instance(&#34;apigeeInstance&#34;, InstanceArgs.builder()        
 *             .location(&#34;us-central1&#34;)
 *             .orgId(apigeeOrg.id())
 *             .peeringCidrRange(&#34;SLASH_22&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Apigee Instance Ip Range
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.organizations.OrganizationsFunctions;
 * import com.pulumi.gcp.compute.Network;
 * import com.pulumi.gcp.compute.GlobalAddress;
 * import com.pulumi.gcp.compute.GlobalAddressArgs;
 * import com.pulumi.gcp.servicenetworking.Connection;
 * import com.pulumi.gcp.servicenetworking.ConnectionArgs;
 * import com.pulumi.gcp.apigee.Organization;
 * import com.pulumi.gcp.apigee.OrganizationArgs;
 * import com.pulumi.gcp.apigee.Instance;
 * import com.pulumi.gcp.apigee.InstanceArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var current = OrganizationsFunctions.getClientConfig();
 * 
 *         var apigeeNetwork = new Network(&#34;apigeeNetwork&#34;);
 * 
 *         var apigeeRange = new GlobalAddress(&#34;apigeeRange&#34;, GlobalAddressArgs.builder()        
 *             .purpose(&#34;VPC_PEERING&#34;)
 *             .addressType(&#34;INTERNAL&#34;)
 *             .prefixLength(22)
 *             .network(apigeeNetwork.id())
 *             .build());
 * 
 *         var apigeeVpcConnection = new Connection(&#34;apigeeVpcConnection&#34;, ConnectionArgs.builder()        
 *             .network(apigeeNetwork.id())
 *             .service(&#34;servicenetworking.googleapis.com&#34;)
 *             .reservedPeeringRanges(apigeeRange.name())
 *             .build());
 * 
 *         var apigeeOrg = new Organization(&#34;apigeeOrg&#34;, OrganizationArgs.builder()        
 *             .analyticsRegion(&#34;us-central1&#34;)
 *             .projectId(current.applyValue(getClientConfigResult -&gt; getClientConfigResult.project()))
 *             .authorizedNetwork(apigeeNetwork.id())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(apigeeVpcConnection)
 *                 .build());
 * 
 *         var apigeeInstance = new Instance(&#34;apigeeInstance&#34;, InstanceArgs.builder()        
 *             .location(&#34;us-central1&#34;)
 *             .orgId(apigeeOrg.id())
 *             .ipRange(&#34;10.87.8.0/22&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Apigee Instance Full
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.organizations.OrganizationsFunctions;
 * import com.pulumi.gcp.compute.Network;
 * import com.pulumi.gcp.compute.GlobalAddress;
 * import com.pulumi.gcp.compute.GlobalAddressArgs;
 * import com.pulumi.gcp.servicenetworking.Connection;
 * import com.pulumi.gcp.servicenetworking.ConnectionArgs;
 * import com.pulumi.gcp.kms.KeyRing;
 * import com.pulumi.gcp.kms.KeyRingArgs;
 * import com.pulumi.gcp.kms.CryptoKey;
 * import com.pulumi.gcp.kms.CryptoKeyArgs;
 * import com.pulumi.gcp.projects.ServiceIdentity;
 * import com.pulumi.gcp.projects.ServiceIdentityArgs;
 * import com.pulumi.gcp.kms.CryptoKeyIAMBinding;
 * import com.pulumi.gcp.kms.CryptoKeyIAMBindingArgs;
 * import com.pulumi.gcp.apigee.Organization;
 * import com.pulumi.gcp.apigee.OrganizationArgs;
 * import com.pulumi.gcp.apigee.Instance;
 * import com.pulumi.gcp.apigee.InstanceArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var current = OrganizationsFunctions.getClientConfig();
 * 
 *         var apigeeNetwork = new Network(&#34;apigeeNetwork&#34;);
 * 
 *         var apigeeRange = new GlobalAddress(&#34;apigeeRange&#34;, GlobalAddressArgs.builder()        
 *             .purpose(&#34;VPC_PEERING&#34;)
 *             .addressType(&#34;INTERNAL&#34;)
 *             .prefixLength(16)
 *             .network(apigeeNetwork.id())
 *             .build());
 * 
 *         var apigeeVpcConnection = new Connection(&#34;apigeeVpcConnection&#34;, ConnectionArgs.builder()        
 *             .network(apigeeNetwork.id())
 *             .service(&#34;servicenetworking.googleapis.com&#34;)
 *             .reservedPeeringRanges(apigeeRange.name())
 *             .build());
 * 
 *         var apigeeKeyring = new KeyRing(&#34;apigeeKeyring&#34;, KeyRingArgs.builder()        
 *             .location(&#34;us-central1&#34;)
 *             .build());
 * 
 *         var apigeeKey = new CryptoKey(&#34;apigeeKey&#34;, CryptoKeyArgs.builder()        
 *             .keyRing(apigeeKeyring.id())
 *             .build());
 * 
 *         var apigeeSa = new ServiceIdentity(&#34;apigeeSa&#34;, ServiceIdentityArgs.builder()        
 *             .project(google_project.project().project_id())
 *             .service(google_project_service.apigee().service())
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *         var apigeeSaKeyuser = new CryptoKeyIAMBinding(&#34;apigeeSaKeyuser&#34;, CryptoKeyIAMBindingArgs.builder()        
 *             .cryptoKeyId(apigeeKey.id())
 *             .role(&#34;roles/cloudkms.cryptoKeyEncrypterDecrypter&#34;)
 *             .members(apigeeSa.email().applyValue(email -&gt; String.format(&#34;serviceAccount:%s&#34;, email)))
 *             .build());
 * 
 *         var apigeeOrg = new Organization(&#34;apigeeOrg&#34;, OrganizationArgs.builder()        
 *             .analyticsRegion(&#34;us-central1&#34;)
 *             .displayName(&#34;apigee-org&#34;)
 *             .description(&#34;Auto-provisioned Apigee Org.&#34;)
 *             .projectId(current.applyValue(getClientConfigResult -&gt; getClientConfigResult.project()))
 *             .authorizedNetwork(apigeeNetwork.id())
 *             .runtimeDatabaseEncryptionKeyName(apigeeKey.id())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(                
 *                     apigeeVpcConnection,
 *                     apigeeSaKeyuser)
 *                 .build());
 * 
 *         var apigeeInstance = new Instance(&#34;apigeeInstance&#34;, InstanceArgs.builder()        
 *             .location(&#34;us-central1&#34;)
 *             .description(&#34;Auto-managed Apigee Runtime Instance&#34;)
 *             .displayName(&#34;tf-test&#34;)
 *             .orgId(apigeeOrg.id())
 *             .diskEncryptionKeyName(apigeeKey.id())
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * Instance can be imported using any of these accepted formats
 * 
 * ```sh
 *  $ pulumi import gcp:apigee/instance:Instance default {{org_id}}/instances/{{name}}
 * ```
 * 
 * ```sh
 *  $ pulumi import gcp:apigee/instance:Instance default {{org_id}}/{{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:apigee/instance:Instance")
public class Instance extends com.pulumi.resources.CustomResource {
    /**
     * Optional. Customer accept list represents the list of projects (id/number) on customer
     * side that can privately connect to the service attachment. It is an optional field
     * which the customers can provide during the instance creation. By default, the customer
     * project associated with the Apigee organization will be included to the list.
     * 
     */
    @Export(name="consumerAcceptLists", type=List.class, parameters={String.class})
    private Output<List<String>> consumerAcceptLists;

    /**
     * @return Optional. Customer accept list represents the list of projects (id/number) on customer
     * side that can privately connect to the service attachment. It is an optional field
     * which the customers can provide during the instance creation. By default, the customer
     * project associated with the Apigee organization will be included to the list.
     * 
     */
    public Output<List<String>> consumerAcceptLists() {
        return this.consumerAcceptLists;
    }
    /**
     * Description of the instance.
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output</* @Nullable */ String> description;

    /**
     * @return Description of the instance.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * Customer Managed Encryption Key (CMEK) used for disk and volume encryption. Required for Apigee paid subscriptions only.
     * Use the following format: `projects/([^/]+)/locations/([^/]+)/keyRings/([^/]+)/cryptoKeys/([^/]+)`
     * 
     */
    @Export(name="diskEncryptionKeyName", type=String.class, parameters={})
    private Output</* @Nullable */ String> diskEncryptionKeyName;

    /**
     * @return Customer Managed Encryption Key (CMEK) used for disk and volume encryption. Required for Apigee paid subscriptions only.
     * Use the following format: `projects/([^/]+)/locations/([^/]+)/keyRings/([^/]+)/cryptoKeys/([^/]+)`
     * 
     */
    public Output<Optional<String>> diskEncryptionKeyName() {
        return Codegen.optional(this.diskEncryptionKeyName);
    }
    /**
     * Display name of the instance.
     * 
     */
    @Export(name="displayName", type=String.class, parameters={})
    private Output</* @Nullable */ String> displayName;

    /**
     * @return Display name of the instance.
     * 
     */
    public Output<Optional<String>> displayName() {
        return Codegen.optional(this.displayName);
    }
    /**
     * Output only. Hostname or IP address of the exposed Apigee endpoint used by clients to connect to the service.
     * 
     */
    @Export(name="host", type=String.class, parameters={})
    private Output<String> host;

    /**
     * @return Output only. Hostname or IP address of the exposed Apigee endpoint used by clients to connect to the service.
     * 
     */
    public Output<String> host() {
        return this.host;
    }
    /**
     * IP range represents the customer-provided CIDR block of length 22 that will be used for
     * the Apigee instance creation. This optional range, if provided, should be freely
     * available as part of larger named range the customer has allocated to the Service
     * Networking peering. If this is not provided, Apigee will automatically request for any
     * available /22 CIDR block from Service Networking. The customer should use this CIDR block
     * for configuring their firewall needs to allow traffic from Apigee.
     * Input format: &#34;a.b.c.d/22&#34;
     * 
     */
    @Export(name="ipRange", type=String.class, parameters={})
    private Output</* @Nullable */ String> ipRange;

    /**
     * @return IP range represents the customer-provided CIDR block of length 22 that will be used for
     * the Apigee instance creation. This optional range, if provided, should be freely
     * available as part of larger named range the customer has allocated to the Service
     * Networking peering. If this is not provided, Apigee will automatically request for any
     * available /22 CIDR block from Service Networking. The customer should use this CIDR block
     * for configuring their firewall needs to allow traffic from Apigee.
     * Input format: &#34;a.b.c.d/22&#34;
     * 
     */
    public Output<Optional<String>> ipRange() {
        return Codegen.optional(this.ipRange);
    }
    /**
     * Required. Compute Engine location where the instance resides.
     * 
     */
    @Export(name="location", type=String.class, parameters={})
    private Output<String> location;

    /**
     * @return Required. Compute Engine location where the instance resides.
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * Resource ID of the instance.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Resource ID of the instance.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The Apigee Organization associated with the Apigee instance,
     * in the format `organizations/{{org_name}}`.
     * 
     */
    @Export(name="orgId", type=String.class, parameters={})
    private Output<String> orgId;

    /**
     * @return The Apigee Organization associated with the Apigee instance,
     * in the format `organizations/{{org_name}}`.
     * 
     */
    public Output<String> orgId() {
        return this.orgId;
    }
    /**
     * The size of the CIDR block range that will be reserved by the instance. For valid values,
     * see [CidrRange](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations.instances#CidrRange) on the documentation.
     * 
     */
    @Export(name="peeringCidrRange", type=String.class, parameters={})
    private Output<String> peeringCidrRange;

    /**
     * @return The size of the CIDR block range that will be reserved by the instance. For valid values,
     * see [CidrRange](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations.instances#CidrRange) on the documentation.
     * 
     */
    public Output<String> peeringCidrRange() {
        return this.peeringCidrRange;
    }
    /**
     * Output only. Port number of the exposed Apigee endpoint.
     * 
     */
    @Export(name="port", type=String.class, parameters={})
    private Output<String> port;

    /**
     * @return Output only. Port number of the exposed Apigee endpoint.
     * 
     */
    public Output<String> port() {
        return this.port;
    }
    /**
     * Output only. Resource name of the service attachment created for the instance in
     * the format: projects/*{@literal /}regions/*{@literal /}serviceAttachments/* Apigee customers can privately
     * forward traffic to this service attachment using the PSC endpoints.
     * 
     */
    @Export(name="serviceAttachment", type=String.class, parameters={})
    private Output<String> serviceAttachment;

    /**
     * @return Output only. Resource name of the service attachment created for the instance in
     * the format: projects/*{@literal /}regions/*{@literal /}serviceAttachments/* Apigee customers can privately
     * forward traffic to this service attachment using the PSC endpoints.
     * 
     */
    public Output<String> serviceAttachment() {
        return this.serviceAttachment;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Instance(String name) {
        this(name, InstanceArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Instance(String name, InstanceArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Instance(String name, InstanceArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:apigee/instance:Instance", name, args == null ? InstanceArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Instance(String name, Output<String> id, @Nullable InstanceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:apigee/instance:Instance", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Instance get(String name, Output<String> id, @Nullable InstanceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Instance(name, id, state, options);
    }
}
