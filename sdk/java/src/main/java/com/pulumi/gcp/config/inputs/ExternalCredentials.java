// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.config.inputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class ExternalCredentials {
    private String audience;
    private String identityToken;
    private String serviceAccountEmail;

    private ExternalCredentials() {}
    public String audience() {
        return this.audience;
    }
    public String identityToken() {
        return this.identityToken;
    }
    public String serviceAccountEmail() {
        return this.serviceAccountEmail;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ExternalCredentials defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String audience;
        private String identityToken;
        private String serviceAccountEmail;
        public Builder() {}
        public Builder(ExternalCredentials defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.audience = defaults.audience;
    	      this.identityToken = defaults.identityToken;
    	      this.serviceAccountEmail = defaults.serviceAccountEmail;
        }

        @CustomType.Setter
        public Builder audience(String audience) {
            if (audience == null) {
              throw new MissingRequiredPropertyException("ExternalCredentials", "audience");
            }
            this.audience = audience;
            return this;
        }
        @CustomType.Setter
        public Builder identityToken(String identityToken) {
            if (identityToken == null) {
              throw new MissingRequiredPropertyException("ExternalCredentials", "identityToken");
            }
            this.identityToken = identityToken;
            return this;
        }
        @CustomType.Setter
        public Builder serviceAccountEmail(String serviceAccountEmail) {
            if (serviceAccountEmail == null) {
              throw new MissingRequiredPropertyException("ExternalCredentials", "serviceAccountEmail");
            }
            this.serviceAccountEmail = serviceAccountEmail;
            return this;
        }
        public ExternalCredentials build() {
            final var _resultValue = new ExternalCredentials();
            _resultValue.audience = audience;
            _resultValue.identityToken = identityToken;
            _resultValue.serviceAccountEmail = serviceAccountEmail;
            return _resultValue;
        }
    }
}
