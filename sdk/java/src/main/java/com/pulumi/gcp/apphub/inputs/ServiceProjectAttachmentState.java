// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.apphub.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceProjectAttachmentState extends com.pulumi.resources.ResourceArgs {

    public static final ServiceProjectAttachmentState Empty = new ServiceProjectAttachmentState();

    /**
     * Output only. Create time.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return Output only. Create time.
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * &#34;Identifier. The resource name of a ServiceProjectAttachment. Format:\&#34;projects/{host-project-id}/locations/global/serviceProjectAttachments/{service-project-id}.\&#34;&#34;
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return &#34;Identifier. The resource name of a ServiceProjectAttachment. Format:\&#34;projects/{host-project-id}/locations/global/serviceProjectAttachments/{service-project-id}.\&#34;&#34;
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * &#34;Immutable. Service project name in the format: \&#34;projects/abc\&#34;
     * or \&#34;projects/123\&#34;. As input, project name with either project id or number
     * are accepted. As output, this field will contain project number.&#34;
     * 
     */
    @Import(name="serviceProject")
    private @Nullable Output<String> serviceProject;

    /**
     * @return &#34;Immutable. Service project name in the format: \&#34;projects/abc\&#34;
     * or \&#34;projects/123\&#34;. As input, project name with either project id or number
     * are accepted. As output, this field will contain project number.&#34;
     * 
     */
    public Optional<Output<String>> serviceProject() {
        return Optional.ofNullable(this.serviceProject);
    }

    /**
     * Required. The service project attachment identifier must contain the project_id of the service project specified in the service_project_attachment.service_project field. Hint: &#34;projects/{project_id}&#34;
     * 
     */
    @Import(name="serviceProjectAttachmentId")
    private @Nullable Output<String> serviceProjectAttachmentId;

    /**
     * @return Required. The service project attachment identifier must contain the project_id of the service project specified in the service_project_attachment.service_project field. Hint: &#34;projects/{project_id}&#34;
     * 
     */
    public Optional<Output<String>> serviceProjectAttachmentId() {
        return Optional.ofNullable(this.serviceProjectAttachmentId);
    }

    /**
     * ServiceProjectAttachment state.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return ServiceProjectAttachment state.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * Output only. A globally unique identifier (in UUID4 format) for the `ServiceProjectAttachment`.
     * 
     */
    @Import(name="uid")
    private @Nullable Output<String> uid;

    /**
     * @return Output only. A globally unique identifier (in UUID4 format) for the `ServiceProjectAttachment`.
     * 
     */
    public Optional<Output<String>> uid() {
        return Optional.ofNullable(this.uid);
    }

    private ServiceProjectAttachmentState() {}

    private ServiceProjectAttachmentState(ServiceProjectAttachmentState $) {
        this.createTime = $.createTime;
        this.name = $.name;
        this.project = $.project;
        this.serviceProject = $.serviceProject;
        this.serviceProjectAttachmentId = $.serviceProjectAttachmentId;
        this.state = $.state;
        this.uid = $.uid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceProjectAttachmentState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceProjectAttachmentState $;

        public Builder() {
            $ = new ServiceProjectAttachmentState();
        }

        public Builder(ServiceProjectAttachmentState defaults) {
            $ = new ServiceProjectAttachmentState(Objects.requireNonNull(defaults));
        }

        /**
         * @param createTime Output only. Create time.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime Output only. Create time.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param name &#34;Identifier. The resource name of a ServiceProjectAttachment. Format:\&#34;projects/{host-project-id}/locations/global/serviceProjectAttachments/{service-project-id}.\&#34;&#34;
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name &#34;Identifier. The resource name of a ServiceProjectAttachment. Format:\&#34;projects/{host-project-id}/locations/global/serviceProjectAttachments/{service-project-id}.\&#34;&#34;
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param serviceProject &#34;Immutable. Service project name in the format: \&#34;projects/abc\&#34;
         * or \&#34;projects/123\&#34;. As input, project name with either project id or number
         * are accepted. As output, this field will contain project number.&#34;
         * 
         * @return builder
         * 
         */
        public Builder serviceProject(@Nullable Output<String> serviceProject) {
            $.serviceProject = serviceProject;
            return this;
        }

        /**
         * @param serviceProject &#34;Immutable. Service project name in the format: \&#34;projects/abc\&#34;
         * or \&#34;projects/123\&#34;. As input, project name with either project id or number
         * are accepted. As output, this field will contain project number.&#34;
         * 
         * @return builder
         * 
         */
        public Builder serviceProject(String serviceProject) {
            return serviceProject(Output.of(serviceProject));
        }

        /**
         * @param serviceProjectAttachmentId Required. The service project attachment identifier must contain the project_id of the service project specified in the service_project_attachment.service_project field. Hint: &#34;projects/{project_id}&#34;
         * 
         * @return builder
         * 
         */
        public Builder serviceProjectAttachmentId(@Nullable Output<String> serviceProjectAttachmentId) {
            $.serviceProjectAttachmentId = serviceProjectAttachmentId;
            return this;
        }

        /**
         * @param serviceProjectAttachmentId Required. The service project attachment identifier must contain the project_id of the service project specified in the service_project_attachment.service_project field. Hint: &#34;projects/{project_id}&#34;
         * 
         * @return builder
         * 
         */
        public Builder serviceProjectAttachmentId(String serviceProjectAttachmentId) {
            return serviceProjectAttachmentId(Output.of(serviceProjectAttachmentId));
        }

        /**
         * @param state ServiceProjectAttachment state.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state ServiceProjectAttachment state.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param uid Output only. A globally unique identifier (in UUID4 format) for the `ServiceProjectAttachment`.
         * 
         * @return builder
         * 
         */
        public Builder uid(@Nullable Output<String> uid) {
            $.uid = uid;
            return this;
        }

        /**
         * @param uid Output only. A globally unique identifier (in UUID4 format) for the `ServiceProjectAttachment`.
         * 
         * @return builder
         * 
         */
        public Builder uid(String uid) {
            return uid(Output.of(uid));
        }

        public ServiceProjectAttachmentState build() {
            return $;
        }
    }

}
