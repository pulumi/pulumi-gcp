// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.integrationconnectors.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.integrationconnectors.inputs.ConnectionAuthConfigArgs;
import com.pulumi.gcp.integrationconnectors.inputs.ConnectionConfigVariableArgs;
import com.pulumi.gcp.integrationconnectors.inputs.ConnectionConnectorVersionInfraConfigArgs;
import com.pulumi.gcp.integrationconnectors.inputs.ConnectionDestinationConfigArgs;
import com.pulumi.gcp.integrationconnectors.inputs.ConnectionEventingConfigArgs;
import com.pulumi.gcp.integrationconnectors.inputs.ConnectionEventingRuntimeDataArgs;
import com.pulumi.gcp.integrationconnectors.inputs.ConnectionLockConfigArgs;
import com.pulumi.gcp.integrationconnectors.inputs.ConnectionLogConfigArgs;
import com.pulumi.gcp.integrationconnectors.inputs.ConnectionNodeConfigArgs;
import com.pulumi.gcp.integrationconnectors.inputs.ConnectionSslConfigArgs;
import com.pulumi.gcp.integrationconnectors.inputs.ConnectionStatusArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectionState extends com.pulumi.resources.ResourceArgs {

    public static final ConnectionState Empty = new ConnectionState();

    /**
     * authConfig for the connection.
     * Structure is documented below.
     * 
     */
    @Import(name="authConfig")
    private @Nullable Output<ConnectionAuthConfigArgs> authConfig;

    /**
     * @return authConfig for the connection.
     * Structure is documented below.
     * 
     */
    public Optional<Output<ConnectionAuthConfigArgs>> authConfig() {
        return Optional.ofNullable(this.authConfig);
    }

    /**
     * Config Variables for the connection.
     * Structure is documented below.
     * 
     */
    @Import(name="configVariables")
    private @Nullable Output<List<ConnectionConfigVariableArgs>> configVariables;

    /**
     * @return Config Variables for the connection.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<ConnectionConfigVariableArgs>>> configVariables() {
        return Optional.ofNullable(this.configVariables);
    }

    /**
     * Connection revision. This field is only updated when the connection is created or updated by User.
     * 
     */
    @Import(name="connectionRevision")
    private @Nullable Output<String> connectionRevision;

    /**
     * @return Connection revision. This field is only updated when the connection is created or updated by User.
     * 
     */
    public Optional<Output<String>> connectionRevision() {
        return Optional.ofNullable(this.connectionRevision);
    }

    /**
     * connectorVersion of the Connector.
     * 
     */
    @Import(name="connectorVersion")
    private @Nullable Output<String> connectorVersion;

    /**
     * @return connectorVersion of the Connector.
     * 
     */
    public Optional<Output<String>> connectorVersion() {
        return Optional.ofNullable(this.connectorVersion);
    }

    /**
     * This configuration provides infra configs like rate limit threshold which need to be configurable for every connector version.
     * Structure is documented below.
     * 
     */
    @Import(name="connectorVersionInfraConfigs")
    private @Nullable Output<List<ConnectionConnectorVersionInfraConfigArgs>> connectorVersionInfraConfigs;

    /**
     * @return This configuration provides infra configs like rate limit threshold which need to be configurable for every connector version.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<ConnectionConnectorVersionInfraConfigArgs>>> connectorVersionInfraConfigs() {
        return Optional.ofNullable(this.connectorVersionInfraConfigs);
    }

    /**
     * Flag to mark the version indicating the launch stage.
     * 
     */
    @Import(name="connectorVersionLaunchStage")
    private @Nullable Output<String> connectorVersionLaunchStage;

    /**
     * @return Flag to mark the version indicating the launch stage.
     * 
     */
    public Optional<Output<String>> connectorVersionLaunchStage() {
        return Optional.ofNullable(this.connectorVersionLaunchStage);
    }

    /**
     * Time the Namespace was created in UTC.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return Time the Namespace was created in UTC.
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * An arbitrary description for the Conection.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return An arbitrary description for the Conection.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Define the Connectors target endpoint.
     * Structure is documented below.
     * 
     */
    @Import(name="destinationConfigs")
    private @Nullable Output<List<ConnectionDestinationConfigArgs>> destinationConfigs;

    /**
     * @return Define the Connectors target endpoint.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<ConnectionDestinationConfigArgs>>> destinationConfigs() {
        return Optional.ofNullable(this.destinationConfigs);
    }

    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    @Import(name="effectiveLabels")
    private @Nullable Output<Map<String,String>> effectiveLabels;

    /**
     * @return All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    public Optional<Output<Map<String,String>>> effectiveLabels() {
        return Optional.ofNullable(this.effectiveLabels);
    }

    /**
     * Eventing Configuration of a connection
     * Structure is documented below.
     * 
     */
    @Import(name="eventingConfig")
    private @Nullable Output<ConnectionEventingConfigArgs> eventingConfig;

    /**
     * @return Eventing Configuration of a connection
     * Structure is documented below.
     * 
     */
    public Optional<Output<ConnectionEventingConfigArgs>> eventingConfig() {
        return Optional.ofNullable(this.eventingConfig);
    }

    /**
     * Eventing enablement type. Will be nil if eventing is not enabled.
     * Possible values are: `EVENTING_AND_CONNECTION`, `ONLY_EVENTING`.
     * 
     */
    @Import(name="eventingEnablementType")
    private @Nullable Output<String> eventingEnablementType;

    /**
     * @return Eventing enablement type. Will be nil if eventing is not enabled.
     * Possible values are: `EVENTING_AND_CONNECTION`, `ONLY_EVENTING`.
     * 
     */
    public Optional<Output<String>> eventingEnablementType() {
        return Optional.ofNullable(this.eventingEnablementType);
    }

    /**
     * Eventing Runtime Data.
     * Structure is documented below.
     * 
     */
    @Import(name="eventingRuntimeDatas")
    private @Nullable Output<List<ConnectionEventingRuntimeDataArgs>> eventingRuntimeDatas;

    /**
     * @return Eventing Runtime Data.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<ConnectionEventingRuntimeDataArgs>>> eventingRuntimeDatas() {
        return Optional.ofNullable(this.eventingRuntimeDatas);
    }

    /**
     * Resource labels to represent user provided metadata.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Resource labels to represent user provided metadata.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * Location in which Connection needs to be created.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return Location in which Connection needs to be created.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Determines whether or no a connection is locked. If locked, a reason must be specified.
     * Structure is documented below.
     * 
     */
    @Import(name="lockConfig")
    private @Nullable Output<ConnectionLockConfigArgs> lockConfig;

    /**
     * @return Determines whether or no a connection is locked. If locked, a reason must be specified.
     * Structure is documented below.
     * 
     */
    public Optional<Output<ConnectionLockConfigArgs>> lockConfig() {
        return Optional.ofNullable(this.lockConfig);
    }

    /**
     * Log configuration for the connection.
     * Structure is documented below.
     * 
     */
    @Import(name="logConfig")
    private @Nullable Output<ConnectionLogConfigArgs> logConfig;

    /**
     * @return Log configuration for the connection.
     * Structure is documented below.
     * 
     */
    public Optional<Output<ConnectionLogConfigArgs>> logConfig() {
        return Optional.ofNullable(this.logConfig);
    }

    /**
     * Name of Connection needs to be created.
     * 
     * ***
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of Connection needs to be created.
     * 
     * ***
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Node configuration for the connection.
     * Structure is documented below.
     * 
     */
    @Import(name="nodeConfig")
    private @Nullable Output<ConnectionNodeConfigArgs> nodeConfig;

    /**
     * @return Node configuration for the connection.
     * Structure is documented below.
     * 
     */
    public Optional<Output<ConnectionNodeConfigArgs>> nodeConfig() {
        return Optional.ofNullable(this.nodeConfig);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    @Import(name="pulumiLabels")
    private @Nullable Output<Map<String,String>> pulumiLabels;

    /**
     * @return The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    public Optional<Output<Map<String,String>>> pulumiLabels() {
        return Optional.ofNullable(this.pulumiLabels);
    }

    /**
     * Service account needed for runtime plane to access Google Cloud resources.
     * 
     */
    @Import(name="serviceAccount")
    private @Nullable Output<String> serviceAccount;

    /**
     * @return Service account needed for runtime plane to access Google Cloud resources.
     * 
     */
    public Optional<Output<String>> serviceAccount() {
        return Optional.ofNullable(this.serviceAccount);
    }

    /**
     * The name of the Service Directory service name. Used for Private Harpoon to resolve the ILB address.
     * e.g. &#34;projects/cloud-connectors-e2e-testing/locations/us-central1/namespaces/istio-system/services/istio-ingressgateway-connectors&#34;
     * 
     */
    @Import(name="serviceDirectory")
    private @Nullable Output<String> serviceDirectory;

    /**
     * @return The name of the Service Directory service name. Used for Private Harpoon to resolve the ILB address.
     * e.g. &#34;projects/cloud-connectors-e2e-testing/locations/us-central1/namespaces/istio-system/services/istio-ingressgateway-connectors&#34;
     * 
     */
    public Optional<Output<String>> serviceDirectory() {
        return Optional.ofNullable(this.serviceDirectory);
    }

    /**
     * SSL Configuration of a connection
     * Structure is documented below.
     * 
     */
    @Import(name="sslConfig")
    private @Nullable Output<ConnectionSslConfigArgs> sslConfig;

    /**
     * @return SSL Configuration of a connection
     * Structure is documented below.
     * 
     */
    public Optional<Output<ConnectionSslConfigArgs>> sslConfig() {
        return Optional.ofNullable(this.sslConfig);
    }

    /**
     * (Output)
     * Current status of eventing.
     * Structure is documented below.
     * 
     */
    @Import(name="statuses")
    private @Nullable Output<List<ConnectionStatusArgs>> statuses;

    /**
     * @return (Output)
     * Current status of eventing.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<ConnectionStatusArgs>>> statuses() {
        return Optional.ofNullable(this.statuses);
    }

    /**
     * This subscription type enum states the subscription type of the project.
     * 
     */
    @Import(name="subscriptionType")
    private @Nullable Output<String> subscriptionType;

    /**
     * @return This subscription type enum states the subscription type of the project.
     * 
     */
    public Optional<Output<String>> subscriptionType() {
        return Optional.ofNullable(this.subscriptionType);
    }

    /**
     * Suspended indicates if a user has suspended a connection or not.
     * 
     */
    @Import(name="suspended")
    private @Nullable Output<Boolean> suspended;

    /**
     * @return Suspended indicates if a user has suspended a connection or not.
     * 
     */
    public Optional<Output<Boolean>> suspended() {
        return Optional.ofNullable(this.suspended);
    }

    /**
     * Time the Namespace was updated in UTC.
     * 
     */
    @Import(name="updateTime")
    private @Nullable Output<String> updateTime;

    /**
     * @return Time the Namespace was updated in UTC.
     * 
     */
    public Optional<Output<String>> updateTime() {
        return Optional.ofNullable(this.updateTime);
    }

    private ConnectionState() {}

    private ConnectionState(ConnectionState $) {
        this.authConfig = $.authConfig;
        this.configVariables = $.configVariables;
        this.connectionRevision = $.connectionRevision;
        this.connectorVersion = $.connectorVersion;
        this.connectorVersionInfraConfigs = $.connectorVersionInfraConfigs;
        this.connectorVersionLaunchStage = $.connectorVersionLaunchStage;
        this.createTime = $.createTime;
        this.description = $.description;
        this.destinationConfigs = $.destinationConfigs;
        this.effectiveLabels = $.effectiveLabels;
        this.eventingConfig = $.eventingConfig;
        this.eventingEnablementType = $.eventingEnablementType;
        this.eventingRuntimeDatas = $.eventingRuntimeDatas;
        this.labels = $.labels;
        this.location = $.location;
        this.lockConfig = $.lockConfig;
        this.logConfig = $.logConfig;
        this.name = $.name;
        this.nodeConfig = $.nodeConfig;
        this.project = $.project;
        this.pulumiLabels = $.pulumiLabels;
        this.serviceAccount = $.serviceAccount;
        this.serviceDirectory = $.serviceDirectory;
        this.sslConfig = $.sslConfig;
        this.statuses = $.statuses;
        this.subscriptionType = $.subscriptionType;
        this.suspended = $.suspended;
        this.updateTime = $.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectionState $;

        public Builder() {
            $ = new ConnectionState();
        }

        public Builder(ConnectionState defaults) {
            $ = new ConnectionState(Objects.requireNonNull(defaults));
        }

        /**
         * @param authConfig authConfig for the connection.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder authConfig(@Nullable Output<ConnectionAuthConfigArgs> authConfig) {
            $.authConfig = authConfig;
            return this;
        }

        /**
         * @param authConfig authConfig for the connection.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder authConfig(ConnectionAuthConfigArgs authConfig) {
            return authConfig(Output.of(authConfig));
        }

        /**
         * @param configVariables Config Variables for the connection.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder configVariables(@Nullable Output<List<ConnectionConfigVariableArgs>> configVariables) {
            $.configVariables = configVariables;
            return this;
        }

        /**
         * @param configVariables Config Variables for the connection.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder configVariables(List<ConnectionConfigVariableArgs> configVariables) {
            return configVariables(Output.of(configVariables));
        }

        /**
         * @param configVariables Config Variables for the connection.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder configVariables(ConnectionConfigVariableArgs... configVariables) {
            return configVariables(List.of(configVariables));
        }

        /**
         * @param connectionRevision Connection revision. This field is only updated when the connection is created or updated by User.
         * 
         * @return builder
         * 
         */
        public Builder connectionRevision(@Nullable Output<String> connectionRevision) {
            $.connectionRevision = connectionRevision;
            return this;
        }

        /**
         * @param connectionRevision Connection revision. This field is only updated when the connection is created or updated by User.
         * 
         * @return builder
         * 
         */
        public Builder connectionRevision(String connectionRevision) {
            return connectionRevision(Output.of(connectionRevision));
        }

        /**
         * @param connectorVersion connectorVersion of the Connector.
         * 
         * @return builder
         * 
         */
        public Builder connectorVersion(@Nullable Output<String> connectorVersion) {
            $.connectorVersion = connectorVersion;
            return this;
        }

        /**
         * @param connectorVersion connectorVersion of the Connector.
         * 
         * @return builder
         * 
         */
        public Builder connectorVersion(String connectorVersion) {
            return connectorVersion(Output.of(connectorVersion));
        }

        /**
         * @param connectorVersionInfraConfigs This configuration provides infra configs like rate limit threshold which need to be configurable for every connector version.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder connectorVersionInfraConfigs(@Nullable Output<List<ConnectionConnectorVersionInfraConfigArgs>> connectorVersionInfraConfigs) {
            $.connectorVersionInfraConfigs = connectorVersionInfraConfigs;
            return this;
        }

        /**
         * @param connectorVersionInfraConfigs This configuration provides infra configs like rate limit threshold which need to be configurable for every connector version.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder connectorVersionInfraConfigs(List<ConnectionConnectorVersionInfraConfigArgs> connectorVersionInfraConfigs) {
            return connectorVersionInfraConfigs(Output.of(connectorVersionInfraConfigs));
        }

        /**
         * @param connectorVersionInfraConfigs This configuration provides infra configs like rate limit threshold which need to be configurable for every connector version.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder connectorVersionInfraConfigs(ConnectionConnectorVersionInfraConfigArgs... connectorVersionInfraConfigs) {
            return connectorVersionInfraConfigs(List.of(connectorVersionInfraConfigs));
        }

        /**
         * @param connectorVersionLaunchStage Flag to mark the version indicating the launch stage.
         * 
         * @return builder
         * 
         */
        public Builder connectorVersionLaunchStage(@Nullable Output<String> connectorVersionLaunchStage) {
            $.connectorVersionLaunchStage = connectorVersionLaunchStage;
            return this;
        }

        /**
         * @param connectorVersionLaunchStage Flag to mark the version indicating the launch stage.
         * 
         * @return builder
         * 
         */
        public Builder connectorVersionLaunchStage(String connectorVersionLaunchStage) {
            return connectorVersionLaunchStage(Output.of(connectorVersionLaunchStage));
        }

        /**
         * @param createTime Time the Namespace was created in UTC.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime Time the Namespace was created in UTC.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param description An arbitrary description for the Conection.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description An arbitrary description for the Conection.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param destinationConfigs Define the Connectors target endpoint.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder destinationConfigs(@Nullable Output<List<ConnectionDestinationConfigArgs>> destinationConfigs) {
            $.destinationConfigs = destinationConfigs;
            return this;
        }

        /**
         * @param destinationConfigs Define the Connectors target endpoint.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder destinationConfigs(List<ConnectionDestinationConfigArgs> destinationConfigs) {
            return destinationConfigs(Output.of(destinationConfigs));
        }

        /**
         * @param destinationConfigs Define the Connectors target endpoint.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder destinationConfigs(ConnectionDestinationConfigArgs... destinationConfigs) {
            return destinationConfigs(List.of(destinationConfigs));
        }

        /**
         * @param effectiveLabels All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
         * 
         * @return builder
         * 
         */
        public Builder effectiveLabels(@Nullable Output<Map<String,String>> effectiveLabels) {
            $.effectiveLabels = effectiveLabels;
            return this;
        }

        /**
         * @param effectiveLabels All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
         * 
         * @return builder
         * 
         */
        public Builder effectiveLabels(Map<String,String> effectiveLabels) {
            return effectiveLabels(Output.of(effectiveLabels));
        }

        /**
         * @param eventingConfig Eventing Configuration of a connection
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder eventingConfig(@Nullable Output<ConnectionEventingConfigArgs> eventingConfig) {
            $.eventingConfig = eventingConfig;
            return this;
        }

        /**
         * @param eventingConfig Eventing Configuration of a connection
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder eventingConfig(ConnectionEventingConfigArgs eventingConfig) {
            return eventingConfig(Output.of(eventingConfig));
        }

        /**
         * @param eventingEnablementType Eventing enablement type. Will be nil if eventing is not enabled.
         * Possible values are: `EVENTING_AND_CONNECTION`, `ONLY_EVENTING`.
         * 
         * @return builder
         * 
         */
        public Builder eventingEnablementType(@Nullable Output<String> eventingEnablementType) {
            $.eventingEnablementType = eventingEnablementType;
            return this;
        }

        /**
         * @param eventingEnablementType Eventing enablement type. Will be nil if eventing is not enabled.
         * Possible values are: `EVENTING_AND_CONNECTION`, `ONLY_EVENTING`.
         * 
         * @return builder
         * 
         */
        public Builder eventingEnablementType(String eventingEnablementType) {
            return eventingEnablementType(Output.of(eventingEnablementType));
        }

        /**
         * @param eventingRuntimeDatas Eventing Runtime Data.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder eventingRuntimeDatas(@Nullable Output<List<ConnectionEventingRuntimeDataArgs>> eventingRuntimeDatas) {
            $.eventingRuntimeDatas = eventingRuntimeDatas;
            return this;
        }

        /**
         * @param eventingRuntimeDatas Eventing Runtime Data.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder eventingRuntimeDatas(List<ConnectionEventingRuntimeDataArgs> eventingRuntimeDatas) {
            return eventingRuntimeDatas(Output.of(eventingRuntimeDatas));
        }

        /**
         * @param eventingRuntimeDatas Eventing Runtime Data.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder eventingRuntimeDatas(ConnectionEventingRuntimeDataArgs... eventingRuntimeDatas) {
            return eventingRuntimeDatas(List.of(eventingRuntimeDatas));
        }

        /**
         * @param labels Resource labels to represent user provided metadata.
         * 
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Resource labels to represent user provided metadata.
         * 
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param location Location in which Connection needs to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Location in which Connection needs to be created.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param lockConfig Determines whether or no a connection is locked. If locked, a reason must be specified.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder lockConfig(@Nullable Output<ConnectionLockConfigArgs> lockConfig) {
            $.lockConfig = lockConfig;
            return this;
        }

        /**
         * @param lockConfig Determines whether or no a connection is locked. If locked, a reason must be specified.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder lockConfig(ConnectionLockConfigArgs lockConfig) {
            return lockConfig(Output.of(lockConfig));
        }

        /**
         * @param logConfig Log configuration for the connection.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder logConfig(@Nullable Output<ConnectionLogConfigArgs> logConfig) {
            $.logConfig = logConfig;
            return this;
        }

        /**
         * @param logConfig Log configuration for the connection.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder logConfig(ConnectionLogConfigArgs logConfig) {
            return logConfig(Output.of(logConfig));
        }

        /**
         * @param name Name of Connection needs to be created.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of Connection needs to be created.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param nodeConfig Node configuration for the connection.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder nodeConfig(@Nullable Output<ConnectionNodeConfigArgs> nodeConfig) {
            $.nodeConfig = nodeConfig;
            return this;
        }

        /**
         * @param nodeConfig Node configuration for the connection.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder nodeConfig(ConnectionNodeConfigArgs nodeConfig) {
            return nodeConfig(Output.of(nodeConfig));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param pulumiLabels The combination of labels configured directly on the resource
         * and default labels configured on the provider.
         * 
         * @return builder
         * 
         */
        public Builder pulumiLabels(@Nullable Output<Map<String,String>> pulumiLabels) {
            $.pulumiLabels = pulumiLabels;
            return this;
        }

        /**
         * @param pulumiLabels The combination of labels configured directly on the resource
         * and default labels configured on the provider.
         * 
         * @return builder
         * 
         */
        public Builder pulumiLabels(Map<String,String> pulumiLabels) {
            return pulumiLabels(Output.of(pulumiLabels));
        }

        /**
         * @param serviceAccount Service account needed for runtime plane to access Google Cloud resources.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccount(@Nullable Output<String> serviceAccount) {
            $.serviceAccount = serviceAccount;
            return this;
        }

        /**
         * @param serviceAccount Service account needed for runtime plane to access Google Cloud resources.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccount(String serviceAccount) {
            return serviceAccount(Output.of(serviceAccount));
        }

        /**
         * @param serviceDirectory The name of the Service Directory service name. Used for Private Harpoon to resolve the ILB address.
         * e.g. &#34;projects/cloud-connectors-e2e-testing/locations/us-central1/namespaces/istio-system/services/istio-ingressgateway-connectors&#34;
         * 
         * @return builder
         * 
         */
        public Builder serviceDirectory(@Nullable Output<String> serviceDirectory) {
            $.serviceDirectory = serviceDirectory;
            return this;
        }

        /**
         * @param serviceDirectory The name of the Service Directory service name. Used for Private Harpoon to resolve the ILB address.
         * e.g. &#34;projects/cloud-connectors-e2e-testing/locations/us-central1/namespaces/istio-system/services/istio-ingressgateway-connectors&#34;
         * 
         * @return builder
         * 
         */
        public Builder serviceDirectory(String serviceDirectory) {
            return serviceDirectory(Output.of(serviceDirectory));
        }

        /**
         * @param sslConfig SSL Configuration of a connection
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder sslConfig(@Nullable Output<ConnectionSslConfigArgs> sslConfig) {
            $.sslConfig = sslConfig;
            return this;
        }

        /**
         * @param sslConfig SSL Configuration of a connection
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder sslConfig(ConnectionSslConfigArgs sslConfig) {
            return sslConfig(Output.of(sslConfig));
        }

        /**
         * @param statuses (Output)
         * Current status of eventing.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder statuses(@Nullable Output<List<ConnectionStatusArgs>> statuses) {
            $.statuses = statuses;
            return this;
        }

        /**
         * @param statuses (Output)
         * Current status of eventing.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder statuses(List<ConnectionStatusArgs> statuses) {
            return statuses(Output.of(statuses));
        }

        /**
         * @param statuses (Output)
         * Current status of eventing.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder statuses(ConnectionStatusArgs... statuses) {
            return statuses(List.of(statuses));
        }

        /**
         * @param subscriptionType This subscription type enum states the subscription type of the project.
         * 
         * @return builder
         * 
         */
        public Builder subscriptionType(@Nullable Output<String> subscriptionType) {
            $.subscriptionType = subscriptionType;
            return this;
        }

        /**
         * @param subscriptionType This subscription type enum states the subscription type of the project.
         * 
         * @return builder
         * 
         */
        public Builder subscriptionType(String subscriptionType) {
            return subscriptionType(Output.of(subscriptionType));
        }

        /**
         * @param suspended Suspended indicates if a user has suspended a connection or not.
         * 
         * @return builder
         * 
         */
        public Builder suspended(@Nullable Output<Boolean> suspended) {
            $.suspended = suspended;
            return this;
        }

        /**
         * @param suspended Suspended indicates if a user has suspended a connection or not.
         * 
         * @return builder
         * 
         */
        public Builder suspended(Boolean suspended) {
            return suspended(Output.of(suspended));
        }

        /**
         * @param updateTime Time the Namespace was updated in UTC.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(@Nullable Output<String> updateTime) {
            $.updateTime = updateTime;
            return this;
        }

        /**
         * @param updateTime Time the Namespace was updated in UTC.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(String updateTime) {
            return updateTime(Output.of(updateTime));
        }

        public ConnectionState build() {
            return $;
        }
    }

}
