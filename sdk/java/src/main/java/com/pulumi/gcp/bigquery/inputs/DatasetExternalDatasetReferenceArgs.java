// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.bigquery.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class DatasetExternalDatasetReferenceArgs extends com.pulumi.resources.ResourceArgs {

    public static final DatasetExternalDatasetReferenceArgs Empty = new DatasetExternalDatasetReferenceArgs();

    /**
     * The connection id that is used to access the externalSource.
     * Format: projects/{projectId}/locations/{locationId}/connections/{connectionId}
     * 
     */
    @Import(name="connection", required=true)
    private Output<String> connection;

    /**
     * @return The connection id that is used to access the externalSource.
     * Format: projects/{projectId}/locations/{locationId}/connections/{connectionId}
     * 
     */
    public Output<String> connection() {
        return this.connection;
    }

    /**
     * External source that backs this dataset.
     * 
     */
    @Import(name="externalSource", required=true)
    private Output<String> externalSource;

    /**
     * @return External source that backs this dataset.
     * 
     */
    public Output<String> externalSource() {
        return this.externalSource;
    }

    private DatasetExternalDatasetReferenceArgs() {}

    private DatasetExternalDatasetReferenceArgs(DatasetExternalDatasetReferenceArgs $) {
        this.connection = $.connection;
        this.externalSource = $.externalSource;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatasetExternalDatasetReferenceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatasetExternalDatasetReferenceArgs $;

        public Builder() {
            $ = new DatasetExternalDatasetReferenceArgs();
        }

        public Builder(DatasetExternalDatasetReferenceArgs defaults) {
            $ = new DatasetExternalDatasetReferenceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param connection The connection id that is used to access the externalSource.
         * Format: projects/{projectId}/locations/{locationId}/connections/{connectionId}
         * 
         * @return builder
         * 
         */
        public Builder connection(Output<String> connection) {
            $.connection = connection;
            return this;
        }

        /**
         * @param connection The connection id that is used to access the externalSource.
         * Format: projects/{projectId}/locations/{locationId}/connections/{connectionId}
         * 
         * @return builder
         * 
         */
        public Builder connection(String connection) {
            return connection(Output.of(connection));
        }

        /**
         * @param externalSource External source that backs this dataset.
         * 
         * @return builder
         * 
         */
        public Builder externalSource(Output<String> externalSource) {
            $.externalSource = externalSource;
            return this;
        }

        /**
         * @param externalSource External source that backs this dataset.
         * 
         * @return builder
         * 
         */
        public Builder externalSource(String externalSource) {
            return externalSource(Output.of(externalSource));
        }

        public DatasetExternalDatasetReferenceArgs build() {
            $.connection = Objects.requireNonNull($.connection, "expected parameter 'connection' to be non-null");
            $.externalSource = Objects.requireNonNull($.externalSource, "expected parameter 'externalSource' to be non-null");
            return $;
        }
    }

}
