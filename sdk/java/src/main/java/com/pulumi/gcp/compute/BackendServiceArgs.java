// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.compute.inputs.BackendServiceBackendArgs;
import com.pulumi.gcp.compute.inputs.BackendServiceCdnPolicyArgs;
import com.pulumi.gcp.compute.inputs.BackendServiceCircuitBreakersArgs;
import com.pulumi.gcp.compute.inputs.BackendServiceConsistentHashArgs;
import com.pulumi.gcp.compute.inputs.BackendServiceIapArgs;
import com.pulumi.gcp.compute.inputs.BackendServiceLogConfigArgs;
import com.pulumi.gcp.compute.inputs.BackendServiceOutlierDetectionArgs;
import com.pulumi.gcp.compute.inputs.BackendServiceSecuritySettingsArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BackendServiceArgs extends com.pulumi.resources.ResourceArgs {

    public static final BackendServiceArgs Empty = new BackendServiceArgs();

    /**
     * Lifetime of cookies in seconds if session_affinity is
     * GENERATED_COOKIE. If set to 0, the cookie is non-persistent and lasts
     * only until the end of the browser session (or equivalent). The
     * maximum allowed value for TTL is one day.
     * When the load balancing scheme is INTERNAL, this field is not used.
     * 
     */
    @Import(name="affinityCookieTtlSec")
    private @Nullable Output<Integer> affinityCookieTtlSec;

    /**
     * @return Lifetime of cookies in seconds if session_affinity is
     * GENERATED_COOKIE. If set to 0, the cookie is non-persistent and lasts
     * only until the end of the browser session (or equivalent). The
     * maximum allowed value for TTL is one day.
     * When the load balancing scheme is INTERNAL, this field is not used.
     * 
     */
    public Optional<Output<Integer>> affinityCookieTtlSec() {
        return Optional.ofNullable(this.affinityCookieTtlSec);
    }

    /**
     * The set of backends that serve this BackendService.
     * Structure is documented below.
     * 
     */
    @Import(name="backends")
    private @Nullable Output<List<BackendServiceBackendArgs>> backends;

    /**
     * @return The set of backends that serve this BackendService.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<BackendServiceBackendArgs>>> backends() {
        return Optional.ofNullable(this.backends);
    }

    /**
     * Cloud CDN configuration for this BackendService.
     * Structure is documented below.
     * 
     */
    @Import(name="cdnPolicy")
    private @Nullable Output<BackendServiceCdnPolicyArgs> cdnPolicy;

    /**
     * @return Cloud CDN configuration for this BackendService.
     * Structure is documented below.
     * 
     */
    public Optional<Output<BackendServiceCdnPolicyArgs>> cdnPolicy() {
        return Optional.ofNullable(this.cdnPolicy);
    }

    /**
     * Settings controlling the volume of connections to a backend service. This field
     * is applicable only when the load_balancing_scheme is set to INTERNAL_SELF_MANAGED.
     * Structure is documented below.
     * 
     */
    @Import(name="circuitBreakers")
    private @Nullable Output<BackendServiceCircuitBreakersArgs> circuitBreakers;

    /**
     * @return Settings controlling the volume of connections to a backend service. This field
     * is applicable only when the load_balancing_scheme is set to INTERNAL_SELF_MANAGED.
     * Structure is documented below.
     * 
     */
    public Optional<Output<BackendServiceCircuitBreakersArgs>> circuitBreakers() {
        return Optional.ofNullable(this.circuitBreakers);
    }

    /**
     * Compress text responses using Brotli or gzip compression, based on the client&#39;s Accept-Encoding header.
     * Possible values are `AUTOMATIC` and `DISABLED`.
     * 
     */
    @Import(name="compressionMode")
    private @Nullable Output<String> compressionMode;

    /**
     * @return Compress text responses using Brotli or gzip compression, based on the client&#39;s Accept-Encoding header.
     * Possible values are `AUTOMATIC` and `DISABLED`.
     * 
     */
    public Optional<Output<String>> compressionMode() {
        return Optional.ofNullable(this.compressionMode);
    }

    /**
     * Time for which instance will be drained (not accept new
     * connections, but still work to finish started).
     * 
     */
    @Import(name="connectionDrainingTimeoutSec")
    private @Nullable Output<Integer> connectionDrainingTimeoutSec;

    /**
     * @return Time for which instance will be drained (not accept new
     * connections, but still work to finish started).
     * 
     */
    public Optional<Output<Integer>> connectionDrainingTimeoutSec() {
        return Optional.ofNullable(this.connectionDrainingTimeoutSec);
    }

    /**
     * Consistent Hash-based load balancing can be used to provide soft session
     * affinity based on HTTP headers, cookies or other properties. This load balancing
     * policy is applicable only for HTTP connections. The affinity to a particular
     * destination host will be lost when one or more hosts are added/removed from the
     * destination service. This field specifies parameters that control consistent
     * hashing. This field only applies if the load_balancing_scheme is set to
     * INTERNAL_SELF_MANAGED. This field is only applicable when locality_lb_policy is
     * set to MAGLEV or RING_HASH.
     * Structure is documented below.
     * 
     */
    @Import(name="consistentHash")
    private @Nullable Output<BackendServiceConsistentHashArgs> consistentHash;

    /**
     * @return Consistent Hash-based load balancing can be used to provide soft session
     * affinity based on HTTP headers, cookies or other properties. This load balancing
     * policy is applicable only for HTTP connections. The affinity to a particular
     * destination host will be lost when one or more hosts are added/removed from the
     * destination service. This field specifies parameters that control consistent
     * hashing. This field only applies if the load_balancing_scheme is set to
     * INTERNAL_SELF_MANAGED. This field is only applicable when locality_lb_policy is
     * set to MAGLEV or RING_HASH.
     * Structure is documented below.
     * 
     */
    public Optional<Output<BackendServiceConsistentHashArgs>> consistentHash() {
        return Optional.ofNullable(this.consistentHash);
    }

    /**
     * Headers that the HTTP/S load balancer should add to proxied
     * requests.
     * 
     */
    @Import(name="customRequestHeaders")
    private @Nullable Output<List<String>> customRequestHeaders;

    /**
     * @return Headers that the HTTP/S load balancer should add to proxied
     * requests.
     * 
     */
    public Optional<Output<List<String>>> customRequestHeaders() {
        return Optional.ofNullable(this.customRequestHeaders);
    }

    /**
     * Headers that the HTTP/S load balancer should add to proxied
     * responses.
     * 
     */
    @Import(name="customResponseHeaders")
    private @Nullable Output<List<String>> customResponseHeaders;

    /**
     * @return Headers that the HTTP/S load balancer should add to proxied
     * responses.
     * 
     */
    public Optional<Output<List<String>>> customResponseHeaders() {
        return Optional.ofNullable(this.customResponseHeaders);
    }

    /**
     * An optional description of this resource.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return An optional description of this resource.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The resource URL for the edge security policy associated with this backend service.
     * 
     */
    @Import(name="edgeSecurityPolicy")
    private @Nullable Output<String> edgeSecurityPolicy;

    /**
     * @return The resource URL for the edge security policy associated with this backend service.
     * 
     */
    public Optional<Output<String>> edgeSecurityPolicy() {
        return Optional.ofNullable(this.edgeSecurityPolicy);
    }

    /**
     * If true, enable Cloud CDN for this BackendService.
     * 
     */
    @Import(name="enableCdn")
    private @Nullable Output<Boolean> enableCdn;

    /**
     * @return If true, enable Cloud CDN for this BackendService.
     * 
     */
    public Optional<Output<Boolean>> enableCdn() {
        return Optional.ofNullable(this.enableCdn);
    }

    /**
     * The set of URLs to the HttpHealthCheck or HttpsHealthCheck resource
     * for health checking this BackendService. Currently at most one health
     * check can be specified.
     * A health check must be specified unless the backend service uses an internet
     * or serverless NEG as a backend.
     * For internal load balancing, a URL to a HealthCheck resource must be specified instead.
     * 
     */
    @Import(name="healthChecks")
    private @Nullable Output<String> healthChecks;

    /**
     * @return The set of URLs to the HttpHealthCheck or HttpsHealthCheck resource
     * for health checking this BackendService. Currently at most one health
     * check can be specified.
     * A health check must be specified unless the backend service uses an internet
     * or serverless NEG as a backend.
     * For internal load balancing, a URL to a HealthCheck resource must be specified instead.
     * 
     */
    public Optional<Output<String>> healthChecks() {
        return Optional.ofNullable(this.healthChecks);
    }

    /**
     * Settings for enabling Cloud Identity Aware Proxy
     * Structure is documented below.
     * 
     */
    @Import(name="iap")
    private @Nullable Output<BackendServiceIapArgs> iap;

    /**
     * @return Settings for enabling Cloud Identity Aware Proxy
     * Structure is documented below.
     * 
     */
    public Optional<Output<BackendServiceIapArgs>> iap() {
        return Optional.ofNullable(this.iap);
    }

    /**
     * Indicates whether the backend service will be used with internal or
     * external load balancing. A backend service created for one type of
     * load balancing cannot be used with the other. For more information, refer to
     * [Choosing a load balancer](https://cloud.google.com/load-balancing/docs/backend-service).
     * Default value is `EXTERNAL`.
     * Possible values are `EXTERNAL`, `INTERNAL_SELF_MANAGED`, and `EXTERNAL_MANAGED`.
     * 
     */
    @Import(name="loadBalancingScheme")
    private @Nullable Output<String> loadBalancingScheme;

    /**
     * @return Indicates whether the backend service will be used with internal or
     * external load balancing. A backend service created for one type of
     * load balancing cannot be used with the other. For more information, refer to
     * [Choosing a load balancer](https://cloud.google.com/load-balancing/docs/backend-service).
     * Default value is `EXTERNAL`.
     * Possible values are `EXTERNAL`, `INTERNAL_SELF_MANAGED`, and `EXTERNAL_MANAGED`.
     * 
     */
    public Optional<Output<String>> loadBalancingScheme() {
        return Optional.ofNullable(this.loadBalancingScheme);
    }

    /**
     * The load balancing algorithm used within the scope of the locality.
     * The possible values are:
     * 
     */
    @Import(name="localityLbPolicy")
    private @Nullable Output<String> localityLbPolicy;

    /**
     * @return The load balancing algorithm used within the scope of the locality.
     * The possible values are:
     * 
     */
    public Optional<Output<String>> localityLbPolicy() {
        return Optional.ofNullable(this.localityLbPolicy);
    }

    /**
     * This field denotes the logging options for the load balancer traffic served by this backend service.
     * If logging is enabled, logs will be exported to Stackdriver.
     * Structure is documented below.
     * 
     */
    @Import(name="logConfig")
    private @Nullable Output<BackendServiceLogConfigArgs> logConfig;

    /**
     * @return This field denotes the logging options for the load balancer traffic served by this backend service.
     * If logging is enabled, logs will be exported to Stackdriver.
     * Structure is documented below.
     * 
     */
    public Optional<Output<BackendServiceLogConfigArgs>> logConfig() {
        return Optional.ofNullable(this.logConfig);
    }

    /**
     * Name of the resource. Provided by the client when the resource is
     * created. The name must be 1-63 characters long, and comply with
     * RFC1035. Specifically, the name must be 1-63 characters long and match
     * the regular expression `a-z?` which means the
     * first character must be a lowercase letter, and all following
     * characters must be a dash, lowercase letter, or digit, except the last
     * character, which cannot be a dash.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the resource. Provided by the client when the resource is
     * created. The name must be 1-63 characters long, and comply with
     * RFC1035. Specifically, the name must be 1-63 characters long and match
     * the regular expression `a-z?` which means the
     * first character must be a lowercase letter, and all following
     * characters must be a dash, lowercase letter, or digit, except the last
     * character, which cannot be a dash.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Settings controlling eviction of unhealthy hosts from the load balancing pool.
     * This field is applicable only when the load_balancing_scheme is set
     * to INTERNAL_SELF_MANAGED.
     * Structure is documented below.
     * 
     */
    @Import(name="outlierDetection")
    private @Nullable Output<BackendServiceOutlierDetectionArgs> outlierDetection;

    /**
     * @return Settings controlling eviction of unhealthy hosts from the load balancing pool.
     * This field is applicable only when the load_balancing_scheme is set
     * to INTERNAL_SELF_MANAGED.
     * Structure is documented below.
     * 
     */
    public Optional<Output<BackendServiceOutlierDetectionArgs>> outlierDetection() {
        return Optional.ofNullable(this.outlierDetection);
    }

    /**
     * Name of backend port. The same name should appear in the instance
     * groups referenced by this service. Required when the load balancing
     * scheme is EXTERNAL.
     * 
     */
    @Import(name="portName")
    private @Nullable Output<String> portName;

    /**
     * @return Name of backend port. The same name should appear in the instance
     * groups referenced by this service. Required when the load balancing
     * scheme is EXTERNAL.
     * 
     */
    public Optional<Output<String>> portName() {
        return Optional.ofNullable(this.portName);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The protocol this BackendService uses to communicate with backends.
     * The default is HTTP. **NOTE**: HTTP2 is only valid for beta HTTP/2 load balancer
     * types and may result in errors if used with the GA API.
     * Possible values are `HTTP`, `HTTPS`, `HTTP2`, `TCP`, `SSL`, and `GRPC`.
     * 
     */
    @Import(name="protocol")
    private @Nullable Output<String> protocol;

    /**
     * @return The protocol this BackendService uses to communicate with backends.
     * The default is HTTP. **NOTE**: HTTP2 is only valid for beta HTTP/2 load balancer
     * types and may result in errors if used with the GA API.
     * Possible values are `HTTP`, `HTTPS`, `HTTP2`, `TCP`, `SSL`, and `GRPC`.
     * 
     */
    public Optional<Output<String>> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    /**
     * The security policy associated with this backend service.
     * 
     */
    @Import(name="securityPolicy")
    private @Nullable Output<String> securityPolicy;

    /**
     * @return The security policy associated with this backend service.
     * 
     */
    public Optional<Output<String>> securityPolicy() {
        return Optional.ofNullable(this.securityPolicy);
    }

    /**
     * The security settings that apply to this backend service. This field is applicable to either
     * a regional backend service with the service_protocol set to HTTP, HTTPS, or HTTP2, and
     * load_balancing_scheme set to INTERNAL_MANAGED; or a global backend service with the
     * load_balancing_scheme set to INTERNAL_SELF_MANAGED.
     * Structure is documented below.
     * 
     */
    @Import(name="securitySettings")
    private @Nullable Output<BackendServiceSecuritySettingsArgs> securitySettings;

    /**
     * @return The security settings that apply to this backend service. This field is applicable to either
     * a regional backend service with the service_protocol set to HTTP, HTTPS, or HTTP2, and
     * load_balancing_scheme set to INTERNAL_MANAGED; or a global backend service with the
     * load_balancing_scheme set to INTERNAL_SELF_MANAGED.
     * Structure is documented below.
     * 
     */
    public Optional<Output<BackendServiceSecuritySettingsArgs>> securitySettings() {
        return Optional.ofNullable(this.securitySettings);
    }

    /**
     * Type of session affinity to use. The default is NONE. Session affinity is
     * not applicable if the protocol is UDP.
     * Possible values are `NONE`, `CLIENT_IP`, `CLIENT_IP_PORT_PROTO`, `CLIENT_IP_PROTO`, `GENERATED_COOKIE`, `HEADER_FIELD`, and `HTTP_COOKIE`.
     * 
     */
    @Import(name="sessionAffinity")
    private @Nullable Output<String> sessionAffinity;

    /**
     * @return Type of session affinity to use. The default is NONE. Session affinity is
     * not applicable if the protocol is UDP.
     * Possible values are `NONE`, `CLIENT_IP`, `CLIENT_IP_PORT_PROTO`, `CLIENT_IP_PROTO`, `GENERATED_COOKIE`, `HEADER_FIELD`, and `HTTP_COOKIE`.
     * 
     */
    public Optional<Output<String>> sessionAffinity() {
        return Optional.ofNullable(this.sessionAffinity);
    }

    /**
     * How many seconds to wait for the backend before considering it a
     * failed request. Default is 30 seconds. Valid range is [1, 86400].
     * 
     */
    @Import(name="timeoutSec")
    private @Nullable Output<Integer> timeoutSec;

    /**
     * @return How many seconds to wait for the backend before considering it a
     * failed request. Default is 30 seconds. Valid range is [1, 86400].
     * 
     */
    public Optional<Output<Integer>> timeoutSec() {
        return Optional.ofNullable(this.timeoutSec);
    }

    private BackendServiceArgs() {}

    private BackendServiceArgs(BackendServiceArgs $) {
        this.affinityCookieTtlSec = $.affinityCookieTtlSec;
        this.backends = $.backends;
        this.cdnPolicy = $.cdnPolicy;
        this.circuitBreakers = $.circuitBreakers;
        this.compressionMode = $.compressionMode;
        this.connectionDrainingTimeoutSec = $.connectionDrainingTimeoutSec;
        this.consistentHash = $.consistentHash;
        this.customRequestHeaders = $.customRequestHeaders;
        this.customResponseHeaders = $.customResponseHeaders;
        this.description = $.description;
        this.edgeSecurityPolicy = $.edgeSecurityPolicy;
        this.enableCdn = $.enableCdn;
        this.healthChecks = $.healthChecks;
        this.iap = $.iap;
        this.loadBalancingScheme = $.loadBalancingScheme;
        this.localityLbPolicy = $.localityLbPolicy;
        this.logConfig = $.logConfig;
        this.name = $.name;
        this.outlierDetection = $.outlierDetection;
        this.portName = $.portName;
        this.project = $.project;
        this.protocol = $.protocol;
        this.securityPolicy = $.securityPolicy;
        this.securitySettings = $.securitySettings;
        this.sessionAffinity = $.sessionAffinity;
        this.timeoutSec = $.timeoutSec;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BackendServiceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BackendServiceArgs $;

        public Builder() {
            $ = new BackendServiceArgs();
        }

        public Builder(BackendServiceArgs defaults) {
            $ = new BackendServiceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param affinityCookieTtlSec Lifetime of cookies in seconds if session_affinity is
         * GENERATED_COOKIE. If set to 0, the cookie is non-persistent and lasts
         * only until the end of the browser session (or equivalent). The
         * maximum allowed value for TTL is one day.
         * When the load balancing scheme is INTERNAL, this field is not used.
         * 
         * @return builder
         * 
         */
        public Builder affinityCookieTtlSec(@Nullable Output<Integer> affinityCookieTtlSec) {
            $.affinityCookieTtlSec = affinityCookieTtlSec;
            return this;
        }

        /**
         * @param affinityCookieTtlSec Lifetime of cookies in seconds if session_affinity is
         * GENERATED_COOKIE. If set to 0, the cookie is non-persistent and lasts
         * only until the end of the browser session (or equivalent). The
         * maximum allowed value for TTL is one day.
         * When the load balancing scheme is INTERNAL, this field is not used.
         * 
         * @return builder
         * 
         */
        public Builder affinityCookieTtlSec(Integer affinityCookieTtlSec) {
            return affinityCookieTtlSec(Output.of(affinityCookieTtlSec));
        }

        /**
         * @param backends The set of backends that serve this BackendService.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder backends(@Nullable Output<List<BackendServiceBackendArgs>> backends) {
            $.backends = backends;
            return this;
        }

        /**
         * @param backends The set of backends that serve this BackendService.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder backends(List<BackendServiceBackendArgs> backends) {
            return backends(Output.of(backends));
        }

        /**
         * @param backends The set of backends that serve this BackendService.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder backends(BackendServiceBackendArgs... backends) {
            return backends(List.of(backends));
        }

        /**
         * @param cdnPolicy Cloud CDN configuration for this BackendService.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder cdnPolicy(@Nullable Output<BackendServiceCdnPolicyArgs> cdnPolicy) {
            $.cdnPolicy = cdnPolicy;
            return this;
        }

        /**
         * @param cdnPolicy Cloud CDN configuration for this BackendService.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder cdnPolicy(BackendServiceCdnPolicyArgs cdnPolicy) {
            return cdnPolicy(Output.of(cdnPolicy));
        }

        /**
         * @param circuitBreakers Settings controlling the volume of connections to a backend service. This field
         * is applicable only when the load_balancing_scheme is set to INTERNAL_SELF_MANAGED.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder circuitBreakers(@Nullable Output<BackendServiceCircuitBreakersArgs> circuitBreakers) {
            $.circuitBreakers = circuitBreakers;
            return this;
        }

        /**
         * @param circuitBreakers Settings controlling the volume of connections to a backend service. This field
         * is applicable only when the load_balancing_scheme is set to INTERNAL_SELF_MANAGED.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder circuitBreakers(BackendServiceCircuitBreakersArgs circuitBreakers) {
            return circuitBreakers(Output.of(circuitBreakers));
        }

        /**
         * @param compressionMode Compress text responses using Brotli or gzip compression, based on the client&#39;s Accept-Encoding header.
         * Possible values are `AUTOMATIC` and `DISABLED`.
         * 
         * @return builder
         * 
         */
        public Builder compressionMode(@Nullable Output<String> compressionMode) {
            $.compressionMode = compressionMode;
            return this;
        }

        /**
         * @param compressionMode Compress text responses using Brotli or gzip compression, based on the client&#39;s Accept-Encoding header.
         * Possible values are `AUTOMATIC` and `DISABLED`.
         * 
         * @return builder
         * 
         */
        public Builder compressionMode(String compressionMode) {
            return compressionMode(Output.of(compressionMode));
        }

        /**
         * @param connectionDrainingTimeoutSec Time for which instance will be drained (not accept new
         * connections, but still work to finish started).
         * 
         * @return builder
         * 
         */
        public Builder connectionDrainingTimeoutSec(@Nullable Output<Integer> connectionDrainingTimeoutSec) {
            $.connectionDrainingTimeoutSec = connectionDrainingTimeoutSec;
            return this;
        }

        /**
         * @param connectionDrainingTimeoutSec Time for which instance will be drained (not accept new
         * connections, but still work to finish started).
         * 
         * @return builder
         * 
         */
        public Builder connectionDrainingTimeoutSec(Integer connectionDrainingTimeoutSec) {
            return connectionDrainingTimeoutSec(Output.of(connectionDrainingTimeoutSec));
        }

        /**
         * @param consistentHash Consistent Hash-based load balancing can be used to provide soft session
         * affinity based on HTTP headers, cookies or other properties. This load balancing
         * policy is applicable only for HTTP connections. The affinity to a particular
         * destination host will be lost when one or more hosts are added/removed from the
         * destination service. This field specifies parameters that control consistent
         * hashing. This field only applies if the load_balancing_scheme is set to
         * INTERNAL_SELF_MANAGED. This field is only applicable when locality_lb_policy is
         * set to MAGLEV or RING_HASH.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder consistentHash(@Nullable Output<BackendServiceConsistentHashArgs> consistentHash) {
            $.consistentHash = consistentHash;
            return this;
        }

        /**
         * @param consistentHash Consistent Hash-based load balancing can be used to provide soft session
         * affinity based on HTTP headers, cookies or other properties. This load balancing
         * policy is applicable only for HTTP connections. The affinity to a particular
         * destination host will be lost when one or more hosts are added/removed from the
         * destination service. This field specifies parameters that control consistent
         * hashing. This field only applies if the load_balancing_scheme is set to
         * INTERNAL_SELF_MANAGED. This field is only applicable when locality_lb_policy is
         * set to MAGLEV or RING_HASH.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder consistentHash(BackendServiceConsistentHashArgs consistentHash) {
            return consistentHash(Output.of(consistentHash));
        }

        /**
         * @param customRequestHeaders Headers that the HTTP/S load balancer should add to proxied
         * requests.
         * 
         * @return builder
         * 
         */
        public Builder customRequestHeaders(@Nullable Output<List<String>> customRequestHeaders) {
            $.customRequestHeaders = customRequestHeaders;
            return this;
        }

        /**
         * @param customRequestHeaders Headers that the HTTP/S load balancer should add to proxied
         * requests.
         * 
         * @return builder
         * 
         */
        public Builder customRequestHeaders(List<String> customRequestHeaders) {
            return customRequestHeaders(Output.of(customRequestHeaders));
        }

        /**
         * @param customRequestHeaders Headers that the HTTP/S load balancer should add to proxied
         * requests.
         * 
         * @return builder
         * 
         */
        public Builder customRequestHeaders(String... customRequestHeaders) {
            return customRequestHeaders(List.of(customRequestHeaders));
        }

        /**
         * @param customResponseHeaders Headers that the HTTP/S load balancer should add to proxied
         * responses.
         * 
         * @return builder
         * 
         */
        public Builder customResponseHeaders(@Nullable Output<List<String>> customResponseHeaders) {
            $.customResponseHeaders = customResponseHeaders;
            return this;
        }

        /**
         * @param customResponseHeaders Headers that the HTTP/S load balancer should add to proxied
         * responses.
         * 
         * @return builder
         * 
         */
        public Builder customResponseHeaders(List<String> customResponseHeaders) {
            return customResponseHeaders(Output.of(customResponseHeaders));
        }

        /**
         * @param customResponseHeaders Headers that the HTTP/S load balancer should add to proxied
         * responses.
         * 
         * @return builder
         * 
         */
        public Builder customResponseHeaders(String... customResponseHeaders) {
            return customResponseHeaders(List.of(customResponseHeaders));
        }

        /**
         * @param description An optional description of this resource.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description An optional description of this resource.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param edgeSecurityPolicy The resource URL for the edge security policy associated with this backend service.
         * 
         * @return builder
         * 
         */
        public Builder edgeSecurityPolicy(@Nullable Output<String> edgeSecurityPolicy) {
            $.edgeSecurityPolicy = edgeSecurityPolicy;
            return this;
        }

        /**
         * @param edgeSecurityPolicy The resource URL for the edge security policy associated with this backend service.
         * 
         * @return builder
         * 
         */
        public Builder edgeSecurityPolicy(String edgeSecurityPolicy) {
            return edgeSecurityPolicy(Output.of(edgeSecurityPolicy));
        }

        /**
         * @param enableCdn If true, enable Cloud CDN for this BackendService.
         * 
         * @return builder
         * 
         */
        public Builder enableCdn(@Nullable Output<Boolean> enableCdn) {
            $.enableCdn = enableCdn;
            return this;
        }

        /**
         * @param enableCdn If true, enable Cloud CDN for this BackendService.
         * 
         * @return builder
         * 
         */
        public Builder enableCdn(Boolean enableCdn) {
            return enableCdn(Output.of(enableCdn));
        }

        /**
         * @param healthChecks The set of URLs to the HttpHealthCheck or HttpsHealthCheck resource
         * for health checking this BackendService. Currently at most one health
         * check can be specified.
         * A health check must be specified unless the backend service uses an internet
         * or serverless NEG as a backend.
         * For internal load balancing, a URL to a HealthCheck resource must be specified instead.
         * 
         * @return builder
         * 
         */
        public Builder healthChecks(@Nullable Output<String> healthChecks) {
            $.healthChecks = healthChecks;
            return this;
        }

        /**
         * @param healthChecks The set of URLs to the HttpHealthCheck or HttpsHealthCheck resource
         * for health checking this BackendService. Currently at most one health
         * check can be specified.
         * A health check must be specified unless the backend service uses an internet
         * or serverless NEG as a backend.
         * For internal load balancing, a URL to a HealthCheck resource must be specified instead.
         * 
         * @return builder
         * 
         */
        public Builder healthChecks(String healthChecks) {
            return healthChecks(Output.of(healthChecks));
        }

        /**
         * @param iap Settings for enabling Cloud Identity Aware Proxy
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder iap(@Nullable Output<BackendServiceIapArgs> iap) {
            $.iap = iap;
            return this;
        }

        /**
         * @param iap Settings for enabling Cloud Identity Aware Proxy
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder iap(BackendServiceIapArgs iap) {
            return iap(Output.of(iap));
        }

        /**
         * @param loadBalancingScheme Indicates whether the backend service will be used with internal or
         * external load balancing. A backend service created for one type of
         * load balancing cannot be used with the other. For more information, refer to
         * [Choosing a load balancer](https://cloud.google.com/load-balancing/docs/backend-service).
         * Default value is `EXTERNAL`.
         * Possible values are `EXTERNAL`, `INTERNAL_SELF_MANAGED`, and `EXTERNAL_MANAGED`.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancingScheme(@Nullable Output<String> loadBalancingScheme) {
            $.loadBalancingScheme = loadBalancingScheme;
            return this;
        }

        /**
         * @param loadBalancingScheme Indicates whether the backend service will be used with internal or
         * external load balancing. A backend service created for one type of
         * load balancing cannot be used with the other. For more information, refer to
         * [Choosing a load balancer](https://cloud.google.com/load-balancing/docs/backend-service).
         * Default value is `EXTERNAL`.
         * Possible values are `EXTERNAL`, `INTERNAL_SELF_MANAGED`, and `EXTERNAL_MANAGED`.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancingScheme(String loadBalancingScheme) {
            return loadBalancingScheme(Output.of(loadBalancingScheme));
        }

        /**
         * @param localityLbPolicy The load balancing algorithm used within the scope of the locality.
         * The possible values are:
         * 
         * @return builder
         * 
         */
        public Builder localityLbPolicy(@Nullable Output<String> localityLbPolicy) {
            $.localityLbPolicy = localityLbPolicy;
            return this;
        }

        /**
         * @param localityLbPolicy The load balancing algorithm used within the scope of the locality.
         * The possible values are:
         * 
         * @return builder
         * 
         */
        public Builder localityLbPolicy(String localityLbPolicy) {
            return localityLbPolicy(Output.of(localityLbPolicy));
        }

        /**
         * @param logConfig This field denotes the logging options for the load balancer traffic served by this backend service.
         * If logging is enabled, logs will be exported to Stackdriver.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder logConfig(@Nullable Output<BackendServiceLogConfigArgs> logConfig) {
            $.logConfig = logConfig;
            return this;
        }

        /**
         * @param logConfig This field denotes the logging options for the load balancer traffic served by this backend service.
         * If logging is enabled, logs will be exported to Stackdriver.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder logConfig(BackendServiceLogConfigArgs logConfig) {
            return logConfig(Output.of(logConfig));
        }

        /**
         * @param name Name of the resource. Provided by the client when the resource is
         * created. The name must be 1-63 characters long, and comply with
         * RFC1035. Specifically, the name must be 1-63 characters long and match
         * the regular expression `a-z?` which means the
         * first character must be a lowercase letter, and all following
         * characters must be a dash, lowercase letter, or digit, except the last
         * character, which cannot be a dash.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the resource. Provided by the client when the resource is
         * created. The name must be 1-63 characters long, and comply with
         * RFC1035. Specifically, the name must be 1-63 characters long and match
         * the regular expression `a-z?` which means the
         * first character must be a lowercase letter, and all following
         * characters must be a dash, lowercase letter, or digit, except the last
         * character, which cannot be a dash.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param outlierDetection Settings controlling eviction of unhealthy hosts from the load balancing pool.
         * This field is applicable only when the load_balancing_scheme is set
         * to INTERNAL_SELF_MANAGED.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder outlierDetection(@Nullable Output<BackendServiceOutlierDetectionArgs> outlierDetection) {
            $.outlierDetection = outlierDetection;
            return this;
        }

        /**
         * @param outlierDetection Settings controlling eviction of unhealthy hosts from the load balancing pool.
         * This field is applicable only when the load_balancing_scheme is set
         * to INTERNAL_SELF_MANAGED.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder outlierDetection(BackendServiceOutlierDetectionArgs outlierDetection) {
            return outlierDetection(Output.of(outlierDetection));
        }

        /**
         * @param portName Name of backend port. The same name should appear in the instance
         * groups referenced by this service. Required when the load balancing
         * scheme is EXTERNAL.
         * 
         * @return builder
         * 
         */
        public Builder portName(@Nullable Output<String> portName) {
            $.portName = portName;
            return this;
        }

        /**
         * @param portName Name of backend port. The same name should appear in the instance
         * groups referenced by this service. Required when the load balancing
         * scheme is EXTERNAL.
         * 
         * @return builder
         * 
         */
        public Builder portName(String portName) {
            return portName(Output.of(portName));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param protocol The protocol this BackendService uses to communicate with backends.
         * The default is HTTP. **NOTE**: HTTP2 is only valid for beta HTTP/2 load balancer
         * types and may result in errors if used with the GA API.
         * Possible values are `HTTP`, `HTTPS`, `HTTP2`, `TCP`, `SSL`, and `GRPC`.
         * 
         * @return builder
         * 
         */
        public Builder protocol(@Nullable Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol The protocol this BackendService uses to communicate with backends.
         * The default is HTTP. **NOTE**: HTTP2 is only valid for beta HTTP/2 load balancer
         * types and may result in errors if used with the GA API.
         * Possible values are `HTTP`, `HTTPS`, `HTTP2`, `TCP`, `SSL`, and `GRPC`.
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param securityPolicy The security policy associated with this backend service.
         * 
         * @return builder
         * 
         */
        public Builder securityPolicy(@Nullable Output<String> securityPolicy) {
            $.securityPolicy = securityPolicy;
            return this;
        }

        /**
         * @param securityPolicy The security policy associated with this backend service.
         * 
         * @return builder
         * 
         */
        public Builder securityPolicy(String securityPolicy) {
            return securityPolicy(Output.of(securityPolicy));
        }

        /**
         * @param securitySettings The security settings that apply to this backend service. This field is applicable to either
         * a regional backend service with the service_protocol set to HTTP, HTTPS, or HTTP2, and
         * load_balancing_scheme set to INTERNAL_MANAGED; or a global backend service with the
         * load_balancing_scheme set to INTERNAL_SELF_MANAGED.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder securitySettings(@Nullable Output<BackendServiceSecuritySettingsArgs> securitySettings) {
            $.securitySettings = securitySettings;
            return this;
        }

        /**
         * @param securitySettings The security settings that apply to this backend service. This field is applicable to either
         * a regional backend service with the service_protocol set to HTTP, HTTPS, or HTTP2, and
         * load_balancing_scheme set to INTERNAL_MANAGED; or a global backend service with the
         * load_balancing_scheme set to INTERNAL_SELF_MANAGED.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder securitySettings(BackendServiceSecuritySettingsArgs securitySettings) {
            return securitySettings(Output.of(securitySettings));
        }

        /**
         * @param sessionAffinity Type of session affinity to use. The default is NONE. Session affinity is
         * not applicable if the protocol is UDP.
         * Possible values are `NONE`, `CLIENT_IP`, `CLIENT_IP_PORT_PROTO`, `CLIENT_IP_PROTO`, `GENERATED_COOKIE`, `HEADER_FIELD`, and `HTTP_COOKIE`.
         * 
         * @return builder
         * 
         */
        public Builder sessionAffinity(@Nullable Output<String> sessionAffinity) {
            $.sessionAffinity = sessionAffinity;
            return this;
        }

        /**
         * @param sessionAffinity Type of session affinity to use. The default is NONE. Session affinity is
         * not applicable if the protocol is UDP.
         * Possible values are `NONE`, `CLIENT_IP`, `CLIENT_IP_PORT_PROTO`, `CLIENT_IP_PROTO`, `GENERATED_COOKIE`, `HEADER_FIELD`, and `HTTP_COOKIE`.
         * 
         * @return builder
         * 
         */
        public Builder sessionAffinity(String sessionAffinity) {
            return sessionAffinity(Output.of(sessionAffinity));
        }

        /**
         * @param timeoutSec How many seconds to wait for the backend before considering it a
         * failed request. Default is 30 seconds. Valid range is [1, 86400].
         * 
         * @return builder
         * 
         */
        public Builder timeoutSec(@Nullable Output<Integer> timeoutSec) {
            $.timeoutSec = timeoutSec;
            return this;
        }

        /**
         * @param timeoutSec How many seconds to wait for the backend before considering it a
         * failed request. Default is 30 seconds. Valid range is [1, 86400].
         * 
         * @return builder
         * 
         */
        public Builder timeoutSec(Integer timeoutSec) {
            return timeoutSec(Output.of(timeoutSec));
        }

        public BackendServiceArgs build() {
            return $;
        }
    }

}
