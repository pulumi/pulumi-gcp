// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.netapp.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VolumeMountOptionArgs extends com.pulumi.resources.ResourceArgs {

    public static final VolumeMountOptionArgs Empty = new VolumeMountOptionArgs();

    /**
     * (Output)
     * Export path of the volume.
     * 
     */
    @Import(name="export")
    private @Nullable Output<String> export;

    /**
     * @return (Output)
     * Export path of the volume.
     * 
     */
    public Optional<Output<String>> export() {
        return Optional.ofNullable(this.export);
    }

    /**
     * (Output)
     * Full export path of the volume.
     * Format for NFS volumes: `&lt;export_ip&gt;:/&lt;shareName&gt;`
     * Format for SMB volumes: `\\\\netbios_prefix-four_random_hex_letters.domain_name\\shareName`
     * 
     */
    @Import(name="exportFull")
    private @Nullable Output<String> exportFull;

    /**
     * @return (Output)
     * Full export path of the volume.
     * Format for NFS volumes: `&lt;export_ip&gt;:/&lt;shareName&gt;`
     * Format for SMB volumes: `\\\\netbios_prefix-four_random_hex_letters.domain_name\\shareName`
     * 
     */
    public Optional<Output<String>> exportFull() {
        return Optional.ofNullable(this.exportFull);
    }

    /**
     * (Output)
     * Human-readable mount instructions.
     * 
     */
    @Import(name="instructions")
    private @Nullable Output<String> instructions;

    /**
     * @return (Output)
     * Human-readable mount instructions.
     * 
     */
    public Optional<Output<String>> instructions() {
        return Optional.ofNullable(this.instructions);
    }

    /**
     * (Output)
     * IP Address.
     * 
     */
    @Import(name="ipAddress")
    private @Nullable Output<String> ipAddress;

    /**
     * @return (Output)
     * IP Address.
     * 
     */
    public Optional<Output<String>> ipAddress() {
        return Optional.ofNullable(this.ipAddress);
    }

    /**
     * (Output)
     * Protocol to mount with.
     * 
     */
    @Import(name="protocol")
    private @Nullable Output<String> protocol;

    /**
     * @return (Output)
     * Protocol to mount with.
     * 
     */
    public Optional<Output<String>> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    private VolumeMountOptionArgs() {}

    private VolumeMountOptionArgs(VolumeMountOptionArgs $) {
        this.export = $.export;
        this.exportFull = $.exportFull;
        this.instructions = $.instructions;
        this.ipAddress = $.ipAddress;
        this.protocol = $.protocol;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VolumeMountOptionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VolumeMountOptionArgs $;

        public Builder() {
            $ = new VolumeMountOptionArgs();
        }

        public Builder(VolumeMountOptionArgs defaults) {
            $ = new VolumeMountOptionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param export (Output)
         * Export path of the volume.
         * 
         * @return builder
         * 
         */
        public Builder export(@Nullable Output<String> export) {
            $.export = export;
            return this;
        }

        /**
         * @param export (Output)
         * Export path of the volume.
         * 
         * @return builder
         * 
         */
        public Builder export(String export) {
            return export(Output.of(export));
        }

        /**
         * @param exportFull (Output)
         * Full export path of the volume.
         * Format for NFS volumes: `&lt;export_ip&gt;:/&lt;shareName&gt;`
         * Format for SMB volumes: `\\\\netbios_prefix-four_random_hex_letters.domain_name\\shareName`
         * 
         * @return builder
         * 
         */
        public Builder exportFull(@Nullable Output<String> exportFull) {
            $.exportFull = exportFull;
            return this;
        }

        /**
         * @param exportFull (Output)
         * Full export path of the volume.
         * Format for NFS volumes: `&lt;export_ip&gt;:/&lt;shareName&gt;`
         * Format for SMB volumes: `\\\\netbios_prefix-four_random_hex_letters.domain_name\\shareName`
         * 
         * @return builder
         * 
         */
        public Builder exportFull(String exportFull) {
            return exportFull(Output.of(exportFull));
        }

        /**
         * @param instructions (Output)
         * Human-readable mount instructions.
         * 
         * @return builder
         * 
         */
        public Builder instructions(@Nullable Output<String> instructions) {
            $.instructions = instructions;
            return this;
        }

        /**
         * @param instructions (Output)
         * Human-readable mount instructions.
         * 
         * @return builder
         * 
         */
        public Builder instructions(String instructions) {
            return instructions(Output.of(instructions));
        }

        /**
         * @param ipAddress (Output)
         * IP Address.
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(@Nullable Output<String> ipAddress) {
            $.ipAddress = ipAddress;
            return this;
        }

        /**
         * @param ipAddress (Output)
         * IP Address.
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(String ipAddress) {
            return ipAddress(Output.of(ipAddress));
        }

        /**
         * @param protocol (Output)
         * Protocol to mount with.
         * 
         * @return builder
         * 
         */
        public Builder protocol(@Nullable Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol (Output)
         * Protocol to mount with.
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        public VolumeMountOptionArgs build() {
            return $;
        }
    }

}
