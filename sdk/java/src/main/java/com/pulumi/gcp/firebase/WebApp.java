// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.firebase;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.firebase.WebAppArgs;
import com.pulumi.gcp.firebase.inputs.WebAppState;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * A Google Cloud Firebase web application instance
 * 
 * To get more information about WebApp, see:
 * 
 * * [API documentation](https://firebase.google.com/docs/projects/api/reference/rest/v1beta1/projects.webApps)
 * * How-to Guides
 *     * [Official Documentation](https://firebase.google.com/)
 * 
 * ## Example Usage
 * ### Firebase Web App Basic
 * ```java
 * package generated_program;
 * 
 * import java.util.*;
 * import java.io.*;
 * import java.nio.*;
 * import com.pulumi.*;
 * import static com.pulumi.codegen.internal.Serialization.*;
 * import com.pulumi.resources.CustomResourceOptions;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var defaultProject = new Project(&#34;defaultProject&#34;, ProjectArgs.builder()        
 *             .projectId(&#34;tf-test&#34;)
 *             .orgId(&#34;123456789&#34;)
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *         var defaultFirebase_projectProject = new Project(&#34;defaultFirebase/projectProject&#34;, ProjectArgs.builder()        
 *             .project(defaultProject.projectId())
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *         var basicWebApp = new WebApp(&#34;basicWebApp&#34;, WebAppArgs.builder()        
 *             .project(defaultProject.projectId())
 *             .displayName(&#34;Display Name Basic&#34;)
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .dependsOn(defaultFirebase / projectProject)
 *                 .build());
 * 
 *         final var basicWebAppConfig = FirebaseFunctions.getWebAppConfig(GetWebAppConfigArgs.builder()
 *             .webAppId(basicWebApp.appId())
 *             .build());
 * 
 *         var defaultBucket = new Bucket(&#34;defaultBucket&#34;, BucketArgs.builder()        
 *             .location(&#34;US&#34;)
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *         var defaultBucketObject = new BucketObject(&#34;defaultBucketObject&#34;, BucketObjectArgs.builder()        
 *             .bucket(defaultBucket.name())
 *             .content(Output.tuple(basicWebApp.appId(), basicWebAppConfig.apply(getWebAppConfigResult -&gt; getWebAppConfigResult), basicWebAppConfig.apply(getWebAppConfigResult -&gt; getWebAppConfigResult), basicWebAppConfig.apply(getWebAppConfigResult -&gt; getWebAppConfigResult)[&#34;database_url&#34;], basicWebAppConfig.apply(getWebAppConfigResult -&gt; getWebAppConfigResult)[&#34;storage_bucket&#34;], basicWebAppConfig.apply(getWebAppConfigResult -&gt; getWebAppConfigResult)[&#34;messaging_sender_id&#34;], basicWebAppConfig.apply(getWebAppConfigResult -&gt; getWebAppConfigResult)[&#34;measurement_id&#34;]).apply(values -&gt; {
 *                 var appId = values.t1;
 *                 var basicWebAppConfig = values.t2;
 *                 var basicWebAppConfig1 = values.t3;
 *                 var s = values.t4;
 *                 var s1 = values.t5;
 *                 var s2 = values.t6;
 *                 var s3 = values.t7;
 *                 return serializeJson(
 *                     jsonObject(
 *                         jsonProperty(&#34;appId&#34;, appId),
 *                         jsonProperty(&#34;apiKey&#34;, basicWebAppConfig.apply(getWebAppConfigResult -&gt; getWebAppConfigResult.apiKey())),
 *                         jsonProperty(&#34;authDomain&#34;, basicWebAppConfig1.authDomain()),
 *                         jsonProperty(&#34;databaseURL&#34;, s),
 *                         jsonProperty(&#34;storageBucket&#34;, s1),
 *                         jsonProperty(&#34;messagingSenderId&#34;, s2),
 *                         jsonProperty(&#34;measurementId&#34;, s3)
 *                     ));
 *             }))
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * WebApp can be imported using any of these accepted formats
 * 
 * ```sh
 *  $ pulumi import gcp:firebase/webApp:WebApp default {{project}}/{{name}}
 * ```
 * 
 * ```sh
 *  $ pulumi import gcp:firebase/webApp:WebApp default {{project}} {{name}}
 * ```
 * 
 * ```sh
 *  $ pulumi import gcp:firebase/webApp:WebApp default {{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:firebase/webApp:WebApp")
public class WebApp extends com.pulumi.resources.CustomResource {
    /**
     * Immutable. The globally unique, Firebase-assigned identifier of the App. This identifier should be treated as an opaque
     * token, as the data format is not specified.
     * 
     */
    @Export(name="appId", type=String.class, parameters={})
    private Output<String> appId;

    /**
     * @return Immutable. The globally unique, Firebase-assigned identifier of the App. This identifier should be treated as an opaque
     * token, as the data format is not specified.
     * 
     */
    public Output<String> appId() {
        return this.appId;
    }
    /**
     * The user-assigned display name of the App.
     * 
     */
    @Export(name="displayName", type=String.class, parameters={})
    private Output<String> displayName;

    /**
     * @return The user-assigned display name of the App.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }
    /**
     * The fully qualified resource name of the App, for example: projects/projectId/webApps/appId
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The fully qualified resource name of the App, for example: projects/projectId/webApps/appId
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", type=String.class, parameters={})
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public WebApp(String name) {
        this(name, WebAppArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public WebApp(String name, WebAppArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public WebApp(String name, WebAppArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:firebase/webApp:WebApp", name, args == null ? WebAppArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private WebApp(String name, Output<String> id, @Nullable WebAppState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:firebase/webApp:WebApp", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static WebApp get(String name, Output<String> id, @Nullable WebAppState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new WebApp(name, id, state, options);
    }
}
