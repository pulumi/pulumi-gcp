// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.edgenetwork;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SubnetArgs extends com.pulumi.resources.ResourceArgs {

    public static final SubnetArgs Empty = new SubnetArgs();

    /**
     * A free-text description of the resource. Max length 1024 characters.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A free-text description of the resource. Max length 1024 characters.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The ranges of ipv4 addresses that are owned by this subnetwork, in CIDR format.
     * 
     */
    @Import(name="ipv4Cidrs")
    private @Nullable Output<List<String>> ipv4Cidrs;

    /**
     * @return The ranges of ipv4 addresses that are owned by this subnetwork, in CIDR format.
     * 
     */
    public Optional<Output<List<String>>> ipv4Cidrs() {
        return Optional.ofNullable(this.ipv4Cidrs);
    }

    /**
     * The ranges of ipv6 addresses that are owned by this subnetwork, in CIDR format.
     * 
     */
    @Import(name="ipv6Cidrs")
    private @Nullable Output<List<String>> ipv6Cidrs;

    /**
     * @return The ranges of ipv6 addresses that are owned by this subnetwork, in CIDR format.
     * 
     */
    public Optional<Output<List<String>>> ipv6Cidrs() {
        return Optional.ofNullable(this.ipv6Cidrs);
    }

    /**
     * Labels associated with this resource.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Labels associated with this resource.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * The Google Cloud region to which the target Distributed Cloud Edge zone belongs.
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return The Google Cloud region to which the target Distributed Cloud Edge zone belongs.
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * The ID of the network to which this router belongs.
     * Must be of the form: `projects/{{project}}/locations/{{location}}/zones/{{zone}}/networks/{{network_id}}`
     * 
     */
    @Import(name="network", required=true)
    private Output<String> network;

    /**
     * @return The ID of the network to which this router belongs.
     * Must be of the form: `projects/{{project}}/locations/{{location}}/zones/{{zone}}/networks/{{network_id}}`
     * 
     */
    public Output<String> network() {
        return this.network;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * A unique ID that identifies this subnet.
     * 
     * ***
     * 
     */
    @Import(name="subnetId", required=true)
    private Output<String> subnetId;

    /**
     * @return A unique ID that identifies this subnet.
     * 
     * ***
     * 
     */
    public Output<String> subnetId() {
        return this.subnetId;
    }

    /**
     * VLAN ID for this subnetwork. If not specified, one is assigned automatically.
     * 
     */
    @Import(name="vlanId")
    private @Nullable Output<Integer> vlanId;

    /**
     * @return VLAN ID for this subnetwork. If not specified, one is assigned automatically.
     * 
     */
    public Optional<Output<Integer>> vlanId() {
        return Optional.ofNullable(this.vlanId);
    }

    /**
     * The name of the target Distributed Cloud Edge zone.
     * 
     */
    @Import(name="zone", required=true)
    private Output<String> zone;

    /**
     * @return The name of the target Distributed Cloud Edge zone.
     * 
     */
    public Output<String> zone() {
        return this.zone;
    }

    private SubnetArgs() {}

    private SubnetArgs(SubnetArgs $) {
        this.description = $.description;
        this.ipv4Cidrs = $.ipv4Cidrs;
        this.ipv6Cidrs = $.ipv6Cidrs;
        this.labels = $.labels;
        this.location = $.location;
        this.network = $.network;
        this.project = $.project;
        this.subnetId = $.subnetId;
        this.vlanId = $.vlanId;
        this.zone = $.zone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SubnetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SubnetArgs $;

        public Builder() {
            $ = new SubnetArgs();
        }

        public Builder(SubnetArgs defaults) {
            $ = new SubnetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description A free-text description of the resource. Max length 1024 characters.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A free-text description of the resource. Max length 1024 characters.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param ipv4Cidrs The ranges of ipv4 addresses that are owned by this subnetwork, in CIDR format.
         * 
         * @return builder
         * 
         */
        public Builder ipv4Cidrs(@Nullable Output<List<String>> ipv4Cidrs) {
            $.ipv4Cidrs = ipv4Cidrs;
            return this;
        }

        /**
         * @param ipv4Cidrs The ranges of ipv4 addresses that are owned by this subnetwork, in CIDR format.
         * 
         * @return builder
         * 
         */
        public Builder ipv4Cidrs(List<String> ipv4Cidrs) {
            return ipv4Cidrs(Output.of(ipv4Cidrs));
        }

        /**
         * @param ipv4Cidrs The ranges of ipv4 addresses that are owned by this subnetwork, in CIDR format.
         * 
         * @return builder
         * 
         */
        public Builder ipv4Cidrs(String... ipv4Cidrs) {
            return ipv4Cidrs(List.of(ipv4Cidrs));
        }

        /**
         * @param ipv6Cidrs The ranges of ipv6 addresses that are owned by this subnetwork, in CIDR format.
         * 
         * @return builder
         * 
         */
        public Builder ipv6Cidrs(@Nullable Output<List<String>> ipv6Cidrs) {
            $.ipv6Cidrs = ipv6Cidrs;
            return this;
        }

        /**
         * @param ipv6Cidrs The ranges of ipv6 addresses that are owned by this subnetwork, in CIDR format.
         * 
         * @return builder
         * 
         */
        public Builder ipv6Cidrs(List<String> ipv6Cidrs) {
            return ipv6Cidrs(Output.of(ipv6Cidrs));
        }

        /**
         * @param ipv6Cidrs The ranges of ipv6 addresses that are owned by this subnetwork, in CIDR format.
         * 
         * @return builder
         * 
         */
        public Builder ipv6Cidrs(String... ipv6Cidrs) {
            return ipv6Cidrs(List.of(ipv6Cidrs));
        }

        /**
         * @param labels Labels associated with this resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Labels associated with this resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param location The Google Cloud region to which the target Distributed Cloud Edge zone belongs.
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The Google Cloud region to which the target Distributed Cloud Edge zone belongs.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param network The ID of the network to which this router belongs.
         * Must be of the form: `projects/{{project}}/locations/{{location}}/zones/{{zone}}/networks/{{network_id}}`
         * 
         * @return builder
         * 
         */
        public Builder network(Output<String> network) {
            $.network = network;
            return this;
        }

        /**
         * @param network The ID of the network to which this router belongs.
         * Must be of the form: `projects/{{project}}/locations/{{location}}/zones/{{zone}}/networks/{{network_id}}`
         * 
         * @return builder
         * 
         */
        public Builder network(String network) {
            return network(Output.of(network));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param subnetId A unique ID that identifies this subnet.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder subnetId(Output<String> subnetId) {
            $.subnetId = subnetId;
            return this;
        }

        /**
         * @param subnetId A unique ID that identifies this subnet.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder subnetId(String subnetId) {
            return subnetId(Output.of(subnetId));
        }

        /**
         * @param vlanId VLAN ID for this subnetwork. If not specified, one is assigned automatically.
         * 
         * @return builder
         * 
         */
        public Builder vlanId(@Nullable Output<Integer> vlanId) {
            $.vlanId = vlanId;
            return this;
        }

        /**
         * @param vlanId VLAN ID for this subnetwork. If not specified, one is assigned automatically.
         * 
         * @return builder
         * 
         */
        public Builder vlanId(Integer vlanId) {
            return vlanId(Output.of(vlanId));
        }

        /**
         * @param zone The name of the target Distributed Cloud Edge zone.
         * 
         * @return builder
         * 
         */
        public Builder zone(Output<String> zone) {
            $.zone = zone;
            return this;
        }

        /**
         * @param zone The name of the target Distributed Cloud Edge zone.
         * 
         * @return builder
         * 
         */
        public Builder zone(String zone) {
            return zone(Output.of(zone));
        }

        public SubnetArgs build() {
            $.location = Objects.requireNonNull($.location, "expected parameter 'location' to be non-null");
            $.network = Objects.requireNonNull($.network, "expected parameter 'network' to be non-null");
            $.subnetId = Objects.requireNonNull($.subnetId, "expected parameter 'subnetId' to be non-null");
            $.zone = Objects.requireNonNull($.zone, "expected parameter 'zone' to be non-null");
            return $;
        }
    }

}
