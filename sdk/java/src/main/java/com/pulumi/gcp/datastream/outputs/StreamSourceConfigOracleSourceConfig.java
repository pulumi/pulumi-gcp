// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.datastream.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.datastream.outputs.StreamSourceConfigOracleSourceConfigDropLargeObjects;
import com.pulumi.gcp.datastream.outputs.StreamSourceConfigOracleSourceConfigExcludeObjects;
import com.pulumi.gcp.datastream.outputs.StreamSourceConfigOracleSourceConfigIncludeObjects;
import com.pulumi.gcp.datastream.outputs.StreamSourceConfigOracleSourceConfigStreamLargeObjects;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class StreamSourceConfigOracleSourceConfig {
    /**
     * @return Configuration to drop large object values.
     * 
     */
    private @Nullable StreamSourceConfigOracleSourceConfigDropLargeObjects dropLargeObjects;
    /**
     * @return Oracle objects to exclude from the stream.
     * Structure is documented below.
     * 
     */
    private @Nullable StreamSourceConfigOracleSourceConfigExcludeObjects excludeObjects;
    /**
     * @return Oracle objects to retrieve from the source.
     * Structure is documented below.
     * 
     */
    private @Nullable StreamSourceConfigOracleSourceConfigIncludeObjects includeObjects;
    /**
     * @return Maximum number of concurrent backfill tasks. The number should be non negative.
     * If not set (or set to 0), the system&#39;s default value will be used.
     * 
     */
    private @Nullable Integer maxConcurrentBackfillTasks;
    /**
     * @return Maximum number of concurrent CDC tasks. The number should be non negative.
     * If not set (or set to 0), the system&#39;s default value will be used.
     * 
     */
    private @Nullable Integer maxConcurrentCdcTasks;
    /**
     * @return Configuration to drop large object values.
     * 
     */
    private @Nullable StreamSourceConfigOracleSourceConfigStreamLargeObjects streamLargeObjects;

    private StreamSourceConfigOracleSourceConfig() {}
    /**
     * @return Configuration to drop large object values.
     * 
     */
    public Optional<StreamSourceConfigOracleSourceConfigDropLargeObjects> dropLargeObjects() {
        return Optional.ofNullable(this.dropLargeObjects);
    }
    /**
     * @return Oracle objects to exclude from the stream.
     * Structure is documented below.
     * 
     */
    public Optional<StreamSourceConfigOracleSourceConfigExcludeObjects> excludeObjects() {
        return Optional.ofNullable(this.excludeObjects);
    }
    /**
     * @return Oracle objects to retrieve from the source.
     * Structure is documented below.
     * 
     */
    public Optional<StreamSourceConfigOracleSourceConfigIncludeObjects> includeObjects() {
        return Optional.ofNullable(this.includeObjects);
    }
    /**
     * @return Maximum number of concurrent backfill tasks. The number should be non negative.
     * If not set (or set to 0), the system&#39;s default value will be used.
     * 
     */
    public Optional<Integer> maxConcurrentBackfillTasks() {
        return Optional.ofNullable(this.maxConcurrentBackfillTasks);
    }
    /**
     * @return Maximum number of concurrent CDC tasks. The number should be non negative.
     * If not set (or set to 0), the system&#39;s default value will be used.
     * 
     */
    public Optional<Integer> maxConcurrentCdcTasks() {
        return Optional.ofNullable(this.maxConcurrentCdcTasks);
    }
    /**
     * @return Configuration to drop large object values.
     * 
     */
    public Optional<StreamSourceConfigOracleSourceConfigStreamLargeObjects> streamLargeObjects() {
        return Optional.ofNullable(this.streamLargeObjects);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(StreamSourceConfigOracleSourceConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable StreamSourceConfigOracleSourceConfigDropLargeObjects dropLargeObjects;
        private @Nullable StreamSourceConfigOracleSourceConfigExcludeObjects excludeObjects;
        private @Nullable StreamSourceConfigOracleSourceConfigIncludeObjects includeObjects;
        private @Nullable Integer maxConcurrentBackfillTasks;
        private @Nullable Integer maxConcurrentCdcTasks;
        private @Nullable StreamSourceConfigOracleSourceConfigStreamLargeObjects streamLargeObjects;
        public Builder() {}
        public Builder(StreamSourceConfigOracleSourceConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dropLargeObjects = defaults.dropLargeObjects;
    	      this.excludeObjects = defaults.excludeObjects;
    	      this.includeObjects = defaults.includeObjects;
    	      this.maxConcurrentBackfillTasks = defaults.maxConcurrentBackfillTasks;
    	      this.maxConcurrentCdcTasks = defaults.maxConcurrentCdcTasks;
    	      this.streamLargeObjects = defaults.streamLargeObjects;
        }

        @CustomType.Setter
        public Builder dropLargeObjects(@Nullable StreamSourceConfigOracleSourceConfigDropLargeObjects dropLargeObjects) {

            this.dropLargeObjects = dropLargeObjects;
            return this;
        }
        @CustomType.Setter
        public Builder excludeObjects(@Nullable StreamSourceConfigOracleSourceConfigExcludeObjects excludeObjects) {

            this.excludeObjects = excludeObjects;
            return this;
        }
        @CustomType.Setter
        public Builder includeObjects(@Nullable StreamSourceConfigOracleSourceConfigIncludeObjects includeObjects) {

            this.includeObjects = includeObjects;
            return this;
        }
        @CustomType.Setter
        public Builder maxConcurrentBackfillTasks(@Nullable Integer maxConcurrentBackfillTasks) {

            this.maxConcurrentBackfillTasks = maxConcurrentBackfillTasks;
            return this;
        }
        @CustomType.Setter
        public Builder maxConcurrentCdcTasks(@Nullable Integer maxConcurrentCdcTasks) {

            this.maxConcurrentCdcTasks = maxConcurrentCdcTasks;
            return this;
        }
        @CustomType.Setter
        public Builder streamLargeObjects(@Nullable StreamSourceConfigOracleSourceConfigStreamLargeObjects streamLargeObjects) {

            this.streamLargeObjects = streamLargeObjects;
            return this;
        }
        public StreamSourceConfigOracleSourceConfig build() {
            final var _resultValue = new StreamSourceConfigOracleSourceConfig();
            _resultValue.dropLargeObjects = dropLargeObjects;
            _resultValue.excludeObjects = excludeObjects;
            _resultValue.includeObjects = includeObjects;
            _resultValue.maxConcurrentBackfillTasks = maxConcurrentBackfillTasks;
            _resultValue.maxConcurrentCdcTasks = maxConcurrentCdcTasks;
            _resultValue.streamLargeObjects = streamLargeObjects;
            return _resultValue;
        }
    }
}
