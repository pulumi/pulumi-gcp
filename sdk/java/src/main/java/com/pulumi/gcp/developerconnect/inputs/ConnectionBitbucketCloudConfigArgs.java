// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.developerconnect.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.developerconnect.inputs.ConnectionBitbucketCloudConfigAuthorizerCredentialArgs;
import com.pulumi.gcp.developerconnect.inputs.ConnectionBitbucketCloudConfigReadAuthorizerCredentialArgs;
import java.lang.String;
import java.util.Objects;


public final class ConnectionBitbucketCloudConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConnectionBitbucketCloudConfigArgs Empty = new ConnectionBitbucketCloudConfigArgs();

    /**
     * Represents a personal access token that authorized the Connection,
     * and associated metadata.
     * Structure is documented below.
     * 
     */
    @Import(name="authorizerCredential", required=true)
    private Output<ConnectionBitbucketCloudConfigAuthorizerCredentialArgs> authorizerCredential;

    /**
     * @return Represents a personal access token that authorized the Connection,
     * and associated metadata.
     * Structure is documented below.
     * 
     */
    public Output<ConnectionBitbucketCloudConfigAuthorizerCredentialArgs> authorizerCredential() {
        return this.authorizerCredential;
    }

    /**
     * Represents a personal access token that authorized the Connection,
     * and associated metadata.
     * Structure is documented below.
     * 
     */
    @Import(name="readAuthorizerCredential", required=true)
    private Output<ConnectionBitbucketCloudConfigReadAuthorizerCredentialArgs> readAuthorizerCredential;

    /**
     * @return Represents a personal access token that authorized the Connection,
     * and associated metadata.
     * Structure is documented below.
     * 
     */
    public Output<ConnectionBitbucketCloudConfigReadAuthorizerCredentialArgs> readAuthorizerCredential() {
        return this.readAuthorizerCredential;
    }

    /**
     * Required. Immutable. SecretManager resource containing the webhook secret used to verify webhook
     * events, formatted as `projects/*&#47;secrets/*&#47;versions/*`. This is used to
     * validate and create webhooks.
     * 
     */
    @Import(name="webhookSecretSecretVersion", required=true)
    private Output<String> webhookSecretSecretVersion;

    /**
     * @return Required. Immutable. SecretManager resource containing the webhook secret used to verify webhook
     * events, formatted as `projects/*&#47;secrets/*&#47;versions/*`. This is used to
     * validate and create webhooks.
     * 
     */
    public Output<String> webhookSecretSecretVersion() {
        return this.webhookSecretSecretVersion;
    }

    /**
     * Required. The Bitbucket Cloud Workspace ID to be connected to Google Cloud Platform.
     * 
     */
    @Import(name="workspace", required=true)
    private Output<String> workspace;

    /**
     * @return Required. The Bitbucket Cloud Workspace ID to be connected to Google Cloud Platform.
     * 
     */
    public Output<String> workspace() {
        return this.workspace;
    }

    private ConnectionBitbucketCloudConfigArgs() {}

    private ConnectionBitbucketCloudConfigArgs(ConnectionBitbucketCloudConfigArgs $) {
        this.authorizerCredential = $.authorizerCredential;
        this.readAuthorizerCredential = $.readAuthorizerCredential;
        this.webhookSecretSecretVersion = $.webhookSecretSecretVersion;
        this.workspace = $.workspace;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectionBitbucketCloudConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectionBitbucketCloudConfigArgs $;

        public Builder() {
            $ = new ConnectionBitbucketCloudConfigArgs();
        }

        public Builder(ConnectionBitbucketCloudConfigArgs defaults) {
            $ = new ConnectionBitbucketCloudConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authorizerCredential Represents a personal access token that authorized the Connection,
         * and associated metadata.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder authorizerCredential(Output<ConnectionBitbucketCloudConfigAuthorizerCredentialArgs> authorizerCredential) {
            $.authorizerCredential = authorizerCredential;
            return this;
        }

        /**
         * @param authorizerCredential Represents a personal access token that authorized the Connection,
         * and associated metadata.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder authorizerCredential(ConnectionBitbucketCloudConfigAuthorizerCredentialArgs authorizerCredential) {
            return authorizerCredential(Output.of(authorizerCredential));
        }

        /**
         * @param readAuthorizerCredential Represents a personal access token that authorized the Connection,
         * and associated metadata.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder readAuthorizerCredential(Output<ConnectionBitbucketCloudConfigReadAuthorizerCredentialArgs> readAuthorizerCredential) {
            $.readAuthorizerCredential = readAuthorizerCredential;
            return this;
        }

        /**
         * @param readAuthorizerCredential Represents a personal access token that authorized the Connection,
         * and associated metadata.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder readAuthorizerCredential(ConnectionBitbucketCloudConfigReadAuthorizerCredentialArgs readAuthorizerCredential) {
            return readAuthorizerCredential(Output.of(readAuthorizerCredential));
        }

        /**
         * @param webhookSecretSecretVersion Required. Immutable. SecretManager resource containing the webhook secret used to verify webhook
         * events, formatted as `projects/*&#47;secrets/*&#47;versions/*`. This is used to
         * validate and create webhooks.
         * 
         * @return builder
         * 
         */
        public Builder webhookSecretSecretVersion(Output<String> webhookSecretSecretVersion) {
            $.webhookSecretSecretVersion = webhookSecretSecretVersion;
            return this;
        }

        /**
         * @param webhookSecretSecretVersion Required. Immutable. SecretManager resource containing the webhook secret used to verify webhook
         * events, formatted as `projects/*&#47;secrets/*&#47;versions/*`. This is used to
         * validate and create webhooks.
         * 
         * @return builder
         * 
         */
        public Builder webhookSecretSecretVersion(String webhookSecretSecretVersion) {
            return webhookSecretSecretVersion(Output.of(webhookSecretSecretVersion));
        }

        /**
         * @param workspace Required. The Bitbucket Cloud Workspace ID to be connected to Google Cloud Platform.
         * 
         * @return builder
         * 
         */
        public Builder workspace(Output<String> workspace) {
            $.workspace = workspace;
            return this;
        }

        /**
         * @param workspace Required. The Bitbucket Cloud Workspace ID to be connected to Google Cloud Platform.
         * 
         * @return builder
         * 
         */
        public Builder workspace(String workspace) {
            return workspace(Output.of(workspace));
        }

        public ConnectionBitbucketCloudConfigArgs build() {
            if ($.authorizerCredential == null) {
                throw new MissingRequiredPropertyException("ConnectionBitbucketCloudConfigArgs", "authorizerCredential");
            }
            if ($.readAuthorizerCredential == null) {
                throw new MissingRequiredPropertyException("ConnectionBitbucketCloudConfigArgs", "readAuthorizerCredential");
            }
            if ($.webhookSecretSecretVersion == null) {
                throw new MissingRequiredPropertyException("ConnectionBitbucketCloudConfigArgs", "webhookSecretSecretVersion");
            }
            if ($.workspace == null) {
                throw new MissingRequiredPropertyException("ConnectionBitbucketCloudConfigArgs", "workspace");
            }
            return $;
        }
    }

}
