// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataproc;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.dataproc.inputs.SessionTemplateEnvironmentConfigArgs;
import com.pulumi.gcp.dataproc.inputs.SessionTemplateJupyterSessionArgs;
import com.pulumi.gcp.dataproc.inputs.SessionTemplateRuntimeConfigArgs;
import com.pulumi.gcp.dataproc.inputs.SessionTemplateSparkConnectSessionArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SessionTemplateArgs extends com.pulumi.resources.ResourceArgs {

    public static final SessionTemplateArgs Empty = new SessionTemplateArgs();

    /**
     * Environment configuration for the session execution.
     * Structure is documented below.
     * 
     */
    @Import(name="environmentConfig")
    private @Nullable Output<SessionTemplateEnvironmentConfigArgs> environmentConfig;

    /**
     * @return Environment configuration for the session execution.
     * Structure is documented below.
     * 
     */
    public Optional<Output<SessionTemplateEnvironmentConfigArgs>> environmentConfig() {
        return Optional.ofNullable(this.environmentConfig);
    }

    /**
     * Jupyter configuration for an interactive session.
     * Structure is documented below.
     * 
     */
    @Import(name="jupyterSession")
    private @Nullable Output<SessionTemplateJupyterSessionArgs> jupyterSession;

    /**
     * @return Jupyter configuration for an interactive session.
     * Structure is documented below.
     * 
     */
    public Optional<Output<SessionTemplateJupyterSessionArgs>> jupyterSession() {
        return Optional.ofNullable(this.jupyterSession);
    }

    /**
     * The labels to associate with this session template.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return The labels to associate with this session template.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * The location in which the session template will be created in.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The location in which the session template will be created in.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The resource name of the session template in the following format:
     * projects/{project}/locations/{location}/sessionTemplates/{template_id}
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The resource name of the session template in the following format:
     * projects/{project}/locations/{location}/sessionTemplates/{template_id}
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Runtime configuration for the session template.
     * Structure is documented below.
     * 
     */
    @Import(name="runtimeConfig")
    private @Nullable Output<SessionTemplateRuntimeConfigArgs> runtimeConfig;

    /**
     * @return Runtime configuration for the session template.
     * Structure is documented below.
     * 
     */
    public Optional<Output<SessionTemplateRuntimeConfigArgs>> runtimeConfig() {
        return Optional.ofNullable(this.runtimeConfig);
    }

    /**
     * Spark connect configuration for an interactive session.
     * 
     */
    @Import(name="sparkConnectSession")
    private @Nullable Output<SessionTemplateSparkConnectSessionArgs> sparkConnectSession;

    /**
     * @return Spark connect configuration for an interactive session.
     * 
     */
    public Optional<Output<SessionTemplateSparkConnectSessionArgs>> sparkConnectSession() {
        return Optional.ofNullable(this.sparkConnectSession);
    }

    private SessionTemplateArgs() {}

    private SessionTemplateArgs(SessionTemplateArgs $) {
        this.environmentConfig = $.environmentConfig;
        this.jupyterSession = $.jupyterSession;
        this.labels = $.labels;
        this.location = $.location;
        this.name = $.name;
        this.project = $.project;
        this.runtimeConfig = $.runtimeConfig;
        this.sparkConnectSession = $.sparkConnectSession;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SessionTemplateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SessionTemplateArgs $;

        public Builder() {
            $ = new SessionTemplateArgs();
        }

        public Builder(SessionTemplateArgs defaults) {
            $ = new SessionTemplateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param environmentConfig Environment configuration for the session execution.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder environmentConfig(@Nullable Output<SessionTemplateEnvironmentConfigArgs> environmentConfig) {
            $.environmentConfig = environmentConfig;
            return this;
        }

        /**
         * @param environmentConfig Environment configuration for the session execution.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder environmentConfig(SessionTemplateEnvironmentConfigArgs environmentConfig) {
            return environmentConfig(Output.of(environmentConfig));
        }

        /**
         * @param jupyterSession Jupyter configuration for an interactive session.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder jupyterSession(@Nullable Output<SessionTemplateJupyterSessionArgs> jupyterSession) {
            $.jupyterSession = jupyterSession;
            return this;
        }

        /**
         * @param jupyterSession Jupyter configuration for an interactive session.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder jupyterSession(SessionTemplateJupyterSessionArgs jupyterSession) {
            return jupyterSession(Output.of(jupyterSession));
        }

        /**
         * @param labels The labels to associate with this session template.
         * 
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels The labels to associate with this session template.
         * 
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effectiveLabels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param location The location in which the session template will be created in.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location in which the session template will be created in.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name The resource name of the session template in the following format:
         * projects/{project}/locations/{location}/sessionTemplates/{template_id}
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The resource name of the session template in the following format:
         * projects/{project}/locations/{location}/sessionTemplates/{template_id}
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param runtimeConfig Runtime configuration for the session template.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder runtimeConfig(@Nullable Output<SessionTemplateRuntimeConfigArgs> runtimeConfig) {
            $.runtimeConfig = runtimeConfig;
            return this;
        }

        /**
         * @param runtimeConfig Runtime configuration for the session template.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder runtimeConfig(SessionTemplateRuntimeConfigArgs runtimeConfig) {
            return runtimeConfig(Output.of(runtimeConfig));
        }

        /**
         * @param sparkConnectSession Spark connect configuration for an interactive session.
         * 
         * @return builder
         * 
         */
        public Builder sparkConnectSession(@Nullable Output<SessionTemplateSparkConnectSessionArgs> sparkConnectSession) {
            $.sparkConnectSession = sparkConnectSession;
            return this;
        }

        /**
         * @param sparkConnectSession Spark connect configuration for an interactive session.
         * 
         * @return builder
         * 
         */
        public Builder sparkConnectSession(SessionTemplateSparkConnectSessionArgs sparkConnectSession) {
            return sparkConnectSession(Output.of(sparkConnectSession));
        }

        public SessionTemplateArgs build() {
            return $;
        }
    }

}
