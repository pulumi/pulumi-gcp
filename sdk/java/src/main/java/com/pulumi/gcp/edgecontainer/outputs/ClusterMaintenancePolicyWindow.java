// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.edgecontainer.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.edgecontainer.outputs.ClusterMaintenancePolicyWindowRecurringWindow;
import java.util.Objects;

@CustomType
public final class ClusterMaintenancePolicyWindow {
    /**
     * @return Represents an arbitrary window of time that recurs.
     * Structure is documented below.
     * 
     */
    private ClusterMaintenancePolicyWindowRecurringWindow recurringWindow;

    private ClusterMaintenancePolicyWindow() {}
    /**
     * @return Represents an arbitrary window of time that recurs.
     * Structure is documented below.
     * 
     */
    public ClusterMaintenancePolicyWindowRecurringWindow recurringWindow() {
        return this.recurringWindow;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ClusterMaintenancePolicyWindow defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private ClusterMaintenancePolicyWindowRecurringWindow recurringWindow;
        public Builder() {}
        public Builder(ClusterMaintenancePolicyWindow defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.recurringWindow = defaults.recurringWindow;
        }

        @CustomType.Setter
        public Builder recurringWindow(ClusterMaintenancePolicyWindowRecurringWindow recurringWindow) {
            if (recurringWindow == null) {
              throw new MissingRequiredPropertyException("ClusterMaintenancePolicyWindow", "recurringWindow");
            }
            this.recurringWindow = recurringWindow;
            return this;
        }
        public ClusterMaintenancePolicyWindow build() {
            final var _resultValue = new ClusterMaintenancePolicyWindow();
            _resultValue.recurringWindow = recurringWindow;
            return _resultValue;
        }
    }
}
