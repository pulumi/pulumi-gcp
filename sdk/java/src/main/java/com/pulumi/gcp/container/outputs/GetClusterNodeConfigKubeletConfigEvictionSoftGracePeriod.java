// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.container.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetClusterNodeConfigKubeletConfigEvictionSoftGracePeriod {
    /**
     * @return Defines grace period for the imagefs.available soft eviction threshold
     * 
     */
    private String imagefsAvailable;
    /**
     * @return Defines grace period for the imagefs.inodesFree soft eviction threshold.
     * 
     */
    private String imagefsInodesFree;
    /**
     * @return Defines grace period for the memory.available soft eviction threshold.
     * 
     */
    private String memoryAvailable;
    /**
     * @return Defines grace period for the nodefs.available soft eviction threshold.
     * 
     */
    private String nodefsAvailable;
    /**
     * @return Defines grace period for the nodefs.inodesFree soft eviction threshold.
     * 
     */
    private String nodefsInodesFree;
    /**
     * @return Defines grace period for the pid.available soft eviction threshold.
     * 
     */
    private String pidAvailable;

    private GetClusterNodeConfigKubeletConfigEvictionSoftGracePeriod() {}
    /**
     * @return Defines grace period for the imagefs.available soft eviction threshold
     * 
     */
    public String imagefsAvailable() {
        return this.imagefsAvailable;
    }
    /**
     * @return Defines grace period for the imagefs.inodesFree soft eviction threshold.
     * 
     */
    public String imagefsInodesFree() {
        return this.imagefsInodesFree;
    }
    /**
     * @return Defines grace period for the memory.available soft eviction threshold.
     * 
     */
    public String memoryAvailable() {
        return this.memoryAvailable;
    }
    /**
     * @return Defines grace period for the nodefs.available soft eviction threshold.
     * 
     */
    public String nodefsAvailable() {
        return this.nodefsAvailable;
    }
    /**
     * @return Defines grace period for the nodefs.inodesFree soft eviction threshold.
     * 
     */
    public String nodefsInodesFree() {
        return this.nodefsInodesFree;
    }
    /**
     * @return Defines grace period for the pid.available soft eviction threshold.
     * 
     */
    public String pidAvailable() {
        return this.pidAvailable;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetClusterNodeConfigKubeletConfigEvictionSoftGracePeriod defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String imagefsAvailable;
        private String imagefsInodesFree;
        private String memoryAvailable;
        private String nodefsAvailable;
        private String nodefsInodesFree;
        private String pidAvailable;
        public Builder() {}
        public Builder(GetClusterNodeConfigKubeletConfigEvictionSoftGracePeriod defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.imagefsAvailable = defaults.imagefsAvailable;
    	      this.imagefsInodesFree = defaults.imagefsInodesFree;
    	      this.memoryAvailable = defaults.memoryAvailable;
    	      this.nodefsAvailable = defaults.nodefsAvailable;
    	      this.nodefsInodesFree = defaults.nodefsInodesFree;
    	      this.pidAvailable = defaults.pidAvailable;
        }

        @CustomType.Setter
        public Builder imagefsAvailable(String imagefsAvailable) {
            if (imagefsAvailable == null) {
              throw new MissingRequiredPropertyException("GetClusterNodeConfigKubeletConfigEvictionSoftGracePeriod", "imagefsAvailable");
            }
            this.imagefsAvailable = imagefsAvailable;
            return this;
        }
        @CustomType.Setter
        public Builder imagefsInodesFree(String imagefsInodesFree) {
            if (imagefsInodesFree == null) {
              throw new MissingRequiredPropertyException("GetClusterNodeConfigKubeletConfigEvictionSoftGracePeriod", "imagefsInodesFree");
            }
            this.imagefsInodesFree = imagefsInodesFree;
            return this;
        }
        @CustomType.Setter
        public Builder memoryAvailable(String memoryAvailable) {
            if (memoryAvailable == null) {
              throw new MissingRequiredPropertyException("GetClusterNodeConfigKubeletConfigEvictionSoftGracePeriod", "memoryAvailable");
            }
            this.memoryAvailable = memoryAvailable;
            return this;
        }
        @CustomType.Setter
        public Builder nodefsAvailable(String nodefsAvailable) {
            if (nodefsAvailable == null) {
              throw new MissingRequiredPropertyException("GetClusterNodeConfigKubeletConfigEvictionSoftGracePeriod", "nodefsAvailable");
            }
            this.nodefsAvailable = nodefsAvailable;
            return this;
        }
        @CustomType.Setter
        public Builder nodefsInodesFree(String nodefsInodesFree) {
            if (nodefsInodesFree == null) {
              throw new MissingRequiredPropertyException("GetClusterNodeConfigKubeletConfigEvictionSoftGracePeriod", "nodefsInodesFree");
            }
            this.nodefsInodesFree = nodefsInodesFree;
            return this;
        }
        @CustomType.Setter
        public Builder pidAvailable(String pidAvailable) {
            if (pidAvailable == null) {
              throw new MissingRequiredPropertyException("GetClusterNodeConfigKubeletConfigEvictionSoftGracePeriod", "pidAvailable");
            }
            this.pidAvailable = pidAvailable;
            return this;
        }
        public GetClusterNodeConfigKubeletConfigEvictionSoftGracePeriod build() {
            final var _resultValue = new GetClusterNodeConfigKubeletConfigEvictionSoftGracePeriod();
            _resultValue.imagefsAvailable = imagefsAvailable;
            _resultValue.imagefsInodesFree = imagefsInodesFree;
            _resultValue.memoryAvailable = memoryAvailable;
            _resultValue.nodefsAvailable = nodefsAvailable;
            _resultValue.nodefsInodesFree = nodefsInodesFree;
            _resultValue.pidAvailable = pidAvailable;
            return _resultValue;
        }
    }
}
