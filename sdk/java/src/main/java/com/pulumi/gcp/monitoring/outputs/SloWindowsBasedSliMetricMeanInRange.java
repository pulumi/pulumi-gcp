// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.monitoring.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.monitoring.outputs.SloWindowsBasedSliMetricMeanInRangeRange;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class SloWindowsBasedSliMetricMeanInRange {
    /**
     * @return Range of numerical values. The computed goodService
     * will be the count of values x in the Distribution such
     * that range.min &lt;= x &lt;= range.max. inclusive of min and
     * max. Open ranges can be defined by setting
     * just one of min or max. Mean value `X` of `timeSeries`
     * values should satisfy `range.min &lt;= X &lt;= range.max` for a
     * good service.
     * Structure is documented below.
     * 
     */
    private SloWindowsBasedSliMetricMeanInRangeRange range;
    /**
     * @return A [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters)
     * specifying the TimeSeries to use for evaluating window
     * The provided TimeSeries must have ValueType = INT64 or
     * ValueType = DOUBLE and MetricKind = GAUGE. Mean value `X`
     * should satisfy `range.min &lt;= X &lt;= range.max`
     * under good service.
     * 
     */
    private String timeSeries;

    private SloWindowsBasedSliMetricMeanInRange() {}
    /**
     * @return Range of numerical values. The computed goodService
     * will be the count of values x in the Distribution such
     * that range.min &lt;= x &lt;= range.max. inclusive of min and
     * max. Open ranges can be defined by setting
     * just one of min or max. Mean value `X` of `timeSeries`
     * values should satisfy `range.min &lt;= X &lt;= range.max` for a
     * good service.
     * Structure is documented below.
     * 
     */
    public SloWindowsBasedSliMetricMeanInRangeRange range() {
        return this.range;
    }
    /**
     * @return A [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters)
     * specifying the TimeSeries to use for evaluating window
     * The provided TimeSeries must have ValueType = INT64 or
     * ValueType = DOUBLE and MetricKind = GAUGE. Mean value `X`
     * should satisfy `range.min &lt;= X &lt;= range.max`
     * under good service.
     * 
     */
    public String timeSeries() {
        return this.timeSeries;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SloWindowsBasedSliMetricMeanInRange defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private SloWindowsBasedSliMetricMeanInRangeRange range;
        private String timeSeries;
        public Builder() {}
        public Builder(SloWindowsBasedSliMetricMeanInRange defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.range = defaults.range;
    	      this.timeSeries = defaults.timeSeries;
        }

        @CustomType.Setter
        public Builder range(SloWindowsBasedSliMetricMeanInRangeRange range) {
            if (range == null) {
              throw new MissingRequiredPropertyException("SloWindowsBasedSliMetricMeanInRange", "range");
            }
            this.range = range;
            return this;
        }
        @CustomType.Setter
        public Builder timeSeries(String timeSeries) {
            if (timeSeries == null) {
              throw new MissingRequiredPropertyException("SloWindowsBasedSliMetricMeanInRange", "timeSeries");
            }
            this.timeSeries = timeSeries;
            return this;
        }
        public SloWindowsBasedSliMetricMeanInRange build() {
            final var _resultValue = new SloWindowsBasedSliMetricMeanInRange();
            _resultValue.range = range;
            _resultValue.timeSeries = timeSeries;
            return _resultValue;
        }
    }
}
