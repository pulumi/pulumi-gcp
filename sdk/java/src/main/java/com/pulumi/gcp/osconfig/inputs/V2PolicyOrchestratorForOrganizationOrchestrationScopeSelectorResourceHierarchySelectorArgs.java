// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.osconfig.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class V2PolicyOrchestratorForOrganizationOrchestrationScopeSelectorResourceHierarchySelectorArgs extends com.pulumi.resources.ResourceArgs {

    public static final V2PolicyOrchestratorForOrganizationOrchestrationScopeSelectorResourceHierarchySelectorArgs Empty = new V2PolicyOrchestratorForOrganizationOrchestrationScopeSelectorResourceHierarchySelectorArgs();

    /**
     * Optional. Names of the folders in scope.
     * Format: `folders/{folder_id}`
     * 
     */
    @Import(name="includedFolders")
    private @Nullable Output<List<String>> includedFolders;

    /**
     * @return Optional. Names of the folders in scope.
     * Format: `folders/{folder_id}`
     * 
     */
    public Optional<Output<List<String>>> includedFolders() {
        return Optional.ofNullable(this.includedFolders);
    }

    /**
     * Optional. Names of the projects in scope.
     * Format: `projects/{project_number}`
     * 
     */
    @Import(name="includedProjects")
    private @Nullable Output<List<String>> includedProjects;

    /**
     * @return Optional. Names of the projects in scope.
     * Format: `projects/{project_number}`
     * 
     */
    public Optional<Output<List<String>>> includedProjects() {
        return Optional.ofNullable(this.includedProjects);
    }

    private V2PolicyOrchestratorForOrganizationOrchestrationScopeSelectorResourceHierarchySelectorArgs() {}

    private V2PolicyOrchestratorForOrganizationOrchestrationScopeSelectorResourceHierarchySelectorArgs(V2PolicyOrchestratorForOrganizationOrchestrationScopeSelectorResourceHierarchySelectorArgs $) {
        this.includedFolders = $.includedFolders;
        this.includedProjects = $.includedProjects;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(V2PolicyOrchestratorForOrganizationOrchestrationScopeSelectorResourceHierarchySelectorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private V2PolicyOrchestratorForOrganizationOrchestrationScopeSelectorResourceHierarchySelectorArgs $;

        public Builder() {
            $ = new V2PolicyOrchestratorForOrganizationOrchestrationScopeSelectorResourceHierarchySelectorArgs();
        }

        public Builder(V2PolicyOrchestratorForOrganizationOrchestrationScopeSelectorResourceHierarchySelectorArgs defaults) {
            $ = new V2PolicyOrchestratorForOrganizationOrchestrationScopeSelectorResourceHierarchySelectorArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param includedFolders Optional. Names of the folders in scope.
         * Format: `folders/{folder_id}`
         * 
         * @return builder
         * 
         */
        public Builder includedFolders(@Nullable Output<List<String>> includedFolders) {
            $.includedFolders = includedFolders;
            return this;
        }

        /**
         * @param includedFolders Optional. Names of the folders in scope.
         * Format: `folders/{folder_id}`
         * 
         * @return builder
         * 
         */
        public Builder includedFolders(List<String> includedFolders) {
            return includedFolders(Output.of(includedFolders));
        }

        /**
         * @param includedFolders Optional. Names of the folders in scope.
         * Format: `folders/{folder_id}`
         * 
         * @return builder
         * 
         */
        public Builder includedFolders(String... includedFolders) {
            return includedFolders(List.of(includedFolders));
        }

        /**
         * @param includedProjects Optional. Names of the projects in scope.
         * Format: `projects/{project_number}`
         * 
         * @return builder
         * 
         */
        public Builder includedProjects(@Nullable Output<List<String>> includedProjects) {
            $.includedProjects = includedProjects;
            return this;
        }

        /**
         * @param includedProjects Optional. Names of the projects in scope.
         * Format: `projects/{project_number}`
         * 
         * @return builder
         * 
         */
        public Builder includedProjects(List<String> includedProjects) {
            return includedProjects(Output.of(includedProjects));
        }

        /**
         * @param includedProjects Optional. Names of the projects in scope.
         * Format: `projects/{project_number}`
         * 
         * @return builder
         * 
         */
        public Builder includedProjects(String... includedProjects) {
            return includedProjects(List.of(includedProjects));
        }

        public V2PolicyOrchestratorForOrganizationOrchestrationScopeSelectorResourceHierarchySelectorArgs build() {
            return $;
        }
    }

}
