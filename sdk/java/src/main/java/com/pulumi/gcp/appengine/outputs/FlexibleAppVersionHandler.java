// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.appengine.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.appengine.outputs.FlexibleAppVersionHandlerScript;
import com.pulumi.gcp.appengine.outputs.FlexibleAppVersionHandlerStaticFiles;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class FlexibleAppVersionHandler {
    /**
     * @return Action to take when users access resources that require authentication.
     * Default value is `AUTH_FAIL_ACTION_REDIRECT`.
     * Possible values are `AUTH_FAIL_ACTION_REDIRECT` and `AUTH_FAIL_ACTION_UNAUTHORIZED`.
     * 
     */
    private final @Nullable String authFailAction;
    /**
     * @return Level of login required to access this resource.
     * Default value is `LOGIN_OPTIONAL`.
     * Possible values are `LOGIN_OPTIONAL`, `LOGIN_ADMIN`, and `LOGIN_REQUIRED`.
     * 
     */
    private final @Nullable String login;
    /**
     * @return 30x code to use when performing redirects for the secure field.
     * Possible values are `REDIRECT_HTTP_RESPONSE_CODE_301`, `REDIRECT_HTTP_RESPONSE_CODE_302`, `REDIRECT_HTTP_RESPONSE_CODE_303`, and `REDIRECT_HTTP_RESPONSE_CODE_307`.
     * 
     */
    private final @Nullable String redirectHttpResponseCode;
    /**
     * @return Path to the script from the application root directory.
     * 
     */
    private final @Nullable FlexibleAppVersionHandlerScript script;
    /**
     * @return Security (HTTPS) enforcement for this URL.
     * Possible values are `SECURE_DEFAULT`, `SECURE_NEVER`, `SECURE_OPTIONAL`, and `SECURE_ALWAYS`.
     * 
     */
    private final @Nullable String securityLevel;
    /**
     * @return Files served directly to the user for a given URL, such as images, CSS stylesheets, or JavaScript source files.
     * Static file handlers describe which files in the application directory are static files, and which URLs serve them.
     * Structure is documented below.
     * 
     */
    private final @Nullable FlexibleAppVersionHandlerStaticFiles staticFiles;
    /**
     * @return URL prefix. Uses regular expression syntax, which means regexp special characters must be escaped, but should not contain groupings.
     * All URLs that begin with this prefix are handled by this handler, using the portion of the URL after the prefix as part of the file path.
     * 
     */
    private final @Nullable String urlRegex;

    @CustomType.Constructor
    private FlexibleAppVersionHandler(
        @CustomType.Parameter("authFailAction") @Nullable String authFailAction,
        @CustomType.Parameter("login") @Nullable String login,
        @CustomType.Parameter("redirectHttpResponseCode") @Nullable String redirectHttpResponseCode,
        @CustomType.Parameter("script") @Nullable FlexibleAppVersionHandlerScript script,
        @CustomType.Parameter("securityLevel") @Nullable String securityLevel,
        @CustomType.Parameter("staticFiles") @Nullable FlexibleAppVersionHandlerStaticFiles staticFiles,
        @CustomType.Parameter("urlRegex") @Nullable String urlRegex) {
        this.authFailAction = authFailAction;
        this.login = login;
        this.redirectHttpResponseCode = redirectHttpResponseCode;
        this.script = script;
        this.securityLevel = securityLevel;
        this.staticFiles = staticFiles;
        this.urlRegex = urlRegex;
    }

    /**
     * @return Action to take when users access resources that require authentication.
     * Default value is `AUTH_FAIL_ACTION_REDIRECT`.
     * Possible values are `AUTH_FAIL_ACTION_REDIRECT` and `AUTH_FAIL_ACTION_UNAUTHORIZED`.
     * 
     */
    public Optional<String> authFailAction() {
        return Optional.ofNullable(this.authFailAction);
    }
    /**
     * @return Level of login required to access this resource.
     * Default value is `LOGIN_OPTIONAL`.
     * Possible values are `LOGIN_OPTIONAL`, `LOGIN_ADMIN`, and `LOGIN_REQUIRED`.
     * 
     */
    public Optional<String> login() {
        return Optional.ofNullable(this.login);
    }
    /**
     * @return 30x code to use when performing redirects for the secure field.
     * Possible values are `REDIRECT_HTTP_RESPONSE_CODE_301`, `REDIRECT_HTTP_RESPONSE_CODE_302`, `REDIRECT_HTTP_RESPONSE_CODE_303`, and `REDIRECT_HTTP_RESPONSE_CODE_307`.
     * 
     */
    public Optional<String> redirectHttpResponseCode() {
        return Optional.ofNullable(this.redirectHttpResponseCode);
    }
    /**
     * @return Path to the script from the application root directory.
     * 
     */
    public Optional<FlexibleAppVersionHandlerScript> script() {
        return Optional.ofNullable(this.script);
    }
    /**
     * @return Security (HTTPS) enforcement for this URL.
     * Possible values are `SECURE_DEFAULT`, `SECURE_NEVER`, `SECURE_OPTIONAL`, and `SECURE_ALWAYS`.
     * 
     */
    public Optional<String> securityLevel() {
        return Optional.ofNullable(this.securityLevel);
    }
    /**
     * @return Files served directly to the user for a given URL, such as images, CSS stylesheets, or JavaScript source files.
     * Static file handlers describe which files in the application directory are static files, and which URLs serve them.
     * Structure is documented below.
     * 
     */
    public Optional<FlexibleAppVersionHandlerStaticFiles> staticFiles() {
        return Optional.ofNullable(this.staticFiles);
    }
    /**
     * @return URL prefix. Uses regular expression syntax, which means regexp special characters must be escaped, but should not contain groupings.
     * All URLs that begin with this prefix are handled by this handler, using the portion of the URL after the prefix as part of the file path.
     * 
     */
    public Optional<String> urlRegex() {
        return Optional.ofNullable(this.urlRegex);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FlexibleAppVersionHandler defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String authFailAction;
        private @Nullable String login;
        private @Nullable String redirectHttpResponseCode;
        private @Nullable FlexibleAppVersionHandlerScript script;
        private @Nullable String securityLevel;
        private @Nullable FlexibleAppVersionHandlerStaticFiles staticFiles;
        private @Nullable String urlRegex;

        public Builder() {
    	      // Empty
        }

        public Builder(FlexibleAppVersionHandler defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authFailAction = defaults.authFailAction;
    	      this.login = defaults.login;
    	      this.redirectHttpResponseCode = defaults.redirectHttpResponseCode;
    	      this.script = defaults.script;
    	      this.securityLevel = defaults.securityLevel;
    	      this.staticFiles = defaults.staticFiles;
    	      this.urlRegex = defaults.urlRegex;
        }

        public Builder authFailAction(@Nullable String authFailAction) {
            this.authFailAction = authFailAction;
            return this;
        }
        public Builder login(@Nullable String login) {
            this.login = login;
            return this;
        }
        public Builder redirectHttpResponseCode(@Nullable String redirectHttpResponseCode) {
            this.redirectHttpResponseCode = redirectHttpResponseCode;
            return this;
        }
        public Builder script(@Nullable FlexibleAppVersionHandlerScript script) {
            this.script = script;
            return this;
        }
        public Builder securityLevel(@Nullable String securityLevel) {
            this.securityLevel = securityLevel;
            return this;
        }
        public Builder staticFiles(@Nullable FlexibleAppVersionHandlerStaticFiles staticFiles) {
            this.staticFiles = staticFiles;
            return this;
        }
        public Builder urlRegex(@Nullable String urlRegex) {
            this.urlRegex = urlRegex;
            return this;
        }        public FlexibleAppVersionHandler build() {
            return new FlexibleAppVersionHandler(authFailAction, login, redirectHttpResponseCode, script, securityLevel, staticFiles, urlRegex);
        }
    }
}
