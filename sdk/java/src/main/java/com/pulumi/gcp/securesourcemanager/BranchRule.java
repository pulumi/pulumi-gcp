// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.securesourcemanager;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.securesourcemanager.BranchRuleArgs;
import com.pulumi.gcp.securesourcemanager.inputs.BranchRuleState;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * BranchRule is the protection rule to enforce pre-defined rules on designated branches within a repository.
 * 
 * To get more information about BranchRule, see:
 * 
 * * [API documentation](https://cloud.google.com/secure-source-manager/docs/reference/rest/v1/projects.locations.repositories.branchRules)
 * * How-to Guides
 *     * [Official Documentation](https://cloud.google.com/secure-source-manager/docs/overview)
 * 
 * ## Example Usage
 * 
 * ### Secure Source Manager Branch Rule Basic
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.securesourcemanager.Instance;
 * import com.pulumi.gcp.securesourcemanager.InstanceArgs;
 * import com.pulumi.gcp.securesourcemanager.Repository;
 * import com.pulumi.gcp.securesourcemanager.RepositoryArgs;
 * import com.pulumi.gcp.securesourcemanager.BranchRule;
 * import com.pulumi.gcp.securesourcemanager.BranchRuleArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var instance = new Instance("instance", InstanceArgs.builder()
 *             .location("us-central1")
 *             .instanceId("my-basic-instance")
 *             .deletionPolicy("PREVENT")
 *             .build());
 * 
 *         var repository = new Repository("repository", RepositoryArgs.builder()
 *             .repositoryId("my-basic-repository")
 *             .location(instance.location())
 *             .instance(instance.name())
 *             .deletionPolicy("PREVENT")
 *             .build());
 * 
 *         var basic = new BranchRule("basic", BranchRuleArgs.builder()
 *             .branchRuleId("my-basic-branchrule")
 *             .repositoryId(repository.repositoryId())
 *             .location(repository.location())
 *             .includePattern("main")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * ### Secure Source Manager Branch Rule With Fields
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.securesourcemanager.Instance;
 * import com.pulumi.gcp.securesourcemanager.InstanceArgs;
 * import com.pulumi.gcp.securesourcemanager.Repository;
 * import com.pulumi.gcp.securesourcemanager.RepositoryArgs;
 * import com.pulumi.gcp.securesourcemanager.BranchRule;
 * import com.pulumi.gcp.securesourcemanager.BranchRuleArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var instance = new Instance("instance", InstanceArgs.builder()
 *             .location("us-central1")
 *             .instanceId("my-initial-instance")
 *             .deletionPolicy("PREVENT")
 *             .build());
 * 
 *         var repository = new Repository("repository", RepositoryArgs.builder()
 *             .repositoryId("my-initial-repository")
 *             .instance(instance.name())
 *             .location(instance.location())
 *             .deletionPolicy("PREVENT")
 *             .build());
 * 
 *         var default_ = new BranchRule("default", BranchRuleArgs.builder()
 *             .branchRuleId("my-initial-branchrule")
 *             .location(repository.location())
 *             .repositoryId(repository.repositoryId())
 *             .includePattern("test")
 *             .minimumApprovalsCount(2)
 *             .minimumReviewsCount(2)
 *             .requireCommentsResolved(true)
 *             .requireLinearHistory(true)
 *             .requirePullRequest(true)
 *             .disabled(false)
 *             .allowStaleReviews(false)
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * BranchRule can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/locations/{{location}}/repositories/{{repository_id}}/branchRules/{{branch_rule_id}}`
 * 
 * * `{{project}}/{{location}}/{{repository_id}}/{{branch_rule_id}}`
 * 
 * * `{{location}}/{{repository_id}}/{{branch_rule_id}}`
 * 
 * * `{{branch_rule_id}}`
 * 
 * When using the `pulumi import` command, BranchRule can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:securesourcemanager/branchRule:BranchRule default projects/{{project}}/locations/{{location}}/repositories/{{repository_id}}/branchRules/{{branch_rule_id}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:securesourcemanager/branchRule:BranchRule default {{project}}/{{location}}/{{repository_id}}/{{branch_rule_id}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:securesourcemanager/branchRule:BranchRule default {{location}}/{{repository_id}}/{{branch_rule_id}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:securesourcemanager/branchRule:BranchRule default {{branch_rule_id}}
 * ```
 * 
 */
@ResourceType(type="gcp:securesourcemanager/branchRule:BranchRule")
public class BranchRule extends com.pulumi.resources.CustomResource {
    /**
     * Determines if allow stale reviews or approvals before merging to the branch.
     * 
     */
    @Export(name="allowStaleReviews", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> allowStaleReviews;

    /**
     * @return Determines if allow stale reviews or approvals before merging to the branch.
     * 
     */
    public Output<Optional<Boolean>> allowStaleReviews() {
        return Codegen.optional(this.allowStaleReviews);
    }
    /**
     * The ID for the BranchRule.
     * 
     */
    @Export(name="branchRuleId", refs={String.class}, tree="[0]")
    private Output<String> branchRuleId;

    /**
     * @return The ID for the BranchRule.
     * 
     */
    public Output<String> branchRuleId() {
        return this.branchRuleId;
    }
    /**
     * Time the BranchRule was created in UTC.
     * 
     */
    @Export(name="createTime", refs={String.class}, tree="[0]")
    private Output<String> createTime;

    /**
     * @return Time the BranchRule was created in UTC.
     * 
     */
    public Output<String> createTime() {
        return this.createTime;
    }
    /**
     * Determines if the branch rule is disabled or not.
     * 
     */
    @Export(name="disabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> disabled;

    /**
     * @return Determines if the branch rule is disabled or not.
     * 
     */
    public Output<Optional<Boolean>> disabled() {
        return Codegen.optional(this.disabled);
    }
    /**
     * The BranchRule matches branches based on the specified regular expression. Use .* to match all branches.
     * 
     */
    @Export(name="includePattern", refs={String.class}, tree="[0]")
    private Output<String> includePattern;

    /**
     * @return The BranchRule matches branches based on the specified regular expression. Use .* to match all branches.
     * 
     */
    public Output<String> includePattern() {
        return this.includePattern;
    }
    /**
     * The location for the Repository.
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output<String> location;

    /**
     * @return The location for the Repository.
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * The minimum number of approvals required for the branch rule to be matched.
     * 
     */
    @Export(name="minimumApprovalsCount", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> minimumApprovalsCount;

    /**
     * @return The minimum number of approvals required for the branch rule to be matched.
     * 
     */
    public Output<Optional<Integer>> minimumApprovalsCount() {
        return Codegen.optional(this.minimumApprovalsCount);
    }
    /**
     * The minimum number of reviews required for the branch rule to be matched.
     * 
     */
    @Export(name="minimumReviewsCount", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> minimumReviewsCount;

    /**
     * @return The minimum number of reviews required for the branch rule to be matched.
     * 
     */
    public Output<Optional<Integer>> minimumReviewsCount() {
        return Codegen.optional(this.minimumReviewsCount);
    }
    /**
     * The resource name for the BranchRule.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The resource name for the BranchRule.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * The ID for the Repository.
     * 
     */
    @Export(name="repositoryId", refs={String.class}, tree="[0]")
    private Output<String> repositoryId;

    /**
     * @return The ID for the Repository.
     * 
     */
    public Output<String> repositoryId() {
        return this.repositoryId;
    }
    /**
     * Determines if require comments resolved before merging to the branch.
     * 
     */
    @Export(name="requireCommentsResolved", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> requireCommentsResolved;

    /**
     * @return Determines if require comments resolved before merging to the branch.
     * 
     */
    public Output<Optional<Boolean>> requireCommentsResolved() {
        return Codegen.optional(this.requireCommentsResolved);
    }
    /**
     * Determines if require linear history before merging to the branch.
     * 
     */
    @Export(name="requireLinearHistory", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> requireLinearHistory;

    /**
     * @return Determines if require linear history before merging to the branch.
     * 
     */
    public Output<Optional<Boolean>> requireLinearHistory() {
        return Codegen.optional(this.requireLinearHistory);
    }
    /**
     * Determines if the branch rule requires a pull request or not.
     * 
     */
    @Export(name="requirePullRequest", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> requirePullRequest;

    /**
     * @return Determines if the branch rule requires a pull request or not.
     * 
     */
    public Output<Optional<Boolean>> requirePullRequest() {
        return Codegen.optional(this.requirePullRequest);
    }
    /**
     * Unique identifier of the BranchRule.
     * 
     */
    @Export(name="uid", refs={String.class}, tree="[0]")
    private Output<String> uid;

    /**
     * @return Unique identifier of the BranchRule.
     * 
     */
    public Output<String> uid() {
        return this.uid;
    }
    /**
     * Time the BranchRule was updated in UTC.
     * 
     */
    @Export(name="updateTime", refs={String.class}, tree="[0]")
    private Output<String> updateTime;

    /**
     * @return Time the BranchRule was updated in UTC.
     * 
     */
    public Output<String> updateTime() {
        return this.updateTime;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public BranchRule(java.lang.String name) {
        this(name, BranchRuleArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public BranchRule(java.lang.String name, BranchRuleArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public BranchRule(java.lang.String name, BranchRuleArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:securesourcemanager/branchRule:BranchRule", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private BranchRule(java.lang.String name, Output<java.lang.String> id, @Nullable BranchRuleState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:securesourcemanager/branchRule:BranchRule", name, state, makeResourceOptions(options, id), false);
    }

    private static BranchRuleArgs makeArgs(BranchRuleArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? BranchRuleArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static BranchRule get(java.lang.String name, Output<java.lang.String> id, @Nullable BranchRuleState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new BranchRule(name, id, state, options);
    }
}
