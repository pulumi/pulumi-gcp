// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.storage.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class BucketObjectRetentionArgs extends com.pulumi.resources.ResourceArgs {

    public static final BucketObjectRetentionArgs Empty = new BucketObjectRetentionArgs();

    /**
     * The retention policy mode. Either `Locked` or `Unlocked`.
     * 
     */
    @Import(name="mode", required=true)
    private Output<String> mode;

    /**
     * @return The retention policy mode. Either `Locked` or `Unlocked`.
     * 
     */
    public Output<String> mode() {
        return this.mode;
    }

    /**
     * The time to retain the object until in RFC 3339 format, for example 2012-11-15T16:19:00.094Z.
     * 
     * &lt;a name&gt;
     * 
     */
    @Import(name="retainUntilTime", required=true)
    private Output<String> retainUntilTime;

    /**
     * @return The time to retain the object until in RFC 3339 format, for example 2012-11-15T16:19:00.094Z.
     * 
     * &lt;a name&gt;
     * 
     */
    public Output<String> retainUntilTime() {
        return this.retainUntilTime;
    }

    private BucketObjectRetentionArgs() {}

    private BucketObjectRetentionArgs(BucketObjectRetentionArgs $) {
        this.mode = $.mode;
        this.retainUntilTime = $.retainUntilTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BucketObjectRetentionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BucketObjectRetentionArgs $;

        public Builder() {
            $ = new BucketObjectRetentionArgs();
        }

        public Builder(BucketObjectRetentionArgs defaults) {
            $ = new BucketObjectRetentionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param mode The retention policy mode. Either `Locked` or `Unlocked`.
         * 
         * @return builder
         * 
         */
        public Builder mode(Output<String> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode The retention policy mode. Either `Locked` or `Unlocked`.
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        /**
         * @param retainUntilTime The time to retain the object until in RFC 3339 format, for example 2012-11-15T16:19:00.094Z.
         * 
         * &lt;a name&gt;
         * 
         * @return builder
         * 
         */
        public Builder retainUntilTime(Output<String> retainUntilTime) {
            $.retainUntilTime = retainUntilTime;
            return this;
        }

        /**
         * @param retainUntilTime The time to retain the object until in RFC 3339 format, for example 2012-11-15T16:19:00.094Z.
         * 
         * &lt;a name&gt;
         * 
         * @return builder
         * 
         */
        public Builder retainUntilTime(String retainUntilTime) {
            return retainUntilTime(Output.of(retainUntilTime));
        }

        public BucketObjectRetentionArgs build() {
            if ($.mode == null) {
                throw new MissingRequiredPropertyException("BucketObjectRetentionArgs", "mode");
            }
            if ($.retainUntilTime == null) {
                throw new MissingRequiredPropertyException("BucketObjectRetentionArgs", "retainUntilTime");
            }
            return $;
        }
    }

}
