// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.datastream.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.datastream.outputs.StreamSourceConfigSqlServerSourceConfigChangeTables;
import com.pulumi.gcp.datastream.outputs.StreamSourceConfigSqlServerSourceConfigExcludeObjects;
import com.pulumi.gcp.datastream.outputs.StreamSourceConfigSqlServerSourceConfigIncludeObjects;
import com.pulumi.gcp.datastream.outputs.StreamSourceConfigSqlServerSourceConfigTransactionLogs;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class StreamSourceConfigSqlServerSourceConfig {
    /**
     * @return CDC reader reads from change tables.
     * 
     */
    private @Nullable StreamSourceConfigSqlServerSourceConfigChangeTables changeTables;
    /**
     * @return SQL Server objects to exclude from the stream.
     * Structure is documented below.
     * 
     */
    private @Nullable StreamSourceConfigSqlServerSourceConfigExcludeObjects excludeObjects;
    /**
     * @return SQL Server objects to retrieve from the source.
     * Structure is documented below.
     * 
     */
    private @Nullable StreamSourceConfigSqlServerSourceConfigIncludeObjects includeObjects;
    /**
     * @return Max concurrent backfill tasks.
     * 
     */
    private @Nullable Integer maxConcurrentBackfillTasks;
    /**
     * @return Max concurrent CDC tasks.
     * 
     */
    private @Nullable Integer maxConcurrentCdcTasks;
    /**
     * @return CDC reader reads from transaction logs.
     * 
     */
    private @Nullable StreamSourceConfigSqlServerSourceConfigTransactionLogs transactionLogs;

    private StreamSourceConfigSqlServerSourceConfig() {}
    /**
     * @return CDC reader reads from change tables.
     * 
     */
    public Optional<StreamSourceConfigSqlServerSourceConfigChangeTables> changeTables() {
        return Optional.ofNullable(this.changeTables);
    }
    /**
     * @return SQL Server objects to exclude from the stream.
     * Structure is documented below.
     * 
     */
    public Optional<StreamSourceConfigSqlServerSourceConfigExcludeObjects> excludeObjects() {
        return Optional.ofNullable(this.excludeObjects);
    }
    /**
     * @return SQL Server objects to retrieve from the source.
     * Structure is documented below.
     * 
     */
    public Optional<StreamSourceConfigSqlServerSourceConfigIncludeObjects> includeObjects() {
        return Optional.ofNullable(this.includeObjects);
    }
    /**
     * @return Max concurrent backfill tasks.
     * 
     */
    public Optional<Integer> maxConcurrentBackfillTasks() {
        return Optional.ofNullable(this.maxConcurrentBackfillTasks);
    }
    /**
     * @return Max concurrent CDC tasks.
     * 
     */
    public Optional<Integer> maxConcurrentCdcTasks() {
        return Optional.ofNullable(this.maxConcurrentCdcTasks);
    }
    /**
     * @return CDC reader reads from transaction logs.
     * 
     */
    public Optional<StreamSourceConfigSqlServerSourceConfigTransactionLogs> transactionLogs() {
        return Optional.ofNullable(this.transactionLogs);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(StreamSourceConfigSqlServerSourceConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable StreamSourceConfigSqlServerSourceConfigChangeTables changeTables;
        private @Nullable StreamSourceConfigSqlServerSourceConfigExcludeObjects excludeObjects;
        private @Nullable StreamSourceConfigSqlServerSourceConfigIncludeObjects includeObjects;
        private @Nullable Integer maxConcurrentBackfillTasks;
        private @Nullable Integer maxConcurrentCdcTasks;
        private @Nullable StreamSourceConfigSqlServerSourceConfigTransactionLogs transactionLogs;
        public Builder() {}
        public Builder(StreamSourceConfigSqlServerSourceConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.changeTables = defaults.changeTables;
    	      this.excludeObjects = defaults.excludeObjects;
    	      this.includeObjects = defaults.includeObjects;
    	      this.maxConcurrentBackfillTasks = defaults.maxConcurrentBackfillTasks;
    	      this.maxConcurrentCdcTasks = defaults.maxConcurrentCdcTasks;
    	      this.transactionLogs = defaults.transactionLogs;
        }

        @CustomType.Setter
        public Builder changeTables(@Nullable StreamSourceConfigSqlServerSourceConfigChangeTables changeTables) {

            this.changeTables = changeTables;
            return this;
        }
        @CustomType.Setter
        public Builder excludeObjects(@Nullable StreamSourceConfigSqlServerSourceConfigExcludeObjects excludeObjects) {

            this.excludeObjects = excludeObjects;
            return this;
        }
        @CustomType.Setter
        public Builder includeObjects(@Nullable StreamSourceConfigSqlServerSourceConfigIncludeObjects includeObjects) {

            this.includeObjects = includeObjects;
            return this;
        }
        @CustomType.Setter
        public Builder maxConcurrentBackfillTasks(@Nullable Integer maxConcurrentBackfillTasks) {

            this.maxConcurrentBackfillTasks = maxConcurrentBackfillTasks;
            return this;
        }
        @CustomType.Setter
        public Builder maxConcurrentCdcTasks(@Nullable Integer maxConcurrentCdcTasks) {

            this.maxConcurrentCdcTasks = maxConcurrentCdcTasks;
            return this;
        }
        @CustomType.Setter
        public Builder transactionLogs(@Nullable StreamSourceConfigSqlServerSourceConfigTransactionLogs transactionLogs) {

            this.transactionLogs = transactionLogs;
            return this;
        }
        public StreamSourceConfigSqlServerSourceConfig build() {
            final var _resultValue = new StreamSourceConfigSqlServerSourceConfig();
            _resultValue.changeTables = changeTables;
            _resultValue.excludeObjects = excludeObjects;
            _resultValue.includeObjects = includeObjects;
            _resultValue.maxConcurrentBackfillTasks = maxConcurrentBackfillTasks;
            _resultValue.maxConcurrentCdcTasks = maxConcurrentCdcTasks;
            _resultValue.transactionLogs = transactionLogs;
            return _resultValue;
        }
    }
}
