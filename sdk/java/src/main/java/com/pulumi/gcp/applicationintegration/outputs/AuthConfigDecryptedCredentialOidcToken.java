// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.applicationintegration.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AuthConfigDecryptedCredentialOidcToken {
    /**
     * @return Audience to be used when generating OIDC token. The audience claim identifies the recipients that the JWT is intended for.
     * 
     */
    private @Nullable String audience;
    /**
     * @return The service account email to be used as the identity for the token.
     * 
     */
    private @Nullable String serviceAccountEmail;
    /**
     * @return (Output)
     * ID token obtained for the service account.
     * 
     */
    private @Nullable String token;
    /**
     * @return (Output)
     * The approximate time until the token retrieved is valid.
     * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, with nanosecond resolution and up to nine fractional digits. Examples: &#34;2014-10-02T15:01:23Z&#34; and &#34;2014-10-02T15:01:23.045123456Z&#34;.
     * 
     */
    private @Nullable String tokenExpireTime;

    private AuthConfigDecryptedCredentialOidcToken() {}
    /**
     * @return Audience to be used when generating OIDC token. The audience claim identifies the recipients that the JWT is intended for.
     * 
     */
    public Optional<String> audience() {
        return Optional.ofNullable(this.audience);
    }
    /**
     * @return The service account email to be used as the identity for the token.
     * 
     */
    public Optional<String> serviceAccountEmail() {
        return Optional.ofNullable(this.serviceAccountEmail);
    }
    /**
     * @return (Output)
     * ID token obtained for the service account.
     * 
     */
    public Optional<String> token() {
        return Optional.ofNullable(this.token);
    }
    /**
     * @return (Output)
     * The approximate time until the token retrieved is valid.
     * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, with nanosecond resolution and up to nine fractional digits. Examples: &#34;2014-10-02T15:01:23Z&#34; and &#34;2014-10-02T15:01:23.045123456Z&#34;.
     * 
     */
    public Optional<String> tokenExpireTime() {
        return Optional.ofNullable(this.tokenExpireTime);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AuthConfigDecryptedCredentialOidcToken defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String audience;
        private @Nullable String serviceAccountEmail;
        private @Nullable String token;
        private @Nullable String tokenExpireTime;
        public Builder() {}
        public Builder(AuthConfigDecryptedCredentialOidcToken defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.audience = defaults.audience;
    	      this.serviceAccountEmail = defaults.serviceAccountEmail;
    	      this.token = defaults.token;
    	      this.tokenExpireTime = defaults.tokenExpireTime;
        }

        @CustomType.Setter
        public Builder audience(@Nullable String audience) {

            this.audience = audience;
            return this;
        }
        @CustomType.Setter
        public Builder serviceAccountEmail(@Nullable String serviceAccountEmail) {

            this.serviceAccountEmail = serviceAccountEmail;
            return this;
        }
        @CustomType.Setter
        public Builder token(@Nullable String token) {

            this.token = token;
            return this;
        }
        @CustomType.Setter
        public Builder tokenExpireTime(@Nullable String tokenExpireTime) {

            this.tokenExpireTime = tokenExpireTime;
            return this;
        }
        public AuthConfigDecryptedCredentialOidcToken build() {
            final var _resultValue = new AuthConfigDecryptedCredentialOidcToken();
            _resultValue.audience = audience;
            _resultValue.serviceAccountEmail = serviceAccountEmail;
            _resultValue.token = token;
            _resultValue.tokenExpireTime = tokenExpireTime;
            return _resultValue;
        }
    }
}
