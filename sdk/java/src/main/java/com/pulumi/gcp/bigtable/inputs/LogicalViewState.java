// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.bigtable.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LogicalViewState extends com.pulumi.resources.ResourceArgs {

    public static final LogicalViewState Empty = new LogicalViewState();

    /**
     * The name of the instance to create the logical view within.
     * 
     */
    @Import(name="instance")
    private @Nullable Output<String> instance;

    /**
     * @return The name of the instance to create the logical view within.
     * 
     */
    public Optional<Output<String>> instance() {
        return Optional.ofNullable(this.instance);
    }

    /**
     * The unique name of the logical view in the form `[_a-zA-Z0-9][-_.a-zA-Z0-9]*`.
     * 
     * ***
     * 
     */
    @Import(name="logicalViewId")
    private @Nullable Output<String> logicalViewId;

    /**
     * @return The unique name of the logical view in the form `[_a-zA-Z0-9][-_.a-zA-Z0-9]*`.
     * 
     * ***
     * 
     */
    public Optional<Output<String>> logicalViewId() {
        return Optional.ofNullable(this.logicalViewId);
    }

    /**
     * The unique name of the requested logical view. Values are of the form `projects/&lt;project&gt;/instances/&lt;instance&gt;/logicalViews/&lt;logicalViewId&gt;`.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The unique name of the requested logical view. Values are of the form `projects/&lt;project&gt;/instances/&lt;instance&gt;/logicalViews/&lt;logicalViewId&gt;`.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The logical view&#39;s select query.
     * 
     */
    @Import(name="query")
    private @Nullable Output<String> query;

    /**
     * @return The logical view&#39;s select query.
     * 
     */
    public Optional<Output<String>> query() {
        return Optional.ofNullable(this.query);
    }

    private LogicalViewState() {}

    private LogicalViewState(LogicalViewState $) {
        this.instance = $.instance;
        this.logicalViewId = $.logicalViewId;
        this.name = $.name;
        this.project = $.project;
        this.query = $.query;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LogicalViewState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LogicalViewState $;

        public Builder() {
            $ = new LogicalViewState();
        }

        public Builder(LogicalViewState defaults) {
            $ = new LogicalViewState(Objects.requireNonNull(defaults));
        }

        /**
         * @param instance The name of the instance to create the logical view within.
         * 
         * @return builder
         * 
         */
        public Builder instance(@Nullable Output<String> instance) {
            $.instance = instance;
            return this;
        }

        /**
         * @param instance The name of the instance to create the logical view within.
         * 
         * @return builder
         * 
         */
        public Builder instance(String instance) {
            return instance(Output.of(instance));
        }

        /**
         * @param logicalViewId The unique name of the logical view in the form `[_a-zA-Z0-9][-_.a-zA-Z0-9]*`.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder logicalViewId(@Nullable Output<String> logicalViewId) {
            $.logicalViewId = logicalViewId;
            return this;
        }

        /**
         * @param logicalViewId The unique name of the logical view in the form `[_a-zA-Z0-9][-_.a-zA-Z0-9]*`.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder logicalViewId(String logicalViewId) {
            return logicalViewId(Output.of(logicalViewId));
        }

        /**
         * @param name The unique name of the requested logical view. Values are of the form `projects/&lt;project&gt;/instances/&lt;instance&gt;/logicalViews/&lt;logicalViewId&gt;`.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The unique name of the requested logical view. Values are of the form `projects/&lt;project&gt;/instances/&lt;instance&gt;/logicalViews/&lt;logicalViewId&gt;`.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param query The logical view&#39;s select query.
         * 
         * @return builder
         * 
         */
        public Builder query(@Nullable Output<String> query) {
            $.query = query;
            return this;
        }

        /**
         * @param query The logical view&#39;s select query.
         * 
         * @return builder
         * 
         */
        public Builder query(String query) {
            return query(Output.of(query));
        }

        public LogicalViewState build() {
            return $;
        }
    }

}
