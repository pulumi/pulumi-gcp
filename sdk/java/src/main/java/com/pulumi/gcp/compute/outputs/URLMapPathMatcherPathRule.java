// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.compute.outputs.URLMapPathMatcherPathRuleCustomErrorResponsePolicy;
import com.pulumi.gcp.compute.outputs.URLMapPathMatcherPathRuleRouteAction;
import com.pulumi.gcp.compute.outputs.URLMapPathMatcherPathRuleUrlRedirect;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class URLMapPathMatcherPathRule {
    /**
     * @return customErrorResponsePolicy specifies how the Load Balancer returns error responses when BackendServiceor BackendBucket responds with an error.
     * If a policy for an error code is not configured for the PathRule, a policy for the error code configured in pathMatcher.defaultCustomErrorResponsePolicy is applied. If one is not specified in pathMatcher.defaultCustomErrorResponsePolicy, the policy configured in UrlMap.defaultCustomErrorResponsePolicy takes effect.
     * For example, consider a UrlMap with the following configuration:
     * UrlMap.defaultCustomErrorResponsePolicy are configured with policies for 5xx and 4xx errors
     * A PathRule for /coming_soon/ is configured for the error code 404.
     * If the request is for www.myotherdomain.com and a 404 is encountered, the policy under UrlMap.defaultCustomErrorResponsePolicy takes effect. If a 404 response is encountered for the request www.example.com/current_events/, the pathMatcher&#39;s policy takes effect. If however, the request for www.example.com/coming_soon/ encounters a 404, the policy in PathRule.customErrorResponsePolicy takes effect. If any of the requests in this example encounter a 500 error code, the policy at UrlMap.defaultCustomErrorResponsePolicy takes effect.
     * customErrorResponsePolicy is supported only for global external Application Load Balancers.
     * Structure is documented below.
     * 
     */
    private @Nullable URLMapPathMatcherPathRuleCustomErrorResponsePolicy customErrorResponsePolicy;
    /**
     * @return The list of path patterns to match. Each must start with / and the only place a
     * \* is allowed is at the end following a /. The string fed to the path matcher
     * does not include any text after the first ? or #, and those chars are not
     * allowed here.
     * 
     */
    private List<String> paths;
    /**
     * @return In response to a matching path, the load balancer performs advanced routing
     * actions like URL rewrites, header transformations, etc. prior to forwarding the
     * request to the selected backend. If routeAction specifies any
     * weightedBackendServices, service must not be set. Conversely if service is set,
     * routeAction cannot contain any  weightedBackendServices. Only one of routeAction
     * or urlRedirect must be set.
     * Structure is documented below.
     * 
     */
    private @Nullable URLMapPathMatcherPathRuleRouteAction routeAction;
    /**
     * @return The backend service or backend bucket to use if any of the given paths match.
     * 
     */
    private @Nullable String service;
    /**
     * @return When a path pattern is matched, the request is redirected to a URL specified
     * by urlRedirect. If urlRedirect is specified, service or routeAction must not
     * be set.
     * Structure is documented below.
     * 
     */
    private @Nullable URLMapPathMatcherPathRuleUrlRedirect urlRedirect;

    private URLMapPathMatcherPathRule() {}
    /**
     * @return customErrorResponsePolicy specifies how the Load Balancer returns error responses when BackendServiceor BackendBucket responds with an error.
     * If a policy for an error code is not configured for the PathRule, a policy for the error code configured in pathMatcher.defaultCustomErrorResponsePolicy is applied. If one is not specified in pathMatcher.defaultCustomErrorResponsePolicy, the policy configured in UrlMap.defaultCustomErrorResponsePolicy takes effect.
     * For example, consider a UrlMap with the following configuration:
     * UrlMap.defaultCustomErrorResponsePolicy are configured with policies for 5xx and 4xx errors
     * A PathRule for /coming_soon/ is configured for the error code 404.
     * If the request is for www.myotherdomain.com and a 404 is encountered, the policy under UrlMap.defaultCustomErrorResponsePolicy takes effect. If a 404 response is encountered for the request www.example.com/current_events/, the pathMatcher&#39;s policy takes effect. If however, the request for www.example.com/coming_soon/ encounters a 404, the policy in PathRule.customErrorResponsePolicy takes effect. If any of the requests in this example encounter a 500 error code, the policy at UrlMap.defaultCustomErrorResponsePolicy takes effect.
     * customErrorResponsePolicy is supported only for global external Application Load Balancers.
     * Structure is documented below.
     * 
     */
    public Optional<URLMapPathMatcherPathRuleCustomErrorResponsePolicy> customErrorResponsePolicy() {
        return Optional.ofNullable(this.customErrorResponsePolicy);
    }
    /**
     * @return The list of path patterns to match. Each must start with / and the only place a
     * \* is allowed is at the end following a /. The string fed to the path matcher
     * does not include any text after the first ? or #, and those chars are not
     * allowed here.
     * 
     */
    public List<String> paths() {
        return this.paths;
    }
    /**
     * @return In response to a matching path, the load balancer performs advanced routing
     * actions like URL rewrites, header transformations, etc. prior to forwarding the
     * request to the selected backend. If routeAction specifies any
     * weightedBackendServices, service must not be set. Conversely if service is set,
     * routeAction cannot contain any  weightedBackendServices. Only one of routeAction
     * or urlRedirect must be set.
     * Structure is documented below.
     * 
     */
    public Optional<URLMapPathMatcherPathRuleRouteAction> routeAction() {
        return Optional.ofNullable(this.routeAction);
    }
    /**
     * @return The backend service or backend bucket to use if any of the given paths match.
     * 
     */
    public Optional<String> service() {
        return Optional.ofNullable(this.service);
    }
    /**
     * @return When a path pattern is matched, the request is redirected to a URL specified
     * by urlRedirect. If urlRedirect is specified, service or routeAction must not
     * be set.
     * Structure is documented below.
     * 
     */
    public Optional<URLMapPathMatcherPathRuleUrlRedirect> urlRedirect() {
        return Optional.ofNullable(this.urlRedirect);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(URLMapPathMatcherPathRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable URLMapPathMatcherPathRuleCustomErrorResponsePolicy customErrorResponsePolicy;
        private List<String> paths;
        private @Nullable URLMapPathMatcherPathRuleRouteAction routeAction;
        private @Nullable String service;
        private @Nullable URLMapPathMatcherPathRuleUrlRedirect urlRedirect;
        public Builder() {}
        public Builder(URLMapPathMatcherPathRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.customErrorResponsePolicy = defaults.customErrorResponsePolicy;
    	      this.paths = defaults.paths;
    	      this.routeAction = defaults.routeAction;
    	      this.service = defaults.service;
    	      this.urlRedirect = defaults.urlRedirect;
        }

        @CustomType.Setter
        public Builder customErrorResponsePolicy(@Nullable URLMapPathMatcherPathRuleCustomErrorResponsePolicy customErrorResponsePolicy) {

            this.customErrorResponsePolicy = customErrorResponsePolicy;
            return this;
        }
        @CustomType.Setter
        public Builder paths(List<String> paths) {
            if (paths == null) {
              throw new MissingRequiredPropertyException("URLMapPathMatcherPathRule", "paths");
            }
            this.paths = paths;
            return this;
        }
        public Builder paths(String... paths) {
            return paths(List.of(paths));
        }
        @CustomType.Setter
        public Builder routeAction(@Nullable URLMapPathMatcherPathRuleRouteAction routeAction) {

            this.routeAction = routeAction;
            return this;
        }
        @CustomType.Setter
        public Builder service(@Nullable String service) {

            this.service = service;
            return this;
        }
        @CustomType.Setter
        public Builder urlRedirect(@Nullable URLMapPathMatcherPathRuleUrlRedirect urlRedirect) {

            this.urlRedirect = urlRedirect;
            return this;
        }
        public URLMapPathMatcherPathRule build() {
            final var _resultValue = new URLMapPathMatcherPathRule();
            _resultValue.customErrorResponsePolicy = customErrorResponsePolicy;
            _resultValue.paths = paths;
            _resultValue.routeAction = routeAction;
            _resultValue.service = service;
            _resultValue.urlRedirect = urlRedirect;
            return _resultValue;
        }
    }
}
