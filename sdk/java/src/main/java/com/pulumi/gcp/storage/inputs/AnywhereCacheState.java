// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.storage.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AnywhereCacheState extends com.pulumi.resources.ResourceArgs {

    public static final AnywhereCacheState Empty = new AnywhereCacheState();

    /**
     * The cache admission policy dictates whether a block should be inserted upon a cache miss.
     * Default value is `admit-on-first-miss`.
     * Possible values are: `admit-on-first-miss`, `admit-on-second-miss`.
     * 
     */
    @Import(name="admissionPolicy")
    private @Nullable Output<String> admissionPolicy;

    /**
     * @return The cache admission policy dictates whether a block should be inserted upon a cache miss.
     * Default value is `admit-on-first-miss`.
     * Possible values are: `admit-on-first-miss`, `admit-on-second-miss`.
     * 
     */
    public Optional<Output<String>> admissionPolicy() {
        return Optional.ofNullable(this.admissionPolicy);
    }

    /**
     * The ID of the Anywhere cache instance.
     * 
     */
    @Import(name="anywhereCacheId")
    private @Nullable Output<String> anywhereCacheId;

    /**
     * @return The ID of the Anywhere cache instance.
     * 
     */
    public Optional<Output<String>> anywhereCacheId() {
        return Optional.ofNullable(this.anywhereCacheId);
    }

    /**
     * A reference to Bucket resource
     * 
     * ***
     * 
     */
    @Import(name="bucket")
    private @Nullable Output<String> bucket;

    /**
     * @return A reference to Bucket resource
     * 
     * ***
     * 
     */
    public Optional<Output<String>> bucket() {
        return Optional.ofNullable(this.bucket);
    }

    /**
     * The creation time of the cache instance in RFC 3339 format.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return The creation time of the cache instance in RFC 3339 format.
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * True if the cache instance has an active Update long-running operation.
     * 
     */
    @Import(name="pendingUpdate")
    private @Nullable Output<Boolean> pendingUpdate;

    /**
     * @return True if the cache instance has an active Update long-running operation.
     * 
     */
    public Optional<Output<Boolean>> pendingUpdate() {
        return Optional.ofNullable(this.pendingUpdate);
    }

    /**
     * The current state of the cache instance.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The current state of the cache instance.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * The TTL of all cache entries in whole seconds. e.g., &#34;7200s&#34;. It defaults to `86400s`
     * 
     */
    @Import(name="ttl")
    private @Nullable Output<String> ttl;

    /**
     * @return The TTL of all cache entries in whole seconds. e.g., &#34;7200s&#34;. It defaults to `86400s`
     * 
     */
    public Optional<Output<String>> ttl() {
        return Optional.ofNullable(this.ttl);
    }

    /**
     * The modification time of the cache instance metadata in RFC 3339 format.
     * 
     */
    @Import(name="updateTime")
    private @Nullable Output<String> updateTime;

    /**
     * @return The modification time of the cache instance metadata in RFC 3339 format.
     * 
     */
    public Optional<Output<String>> updateTime() {
        return Optional.ofNullable(this.updateTime);
    }

    /**
     * The zone in which the cache instance needs to be created. For example, `us-central1-a.`
     * 
     */
    @Import(name="zone")
    private @Nullable Output<String> zone;

    /**
     * @return The zone in which the cache instance needs to be created. For example, `us-central1-a.`
     * 
     */
    public Optional<Output<String>> zone() {
        return Optional.ofNullable(this.zone);
    }

    private AnywhereCacheState() {}

    private AnywhereCacheState(AnywhereCacheState $) {
        this.admissionPolicy = $.admissionPolicy;
        this.anywhereCacheId = $.anywhereCacheId;
        this.bucket = $.bucket;
        this.createTime = $.createTime;
        this.pendingUpdate = $.pendingUpdate;
        this.state = $.state;
        this.ttl = $.ttl;
        this.updateTime = $.updateTime;
        this.zone = $.zone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AnywhereCacheState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AnywhereCacheState $;

        public Builder() {
            $ = new AnywhereCacheState();
        }

        public Builder(AnywhereCacheState defaults) {
            $ = new AnywhereCacheState(Objects.requireNonNull(defaults));
        }

        /**
         * @param admissionPolicy The cache admission policy dictates whether a block should be inserted upon a cache miss.
         * Default value is `admit-on-first-miss`.
         * Possible values are: `admit-on-first-miss`, `admit-on-second-miss`.
         * 
         * @return builder
         * 
         */
        public Builder admissionPolicy(@Nullable Output<String> admissionPolicy) {
            $.admissionPolicy = admissionPolicy;
            return this;
        }

        /**
         * @param admissionPolicy The cache admission policy dictates whether a block should be inserted upon a cache miss.
         * Default value is `admit-on-first-miss`.
         * Possible values are: `admit-on-first-miss`, `admit-on-second-miss`.
         * 
         * @return builder
         * 
         */
        public Builder admissionPolicy(String admissionPolicy) {
            return admissionPolicy(Output.of(admissionPolicy));
        }

        /**
         * @param anywhereCacheId The ID of the Anywhere cache instance.
         * 
         * @return builder
         * 
         */
        public Builder anywhereCacheId(@Nullable Output<String> anywhereCacheId) {
            $.anywhereCacheId = anywhereCacheId;
            return this;
        }

        /**
         * @param anywhereCacheId The ID of the Anywhere cache instance.
         * 
         * @return builder
         * 
         */
        public Builder anywhereCacheId(String anywhereCacheId) {
            return anywhereCacheId(Output.of(anywhereCacheId));
        }

        /**
         * @param bucket A reference to Bucket resource
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder bucket(@Nullable Output<String> bucket) {
            $.bucket = bucket;
            return this;
        }

        /**
         * @param bucket A reference to Bucket resource
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder bucket(String bucket) {
            return bucket(Output.of(bucket));
        }

        /**
         * @param createTime The creation time of the cache instance in RFC 3339 format.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime The creation time of the cache instance in RFC 3339 format.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param pendingUpdate True if the cache instance has an active Update long-running operation.
         * 
         * @return builder
         * 
         */
        public Builder pendingUpdate(@Nullable Output<Boolean> pendingUpdate) {
            $.pendingUpdate = pendingUpdate;
            return this;
        }

        /**
         * @param pendingUpdate True if the cache instance has an active Update long-running operation.
         * 
         * @return builder
         * 
         */
        public Builder pendingUpdate(Boolean pendingUpdate) {
            return pendingUpdate(Output.of(pendingUpdate));
        }

        /**
         * @param state The current state of the cache instance.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The current state of the cache instance.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param ttl The TTL of all cache entries in whole seconds. e.g., &#34;7200s&#34;. It defaults to `86400s`
         * 
         * @return builder
         * 
         */
        public Builder ttl(@Nullable Output<String> ttl) {
            $.ttl = ttl;
            return this;
        }

        /**
         * @param ttl The TTL of all cache entries in whole seconds. e.g., &#34;7200s&#34;. It defaults to `86400s`
         * 
         * @return builder
         * 
         */
        public Builder ttl(String ttl) {
            return ttl(Output.of(ttl));
        }

        /**
         * @param updateTime The modification time of the cache instance metadata in RFC 3339 format.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(@Nullable Output<String> updateTime) {
            $.updateTime = updateTime;
            return this;
        }

        /**
         * @param updateTime The modification time of the cache instance metadata in RFC 3339 format.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(String updateTime) {
            return updateTime(Output.of(updateTime));
        }

        /**
         * @param zone The zone in which the cache instance needs to be created. For example, `us-central1-a.`
         * 
         * @return builder
         * 
         */
        public Builder zone(@Nullable Output<String> zone) {
            $.zone = zone;
            return this;
        }

        /**
         * @param zone The zone in which the cache instance needs to be created. For example, `us-central1-a.`
         * 
         * @return builder
         * 
         */
        public Builder zone(String zone) {
            return zone(Output.of(zone));
        }

        public AnywhereCacheState build() {
            return $;
        }
    }

}
