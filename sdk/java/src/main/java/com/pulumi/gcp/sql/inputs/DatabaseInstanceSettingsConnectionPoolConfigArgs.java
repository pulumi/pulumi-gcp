// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.sql.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.sql.inputs.DatabaseInstanceSettingsConnectionPoolConfigFlagArgs;
import java.lang.Boolean;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DatabaseInstanceSettingsConnectionPoolConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final DatabaseInstanceSettingsConnectionPoolConfigArgs Empty = new DatabaseInstanceSettingsConnectionPoolConfigArgs();

    /**
     * True if the manager connection pooling configuration is enabled.
     * 
     */
    @Import(name="connectionPoolingEnabled")
    private @Nullable Output<Boolean> connectionPoolingEnabled;

    /**
     * @return True if the manager connection pooling configuration is enabled.
     * 
     */
    public Optional<Output<Boolean>> connectionPoolingEnabled() {
        return Optional.ofNullable(this.connectionPoolingEnabled);
    }

    /**
     * List of connection pool configuration flags
     * 
     */
    @Import(name="flags")
    private @Nullable Output<List<DatabaseInstanceSettingsConnectionPoolConfigFlagArgs>> flags;

    /**
     * @return List of connection pool configuration flags
     * 
     */
    public Optional<Output<List<DatabaseInstanceSettingsConnectionPoolConfigFlagArgs>>> flags() {
        return Optional.ofNullable(this.flags);
    }

    private DatabaseInstanceSettingsConnectionPoolConfigArgs() {}

    private DatabaseInstanceSettingsConnectionPoolConfigArgs(DatabaseInstanceSettingsConnectionPoolConfigArgs $) {
        this.connectionPoolingEnabled = $.connectionPoolingEnabled;
        this.flags = $.flags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatabaseInstanceSettingsConnectionPoolConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatabaseInstanceSettingsConnectionPoolConfigArgs $;

        public Builder() {
            $ = new DatabaseInstanceSettingsConnectionPoolConfigArgs();
        }

        public Builder(DatabaseInstanceSettingsConnectionPoolConfigArgs defaults) {
            $ = new DatabaseInstanceSettingsConnectionPoolConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param connectionPoolingEnabled True if the manager connection pooling configuration is enabled.
         * 
         * @return builder
         * 
         */
        public Builder connectionPoolingEnabled(@Nullable Output<Boolean> connectionPoolingEnabled) {
            $.connectionPoolingEnabled = connectionPoolingEnabled;
            return this;
        }

        /**
         * @param connectionPoolingEnabled True if the manager connection pooling configuration is enabled.
         * 
         * @return builder
         * 
         */
        public Builder connectionPoolingEnabled(Boolean connectionPoolingEnabled) {
            return connectionPoolingEnabled(Output.of(connectionPoolingEnabled));
        }

        /**
         * @param flags List of connection pool configuration flags
         * 
         * @return builder
         * 
         */
        public Builder flags(@Nullable Output<List<DatabaseInstanceSettingsConnectionPoolConfigFlagArgs>> flags) {
            $.flags = flags;
            return this;
        }

        /**
         * @param flags List of connection pool configuration flags
         * 
         * @return builder
         * 
         */
        public Builder flags(List<DatabaseInstanceSettingsConnectionPoolConfigFlagArgs> flags) {
            return flags(Output.of(flags));
        }

        /**
         * @param flags List of connection pool configuration flags
         * 
         * @return builder
         * 
         */
        public Builder flags(DatabaseInstanceSettingsConnectionPoolConfigFlagArgs... flags) {
            return flags(List.of(flags));
        }

        public DatabaseInstanceSettingsConnectionPoolConfigArgs build() {
            return $;
        }
    }

}
