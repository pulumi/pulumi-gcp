// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.osconfig.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GuestPoliciesRecipeArtifactRemoteArgs extends com.pulumi.resources.ResourceArgs {

    public static final GuestPoliciesRecipeArtifactRemoteArgs Empty = new GuestPoliciesRecipeArtifactRemoteArgs();

    /**
     * Must be provided if allowInsecure is false. SHA256 checksum in hex format, to compare to the checksum of the artifact.
     * If the checksum is not empty and it doesn&#39;t match the artifact then the recipe installation fails before running any
     * of the steps.
     * 
     */
    @Import(name="checkSum")
    private @Nullable Output<String> checkSum;

    /**
     * @return Must be provided if allowInsecure is false. SHA256 checksum in hex format, to compare to the checksum of the artifact.
     * If the checksum is not empty and it doesn&#39;t match the artifact then the recipe installation fails before running any
     * of the steps.
     * 
     */
    public Optional<Output<String>> checkSum() {
        return Optional.ofNullable(this.checkSum);
    }

    /**
     * URI from which to fetch the object. It should contain both the protocol and path following the format {protocol}://{location}.
     * 
     */
    @Import(name="uri")
    private @Nullable Output<String> uri;

    /**
     * @return URI from which to fetch the object. It should contain both the protocol and path following the format {protocol}://{location}.
     * 
     */
    public Optional<Output<String>> uri() {
        return Optional.ofNullable(this.uri);
    }

    private GuestPoliciesRecipeArtifactRemoteArgs() {}

    private GuestPoliciesRecipeArtifactRemoteArgs(GuestPoliciesRecipeArtifactRemoteArgs $) {
        this.checkSum = $.checkSum;
        this.uri = $.uri;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GuestPoliciesRecipeArtifactRemoteArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GuestPoliciesRecipeArtifactRemoteArgs $;

        public Builder() {
            $ = new GuestPoliciesRecipeArtifactRemoteArgs();
        }

        public Builder(GuestPoliciesRecipeArtifactRemoteArgs defaults) {
            $ = new GuestPoliciesRecipeArtifactRemoteArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param checkSum Must be provided if allowInsecure is false. SHA256 checksum in hex format, to compare to the checksum of the artifact.
         * If the checksum is not empty and it doesn&#39;t match the artifact then the recipe installation fails before running any
         * of the steps.
         * 
         * @return builder
         * 
         */
        public Builder checkSum(@Nullable Output<String> checkSum) {
            $.checkSum = checkSum;
            return this;
        }

        /**
         * @param checkSum Must be provided if allowInsecure is false. SHA256 checksum in hex format, to compare to the checksum of the artifact.
         * If the checksum is not empty and it doesn&#39;t match the artifact then the recipe installation fails before running any
         * of the steps.
         * 
         * @return builder
         * 
         */
        public Builder checkSum(String checkSum) {
            return checkSum(Output.of(checkSum));
        }

        /**
         * @param uri URI from which to fetch the object. It should contain both the protocol and path following the format {protocol}://{location}.
         * 
         * @return builder
         * 
         */
        public Builder uri(@Nullable Output<String> uri) {
            $.uri = uri;
            return this;
        }

        /**
         * @param uri URI from which to fetch the object. It should contain both the protocol and path following the format {protocol}://{location}.
         * 
         * @return builder
         * 
         */
        public Builder uri(String uri) {
            return uri(Output.of(uri));
        }

        public GuestPoliciesRecipeArtifactRemoteArgs build() {
            return $;
        }
    }

}
