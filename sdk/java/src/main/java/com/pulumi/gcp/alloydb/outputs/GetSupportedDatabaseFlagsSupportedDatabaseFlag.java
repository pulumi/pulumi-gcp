// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.alloydb.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.alloydb.outputs.GetSupportedDatabaseFlagsSupportedDatabaseFlagIntegerRestrictions;
import com.pulumi.gcp.alloydb.outputs.GetSupportedDatabaseFlagsSupportedDatabaseFlagStringRestrictions;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetSupportedDatabaseFlagsSupportedDatabaseFlag {
    /**
     * @return Whether the database flag accepts multiple values. If true, a comma-separated list of stringified values may be specified.
     * 
     */
    private Boolean acceptsMultipleValues;
    /**
     * @return The name of the database flag, e.g. &#34;max_allowed_packets&#34;. The is a possibly key for the Instance.database_flags map field.
     * 
     */
    private String flagName;
    /**
     * @return Restriction on `INTEGER` type value. Specifies the minimum value and the maximum value that can be specified, if applicable.
     * 
     */
    private GetSupportedDatabaseFlagsSupportedDatabaseFlagIntegerRestrictions integerRestrictions;
    /**
     * @return The name of the flag resource, following Google Cloud conventions, e.g.: * projects/{project}/locations/{location}/flags/{flag} This field currently has no semantic meaning.
     * 
     */
    private String name;
    /**
     * @return Whether setting or updating this flag on an Instance requires a database restart. If a flag that requires database restart is set, the backend will automatically restart the database (making sure to satisfy any availability SLO&#39;s).
     * 
     */
    private Boolean requiresDbRestart;
    /**
     * @return Restriction on `STRING` type value. The list of allowed values, if bounded. This field will be empty if there is a unbounded number of allowed values.
     * 
     */
    private GetSupportedDatabaseFlagsSupportedDatabaseFlagStringRestrictions stringRestrictions;
    /**
     * @return Major database engine versions for which this flag is supported. The supported values are `POSTGRES_14` and `DATABASE_VERSION_UNSPECIFIED`.
     * 
     */
    private List<String> supportedDbVersions;
    /**
     * @return ValueType describes the semantic type of the value that the flag accepts. Regardless of the ValueType, the Instance.database_flags field accepts the stringified version of the value, i.e. &#34;20&#34; or &#34;3.14&#34;. The supported values are `VALUE_TYPE_UNSPECIFIED`, `STRING`, `INTEGER`, `FLOAT` and `NONE`.
     * 
     */
    private String valueType;

    private GetSupportedDatabaseFlagsSupportedDatabaseFlag() {}
    /**
     * @return Whether the database flag accepts multiple values. If true, a comma-separated list of stringified values may be specified.
     * 
     */
    public Boolean acceptsMultipleValues() {
        return this.acceptsMultipleValues;
    }
    /**
     * @return The name of the database flag, e.g. &#34;max_allowed_packets&#34;. The is a possibly key for the Instance.database_flags map field.
     * 
     */
    public String flagName() {
        return this.flagName;
    }
    /**
     * @return Restriction on `INTEGER` type value. Specifies the minimum value and the maximum value that can be specified, if applicable.
     * 
     */
    public GetSupportedDatabaseFlagsSupportedDatabaseFlagIntegerRestrictions integerRestrictions() {
        return this.integerRestrictions;
    }
    /**
     * @return The name of the flag resource, following Google Cloud conventions, e.g.: * projects/{project}/locations/{location}/flags/{flag} This field currently has no semantic meaning.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Whether setting or updating this flag on an Instance requires a database restart. If a flag that requires database restart is set, the backend will automatically restart the database (making sure to satisfy any availability SLO&#39;s).
     * 
     */
    public Boolean requiresDbRestart() {
        return this.requiresDbRestart;
    }
    /**
     * @return Restriction on `STRING` type value. The list of allowed values, if bounded. This field will be empty if there is a unbounded number of allowed values.
     * 
     */
    public GetSupportedDatabaseFlagsSupportedDatabaseFlagStringRestrictions stringRestrictions() {
        return this.stringRestrictions;
    }
    /**
     * @return Major database engine versions for which this flag is supported. The supported values are `POSTGRES_14` and `DATABASE_VERSION_UNSPECIFIED`.
     * 
     */
    public List<String> supportedDbVersions() {
        return this.supportedDbVersions;
    }
    /**
     * @return ValueType describes the semantic type of the value that the flag accepts. Regardless of the ValueType, the Instance.database_flags field accepts the stringified version of the value, i.e. &#34;20&#34; or &#34;3.14&#34;. The supported values are `VALUE_TYPE_UNSPECIFIED`, `STRING`, `INTEGER`, `FLOAT` and `NONE`.
     * 
     */
    public String valueType() {
        return this.valueType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSupportedDatabaseFlagsSupportedDatabaseFlag defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean acceptsMultipleValues;
        private String flagName;
        private GetSupportedDatabaseFlagsSupportedDatabaseFlagIntegerRestrictions integerRestrictions;
        private String name;
        private Boolean requiresDbRestart;
        private GetSupportedDatabaseFlagsSupportedDatabaseFlagStringRestrictions stringRestrictions;
        private List<String> supportedDbVersions;
        private String valueType;
        public Builder() {}
        public Builder(GetSupportedDatabaseFlagsSupportedDatabaseFlag defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.acceptsMultipleValues = defaults.acceptsMultipleValues;
    	      this.flagName = defaults.flagName;
    	      this.integerRestrictions = defaults.integerRestrictions;
    	      this.name = defaults.name;
    	      this.requiresDbRestart = defaults.requiresDbRestart;
    	      this.stringRestrictions = defaults.stringRestrictions;
    	      this.supportedDbVersions = defaults.supportedDbVersions;
    	      this.valueType = defaults.valueType;
        }

        @CustomType.Setter
        public Builder acceptsMultipleValues(Boolean acceptsMultipleValues) {
            this.acceptsMultipleValues = Objects.requireNonNull(acceptsMultipleValues);
            return this;
        }
        @CustomType.Setter
        public Builder flagName(String flagName) {
            this.flagName = Objects.requireNonNull(flagName);
            return this;
        }
        @CustomType.Setter
        public Builder integerRestrictions(GetSupportedDatabaseFlagsSupportedDatabaseFlagIntegerRestrictions integerRestrictions) {
            this.integerRestrictions = Objects.requireNonNull(integerRestrictions);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder requiresDbRestart(Boolean requiresDbRestart) {
            this.requiresDbRestart = Objects.requireNonNull(requiresDbRestart);
            return this;
        }
        @CustomType.Setter
        public Builder stringRestrictions(GetSupportedDatabaseFlagsSupportedDatabaseFlagStringRestrictions stringRestrictions) {
            this.stringRestrictions = Objects.requireNonNull(stringRestrictions);
            return this;
        }
        @CustomType.Setter
        public Builder supportedDbVersions(List<String> supportedDbVersions) {
            this.supportedDbVersions = Objects.requireNonNull(supportedDbVersions);
            return this;
        }
        public Builder supportedDbVersions(String... supportedDbVersions) {
            return supportedDbVersions(List.of(supportedDbVersions));
        }
        @CustomType.Setter
        public Builder valueType(String valueType) {
            this.valueType = Objects.requireNonNull(valueType);
            return this;
        }
        public GetSupportedDatabaseFlagsSupportedDatabaseFlag build() {
            final var o = new GetSupportedDatabaseFlagsSupportedDatabaseFlag();
            o.acceptsMultipleValues = acceptsMultipleValues;
            o.flagName = flagName;
            o.integerRestrictions = integerRestrictions;
            o.name = name;
            o.requiresDbRestart = requiresDbRestart;
            o.stringRestrictions = stringRestrictions;
            o.supportedDbVersions = supportedDbVersions;
            o.valueType = valueType;
            return o;
        }
    }
}
