// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetInstanceGroupManagerInstanceLifecyclePolicy {
    /**
     * @return Specifies the action that a MIG performs on a failed VM. If the value of the &#34;onFailedHealthCheck&#34; field is DEFAULT_ACTION, then the same action also applies to the VMs on which your application fails a health check. Valid values are: REPAIR, DO_NOTHING. If REPAIR (default), then MIG automatically repairs a failed VM by recreating it. For more information, see about repairing VMs in a MIG. If DO_NOTHING, then MIG does not repair a failed VM.
     * 
     */
    private String defaultActionOnFailure;
    /**
     * @return Specifies whether to apply the group&#39;s latest configuration when repairing a VM. Valid options are: YES, NO. If YES and you updated the group&#39;s instance template or per-instance configurations after the VM was created, then these changes are applied when VM is repaired. If NO (default), then updates are applied in accordance with the group&#39;s update policy type.
     * 
     */
    private String forceUpdateOnRepair;
    /**
     * @return Specifies the action that a MIG performs on an unhealthy VM. A VM is marked as unhealthy when the application running on that VM fails a health check. Valid values are: DEFAULT_ACTION, DO_NOTHING, REPAIR. If DEFAULT_ACTION (default), then MIG uses the same action configured for the  &#34;defaultActionOnFailure&#34; field. If DO_NOTHING, then MIG does not repair unhealthy VM. If REPAIR, then MIG automatically repairs an unhealthy VM by recreating it.
     * 
     */
    private String onFailedHealthCheck;

    private GetInstanceGroupManagerInstanceLifecyclePolicy() {}
    /**
     * @return Specifies the action that a MIG performs on a failed VM. If the value of the &#34;onFailedHealthCheck&#34; field is DEFAULT_ACTION, then the same action also applies to the VMs on which your application fails a health check. Valid values are: REPAIR, DO_NOTHING. If REPAIR (default), then MIG automatically repairs a failed VM by recreating it. For more information, see about repairing VMs in a MIG. If DO_NOTHING, then MIG does not repair a failed VM.
     * 
     */
    public String defaultActionOnFailure() {
        return this.defaultActionOnFailure;
    }
    /**
     * @return Specifies whether to apply the group&#39;s latest configuration when repairing a VM. Valid options are: YES, NO. If YES and you updated the group&#39;s instance template or per-instance configurations after the VM was created, then these changes are applied when VM is repaired. If NO (default), then updates are applied in accordance with the group&#39;s update policy type.
     * 
     */
    public String forceUpdateOnRepair() {
        return this.forceUpdateOnRepair;
    }
    /**
     * @return Specifies the action that a MIG performs on an unhealthy VM. A VM is marked as unhealthy when the application running on that VM fails a health check. Valid values are: DEFAULT_ACTION, DO_NOTHING, REPAIR. If DEFAULT_ACTION (default), then MIG uses the same action configured for the  &#34;defaultActionOnFailure&#34; field. If DO_NOTHING, then MIG does not repair unhealthy VM. If REPAIR, then MIG automatically repairs an unhealthy VM by recreating it.
     * 
     */
    public String onFailedHealthCheck() {
        return this.onFailedHealthCheck;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstanceGroupManagerInstanceLifecyclePolicy defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String defaultActionOnFailure;
        private String forceUpdateOnRepair;
        private String onFailedHealthCheck;
        public Builder() {}
        public Builder(GetInstanceGroupManagerInstanceLifecyclePolicy defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.defaultActionOnFailure = defaults.defaultActionOnFailure;
    	      this.forceUpdateOnRepair = defaults.forceUpdateOnRepair;
    	      this.onFailedHealthCheck = defaults.onFailedHealthCheck;
        }

        @CustomType.Setter
        public Builder defaultActionOnFailure(String defaultActionOnFailure) {
            if (defaultActionOnFailure == null) {
              throw new MissingRequiredPropertyException("GetInstanceGroupManagerInstanceLifecyclePolicy", "defaultActionOnFailure");
            }
            this.defaultActionOnFailure = defaultActionOnFailure;
            return this;
        }
        @CustomType.Setter
        public Builder forceUpdateOnRepair(String forceUpdateOnRepair) {
            if (forceUpdateOnRepair == null) {
              throw new MissingRequiredPropertyException("GetInstanceGroupManagerInstanceLifecyclePolicy", "forceUpdateOnRepair");
            }
            this.forceUpdateOnRepair = forceUpdateOnRepair;
            return this;
        }
        @CustomType.Setter
        public Builder onFailedHealthCheck(String onFailedHealthCheck) {
            if (onFailedHealthCheck == null) {
              throw new MissingRequiredPropertyException("GetInstanceGroupManagerInstanceLifecyclePolicy", "onFailedHealthCheck");
            }
            this.onFailedHealthCheck = onFailedHealthCheck;
            return this;
        }
        public GetInstanceGroupManagerInstanceLifecyclePolicy build() {
            final var _resultValue = new GetInstanceGroupManagerInstanceLifecyclePolicy();
            _resultValue.defaultActionOnFailure = defaultActionOnFailure;
            _resultValue.forceUpdateOnRepair = forceUpdateOnRepair;
            _resultValue.onFailedHealthCheck = onFailedHealthCheck;
            return _resultValue;
        }
    }
}
