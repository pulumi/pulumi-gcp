// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.gkeonprem;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.gkeonprem.VmwareAdminClusterArgs;
import com.pulumi.gcp.gkeonprem.inputs.VmwareAdminClusterState;
import com.pulumi.gcp.gkeonprem.outputs.VmwareAdminClusterAddonNode;
import com.pulumi.gcp.gkeonprem.outputs.VmwareAdminClusterAntiAffinityGroups;
import com.pulumi.gcp.gkeonprem.outputs.VmwareAdminClusterAuthorization;
import com.pulumi.gcp.gkeonprem.outputs.VmwareAdminClusterAutoRepairConfig;
import com.pulumi.gcp.gkeonprem.outputs.VmwareAdminClusterControlPlaneNode;
import com.pulumi.gcp.gkeonprem.outputs.VmwareAdminClusterFleet;
import com.pulumi.gcp.gkeonprem.outputs.VmwareAdminClusterLoadBalancer;
import com.pulumi.gcp.gkeonprem.outputs.VmwareAdminClusterNetworkConfig;
import com.pulumi.gcp.gkeonprem.outputs.VmwareAdminClusterPlatformConfig;
import com.pulumi.gcp.gkeonprem.outputs.VmwareAdminClusterPrivateRegistryConfig;
import com.pulumi.gcp.gkeonprem.outputs.VmwareAdminClusterProxy;
import com.pulumi.gcp.gkeonprem.outputs.VmwareAdminClusterStatus;
import com.pulumi.gcp.gkeonprem.outputs.VmwareAdminClusterVcenter;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * A Google VMware Admin Cluster.
 * 
 * To get more information about VmwareAdminCluster, see:
 * 
 * * [API documentation](https://cloud.google.com/kubernetes-engine/distributed-cloud/reference/on-prem-api/rest/v1/projects.locations.vmwareAdminClusters)
 * 
 * ## Example Usage
 * 
 * ### Gkeonprem Vmware Admin Cluster Basic
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.gkeonprem.VmwareAdminCluster;
 * import com.pulumi.gcp.gkeonprem.VmwareAdminClusterArgs;
 * import com.pulumi.gcp.gkeonprem.inputs.VmwareAdminClusterVcenterArgs;
 * import com.pulumi.gcp.gkeonprem.inputs.VmwareAdminClusterNetworkConfigArgs;
 * import com.pulumi.gcp.gkeonprem.inputs.VmwareAdminClusterNetworkConfigDhcpIpConfigArgs;
 * import com.pulumi.gcp.gkeonprem.inputs.VmwareAdminClusterControlPlaneNodeArgs;
 * import com.pulumi.gcp.gkeonprem.inputs.VmwareAdminClusterLoadBalancerArgs;
 * import com.pulumi.gcp.gkeonprem.inputs.VmwareAdminClusterLoadBalancerVipConfigArgs;
 * import com.pulumi.gcp.gkeonprem.inputs.VmwareAdminClusterLoadBalancerF5ConfigArgs;
 * import com.pulumi.gcp.gkeonprem.inputs.VmwareAdminClusterPrivateRegistryConfigArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var admin_cluster_basic = new VmwareAdminCluster("admin-cluster-basic", VmwareAdminClusterArgs.builder()
 *             .name("basic")
 *             .location("us-west1")
 *             .description("test admin cluster")
 *             .bootstrapClusterMembership("projects/870316890899/locations/global/memberships/gkeonprem-terraform-test")
 *             .onPremVersion("1.31.0-gke.35")
 *             .imageType("ubuntu_containerd")
 *             .vcenter(VmwareAdminClusterVcenterArgs.builder()
 *                 .resourcePool("test resource pool")
 *                 .datastore("test data store")
 *                 .datacenter("test data center")
 *                 .cluster("test cluster")
 *                 .folder("test folder")
 *                 .caCertData("test ca cert data")
 *                 .address("10.0.0.1")
 *                 .dataDisk("test data disk")
 *                 .build())
 *             .networkConfig(VmwareAdminClusterNetworkConfigArgs.builder()
 *                 .serviceAddressCidrBlocks("10.96.0.0/12")
 *                 .podAddressCidrBlocks("192.168.0.0/16")
 *                 .dhcpIpConfig(VmwareAdminClusterNetworkConfigDhcpIpConfigArgs.builder()
 *                     .enabled(true)
 *                     .build())
 *                 .build())
 *             .controlPlaneNode(VmwareAdminClusterControlPlaneNodeArgs.builder()
 *                 .cpus(4)
 *                 .memory(8192)
 *                 .build())
 *             .loadBalancer(VmwareAdminClusterLoadBalancerArgs.builder()
 *                 .vipConfig(VmwareAdminClusterLoadBalancerVipConfigArgs.builder()
 *                     .controlPlaneVip("10.251.133.5")
 *                     .addonsVip("10.251.135.19")
 *                     .build())
 *                 .f5Config(VmwareAdminClusterLoadBalancerF5ConfigArgs.builder()
 *                     .address("10.251.135.22")
 *                     .partition("test-parition")
 *                     .snatPool("test-snat-pool")
 *                     .build())
 *                 .build())
 *             .privateRegistryConfig(VmwareAdminClusterPrivateRegistryConfigArgs.builder()
 *                 .address("test-address")
 *                 .caCert("test-ca-cert")
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * ### Gkeonprem Vmware Admin Cluster Full
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.gkeonprem.VmwareAdminCluster;
 * import com.pulumi.gcp.gkeonprem.VmwareAdminClusterArgs;
 * import com.pulumi.gcp.gkeonprem.inputs.VmwareAdminClusterVcenterArgs;
 * import com.pulumi.gcp.gkeonprem.inputs.VmwareAdminClusterNetworkConfigArgs;
 * import com.pulumi.gcp.gkeonprem.inputs.VmwareAdminClusterNetworkConfigHaControlPlaneConfigArgs;
 * import com.pulumi.gcp.gkeonprem.inputs.VmwareAdminClusterNetworkConfigHaControlPlaneConfigControlPlaneIpBlockArgs;
 * import com.pulumi.gcp.gkeonprem.inputs.VmwareAdminClusterNetworkConfigHostConfigArgs;
 * import com.pulumi.gcp.gkeonprem.inputs.VmwareAdminClusterNetworkConfigStaticIpConfigArgs;
 * import com.pulumi.gcp.gkeonprem.inputs.VmwareAdminClusterControlPlaneNodeArgs;
 * import com.pulumi.gcp.gkeonprem.inputs.VmwareAdminClusterLoadBalancerArgs;
 * import com.pulumi.gcp.gkeonprem.inputs.VmwareAdminClusterLoadBalancerVipConfigArgs;
 * import com.pulumi.gcp.gkeonprem.inputs.VmwareAdminClusterLoadBalancerManualLbConfigArgs;
 * import com.pulumi.gcp.gkeonprem.inputs.VmwareAdminClusterAddonNodeArgs;
 * import com.pulumi.gcp.gkeonprem.inputs.VmwareAdminClusterAddonNodeAutoResizeConfigArgs;
 * import com.pulumi.gcp.gkeonprem.inputs.VmwareAdminClusterAntiAffinityGroupsArgs;
 * import com.pulumi.gcp.gkeonprem.inputs.VmwareAdminClusterAuthorizationArgs;
 * import com.pulumi.gcp.gkeonprem.inputs.VmwareAdminClusterAutoRepairConfigArgs;
 * import com.pulumi.gcp.gkeonprem.inputs.VmwareAdminClusterPlatformConfigArgs;
 * import com.pulumi.gcp.gkeonprem.inputs.VmwareAdminClusterPrivateRegistryConfigArgs;
 * import com.pulumi.gcp.gkeonprem.inputs.VmwareAdminClusterProxyArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         var admin_cluster_full = new VmwareAdminCluster("admin-cluster-full", VmwareAdminClusterArgs.builder()
 *             .name("full")
 *             .location("us-west1")
 *             .description("test admin cluster")
 *             .bootstrapClusterMembership("projects/870316890899/locations/global/memberships/gkeonprem-terraform-test")
 *             .onPremVersion("1.31.0-gke.35")
 *             .imageType("ubuntu_containerd")
 *             .annotations(Map.ofEntries(
 *             ))
 *             .vcenter(VmwareAdminClusterVcenterArgs.builder()
 *                 .resourcePool("test resource pool")
 *                 .datastore("test data store")
 *                 .datacenter("test data center")
 *                 .cluster("test cluster")
 *                 .folder("test folder")
 *                 .caCertData("test ca cert data")
 *                 .address("10.0.0.1")
 *                 .dataDisk("test data disk")
 *                 .storagePolicyName("storage_policy_name")
 *                 .build())
 *             .networkConfig(VmwareAdminClusterNetworkConfigArgs.builder()
 *                 .serviceAddressCidrBlocks("10.96.0.0/12")
 *                 .podAddressCidrBlocks("192.168.0.0/16")
 *                 .haControlPlaneConfig(VmwareAdminClusterNetworkConfigHaControlPlaneConfigArgs.builder()
 *                     .controlPlaneIpBlock(VmwareAdminClusterNetworkConfigHaControlPlaneConfigControlPlaneIpBlockArgs.builder()
 *                         .gateway("10.0.0.3")
 *                         .ips(VmwareAdminClusterNetworkConfigHaControlPlaneConfigControlPlaneIpBlockIpArgs.builder()
 *                             .hostname("hostname")
 *                             .ip("10.0.0.4")
 *                             .build())
 *                         .netmask("10.0.0.3/32")
 *                         .build())
 *                     .build())
 *                 .hostConfig(VmwareAdminClusterNetworkConfigHostConfigArgs.builder()
 *                     .dnsServers("10.254.41.1")
 *                     .ntpServers("216.239.35.8")
 *                     .dnsSearchDomains("test-domain")
 *                     .build())
 *                 .staticIpConfig(VmwareAdminClusterNetworkConfigStaticIpConfigArgs.builder()
 *                     .ipBlocks(VmwareAdminClusterNetworkConfigStaticIpConfigIpBlockArgs.builder()
 *                         .gateway("10.0.0.1")
 *                         .ips(VmwareAdminClusterNetworkConfigStaticIpConfigIpBlockIpArgs.builder()
 *                             .hostname("hostname")
 *                             .ip("10.0.0.2")
 *                             .build())
 *                         .netmask("10.0.0.3/32")
 *                         .build())
 *                     .build())
 *                 .vcenterNetwork("test-vcenter-network")
 *                 .build())
 *             .controlPlaneNode(VmwareAdminClusterControlPlaneNodeArgs.builder()
 *                 .cpus(4)
 *                 .memory(8192)
 *                 .replicas(3)
 *                 .build())
 *             .loadBalancer(VmwareAdminClusterLoadBalancerArgs.builder()
 *                 .vipConfig(VmwareAdminClusterLoadBalancerVipConfigArgs.builder()
 *                     .controlPlaneVip("10.251.133.5")
 *                     .addonsVip("10.251.135.19")
 *                     .build())
 *                 .manualLbConfig(VmwareAdminClusterLoadBalancerManualLbConfigArgs.builder()
 *                     .addonsNodePort(30005)
 *                     .controlPlaneNodePort(30006)
 *                     .ingressHttpNodePort(30007)
 *                     .ingressHttpsNodePort(30008)
 *                     .konnectivityServerNodePort(30009)
 *                     .build())
 *                 .build())
 *             .addonNode(VmwareAdminClusterAddonNodeArgs.builder()
 *                 .autoResizeConfig(VmwareAdminClusterAddonNodeAutoResizeConfigArgs.builder()
 *                     .enabled(true)
 *                     .build())
 *                 .build())
 *             .antiAffinityGroups(VmwareAdminClusterAntiAffinityGroupsArgs.builder()
 *                 .aagConfigDisabled(true)
 *                 .build())
 *             .authorization(VmwareAdminClusterAuthorizationArgs.builder()
 *                 .viewerUsers(VmwareAdminClusterAuthorizationViewerUserArgs.builder()
 *                     .username("user1}{@literal @}{@code gmail.com")
 *                     .build())
 *                 .build())
 *             .autoRepairConfig(VmwareAdminClusterAutoRepairConfigArgs.builder()
 *                 .enabled(true)
 *                 .build())
 *             .platformConfig(VmwareAdminClusterPlatformConfigArgs.builder()
 *                 .requiredPlatformVersion("1.31.0")
 *                 .build())
 *             .privateRegistryConfig(VmwareAdminClusterPrivateRegistryConfigArgs.builder()
 *                 .address("test-address")
 *                 .caCert("test-ca-cert")
 *                 .build())
 *             .proxy(VmwareAdminClusterProxyArgs.builder()
 *                 .url("http://my-proxy.example.local:80")
 *                 .noProxy("10.151.222.0/24,my-host.example.local,10.151.2.1")
 *                 .build())
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * ### Gkeonprem Vmware Admin Cluster Metallb
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.gkeonprem.VmwareAdminCluster;
 * import com.pulumi.gcp.gkeonprem.VmwareAdminClusterArgs;
 * import com.pulumi.gcp.gkeonprem.inputs.VmwareAdminClusterVcenterArgs;
 * import com.pulumi.gcp.gkeonprem.inputs.VmwareAdminClusterNetworkConfigArgs;
 * import com.pulumi.gcp.gkeonprem.inputs.VmwareAdminClusterNetworkConfigDhcpIpConfigArgs;
 * import com.pulumi.gcp.gkeonprem.inputs.VmwareAdminClusterControlPlaneNodeArgs;
 * import com.pulumi.gcp.gkeonprem.inputs.VmwareAdminClusterLoadBalancerArgs;
 * import com.pulumi.gcp.gkeonprem.inputs.VmwareAdminClusterLoadBalancerVipConfigArgs;
 * import com.pulumi.gcp.gkeonprem.inputs.VmwareAdminClusterLoadBalancerMetalLbConfigArgs;
 * import com.pulumi.gcp.gkeonprem.inputs.VmwareAdminClusterPrivateRegistryConfigArgs;
 * import com.pulumi.gcp.gkeonprem.inputs.VmwareAdminClusterProxyArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var admin_cluster_metallb = new VmwareAdminCluster("admin-cluster-metallb", VmwareAdminClusterArgs.builder()
 *             .name("metallb")
 *             .location("us-west1")
 *             .description("test admin cluster")
 *             .bootstrapClusterMembership("projects/870316890899/locations/global/memberships/gkeonprem-terraform-test")
 *             .onPremVersion("1.33.0-gke.35")
 *             .imageType("ubuntu_containerd")
 *             .enableAdvancedCluster(true)
 *             .vcenter(VmwareAdminClusterVcenterArgs.builder()
 *                 .resourcePool("test resource pool")
 *                 .datastore("test data store")
 *                 .datacenter("test data center")
 *                 .cluster("test cluster")
 *                 .folder("test folder")
 *                 .caCertData("test ca cert data")
 *                 .address("10.0.0.1")
 *                 .dataDisk("test data disk")
 *                 .build())
 *             .networkConfig(VmwareAdminClusterNetworkConfigArgs.builder()
 *                 .serviceAddressCidrBlocks("10.96.0.0/12")
 *                 .podAddressCidrBlocks("192.168.0.0/16")
 *                 .dhcpIpConfig(VmwareAdminClusterNetworkConfigDhcpIpConfigArgs.builder()
 *                     .enabled(true)
 *                     .build())
 *                 .build())
 *             .controlPlaneNode(VmwareAdminClusterControlPlaneNodeArgs.builder()
 *                 .cpus(4)
 *                 .memory(8192)
 *                 .build())
 *             .loadBalancer(VmwareAdminClusterLoadBalancerArgs.builder()
 *                 .vipConfig(VmwareAdminClusterLoadBalancerVipConfigArgs.builder()
 *                     .controlPlaneVip("10.251.133.5")
 *                     .addonsVip("10.251.135.19")
 *                     .build())
 *                 .metalLbConfig(VmwareAdminClusterLoadBalancerMetalLbConfigArgs.builder()
 *                     .enabled(true)
 *                     .build())
 *                 .build())
 *             .privateRegistryConfig(VmwareAdminClusterPrivateRegistryConfigArgs.builder()
 *                 .address("test-address")
 *                 .caCert("test-ca-cert")
 *                 .build())
 *             .proxy(VmwareAdminClusterProxyArgs.builder()
 *                 .url("http://my-proxy.example.local:80")
 *                 .noProxy("10.151.222.0/24,my-host.example.local,10.151.2.1")
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * VmwareAdminCluster can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/locations/{{location}}/vmwareAdminClusters/{{name}}`
 * 
 * * `{{project}}/{{location}}/{{name}}`
 * 
 * * `{{location}}/{{name}}`
 * 
 * When using the `pulumi import` command, VmwareAdminCluster can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:gkeonprem/vmwareAdminCluster:VmwareAdminCluster default projects/{{project}}/locations/{{location}}/vmwareAdminClusters/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:gkeonprem/vmwareAdminCluster:VmwareAdminCluster default {{project}}/{{location}}/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:gkeonprem/vmwareAdminCluster:VmwareAdminCluster default {{location}}/{{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:gkeonprem/vmwareAdminCluster:VmwareAdminCluster")
public class VmwareAdminCluster extends com.pulumi.resources.CustomResource {
    /**
     * The VMware admin cluster addon node configuration.
     * Structure is documented below.
     * 
     */
    @Export(name="addonNode", refs={VmwareAdminClusterAddonNode.class}, tree="[0]")
    private Output<VmwareAdminClusterAddonNode> addonNode;

    /**
     * @return The VMware admin cluster addon node configuration.
     * Structure is documented below.
     * 
     */
    public Output<VmwareAdminClusterAddonNode> addonNode() {
        return this.addonNode;
    }
    /**
     * Annotations on the VMware Admin Cluster.
     * This field has the same restrictions as Kubernetes annotations.
     * The total size of all keys and values combined is limited to 256k.
     * Key can have 2 segments: prefix (optional) and name (required),
     * separated by a slash (/).
     * Prefix must be a DNS subdomain.
     * Name must be 63 characters or less, begin and end with alphanumerics,
     * with dashes (-), underscores (_), dots (.), and alphanumerics between.
     * 
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
     * 
     */
    @Export(name="annotations", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> annotations;

    /**
     * @return Annotations on the VMware Admin Cluster.
     * This field has the same restrictions as Kubernetes annotations.
     * The total size of all keys and values combined is limited to 256k.
     * Key can have 2 segments: prefix (optional) and name (required),
     * separated by a slash (/).
     * Prefix must be a DNS subdomain.
     * Name must be 63 characters or less, begin and end with alphanumerics,
     * with dashes (-), underscores (_), dots (.), and alphanumerics between.
     * 
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effectiveAnnotations` for all of the annotations present on the resource.
     * 
     */
    public Output<Map<String,String>> annotations() {
        return this.annotations;
    }
    /**
     * AAGConfig specifies whether to spread VMware Admin Cluster nodes across at
     * least three physical hosts in the datacenter.
     * Structure is documented below.
     * 
     */
    @Export(name="antiAffinityGroups", refs={VmwareAdminClusterAntiAffinityGroups.class}, tree="[0]")
    private Output<VmwareAdminClusterAntiAffinityGroups> antiAffinityGroups;

    /**
     * @return AAGConfig specifies whether to spread VMware Admin Cluster nodes across at
     * least three physical hosts in the datacenter.
     * Structure is documented below.
     * 
     */
    public Output<VmwareAdminClusterAntiAffinityGroups> antiAffinityGroups() {
        return this.antiAffinityGroups;
    }
    /**
     * The VMware admin cluster authorization configuration.
     * Structure is documented below.
     * 
     */
    @Export(name="authorization", refs={VmwareAdminClusterAuthorization.class}, tree="[0]")
    private Output</* @Nullable */ VmwareAdminClusterAuthorization> authorization;

    /**
     * @return The VMware admin cluster authorization configuration.
     * Structure is documented below.
     * 
     */
    public Output<Optional<VmwareAdminClusterAuthorization>> authorization() {
        return Codegen.optional(this.authorization);
    }
    /**
     * Configuration for auto repairing.
     * Structure is documented below.
     * 
     */
    @Export(name="autoRepairConfig", refs={VmwareAdminClusterAutoRepairConfig.class}, tree="[0]")
    private Output<VmwareAdminClusterAutoRepairConfig> autoRepairConfig;

    /**
     * @return Configuration for auto repairing.
     * Structure is documented below.
     * 
     */
    public Output<VmwareAdminClusterAutoRepairConfig> autoRepairConfig() {
        return this.autoRepairConfig;
    }
    /**
     * The bootstrap cluster this VMware admin cluster belongs to.
     * 
     */
    @Export(name="bootstrapClusterMembership", refs={String.class}, tree="[0]")
    private Output<String> bootstrapClusterMembership;

    /**
     * @return The bootstrap cluster this VMware admin cluster belongs to.
     * 
     */
    public Output<String> bootstrapClusterMembership() {
        return this.bootstrapClusterMembership;
    }
    /**
     * The VMware admin cluster control plane node configuration.
     * Structure is documented below.
     * 
     */
    @Export(name="controlPlaneNode", refs={VmwareAdminClusterControlPlaneNode.class}, tree="[0]")
    private Output</* @Nullable */ VmwareAdminClusterControlPlaneNode> controlPlaneNode;

    /**
     * @return The VMware admin cluster control plane node configuration.
     * Structure is documented below.
     * 
     */
    public Output<Optional<VmwareAdminClusterControlPlaneNode>> controlPlaneNode() {
        return Codegen.optional(this.controlPlaneNode);
    }
    /**
     * The time the cluster was created, in RFC3339 text format.
     * 
     */
    @Export(name="createTime", refs={String.class}, tree="[0]")
    private Output<String> createTime;

    /**
     * @return The time the cluster was created, in RFC3339 text format.
     * 
     */
    public Output<String> createTime() {
        return this.createTime;
    }
    /**
     * A human readable description of this VMware admin cluster.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output<String> description;

    /**
     * @return A human readable description of this VMware admin cluster.
     * 
     */
    public Output<String> description() {
        return this.description;
    }
    @Export(name="effectiveAnnotations", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> effectiveAnnotations;

    public Output<Map<String,String>> effectiveAnnotations() {
        return this.effectiveAnnotations;
    }
    /**
     * If set, the advanced cluster feature is enabled.
     * 
     */
    @Export(name="enableAdvancedCluster", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> enableAdvancedCluster;

    /**
     * @return If set, the advanced cluster feature is enabled.
     * 
     */
    public Output<Boolean> enableAdvancedCluster() {
        return this.enableAdvancedCluster;
    }
    /**
     * The DNS name of VMware admin cluster&#39;s API server.
     * 
     */
    @Export(name="endpoint", refs={String.class}, tree="[0]")
    private Output<String> endpoint;

    /**
     * @return The DNS name of VMware admin cluster&#39;s API server.
     * 
     */
    public Output<String> endpoint() {
        return this.endpoint;
    }
    /**
     * This checksum is computed by the server based on the value of other
     * fields, and may be sent on update and delete requests to ensure the
     * client has an up-to-date value before proceeding.
     * Allows clients to perform consistent read-modify-writes
     * through optimistic concurrency control.
     * 
     */
    @Export(name="etag", refs={String.class}, tree="[0]")
    private Output<String> etag;

    /**
     * @return This checksum is computed by the server based on the value of other
     * fields, and may be sent on update and delete requests to ensure the
     * client has an up-to-date value before proceeding.
     * Allows clients to perform consistent read-modify-writes
     * through optimistic concurrency control.
     * 
     */
    public Output<String> etag() {
        return this.etag;
    }
    /**
     * Fleet configuration for the cluster.
     * Structure is documented below.
     * 
     */
    @Export(name="fleets", refs={List.class,VmwareAdminClusterFleet.class}, tree="[0,1]")
    private Output<List<VmwareAdminClusterFleet>> fleets;

    /**
     * @return Fleet configuration for the cluster.
     * Structure is documented below.
     * 
     */
    public Output<List<VmwareAdminClusterFleet>> fleets() {
        return this.fleets;
    }
    /**
     * The OS image type for the VMware admin cluster.
     * 
     */
    @Export(name="imageType", refs={String.class}, tree="[0]")
    private Output<String> imageType;

    /**
     * @return The OS image type for the VMware admin cluster.
     * 
     */
    public Output<String> imageType() {
        return this.imageType;
    }
    /**
     * Specifies the load balancer configuration for VMware admin cluster.
     * Structure is documented below.
     * 
     */
    @Export(name="loadBalancer", refs={VmwareAdminClusterLoadBalancer.class}, tree="[0]")
    private Output</* @Nullable */ VmwareAdminClusterLoadBalancer> loadBalancer;

    /**
     * @return Specifies the load balancer configuration for VMware admin cluster.
     * Structure is documented below.
     * 
     */
    public Output<Optional<VmwareAdminClusterLoadBalancer>> loadBalancer() {
        return Codegen.optional(this.loadBalancer);
    }
    /**
     * The object name of the VMwareAdminCluster custom resource on the
     * associated admin cluster. This field is used to support conflicting
     * names when enrolling existing clusters to the API. When used as a part of
     * cluster enrollment, this field will differ from the ID in the resource
     * name. For new clusters, this field will match the user provided cluster ID
     * and be visible in the last component of the resource name. It is not
     * modifiable.
     * All users should use this name to access their cluster using gkectl or
     * kubectl and should expect to see the local name when viewing admin
     * cluster controller logs.
     * 
     */
    @Export(name="localName", refs={String.class}, tree="[0]")
    private Output<String> localName;

    /**
     * @return The object name of the VMwareAdminCluster custom resource on the
     * associated admin cluster. This field is used to support conflicting
     * names when enrolling existing clusters to the API. When used as a part of
     * cluster enrollment, this field will differ from the ID in the resource
     * name. For new clusters, this field will match the user provided cluster ID
     * and be visible in the last component of the resource name. It is not
     * modifiable.
     * All users should use this name to access their cluster using gkectl or
     * kubectl and should expect to see the local name when viewing admin
     * cluster controller logs.
     * 
     */
    public Output<String> localName() {
        return this.localName;
    }
    /**
     * The location of the resource.
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output<String> location;

    /**
     * @return The location of the resource.
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * The VMware admin cluster resource name.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The VMware admin cluster resource name.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The VMware admin cluster network configuration.
     * Structure is documented below.
     * 
     */
    @Export(name="networkConfig", refs={VmwareAdminClusterNetworkConfig.class}, tree="[0]")
    private Output<VmwareAdminClusterNetworkConfig> networkConfig;

    /**
     * @return The VMware admin cluster network configuration.
     * Structure is documented below.
     * 
     */
    public Output<VmwareAdminClusterNetworkConfig> networkConfig() {
        return this.networkConfig;
    }
    /**
     * The Anthos clusters on the VMware version for the admin cluster.
     * 
     */
    @Export(name="onPremVersion", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> onPremVersion;

    /**
     * @return The Anthos clusters on the VMware version for the admin cluster.
     * 
     */
    public Output<Optional<String>> onPremVersion() {
        return Codegen.optional(this.onPremVersion);
    }
    /**
     * The VMware platform configuration.
     * Structure is documented below.
     * 
     */
    @Export(name="platformConfig", refs={VmwareAdminClusterPlatformConfig.class}, tree="[0]")
    private Output</* @Nullable */ VmwareAdminClusterPlatformConfig> platformConfig;

    /**
     * @return The VMware platform configuration.
     * Structure is documented below.
     * 
     */
    public Output<Optional<VmwareAdminClusterPlatformConfig>> platformConfig() {
        return Codegen.optional(this.platformConfig);
    }
    /**
     * Configuration for private registry.
     * Structure is documented below.
     * 
     */
    @Export(name="privateRegistryConfig", refs={VmwareAdminClusterPrivateRegistryConfig.class}, tree="[0]")
    private Output</* @Nullable */ VmwareAdminClusterPrivateRegistryConfig> privateRegistryConfig;

    /**
     * @return Configuration for private registry.
     * Structure is documented below.
     * 
     */
    public Output<Optional<VmwareAdminClusterPrivateRegistryConfig>> privateRegistryConfig() {
        return Codegen.optional(this.privateRegistryConfig);
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * Configuration for proxy.
     * Structure is documented below.
     * 
     */
    @Export(name="proxy", refs={VmwareAdminClusterProxy.class}, tree="[0]")
    private Output</* @Nullable */ VmwareAdminClusterProxy> proxy;

    /**
     * @return Configuration for proxy.
     * Structure is documented below.
     * 
     */
    public Output<Optional<VmwareAdminClusterProxy>> proxy() {
        return Codegen.optional(this.proxy);
    }
    /**
     * If set, there are currently changes in flight to the VMware admin cluster.
     * 
     */
    @Export(name="reconciling", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> reconciling;

    /**
     * @return If set, there are currently changes in flight to the VMware admin cluster.
     * 
     */
    public Output<Boolean> reconciling() {
        return this.reconciling;
    }
    /**
     * (Output)
     * The lifecycle state of the condition.
     * 
     */
    @Export(name="state", refs={String.class}, tree="[0]")
    private Output<String> state;

    /**
     * @return (Output)
     * The lifecycle state of the condition.
     * 
     */
    public Output<String> state() {
        return this.state;
    }
    /**
     * ResourceStatus representing detailed cluster state.
     * Structure is documented below.
     * 
     */
    @Export(name="statuses", refs={List.class,VmwareAdminClusterStatus.class}, tree="[0,1]")
    private Output<List<VmwareAdminClusterStatus>> statuses;

    /**
     * @return ResourceStatus representing detailed cluster state.
     * Structure is documented below.
     * 
     */
    public Output<List<VmwareAdminClusterStatus>> statuses() {
        return this.statuses;
    }
    /**
     * The unique identifier of the VMware Admin Cluster.
     * 
     */
    @Export(name="uid", refs={String.class}, tree="[0]")
    private Output<String> uid;

    /**
     * @return The unique identifier of the VMware Admin Cluster.
     * 
     */
    public Output<String> uid() {
        return this.uid;
    }
    /**
     * The time the cluster was last updated, in RFC3339 text format.
     * 
     */
    @Export(name="updateTime", refs={String.class}, tree="[0]")
    private Output<String> updateTime;

    /**
     * @return The time the cluster was last updated, in RFC3339 text format.
     * 
     */
    public Output<String> updateTime() {
        return this.updateTime;
    }
    /**
     * Specifies vCenter config for the admin cluster.
     * Structure is documented below.
     * 
     */
    @Export(name="vcenter", refs={VmwareAdminClusterVcenter.class}, tree="[0]")
    private Output</* @Nullable */ VmwareAdminClusterVcenter> vcenter;

    /**
     * @return Specifies vCenter config for the admin cluster.
     * Structure is documented below.
     * 
     */
    public Output<Optional<VmwareAdminClusterVcenter>> vcenter() {
        return Codegen.optional(this.vcenter);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public VmwareAdminCluster(java.lang.String name) {
        this(name, VmwareAdminClusterArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public VmwareAdminCluster(java.lang.String name, VmwareAdminClusterArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public VmwareAdminCluster(java.lang.String name, VmwareAdminClusterArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:gkeonprem/vmwareAdminCluster:VmwareAdminCluster", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private VmwareAdminCluster(java.lang.String name, Output<java.lang.String> id, @Nullable VmwareAdminClusterState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:gkeonprem/vmwareAdminCluster:VmwareAdminCluster", name, state, makeResourceOptions(options, id), false);
    }

    private static VmwareAdminClusterArgs makeArgs(VmwareAdminClusterArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? VmwareAdminClusterArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static VmwareAdminCluster get(java.lang.String name, Output<java.lang.String> id, @Nullable VmwareAdminClusterState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new VmwareAdminCluster(name, id, state, options);
    }
}
