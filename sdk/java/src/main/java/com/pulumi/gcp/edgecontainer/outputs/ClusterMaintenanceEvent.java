// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.edgecontainer.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ClusterMaintenanceEvent {
    /**
     * @return (Output)
     * The time when the maintenance event request was created.
     * 
     */
    private @Nullable String createTime;
    /**
     * @return The time that the window ends. The end time must take place after the
     * start time.
     * 
     */
    private @Nullable String endTime;
    /**
     * @return (Output)
     * The operation for running the maintenance event. Specified in the format
     * projects/*{@literal /}locations/*{@literal /}operations/*. If the maintenance event is split
     * into multiple operations (e.g. due to maintenance windows), the latest
     * one is recorded.
     * 
     */
    private @Nullable String operation;
    /**
     * @return (Output)
     * The schedule of the maintenance event.
     * 
     */
    private @Nullable String schedule;
    /**
     * @return The time that the window first starts.
     * 
     */
    private @Nullable String startTime;
    /**
     * @return (Output)
     * Indicates the maintenance event state.
     * 
     */
    private @Nullable String state;
    /**
     * @return The target cluster version. For example: &#34;1.5.0&#34;.
     * 
     */
    private @Nullable String targetVersion;
    /**
     * @return (Output)
     * Indicates the maintenance event type.
     * 
     */
    private @Nullable String type;
    /**
     * @return (Output)
     * The time when the maintenance event message was updated.
     * 
     */
    private @Nullable String updateTime;
    /**
     * @return (Output)
     * UUID of the maintenance event.
     * 
     */
    private @Nullable String uuid;

    private ClusterMaintenanceEvent() {}
    /**
     * @return (Output)
     * The time when the maintenance event request was created.
     * 
     */
    public Optional<String> createTime() {
        return Optional.ofNullable(this.createTime);
    }
    /**
     * @return The time that the window ends. The end time must take place after the
     * start time.
     * 
     */
    public Optional<String> endTime() {
        return Optional.ofNullable(this.endTime);
    }
    /**
     * @return (Output)
     * The operation for running the maintenance event. Specified in the format
     * projects/*{@literal /}locations/*{@literal /}operations/*. If the maintenance event is split
     * into multiple operations (e.g. due to maintenance windows), the latest
     * one is recorded.
     * 
     */
    public Optional<String> operation() {
        return Optional.ofNullable(this.operation);
    }
    /**
     * @return (Output)
     * The schedule of the maintenance event.
     * 
     */
    public Optional<String> schedule() {
        return Optional.ofNullable(this.schedule);
    }
    /**
     * @return The time that the window first starts.
     * 
     */
    public Optional<String> startTime() {
        return Optional.ofNullable(this.startTime);
    }
    /**
     * @return (Output)
     * Indicates the maintenance event state.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    /**
     * @return The target cluster version. For example: &#34;1.5.0&#34;.
     * 
     */
    public Optional<String> targetVersion() {
        return Optional.ofNullable(this.targetVersion);
    }
    /**
     * @return (Output)
     * Indicates the maintenance event type.
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }
    /**
     * @return (Output)
     * The time when the maintenance event message was updated.
     * 
     */
    public Optional<String> updateTime() {
        return Optional.ofNullable(this.updateTime);
    }
    /**
     * @return (Output)
     * UUID of the maintenance event.
     * 
     */
    public Optional<String> uuid() {
        return Optional.ofNullable(this.uuid);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ClusterMaintenanceEvent defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String createTime;
        private @Nullable String endTime;
        private @Nullable String operation;
        private @Nullable String schedule;
        private @Nullable String startTime;
        private @Nullable String state;
        private @Nullable String targetVersion;
        private @Nullable String type;
        private @Nullable String updateTime;
        private @Nullable String uuid;
        public Builder() {}
        public Builder(ClusterMaintenanceEvent defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createTime = defaults.createTime;
    	      this.endTime = defaults.endTime;
    	      this.operation = defaults.operation;
    	      this.schedule = defaults.schedule;
    	      this.startTime = defaults.startTime;
    	      this.state = defaults.state;
    	      this.targetVersion = defaults.targetVersion;
    	      this.type = defaults.type;
    	      this.updateTime = defaults.updateTime;
    	      this.uuid = defaults.uuid;
        }

        @CustomType.Setter
        public Builder createTime(@Nullable String createTime) {
            this.createTime = createTime;
            return this;
        }
        @CustomType.Setter
        public Builder endTime(@Nullable String endTime) {
            this.endTime = endTime;
            return this;
        }
        @CustomType.Setter
        public Builder operation(@Nullable String operation) {
            this.operation = operation;
            return this;
        }
        @CustomType.Setter
        public Builder schedule(@Nullable String schedule) {
            this.schedule = schedule;
            return this;
        }
        @CustomType.Setter
        public Builder startTime(@Nullable String startTime) {
            this.startTime = startTime;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder targetVersion(@Nullable String targetVersion) {
            this.targetVersion = targetVersion;
            return this;
        }
        @CustomType.Setter
        public Builder type(@Nullable String type) {
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder updateTime(@Nullable String updateTime) {
            this.updateTime = updateTime;
            return this;
        }
        @CustomType.Setter
        public Builder uuid(@Nullable String uuid) {
            this.uuid = uuid;
            return this;
        }
        public ClusterMaintenanceEvent build() {
            final var _resultValue = new ClusterMaintenanceEvent();
            _resultValue.createTime = createTime;
            _resultValue.endTime = endTime;
            _resultValue.operation = operation;
            _resultValue.schedule = schedule;
            _resultValue.startTime = startTime;
            _resultValue.state = state;
            _resultValue.targetVersion = targetVersion;
            _resultValue.type = type;
            _resultValue.updateTime = updateTime;
            _resultValue.uuid = uuid;
            return _resultValue;
        }
    }
}
