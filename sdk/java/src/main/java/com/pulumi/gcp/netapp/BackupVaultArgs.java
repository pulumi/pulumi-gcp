// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.netapp;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.netapp.inputs.BackupVaultBackupRetentionPolicyArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BackupVaultArgs extends com.pulumi.resources.ResourceArgs {

    public static final BackupVaultArgs Empty = new BackupVaultArgs();

    /**
     * Region in which backup is stored.
     * 
     */
    @Import(name="backupRegion")
    private @Nullable Output<String> backupRegion;

    /**
     * @return Region in which backup is stored.
     * 
     */
    public Optional<Output<String>> backupRegion() {
        return Optional.ofNullable(this.backupRegion);
    }

    /**
     * Backup retention policy defining the retention of the backups.
     * Structure is documented below.
     * 
     */
    @Import(name="backupRetentionPolicy")
    private @Nullable Output<BackupVaultBackupRetentionPolicyArgs> backupRetentionPolicy;

    /**
     * @return Backup retention policy defining the retention of the backups.
     * Structure is documented below.
     * 
     */
    public Optional<Output<BackupVaultBackupRetentionPolicyArgs>> backupRetentionPolicy() {
        return Optional.ofNullable(this.backupRetentionPolicy);
    }

    /**
     * Type of the backup vault to be created. Default is IN_REGION.
     * Possible values are: `BACKUP_VAULT_TYPE_UNSPECIFIED`, `IN_REGION`, `CROSS_REGION`.
     * 
     */
    @Import(name="backupVaultType")
    private @Nullable Output<String> backupVaultType;

    /**
     * @return Type of the backup vault to be created. Default is IN_REGION.
     * Possible values are: `BACKUP_VAULT_TYPE_UNSPECIFIED`, `IN_REGION`, `CROSS_REGION`.
     * 
     */
    public Optional<Output<String>> backupVaultType() {
        return Optional.ofNullable(this.backupVaultType);
    }

    /**
     * An optional description of this resource.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return An optional description of this resource.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Labels as key value pairs. Example: `{ &#34;owner&#34;: &#34;Bob&#34;, &#34;department&#34;: &#34;finance&#34;, &#34;purpose&#34;: &#34;testing&#34; }`.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Labels as key value pairs. Example: `{ &#34;owner&#34;: &#34;Bob&#34;, &#34;department&#34;: &#34;finance&#34;, &#34;purpose&#34;: &#34;testing&#34; }`.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * Location (region) of the backup vault.
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return Location (region) of the backup vault.
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * The resource name of the backup vault. Needs to be unique per location.
     * 
     * ***
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The resource name of the backup vault. Needs to be unique per location.
     * 
     * ***
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    private BackupVaultArgs() {}

    private BackupVaultArgs(BackupVaultArgs $) {
        this.backupRegion = $.backupRegion;
        this.backupRetentionPolicy = $.backupRetentionPolicy;
        this.backupVaultType = $.backupVaultType;
        this.description = $.description;
        this.labels = $.labels;
        this.location = $.location;
        this.name = $.name;
        this.project = $.project;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BackupVaultArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BackupVaultArgs $;

        public Builder() {
            $ = new BackupVaultArgs();
        }

        public Builder(BackupVaultArgs defaults) {
            $ = new BackupVaultArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param backupRegion Region in which backup is stored.
         * 
         * @return builder
         * 
         */
        public Builder backupRegion(@Nullable Output<String> backupRegion) {
            $.backupRegion = backupRegion;
            return this;
        }

        /**
         * @param backupRegion Region in which backup is stored.
         * 
         * @return builder
         * 
         */
        public Builder backupRegion(String backupRegion) {
            return backupRegion(Output.of(backupRegion));
        }

        /**
         * @param backupRetentionPolicy Backup retention policy defining the retention of the backups.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder backupRetentionPolicy(@Nullable Output<BackupVaultBackupRetentionPolicyArgs> backupRetentionPolicy) {
            $.backupRetentionPolicy = backupRetentionPolicy;
            return this;
        }

        /**
         * @param backupRetentionPolicy Backup retention policy defining the retention of the backups.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder backupRetentionPolicy(BackupVaultBackupRetentionPolicyArgs backupRetentionPolicy) {
            return backupRetentionPolicy(Output.of(backupRetentionPolicy));
        }

        /**
         * @param backupVaultType Type of the backup vault to be created. Default is IN_REGION.
         * Possible values are: `BACKUP_VAULT_TYPE_UNSPECIFIED`, `IN_REGION`, `CROSS_REGION`.
         * 
         * @return builder
         * 
         */
        public Builder backupVaultType(@Nullable Output<String> backupVaultType) {
            $.backupVaultType = backupVaultType;
            return this;
        }

        /**
         * @param backupVaultType Type of the backup vault to be created. Default is IN_REGION.
         * Possible values are: `BACKUP_VAULT_TYPE_UNSPECIFIED`, `IN_REGION`, `CROSS_REGION`.
         * 
         * @return builder
         * 
         */
        public Builder backupVaultType(String backupVaultType) {
            return backupVaultType(Output.of(backupVaultType));
        }

        /**
         * @param description An optional description of this resource.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description An optional description of this resource.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param labels Labels as key value pairs. Example: `{ &#34;owner&#34;: &#34;Bob&#34;, &#34;department&#34;: &#34;finance&#34;, &#34;purpose&#34;: &#34;testing&#34; }`.
         * 
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Labels as key value pairs. Example: `{ &#34;owner&#34;: &#34;Bob&#34;, &#34;department&#34;: &#34;finance&#34;, &#34;purpose&#34;: &#34;testing&#34; }`.
         * 
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param location Location (region) of the backup vault.
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Location (region) of the backup vault.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name The resource name of the backup vault. Needs to be unique per location.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The resource name of the backup vault. Needs to be unique per location.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        public BackupVaultArgs build() {
            if ($.location == null) {
                throw new MissingRequiredPropertyException("BackupVaultArgs", "location");
            }
            return $;
        }
    }

}
