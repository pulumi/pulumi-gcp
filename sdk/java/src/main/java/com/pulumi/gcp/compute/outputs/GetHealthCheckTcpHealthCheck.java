// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetHealthCheckTcpHealthCheck {
    /**
     * @return The TCP port number for the TCP health check request.
     * The default value is 443.
     * 
     */
    private Integer port;
    /**
     * @return Port name as defined in InstanceGroup#NamedPort#name. If both port and
     * port_name are defined, port takes precedence.
     * 
     */
    private String portName;
    /**
     * @return Specifies how port is selected for health checking, can be one of the
     * following values:
     * 
     *   * &#39;USE_FIXED_PORT&#39;: The port number in &#39;port&#39; is used for health checking.
     * 
     *   * &#39;USE_NAMED_PORT&#39;: The &#39;portName&#39; is used for health checking.
     * 
     *   * &#39;USE_SERVING_PORT&#39;: For NetworkEndpointGroup, the port specified for each
     *   network endpoint is used for health checking. For other backends, the
     *   port or named port specified in the Backend Service is used for health
     *   checking.
     * 
     * If not specified, TCP health check follows behavior specified in &#39;port&#39; and
     * &#39;portName&#39; fields. Possible values: [&#34;USE_FIXED_PORT&#34;, &#34;USE_NAMED_PORT&#34;, &#34;USE_SERVING_PORT&#34;]
     * 
     */
    private String portSpecification;
    /**
     * @return Specifies the type of proxy header to append before sending data to the
     * backend. Default value: &#34;NONE&#34; Possible values: [&#34;NONE&#34;, &#34;PROXY_V1&#34;]
     * 
     */
    private String proxyHeader;
    /**
     * @return The application data to send once the TCP connection has been
     * established (default value is empty). If both request and response are
     * empty, the connection establishment alone will indicate health. The request
     * data can only be ASCII.
     * 
     */
    private String request;
    /**
     * @return The bytes to match against the beginning of the response data. If left empty
     * (the default value), any response will indicate health. The response data
     * can only be ASCII.
     * 
     */
    private String response;

    private GetHealthCheckTcpHealthCheck() {}
    /**
     * @return The TCP port number for the TCP health check request.
     * The default value is 443.
     * 
     */
    public Integer port() {
        return this.port;
    }
    /**
     * @return Port name as defined in InstanceGroup#NamedPort#name. If both port and
     * port_name are defined, port takes precedence.
     * 
     */
    public String portName() {
        return this.portName;
    }
    /**
     * @return Specifies how port is selected for health checking, can be one of the
     * following values:
     * 
     *   * &#39;USE_FIXED_PORT&#39;: The port number in &#39;port&#39; is used for health checking.
     * 
     *   * &#39;USE_NAMED_PORT&#39;: The &#39;portName&#39; is used for health checking.
     * 
     *   * &#39;USE_SERVING_PORT&#39;: For NetworkEndpointGroup, the port specified for each
     *   network endpoint is used for health checking. For other backends, the
     *   port or named port specified in the Backend Service is used for health
     *   checking.
     * 
     * If not specified, TCP health check follows behavior specified in &#39;port&#39; and
     * &#39;portName&#39; fields. Possible values: [&#34;USE_FIXED_PORT&#34;, &#34;USE_NAMED_PORT&#34;, &#34;USE_SERVING_PORT&#34;]
     * 
     */
    public String portSpecification() {
        return this.portSpecification;
    }
    /**
     * @return Specifies the type of proxy header to append before sending data to the
     * backend. Default value: &#34;NONE&#34; Possible values: [&#34;NONE&#34;, &#34;PROXY_V1&#34;]
     * 
     */
    public String proxyHeader() {
        return this.proxyHeader;
    }
    /**
     * @return The application data to send once the TCP connection has been
     * established (default value is empty). If both request and response are
     * empty, the connection establishment alone will indicate health. The request
     * data can only be ASCII.
     * 
     */
    public String request() {
        return this.request;
    }
    /**
     * @return The bytes to match against the beginning of the response data. If left empty
     * (the default value), any response will indicate health. The response data
     * can only be ASCII.
     * 
     */
    public String response() {
        return this.response;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetHealthCheckTcpHealthCheck defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer port;
        private String portName;
        private String portSpecification;
        private String proxyHeader;
        private String request;
        private String response;
        public Builder() {}
        public Builder(GetHealthCheckTcpHealthCheck defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.port = defaults.port;
    	      this.portName = defaults.portName;
    	      this.portSpecification = defaults.portSpecification;
    	      this.proxyHeader = defaults.proxyHeader;
    	      this.request = defaults.request;
    	      this.response = defaults.response;
        }

        @CustomType.Setter
        public Builder port(Integer port) {
            if (port == null) {
              throw new MissingRequiredPropertyException("GetHealthCheckTcpHealthCheck", "port");
            }
            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder portName(String portName) {
            if (portName == null) {
              throw new MissingRequiredPropertyException("GetHealthCheckTcpHealthCheck", "portName");
            }
            this.portName = portName;
            return this;
        }
        @CustomType.Setter
        public Builder portSpecification(String portSpecification) {
            if (portSpecification == null) {
              throw new MissingRequiredPropertyException("GetHealthCheckTcpHealthCheck", "portSpecification");
            }
            this.portSpecification = portSpecification;
            return this;
        }
        @CustomType.Setter
        public Builder proxyHeader(String proxyHeader) {
            if (proxyHeader == null) {
              throw new MissingRequiredPropertyException("GetHealthCheckTcpHealthCheck", "proxyHeader");
            }
            this.proxyHeader = proxyHeader;
            return this;
        }
        @CustomType.Setter
        public Builder request(String request) {
            if (request == null) {
              throw new MissingRequiredPropertyException("GetHealthCheckTcpHealthCheck", "request");
            }
            this.request = request;
            return this;
        }
        @CustomType.Setter
        public Builder response(String response) {
            if (response == null) {
              throw new MissingRequiredPropertyException("GetHealthCheckTcpHealthCheck", "response");
            }
            this.response = response;
            return this;
        }
        public GetHealthCheckTcpHealthCheck build() {
            final var _resultValue = new GetHealthCheckTcpHealthCheck();
            _resultValue.port = port;
            _resultValue.portName = portName;
            _resultValue.portSpecification = portSpecification;
            _resultValue.proxyHeader = proxyHeader;
            _resultValue.request = request;
            _resultValue.response = response;
            return _resultValue;
        }
    }
}
