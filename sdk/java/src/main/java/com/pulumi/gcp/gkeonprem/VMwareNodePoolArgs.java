// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.gkeonprem;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.gkeonprem.inputs.VMwareNodePoolConfigArgs;
import com.pulumi.gcp.gkeonprem.inputs.VMwareNodePoolNodePoolAutoscalingArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VMwareNodePoolArgs extends com.pulumi.resources.ResourceArgs {

    public static final VMwareNodePoolArgs Empty = new VMwareNodePoolArgs();

    /**
     * Annotations on the node Pool.
     * This field has the same restrictions as Kubernetes annotations.
     * The total size of all keys and values combined is limited to 256k.
     * Key can have 2 segments: prefix (optional) and name (required),
     * separated by a slash (/).
     * Prefix must be a DNS subdomain.
     * Name must be 63 characters or less, begin and end with alphanumerics,
     * with dashes (-), underscores (_), dots (.), and alphanumerics between.
     * 
     */
    @Import(name="annotations")
    private @Nullable Output<Map<String,String>> annotations;

    /**
     * @return Annotations on the node Pool.
     * This field has the same restrictions as Kubernetes annotations.
     * The total size of all keys and values combined is limited to 256k.
     * Key can have 2 segments: prefix (optional) and name (required),
     * separated by a slash (/).
     * Prefix must be a DNS subdomain.
     * Name must be 63 characters or less, begin and end with alphanumerics,
     * with dashes (-), underscores (_), dots (.), and alphanumerics between.
     * 
     */
    public Optional<Output<Map<String,String>>> annotations() {
        return Optional.ofNullable(this.annotations);
    }

    /**
     * The node configuration of the node pool.
     * Structure is documented below.
     * 
     */
    @Import(name="config", required=true)
    private Output<VMwareNodePoolConfigArgs> config;

    /**
     * @return The node configuration of the node pool.
     * Structure is documented below.
     * 
     */
    public Output<VMwareNodePoolConfigArgs> config() {
        return this.config;
    }

    /**
     * The display name for the node pool.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return The display name for the node pool.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * The location of the resource.
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return The location of the resource.
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * The vmware node pool name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The vmware node pool name.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Node Pool autoscaling config for the node pool.
     * Structure is documented below.
     * 
     */
    @Import(name="nodePoolAutoscaling")
    private @Nullable Output<VMwareNodePoolNodePoolAutoscalingArgs> nodePoolAutoscaling;

    /**
     * @return Node Pool autoscaling config for the node pool.
     * Structure is documented below.
     * 
     */
    public Optional<Output<VMwareNodePoolNodePoolAutoscalingArgs>> nodePoolAutoscaling() {
        return Optional.ofNullable(this.nodePoolAutoscaling);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The cluster this node pool belongs to.
     * 
     */
    @Import(name="vmwareCluster", required=true)
    private Output<String> vmwareCluster;

    /**
     * @return The cluster this node pool belongs to.
     * 
     */
    public Output<String> vmwareCluster() {
        return this.vmwareCluster;
    }

    private VMwareNodePoolArgs() {}

    private VMwareNodePoolArgs(VMwareNodePoolArgs $) {
        this.annotations = $.annotations;
        this.config = $.config;
        this.displayName = $.displayName;
        this.location = $.location;
        this.name = $.name;
        this.nodePoolAutoscaling = $.nodePoolAutoscaling;
        this.project = $.project;
        this.vmwareCluster = $.vmwareCluster;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VMwareNodePoolArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VMwareNodePoolArgs $;

        public Builder() {
            $ = new VMwareNodePoolArgs();
        }

        public Builder(VMwareNodePoolArgs defaults) {
            $ = new VMwareNodePoolArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param annotations Annotations on the node Pool.
         * This field has the same restrictions as Kubernetes annotations.
         * The total size of all keys and values combined is limited to 256k.
         * Key can have 2 segments: prefix (optional) and name (required),
         * separated by a slash (/).
         * Prefix must be a DNS subdomain.
         * Name must be 63 characters or less, begin and end with alphanumerics,
         * with dashes (-), underscores (_), dots (.), and alphanumerics between.
         * 
         * @return builder
         * 
         */
        public Builder annotations(@Nullable Output<Map<String,String>> annotations) {
            $.annotations = annotations;
            return this;
        }

        /**
         * @param annotations Annotations on the node Pool.
         * This field has the same restrictions as Kubernetes annotations.
         * The total size of all keys and values combined is limited to 256k.
         * Key can have 2 segments: prefix (optional) and name (required),
         * separated by a slash (/).
         * Prefix must be a DNS subdomain.
         * Name must be 63 characters or less, begin and end with alphanumerics,
         * with dashes (-), underscores (_), dots (.), and alphanumerics between.
         * 
         * @return builder
         * 
         */
        public Builder annotations(Map<String,String> annotations) {
            return annotations(Output.of(annotations));
        }

        /**
         * @param config The node configuration of the node pool.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder config(Output<VMwareNodePoolConfigArgs> config) {
            $.config = config;
            return this;
        }

        /**
         * @param config The node configuration of the node pool.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder config(VMwareNodePoolConfigArgs config) {
            return config(Output.of(config));
        }

        /**
         * @param displayName The display name for the node pool.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The display name for the node pool.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param location The location of the resource.
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location of the resource.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name The vmware node pool name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The vmware node pool name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param nodePoolAutoscaling Node Pool autoscaling config for the node pool.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder nodePoolAutoscaling(@Nullable Output<VMwareNodePoolNodePoolAutoscalingArgs> nodePoolAutoscaling) {
            $.nodePoolAutoscaling = nodePoolAutoscaling;
            return this;
        }

        /**
         * @param nodePoolAutoscaling Node Pool autoscaling config for the node pool.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder nodePoolAutoscaling(VMwareNodePoolNodePoolAutoscalingArgs nodePoolAutoscaling) {
            return nodePoolAutoscaling(Output.of(nodePoolAutoscaling));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param vmwareCluster The cluster this node pool belongs to.
         * 
         * @return builder
         * 
         */
        public Builder vmwareCluster(Output<String> vmwareCluster) {
            $.vmwareCluster = vmwareCluster;
            return this;
        }

        /**
         * @param vmwareCluster The cluster this node pool belongs to.
         * 
         * @return builder
         * 
         */
        public Builder vmwareCluster(String vmwareCluster) {
            return vmwareCluster(Output.of(vmwareCluster));
        }

        public VMwareNodePoolArgs build() {
            $.config = Objects.requireNonNull($.config, "expected parameter 'config' to be non-null");
            $.location = Objects.requireNonNull($.location, "expected parameter 'location' to be non-null");
            $.vmwareCluster = Objects.requireNonNull($.vmwareCluster, "expected parameter 'vmwareCluster' to be non-null");
            return $;
        }
    }

}
