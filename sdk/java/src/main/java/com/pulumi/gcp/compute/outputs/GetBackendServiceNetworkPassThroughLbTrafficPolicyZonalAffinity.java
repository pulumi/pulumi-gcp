// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetBackendServiceNetworkPassThroughLbTrafficPolicyZonalAffinity {
    /**
     * @return This field indicates whether zonal affinity is enabled or not. Default value: &#34;ZONAL_AFFINITY_DISABLED&#34; Possible values: [&#34;ZONAL_AFFINITY_DISABLED&#34;, &#34;ZONAL_AFFINITY_SPILL_CROSS_ZONE&#34;, &#34;ZONAL_AFFINITY_STAY_WITHIN_ZONE&#34;]
     * 
     */
    private String spillover;
    /**
     * @return The value of the field must be in [0, 1]. When the ratio of the count of healthy backend endpoints in a zone
     * to the count of backend endpoints in that same zone is equal to or above this threshold, the load balancer
     * distributes new connections to all healthy endpoints in the local zone only. When the ratio of the count
     * of healthy backend endpoints in a zone to the count of backend endpoints in that same zone is below this
     * threshold, the load balancer distributes all new connections to all healthy endpoints across all zones.
     * 
     */
    private Double spilloverRatio;

    private GetBackendServiceNetworkPassThroughLbTrafficPolicyZonalAffinity() {}
    /**
     * @return This field indicates whether zonal affinity is enabled or not. Default value: &#34;ZONAL_AFFINITY_DISABLED&#34; Possible values: [&#34;ZONAL_AFFINITY_DISABLED&#34;, &#34;ZONAL_AFFINITY_SPILL_CROSS_ZONE&#34;, &#34;ZONAL_AFFINITY_STAY_WITHIN_ZONE&#34;]
     * 
     */
    public String spillover() {
        return this.spillover;
    }
    /**
     * @return The value of the field must be in [0, 1]. When the ratio of the count of healthy backend endpoints in a zone
     * to the count of backend endpoints in that same zone is equal to or above this threshold, the load balancer
     * distributes new connections to all healthy endpoints in the local zone only. When the ratio of the count
     * of healthy backend endpoints in a zone to the count of backend endpoints in that same zone is below this
     * threshold, the load balancer distributes all new connections to all healthy endpoints across all zones.
     * 
     */
    public Double spilloverRatio() {
        return this.spilloverRatio;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBackendServiceNetworkPassThroughLbTrafficPolicyZonalAffinity defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String spillover;
        private Double spilloverRatio;
        public Builder() {}
        public Builder(GetBackendServiceNetworkPassThroughLbTrafficPolicyZonalAffinity defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.spillover = defaults.spillover;
    	      this.spilloverRatio = defaults.spilloverRatio;
        }

        @CustomType.Setter
        public Builder spillover(String spillover) {
            if (spillover == null) {
              throw new MissingRequiredPropertyException("GetBackendServiceNetworkPassThroughLbTrafficPolicyZonalAffinity", "spillover");
            }
            this.spillover = spillover;
            return this;
        }
        @CustomType.Setter
        public Builder spilloverRatio(Double spilloverRatio) {
            if (spilloverRatio == null) {
              throw new MissingRequiredPropertyException("GetBackendServiceNetworkPassThroughLbTrafficPolicyZonalAffinity", "spilloverRatio");
            }
            this.spilloverRatio = spilloverRatio;
            return this;
        }
        public GetBackendServiceNetworkPassThroughLbTrafficPolicyZonalAffinity build() {
            final var _resultValue = new GetBackendServiceNetworkPassThroughLbTrafficPolicyZonalAffinity();
            _resultValue.spillover = spillover;
            _resultValue.spilloverRatio = spilloverRatio;
            return _resultValue;
        }
    }
}
