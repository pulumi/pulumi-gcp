// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.transcoder.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.transcoder.inputs.JobConfigOverlayAnimationAnimationFadeXyArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class JobConfigOverlayAnimationAnimationFadeArgs extends com.pulumi.resources.ResourceArgs {

    public static final JobConfigOverlayAnimationAnimationFadeArgs Empty = new JobConfigOverlayAnimationAnimationFadeArgs();

    /**
     * The time to end the fade animation, in seconds.
     * 
     */
    @Import(name="endTimeOffset")
    private @Nullable Output<String> endTimeOffset;

    /**
     * @return The time to end the fade animation, in seconds.
     * 
     */
    public Optional<Output<String>> endTimeOffset() {
        return Optional.ofNullable(this.endTimeOffset);
    }

    /**
     * Required. Type of fade animation: `FADE_IN` or `FADE_OUT`.
     * The possible values are:
     * * `FADE_TYPE_UNSPECIFIED`: The fade type is not specified.
     * * `FADE_IN`: Fade the overlay object into view.
     * * `FADE_OUT`: Fade the overlay object out of view.
     *   Possible values are: `FADE_TYPE_UNSPECIFIED`, `FADE_IN`, `FADE_OUT`.
     * 
     */
    @Import(name="fadeType", required=true)
    private Output<String> fadeType;

    /**
     * @return Required. Type of fade animation: `FADE_IN` or `FADE_OUT`.
     * The possible values are:
     * * `FADE_TYPE_UNSPECIFIED`: The fade type is not specified.
     * * `FADE_IN`: Fade the overlay object into view.
     * * `FADE_OUT`: Fade the overlay object out of view.
     *   Possible values are: `FADE_TYPE_UNSPECIFIED`, `FADE_IN`, `FADE_OUT`.
     * 
     */
    public Output<String> fadeType() {
        return this.fadeType;
    }

    /**
     * The time to start the fade animation, in seconds.
     * 
     */
    @Import(name="startTimeOffset")
    private @Nullable Output<String> startTimeOffset;

    /**
     * @return The time to start the fade animation, in seconds.
     * 
     */
    public Optional<Output<String>> startTimeOffset() {
        return Optional.ofNullable(this.startTimeOffset);
    }

    /**
     * Normalized coordinates based on output video resolution.
     * Structure is documented below.
     * 
     */
    @Import(name="xy")
    private @Nullable Output<JobConfigOverlayAnimationAnimationFadeXyArgs> xy;

    /**
     * @return Normalized coordinates based on output video resolution.
     * Structure is documented below.
     * 
     */
    public Optional<Output<JobConfigOverlayAnimationAnimationFadeXyArgs>> xy() {
        return Optional.ofNullable(this.xy);
    }

    private JobConfigOverlayAnimationAnimationFadeArgs() {}

    private JobConfigOverlayAnimationAnimationFadeArgs(JobConfigOverlayAnimationAnimationFadeArgs $) {
        this.endTimeOffset = $.endTimeOffset;
        this.fadeType = $.fadeType;
        this.startTimeOffset = $.startTimeOffset;
        this.xy = $.xy;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(JobConfigOverlayAnimationAnimationFadeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private JobConfigOverlayAnimationAnimationFadeArgs $;

        public Builder() {
            $ = new JobConfigOverlayAnimationAnimationFadeArgs();
        }

        public Builder(JobConfigOverlayAnimationAnimationFadeArgs defaults) {
            $ = new JobConfigOverlayAnimationAnimationFadeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param endTimeOffset The time to end the fade animation, in seconds.
         * 
         * @return builder
         * 
         */
        public Builder endTimeOffset(@Nullable Output<String> endTimeOffset) {
            $.endTimeOffset = endTimeOffset;
            return this;
        }

        /**
         * @param endTimeOffset The time to end the fade animation, in seconds.
         * 
         * @return builder
         * 
         */
        public Builder endTimeOffset(String endTimeOffset) {
            return endTimeOffset(Output.of(endTimeOffset));
        }

        /**
         * @param fadeType Required. Type of fade animation: `FADE_IN` or `FADE_OUT`.
         * The possible values are:
         * * `FADE_TYPE_UNSPECIFIED`: The fade type is not specified.
         * * `FADE_IN`: Fade the overlay object into view.
         * * `FADE_OUT`: Fade the overlay object out of view.
         *   Possible values are: `FADE_TYPE_UNSPECIFIED`, `FADE_IN`, `FADE_OUT`.
         * 
         * @return builder
         * 
         */
        public Builder fadeType(Output<String> fadeType) {
            $.fadeType = fadeType;
            return this;
        }

        /**
         * @param fadeType Required. Type of fade animation: `FADE_IN` or `FADE_OUT`.
         * The possible values are:
         * * `FADE_TYPE_UNSPECIFIED`: The fade type is not specified.
         * * `FADE_IN`: Fade the overlay object into view.
         * * `FADE_OUT`: Fade the overlay object out of view.
         *   Possible values are: `FADE_TYPE_UNSPECIFIED`, `FADE_IN`, `FADE_OUT`.
         * 
         * @return builder
         * 
         */
        public Builder fadeType(String fadeType) {
            return fadeType(Output.of(fadeType));
        }

        /**
         * @param startTimeOffset The time to start the fade animation, in seconds.
         * 
         * @return builder
         * 
         */
        public Builder startTimeOffset(@Nullable Output<String> startTimeOffset) {
            $.startTimeOffset = startTimeOffset;
            return this;
        }

        /**
         * @param startTimeOffset The time to start the fade animation, in seconds.
         * 
         * @return builder
         * 
         */
        public Builder startTimeOffset(String startTimeOffset) {
            return startTimeOffset(Output.of(startTimeOffset));
        }

        /**
         * @param xy Normalized coordinates based on output video resolution.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder xy(@Nullable Output<JobConfigOverlayAnimationAnimationFadeXyArgs> xy) {
            $.xy = xy;
            return this;
        }

        /**
         * @param xy Normalized coordinates based on output video resolution.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder xy(JobConfigOverlayAnimationAnimationFadeXyArgs xy) {
            return xy(Output.of(xy));
        }

        public JobConfigOverlayAnimationAnimationFadeArgs build() {
            if ($.fadeType == null) {
                throw new MissingRequiredPropertyException("JobConfigOverlayAnimationAnimationFadeArgs", "fadeType");
            }
            return $;
        }
    }

}
