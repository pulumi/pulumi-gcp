// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.gkehub.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class FeatureMembershipConfigmanagementConfigSyncGit {
    /**
     * @return The GCP Service Account Email used for auth when secretType is gcpServiceAccount.
     * 
     */
    private @Nullable String gcpServiceAccountEmail;
    /**
     * @return URL for the HTTPS proxy to be used when communicating with the Git repo.
     * 
     */
    private @Nullable String httpsProxy;
    /**
     * @return The path within the Git repository that represents the top level of the repo to sync. Default: the root directory of the repository.
     * 
     */
    private @Nullable String policyDir;
    /**
     * @return Type of secret configured for access to the Git repo.
     * 
     */
    private @Nullable String secretType;
    /**
     * @return The branch of the repository to sync from. Default: master.
     * 
     */
    private @Nullable String syncBranch;
    /**
     * @return The URL of the Git repository to use as the source of truth.
     * 
     */
    private @Nullable String syncRepo;
    /**
     * @return Git revision (tag or hash) to check out. Default HEAD.
     * 
     */
    private @Nullable String syncRev;
    /**
     * @return Period in seconds between consecutive syncs. Default: 15.
     * 
     */
    private @Nullable String syncWaitSecs;

    private FeatureMembershipConfigmanagementConfigSyncGit() {}
    /**
     * @return The GCP Service Account Email used for auth when secretType is gcpServiceAccount.
     * 
     */
    public Optional<String> gcpServiceAccountEmail() {
        return Optional.ofNullable(this.gcpServiceAccountEmail);
    }
    /**
     * @return URL for the HTTPS proxy to be used when communicating with the Git repo.
     * 
     */
    public Optional<String> httpsProxy() {
        return Optional.ofNullable(this.httpsProxy);
    }
    /**
     * @return The path within the Git repository that represents the top level of the repo to sync. Default: the root directory of the repository.
     * 
     */
    public Optional<String> policyDir() {
        return Optional.ofNullable(this.policyDir);
    }
    /**
     * @return Type of secret configured for access to the Git repo.
     * 
     */
    public Optional<String> secretType() {
        return Optional.ofNullable(this.secretType);
    }
    /**
     * @return The branch of the repository to sync from. Default: master.
     * 
     */
    public Optional<String> syncBranch() {
        return Optional.ofNullable(this.syncBranch);
    }
    /**
     * @return The URL of the Git repository to use as the source of truth.
     * 
     */
    public Optional<String> syncRepo() {
        return Optional.ofNullable(this.syncRepo);
    }
    /**
     * @return Git revision (tag or hash) to check out. Default HEAD.
     * 
     */
    public Optional<String> syncRev() {
        return Optional.ofNullable(this.syncRev);
    }
    /**
     * @return Period in seconds between consecutive syncs. Default: 15.
     * 
     */
    public Optional<String> syncWaitSecs() {
        return Optional.ofNullable(this.syncWaitSecs);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FeatureMembershipConfigmanagementConfigSyncGit defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String gcpServiceAccountEmail;
        private @Nullable String httpsProxy;
        private @Nullable String policyDir;
        private @Nullable String secretType;
        private @Nullable String syncBranch;
        private @Nullable String syncRepo;
        private @Nullable String syncRev;
        private @Nullable String syncWaitSecs;
        public Builder() {}
        public Builder(FeatureMembershipConfigmanagementConfigSyncGit defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.gcpServiceAccountEmail = defaults.gcpServiceAccountEmail;
    	      this.httpsProxy = defaults.httpsProxy;
    	      this.policyDir = defaults.policyDir;
    	      this.secretType = defaults.secretType;
    	      this.syncBranch = defaults.syncBranch;
    	      this.syncRepo = defaults.syncRepo;
    	      this.syncRev = defaults.syncRev;
    	      this.syncWaitSecs = defaults.syncWaitSecs;
        }

        @CustomType.Setter
        public Builder gcpServiceAccountEmail(@Nullable String gcpServiceAccountEmail) {
            this.gcpServiceAccountEmail = gcpServiceAccountEmail;
            return this;
        }
        @CustomType.Setter
        public Builder httpsProxy(@Nullable String httpsProxy) {
            this.httpsProxy = httpsProxy;
            return this;
        }
        @CustomType.Setter
        public Builder policyDir(@Nullable String policyDir) {
            this.policyDir = policyDir;
            return this;
        }
        @CustomType.Setter
        public Builder secretType(@Nullable String secretType) {
            this.secretType = secretType;
            return this;
        }
        @CustomType.Setter
        public Builder syncBranch(@Nullable String syncBranch) {
            this.syncBranch = syncBranch;
            return this;
        }
        @CustomType.Setter
        public Builder syncRepo(@Nullable String syncRepo) {
            this.syncRepo = syncRepo;
            return this;
        }
        @CustomType.Setter
        public Builder syncRev(@Nullable String syncRev) {
            this.syncRev = syncRev;
            return this;
        }
        @CustomType.Setter
        public Builder syncWaitSecs(@Nullable String syncWaitSecs) {
            this.syncWaitSecs = syncWaitSecs;
            return this;
        }
        public FeatureMembershipConfigmanagementConfigSyncGit build() {
            final var o = new FeatureMembershipConfigmanagementConfigSyncGit();
            o.gcpServiceAccountEmail = gcpServiceAccountEmail;
            o.httpsProxy = httpsProxy;
            o.policyDir = policyDir;
            o.secretType = secretType;
            o.syncBranch = syncBranch;
            o.syncRepo = syncRepo;
            o.syncRev = syncRev;
            o.syncWaitSecs = syncWaitSecs;
            return o;
        }
    }
}
