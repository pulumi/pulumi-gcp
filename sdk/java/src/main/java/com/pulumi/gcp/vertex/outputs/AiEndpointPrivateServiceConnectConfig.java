// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.vertex.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AiEndpointPrivateServiceConnectConfig {
    /**
     * @return Required. If true, expose the IndexEndpoint via private service connect.
     * 
     */
    private Boolean enablePrivateServiceConnect;
    /**
     * @return If set to true, enable secure private service connect with IAM authorization. Otherwise, private service connect will be done without authorization. Note latency will be slightly increased if authorization is enabled.
     * 
     */
    private @Nullable Boolean enableSecurePrivateServiceConnect;
    /**
     * @return A list of Projects from which the forwarding rule will target the service attachment.
     * 
     */
    private @Nullable List<String> projectAllowlists;

    private AiEndpointPrivateServiceConnectConfig() {}
    /**
     * @return Required. If true, expose the IndexEndpoint via private service connect.
     * 
     */
    public Boolean enablePrivateServiceConnect() {
        return this.enablePrivateServiceConnect;
    }
    /**
     * @return If set to true, enable secure private service connect with IAM authorization. Otherwise, private service connect will be done without authorization. Note latency will be slightly increased if authorization is enabled.
     * 
     */
    public Optional<Boolean> enableSecurePrivateServiceConnect() {
        return Optional.ofNullable(this.enableSecurePrivateServiceConnect);
    }
    /**
     * @return A list of Projects from which the forwarding rule will target the service attachment.
     * 
     */
    public List<String> projectAllowlists() {
        return this.projectAllowlists == null ? List.of() : this.projectAllowlists;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AiEndpointPrivateServiceConnectConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean enablePrivateServiceConnect;
        private @Nullable Boolean enableSecurePrivateServiceConnect;
        private @Nullable List<String> projectAllowlists;
        public Builder() {}
        public Builder(AiEndpointPrivateServiceConnectConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.enablePrivateServiceConnect = defaults.enablePrivateServiceConnect;
    	      this.enableSecurePrivateServiceConnect = defaults.enableSecurePrivateServiceConnect;
    	      this.projectAllowlists = defaults.projectAllowlists;
        }

        @CustomType.Setter
        public Builder enablePrivateServiceConnect(Boolean enablePrivateServiceConnect) {
            if (enablePrivateServiceConnect == null) {
              throw new MissingRequiredPropertyException("AiEndpointPrivateServiceConnectConfig", "enablePrivateServiceConnect");
            }
            this.enablePrivateServiceConnect = enablePrivateServiceConnect;
            return this;
        }
        @CustomType.Setter
        public Builder enableSecurePrivateServiceConnect(@Nullable Boolean enableSecurePrivateServiceConnect) {

            this.enableSecurePrivateServiceConnect = enableSecurePrivateServiceConnect;
            return this;
        }
        @CustomType.Setter
        public Builder projectAllowlists(@Nullable List<String> projectAllowlists) {

            this.projectAllowlists = projectAllowlists;
            return this;
        }
        public Builder projectAllowlists(String... projectAllowlists) {
            return projectAllowlists(List.of(projectAllowlists));
        }
        public AiEndpointPrivateServiceConnectConfig build() {
            final var _resultValue = new AiEndpointPrivateServiceConnectConfig();
            _resultValue.enablePrivateServiceConnect = enablePrivateServiceConnect;
            _resultValue.enableSecurePrivateServiceConnect = enableSecurePrivateServiceConnect;
            _resultValue.projectAllowlists = projectAllowlists;
            return _resultValue;
        }
    }
}
