// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.diagflow.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.diagflow.outputs.CxPageEventHandlerTriggerFulfillmentMessageConversationSuccess;
import com.pulumi.gcp.diagflow.outputs.CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoff;
import com.pulumi.gcp.diagflow.outputs.CxPageEventHandlerTriggerFulfillmentMessageOutputAudioText;
import com.pulumi.gcp.diagflow.outputs.CxPageEventHandlerTriggerFulfillmentMessagePlayAudio;
import com.pulumi.gcp.diagflow.outputs.CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCall;
import com.pulumi.gcp.diagflow.outputs.CxPageEventHandlerTriggerFulfillmentMessageText;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class CxPageEventHandlerTriggerFulfillmentMessage {
    /**
     * @return The channel which the response is associated with. Clients can specify the channel via QueryParameters.channel, and only associated channel response will be returned.
     * 
     */
    private @Nullable String channel;
    /**
     * @return Indicates that the conversation succeeded, i.e., the bot handled the issue that the customer talked to it about.
     * Dialogflow only uses this to determine which conversations should be counted as successful and doesn&#39;t process the metadata in this message in any way. Note that Dialogflow also considers conversations that get to the conversation end page as successful even if they don&#39;t return ConversationSuccess.
     * You may set this, for example:
     * * In the entryFulfillment of a Page if entering the page indicates that the conversation succeeded.
     * * In a webhook response when you determine that you handled the customer issue.
     *   This field is part of a union field `message`: Only one of `text`, `payload`, `conversationSuccess`, `outputAudioText`, `liveAgentHandoff`, `endInteraction`, `playAudio`, `mixedAudio`, `telephonyTransferCall`, or `knowledgeInfoCard` may be set.
     *   Structure is documented below.
     * 
     */
    private @Nullable CxPageEventHandlerTriggerFulfillmentMessageConversationSuccess conversationSuccess;
    /**
     * @return Indicates that the conversation should be handed off to a live agent.
     * Dialogflow only uses this to determine which conversations were handed off to a human agent for measurement purposes. What else to do with this signal is up to you and your handoff procedures.
     * You may set this, for example:
     * * In the entryFulfillment of a Page if entering the page indicates something went extremely wrong in the conversation.
     * * In a webhook response when you determine that the customer issue can only be handled by a human.
     *   This field is part of a union field `message`: Only one of `text`, `payload`, `conversationSuccess`, `outputAudioText`, `liveAgentHandoff`, `endInteraction`, `playAudio`, `mixedAudio`, `telephonyTransferCall`, or `knowledgeInfoCard` may be set.
     *   Structure is documented below.
     * 
     */
    private @Nullable CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoff liveAgentHandoff;
    /**
     * @return A text or ssml response that is preferentially used for TTS output audio synthesis, as described in the comment on the ResponseMessage message.
     * This field is part of a union field `message`: Only one of `text`, `payload`, `conversationSuccess`, `outputAudioText`, `liveAgentHandoff`, `endInteraction`, `playAudio`, `mixedAudio`, `telephonyTransferCall`, or `knowledgeInfoCard` may be set.
     * Structure is documented below.
     * 
     */
    private @Nullable CxPageEventHandlerTriggerFulfillmentMessageOutputAudioText outputAudioText;
    /**
     * @return Returns a response containing a custom, platform-specific payload.
     * This field is part of a union field `message`: Only one of `text`, `payload`, `conversationSuccess`, `outputAudioText`, `liveAgentHandoff`, `endInteraction`, `playAudio`, `mixedAudio`, `telephonyTransferCall`, or `knowledgeInfoCard` may be set.
     * 
     */
    private @Nullable String payload;
    /**
     * @return Specifies an audio clip to be played by the client as part of the response.
     * This field is part of a union field `message`: Only one of `text`, `payload`, `conversationSuccess`, `outputAudioText`, `liveAgentHandoff`, `endInteraction`, `playAudio`, `mixedAudio`, `telephonyTransferCall`, or `knowledgeInfoCard` may be set.
     * Structure is documented below.
     * 
     */
    private @Nullable CxPageEventHandlerTriggerFulfillmentMessagePlayAudio playAudio;
    /**
     * @return Represents the signal that telles the client to transfer the phone call connected to the agent to a third-party endpoint.
     * This field is part of a union field `message`: Only one of `text`, `payload`, `conversationSuccess`, `outputAudioText`, `liveAgentHandoff`, `endInteraction`, `playAudio`, `mixedAudio`, `telephonyTransferCall`, or `knowledgeInfoCard` may be set.
     * Structure is documented below.
     * 
     */
    private @Nullable CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCall telephonyTransferCall;
    /**
     * @return The text response message.
     * This field is part of a union field `message`: Only one of `text`, `payload`, `conversationSuccess`, `outputAudioText`, `liveAgentHandoff`, `endInteraction`, `playAudio`, `mixedAudio`, `telephonyTransferCall`, or `knowledgeInfoCard` may be set.
     * Structure is documented below.
     * 
     */
    private @Nullable CxPageEventHandlerTriggerFulfillmentMessageText text;

    private CxPageEventHandlerTriggerFulfillmentMessage() {}
    /**
     * @return The channel which the response is associated with. Clients can specify the channel via QueryParameters.channel, and only associated channel response will be returned.
     * 
     */
    public Optional<String> channel() {
        return Optional.ofNullable(this.channel);
    }
    /**
     * @return Indicates that the conversation succeeded, i.e., the bot handled the issue that the customer talked to it about.
     * Dialogflow only uses this to determine which conversations should be counted as successful and doesn&#39;t process the metadata in this message in any way. Note that Dialogflow also considers conversations that get to the conversation end page as successful even if they don&#39;t return ConversationSuccess.
     * You may set this, for example:
     * * In the entryFulfillment of a Page if entering the page indicates that the conversation succeeded.
     * * In a webhook response when you determine that you handled the customer issue.
     *   This field is part of a union field `message`: Only one of `text`, `payload`, `conversationSuccess`, `outputAudioText`, `liveAgentHandoff`, `endInteraction`, `playAudio`, `mixedAudio`, `telephonyTransferCall`, or `knowledgeInfoCard` may be set.
     *   Structure is documented below.
     * 
     */
    public Optional<CxPageEventHandlerTriggerFulfillmentMessageConversationSuccess> conversationSuccess() {
        return Optional.ofNullable(this.conversationSuccess);
    }
    /**
     * @return Indicates that the conversation should be handed off to a live agent.
     * Dialogflow only uses this to determine which conversations were handed off to a human agent for measurement purposes. What else to do with this signal is up to you and your handoff procedures.
     * You may set this, for example:
     * * In the entryFulfillment of a Page if entering the page indicates something went extremely wrong in the conversation.
     * * In a webhook response when you determine that the customer issue can only be handled by a human.
     *   This field is part of a union field `message`: Only one of `text`, `payload`, `conversationSuccess`, `outputAudioText`, `liveAgentHandoff`, `endInteraction`, `playAudio`, `mixedAudio`, `telephonyTransferCall`, or `knowledgeInfoCard` may be set.
     *   Structure is documented below.
     * 
     */
    public Optional<CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoff> liveAgentHandoff() {
        return Optional.ofNullable(this.liveAgentHandoff);
    }
    /**
     * @return A text or ssml response that is preferentially used for TTS output audio synthesis, as described in the comment on the ResponseMessage message.
     * This field is part of a union field `message`: Only one of `text`, `payload`, `conversationSuccess`, `outputAudioText`, `liveAgentHandoff`, `endInteraction`, `playAudio`, `mixedAudio`, `telephonyTransferCall`, or `knowledgeInfoCard` may be set.
     * Structure is documented below.
     * 
     */
    public Optional<CxPageEventHandlerTriggerFulfillmentMessageOutputAudioText> outputAudioText() {
        return Optional.ofNullable(this.outputAudioText);
    }
    /**
     * @return Returns a response containing a custom, platform-specific payload.
     * This field is part of a union field `message`: Only one of `text`, `payload`, `conversationSuccess`, `outputAudioText`, `liveAgentHandoff`, `endInteraction`, `playAudio`, `mixedAudio`, `telephonyTransferCall`, or `knowledgeInfoCard` may be set.
     * 
     */
    public Optional<String> payload() {
        return Optional.ofNullable(this.payload);
    }
    /**
     * @return Specifies an audio clip to be played by the client as part of the response.
     * This field is part of a union field `message`: Only one of `text`, `payload`, `conversationSuccess`, `outputAudioText`, `liveAgentHandoff`, `endInteraction`, `playAudio`, `mixedAudio`, `telephonyTransferCall`, or `knowledgeInfoCard` may be set.
     * Structure is documented below.
     * 
     */
    public Optional<CxPageEventHandlerTriggerFulfillmentMessagePlayAudio> playAudio() {
        return Optional.ofNullable(this.playAudio);
    }
    /**
     * @return Represents the signal that telles the client to transfer the phone call connected to the agent to a third-party endpoint.
     * This field is part of a union field `message`: Only one of `text`, `payload`, `conversationSuccess`, `outputAudioText`, `liveAgentHandoff`, `endInteraction`, `playAudio`, `mixedAudio`, `telephonyTransferCall`, or `knowledgeInfoCard` may be set.
     * Structure is documented below.
     * 
     */
    public Optional<CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCall> telephonyTransferCall() {
        return Optional.ofNullable(this.telephonyTransferCall);
    }
    /**
     * @return The text response message.
     * This field is part of a union field `message`: Only one of `text`, `payload`, `conversationSuccess`, `outputAudioText`, `liveAgentHandoff`, `endInteraction`, `playAudio`, `mixedAudio`, `telephonyTransferCall`, or `knowledgeInfoCard` may be set.
     * Structure is documented below.
     * 
     */
    public Optional<CxPageEventHandlerTriggerFulfillmentMessageText> text() {
        return Optional.ofNullable(this.text);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CxPageEventHandlerTriggerFulfillmentMessage defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String channel;
        private @Nullable CxPageEventHandlerTriggerFulfillmentMessageConversationSuccess conversationSuccess;
        private @Nullable CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoff liveAgentHandoff;
        private @Nullable CxPageEventHandlerTriggerFulfillmentMessageOutputAudioText outputAudioText;
        private @Nullable String payload;
        private @Nullable CxPageEventHandlerTriggerFulfillmentMessagePlayAudio playAudio;
        private @Nullable CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCall telephonyTransferCall;
        private @Nullable CxPageEventHandlerTriggerFulfillmentMessageText text;
        public Builder() {}
        public Builder(CxPageEventHandlerTriggerFulfillmentMessage defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.channel = defaults.channel;
    	      this.conversationSuccess = defaults.conversationSuccess;
    	      this.liveAgentHandoff = defaults.liveAgentHandoff;
    	      this.outputAudioText = defaults.outputAudioText;
    	      this.payload = defaults.payload;
    	      this.playAudio = defaults.playAudio;
    	      this.telephonyTransferCall = defaults.telephonyTransferCall;
    	      this.text = defaults.text;
        }

        @CustomType.Setter
        public Builder channel(@Nullable String channel) {

            this.channel = channel;
            return this;
        }
        @CustomType.Setter
        public Builder conversationSuccess(@Nullable CxPageEventHandlerTriggerFulfillmentMessageConversationSuccess conversationSuccess) {

            this.conversationSuccess = conversationSuccess;
            return this;
        }
        @CustomType.Setter
        public Builder liveAgentHandoff(@Nullable CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoff liveAgentHandoff) {

            this.liveAgentHandoff = liveAgentHandoff;
            return this;
        }
        @CustomType.Setter
        public Builder outputAudioText(@Nullable CxPageEventHandlerTriggerFulfillmentMessageOutputAudioText outputAudioText) {

            this.outputAudioText = outputAudioText;
            return this;
        }
        @CustomType.Setter
        public Builder payload(@Nullable String payload) {

            this.payload = payload;
            return this;
        }
        @CustomType.Setter
        public Builder playAudio(@Nullable CxPageEventHandlerTriggerFulfillmentMessagePlayAudio playAudio) {

            this.playAudio = playAudio;
            return this;
        }
        @CustomType.Setter
        public Builder telephonyTransferCall(@Nullable CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCall telephonyTransferCall) {

            this.telephonyTransferCall = telephonyTransferCall;
            return this;
        }
        @CustomType.Setter
        public Builder text(@Nullable CxPageEventHandlerTriggerFulfillmentMessageText text) {

            this.text = text;
            return this;
        }
        public CxPageEventHandlerTriggerFulfillmentMessage build() {
            final var _resultValue = new CxPageEventHandlerTriggerFulfillmentMessage();
            _resultValue.channel = channel;
            _resultValue.conversationSuccess = conversationSuccess;
            _resultValue.liveAgentHandoff = liveAgentHandoff;
            _resultValue.outputAudioText = outputAudioText;
            _resultValue.payload = payload;
            _resultValue.playAudio = playAudio;
            _resultValue.telephonyTransferCall = telephonyTransferCall;
            _resultValue.text = text;
            return _resultValue;
        }
    }
}
