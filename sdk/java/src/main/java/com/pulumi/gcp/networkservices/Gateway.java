// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.networkservices;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.networkservices.GatewayArgs;
import com.pulumi.gcp.networkservices.inputs.GatewayState;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Gateway represents the configuration for a proxy, typically a load balancer.
 * It captures the ip:port over which the services are exposed by the proxy,
 * along with any policy configurations. Routes have reference to to Gateways
 * to dictate how requests should be routed by this Gateway.
 * 
 * To get more information about Gateway, see:
 * 
 * * [API documentation](https://cloud.google.com/traffic-director/docs/reference/network-services/rest/v1/projects.locations.gateways)
 * 
 * ## Example Usage
 * 
 * ### Network Services Gateway Basic
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.networkservices.Gateway;
 * import com.pulumi.gcp.networkservices.GatewayArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var default_ = new Gateway("default", GatewayArgs.builder()
 *             .name("my-gateway")
 *             .scope("default-scope-basic")
 *             .type("OPEN_MESH")
 *             .ports(443)
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * ### Network Services Gateway Advanced
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.networkservices.Gateway;
 * import com.pulumi.gcp.networkservices.GatewayArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var default_ = new Gateway("default", GatewayArgs.builder()
 *             .name("my-gateway")
 *             .labels(Map.of("foo", "bar"))
 *             .description("my description")
 *             .type("OPEN_MESH")
 *             .ports(443)
 *             .scope("default-scope-advance")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * ### Network Services Gateway Secure Web Proxy
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.certificatemanager.Certificate;
 * import com.pulumi.gcp.certificatemanager.CertificateArgs;
 * import com.pulumi.gcp.certificatemanager.inputs.CertificateSelfManagedArgs;
 * import com.pulumi.std.StdFunctions;
 * import com.pulumi.std.inputs.FileArgs;
 * import com.pulumi.gcp.compute.Network;
 * import com.pulumi.gcp.compute.NetworkArgs;
 * import com.pulumi.gcp.compute.Subnetwork;
 * import com.pulumi.gcp.compute.SubnetworkArgs;
 * import com.pulumi.gcp.networksecurity.GatewaySecurityPolicy;
 * import com.pulumi.gcp.networksecurity.GatewaySecurityPolicyArgs;
 * import com.pulumi.gcp.networksecurity.GatewaySecurityPolicyRule;
 * import com.pulumi.gcp.networksecurity.GatewaySecurityPolicyRuleArgs;
 * import com.pulumi.gcp.networkservices.Gateway;
 * import com.pulumi.gcp.networkservices.GatewayArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var default_ = new Certificate("default", CertificateArgs.builder()
 *             .name("my-certificate")
 *             .location("us-central1")
 *             .selfManaged(CertificateSelfManagedArgs.builder()
 *                 .pemCertificate(StdFunctions.file(FileArgs.builder()
 *                     .input("test-fixtures/cert.pem")
 *                     .build()).result())
 *                 .pemPrivateKey(StdFunctions.file(FileArgs.builder()
 *                     .input("test-fixtures/private-key.pem")
 *                     .build()).result())
 *                 .build())
 *             .build());
 * 
 *         var defaultNetwork = new Network("defaultNetwork", NetworkArgs.builder()
 *             .name("my-network")
 *             .routingMode("REGIONAL")
 *             .autoCreateSubnetworks(false)
 *             .build());
 * 
 *         var defaultSubnetwork = new Subnetwork("defaultSubnetwork", SubnetworkArgs.builder()
 *             .name("my-subnetwork-name")
 *             .purpose("PRIVATE")
 *             .ipCidrRange("10.128.0.0/20")
 *             .region("us-central1")
 *             .network(defaultNetwork.id())
 *             .role("ACTIVE")
 *             .build());
 * 
 *         var proxyonlysubnet = new Subnetwork("proxyonlysubnet", SubnetworkArgs.builder()
 *             .name("my-proxy-only-subnetwork")
 *             .purpose("REGIONAL_MANAGED_PROXY")
 *             .ipCidrRange("192.168.0.0/23")
 *             .region("us-central1")
 *             .network(defaultNetwork.id())
 *             .role("ACTIVE")
 *             .build());
 * 
 *         var defaultGatewaySecurityPolicy = new GatewaySecurityPolicy("defaultGatewaySecurityPolicy", GatewaySecurityPolicyArgs.builder()
 *             .name("my-policy-name")
 *             .location("us-central1")
 *             .build());
 * 
 *         var defaultGatewaySecurityPolicyRule = new GatewaySecurityPolicyRule("defaultGatewaySecurityPolicyRule", GatewaySecurityPolicyRuleArgs.builder()
 *             .name("my-policyrule-name")
 *             .location("us-central1")
 *             .gatewaySecurityPolicy(defaultGatewaySecurityPolicy.name())
 *             .enabled(true)
 *             .priority(1)
 *             .sessionMatcher("host() == 'example.com'")
 *             .basicProfile("ALLOW")
 *             .build());
 * 
 *         var defaultGateway = new Gateway("defaultGateway", GatewayArgs.builder()
 *             .name("my-gateway1")
 *             .location("us-central1")
 *             .addresses("10.128.0.99")
 *             .type("SECURE_WEB_GATEWAY")
 *             .ports(443)
 *             .scope("my-default-scope1")
 *             .certificateUrls(default_.id())
 *             .gatewaySecurityPolicy(defaultGatewaySecurityPolicy.id())
 *             .network(defaultNetwork.id())
 *             .subnetwork(defaultSubnetwork.id())
 *             .deleteSwgAutogenRouterOnDestroy(true)
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(proxyonlysubnet)
 *                 .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * ### Network Services Gateway Multiple Swp Same Network
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.certificatemanager.Certificate;
 * import com.pulumi.gcp.certificatemanager.CertificateArgs;
 * import com.pulumi.gcp.certificatemanager.inputs.CertificateSelfManagedArgs;
 * import com.pulumi.std.StdFunctions;
 * import com.pulumi.std.inputs.FileArgs;
 * import com.pulumi.gcp.compute.Network;
 * import com.pulumi.gcp.compute.NetworkArgs;
 * import com.pulumi.gcp.compute.Subnetwork;
 * import com.pulumi.gcp.compute.SubnetworkArgs;
 * import com.pulumi.gcp.networksecurity.GatewaySecurityPolicy;
 * import com.pulumi.gcp.networksecurity.GatewaySecurityPolicyArgs;
 * import com.pulumi.gcp.networksecurity.GatewaySecurityPolicyRule;
 * import com.pulumi.gcp.networksecurity.GatewaySecurityPolicyRuleArgs;
 * import com.pulumi.gcp.networkservices.Gateway;
 * import com.pulumi.gcp.networkservices.GatewayArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var default_ = new Certificate("default", CertificateArgs.builder()
 *             .name("my-certificate")
 *             .location("us-south1")
 *             .selfManaged(CertificateSelfManagedArgs.builder()
 *                 .pemCertificate(StdFunctions.file(FileArgs.builder()
 *                     .input("test-fixtures/cert.pem")
 *                     .build()).result())
 *                 .pemPrivateKey(StdFunctions.file(FileArgs.builder()
 *                     .input("test-fixtures/private-key.pem")
 *                     .build()).result())
 *                 .build())
 *             .build());
 * 
 *         var defaultNetwork = new Network("defaultNetwork", NetworkArgs.builder()
 *             .name("my-network")
 *             .routingMode("REGIONAL")
 *             .autoCreateSubnetworks(false)
 *             .build());
 * 
 *         var defaultSubnetwork = new Subnetwork("defaultSubnetwork", SubnetworkArgs.builder()
 *             .name("my-subnetwork-name")
 *             .purpose("PRIVATE")
 *             .ipCidrRange("10.128.0.0/20")
 *             .region("us-south1")
 *             .network(defaultNetwork.id())
 *             .role("ACTIVE")
 *             .build());
 * 
 *         var proxyonlysubnet = new Subnetwork("proxyonlysubnet", SubnetworkArgs.builder()
 *             .name("my-proxy-only-subnetwork")
 *             .purpose("REGIONAL_MANAGED_PROXY")
 *             .ipCidrRange("192.168.0.0/23")
 *             .region("us-south1")
 *             .network(defaultNetwork.id())
 *             .role("ACTIVE")
 *             .build());
 * 
 *         var defaultGatewaySecurityPolicy = new GatewaySecurityPolicy("defaultGatewaySecurityPolicy", GatewaySecurityPolicyArgs.builder()
 *             .name("my-policy-name")
 *             .location("us-south1")
 *             .build());
 * 
 *         var defaultGatewaySecurityPolicyRule = new GatewaySecurityPolicyRule("defaultGatewaySecurityPolicyRule", GatewaySecurityPolicyRuleArgs.builder()
 *             .name("my-policyrule-name")
 *             .location("us-south1")
 *             .gatewaySecurityPolicy(defaultGatewaySecurityPolicy.name())
 *             .enabled(true)
 *             .priority(1)
 *             .sessionMatcher("host() == 'example.com'")
 *             .basicProfile("ALLOW")
 *             .build());
 * 
 *         var defaultGateway = new Gateway("defaultGateway", GatewayArgs.builder()
 *             .name("my-gateway1")
 *             .location("us-south1")
 *             .addresses("10.128.0.99")
 *             .type("SECURE_WEB_GATEWAY")
 *             .ports(443)
 *             .scope("my-default-scope1")
 *             .certificateUrls(default_.id())
 *             .gatewaySecurityPolicy(defaultGatewaySecurityPolicy.id())
 *             .network(defaultNetwork.id())
 *             .subnetwork(defaultSubnetwork.id())
 *             .deleteSwgAutogenRouterOnDestroy(true)
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(proxyonlysubnet)
 *                 .build());
 * 
 *         var gateway2 = new Gateway("gateway2", GatewayArgs.builder()
 *             .name("my-gateway2")
 *             .location("us-south1")
 *             .addresses("10.128.0.98")
 *             .type("SECURE_WEB_GATEWAY")
 *             .ports(443)
 *             .scope("my-default-scope2")
 *             .certificateUrls(default_.id())
 *             .gatewaySecurityPolicy(defaultGatewaySecurityPolicy.id())
 *             .network(defaultNetwork.id())
 *             .subnetwork(defaultSubnetwork.id())
 *             .deleteSwgAutogenRouterOnDestroy(true)
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(proxyonlysubnet)
 *                 .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * Gateway can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/locations/{{location}}/gateways/{{name}}`
 * 
 * * `{{project}}/{{location}}/{{name}}`
 * 
 * * `{{location}}/{{name}}`
 * 
 * When using the `pulumi import` command, Gateway can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:networkservices/gateway:Gateway default projects/{{project}}/locations/{{location}}/gateways/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:networkservices/gateway:Gateway default {{project}}/{{location}}/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:networkservices/gateway:Gateway default {{location}}/{{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:networkservices/gateway:Gateway")
public class Gateway extends com.pulumi.resources.CustomResource {
    /**
     * Zero or one IPv4 or IPv6 address on which the Gateway will receive the traffic.
     * When no address is provided, an IP from the subnetwork is allocated.
     * This field only applies to gateways of type &#39;SECURE_WEB_GATEWAY&#39;.
     * Gateways of type &#39;OPEN_MESH&#39; listen on 0.0.0.0 for IPv4 and :: for IPv6.
     * 
     */
    @Export(name="addresses", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> addresses;

    /**
     * @return Zero or one IPv4 or IPv6 address on which the Gateway will receive the traffic.
     * When no address is provided, an IP from the subnetwork is allocated.
     * This field only applies to gateways of type &#39;SECURE_WEB_GATEWAY&#39;.
     * Gateways of type &#39;OPEN_MESH&#39; listen on 0.0.0.0 for IPv4 and :: for IPv6.
     * 
     */
    public Output<List<String>> addresses() {
        return this.addresses;
    }
    /**
     * A fully-qualified Certificates URL reference. The proxy presents a Certificate (selected based on SNI) when establishing a TLS connection.
     * This feature only applies to gateways of type &#39;SECURE_WEB_GATEWAY&#39;.
     * 
     */
    @Export(name="certificateUrls", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> certificateUrls;

    /**
     * @return A fully-qualified Certificates URL reference. The proxy presents a Certificate (selected based on SNI) when establishing a TLS connection.
     * This feature only applies to gateways of type &#39;SECURE_WEB_GATEWAY&#39;.
     * 
     */
    public Output<Optional<List<String>>> certificateUrls() {
        return Codegen.optional(this.certificateUrls);
    }
    /**
     * The timestamp when the resource was created.
     * 
     */
    @Export(name="createTime", refs={String.class}, tree="[0]")
    private Output<String> createTime;

    /**
     * @return The timestamp when the resource was created.
     * 
     */
    public Output<String> createTime() {
        return this.createTime;
    }
    /**
     * When deleting a gateway of type &#39;SECURE_WEB_GATEWAY&#39;, this boolean option will also delete auto generated router by the gateway creation.
     * If there is no other gateway of type &#39;SECURE_WEB_GATEWAY&#39; remaining for that region and network it will be deleted.
     * 
     */
    @Export(name="deleteSwgAutogenRouterOnDestroy", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> deleteSwgAutogenRouterOnDestroy;

    /**
     * @return When deleting a gateway of type &#39;SECURE_WEB_GATEWAY&#39;, this boolean option will also delete auto generated router by the gateway creation.
     * If there is no other gateway of type &#39;SECURE_WEB_GATEWAY&#39; remaining for that region and network it will be deleted.
     * 
     */
    public Output<Optional<Boolean>> deleteSwgAutogenRouterOnDestroy() {
        return Codegen.optional(this.deleteSwgAutogenRouterOnDestroy);
    }
    /**
     * A free-text description of the resource. Max length 1024 characters.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return A free-text description of the resource. Max length 1024 characters.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    @Export(name="effectiveLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> effectiveLabels;

    /**
     * @return All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    public Output<Map<String,String>> effectiveLabels() {
        return this.effectiveLabels;
    }
    /**
     * Determines if envoy will insert internal debug headers into upstream requests.
     * Other Envoy headers may still be injected.
     * By default, envoy will not insert any debug headers.
     * Possible values are: `NONE`, `DEBUG_HEADERS`.
     * 
     */
    @Export(name="envoyHeaders", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> envoyHeaders;

    /**
     * @return Determines if envoy will insert internal debug headers into upstream requests.
     * Other Envoy headers may still be injected.
     * By default, envoy will not insert any debug headers.
     * Possible values are: `NONE`, `DEBUG_HEADERS`.
     * 
     */
    public Output<Optional<String>> envoyHeaders() {
        return Codegen.optional(this.envoyHeaders);
    }
    /**
     * A fully-qualified GatewaySecurityPolicy URL reference. Defines how a server should apply security policy to inbound (VM to Proxy) initiated connections.
     * For example: &#39;projects/*&#47;locations/*&#47;gatewaySecurityPolicies/swg-policy&#39;.
     * This policy is specific to gateways of type &#39;SECURE_WEB_GATEWAY&#39;.
     * 
     */
    @Export(name="gatewaySecurityPolicy", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> gatewaySecurityPolicy;

    /**
     * @return A fully-qualified GatewaySecurityPolicy URL reference. Defines how a server should apply security policy to inbound (VM to Proxy) initiated connections.
     * For example: &#39;projects/*&#47;locations/*&#47;gatewaySecurityPolicies/swg-policy&#39;.
     * This policy is specific to gateways of type &#39;SECURE_WEB_GATEWAY&#39;.
     * 
     */
    public Output<Optional<String>> gatewaySecurityPolicy() {
        return Codegen.optional(this.gatewaySecurityPolicy);
    }
    /**
     * The IP Version that will be used by this gateway.
     * Possible values are: `IPV4`, `IPV6`.
     * 
     */
    @Export(name="ipVersion", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ipVersion;

    /**
     * @return The IP Version that will be used by this gateway.
     * Possible values are: `IPV4`, `IPV6`.
     * 
     */
    public Output<Optional<String>> ipVersion() {
        return Codegen.optional(this.ipVersion);
    }
    /**
     * Set of label tags associated with the Gateway resource.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    @Export(name="labels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> labels;

    /**
     * @return Set of label tags associated with the Gateway resource.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    public Output<Optional<Map<String,String>>> labels() {
        return Codegen.optional(this.labels);
    }
    /**
     * The location of the gateway.
     * The default value is `global`.
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> location;

    /**
     * @return The location of the gateway.
     * The default value is `global`.
     * 
     */
    public Output<Optional<String>> location() {
        return Codegen.optional(this.location);
    }
    /**
     * Name of the Gateway resource.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the Gateway resource.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The relative resource name identifying the VPC network that is using this configuration.
     * For example: &#39;projects/*&#47;global/networks/network-1&#39;.
     * Currently, this field is specific to gateways of type &#39;SECURE_WEB_GATEWAY&#39;.
     * 
     */
    @Export(name="network", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> network;

    /**
     * @return The relative resource name identifying the VPC network that is using this configuration.
     * For example: &#39;projects/*&#47;global/networks/network-1&#39;.
     * Currently, this field is specific to gateways of type &#39;SECURE_WEB_GATEWAY&#39;.
     * 
     */
    public Output<Optional<String>> network() {
        return Codegen.optional(this.network);
    }
    /**
     * One or more port numbers (1-65535), on which the Gateway will receive traffic.
     * The proxy binds to the specified ports. Gateways of type &#39;SECURE_WEB_GATEWAY&#39; are limited to 1 port.
     * Gateways of type &#39;OPEN_MESH&#39; listen on 0.0.0.0 for IPv4 and :: for IPv6 and support multiple ports.
     * 
     */
    @Export(name="ports", refs={List.class,Integer.class}, tree="[0,1]")
    private Output<List<Integer>> ports;

    /**
     * @return One or more port numbers (1-65535), on which the Gateway will receive traffic.
     * The proxy binds to the specified ports. Gateways of type &#39;SECURE_WEB_GATEWAY&#39; are limited to 1 port.
     * Gateways of type &#39;OPEN_MESH&#39; listen on 0.0.0.0 for IPv4 and :: for IPv6 and support multiple ports.
     * 
     */
    public Output<List<Integer>> ports() {
        return this.ports;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    @Export(name="pulumiLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> pulumiLabels;

    /**
     * @return The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    public Output<Map<String,String>> pulumiLabels() {
        return this.pulumiLabels;
    }
    /**
     * The routing mode of the Gateway. This field is configurable only for gateways of type SECURE_WEB_GATEWAY. This field is required for gateways of type SECURE_WEB_GATEWAY.
     * Possible values are: `NEXT_HOP_ROUTING_MODE`.
     * 
     */
    @Export(name="routingMode", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> routingMode;

    /**
     * @return The routing mode of the Gateway. This field is configurable only for gateways of type SECURE_WEB_GATEWAY. This field is required for gateways of type SECURE_WEB_GATEWAY.
     * Possible values are: `NEXT_HOP_ROUTING_MODE`.
     * 
     */
    public Output<Optional<String>> routingMode() {
        return Codegen.optional(this.routingMode);
    }
    /**
     * Immutable. Scope determines how configuration across multiple Gateway instances are merged.
     * The configuration for multiple Gateway instances with the same scope will be merged as presented as a single coniguration to the proxy/load balancer.
     * Max length 64 characters. Scope should start with a letter and can only have letters, numbers, hyphens.
     * 
     */
    @Export(name="scope", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> scope;

    /**
     * @return Immutable. Scope determines how configuration across multiple Gateway instances are merged.
     * The configuration for multiple Gateway instances with the same scope will be merged as presented as a single coniguration to the proxy/load balancer.
     * Max length 64 characters. Scope should start with a letter and can only have letters, numbers, hyphens.
     * 
     */
    public Output<Optional<String>> scope() {
        return Codegen.optional(this.scope);
    }
    /**
     * Server-defined URL of this resource.
     * 
     */
    @Export(name="selfLink", refs={String.class}, tree="[0]")
    private Output<String> selfLink;

    /**
     * @return Server-defined URL of this resource.
     * 
     */
    public Output<String> selfLink() {
        return this.selfLink;
    }
    /**
     * A fully-qualified ServerTLSPolicy URL reference. Specifies how TLS traffic is terminated. If empty, TLS termination is disabled.
     * 
     */
    @Export(name="serverTlsPolicy", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> serverTlsPolicy;

    /**
     * @return A fully-qualified ServerTLSPolicy URL reference. Specifies how TLS traffic is terminated. If empty, TLS termination is disabled.
     * 
     */
    public Output<Optional<String>> serverTlsPolicy() {
        return Codegen.optional(this.serverTlsPolicy);
    }
    /**
     * The relative resource name identifying the subnetwork in which this SWG is allocated.
     * For example: projects/*&#47;regions/us-central1/subnetworks/network-1.
     * Currently, this field is specific to gateways of type &#39;SECURE_WEB_GATEWAY&#39;.
     * 
     */
    @Export(name="subnetwork", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> subnetwork;

    /**
     * @return The relative resource name identifying the subnetwork in which this SWG is allocated.
     * For example: projects/*&#47;regions/us-central1/subnetworks/network-1.
     * Currently, this field is specific to gateways of type &#39;SECURE_WEB_GATEWAY&#39;.
     * 
     */
    public Output<Optional<String>> subnetwork() {
        return Codegen.optional(this.subnetwork);
    }
    /**
     * Immutable. The type of the customer managed gateway.
     * Possible values are: `OPEN_MESH`, `SECURE_WEB_GATEWAY`.
     * 
     */
    @Export(name="type", refs={String.class}, tree="[0]")
    private Output<String> type;

    /**
     * @return Immutable. The type of the customer managed gateway.
     * Possible values are: `OPEN_MESH`, `SECURE_WEB_GATEWAY`.
     * 
     */
    public Output<String> type() {
        return this.type;
    }
    /**
     * The timestamp when the resource was updated.
     * 
     */
    @Export(name="updateTime", refs={String.class}, tree="[0]")
    private Output<String> updateTime;

    /**
     * @return The timestamp when the resource was updated.
     * 
     */
    public Output<String> updateTime() {
        return this.updateTime;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Gateway(java.lang.String name) {
        this(name, GatewayArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Gateway(java.lang.String name, GatewayArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Gateway(java.lang.String name, GatewayArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:networkservices/gateway:Gateway", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Gateway(java.lang.String name, Output<java.lang.String> id, @Nullable GatewayState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:networkservices/gateway:Gateway", name, state, makeResourceOptions(options, id), false);
    }

    private static GatewayArgs makeArgs(GatewayArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? GatewayArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "effectiveLabels",
                "pulumiLabels"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Gateway get(java.lang.String name, Output<java.lang.String> id, @Nullable GatewayState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Gateway(name, id, state, options);
    }
}
