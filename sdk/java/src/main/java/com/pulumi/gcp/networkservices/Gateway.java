// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.networkservices;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.networkservices.GatewayArgs;
import com.pulumi.gcp.networkservices.inputs.GatewayState;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Gateway represents the configuration for a proxy, typically a load balancer.
 * It captures the ip:port over which the services are exposed by the proxy,
 * along with any policy configurations. Routes have reference to to Gateways
 * to dictate how requests should be routed by this Gateway.
 * 
 * To get more information about Gateway, see:
 * 
 * * [API documentation](https://cloud.google.com/traffic-director/docs/reference/network-services/rest/v1/projects.locations.gateways)
 * 
 * ## Example Usage
 * ### Network Services Gateway Basic
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.networkservices.Gateway;
 * import com.pulumi.gcp.networkservices.GatewayArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var default_ = new Gateway(&#34;default&#34;, GatewayArgs.builder()        
 *             .ports(443)
 *             .scope(&#34;default-scope-basic&#34;)
 *             .type(&#34;OPEN_MESH&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Network Services Gateway Advanced
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.networkservices.Gateway;
 * import com.pulumi.gcp.networkservices.GatewayArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var default_ = new Gateway(&#34;default&#34;, GatewayArgs.builder()        
 *             .description(&#34;my description&#34;)
 *             .labels(Map.of(&#34;foo&#34;, &#34;bar&#34;))
 *             .ports(443)
 *             .scope(&#34;default-scope-advance&#34;)
 *             .type(&#34;OPEN_MESH&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Network Services Gateway Secure Web Proxy
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.certificatemanager.Certificate;
 * import com.pulumi.gcp.certificatemanager.CertificateArgs;
 * import com.pulumi.gcp.certificatemanager.inputs.CertificateSelfManagedArgs;
 * import com.pulumi.gcp.compute.Network;
 * import com.pulumi.gcp.compute.NetworkArgs;
 * import com.pulumi.gcp.compute.Subnetwork;
 * import com.pulumi.gcp.compute.SubnetworkArgs;
 * import com.pulumi.gcp.networksecurity.GatewaySecurityPolicy;
 * import com.pulumi.gcp.networksecurity.GatewaySecurityPolicyArgs;
 * import com.pulumi.gcp.networksecurity.GatewaySecurityPolicyRule;
 * import com.pulumi.gcp.networksecurity.GatewaySecurityPolicyRuleArgs;
 * import com.pulumi.gcp.networkservices.Gateway;
 * import com.pulumi.gcp.networkservices.GatewayArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var defaultCertificate = new Certificate(&#34;defaultCertificate&#34;, CertificateArgs.builder()        
 *             .location(&#34;us-central1&#34;)
 *             .selfManaged(CertificateSelfManagedArgs.builder()
 *                 .pemCertificate(Files.readString(Paths.get(&#34;test-fixtures/certificatemanager/cert.pem&#34;)))
 *                 .pemPrivateKey(Files.readString(Paths.get(&#34;test-fixtures/certificatemanager/private-key.pem&#34;)))
 *                 .build())
 *             .build());
 * 
 *         var defaultNetwork = new Network(&#34;defaultNetwork&#34;, NetworkArgs.builder()        
 *             .routingMode(&#34;REGIONAL&#34;)
 *             .autoCreateSubnetworks(false)
 *             .build());
 * 
 *         var defaultSubnetwork = new Subnetwork(&#34;defaultSubnetwork&#34;, SubnetworkArgs.builder()        
 *             .purpose(&#34;PRIVATE&#34;)
 *             .ipCidrRange(&#34;10.128.0.0/20&#34;)
 *             .region(&#34;us-central1&#34;)
 *             .network(defaultNetwork.id())
 *             .role(&#34;ACTIVE&#34;)
 *             .build());
 * 
 *         var proxyonlysubnet = new Subnetwork(&#34;proxyonlysubnet&#34;, SubnetworkArgs.builder()        
 *             .purpose(&#34;REGIONAL_MANAGED_PROXY&#34;)
 *             .ipCidrRange(&#34;192.168.0.0/23&#34;)
 *             .region(&#34;us-central1&#34;)
 *             .network(defaultNetwork.id())
 *             .role(&#34;ACTIVE&#34;)
 *             .build());
 * 
 *         var defaultGatewaySecurityPolicy = new GatewaySecurityPolicy(&#34;defaultGatewaySecurityPolicy&#34;, GatewaySecurityPolicyArgs.builder()        
 *             .location(&#34;us-central1&#34;)
 *             .build());
 * 
 *         var defaultGatewaySecurityPolicyRule = new GatewaySecurityPolicyRule(&#34;defaultGatewaySecurityPolicyRule&#34;, GatewaySecurityPolicyRuleArgs.builder()        
 *             .location(&#34;us-central1&#34;)
 *             .gatewaySecurityPolicy(defaultGatewaySecurityPolicy.name())
 *             .enabled(true)
 *             .priority(1)
 *             .sessionMatcher(&#34;host() == &#39;example.com&#39;&#34;)
 *             .basicProfile(&#34;ALLOW&#34;)
 *             .build());
 * 
 *         var defaultGateway = new Gateway(&#34;defaultGateway&#34;, GatewayArgs.builder()        
 *             .location(&#34;us-central1&#34;)
 *             .addresses(&#34;10.128.0.99&#34;)
 *             .type(&#34;SECURE_WEB_GATEWAY&#34;)
 *             .ports(443)
 *             .scope(&#34;my-default-scope1&#34;)
 *             .certificateUrls(defaultCertificate.id())
 *             .gatewaySecurityPolicy(defaultGatewaySecurityPolicy.id())
 *             .network(defaultNetwork.id())
 *             .subnetwork(defaultSubnetwork.id())
 *             .deleteSwgAutogenRouterOnDestroy(true)
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(proxyonlysubnet)
 *                 .build());
 * 
 *     }
 * }
 * ```
 * ### Network Services Gateway Multiple Swp Same Network
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.certificatemanager.Certificate;
 * import com.pulumi.gcp.certificatemanager.CertificateArgs;
 * import com.pulumi.gcp.certificatemanager.inputs.CertificateSelfManagedArgs;
 * import com.pulumi.gcp.compute.Network;
 * import com.pulumi.gcp.compute.NetworkArgs;
 * import com.pulumi.gcp.compute.Subnetwork;
 * import com.pulumi.gcp.compute.SubnetworkArgs;
 * import com.pulumi.gcp.networksecurity.GatewaySecurityPolicy;
 * import com.pulumi.gcp.networksecurity.GatewaySecurityPolicyArgs;
 * import com.pulumi.gcp.networksecurity.GatewaySecurityPolicyRule;
 * import com.pulumi.gcp.networksecurity.GatewaySecurityPolicyRuleArgs;
 * import com.pulumi.gcp.networkservices.Gateway;
 * import com.pulumi.gcp.networkservices.GatewayArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var defaultCertificate = new Certificate(&#34;defaultCertificate&#34;, CertificateArgs.builder()        
 *             .location(&#34;us-south1&#34;)
 *             .selfManaged(CertificateSelfManagedArgs.builder()
 *                 .pemCertificate(Files.readString(Paths.get(&#34;test-fixtures/certificatemanager/cert.pem&#34;)))
 *                 .pemPrivateKey(Files.readString(Paths.get(&#34;test-fixtures/certificatemanager/private-key.pem&#34;)))
 *                 .build())
 *             .build());
 * 
 *         var defaultNetwork = new Network(&#34;defaultNetwork&#34;, NetworkArgs.builder()        
 *             .routingMode(&#34;REGIONAL&#34;)
 *             .autoCreateSubnetworks(false)
 *             .build());
 * 
 *         var defaultSubnetwork = new Subnetwork(&#34;defaultSubnetwork&#34;, SubnetworkArgs.builder()        
 *             .purpose(&#34;PRIVATE&#34;)
 *             .ipCidrRange(&#34;10.128.0.0/20&#34;)
 *             .region(&#34;us-south1&#34;)
 *             .network(defaultNetwork.id())
 *             .role(&#34;ACTIVE&#34;)
 *             .build());
 * 
 *         var proxyonlysubnet = new Subnetwork(&#34;proxyonlysubnet&#34;, SubnetworkArgs.builder()        
 *             .purpose(&#34;REGIONAL_MANAGED_PROXY&#34;)
 *             .ipCidrRange(&#34;192.168.0.0/23&#34;)
 *             .region(&#34;us-south1&#34;)
 *             .network(defaultNetwork.id())
 *             .role(&#34;ACTIVE&#34;)
 *             .build());
 * 
 *         var defaultGatewaySecurityPolicy = new GatewaySecurityPolicy(&#34;defaultGatewaySecurityPolicy&#34;, GatewaySecurityPolicyArgs.builder()        
 *             .location(&#34;us-south1&#34;)
 *             .build());
 * 
 *         var defaultGatewaySecurityPolicyRule = new GatewaySecurityPolicyRule(&#34;defaultGatewaySecurityPolicyRule&#34;, GatewaySecurityPolicyRuleArgs.builder()        
 *             .location(&#34;us-south1&#34;)
 *             .gatewaySecurityPolicy(defaultGatewaySecurityPolicy.name())
 *             .enabled(true)
 *             .priority(1)
 *             .sessionMatcher(&#34;host() == &#39;example.com&#39;&#34;)
 *             .basicProfile(&#34;ALLOW&#34;)
 *             .build());
 * 
 *         var defaultGateway = new Gateway(&#34;defaultGateway&#34;, GatewayArgs.builder()        
 *             .location(&#34;us-south1&#34;)
 *             .addresses(&#34;10.128.0.99&#34;)
 *             .type(&#34;SECURE_WEB_GATEWAY&#34;)
 *             .ports(443)
 *             .scope(&#34;my-default-scope1&#34;)
 *             .certificateUrls(defaultCertificate.id())
 *             .gatewaySecurityPolicy(defaultGatewaySecurityPolicy.id())
 *             .network(defaultNetwork.id())
 *             .subnetwork(defaultSubnetwork.id())
 *             .deleteSwgAutogenRouterOnDestroy(true)
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(proxyonlysubnet)
 *                 .build());
 * 
 *         var gateway2 = new Gateway(&#34;gateway2&#34;, GatewayArgs.builder()        
 *             .location(&#34;us-south1&#34;)
 *             .addresses(&#34;10.128.0.98&#34;)
 *             .type(&#34;SECURE_WEB_GATEWAY&#34;)
 *             .ports(443)
 *             .scope(&#34;my-default-scope2&#34;)
 *             .certificateUrls(defaultCertificate.id())
 *             .gatewaySecurityPolicy(defaultGatewaySecurityPolicy.id())
 *             .network(defaultNetwork.id())
 *             .subnetwork(defaultSubnetwork.id())
 *             .deleteSwgAutogenRouterOnDestroy(true)
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(proxyonlysubnet)
 *                 .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * Gateway can be imported using any of these accepted formats
 * 
 * ```sh
 *  $ pulumi import gcp:networkservices/gateway:Gateway default projects/{{project}}/locations/{{location}}/gateways/{{name}}
 * ```
 * 
 * ```sh
 *  $ pulumi import gcp:networkservices/gateway:Gateway default {{project}}/{{location}}/{{name}}
 * ```
 * 
 * ```sh
 *  $ pulumi import gcp:networkservices/gateway:Gateway default {{location}}/{{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:networkservices/gateway:Gateway")
public class Gateway extends com.pulumi.resources.CustomResource {
    /**
     * Zero or one IPv4-address on which the Gateway will receive the traffic. When no address is provided,
     * an IP from the subnetwork is allocated This field only applies to gateways of type &#39;SECURE_WEB_GATEWAY&#39;.
     * Gateways of type &#39;OPEN_MESH&#39; listen on 0.0.0.0.
     * 
     */
    @Export(name="addresses", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> addresses;

    /**
     * @return Zero or one IPv4-address on which the Gateway will receive the traffic. When no address is provided,
     * an IP from the subnetwork is allocated This field only applies to gateways of type &#39;SECURE_WEB_GATEWAY&#39;.
     * Gateways of type &#39;OPEN_MESH&#39; listen on 0.0.0.0.
     * 
     */
    public Output<Optional<List<String>>> addresses() {
        return Codegen.optional(this.addresses);
    }
    /**
     * A fully-qualified Certificates URL reference. The proxy presents a Certificate (selected based on SNI) when establishing a TLS connection.
     * This feature only applies to gateways of type &#39;SECURE_WEB_GATEWAY&#39;.
     * 
     */
    @Export(name="certificateUrls", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> certificateUrls;

    /**
     * @return A fully-qualified Certificates URL reference. The proxy presents a Certificate (selected based on SNI) when establishing a TLS connection.
     * This feature only applies to gateways of type &#39;SECURE_WEB_GATEWAY&#39;.
     * 
     */
    public Output<Optional<List<String>>> certificateUrls() {
        return Codegen.optional(this.certificateUrls);
    }
    /**
     * Time the AccessPolicy was created in UTC.
     * 
     */
    @Export(name="createTime", type=String.class, parameters={})
    private Output<String> createTime;

    /**
     * @return Time the AccessPolicy was created in UTC.
     * 
     */
    public Output<String> createTime() {
        return this.createTime;
    }
    /**
     * When deleting a gateway of type &#39;SECURE_WEB_GATEWAY&#39;, this boolean option will also delete auto generated router by the gateway creation.
     * If there is no other gateway of type &#39;SECURE_WEB_GATEWAY&#39; remaining for that region and network it will be deleted.
     * 
     */
    @Export(name="deleteSwgAutogenRouterOnDestroy", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> deleteSwgAutogenRouterOnDestroy;

    /**
     * @return When deleting a gateway of type &#39;SECURE_WEB_GATEWAY&#39;, this boolean option will also delete auto generated router by the gateway creation.
     * If there is no other gateway of type &#39;SECURE_WEB_GATEWAY&#39; remaining for that region and network it will be deleted.
     * 
     */
    public Output<Optional<Boolean>> deleteSwgAutogenRouterOnDestroy() {
        return Codegen.optional(this.deleteSwgAutogenRouterOnDestroy);
    }
    /**
     * A free-text description of the resource. Max length 1024 characters.
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output</* @Nullable */ String> description;

    /**
     * @return A free-text description of the resource. Max length 1024 characters.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * A fully-qualified GatewaySecurityPolicy URL reference. Defines how a server should apply security policy to inbound (VM to Proxy) initiated connections.
     * For example: `projects/*{@literal /}locations/*{@literal /}gatewaySecurityPolicies/swg-policy`.
     * This policy is specific to gateways of type &#39;SECURE_WEB_GATEWAY&#39;.
     * 
     */
    @Export(name="gatewaySecurityPolicy", type=String.class, parameters={})
    private Output</* @Nullable */ String> gatewaySecurityPolicy;

    /**
     * @return A fully-qualified GatewaySecurityPolicy URL reference. Defines how a server should apply security policy to inbound (VM to Proxy) initiated connections.
     * For example: `projects/*{@literal /}locations/*{@literal /}gatewaySecurityPolicies/swg-policy`.
     * This policy is specific to gateways of type &#39;SECURE_WEB_GATEWAY&#39;.
     * 
     */
    public Output<Optional<String>> gatewaySecurityPolicy() {
        return Codegen.optional(this.gatewaySecurityPolicy);
    }
    /**
     * Set of label tags associated with the Gateway resource.
     * 
     */
    @Export(name="labels", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> labels;

    /**
     * @return Set of label tags associated with the Gateway resource.
     * 
     */
    public Output<Optional<Map<String,String>>> labels() {
        return Codegen.optional(this.labels);
    }
    /**
     * The location of the gateway.
     * The default value is `global`.
     * 
     */
    @Export(name="location", type=String.class, parameters={})
    private Output</* @Nullable */ String> location;

    /**
     * @return The location of the gateway.
     * The default value is `global`.
     * 
     */
    public Output<Optional<String>> location() {
        return Codegen.optional(this.location);
    }
    /**
     * Short name of the Gateway resource to be created.
     * 
     * ***
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Short name of the Gateway resource to be created.
     * 
     * ***
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The relative resource name identifying the VPC network that is using this configuration.
     * For example: `projects/*{@literal /}global/networks/network-1`.
     * Currently, this field is specific to gateways of type &#39;SECURE_WEB_GATEWAY&#39;.
     * 
     */
    @Export(name="network", type=String.class, parameters={})
    private Output</* @Nullable */ String> network;

    /**
     * @return The relative resource name identifying the VPC network that is using this configuration.
     * For example: `projects/*{@literal /}global/networks/network-1`.
     * Currently, this field is specific to gateways of type &#39;SECURE_WEB_GATEWAY&#39;.
     * 
     */
    public Output<Optional<String>> network() {
        return Codegen.optional(this.network);
    }
    /**
     * One or more port numbers (1-65535), on which the Gateway will receive traffic.
     * The proxy binds to the specified ports. Gateways of type &#39;SECURE_WEB_GATEWAY&#39; are
     * limited to 1 port. Gateways of type &#39;OPEN_MESH&#39; listen on 0.0.0.0 and support multiple ports.
     * 
     */
    @Export(name="ports", type=List.class, parameters={Integer.class})
    private Output<List<Integer>> ports;

    /**
     * @return One or more port numbers (1-65535), on which the Gateway will receive traffic.
     * The proxy binds to the specified ports. Gateways of type &#39;SECURE_WEB_GATEWAY&#39; are
     * limited to 1 port. Gateways of type &#39;OPEN_MESH&#39; listen on 0.0.0.0 and support multiple ports.
     * 
     */
    public Output<List<Integer>> ports() {
        return this.ports;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", type=String.class, parameters={})
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * Immutable. Scope determines how configuration across multiple Gateway instances are merged.
     * The configuration for multiple Gateway instances with the same scope will be merged as presented as
     * a single coniguration to the proxy/load balancer.
     * Max length 64 characters. Scope should start with a letter and can only have letters, numbers, hyphens.
     * 
     */
    @Export(name="scope", type=String.class, parameters={})
    private Output<String> scope;

    /**
     * @return Immutable. Scope determines how configuration across multiple Gateway instances are merged.
     * The configuration for multiple Gateway instances with the same scope will be merged as presented as
     * a single coniguration to the proxy/load balancer.
     * Max length 64 characters. Scope should start with a letter and can only have letters, numbers, hyphens.
     * 
     */
    public Output<String> scope() {
        return this.scope;
    }
    /**
     * Server-defined URL of this resource.
     * 
     */
    @Export(name="selfLink", type=String.class, parameters={})
    private Output<String> selfLink;

    /**
     * @return Server-defined URL of this resource.
     * 
     */
    public Output<String> selfLink() {
        return this.selfLink;
    }
    /**
     * A fully-qualified ServerTLSPolicy URL reference. Specifies how TLS traffic is terminated.
     * If empty, TLS termination is disabled.
     * 
     */
    @Export(name="serverTlsPolicy", type=String.class, parameters={})
    private Output</* @Nullable */ String> serverTlsPolicy;

    /**
     * @return A fully-qualified ServerTLSPolicy URL reference. Specifies how TLS traffic is terminated.
     * If empty, TLS termination is disabled.
     * 
     */
    public Output<Optional<String>> serverTlsPolicy() {
        return Codegen.optional(this.serverTlsPolicy);
    }
    /**
     * The relative resource name identifying the subnetwork in which this SWG is allocated.
     * For example: `projects/*{@literal /}regions/us-central1/subnetworks/network-1`.
     * Currently, this field is specific to gateways of type &#39;SECURE_WEB_GATEWAY.
     * 
     */
    @Export(name="subnetwork", type=String.class, parameters={})
    private Output</* @Nullable */ String> subnetwork;

    /**
     * @return The relative resource name identifying the subnetwork in which this SWG is allocated.
     * For example: `projects/*{@literal /}regions/us-central1/subnetworks/network-1`.
     * Currently, this field is specific to gateways of type &#39;SECURE_WEB_GATEWAY.
     * 
     */
    public Output<Optional<String>> subnetwork() {
        return Codegen.optional(this.subnetwork);
    }
    /**
     * Immutable. The type of the customer-managed gateway. Possible values are: * OPEN_MESH * SECURE_WEB_GATEWAY.
     * Possible values are: `TYPE_UNSPECIFIED`, `OPEN_MESH`, `SECURE_WEB_GATEWAY`.
     * 
     */
    @Export(name="type", type=String.class, parameters={})
    private Output<String> type;

    /**
     * @return Immutable. The type of the customer-managed gateway. Possible values are: * OPEN_MESH * SECURE_WEB_GATEWAY.
     * Possible values are: `TYPE_UNSPECIFIED`, `OPEN_MESH`, `SECURE_WEB_GATEWAY`.
     * 
     */
    public Output<String> type() {
        return this.type;
    }
    /**
     * Time the AccessPolicy was updated in UTC.
     * 
     */
    @Export(name="updateTime", type=String.class, parameters={})
    private Output<String> updateTime;

    /**
     * @return Time the AccessPolicy was updated in UTC.
     * 
     */
    public Output<String> updateTime() {
        return this.updateTime;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Gateway(String name) {
        this(name, GatewayArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Gateway(String name, GatewayArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Gateway(String name, GatewayArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:networkservices/gateway:Gateway", name, args == null ? GatewayArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Gateway(String name, Output<String> id, @Nullable GatewayState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:networkservices/gateway:Gateway", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Gateway get(String name, Output<String> id, @Nullable GatewayState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Gateway(name, id, state, options);
    }
}
