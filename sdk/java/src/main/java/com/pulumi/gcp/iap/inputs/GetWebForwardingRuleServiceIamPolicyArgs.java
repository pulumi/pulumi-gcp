// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.iap.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetWebForwardingRuleServiceIamPolicyArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetWebForwardingRuleServiceIamPolicyArgs Empty = new GetWebForwardingRuleServiceIamPolicyArgs();

    /**
     * Used to find the parent resource to bind the IAM policy to
     * 
     */
    @Import(name="forwardingRuleServiceName", required=true)
    private Output<String> forwardingRuleServiceName;

    /**
     * @return Used to find the parent resource to bind the IAM policy to
     * 
     */
    public Output<String> forwardingRuleServiceName() {
        return this.forwardingRuleServiceName;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    private GetWebForwardingRuleServiceIamPolicyArgs() {}

    private GetWebForwardingRuleServiceIamPolicyArgs(GetWebForwardingRuleServiceIamPolicyArgs $) {
        this.forwardingRuleServiceName = $.forwardingRuleServiceName;
        this.project = $.project;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetWebForwardingRuleServiceIamPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetWebForwardingRuleServiceIamPolicyArgs $;

        public Builder() {
            $ = new GetWebForwardingRuleServiceIamPolicyArgs();
        }

        public Builder(GetWebForwardingRuleServiceIamPolicyArgs defaults) {
            $ = new GetWebForwardingRuleServiceIamPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param forwardingRuleServiceName Used to find the parent resource to bind the IAM policy to
         * 
         * @return builder
         * 
         */
        public Builder forwardingRuleServiceName(Output<String> forwardingRuleServiceName) {
            $.forwardingRuleServiceName = forwardingRuleServiceName;
            return this;
        }

        /**
         * @param forwardingRuleServiceName Used to find the parent resource to bind the IAM policy to
         * 
         * @return builder
         * 
         */
        public Builder forwardingRuleServiceName(String forwardingRuleServiceName) {
            return forwardingRuleServiceName(Output.of(forwardingRuleServiceName));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        public GetWebForwardingRuleServiceIamPolicyArgs build() {
            if ($.forwardingRuleServiceName == null) {
                throw new MissingRequiredPropertyException("GetWebForwardingRuleServiceIamPolicyArgs", "forwardingRuleServiceName");
            }
            return $;
        }
    }

}
