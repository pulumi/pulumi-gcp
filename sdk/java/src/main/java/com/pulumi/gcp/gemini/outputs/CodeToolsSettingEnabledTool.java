// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.gemini.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.gemini.outputs.CodeToolsSettingEnabledToolConfig;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class CodeToolsSettingEnabledTool {
    /**
     * @return Link to the Dev Connect Account Connector that holds the user credentials.
     * projects/{project}/locations/{location}/accountConnectors/{account_connector_id}
     * 
     */
    private @Nullable String accountConnector;
    /**
     * @return Configuration parameters for the tool.
     * Structure is documented below.
     * 
     */
    private @Nullable List<CodeToolsSettingEnabledToolConfig> configs;
    /**
     * @return Handle used to invoke the tool.
     * 
     */
    private String handle;
    /**
     * @return Link to the Tool
     * 
     */
    private String tool;
    /**
     * @return Overridden URI, if allowed by Tool.
     * 
     */
    private @Nullable String uriOverride;

    private CodeToolsSettingEnabledTool() {}
    /**
     * @return Link to the Dev Connect Account Connector that holds the user credentials.
     * projects/{project}/locations/{location}/accountConnectors/{account_connector_id}
     * 
     */
    public Optional<String> accountConnector() {
        return Optional.ofNullable(this.accountConnector);
    }
    /**
     * @return Configuration parameters for the tool.
     * Structure is documented below.
     * 
     */
    public List<CodeToolsSettingEnabledToolConfig> configs() {
        return this.configs == null ? List.of() : this.configs;
    }
    /**
     * @return Handle used to invoke the tool.
     * 
     */
    public String handle() {
        return this.handle;
    }
    /**
     * @return Link to the Tool
     * 
     */
    public String tool() {
        return this.tool;
    }
    /**
     * @return Overridden URI, if allowed by Tool.
     * 
     */
    public Optional<String> uriOverride() {
        return Optional.ofNullable(this.uriOverride);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CodeToolsSettingEnabledTool defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String accountConnector;
        private @Nullable List<CodeToolsSettingEnabledToolConfig> configs;
        private String handle;
        private String tool;
        private @Nullable String uriOverride;
        public Builder() {}
        public Builder(CodeToolsSettingEnabledTool defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountConnector = defaults.accountConnector;
    	      this.configs = defaults.configs;
    	      this.handle = defaults.handle;
    	      this.tool = defaults.tool;
    	      this.uriOverride = defaults.uriOverride;
        }

        @CustomType.Setter
        public Builder accountConnector(@Nullable String accountConnector) {

            this.accountConnector = accountConnector;
            return this;
        }
        @CustomType.Setter
        public Builder configs(@Nullable List<CodeToolsSettingEnabledToolConfig> configs) {

            this.configs = configs;
            return this;
        }
        public Builder configs(CodeToolsSettingEnabledToolConfig... configs) {
            return configs(List.of(configs));
        }
        @CustomType.Setter
        public Builder handle(String handle) {
            if (handle == null) {
              throw new MissingRequiredPropertyException("CodeToolsSettingEnabledTool", "handle");
            }
            this.handle = handle;
            return this;
        }
        @CustomType.Setter
        public Builder tool(String tool) {
            if (tool == null) {
              throw new MissingRequiredPropertyException("CodeToolsSettingEnabledTool", "tool");
            }
            this.tool = tool;
            return this;
        }
        @CustomType.Setter
        public Builder uriOverride(@Nullable String uriOverride) {

            this.uriOverride = uriOverride;
            return this;
        }
        public CodeToolsSettingEnabledTool build() {
            final var _resultValue = new CodeToolsSettingEnabledTool();
            _resultValue.accountConnector = accountConnector;
            _resultValue.configs = configs;
            _resultValue.handle = handle;
            _resultValue.tool = tool;
            _resultValue.uriOverride = uriOverride;
            return _resultValue;
        }
    }
}
