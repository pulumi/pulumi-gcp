// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.compute.outputs.GetSecurityPolicyRuleRateLimitOptionBanThreshold;
import com.pulumi.gcp.compute.outputs.GetSecurityPolicyRuleRateLimitOptionEnforceOnKeyConfig;
import com.pulumi.gcp.compute.outputs.GetSecurityPolicyRuleRateLimitOptionExceedRedirectOption;
import com.pulumi.gcp.compute.outputs.GetSecurityPolicyRuleRateLimitOptionRateLimitThreshold;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetSecurityPolicyRuleRateLimitOption {
    /**
     * @return Can only be specified if the action for the rule is &#34;rate_based_ban&#34;. If specified, determines the time (in seconds) the traffic will continue to be banned by the rate limit after the rate falls below the threshold.
     * 
     */
    private Integer banDurationSec;
    /**
     * @return Can only be specified if the action for the rule is &#34;rate_based_ban&#34;. If specified, the key will be banned for the configured &#39;banDurationSec&#39; when the number of requests that exceed the &#39;rateLimitThreshold&#39; also exceed this &#39;banThreshold&#39;.
     * 
     */
    private List<GetSecurityPolicyRuleRateLimitOptionBanThreshold> banThresholds;
    /**
     * @return Action to take for requests that are under the configured rate limit threshold. Valid option is &#34;allow&#34; only.
     * 
     */
    private String conformAction;
    /**
     * @return Determines the key to enforce the rateLimitThreshold on
     * 
     */
    private String enforceOnKey;
    /**
     * @return Enforce On Key Config of this security policy
     * 
     */
    private List<GetSecurityPolicyRuleRateLimitOptionEnforceOnKeyConfig> enforceOnKeyConfigs;
    /**
     * @return Rate limit key name applicable only for the following key types: HTTP_HEADER -- Name of the HTTP header whose value is taken as the key value. HTTP_COOKIE -- Name of the HTTP cookie whose value is taken as the key value.
     * 
     */
    private String enforceOnKeyName;
    /**
     * @return Action to take for requests that are above the configured rate limit threshold, to either deny with a specified HTTP response code, or redirect to a different endpoint. Valid options are &#34;deny()&#34; where valid values for status are 403, 404, 429, and 502, and &#34;redirect&#34; where the redirect parameters come from exceedRedirectOptions below.
     * 
     */
    private String exceedAction;
    /**
     * @return Parameters defining the redirect action that is used as the exceed action. Cannot be specified if the exceed action is not redirect.
     * 
     */
    private List<GetSecurityPolicyRuleRateLimitOptionExceedRedirectOption> exceedRedirectOptions;
    /**
     * @return Threshold at which to begin ratelimiting.
     * 
     */
    private List<GetSecurityPolicyRuleRateLimitOptionRateLimitThreshold> rateLimitThresholds;

    private GetSecurityPolicyRuleRateLimitOption() {}
    /**
     * @return Can only be specified if the action for the rule is &#34;rate_based_ban&#34;. If specified, determines the time (in seconds) the traffic will continue to be banned by the rate limit after the rate falls below the threshold.
     * 
     */
    public Integer banDurationSec() {
        return this.banDurationSec;
    }
    /**
     * @return Can only be specified if the action for the rule is &#34;rate_based_ban&#34;. If specified, the key will be banned for the configured &#39;banDurationSec&#39; when the number of requests that exceed the &#39;rateLimitThreshold&#39; also exceed this &#39;banThreshold&#39;.
     * 
     */
    public List<GetSecurityPolicyRuleRateLimitOptionBanThreshold> banThresholds() {
        return this.banThresholds;
    }
    /**
     * @return Action to take for requests that are under the configured rate limit threshold. Valid option is &#34;allow&#34; only.
     * 
     */
    public String conformAction() {
        return this.conformAction;
    }
    /**
     * @return Determines the key to enforce the rateLimitThreshold on
     * 
     */
    public String enforceOnKey() {
        return this.enforceOnKey;
    }
    /**
     * @return Enforce On Key Config of this security policy
     * 
     */
    public List<GetSecurityPolicyRuleRateLimitOptionEnforceOnKeyConfig> enforceOnKeyConfigs() {
        return this.enforceOnKeyConfigs;
    }
    /**
     * @return Rate limit key name applicable only for the following key types: HTTP_HEADER -- Name of the HTTP header whose value is taken as the key value. HTTP_COOKIE -- Name of the HTTP cookie whose value is taken as the key value.
     * 
     */
    public String enforceOnKeyName() {
        return this.enforceOnKeyName;
    }
    /**
     * @return Action to take for requests that are above the configured rate limit threshold, to either deny with a specified HTTP response code, or redirect to a different endpoint. Valid options are &#34;deny()&#34; where valid values for status are 403, 404, 429, and 502, and &#34;redirect&#34; where the redirect parameters come from exceedRedirectOptions below.
     * 
     */
    public String exceedAction() {
        return this.exceedAction;
    }
    /**
     * @return Parameters defining the redirect action that is used as the exceed action. Cannot be specified if the exceed action is not redirect.
     * 
     */
    public List<GetSecurityPolicyRuleRateLimitOptionExceedRedirectOption> exceedRedirectOptions() {
        return this.exceedRedirectOptions;
    }
    /**
     * @return Threshold at which to begin ratelimiting.
     * 
     */
    public List<GetSecurityPolicyRuleRateLimitOptionRateLimitThreshold> rateLimitThresholds() {
        return this.rateLimitThresholds;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSecurityPolicyRuleRateLimitOption defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer banDurationSec;
        private List<GetSecurityPolicyRuleRateLimitOptionBanThreshold> banThresholds;
        private String conformAction;
        private String enforceOnKey;
        private List<GetSecurityPolicyRuleRateLimitOptionEnforceOnKeyConfig> enforceOnKeyConfigs;
        private String enforceOnKeyName;
        private String exceedAction;
        private List<GetSecurityPolicyRuleRateLimitOptionExceedRedirectOption> exceedRedirectOptions;
        private List<GetSecurityPolicyRuleRateLimitOptionRateLimitThreshold> rateLimitThresholds;
        public Builder() {}
        public Builder(GetSecurityPolicyRuleRateLimitOption defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.banDurationSec = defaults.banDurationSec;
    	      this.banThresholds = defaults.banThresholds;
    	      this.conformAction = defaults.conformAction;
    	      this.enforceOnKey = defaults.enforceOnKey;
    	      this.enforceOnKeyConfigs = defaults.enforceOnKeyConfigs;
    	      this.enforceOnKeyName = defaults.enforceOnKeyName;
    	      this.exceedAction = defaults.exceedAction;
    	      this.exceedRedirectOptions = defaults.exceedRedirectOptions;
    	      this.rateLimitThresholds = defaults.rateLimitThresholds;
        }

        @CustomType.Setter
        public Builder banDurationSec(Integer banDurationSec) {
            if (banDurationSec == null) {
              throw new MissingRequiredPropertyException("GetSecurityPolicyRuleRateLimitOption", "banDurationSec");
            }
            this.banDurationSec = banDurationSec;
            return this;
        }
        @CustomType.Setter
        public Builder banThresholds(List<GetSecurityPolicyRuleRateLimitOptionBanThreshold> banThresholds) {
            if (banThresholds == null) {
              throw new MissingRequiredPropertyException("GetSecurityPolicyRuleRateLimitOption", "banThresholds");
            }
            this.banThresholds = banThresholds;
            return this;
        }
        public Builder banThresholds(GetSecurityPolicyRuleRateLimitOptionBanThreshold... banThresholds) {
            return banThresholds(List.of(banThresholds));
        }
        @CustomType.Setter
        public Builder conformAction(String conformAction) {
            if (conformAction == null) {
              throw new MissingRequiredPropertyException("GetSecurityPolicyRuleRateLimitOption", "conformAction");
            }
            this.conformAction = conformAction;
            return this;
        }
        @CustomType.Setter
        public Builder enforceOnKey(String enforceOnKey) {
            if (enforceOnKey == null) {
              throw new MissingRequiredPropertyException("GetSecurityPolicyRuleRateLimitOption", "enforceOnKey");
            }
            this.enforceOnKey = enforceOnKey;
            return this;
        }
        @CustomType.Setter
        public Builder enforceOnKeyConfigs(List<GetSecurityPolicyRuleRateLimitOptionEnforceOnKeyConfig> enforceOnKeyConfigs) {
            if (enforceOnKeyConfigs == null) {
              throw new MissingRequiredPropertyException("GetSecurityPolicyRuleRateLimitOption", "enforceOnKeyConfigs");
            }
            this.enforceOnKeyConfigs = enforceOnKeyConfigs;
            return this;
        }
        public Builder enforceOnKeyConfigs(GetSecurityPolicyRuleRateLimitOptionEnforceOnKeyConfig... enforceOnKeyConfigs) {
            return enforceOnKeyConfigs(List.of(enforceOnKeyConfigs));
        }
        @CustomType.Setter
        public Builder enforceOnKeyName(String enforceOnKeyName) {
            if (enforceOnKeyName == null) {
              throw new MissingRequiredPropertyException("GetSecurityPolicyRuleRateLimitOption", "enforceOnKeyName");
            }
            this.enforceOnKeyName = enforceOnKeyName;
            return this;
        }
        @CustomType.Setter
        public Builder exceedAction(String exceedAction) {
            if (exceedAction == null) {
              throw new MissingRequiredPropertyException("GetSecurityPolicyRuleRateLimitOption", "exceedAction");
            }
            this.exceedAction = exceedAction;
            return this;
        }
        @CustomType.Setter
        public Builder exceedRedirectOptions(List<GetSecurityPolicyRuleRateLimitOptionExceedRedirectOption> exceedRedirectOptions) {
            if (exceedRedirectOptions == null) {
              throw new MissingRequiredPropertyException("GetSecurityPolicyRuleRateLimitOption", "exceedRedirectOptions");
            }
            this.exceedRedirectOptions = exceedRedirectOptions;
            return this;
        }
        public Builder exceedRedirectOptions(GetSecurityPolicyRuleRateLimitOptionExceedRedirectOption... exceedRedirectOptions) {
            return exceedRedirectOptions(List.of(exceedRedirectOptions));
        }
        @CustomType.Setter
        public Builder rateLimitThresholds(List<GetSecurityPolicyRuleRateLimitOptionRateLimitThreshold> rateLimitThresholds) {
            if (rateLimitThresholds == null) {
              throw new MissingRequiredPropertyException("GetSecurityPolicyRuleRateLimitOption", "rateLimitThresholds");
            }
            this.rateLimitThresholds = rateLimitThresholds;
            return this;
        }
        public Builder rateLimitThresholds(GetSecurityPolicyRuleRateLimitOptionRateLimitThreshold... rateLimitThresholds) {
            return rateLimitThresholds(List.of(rateLimitThresholds));
        }
        public GetSecurityPolicyRuleRateLimitOption build() {
            final var _resultValue = new GetSecurityPolicyRuleRateLimitOption();
            _resultValue.banDurationSec = banDurationSec;
            _resultValue.banThresholds = banThresholds;
            _resultValue.conformAction = conformAction;
            _resultValue.enforceOnKey = enforceOnKey;
            _resultValue.enforceOnKeyConfigs = enforceOnKeyConfigs;
            _resultValue.enforceOnKeyName = enforceOnKeyName;
            _resultValue.exceedAction = exceedAction;
            _resultValue.exceedRedirectOptions = exceedRedirectOptions;
            _resultValue.rateLimitThresholds = rateLimitThresholds;
            return _resultValue;
        }
    }
}
