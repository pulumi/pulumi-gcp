// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.diagflow.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.diagflow.inputs.CxToolDataStoreSpecDataStoreConnectionArgs;
import com.pulumi.gcp.diagflow.inputs.CxToolDataStoreSpecFallbackPromptArgs;
import java.util.List;
import java.util.Objects;


public final class CxToolDataStoreSpecArgs extends com.pulumi.resources.ResourceArgs {

    public static final CxToolDataStoreSpecArgs Empty = new CxToolDataStoreSpecArgs();

    /**
     * List of data stores to search.
     * Structure is documented below.
     * 
     */
    @Import(name="dataStoreConnections", required=true)
    private Output<List<CxToolDataStoreSpecDataStoreConnectionArgs>> dataStoreConnections;

    /**
     * @return List of data stores to search.
     * Structure is documented below.
     * 
     */
    public Output<List<CxToolDataStoreSpecDataStoreConnectionArgs>> dataStoreConnections() {
        return this.dataStoreConnections;
    }

    /**
     * Fallback prompt configurations to use.
     * 
     */
    @Import(name="fallbackPrompt", required=true)
    private Output<CxToolDataStoreSpecFallbackPromptArgs> fallbackPrompt;

    /**
     * @return Fallback prompt configurations to use.
     * 
     */
    public Output<CxToolDataStoreSpecFallbackPromptArgs> fallbackPrompt() {
        return this.fallbackPrompt;
    }

    private CxToolDataStoreSpecArgs() {}

    private CxToolDataStoreSpecArgs(CxToolDataStoreSpecArgs $) {
        this.dataStoreConnections = $.dataStoreConnections;
        this.fallbackPrompt = $.fallbackPrompt;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CxToolDataStoreSpecArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CxToolDataStoreSpecArgs $;

        public Builder() {
            $ = new CxToolDataStoreSpecArgs();
        }

        public Builder(CxToolDataStoreSpecArgs defaults) {
            $ = new CxToolDataStoreSpecArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dataStoreConnections List of data stores to search.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder dataStoreConnections(Output<List<CxToolDataStoreSpecDataStoreConnectionArgs>> dataStoreConnections) {
            $.dataStoreConnections = dataStoreConnections;
            return this;
        }

        /**
         * @param dataStoreConnections List of data stores to search.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder dataStoreConnections(List<CxToolDataStoreSpecDataStoreConnectionArgs> dataStoreConnections) {
            return dataStoreConnections(Output.of(dataStoreConnections));
        }

        /**
         * @param dataStoreConnections List of data stores to search.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder dataStoreConnections(CxToolDataStoreSpecDataStoreConnectionArgs... dataStoreConnections) {
            return dataStoreConnections(List.of(dataStoreConnections));
        }

        /**
         * @param fallbackPrompt Fallback prompt configurations to use.
         * 
         * @return builder
         * 
         */
        public Builder fallbackPrompt(Output<CxToolDataStoreSpecFallbackPromptArgs> fallbackPrompt) {
            $.fallbackPrompt = fallbackPrompt;
            return this;
        }

        /**
         * @param fallbackPrompt Fallback prompt configurations to use.
         * 
         * @return builder
         * 
         */
        public Builder fallbackPrompt(CxToolDataStoreSpecFallbackPromptArgs fallbackPrompt) {
            return fallbackPrompt(Output.of(fallbackPrompt));
        }

        public CxToolDataStoreSpecArgs build() {
            if ($.dataStoreConnections == null) {
                throw new MissingRequiredPropertyException("CxToolDataStoreSpecArgs", "dataStoreConnections");
            }
            if ($.fallbackPrompt == null) {
                throw new MissingRequiredPropertyException("CxToolDataStoreSpecArgs", "fallbackPrompt");
            }
            return $;
        }
    }

}
