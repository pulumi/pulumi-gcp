// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.networkconnectivity.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.networkconnectivity.inputs.ServiceConnectionPolicyPscConnectionErrorArgs;
import com.pulumi.gcp.networkconnectivity.inputs.ServiceConnectionPolicyPscConnectionErrorInfoArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceConnectionPolicyPscConnectionArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceConnectionPolicyPscConnectionArgs Empty = new ServiceConnectionPolicyPscConnectionArgs();

    /**
     * The resource reference of the consumer address.
     * 
     */
    @Import(name="consumerAddress")
    private @Nullable Output<String> consumerAddress;

    /**
     * @return The resource reference of the consumer address.
     * 
     */
    public Optional<Output<String>> consumerAddress() {
        return Optional.ofNullable(this.consumerAddress);
    }

    /**
     * The resource reference of the PSC Forwarding Rule within the consumer VPC.
     * 
     */
    @Import(name="consumerForwardingRule")
    private @Nullable Output<String> consumerForwardingRule;

    /**
     * @return The resource reference of the PSC Forwarding Rule within the consumer VPC.
     * 
     */
    public Optional<Output<String>> consumerForwardingRule() {
        return Optional.ofNullable(this.consumerForwardingRule);
    }

    /**
     * The project where the PSC connection is created.
     * 
     */
    @Import(name="consumerTargetProject")
    private @Nullable Output<String> consumerTargetProject;

    /**
     * @return The project where the PSC connection is created.
     * 
     */
    public Optional<Output<String>> consumerTargetProject() {
        return Optional.ofNullable(this.consumerTargetProject);
    }

    /**
     * The most recent error during operating this connection.
     * Structure is documented below.
     * 
     */
    @Import(name="error")
    private @Nullable Output<ServiceConnectionPolicyPscConnectionErrorArgs> error;

    /**
     * @return The most recent error during operating this connection.
     * Structure is documented below.
     * 
     */
    public Optional<Output<ServiceConnectionPolicyPscConnectionErrorArgs>> error() {
        return Optional.ofNullable(this.error);
    }

    /**
     * The error info for the latest error during operating this connection.
     * Structure is documented below.
     * 
     */
    @Import(name="errorInfo")
    private @Nullable Output<ServiceConnectionPolicyPscConnectionErrorInfoArgs> errorInfo;

    /**
     * @return The error info for the latest error during operating this connection.
     * Structure is documented below.
     * 
     */
    public Optional<Output<ServiceConnectionPolicyPscConnectionErrorInfoArgs>> errorInfo() {
        return Optional.ofNullable(this.errorInfo);
    }

    /**
     * The error type indicates whether the error is consumer facing, producer
     * facing or system internal.
     * Possible values are: `CONNECTION_ERROR_TYPE_UNSPECIFIED`, `ERROR_INTERNAL`, `ERROR_CONSUMER_SIDE`, `ERROR_PRODUCER_SIDE`.
     * 
     */
    @Import(name="errorType")
    private @Nullable Output<String> errorType;

    /**
     * @return The error type indicates whether the error is consumer facing, producer
     * facing or system internal.
     * Possible values are: `CONNECTION_ERROR_TYPE_UNSPECIFIED`, `ERROR_INTERNAL`, `ERROR_CONSUMER_SIDE`, `ERROR_PRODUCER_SIDE`.
     * 
     */
    public Optional<Output<String>> errorType() {
        return Optional.ofNullable(this.errorType);
    }

    /**
     * The last Compute Engine operation to setup PSC connection.
     * 
     */
    @Import(name="gceOperation")
    private @Nullable Output<String> gceOperation;

    /**
     * @return The last Compute Engine operation to setup PSC connection.
     * 
     */
    public Optional<Output<String>> gceOperation() {
        return Optional.ofNullable(this.gceOperation);
    }

    /**
     * The PSC connection id of the PSC forwarding rule.
     * 
     */
    @Import(name="pscConnectionId")
    private @Nullable Output<String> pscConnectionId;

    /**
     * @return The PSC connection id of the PSC forwarding rule.
     * 
     */
    public Optional<Output<String>> pscConnectionId() {
        return Optional.ofNullable(this.pscConnectionId);
    }

    /**
     * The state of the PSC connection.
     * Possible values are: `STATE_UNSPECIFIED`, `ACTIVE`, `CREATING`, `DELETING`, `FAILED`.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The state of the PSC connection.
     * Possible values are: `STATE_UNSPECIFIED`, `ACTIVE`, `CREATING`, `DELETING`, `FAILED`.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    private ServiceConnectionPolicyPscConnectionArgs() {}

    private ServiceConnectionPolicyPscConnectionArgs(ServiceConnectionPolicyPscConnectionArgs $) {
        this.consumerAddress = $.consumerAddress;
        this.consumerForwardingRule = $.consumerForwardingRule;
        this.consumerTargetProject = $.consumerTargetProject;
        this.error = $.error;
        this.errorInfo = $.errorInfo;
        this.errorType = $.errorType;
        this.gceOperation = $.gceOperation;
        this.pscConnectionId = $.pscConnectionId;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceConnectionPolicyPscConnectionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceConnectionPolicyPscConnectionArgs $;

        public Builder() {
            $ = new ServiceConnectionPolicyPscConnectionArgs();
        }

        public Builder(ServiceConnectionPolicyPscConnectionArgs defaults) {
            $ = new ServiceConnectionPolicyPscConnectionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param consumerAddress The resource reference of the consumer address.
         * 
         * @return builder
         * 
         */
        public Builder consumerAddress(@Nullable Output<String> consumerAddress) {
            $.consumerAddress = consumerAddress;
            return this;
        }

        /**
         * @param consumerAddress The resource reference of the consumer address.
         * 
         * @return builder
         * 
         */
        public Builder consumerAddress(String consumerAddress) {
            return consumerAddress(Output.of(consumerAddress));
        }

        /**
         * @param consumerForwardingRule The resource reference of the PSC Forwarding Rule within the consumer VPC.
         * 
         * @return builder
         * 
         */
        public Builder consumerForwardingRule(@Nullable Output<String> consumerForwardingRule) {
            $.consumerForwardingRule = consumerForwardingRule;
            return this;
        }

        /**
         * @param consumerForwardingRule The resource reference of the PSC Forwarding Rule within the consumer VPC.
         * 
         * @return builder
         * 
         */
        public Builder consumerForwardingRule(String consumerForwardingRule) {
            return consumerForwardingRule(Output.of(consumerForwardingRule));
        }

        /**
         * @param consumerTargetProject The project where the PSC connection is created.
         * 
         * @return builder
         * 
         */
        public Builder consumerTargetProject(@Nullable Output<String> consumerTargetProject) {
            $.consumerTargetProject = consumerTargetProject;
            return this;
        }

        /**
         * @param consumerTargetProject The project where the PSC connection is created.
         * 
         * @return builder
         * 
         */
        public Builder consumerTargetProject(String consumerTargetProject) {
            return consumerTargetProject(Output.of(consumerTargetProject));
        }

        /**
         * @param error The most recent error during operating this connection.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder error(@Nullable Output<ServiceConnectionPolicyPscConnectionErrorArgs> error) {
            $.error = error;
            return this;
        }

        /**
         * @param error The most recent error during operating this connection.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder error(ServiceConnectionPolicyPscConnectionErrorArgs error) {
            return error(Output.of(error));
        }

        /**
         * @param errorInfo The error info for the latest error during operating this connection.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder errorInfo(@Nullable Output<ServiceConnectionPolicyPscConnectionErrorInfoArgs> errorInfo) {
            $.errorInfo = errorInfo;
            return this;
        }

        /**
         * @param errorInfo The error info for the latest error during operating this connection.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder errorInfo(ServiceConnectionPolicyPscConnectionErrorInfoArgs errorInfo) {
            return errorInfo(Output.of(errorInfo));
        }

        /**
         * @param errorType The error type indicates whether the error is consumer facing, producer
         * facing or system internal.
         * Possible values are: `CONNECTION_ERROR_TYPE_UNSPECIFIED`, `ERROR_INTERNAL`, `ERROR_CONSUMER_SIDE`, `ERROR_PRODUCER_SIDE`.
         * 
         * @return builder
         * 
         */
        public Builder errorType(@Nullable Output<String> errorType) {
            $.errorType = errorType;
            return this;
        }

        /**
         * @param errorType The error type indicates whether the error is consumer facing, producer
         * facing or system internal.
         * Possible values are: `CONNECTION_ERROR_TYPE_UNSPECIFIED`, `ERROR_INTERNAL`, `ERROR_CONSUMER_SIDE`, `ERROR_PRODUCER_SIDE`.
         * 
         * @return builder
         * 
         */
        public Builder errorType(String errorType) {
            return errorType(Output.of(errorType));
        }

        /**
         * @param gceOperation The last Compute Engine operation to setup PSC connection.
         * 
         * @return builder
         * 
         */
        public Builder gceOperation(@Nullable Output<String> gceOperation) {
            $.gceOperation = gceOperation;
            return this;
        }

        /**
         * @param gceOperation The last Compute Engine operation to setup PSC connection.
         * 
         * @return builder
         * 
         */
        public Builder gceOperation(String gceOperation) {
            return gceOperation(Output.of(gceOperation));
        }

        /**
         * @param pscConnectionId The PSC connection id of the PSC forwarding rule.
         * 
         * @return builder
         * 
         */
        public Builder pscConnectionId(@Nullable Output<String> pscConnectionId) {
            $.pscConnectionId = pscConnectionId;
            return this;
        }

        /**
         * @param pscConnectionId The PSC connection id of the PSC forwarding rule.
         * 
         * @return builder
         * 
         */
        public Builder pscConnectionId(String pscConnectionId) {
            return pscConnectionId(Output.of(pscConnectionId));
        }

        /**
         * @param state The state of the PSC connection.
         * Possible values are: `STATE_UNSPECIFIED`, `ACTIVE`, `CREATING`, `DELETING`, `FAILED`.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The state of the PSC connection.
         * Possible values are: `STATE_UNSPECIFIED`, `ACTIVE`, `CREATING`, `DELETING`, `FAILED`.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        public ServiceConnectionPolicyPscConnectionArgs build() {
            return $;
        }
    }

}
