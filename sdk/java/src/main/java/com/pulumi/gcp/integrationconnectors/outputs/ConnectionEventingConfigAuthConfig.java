// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.integrationconnectors.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.integrationconnectors.outputs.ConnectionEventingConfigAuthConfigAdditionalVariable;
import com.pulumi.gcp.integrationconnectors.outputs.ConnectionEventingConfigAuthConfigUserPassword;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ConnectionEventingConfigAuthConfig {
    /**
     * @return List containing additional auth configs.
     * Structure is documented below.
     * 
     */
    private @Nullable List<ConnectionEventingConfigAuthConfigAdditionalVariable> additionalVariables;
    /**
     * @return The type of authentication configured.
     * 
     */
    private @Nullable String authKey;
    /**
     * @return authType of the Connection
     * Possible values are: `USER_PASSWORD`.
     * 
     */
    private String authType;
    /**
     * @return User password for Authentication.
     * Structure is documented below.
     * 
     */
    private ConnectionEventingConfigAuthConfigUserPassword userPassword;

    private ConnectionEventingConfigAuthConfig() {}
    /**
     * @return List containing additional auth configs.
     * Structure is documented below.
     * 
     */
    public List<ConnectionEventingConfigAuthConfigAdditionalVariable> additionalVariables() {
        return this.additionalVariables == null ? List.of() : this.additionalVariables;
    }
    /**
     * @return The type of authentication configured.
     * 
     */
    public Optional<String> authKey() {
        return Optional.ofNullable(this.authKey);
    }
    /**
     * @return authType of the Connection
     * Possible values are: `USER_PASSWORD`.
     * 
     */
    public String authType() {
        return this.authType;
    }
    /**
     * @return User password for Authentication.
     * Structure is documented below.
     * 
     */
    public ConnectionEventingConfigAuthConfigUserPassword userPassword() {
        return this.userPassword;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConnectionEventingConfigAuthConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<ConnectionEventingConfigAuthConfigAdditionalVariable> additionalVariables;
        private @Nullable String authKey;
        private String authType;
        private ConnectionEventingConfigAuthConfigUserPassword userPassword;
        public Builder() {}
        public Builder(ConnectionEventingConfigAuthConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalVariables = defaults.additionalVariables;
    	      this.authKey = defaults.authKey;
    	      this.authType = defaults.authType;
    	      this.userPassword = defaults.userPassword;
        }

        @CustomType.Setter
        public Builder additionalVariables(@Nullable List<ConnectionEventingConfigAuthConfigAdditionalVariable> additionalVariables) {

            this.additionalVariables = additionalVariables;
            return this;
        }
        public Builder additionalVariables(ConnectionEventingConfigAuthConfigAdditionalVariable... additionalVariables) {
            return additionalVariables(List.of(additionalVariables));
        }
        @CustomType.Setter
        public Builder authKey(@Nullable String authKey) {

            this.authKey = authKey;
            return this;
        }
        @CustomType.Setter
        public Builder authType(String authType) {
            if (authType == null) {
              throw new MissingRequiredPropertyException("ConnectionEventingConfigAuthConfig", "authType");
            }
            this.authType = authType;
            return this;
        }
        @CustomType.Setter
        public Builder userPassword(ConnectionEventingConfigAuthConfigUserPassword userPassword) {
            if (userPassword == null) {
              throw new MissingRequiredPropertyException("ConnectionEventingConfigAuthConfig", "userPassword");
            }
            this.userPassword = userPassword;
            return this;
        }
        public ConnectionEventingConfigAuthConfig build() {
            final var _resultValue = new ConnectionEventingConfigAuthConfig();
            _resultValue.additionalVariables = additionalVariables;
            _resultValue.authKey = authKey;
            _resultValue.authType = authType;
            _resultValue.userPassword = userPassword;
            return _resultValue;
        }
    }
}
