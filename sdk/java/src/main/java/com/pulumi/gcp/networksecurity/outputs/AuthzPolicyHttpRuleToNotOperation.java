// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.networksecurity.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.networksecurity.outputs.AuthzPolicyHttpRuleToNotOperationHeaderSet;
import com.pulumi.gcp.networksecurity.outputs.AuthzPolicyHttpRuleToNotOperationHost;
import com.pulumi.gcp.networksecurity.outputs.AuthzPolicyHttpRuleToNotOperationPath;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AuthzPolicyHttpRuleToNotOperation {
    /**
     * @return A list of headers to match against in http header.
     * Structure is documented below.
     * 
     */
    private @Nullable AuthzPolicyHttpRuleToNotOperationHeaderSet headerSet;
    /**
     * @return A list of HTTP Hosts to match against. The match can be one of exact, prefix, suffix, or contains (substring match). Matches are always case sensitive unless the ignoreCase is set.
     * Limited to 10 matches.
     * Structure is documented below.
     * 
     */
    private @Nullable List<AuthzPolicyHttpRuleToNotOperationHost> hosts;
    /**
     * @return A list of HTTP methods to match against. Each entry must be a valid HTTP method name (GET, PUT, POST, HEAD, PATCH, DELETE, OPTIONS). It only allows exact match and is always case sensitive.
     * 
     */
    private @Nullable List<String> methods;
    /**
     * @return A list of paths to match against. The match can be one of exact, prefix, suffix, or contains (substring match). Matches are always case sensitive unless the ignoreCase is set.
     * Limited to 10 matches.
     * Note that this path match includes the query parameters. For gRPC services, this should be a fully-qualified name of the form /package.service/method.
     * Structure is documented below.
     * 
     */
    private @Nullable List<AuthzPolicyHttpRuleToNotOperationPath> paths;

    private AuthzPolicyHttpRuleToNotOperation() {}
    /**
     * @return A list of headers to match against in http header.
     * Structure is documented below.
     * 
     */
    public Optional<AuthzPolicyHttpRuleToNotOperationHeaderSet> headerSet() {
        return Optional.ofNullable(this.headerSet);
    }
    /**
     * @return A list of HTTP Hosts to match against. The match can be one of exact, prefix, suffix, or contains (substring match). Matches are always case sensitive unless the ignoreCase is set.
     * Limited to 10 matches.
     * Structure is documented below.
     * 
     */
    public List<AuthzPolicyHttpRuleToNotOperationHost> hosts() {
        return this.hosts == null ? List.of() : this.hosts;
    }
    /**
     * @return A list of HTTP methods to match against. Each entry must be a valid HTTP method name (GET, PUT, POST, HEAD, PATCH, DELETE, OPTIONS). It only allows exact match and is always case sensitive.
     * 
     */
    public List<String> methods() {
        return this.methods == null ? List.of() : this.methods;
    }
    /**
     * @return A list of paths to match against. The match can be one of exact, prefix, suffix, or contains (substring match). Matches are always case sensitive unless the ignoreCase is set.
     * Limited to 10 matches.
     * Note that this path match includes the query parameters. For gRPC services, this should be a fully-qualified name of the form /package.service/method.
     * Structure is documented below.
     * 
     */
    public List<AuthzPolicyHttpRuleToNotOperationPath> paths() {
        return this.paths == null ? List.of() : this.paths;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AuthzPolicyHttpRuleToNotOperation defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable AuthzPolicyHttpRuleToNotOperationHeaderSet headerSet;
        private @Nullable List<AuthzPolicyHttpRuleToNotOperationHost> hosts;
        private @Nullable List<String> methods;
        private @Nullable List<AuthzPolicyHttpRuleToNotOperationPath> paths;
        public Builder() {}
        public Builder(AuthzPolicyHttpRuleToNotOperation defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.headerSet = defaults.headerSet;
    	      this.hosts = defaults.hosts;
    	      this.methods = defaults.methods;
    	      this.paths = defaults.paths;
        }

        @CustomType.Setter
        public Builder headerSet(@Nullable AuthzPolicyHttpRuleToNotOperationHeaderSet headerSet) {

            this.headerSet = headerSet;
            return this;
        }
        @CustomType.Setter
        public Builder hosts(@Nullable List<AuthzPolicyHttpRuleToNotOperationHost> hosts) {

            this.hosts = hosts;
            return this;
        }
        public Builder hosts(AuthzPolicyHttpRuleToNotOperationHost... hosts) {
            return hosts(List.of(hosts));
        }
        @CustomType.Setter
        public Builder methods(@Nullable List<String> methods) {

            this.methods = methods;
            return this;
        }
        public Builder methods(String... methods) {
            return methods(List.of(methods));
        }
        @CustomType.Setter
        public Builder paths(@Nullable List<AuthzPolicyHttpRuleToNotOperationPath> paths) {

            this.paths = paths;
            return this;
        }
        public Builder paths(AuthzPolicyHttpRuleToNotOperationPath... paths) {
            return paths(List.of(paths));
        }
        public AuthzPolicyHttpRuleToNotOperation build() {
            final var _resultValue = new AuthzPolicyHttpRuleToNotOperation();
            _resultValue.headerSet = headerSet;
            _resultValue.hosts = hosts;
            _resultValue.methods = methods;
            _resultValue.paths = paths;
            return _resultValue;
        }
    }
}
