// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataplex;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.dataplex.inputs.TaskExecutionSpecArgs;
import com.pulumi.gcp.dataplex.inputs.TaskNotebookArgs;
import com.pulumi.gcp.dataplex.inputs.TaskSparkArgs;
import com.pulumi.gcp.dataplex.inputs.TaskTriggerSpecArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TaskArgs extends com.pulumi.resources.ResourceArgs {

    public static final TaskArgs Empty = new TaskArgs();

    /**
     * User-provided description of the task.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return User-provided description of the task.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * User friendly display name.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return User friendly display name.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Configuration for the cluster
     * Structure is documented below.
     * 
     */
    @Import(name="executionSpec", required=true)
    private Output<TaskExecutionSpecArgs> executionSpec;

    /**
     * @return Configuration for the cluster
     * Structure is documented below.
     * 
     */
    public Output<TaskExecutionSpecArgs> executionSpec() {
        return this.executionSpec;
    }

    /**
     * User-defined labels for the task.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return User-defined labels for the task.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * The lake in which the task will be created in.
     * 
     */
    @Import(name="lake")
    private @Nullable Output<String> lake;

    /**
     * @return The lake in which the task will be created in.
     * 
     */
    public Optional<Output<String>> lake() {
        return Optional.ofNullable(this.lake);
    }

    /**
     * The location in which the task will be created in.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The location in which the task will be created in.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * A service with manual scaling runs continuously, allowing you to perform complex initialization and rely on the state of its memory over time.
     * Structure is documented below.
     * 
     * (Required)
     * Path to input notebook. This can be the Cloud Storage URI of the notebook file or the path to a Notebook Content. The execution args are accessible as environment variables (TASK_key=value).
     * 
     */
    @Import(name="notebook")
    private @Nullable Output<TaskNotebookArgs> notebook;

    /**
     * @return A service with manual scaling runs continuously, allowing you to perform complex initialization and rely on the state of its memory over time.
     * Structure is documented below.
     * 
     * (Required)
     * Path to input notebook. This can be the Cloud Storage URI of the notebook file or the path to a Notebook Content. The execution args are accessible as environment variables (TASK_key=value).
     * 
     */
    public Optional<Output<TaskNotebookArgs>> notebook() {
        return Optional.ofNullable(this.notebook);
    }

    /**
     * The project in which jobs are run. By default, the project containing the Lake is used. If a project is provided, the ExecutionSpec.service_account must belong to this project.
     * 
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The project in which jobs are run. By default, the project containing the Lake is used. If a project is provided, the ExecutionSpec.service_account must belong to this project.
     * 
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * A service with manual scaling runs continuously, allowing you to perform complex initialization and rely on the state of its memory over time.
     * Structure is documented below.
     * 
     */
    @Import(name="spark")
    private @Nullable Output<TaskSparkArgs> spark;

    /**
     * @return A service with manual scaling runs continuously, allowing you to perform complex initialization and rely on the state of its memory over time.
     * Structure is documented below.
     * 
     */
    public Optional<Output<TaskSparkArgs>> spark() {
        return Optional.ofNullable(this.spark);
    }

    /**
     * The task Id of the task.
     * 
     */
    @Import(name="taskId")
    private @Nullable Output<String> taskId;

    /**
     * @return The task Id of the task.
     * 
     */
    public Optional<Output<String>> taskId() {
        return Optional.ofNullable(this.taskId);
    }

    /**
     * Configuration for the cluster
     * Structure is documented below.
     * 
     */
    @Import(name="triggerSpec", required=true)
    private Output<TaskTriggerSpecArgs> triggerSpec;

    /**
     * @return Configuration for the cluster
     * Structure is documented below.
     * 
     */
    public Output<TaskTriggerSpecArgs> triggerSpec() {
        return this.triggerSpec;
    }

    private TaskArgs() {}

    private TaskArgs(TaskArgs $) {
        this.description = $.description;
        this.displayName = $.displayName;
        this.executionSpec = $.executionSpec;
        this.labels = $.labels;
        this.lake = $.lake;
        this.location = $.location;
        this.notebook = $.notebook;
        this.project = $.project;
        this.spark = $.spark;
        this.taskId = $.taskId;
        this.triggerSpec = $.triggerSpec;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TaskArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TaskArgs $;

        public Builder() {
            $ = new TaskArgs();
        }

        public Builder(TaskArgs defaults) {
            $ = new TaskArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description User-provided description of the task.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description User-provided description of the task.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName User friendly display name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName User friendly display name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param executionSpec Configuration for the cluster
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder executionSpec(Output<TaskExecutionSpecArgs> executionSpec) {
            $.executionSpec = executionSpec;
            return this;
        }

        /**
         * @param executionSpec Configuration for the cluster
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder executionSpec(TaskExecutionSpecArgs executionSpec) {
            return executionSpec(Output.of(executionSpec));
        }

        /**
         * @param labels User-defined labels for the task.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels User-defined labels for the task.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param lake The lake in which the task will be created in.
         * 
         * @return builder
         * 
         */
        public Builder lake(@Nullable Output<String> lake) {
            $.lake = lake;
            return this;
        }

        /**
         * @param lake The lake in which the task will be created in.
         * 
         * @return builder
         * 
         */
        public Builder lake(String lake) {
            return lake(Output.of(lake));
        }

        /**
         * @param location The location in which the task will be created in.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location in which the task will be created in.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param notebook A service with manual scaling runs continuously, allowing you to perform complex initialization and rely on the state of its memory over time.
         * Structure is documented below.
         * 
         * (Required)
         * Path to input notebook. This can be the Cloud Storage URI of the notebook file or the path to a Notebook Content. The execution args are accessible as environment variables (TASK_key=value).
         * 
         * @return builder
         * 
         */
        public Builder notebook(@Nullable Output<TaskNotebookArgs> notebook) {
            $.notebook = notebook;
            return this;
        }

        /**
         * @param notebook A service with manual scaling runs continuously, allowing you to perform complex initialization and rely on the state of its memory over time.
         * Structure is documented below.
         * 
         * (Required)
         * Path to input notebook. This can be the Cloud Storage URI of the notebook file or the path to a Notebook Content. The execution args are accessible as environment variables (TASK_key=value).
         * 
         * @return builder
         * 
         */
        public Builder notebook(TaskNotebookArgs notebook) {
            return notebook(Output.of(notebook));
        }

        /**
         * @param project The project in which jobs are run. By default, the project containing the Lake is used. If a project is provided, the ExecutionSpec.service_account must belong to this project.
         * 
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The project in which jobs are run. By default, the project containing the Lake is used. If a project is provided, the ExecutionSpec.service_account must belong to this project.
         * 
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param spark A service with manual scaling runs continuously, allowing you to perform complex initialization and rely on the state of its memory over time.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder spark(@Nullable Output<TaskSparkArgs> spark) {
            $.spark = spark;
            return this;
        }

        /**
         * @param spark A service with manual scaling runs continuously, allowing you to perform complex initialization and rely on the state of its memory over time.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder spark(TaskSparkArgs spark) {
            return spark(Output.of(spark));
        }

        /**
         * @param taskId The task Id of the task.
         * 
         * @return builder
         * 
         */
        public Builder taskId(@Nullable Output<String> taskId) {
            $.taskId = taskId;
            return this;
        }

        /**
         * @param taskId The task Id of the task.
         * 
         * @return builder
         * 
         */
        public Builder taskId(String taskId) {
            return taskId(Output.of(taskId));
        }

        /**
         * @param triggerSpec Configuration for the cluster
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder triggerSpec(Output<TaskTriggerSpecArgs> triggerSpec) {
            $.triggerSpec = triggerSpec;
            return this;
        }

        /**
         * @param triggerSpec Configuration for the cluster
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder triggerSpec(TaskTriggerSpecArgs triggerSpec) {
            return triggerSpec(Output.of(triggerSpec));
        }

        public TaskArgs build() {
            $.executionSpec = Objects.requireNonNull($.executionSpec, "expected parameter 'executionSpec' to be non-null");
            $.triggerSpec = Objects.requireNonNull($.triggerSpec, "expected parameter 'triggerSpec' to be non-null");
            return $;
        }
    }

}
