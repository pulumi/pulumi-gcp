// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.networkservices;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.networkservices.HttpRouteArgs;
import com.pulumi.gcp.networkservices.inputs.HttpRouteState;
import com.pulumi.gcp.networkservices.outputs.HttpRouteRule;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * HttpRoute is the resource defining how HTTP traffic should be routed by a Mesh or Gateway resource.
 * 
 * To get more information about HttpRoute, see:
 * 
 * * [API documentation](https://cloud.google.com/traffic-director/docs/reference/network-services/rest/v1beta1/projects.locations.httpRoutes)
 * * How-to Guides
 *     * [Setup HTTP Services](https://cloud.google.com/traffic-director/docs/set-up-envoy-http-mesh)
 * 
 * ## Example Usage
 * 
 * ### Network Services Http Route Basic
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.networkservices.HttpRoute;
 * import com.pulumi.gcp.networkservices.HttpRouteArgs;
 * import com.pulumi.gcp.networkservices.inputs.HttpRouteRuleArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var default_ = new HttpRoute("default", HttpRouteArgs.builder()
 *             .name("my-http-route")
 *             .labels(Map.of("foo", "bar"))
 *             .description("my description")
 *             .hostnames("example")
 *             .rules(HttpRouteRuleArgs.builder()
 *                 .matches(HttpRouteRuleMatchArgs.builder()
 *                     .queryParameters(HttpRouteRuleMatchQueryParameterArgs.builder()
 *                         .queryParameter("key")
 *                         .exactMatch("value")
 *                         .build())
 *                     .fullPathMatch("example")
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Network Services Http Route Matches And Actions
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.networkservices.HttpRoute;
 * import com.pulumi.gcp.networkservices.HttpRouteArgs;
 * import com.pulumi.gcp.networkservices.inputs.HttpRouteRuleArgs;
 * import com.pulumi.gcp.networkservices.inputs.HttpRouteRuleActionArgs;
 * import com.pulumi.gcp.networkservices.inputs.HttpRouteRuleActionRedirectArgs;
 * import com.pulumi.gcp.networkservices.inputs.HttpRouteRuleActionUrlRewriteArgs;
 * import com.pulumi.gcp.networkservices.inputs.HttpRouteRuleActionRetryPolicyArgs;
 * import com.pulumi.gcp.networkservices.inputs.HttpRouteRuleActionRequestMirrorPolicyArgs;
 * import com.pulumi.gcp.networkservices.inputs.HttpRouteRuleActionRequestMirrorPolicyDestinationArgs;
 * import com.pulumi.gcp.networkservices.inputs.HttpRouteRuleActionCorsPolicyArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var default_ = new HttpRoute("default", HttpRouteArgs.builder()
 *             .name("my-http-route")
 *             .labels(Map.of("foo", "bar"))
 *             .description("my description")
 *             .hostnames("example")
 *             .rules(HttpRouteRuleArgs.builder()
 *                 .matches(                
 *                     HttpRouteRuleMatchArgs.builder()
 *                         .headers(HttpRouteRuleMatchHeaderArgs.builder()
 *                             .header("header")
 *                             .invertMatch(false)
 *                             .regexMatch("header-value")
 *                             .build())
 *                         .queryParameters(HttpRouteRuleMatchQueryParameterArgs.builder()
 *                             .queryParameter("key")
 *                             .exactMatch("value")
 *                             .build())
 *                         .prefixMatch("example")
 *                         .ignoreCase(false)
 *                         .build(),
 *                     HttpRouteRuleMatchArgs.builder()
 *                         .headers(HttpRouteRuleMatchHeaderArgs.builder()
 *                             .header("header")
 *                             .invertMatch(false)
 *                             .presentMatch(true)
 *                             .build())
 *                         .queryParameters(HttpRouteRuleMatchQueryParameterArgs.builder()
 *                             .queryParameter("key")
 *                             .regexMatch("value")
 *                             .build())
 *                         .regexMatch("example")
 *                         .ignoreCase(false)
 *                         .build(),
 *                     HttpRouteRuleMatchArgs.builder()
 *                         .headers(HttpRouteRuleMatchHeaderArgs.builder()
 *                             .header("header")
 *                             .invertMatch(false)
 *                             .presentMatch(true)
 *                             .build())
 *                         .queryParameters(HttpRouteRuleMatchQueryParameterArgs.builder()
 *                             .queryParameter("key")
 *                             .presentMatch(true)
 *                             .build())
 *                         .fullPathMatch("example")
 *                         .ignoreCase(false)
 *                         .build())
 *                 .action(HttpRouteRuleActionArgs.builder()
 *                     .redirect(HttpRouteRuleActionRedirectArgs.builder()
 *                         .hostRedirect("new-host")
 *                         .pathRedirect("new-path")
 *                         .prefixRewrite("new-prefix")
 *                         .httpsRedirect(true)
 *                         .stripQuery(true)
 *                         .portRedirect(8081)
 *                         .build())
 *                     .urlRewrite(HttpRouteRuleActionUrlRewriteArgs.builder()
 *                         .pathPrefixRewrite("new-prefix")
 *                         .hostRewrite("new-host")
 *                         .build())
 *                     .retryPolicy(HttpRouteRuleActionRetryPolicyArgs.builder()
 *                         .retryConditions("server_error")
 *                         .numRetries(1)
 *                         .perTryTimeout("1s")
 *                         .build())
 *                     .requestMirrorPolicy(HttpRouteRuleActionRequestMirrorPolicyArgs.builder()
 *                         .destination(HttpRouteRuleActionRequestMirrorPolicyDestinationArgs.builder()
 *                             .serviceName("new")
 *                             .weight(1)
 *                             .build())
 *                         .build())
 *                     .corsPolicy(HttpRouteRuleActionCorsPolicyArgs.builder()
 *                         .allowOrigins("example")
 *                         .allowMethods(                        
 *                             "GET",
 *                             "PUT")
 *                         .allowHeaders(                        
 *                             "version",
 *                             "type")
 *                         .exposeHeaders(                        
 *                             "version",
 *                             "type")
 *                         .maxAge("1s")
 *                         .allowCredentials(true)
 *                         .disabled(false)
 *                         .build())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Network Services Http Route Actions
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.networkservices.HttpRoute;
 * import com.pulumi.gcp.networkservices.HttpRouteArgs;
 * import com.pulumi.gcp.networkservices.inputs.HttpRouteRuleArgs;
 * import com.pulumi.gcp.networkservices.inputs.HttpRouteRuleActionArgs;
 * import com.pulumi.gcp.networkservices.inputs.HttpRouteRuleActionFaultInjectionPolicyArgs;
 * import com.pulumi.gcp.networkservices.inputs.HttpRouteRuleActionFaultInjectionPolicyDelayArgs;
 * import com.pulumi.gcp.networkservices.inputs.HttpRouteRuleActionFaultInjectionPolicyAbortArgs;
 * import com.pulumi.gcp.networkservices.inputs.HttpRouteRuleActionUrlRewriteArgs;
 * import com.pulumi.gcp.networkservices.inputs.HttpRouteRuleActionRetryPolicyArgs;
 * import com.pulumi.gcp.networkservices.inputs.HttpRouteRuleActionRequestMirrorPolicyArgs;
 * import com.pulumi.gcp.networkservices.inputs.HttpRouteRuleActionRequestMirrorPolicyDestinationArgs;
 * import com.pulumi.gcp.networkservices.inputs.HttpRouteRuleActionCorsPolicyArgs;
 * import com.pulumi.gcp.networkservices.inputs.HttpRouteRuleActionRequestHeaderModifierArgs;
 * import com.pulumi.gcp.networkservices.inputs.HttpRouteRuleActionResponseHeaderModifierArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var default_ = new HttpRoute("default", HttpRouteArgs.builder()
 *             .name("my-http-route")
 *             .labels(Map.of("foo", "bar"))
 *             .description("my description")
 *             .hostnames("example")
 *             .rules(HttpRouteRuleArgs.builder()
 *                 .action(HttpRouteRuleActionArgs.builder()
 *                     .faultInjectionPolicy(HttpRouteRuleActionFaultInjectionPolicyArgs.builder()
 *                         .delay(HttpRouteRuleActionFaultInjectionPolicyDelayArgs.builder()
 *                             .fixedDelay("1s")
 *                             .percentage(1)
 *                             .build())
 *                         .abort(HttpRouteRuleActionFaultInjectionPolicyAbortArgs.builder()
 *                             .httpStatus(500)
 *                             .percentage(1)
 *                             .build())
 *                         .build())
 *                     .urlRewrite(HttpRouteRuleActionUrlRewriteArgs.builder()
 *                         .pathPrefixRewrite("new-prefix")
 *                         .hostRewrite("new-host")
 *                         .build())
 *                     .retryPolicy(HttpRouteRuleActionRetryPolicyArgs.builder()
 *                         .retryConditions("server_error")
 *                         .numRetries(1)
 *                         .perTryTimeout("1s")
 *                         .build())
 *                     .requestMirrorPolicy(HttpRouteRuleActionRequestMirrorPolicyArgs.builder()
 *                         .destination(HttpRouteRuleActionRequestMirrorPolicyDestinationArgs.builder()
 *                             .serviceName("new")
 *                             .weight(1)
 *                             .build())
 *                         .build())
 *                     .corsPolicy(HttpRouteRuleActionCorsPolicyArgs.builder()
 *                         .allowOrigins("example")
 *                         .allowMethods(                        
 *                             "GET",
 *                             "PUT")
 *                         .allowHeaders(                        
 *                             "version",
 *                             "type")
 *                         .exposeHeaders(                        
 *                             "version",
 *                             "type")
 *                         .maxAge("1s")
 *                         .allowCredentials(true)
 *                         .disabled(false)
 *                         .build())
 *                     .requestHeaderModifier(HttpRouteRuleActionRequestHeaderModifierArgs.builder()
 *                         .set(Map.ofEntries(
 *                             Map.entry("version", "1"),
 *                             Map.entry("type", "json")
 *                         ))
 *                         .add(Map.of("minor-version", "1"))
 *                         .removes("arg")
 *                         .build())
 *                     .responseHeaderModifier(HttpRouteRuleActionResponseHeaderModifierArgs.builder()
 *                         .set(Map.ofEntries(
 *                             Map.entry("version", "1"),
 *                             Map.entry("type", "json")
 *                         ))
 *                         .add(Map.of("minor-version", "1"))
 *                         .removes("removearg")
 *                         .build())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Network Services Http Route Mesh Basic
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.networkservices.Mesh;
 * import com.pulumi.gcp.networkservices.MeshArgs;
 * import com.pulumi.gcp.networkservices.HttpRoute;
 * import com.pulumi.gcp.networkservices.HttpRouteArgs;
 * import com.pulumi.gcp.networkservices.inputs.HttpRouteRuleArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var default_ = new Mesh("default", MeshArgs.builder()
 *             .name("my-http-route")
 *             .labels(Map.of("foo", "bar"))
 *             .description("my description")
 *             .build());
 * 
 *         var defaultHttpRoute = new HttpRoute("defaultHttpRoute", HttpRouteArgs.builder()
 *             .name("my-http-route")
 *             .labels(Map.of("foo", "bar"))
 *             .description("my description")
 *             .hostnames("example")
 *             .meshes(default_.id())
 *             .rules(HttpRouteRuleArgs.builder()
 *                 .matches(HttpRouteRuleMatchArgs.builder()
 *                     .queryParameters(HttpRouteRuleMatchQueryParameterArgs.builder()
 *                         .queryParameter("key")
 *                         .exactMatch("value")
 *                         .build())
 *                     .fullPathMatch("example")
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * HttpRoute can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/locations/global/httpRoutes/{{name}}`
 * 
 * * `{{project}}/{{name}}`
 * 
 * * `{{name}}`
 * 
 * When using the `pulumi import` command, HttpRoute can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:networkservices/httpRoute:HttpRoute default projects/{{project}}/locations/global/httpRoutes/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:networkservices/httpRoute:HttpRoute default {{project}}/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:networkservices/httpRoute:HttpRoute default {{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:networkservices/httpRoute:HttpRoute")
public class HttpRoute extends com.pulumi.resources.CustomResource {
    /**
     * Time the HttpRoute was created in UTC.
     * 
     */
    @Export(name="createTime", refs={String.class}, tree="[0]")
    private Output<String> createTime;

    /**
     * @return Time the HttpRoute was created in UTC.
     * 
     */
    public Output<String> createTime() {
        return this.createTime;
    }
    /**
     * A free-text description of the resource. Max length 1024 characters.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return A free-text description of the resource. Max length 1024 characters.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    @Export(name="effectiveLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> effectiveLabels;

    /**
     * @return All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
     * 
     */
    public Output<Map<String,String>> effectiveLabels() {
        return this.effectiveLabels;
    }
    /**
     * Gateways defines a list of gateways this HttpRoute is attached to, as one of the routing rules to route the requests served by the gateway.
     * Each gateway reference should match the pattern: projects/*&#47;locations/global/gateways/&lt;gateway_name&gt;
     * 
     */
    @Export(name="gateways", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> gateways;

    /**
     * @return Gateways defines a list of gateways this HttpRoute is attached to, as one of the routing rules to route the requests served by the gateway.
     * Each gateway reference should match the pattern: projects/*&#47;locations/global/gateways/&lt;gateway_name&gt;
     * 
     */
    public Output<Optional<List<String>>> gateways() {
        return Codegen.optional(this.gateways);
    }
    /**
     * Set of hosts that should match against the HTTP host header to select a HttpRoute to process the request.
     * 
     */
    @Export(name="hostnames", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> hostnames;

    /**
     * @return Set of hosts that should match against the HTTP host header to select a HttpRoute to process the request.
     * 
     */
    public Output<List<String>> hostnames() {
        return this.hostnames;
    }
    /**
     * Set of label tags associated with the HttpRoute resource.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    @Export(name="labels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> labels;

    /**
     * @return Set of label tags associated with the HttpRoute resource.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    public Output<Optional<Map<String,String>>> labels() {
        return Codegen.optional(this.labels);
    }
    /**
     * Meshes defines a list of meshes this HttpRoute is attached to, as one of the routing rules to route the requests served by the mesh.
     * Each mesh reference should match the pattern: projects/*&#47;locations/global/meshes/&lt;mesh_name&gt;.
     * The attached Mesh should be of a type SIDECAR.
     * 
     */
    @Export(name="meshes", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> meshes;

    /**
     * @return Meshes defines a list of meshes this HttpRoute is attached to, as one of the routing rules to route the requests served by the mesh.
     * Each mesh reference should match the pattern: projects/*&#47;locations/global/meshes/&lt;mesh_name&gt;.
     * The attached Mesh should be of a type SIDECAR.
     * 
     */
    public Output<Optional<List<String>>> meshes() {
        return Codegen.optional(this.meshes);
    }
    /**
     * Name of the HttpRoute resource.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the HttpRoute resource.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    @Export(name="pulumiLabels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> pulumiLabels;

    /**
     * @return The combination of labels configured directly on the resource
     * and default labels configured on the provider.
     * 
     */
    public Output<Map<String,String>> pulumiLabels() {
        return this.pulumiLabels;
    }
    /**
     * Rules that define how traffic is routed and handled.
     * Structure is documented below.
     * 
     */
    @Export(name="rules", refs={List.class,HttpRouteRule.class}, tree="[0,1]")
    private Output<List<HttpRouteRule>> rules;

    /**
     * @return Rules that define how traffic is routed and handled.
     * Structure is documented below.
     * 
     */
    public Output<List<HttpRouteRule>> rules() {
        return this.rules;
    }
    /**
     * Server-defined URL of this resource.
     * 
     */
    @Export(name="selfLink", refs={String.class}, tree="[0]")
    private Output<String> selfLink;

    /**
     * @return Server-defined URL of this resource.
     * 
     */
    public Output<String> selfLink() {
        return this.selfLink;
    }
    /**
     * Time the HttpRoute was updated in UTC.
     * 
     */
    @Export(name="updateTime", refs={String.class}, tree="[0]")
    private Output<String> updateTime;

    /**
     * @return Time the HttpRoute was updated in UTC.
     * 
     */
    public Output<String> updateTime() {
        return this.updateTime;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public HttpRoute(java.lang.String name) {
        this(name, HttpRouteArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public HttpRoute(java.lang.String name, HttpRouteArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public HttpRoute(java.lang.String name, HttpRouteArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:networkservices/httpRoute:HttpRoute", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private HttpRoute(java.lang.String name, Output<java.lang.String> id, @Nullable HttpRouteState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:networkservices/httpRoute:HttpRoute", name, state, makeResourceOptions(options, id), false);
    }

    private static HttpRouteArgs makeArgs(HttpRouteArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? HttpRouteArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "effectiveLabels",
                "pulumiLabels"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static HttpRoute get(java.lang.String name, Output<java.lang.String> id, @Nullable HttpRouteState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new HttpRoute(name, id, state, options);
    }
}
