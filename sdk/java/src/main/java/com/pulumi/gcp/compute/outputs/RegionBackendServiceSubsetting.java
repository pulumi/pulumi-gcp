// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RegionBackendServiceSubsetting {
    /**
     * @return The algorithm used for subsetting.
     * Possible values are: `CONSISTENT_HASH_SUBSETTING`.
     * 
     */
    private String policy;
    /**
     * @return The number of backends per backend group assigned to each proxy instance or each service mesh client.
     * An input parameter to the CONSISTENT_HASH_SUBSETTING algorithm. Can only be set if policy is set to
     * CONSISTENT_HASH_SUBSETTING. Can only be set if load balancing scheme is INTERNAL_MANAGED or INTERNAL_SELF_MANAGED.
     * subsetSize is optional for Internal HTTP(S) load balancing and required for Traffic Director.
     * If you do not provide this value, Cloud Load Balancing will calculate it dynamically to optimize the number
     * of proxies/clients visible to each backend and vice versa.
     * Must be greater than 0. If subsetSize is larger than the number of backends/endpoints, then subsetting is disabled.
     * 
     */
    private @Nullable Integer subsetSize;

    private RegionBackendServiceSubsetting() {}
    /**
     * @return The algorithm used for subsetting.
     * Possible values are: `CONSISTENT_HASH_SUBSETTING`.
     * 
     */
    public String policy() {
        return this.policy;
    }
    /**
     * @return The number of backends per backend group assigned to each proxy instance or each service mesh client.
     * An input parameter to the CONSISTENT_HASH_SUBSETTING algorithm. Can only be set if policy is set to
     * CONSISTENT_HASH_SUBSETTING. Can only be set if load balancing scheme is INTERNAL_MANAGED or INTERNAL_SELF_MANAGED.
     * subsetSize is optional for Internal HTTP(S) load balancing and required for Traffic Director.
     * If you do not provide this value, Cloud Load Balancing will calculate it dynamically to optimize the number
     * of proxies/clients visible to each backend and vice versa.
     * Must be greater than 0. If subsetSize is larger than the number of backends/endpoints, then subsetting is disabled.
     * 
     */
    public Optional<Integer> subsetSize() {
        return Optional.ofNullable(this.subsetSize);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RegionBackendServiceSubsetting defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String policy;
        private @Nullable Integer subsetSize;
        public Builder() {}
        public Builder(RegionBackendServiceSubsetting defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.policy = defaults.policy;
    	      this.subsetSize = defaults.subsetSize;
        }

        @CustomType.Setter
        public Builder policy(String policy) {
            if (policy == null) {
              throw new MissingRequiredPropertyException("RegionBackendServiceSubsetting", "policy");
            }
            this.policy = policy;
            return this;
        }
        @CustomType.Setter
        public Builder subsetSize(@Nullable Integer subsetSize) {

            this.subsetSize = subsetSize;
            return this;
        }
        public RegionBackendServiceSubsetting build() {
            final var _resultValue = new RegionBackendServiceSubsetting();
            _resultValue.policy = policy;
            _resultValue.subsetSize = subsetSize;
            return _resultValue;
        }
    }
}
