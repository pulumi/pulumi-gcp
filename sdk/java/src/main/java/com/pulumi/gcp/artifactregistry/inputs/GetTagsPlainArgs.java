// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.artifactregistry.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetTagsPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetTagsPlainArgs Empty = new GetTagsPlainArgs();

    /**
     * An expression for filtering the results of the request. Filter rules are case insensitive. The fields eligible for filtering are `name` and `version`. Further information can be found in the [REST API](https://cloud.google.com/artifact-registry/docs/reference/rest/v1/projects.locations.repositories.packages.tags/list#query-parameters).
     * 
     */
    @Import(name="filter")
    private @Nullable String filter;

    /**
     * @return An expression for filtering the results of the request. Filter rules are case insensitive. The fields eligible for filtering are `name` and `version`. Further information can be found in the [REST API](https://cloud.google.com/artifact-registry/docs/reference/rest/v1/projects.locations.repositories.packages.tags/list#query-parameters).
     * 
     */
    public Optional<String> filter() {
        return Optional.ofNullable(this.filter);
    }

    /**
     * The location of the Artifact Registry repository.
     * 
     */
    @Import(name="location", required=true)
    private String location;

    /**
     * @return The location of the Artifact Registry repository.
     * 
     */
    public String location() {
        return this.location;
    }

    /**
     * The name of the package.
     * 
     */
    @Import(name="packageName", required=true)
    private String packageName;

    /**
     * @return The name of the package.
     * 
     */
    public String packageName() {
        return this.packageName;
    }

    /**
     * The project ID in which the resource belongs. If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable String project;

    /**
     * @return The project ID in which the resource belongs. If it is not provided, the provider project is used.
     * 
     */
    public Optional<String> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The last part of the repository name to fetch from.
     * 
     */
    @Import(name="repositoryId", required=true)
    private String repositoryId;

    /**
     * @return The last part of the repository name to fetch from.
     * 
     */
    public String repositoryId() {
        return this.repositoryId;
    }

    private GetTagsPlainArgs() {}

    private GetTagsPlainArgs(GetTagsPlainArgs $) {
        this.filter = $.filter;
        this.location = $.location;
        this.packageName = $.packageName;
        this.project = $.project;
        this.repositoryId = $.repositoryId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetTagsPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetTagsPlainArgs $;

        public Builder() {
            $ = new GetTagsPlainArgs();
        }

        public Builder(GetTagsPlainArgs defaults) {
            $ = new GetTagsPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param filter An expression for filtering the results of the request. Filter rules are case insensitive. The fields eligible for filtering are `name` and `version`. Further information can be found in the [REST API](https://cloud.google.com/artifact-registry/docs/reference/rest/v1/projects.locations.repositories.packages.tags/list#query-parameters).
         * 
         * @return builder
         * 
         */
        public Builder filter(@Nullable String filter) {
            $.filter = filter;
            return this;
        }

        /**
         * @param location The location of the Artifact Registry repository.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            $.location = location;
            return this;
        }

        /**
         * @param packageName The name of the package.
         * 
         * @return builder
         * 
         */
        public Builder packageName(String packageName) {
            $.packageName = packageName;
            return this;
        }

        /**
         * @param project The project ID in which the resource belongs. If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable String project) {
            $.project = project;
            return this;
        }

        /**
         * @param repositoryId The last part of the repository name to fetch from.
         * 
         * @return builder
         * 
         */
        public Builder repositoryId(String repositoryId) {
            $.repositoryId = repositoryId;
            return this;
        }

        public GetTagsPlainArgs build() {
            if ($.location == null) {
                throw new MissingRequiredPropertyException("GetTagsPlainArgs", "location");
            }
            if ($.packageName == null) {
                throw new MissingRequiredPropertyException("GetTagsPlainArgs", "packageName");
            }
            if ($.repositoryId == null) {
                throw new MissingRequiredPropertyException("GetTagsPlainArgs", "repositoryId");
            }
            return $;
        }
    }

}
