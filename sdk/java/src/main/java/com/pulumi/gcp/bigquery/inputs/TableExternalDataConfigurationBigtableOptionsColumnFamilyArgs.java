// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.bigquery.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.bigquery.inputs.TableExternalDataConfigurationBigtableOptionsColumnFamilyColumnArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TableExternalDataConfigurationBigtableOptionsColumnFamilyArgs extends com.pulumi.resources.ResourceArgs {

    public static final TableExternalDataConfigurationBigtableOptionsColumnFamilyArgs Empty = new TableExternalDataConfigurationBigtableOptionsColumnFamilyArgs();

    /**
     * A List of columns that should be exposed as individual fields as opposed to a list of (column name, value) pairs. All columns whose qualifier matches a qualifier in this list can be accessed as Other columns can be accessed as a list through column field.  Structure is documented below.
     * 
     */
    @Import(name="columns")
    private @Nullable Output<List<TableExternalDataConfigurationBigtableOptionsColumnFamilyColumnArgs>> columns;

    /**
     * @return A List of columns that should be exposed as individual fields as opposed to a list of (column name, value) pairs. All columns whose qualifier matches a qualifier in this list can be accessed as Other columns can be accessed as a list through column field.  Structure is documented below.
     * 
     */
    public Optional<Output<List<TableExternalDataConfigurationBigtableOptionsColumnFamilyColumnArgs>>> columns() {
        return Optional.ofNullable(this.columns);
    }

    /**
     * The encoding of the values when the type is not STRING. Acceptable encoding values are: TEXT - indicates values are alphanumeric text strings. BINARY - indicates values are encoded using HBase Bytes.toBytes family of functions. This can be overridden for a specific column by listing that column in &#39;columns&#39; and specifying an encoding for it.
     * 
     */
    @Import(name="encoding")
    private @Nullable Output<String> encoding;

    /**
     * @return The encoding of the values when the type is not STRING. Acceptable encoding values are: TEXT - indicates values are alphanumeric text strings. BINARY - indicates values are encoded using HBase Bytes.toBytes family of functions. This can be overridden for a specific column by listing that column in &#39;columns&#39; and specifying an encoding for it.
     * 
     */
    public Optional<Output<String>> encoding() {
        return Optional.ofNullable(this.encoding);
    }

    /**
     * Identifier of the column family.
     * 
     */
    @Import(name="familyId")
    private @Nullable Output<String> familyId;

    /**
     * @return Identifier of the column family.
     * 
     */
    public Optional<Output<String>> familyId() {
        return Optional.ofNullable(this.familyId);
    }

    /**
     * If this is set only the latest version of value are exposed for all columns in this column family. This can be overridden for a specific column by listing that column in &#39;columns&#39; and specifying a different setting for that column.
     * 
     */
    @Import(name="onlyReadLatest")
    private @Nullable Output<Boolean> onlyReadLatest;

    /**
     * @return If this is set only the latest version of value are exposed for all columns in this column family. This can be overridden for a specific column by listing that column in &#39;columns&#39; and specifying a different setting for that column.
     * 
     */
    public Optional<Output<Boolean>> onlyReadLatest() {
        return Optional.ofNullable(this.onlyReadLatest);
    }

    /**
     * The type to convert the value in cells of this column family. The values are expected to be encoded using HBase Bytes.toBytes function when using the BINARY encoding value. Following BigQuery types are allowed (case-sensitive): &#34;BYTES&#34;, &#34;STRING&#34;, &#34;INTEGER&#34;, &#34;FLOAT&#34;, &#34;BOOLEAN&#34;, &#34;JSON&#34;. Default type is BYTES. This can be overridden for a specific column by listing that column in &#39;columns&#39; and specifying a type for it.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The type to convert the value in cells of this column family. The values are expected to be encoded using HBase Bytes.toBytes function when using the BINARY encoding value. Following BigQuery types are allowed (case-sensitive): &#34;BYTES&#34;, &#34;STRING&#34;, &#34;INTEGER&#34;, &#34;FLOAT&#34;, &#34;BOOLEAN&#34;, &#34;JSON&#34;. Default type is BYTES. This can be overridden for a specific column by listing that column in &#39;columns&#39; and specifying a type for it.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private TableExternalDataConfigurationBigtableOptionsColumnFamilyArgs() {}

    private TableExternalDataConfigurationBigtableOptionsColumnFamilyArgs(TableExternalDataConfigurationBigtableOptionsColumnFamilyArgs $) {
        this.columns = $.columns;
        this.encoding = $.encoding;
        this.familyId = $.familyId;
        this.onlyReadLatest = $.onlyReadLatest;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TableExternalDataConfigurationBigtableOptionsColumnFamilyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TableExternalDataConfigurationBigtableOptionsColumnFamilyArgs $;

        public Builder() {
            $ = new TableExternalDataConfigurationBigtableOptionsColumnFamilyArgs();
        }

        public Builder(TableExternalDataConfigurationBigtableOptionsColumnFamilyArgs defaults) {
            $ = new TableExternalDataConfigurationBigtableOptionsColumnFamilyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param columns A List of columns that should be exposed as individual fields as opposed to a list of (column name, value) pairs. All columns whose qualifier matches a qualifier in this list can be accessed as Other columns can be accessed as a list through column field.  Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder columns(@Nullable Output<List<TableExternalDataConfigurationBigtableOptionsColumnFamilyColumnArgs>> columns) {
            $.columns = columns;
            return this;
        }

        /**
         * @param columns A List of columns that should be exposed as individual fields as opposed to a list of (column name, value) pairs. All columns whose qualifier matches a qualifier in this list can be accessed as Other columns can be accessed as a list through column field.  Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder columns(List<TableExternalDataConfigurationBigtableOptionsColumnFamilyColumnArgs> columns) {
            return columns(Output.of(columns));
        }

        /**
         * @param columns A List of columns that should be exposed as individual fields as opposed to a list of (column name, value) pairs. All columns whose qualifier matches a qualifier in this list can be accessed as Other columns can be accessed as a list through column field.  Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder columns(TableExternalDataConfigurationBigtableOptionsColumnFamilyColumnArgs... columns) {
            return columns(List.of(columns));
        }

        /**
         * @param encoding The encoding of the values when the type is not STRING. Acceptable encoding values are: TEXT - indicates values are alphanumeric text strings. BINARY - indicates values are encoded using HBase Bytes.toBytes family of functions. This can be overridden for a specific column by listing that column in &#39;columns&#39; and specifying an encoding for it.
         * 
         * @return builder
         * 
         */
        public Builder encoding(@Nullable Output<String> encoding) {
            $.encoding = encoding;
            return this;
        }

        /**
         * @param encoding The encoding of the values when the type is not STRING. Acceptable encoding values are: TEXT - indicates values are alphanumeric text strings. BINARY - indicates values are encoded using HBase Bytes.toBytes family of functions. This can be overridden for a specific column by listing that column in &#39;columns&#39; and specifying an encoding for it.
         * 
         * @return builder
         * 
         */
        public Builder encoding(String encoding) {
            return encoding(Output.of(encoding));
        }

        /**
         * @param familyId Identifier of the column family.
         * 
         * @return builder
         * 
         */
        public Builder familyId(@Nullable Output<String> familyId) {
            $.familyId = familyId;
            return this;
        }

        /**
         * @param familyId Identifier of the column family.
         * 
         * @return builder
         * 
         */
        public Builder familyId(String familyId) {
            return familyId(Output.of(familyId));
        }

        /**
         * @param onlyReadLatest If this is set only the latest version of value are exposed for all columns in this column family. This can be overridden for a specific column by listing that column in &#39;columns&#39; and specifying a different setting for that column.
         * 
         * @return builder
         * 
         */
        public Builder onlyReadLatest(@Nullable Output<Boolean> onlyReadLatest) {
            $.onlyReadLatest = onlyReadLatest;
            return this;
        }

        /**
         * @param onlyReadLatest If this is set only the latest version of value are exposed for all columns in this column family. This can be overridden for a specific column by listing that column in &#39;columns&#39; and specifying a different setting for that column.
         * 
         * @return builder
         * 
         */
        public Builder onlyReadLatest(Boolean onlyReadLatest) {
            return onlyReadLatest(Output.of(onlyReadLatest));
        }

        /**
         * @param type The type to convert the value in cells of this column family. The values are expected to be encoded using HBase Bytes.toBytes function when using the BINARY encoding value. Following BigQuery types are allowed (case-sensitive): &#34;BYTES&#34;, &#34;STRING&#34;, &#34;INTEGER&#34;, &#34;FLOAT&#34;, &#34;BOOLEAN&#34;, &#34;JSON&#34;. Default type is BYTES. This can be overridden for a specific column by listing that column in &#39;columns&#39; and specifying a type for it.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type to convert the value in cells of this column family. The values are expected to be encoded using HBase Bytes.toBytes function when using the BINARY encoding value. Following BigQuery types are allowed (case-sensitive): &#34;BYTES&#34;, &#34;STRING&#34;, &#34;INTEGER&#34;, &#34;FLOAT&#34;, &#34;BOOLEAN&#34;, &#34;JSON&#34;. Default type is BYTES. This can be overridden for a specific column by listing that column in &#39;columns&#39; and specifying a type for it.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public TableExternalDataConfigurationBigtableOptionsColumnFamilyArgs build() {
            return $;
        }
    }

}
