// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.diagflow.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CxAgentClientCertificateSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final CxAgentClientCertificateSettingsArgs Empty = new CxAgentClientCertificateSettingsArgs();

    /**
     * The name of the SecretManager secret version resource storing the passphrase. &#39;passphrase&#39; should be left unset if the private key is not encrypted. Format: **projects/{project}/secrets/{secret}/versions/{version}**
     * 
     */
    @Import(name="passphrase")
    private @Nullable Output<String> passphrase;

    /**
     * @return The name of the SecretManager secret version resource storing the passphrase. &#39;passphrase&#39; should be left unset if the private key is not encrypted. Format: **projects/{project}/secrets/{secret}/versions/{version}**
     * 
     */
    public Optional<Output<String>> passphrase() {
        return Optional.ofNullable(this.passphrase);
    }

    /**
     * The name of the SecretManager secret version resource storing the private key encoded in PEM format. Format: **projects/{project}/secrets/{secret}/versions/{version}**
     * 
     */
    @Import(name="privateKey", required=true)
    private Output<String> privateKey;

    /**
     * @return The name of the SecretManager secret version resource storing the private key encoded in PEM format. Format: **projects/{project}/secrets/{secret}/versions/{version}**
     * 
     */
    public Output<String> privateKey() {
        return this.privateKey;
    }

    /**
     * The ssl certificate encoded in PEM format. This string must include the begin header and end footer lines.
     * 
     */
    @Import(name="sslCertificate", required=true)
    private Output<String> sslCertificate;

    /**
     * @return The ssl certificate encoded in PEM format. This string must include the begin header and end footer lines.
     * 
     */
    public Output<String> sslCertificate() {
        return this.sslCertificate;
    }

    private CxAgentClientCertificateSettingsArgs() {}

    private CxAgentClientCertificateSettingsArgs(CxAgentClientCertificateSettingsArgs $) {
        this.passphrase = $.passphrase;
        this.privateKey = $.privateKey;
        this.sslCertificate = $.sslCertificate;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CxAgentClientCertificateSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CxAgentClientCertificateSettingsArgs $;

        public Builder() {
            $ = new CxAgentClientCertificateSettingsArgs();
        }

        public Builder(CxAgentClientCertificateSettingsArgs defaults) {
            $ = new CxAgentClientCertificateSettingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param passphrase The name of the SecretManager secret version resource storing the passphrase. &#39;passphrase&#39; should be left unset if the private key is not encrypted. Format: **projects/{project}/secrets/{secret}/versions/{version}**
         * 
         * @return builder
         * 
         */
        public Builder passphrase(@Nullable Output<String> passphrase) {
            $.passphrase = passphrase;
            return this;
        }

        /**
         * @param passphrase The name of the SecretManager secret version resource storing the passphrase. &#39;passphrase&#39; should be left unset if the private key is not encrypted. Format: **projects/{project}/secrets/{secret}/versions/{version}**
         * 
         * @return builder
         * 
         */
        public Builder passphrase(String passphrase) {
            return passphrase(Output.of(passphrase));
        }

        /**
         * @param privateKey The name of the SecretManager secret version resource storing the private key encoded in PEM format. Format: **projects/{project}/secrets/{secret}/versions/{version}**
         * 
         * @return builder
         * 
         */
        public Builder privateKey(Output<String> privateKey) {
            $.privateKey = privateKey;
            return this;
        }

        /**
         * @param privateKey The name of the SecretManager secret version resource storing the private key encoded in PEM format. Format: **projects/{project}/secrets/{secret}/versions/{version}**
         * 
         * @return builder
         * 
         */
        public Builder privateKey(String privateKey) {
            return privateKey(Output.of(privateKey));
        }

        /**
         * @param sslCertificate The ssl certificate encoded in PEM format. This string must include the begin header and end footer lines.
         * 
         * @return builder
         * 
         */
        public Builder sslCertificate(Output<String> sslCertificate) {
            $.sslCertificate = sslCertificate;
            return this;
        }

        /**
         * @param sslCertificate The ssl certificate encoded in PEM format. This string must include the begin header and end footer lines.
         * 
         * @return builder
         * 
         */
        public Builder sslCertificate(String sslCertificate) {
            return sslCertificate(Output.of(sslCertificate));
        }

        public CxAgentClientCertificateSettingsArgs build() {
            if ($.privateKey == null) {
                throw new MissingRequiredPropertyException("CxAgentClientCertificateSettingsArgs", "privateKey");
            }
            if ($.sslCertificate == null) {
                throw new MissingRequiredPropertyException("CxAgentClientCertificateSettingsArgs", "sslCertificate");
            }
            return $;
        }
    }

}
