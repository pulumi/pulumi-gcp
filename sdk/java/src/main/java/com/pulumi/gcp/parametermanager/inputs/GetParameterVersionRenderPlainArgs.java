// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.parametermanager.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetParameterVersionRenderPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetParameterVersionRenderPlainArgs Empty = new GetParameterVersionRenderPlainArgs();

    /**
     * The Parameter for obtaining the Parameter Version.
     * This can be either the reference of the parameter as in `projects/{{project}}/locations/global/parameters/{{parameter_id}}` or only the name of the parameter as in `{{parameter_id}}`.
     * 
     */
    @Import(name="parameter", required=true)
    private String parameter;

    /**
     * @return The Parameter for obtaining the Parameter Version.
     * This can be either the reference of the parameter as in `projects/{{project}}/locations/global/parameters/{{parameter_id}}` or only the name of the parameter as in `{{parameter_id}}`.
     * 
     */
    public String parameter() {
        return this.parameter;
    }

    /**
     * The version of the parameter to get.
     * 
     */
    @Import(name="parameterVersionId", required=true)
    private String parameterVersionId;

    /**
     * @return The version of the parameter to get.
     * 
     */
    public String parameterVersionId() {
        return this.parameterVersionId;
    }

    /**
     * The project for retrieving the Parameter Version. If it&#39;s not specified,
     * the provider project will be used.
     * 
     */
    @Import(name="project")
    private @Nullable String project;

    /**
     * @return The project for retrieving the Parameter Version. If it&#39;s not specified,
     * the provider project will be used.
     * 
     */
    public Optional<String> project() {
        return Optional.ofNullable(this.project);
    }

    private GetParameterVersionRenderPlainArgs() {}

    private GetParameterVersionRenderPlainArgs(GetParameterVersionRenderPlainArgs $) {
        this.parameter = $.parameter;
        this.parameterVersionId = $.parameterVersionId;
        this.project = $.project;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetParameterVersionRenderPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetParameterVersionRenderPlainArgs $;

        public Builder() {
            $ = new GetParameterVersionRenderPlainArgs();
        }

        public Builder(GetParameterVersionRenderPlainArgs defaults) {
            $ = new GetParameterVersionRenderPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param parameter The Parameter for obtaining the Parameter Version.
         * This can be either the reference of the parameter as in `projects/{{project}}/locations/global/parameters/{{parameter_id}}` or only the name of the parameter as in `{{parameter_id}}`.
         * 
         * @return builder
         * 
         */
        public Builder parameter(String parameter) {
            $.parameter = parameter;
            return this;
        }

        /**
         * @param parameterVersionId The version of the parameter to get.
         * 
         * @return builder
         * 
         */
        public Builder parameterVersionId(String parameterVersionId) {
            $.parameterVersionId = parameterVersionId;
            return this;
        }

        /**
         * @param project The project for retrieving the Parameter Version. If it&#39;s not specified,
         * the provider project will be used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable String project) {
            $.project = project;
            return this;
        }

        public GetParameterVersionRenderPlainArgs build() {
            if ($.parameter == null) {
                throw new MissingRequiredPropertyException("GetParameterVersionRenderPlainArgs", "parameter");
            }
            if ($.parameterVersionId == null) {
                throw new MissingRequiredPropertyException("GetParameterVersionRenderPlainArgs", "parameterVersionId");
            }
            return $;
        }
    }

}
