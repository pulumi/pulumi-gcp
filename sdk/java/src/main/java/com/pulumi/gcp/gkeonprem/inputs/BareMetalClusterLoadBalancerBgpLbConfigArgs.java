// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.gkeonprem.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.gkeonprem.inputs.BareMetalClusterLoadBalancerBgpLbConfigAddressPoolArgs;
import com.pulumi.gcp.gkeonprem.inputs.BareMetalClusterLoadBalancerBgpLbConfigBgpPeerConfigArgs;
import com.pulumi.gcp.gkeonprem.inputs.BareMetalClusterLoadBalancerBgpLbConfigLoadBalancerNodePoolConfigArgs;
import java.lang.Integer;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BareMetalClusterLoadBalancerBgpLbConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final BareMetalClusterLoadBalancerBgpLbConfigArgs Empty = new BareMetalClusterLoadBalancerBgpLbConfigArgs();

    /**
     * AddressPools is a list of non-overlapping IP pools used by load balancer
     * typed services. All addresses must be routable to load balancer nodes.
     * IngressVIP must be included in the pools.
     * Structure is documented below.
     * 
     */
    @Import(name="addressPools", required=true)
    private Output<List<BareMetalClusterLoadBalancerBgpLbConfigAddressPoolArgs>> addressPools;

    /**
     * @return AddressPools is a list of non-overlapping IP pools used by load balancer
     * typed services. All addresses must be routable to load balancer nodes.
     * IngressVIP must be included in the pools.
     * Structure is documented below.
     * 
     */
    public Output<List<BareMetalClusterLoadBalancerBgpLbConfigAddressPoolArgs>> addressPools() {
        return this.addressPools;
    }

    /**
     * BGP autonomous system number (ASN) of the cluster.
     * This field can be updated after cluster creation.
     * 
     */
    @Import(name="asn", required=true)
    private Output<Integer> asn;

    /**
     * @return BGP autonomous system number (ASN) of the cluster.
     * This field can be updated after cluster creation.
     * 
     */
    public Output<Integer> asn() {
        return this.asn;
    }

    /**
     * The list of BGP peers that the cluster will connect to.
     * At least one peer must be configured for each control plane node.
     * Control plane nodes will connect to these peers to advertise the control
     * plane VIP. The Services load balancer also uses these peers by default.
     * This field can be updated after cluster creation.
     * Structure is documented below.
     * 
     */
    @Import(name="bgpPeerConfigs", required=true)
    private Output<List<BareMetalClusterLoadBalancerBgpLbConfigBgpPeerConfigArgs>> bgpPeerConfigs;

    /**
     * @return The list of BGP peers that the cluster will connect to.
     * At least one peer must be configured for each control plane node.
     * Control plane nodes will connect to these peers to advertise the control
     * plane VIP. The Services load balancer also uses these peers by default.
     * This field can be updated after cluster creation.
     * Structure is documented below.
     * 
     */
    public Output<List<BareMetalClusterLoadBalancerBgpLbConfigBgpPeerConfigArgs>> bgpPeerConfigs() {
        return this.bgpPeerConfigs;
    }

    /**
     * Specifies the node pool running data plane load balancing. L2 connectivity
     * is required among nodes in this pool. If missing, the control plane node
     * pool is used for data plane load balancing.
     * Structure is documented below.
     * 
     */
    @Import(name="loadBalancerNodePoolConfig")
    private @Nullable Output<BareMetalClusterLoadBalancerBgpLbConfigLoadBalancerNodePoolConfigArgs> loadBalancerNodePoolConfig;

    /**
     * @return Specifies the node pool running data plane load balancing. L2 connectivity
     * is required among nodes in this pool. If missing, the control plane node
     * pool is used for data plane load balancing.
     * Structure is documented below.
     * 
     */
    public Optional<Output<BareMetalClusterLoadBalancerBgpLbConfigLoadBalancerNodePoolConfigArgs>> loadBalancerNodePoolConfig() {
        return Optional.ofNullable(this.loadBalancerNodePoolConfig);
    }

    private BareMetalClusterLoadBalancerBgpLbConfigArgs() {}

    private BareMetalClusterLoadBalancerBgpLbConfigArgs(BareMetalClusterLoadBalancerBgpLbConfigArgs $) {
        this.addressPools = $.addressPools;
        this.asn = $.asn;
        this.bgpPeerConfigs = $.bgpPeerConfigs;
        this.loadBalancerNodePoolConfig = $.loadBalancerNodePoolConfig;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BareMetalClusterLoadBalancerBgpLbConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BareMetalClusterLoadBalancerBgpLbConfigArgs $;

        public Builder() {
            $ = new BareMetalClusterLoadBalancerBgpLbConfigArgs();
        }

        public Builder(BareMetalClusterLoadBalancerBgpLbConfigArgs defaults) {
            $ = new BareMetalClusterLoadBalancerBgpLbConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param addressPools AddressPools is a list of non-overlapping IP pools used by load balancer
         * typed services. All addresses must be routable to load balancer nodes.
         * IngressVIP must be included in the pools.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder addressPools(Output<List<BareMetalClusterLoadBalancerBgpLbConfigAddressPoolArgs>> addressPools) {
            $.addressPools = addressPools;
            return this;
        }

        /**
         * @param addressPools AddressPools is a list of non-overlapping IP pools used by load balancer
         * typed services. All addresses must be routable to load balancer nodes.
         * IngressVIP must be included in the pools.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder addressPools(List<BareMetalClusterLoadBalancerBgpLbConfigAddressPoolArgs> addressPools) {
            return addressPools(Output.of(addressPools));
        }

        /**
         * @param addressPools AddressPools is a list of non-overlapping IP pools used by load balancer
         * typed services. All addresses must be routable to load balancer nodes.
         * IngressVIP must be included in the pools.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder addressPools(BareMetalClusterLoadBalancerBgpLbConfigAddressPoolArgs... addressPools) {
            return addressPools(List.of(addressPools));
        }

        /**
         * @param asn BGP autonomous system number (ASN) of the cluster.
         * This field can be updated after cluster creation.
         * 
         * @return builder
         * 
         */
        public Builder asn(Output<Integer> asn) {
            $.asn = asn;
            return this;
        }

        /**
         * @param asn BGP autonomous system number (ASN) of the cluster.
         * This field can be updated after cluster creation.
         * 
         * @return builder
         * 
         */
        public Builder asn(Integer asn) {
            return asn(Output.of(asn));
        }

        /**
         * @param bgpPeerConfigs The list of BGP peers that the cluster will connect to.
         * At least one peer must be configured for each control plane node.
         * Control plane nodes will connect to these peers to advertise the control
         * plane VIP. The Services load balancer also uses these peers by default.
         * This field can be updated after cluster creation.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder bgpPeerConfigs(Output<List<BareMetalClusterLoadBalancerBgpLbConfigBgpPeerConfigArgs>> bgpPeerConfigs) {
            $.bgpPeerConfigs = bgpPeerConfigs;
            return this;
        }

        /**
         * @param bgpPeerConfigs The list of BGP peers that the cluster will connect to.
         * At least one peer must be configured for each control plane node.
         * Control plane nodes will connect to these peers to advertise the control
         * plane VIP. The Services load balancer also uses these peers by default.
         * This field can be updated after cluster creation.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder bgpPeerConfigs(List<BareMetalClusterLoadBalancerBgpLbConfigBgpPeerConfigArgs> bgpPeerConfigs) {
            return bgpPeerConfigs(Output.of(bgpPeerConfigs));
        }

        /**
         * @param bgpPeerConfigs The list of BGP peers that the cluster will connect to.
         * At least one peer must be configured for each control plane node.
         * Control plane nodes will connect to these peers to advertise the control
         * plane VIP. The Services load balancer also uses these peers by default.
         * This field can be updated after cluster creation.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder bgpPeerConfigs(BareMetalClusterLoadBalancerBgpLbConfigBgpPeerConfigArgs... bgpPeerConfigs) {
            return bgpPeerConfigs(List.of(bgpPeerConfigs));
        }

        /**
         * @param loadBalancerNodePoolConfig Specifies the node pool running data plane load balancing. L2 connectivity
         * is required among nodes in this pool. If missing, the control plane node
         * pool is used for data plane load balancing.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerNodePoolConfig(@Nullable Output<BareMetalClusterLoadBalancerBgpLbConfigLoadBalancerNodePoolConfigArgs> loadBalancerNodePoolConfig) {
            $.loadBalancerNodePoolConfig = loadBalancerNodePoolConfig;
            return this;
        }

        /**
         * @param loadBalancerNodePoolConfig Specifies the node pool running data plane load balancing. L2 connectivity
         * is required among nodes in this pool. If missing, the control plane node
         * pool is used for data plane load balancing.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerNodePoolConfig(BareMetalClusterLoadBalancerBgpLbConfigLoadBalancerNodePoolConfigArgs loadBalancerNodePoolConfig) {
            return loadBalancerNodePoolConfig(Output.of(loadBalancerNodePoolConfig));
        }

        public BareMetalClusterLoadBalancerBgpLbConfigArgs build() {
            $.addressPools = Objects.requireNonNull($.addressPools, "expected parameter 'addressPools' to be non-null");
            $.asn = Objects.requireNonNull($.asn, "expected parameter 'asn' to be non-null");
            $.bgpPeerConfigs = Objects.requireNonNull($.bgpPeerConfigs, "expected parameter 'bgpPeerConfigs' to be non-null");
            return $;
        }
    }

}
