// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.artifactregistry.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.artifactregistry.inputs.RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RepositoryRemoteRepositoryConfigNpmRepositoryArgs extends com.pulumi.resources.ResourceArgs {

    public static final RepositoryRemoteRepositoryConfigNpmRepositoryArgs Empty = new RepositoryRemoteRepositoryConfigNpmRepositoryArgs();

    /**
     * [Deprecated, please use commonRepository instead] Settings for a remote repository with a custom uri.
     * Structure is documented below.
     * 
     */
    @Import(name="customRepository")
    private @Nullable Output<RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryArgs> customRepository;

    /**
     * @return [Deprecated, please use commonRepository instead] Settings for a remote repository with a custom uri.
     * Structure is documented below.
     * 
     */
    public Optional<Output<RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryArgs>> customRepository() {
        return Optional.ofNullable(this.customRepository);
    }

    /**
     * Address of the remote repository.
     * Default value is `NPMJS`.
     * Possible values are: `NPMJS`.
     * 
     */
    @Import(name="publicRepository")
    private @Nullable Output<String> publicRepository;

    /**
     * @return Address of the remote repository.
     * Default value is `NPMJS`.
     * Possible values are: `NPMJS`.
     * 
     */
    public Optional<Output<String>> publicRepository() {
        return Optional.ofNullable(this.publicRepository);
    }

    private RepositoryRemoteRepositoryConfigNpmRepositoryArgs() {}

    private RepositoryRemoteRepositoryConfigNpmRepositoryArgs(RepositoryRemoteRepositoryConfigNpmRepositoryArgs $) {
        this.customRepository = $.customRepository;
        this.publicRepository = $.publicRepository;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RepositoryRemoteRepositoryConfigNpmRepositoryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RepositoryRemoteRepositoryConfigNpmRepositoryArgs $;

        public Builder() {
            $ = new RepositoryRemoteRepositoryConfigNpmRepositoryArgs();
        }

        public Builder(RepositoryRemoteRepositoryConfigNpmRepositoryArgs defaults) {
            $ = new RepositoryRemoteRepositoryConfigNpmRepositoryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param customRepository [Deprecated, please use commonRepository instead] Settings for a remote repository with a custom uri.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder customRepository(@Nullable Output<RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryArgs> customRepository) {
            $.customRepository = customRepository;
            return this;
        }

        /**
         * @param customRepository [Deprecated, please use commonRepository instead] Settings for a remote repository with a custom uri.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder customRepository(RepositoryRemoteRepositoryConfigNpmRepositoryCustomRepositoryArgs customRepository) {
            return customRepository(Output.of(customRepository));
        }

        /**
         * @param publicRepository Address of the remote repository.
         * Default value is `NPMJS`.
         * Possible values are: `NPMJS`.
         * 
         * @return builder
         * 
         */
        public Builder publicRepository(@Nullable Output<String> publicRepository) {
            $.publicRepository = publicRepository;
            return this;
        }

        /**
         * @param publicRepository Address of the remote repository.
         * Default value is `NPMJS`.
         * Possible values are: `NPMJS`.
         * 
         * @return builder
         * 
         */
        public Builder publicRepository(String publicRepository) {
            return publicRepository(Output.of(publicRepository));
        }

        public RepositoryRemoteRepositoryConfigNpmRepositoryArgs build() {
            return $;
        }
    }

}
