// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.apphub.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.apphub.inputs.ServiceAttributesArgs;
import com.pulumi.gcp.apphub.inputs.ServiceServicePropertyArgs;
import com.pulumi.gcp.apphub.inputs.ServiceServiceReferenceArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceState extends com.pulumi.resources.ResourceArgs {

    public static final ServiceState Empty = new ServiceState();

    /**
     * Part of `parent`.  Full resource name of a parent Application. Example: projects/{HOST_PROJECT_ID}/locations/{LOCATION}/applications/{APPLICATION_ID}
     * 
     */
    @Import(name="applicationId")
    private @Nullable Output<String> applicationId;

    /**
     * @return Part of `parent`.  Full resource name of a parent Application. Example: projects/{HOST_PROJECT_ID}/locations/{LOCATION}/applications/{APPLICATION_ID}
     * 
     */
    public Optional<Output<String>> applicationId() {
        return Optional.ofNullable(this.applicationId);
    }

    /**
     * Consumer provided attributes.
     * Structure is documented below.
     * 
     */
    @Import(name="attributes")
    private @Nullable Output<ServiceAttributesArgs> attributes;

    /**
     * @return Consumer provided attributes.
     * Structure is documented below.
     * 
     */
    public Optional<Output<ServiceAttributesArgs>> attributes() {
        return Optional.ofNullable(this.attributes);
    }

    /**
     * Output only. Create time.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return Output only. Create time.
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * User-defined description of a Service.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return User-defined description of a Service.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Immutable. The resource name of the original discovered service.
     * 
     */
    @Import(name="discoveredService")
    private @Nullable Output<String> discoveredService;

    /**
     * @return Immutable. The resource name of the original discovered service.
     * 
     */
    public Optional<Output<String>> discoveredService() {
        return Optional.ofNullable(this.discoveredService);
    }

    /**
     * User-defined name for the Service.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return User-defined name for the Service.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Part of `parent`.  Full resource name of a parent Application. Example: projects/{HOST_PROJECT_ID}/locations/{LOCATION}/applications/{APPLICATION_ID}
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return Part of `parent`.  Full resource name of a parent Application. Example: projects/{HOST_PROJECT_ID}/locations/{LOCATION}/applications/{APPLICATION_ID}
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Identifier. The resource name of a Service. Format:
     * &#34;projects/{host-project-id}/locations/{location}/applications/{application-id}/services/{service-id}&#34;
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Identifier. The resource name of a Service. Format:
     * &#34;projects/{host-project-id}/locations/{location}/applications/{application-id}/services/{service-id}&#34;
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The Service identifier.
     * 
     */
    @Import(name="serviceId")
    private @Nullable Output<String> serviceId;

    /**
     * @return The Service identifier.
     * 
     */
    public Optional<Output<String>> serviceId() {
        return Optional.ofNullable(this.serviceId);
    }

    /**
     * Properties of an underlying cloud resource that can comprise a Service.
     * Structure is documented below.
     * 
     */
    @Import(name="serviceProperties")
    private @Nullable Output<List<ServiceServicePropertyArgs>> serviceProperties;

    /**
     * @return Properties of an underlying cloud resource that can comprise a Service.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<ServiceServicePropertyArgs>>> serviceProperties() {
        return Optional.ofNullable(this.serviceProperties);
    }

    /**
     * Reference to an underlying networking resource that can comprise a Service.
     * Structure is documented below.
     * 
     */
    @Import(name="serviceReferences")
    private @Nullable Output<List<ServiceServiceReferenceArgs>> serviceReferences;

    /**
     * @return Reference to an underlying networking resource that can comprise a Service.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<ServiceServiceReferenceArgs>>> serviceReferences() {
        return Optional.ofNullable(this.serviceReferences);
    }

    /**
     * Output only. Service state. Possible values: STATE_UNSPECIFIED CREATING ACTIVE DELETING DETACHED
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return Output only. Service state. Possible values: STATE_UNSPECIFIED CREATING ACTIVE DELETING DETACHED
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * Output only. A universally unique identifier (UUID) for the `Service` in the UUID4
     * format.
     * 
     */
    @Import(name="uid")
    private @Nullable Output<String> uid;

    /**
     * @return Output only. A universally unique identifier (UUID) for the `Service` in the UUID4
     * format.
     * 
     */
    public Optional<Output<String>> uid() {
        return Optional.ofNullable(this.uid);
    }

    /**
     * Output only. Update time.
     * 
     */
    @Import(name="updateTime")
    private @Nullable Output<String> updateTime;

    /**
     * @return Output only. Update time.
     * 
     */
    public Optional<Output<String>> updateTime() {
        return Optional.ofNullable(this.updateTime);
    }

    private ServiceState() {}

    private ServiceState(ServiceState $) {
        this.applicationId = $.applicationId;
        this.attributes = $.attributes;
        this.createTime = $.createTime;
        this.description = $.description;
        this.discoveredService = $.discoveredService;
        this.displayName = $.displayName;
        this.location = $.location;
        this.name = $.name;
        this.project = $.project;
        this.serviceId = $.serviceId;
        this.serviceProperties = $.serviceProperties;
        this.serviceReferences = $.serviceReferences;
        this.state = $.state;
        this.uid = $.uid;
        this.updateTime = $.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceState $;

        public Builder() {
            $ = new ServiceState();
        }

        public Builder(ServiceState defaults) {
            $ = new ServiceState(Objects.requireNonNull(defaults));
        }

        /**
         * @param applicationId Part of `parent`.  Full resource name of a parent Application. Example: projects/{HOST_PROJECT_ID}/locations/{LOCATION}/applications/{APPLICATION_ID}
         * 
         * @return builder
         * 
         */
        public Builder applicationId(@Nullable Output<String> applicationId) {
            $.applicationId = applicationId;
            return this;
        }

        /**
         * @param applicationId Part of `parent`.  Full resource name of a parent Application. Example: projects/{HOST_PROJECT_ID}/locations/{LOCATION}/applications/{APPLICATION_ID}
         * 
         * @return builder
         * 
         */
        public Builder applicationId(String applicationId) {
            return applicationId(Output.of(applicationId));
        }

        /**
         * @param attributes Consumer provided attributes.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder attributes(@Nullable Output<ServiceAttributesArgs> attributes) {
            $.attributes = attributes;
            return this;
        }

        /**
         * @param attributes Consumer provided attributes.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder attributes(ServiceAttributesArgs attributes) {
            return attributes(Output.of(attributes));
        }

        /**
         * @param createTime Output only. Create time.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime Output only. Create time.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param description User-defined description of a Service.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description User-defined description of a Service.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param discoveredService Immutable. The resource name of the original discovered service.
         * 
         * @return builder
         * 
         */
        public Builder discoveredService(@Nullable Output<String> discoveredService) {
            $.discoveredService = discoveredService;
            return this;
        }

        /**
         * @param discoveredService Immutable. The resource name of the original discovered service.
         * 
         * @return builder
         * 
         */
        public Builder discoveredService(String discoveredService) {
            return discoveredService(Output.of(discoveredService));
        }

        /**
         * @param displayName User-defined name for the Service.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName User-defined name for the Service.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param location Part of `parent`.  Full resource name of a parent Application. Example: projects/{HOST_PROJECT_ID}/locations/{LOCATION}/applications/{APPLICATION_ID}
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Part of `parent`.  Full resource name of a parent Application. Example: projects/{HOST_PROJECT_ID}/locations/{LOCATION}/applications/{APPLICATION_ID}
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name Identifier. The resource name of a Service. Format:
         * &#34;projects/{host-project-id}/locations/{location}/applications/{application-id}/services/{service-id}&#34;
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Identifier. The resource name of a Service. Format:
         * &#34;projects/{host-project-id}/locations/{location}/applications/{application-id}/services/{service-id}&#34;
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param serviceId The Service identifier.
         * 
         * @return builder
         * 
         */
        public Builder serviceId(@Nullable Output<String> serviceId) {
            $.serviceId = serviceId;
            return this;
        }

        /**
         * @param serviceId The Service identifier.
         * 
         * @return builder
         * 
         */
        public Builder serviceId(String serviceId) {
            return serviceId(Output.of(serviceId));
        }

        /**
         * @param serviceProperties Properties of an underlying cloud resource that can comprise a Service.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder serviceProperties(@Nullable Output<List<ServiceServicePropertyArgs>> serviceProperties) {
            $.serviceProperties = serviceProperties;
            return this;
        }

        /**
         * @param serviceProperties Properties of an underlying cloud resource that can comprise a Service.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder serviceProperties(List<ServiceServicePropertyArgs> serviceProperties) {
            return serviceProperties(Output.of(serviceProperties));
        }

        /**
         * @param serviceProperties Properties of an underlying cloud resource that can comprise a Service.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder serviceProperties(ServiceServicePropertyArgs... serviceProperties) {
            return serviceProperties(List.of(serviceProperties));
        }

        /**
         * @param serviceReferences Reference to an underlying networking resource that can comprise a Service.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder serviceReferences(@Nullable Output<List<ServiceServiceReferenceArgs>> serviceReferences) {
            $.serviceReferences = serviceReferences;
            return this;
        }

        /**
         * @param serviceReferences Reference to an underlying networking resource that can comprise a Service.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder serviceReferences(List<ServiceServiceReferenceArgs> serviceReferences) {
            return serviceReferences(Output.of(serviceReferences));
        }

        /**
         * @param serviceReferences Reference to an underlying networking resource that can comprise a Service.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder serviceReferences(ServiceServiceReferenceArgs... serviceReferences) {
            return serviceReferences(List.of(serviceReferences));
        }

        /**
         * @param state Output only. Service state. Possible values: STATE_UNSPECIFIED CREATING ACTIVE DELETING DETACHED
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state Output only. Service state. Possible values: STATE_UNSPECIFIED CREATING ACTIVE DELETING DETACHED
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param uid Output only. A universally unique identifier (UUID) for the `Service` in the UUID4
         * format.
         * 
         * @return builder
         * 
         */
        public Builder uid(@Nullable Output<String> uid) {
            $.uid = uid;
            return this;
        }

        /**
         * @param uid Output only. A universally unique identifier (UUID) for the `Service` in the UUID4
         * format.
         * 
         * @return builder
         * 
         */
        public Builder uid(String uid) {
            return uid(Output.of(uid));
        }

        /**
         * @param updateTime Output only. Update time.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(@Nullable Output<String> updateTime) {
            $.updateTime = updateTime;
            return this;
        }

        /**
         * @param updateTime Output only. Update time.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(String updateTime) {
            return updateTime(Output.of(updateTime));
        }

        public ServiceState build() {
            return $;
        }
    }

}
