// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RegionHealthCheckGrpcTlsHealthCheckArgs extends com.pulumi.resources.ResourceArgs {

    public static final RegionHealthCheckGrpcTlsHealthCheckArgs Empty = new RegionHealthCheckGrpcTlsHealthCheckArgs();

    /**
     * The gRPC service name for the health check.
     * The value of grpcServiceName has the following meanings by convention:
     * * Empty serviceName means the overall status of all services at the backend.
     * * Non-empty serviceName means the health of that gRPC service, as defined by the owner of the service.
     *   The grpcServiceName can only be ASCII.
     * 
     */
    @Import(name="grpcServiceName")
    private @Nullable Output<String> grpcServiceName;

    /**
     * @return The gRPC service name for the health check.
     * The value of grpcServiceName has the following meanings by convention:
     * * Empty serviceName means the overall status of all services at the backend.
     * * Non-empty serviceName means the health of that gRPC service, as defined by the owner of the service.
     *   The grpcServiceName can only be ASCII.
     * 
     */
    public Optional<Output<String>> grpcServiceName() {
        return Optional.ofNullable(this.grpcServiceName);
    }

    /**
     * The port number for the health check request.
     * Must be specified if portSpecification is USE_FIXED_PORT. Valid values are 1 through 65535.
     * 
     */
    @Import(name="port")
    private @Nullable Output<Integer> port;

    /**
     * @return The port number for the health check request.
     * Must be specified if portSpecification is USE_FIXED_PORT. Valid values are 1 through 65535.
     * 
     */
    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * Specifies how port is selected for health checking, can be one of the
     * following values:
     * * `USE_FIXED_PORT`: The port number in `port` is used for health checking.
     * * `USE_NAMED_PORT`: Not supported for GRPC with TLS health checking.
     * * `USE_SERVING_PORT`: For NetworkEndpointGroup, the port specified for each
     *   network endpoint is used for health checking. For other backends, the
     *   port or named port specified in the Backend Service is used for health
     *   checking.
     *   If not specified, gRPC health check follows behavior specified in the `port` field.
     *   Possible values are: `USE_FIXED_PORT`, `USE_NAMED_PORT`, `USE_SERVING_PORT`.
     * 
     */
    @Import(name="portSpecification")
    private @Nullable Output<String> portSpecification;

    /**
     * @return Specifies how port is selected for health checking, can be one of the
     * following values:
     * * `USE_FIXED_PORT`: The port number in `port` is used for health checking.
     * * `USE_NAMED_PORT`: Not supported for GRPC with TLS health checking.
     * * `USE_SERVING_PORT`: For NetworkEndpointGroup, the port specified for each
     *   network endpoint is used for health checking. For other backends, the
     *   port or named port specified in the Backend Service is used for health
     *   checking.
     *   If not specified, gRPC health check follows behavior specified in the `port` field.
     *   Possible values are: `USE_FIXED_PORT`, `USE_NAMED_PORT`, `USE_SERVING_PORT`.
     * 
     */
    public Optional<Output<String>> portSpecification() {
        return Optional.ofNullable(this.portSpecification);
    }

    private RegionHealthCheckGrpcTlsHealthCheckArgs() {}

    private RegionHealthCheckGrpcTlsHealthCheckArgs(RegionHealthCheckGrpcTlsHealthCheckArgs $) {
        this.grpcServiceName = $.grpcServiceName;
        this.port = $.port;
        this.portSpecification = $.portSpecification;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RegionHealthCheckGrpcTlsHealthCheckArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RegionHealthCheckGrpcTlsHealthCheckArgs $;

        public Builder() {
            $ = new RegionHealthCheckGrpcTlsHealthCheckArgs();
        }

        public Builder(RegionHealthCheckGrpcTlsHealthCheckArgs defaults) {
            $ = new RegionHealthCheckGrpcTlsHealthCheckArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param grpcServiceName The gRPC service name for the health check.
         * The value of grpcServiceName has the following meanings by convention:
         * * Empty serviceName means the overall status of all services at the backend.
         * * Non-empty serviceName means the health of that gRPC service, as defined by the owner of the service.
         *   The grpcServiceName can only be ASCII.
         * 
         * @return builder
         * 
         */
        public Builder grpcServiceName(@Nullable Output<String> grpcServiceName) {
            $.grpcServiceName = grpcServiceName;
            return this;
        }

        /**
         * @param grpcServiceName The gRPC service name for the health check.
         * The value of grpcServiceName has the following meanings by convention:
         * * Empty serviceName means the overall status of all services at the backend.
         * * Non-empty serviceName means the health of that gRPC service, as defined by the owner of the service.
         *   The grpcServiceName can only be ASCII.
         * 
         * @return builder
         * 
         */
        public Builder grpcServiceName(String grpcServiceName) {
            return grpcServiceName(Output.of(grpcServiceName));
        }

        /**
         * @param port The port number for the health check request.
         * Must be specified if portSpecification is USE_FIXED_PORT. Valid values are 1 through 65535.
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port The port number for the health check request.
         * Must be specified if portSpecification is USE_FIXED_PORT. Valid values are 1 through 65535.
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param portSpecification Specifies how port is selected for health checking, can be one of the
         * following values:
         * * `USE_FIXED_PORT`: The port number in `port` is used for health checking.
         * * `USE_NAMED_PORT`: Not supported for GRPC with TLS health checking.
         * * `USE_SERVING_PORT`: For NetworkEndpointGroup, the port specified for each
         *   network endpoint is used for health checking. For other backends, the
         *   port or named port specified in the Backend Service is used for health
         *   checking.
         *   If not specified, gRPC health check follows behavior specified in the `port` field.
         *   Possible values are: `USE_FIXED_PORT`, `USE_NAMED_PORT`, `USE_SERVING_PORT`.
         * 
         * @return builder
         * 
         */
        public Builder portSpecification(@Nullable Output<String> portSpecification) {
            $.portSpecification = portSpecification;
            return this;
        }

        /**
         * @param portSpecification Specifies how port is selected for health checking, can be one of the
         * following values:
         * * `USE_FIXED_PORT`: The port number in `port` is used for health checking.
         * * `USE_NAMED_PORT`: Not supported for GRPC with TLS health checking.
         * * `USE_SERVING_PORT`: For NetworkEndpointGroup, the port specified for each
         *   network endpoint is used for health checking. For other backends, the
         *   port or named port specified in the Backend Service is used for health
         *   checking.
         *   If not specified, gRPC health check follows behavior specified in the `port` field.
         *   Possible values are: `USE_FIXED_PORT`, `USE_NAMED_PORT`, `USE_SERVING_PORT`.
         * 
         * @return builder
         * 
         */
        public Builder portSpecification(String portSpecification) {
            return portSpecification(Output.of(portSpecification));
        }

        public RegionHealthCheckGrpcTlsHealthCheckArgs build() {
            return $;
        }
    }

}
