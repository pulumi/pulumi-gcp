// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.networksecurity.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.networksecurity.inputs.AuthzPolicyHttpRuleFromNotSourceArgs;
import com.pulumi.gcp.networksecurity.inputs.AuthzPolicyHttpRuleFromSourceArgs;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AuthzPolicyHttpRuleFromArgs extends com.pulumi.resources.ResourceArgs {

    public static final AuthzPolicyHttpRuleFromArgs Empty = new AuthzPolicyHttpRuleFromArgs();

    /**
     * Describes the properties of a request&#39;s sources. At least one of sources or notSources must be specified. Limited to 5 sources. A match occurs when ANY source (in sources or notSources) matches the request. Within a single source, the match follows AND semantics across fields and OR semantics within a single field, i.e. a match occurs when ANY principal matches AND ANY ipBlocks match.
     * Structure is documented below.
     * 
     */
    @Import(name="notSources")
    private @Nullable Output<List<AuthzPolicyHttpRuleFromNotSourceArgs>> notSources;

    /**
     * @return Describes the properties of a request&#39;s sources. At least one of sources or notSources must be specified. Limited to 5 sources. A match occurs when ANY source (in sources or notSources) matches the request. Within a single source, the match follows AND semantics across fields and OR semantics within a single field, i.e. a match occurs when ANY principal matches AND ANY ipBlocks match.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<AuthzPolicyHttpRuleFromNotSourceArgs>>> notSources() {
        return Optional.ofNullable(this.notSources);
    }

    /**
     * Describes the properties of a request&#39;s sources. At least one of sources or notSources must be specified. Limited to 5 sources. A match occurs when ANY source (in sources or notSources) matches the request. Within a single source, the match follows AND semantics across fields and OR semantics within a single field, i.e. a match occurs when ANY principal matches AND ANY ipBlocks match.
     * Structure is documented below.
     * 
     */
    @Import(name="sources")
    private @Nullable Output<List<AuthzPolicyHttpRuleFromSourceArgs>> sources;

    /**
     * @return Describes the properties of a request&#39;s sources. At least one of sources or notSources must be specified. Limited to 5 sources. A match occurs when ANY source (in sources or notSources) matches the request. Within a single source, the match follows AND semantics across fields and OR semantics within a single field, i.e. a match occurs when ANY principal matches AND ANY ipBlocks match.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<AuthzPolicyHttpRuleFromSourceArgs>>> sources() {
        return Optional.ofNullable(this.sources);
    }

    private AuthzPolicyHttpRuleFromArgs() {}

    private AuthzPolicyHttpRuleFromArgs(AuthzPolicyHttpRuleFromArgs $) {
        this.notSources = $.notSources;
        this.sources = $.sources;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AuthzPolicyHttpRuleFromArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AuthzPolicyHttpRuleFromArgs $;

        public Builder() {
            $ = new AuthzPolicyHttpRuleFromArgs();
        }

        public Builder(AuthzPolicyHttpRuleFromArgs defaults) {
            $ = new AuthzPolicyHttpRuleFromArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param notSources Describes the properties of a request&#39;s sources. At least one of sources or notSources must be specified. Limited to 5 sources. A match occurs when ANY source (in sources or notSources) matches the request. Within a single source, the match follows AND semantics across fields and OR semantics within a single field, i.e. a match occurs when ANY principal matches AND ANY ipBlocks match.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder notSources(@Nullable Output<List<AuthzPolicyHttpRuleFromNotSourceArgs>> notSources) {
            $.notSources = notSources;
            return this;
        }

        /**
         * @param notSources Describes the properties of a request&#39;s sources. At least one of sources or notSources must be specified. Limited to 5 sources. A match occurs when ANY source (in sources or notSources) matches the request. Within a single source, the match follows AND semantics across fields and OR semantics within a single field, i.e. a match occurs when ANY principal matches AND ANY ipBlocks match.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder notSources(List<AuthzPolicyHttpRuleFromNotSourceArgs> notSources) {
            return notSources(Output.of(notSources));
        }

        /**
         * @param notSources Describes the properties of a request&#39;s sources. At least one of sources or notSources must be specified. Limited to 5 sources. A match occurs when ANY source (in sources or notSources) matches the request. Within a single source, the match follows AND semantics across fields and OR semantics within a single field, i.e. a match occurs when ANY principal matches AND ANY ipBlocks match.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder notSources(AuthzPolicyHttpRuleFromNotSourceArgs... notSources) {
            return notSources(List.of(notSources));
        }

        /**
         * @param sources Describes the properties of a request&#39;s sources. At least one of sources or notSources must be specified. Limited to 5 sources. A match occurs when ANY source (in sources or notSources) matches the request. Within a single source, the match follows AND semantics across fields and OR semantics within a single field, i.e. a match occurs when ANY principal matches AND ANY ipBlocks match.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder sources(@Nullable Output<List<AuthzPolicyHttpRuleFromSourceArgs>> sources) {
            $.sources = sources;
            return this;
        }

        /**
         * @param sources Describes the properties of a request&#39;s sources. At least one of sources or notSources must be specified. Limited to 5 sources. A match occurs when ANY source (in sources or notSources) matches the request. Within a single source, the match follows AND semantics across fields and OR semantics within a single field, i.e. a match occurs when ANY principal matches AND ANY ipBlocks match.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder sources(List<AuthzPolicyHttpRuleFromSourceArgs> sources) {
            return sources(Output.of(sources));
        }

        /**
         * @param sources Describes the properties of a request&#39;s sources. At least one of sources or notSources must be specified. Limited to 5 sources. A match occurs when ANY source (in sources or notSources) matches the request. Within a single source, the match follows AND semantics across fields and OR semantics within a single field, i.e. a match occurs when ANY principal matches AND ANY ipBlocks match.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder sources(AuthzPolicyHttpRuleFromSourceArgs... sources) {
            return sources(List.of(sources));
        }

        public AuthzPolicyHttpRuleFromArgs build() {
            return $;
        }
    }

}
