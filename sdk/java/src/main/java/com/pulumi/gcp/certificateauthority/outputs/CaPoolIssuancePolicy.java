// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.certificateauthority.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.certificateauthority.outputs.CaPoolIssuancePolicyAllowedIssuanceModes;
import com.pulumi.gcp.certificateauthority.outputs.CaPoolIssuancePolicyAllowedKeyType;
import com.pulumi.gcp.certificateauthority.outputs.CaPoolIssuancePolicyBaselineValues;
import com.pulumi.gcp.certificateauthority.outputs.CaPoolIssuancePolicyIdentityConstraints;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class CaPoolIssuancePolicy {
    /**
     * @return IssuanceModes specifies the allowed ways in which Certificates may be requested from this CaPool.
     * Structure is documented below.
     * 
     */
    private final @Nullable CaPoolIssuancePolicyAllowedIssuanceModes allowedIssuanceModes;
    /**
     * @return If any AllowedKeyType is specified, then the certificate request&#39;s public key must match one of the key types listed here.
     * Otherwise, any key may be used.
     * Structure is documented below.
     * 
     */
    private final @Nullable List<CaPoolIssuancePolicyAllowedKeyType> allowedKeyTypes;
    /**
     * @return A set of X.509 values that will be applied to all certificates issued through this CaPool. If a certificate request
     * includes conflicting values for the same properties, they will be overwritten by the values defined here. If a certificate
     * request uses a CertificateTemplate that defines conflicting predefinedValues for the same properties, the certificate
     * issuance request will fail.
     * Structure is documented below.
     * 
     */
    private final @Nullable CaPoolIssuancePolicyBaselineValues baselineValues;
    /**
     * @return Describes constraints on identities that may appear in Certificates issued through this CaPool.
     * If this is omitted, then this CaPool will not add restrictions on a certificate&#39;s identity.
     * Structure is documented below.
     * 
     */
    private final @Nullable CaPoolIssuancePolicyIdentityConstraints identityConstraints;
    /**
     * @return The maximum lifetime allowed for issued Certificates. Note that if the issuing CertificateAuthority
     * expires before a Certificate&#39;s requested maximumLifetime, the effective lifetime will be explicitly truncated to match it.
     * 
     */
    private final @Nullable String maximumLifetime;

    @CustomType.Constructor
    private CaPoolIssuancePolicy(
        @CustomType.Parameter("allowedIssuanceModes") @Nullable CaPoolIssuancePolicyAllowedIssuanceModes allowedIssuanceModes,
        @CustomType.Parameter("allowedKeyTypes") @Nullable List<CaPoolIssuancePolicyAllowedKeyType> allowedKeyTypes,
        @CustomType.Parameter("baselineValues") @Nullable CaPoolIssuancePolicyBaselineValues baselineValues,
        @CustomType.Parameter("identityConstraints") @Nullable CaPoolIssuancePolicyIdentityConstraints identityConstraints,
        @CustomType.Parameter("maximumLifetime") @Nullable String maximumLifetime) {
        this.allowedIssuanceModes = allowedIssuanceModes;
        this.allowedKeyTypes = allowedKeyTypes;
        this.baselineValues = baselineValues;
        this.identityConstraints = identityConstraints;
        this.maximumLifetime = maximumLifetime;
    }

    /**
     * @return IssuanceModes specifies the allowed ways in which Certificates may be requested from this CaPool.
     * Structure is documented below.
     * 
     */
    public Optional<CaPoolIssuancePolicyAllowedIssuanceModes> allowedIssuanceModes() {
        return Optional.ofNullable(this.allowedIssuanceModes);
    }
    /**
     * @return If any AllowedKeyType is specified, then the certificate request&#39;s public key must match one of the key types listed here.
     * Otherwise, any key may be used.
     * Structure is documented below.
     * 
     */
    public List<CaPoolIssuancePolicyAllowedKeyType> allowedKeyTypes() {
        return this.allowedKeyTypes == null ? List.of() : this.allowedKeyTypes;
    }
    /**
     * @return A set of X.509 values that will be applied to all certificates issued through this CaPool. If a certificate request
     * includes conflicting values for the same properties, they will be overwritten by the values defined here. If a certificate
     * request uses a CertificateTemplate that defines conflicting predefinedValues for the same properties, the certificate
     * issuance request will fail.
     * Structure is documented below.
     * 
     */
    public Optional<CaPoolIssuancePolicyBaselineValues> baselineValues() {
        return Optional.ofNullable(this.baselineValues);
    }
    /**
     * @return Describes constraints on identities that may appear in Certificates issued through this CaPool.
     * If this is omitted, then this CaPool will not add restrictions on a certificate&#39;s identity.
     * Structure is documented below.
     * 
     */
    public Optional<CaPoolIssuancePolicyIdentityConstraints> identityConstraints() {
        return Optional.ofNullable(this.identityConstraints);
    }
    /**
     * @return The maximum lifetime allowed for issued Certificates. Note that if the issuing CertificateAuthority
     * expires before a Certificate&#39;s requested maximumLifetime, the effective lifetime will be explicitly truncated to match it.
     * 
     */
    public Optional<String> maximumLifetime() {
        return Optional.ofNullable(this.maximumLifetime);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CaPoolIssuancePolicy defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable CaPoolIssuancePolicyAllowedIssuanceModes allowedIssuanceModes;
        private @Nullable List<CaPoolIssuancePolicyAllowedKeyType> allowedKeyTypes;
        private @Nullable CaPoolIssuancePolicyBaselineValues baselineValues;
        private @Nullable CaPoolIssuancePolicyIdentityConstraints identityConstraints;
        private @Nullable String maximumLifetime;

        public Builder() {
    	      // Empty
        }

        public Builder(CaPoolIssuancePolicy defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowedIssuanceModes = defaults.allowedIssuanceModes;
    	      this.allowedKeyTypes = defaults.allowedKeyTypes;
    	      this.baselineValues = defaults.baselineValues;
    	      this.identityConstraints = defaults.identityConstraints;
    	      this.maximumLifetime = defaults.maximumLifetime;
        }

        public Builder allowedIssuanceModes(@Nullable CaPoolIssuancePolicyAllowedIssuanceModes allowedIssuanceModes) {
            this.allowedIssuanceModes = allowedIssuanceModes;
            return this;
        }
        public Builder allowedKeyTypes(@Nullable List<CaPoolIssuancePolicyAllowedKeyType> allowedKeyTypes) {
            this.allowedKeyTypes = allowedKeyTypes;
            return this;
        }
        public Builder allowedKeyTypes(CaPoolIssuancePolicyAllowedKeyType... allowedKeyTypes) {
            return allowedKeyTypes(List.of(allowedKeyTypes));
        }
        public Builder baselineValues(@Nullable CaPoolIssuancePolicyBaselineValues baselineValues) {
            this.baselineValues = baselineValues;
            return this;
        }
        public Builder identityConstraints(@Nullable CaPoolIssuancePolicyIdentityConstraints identityConstraints) {
            this.identityConstraints = identityConstraints;
            return this;
        }
        public Builder maximumLifetime(@Nullable String maximumLifetime) {
            this.maximumLifetime = maximumLifetime;
            return this;
        }        public CaPoolIssuancePolicy build() {
            return new CaPoolIssuancePolicy(allowedIssuanceModes, allowedKeyTypes, baselineValues, identityConstraints, maximumLifetime);
        }
    }
}
