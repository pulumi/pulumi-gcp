// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.firebase;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.firebase.AppCheckDebugTokenArgs;
import com.pulumi.gcp.firebase.inputs.AppCheckDebugTokenState;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * A debug token is a secret used during the development or integration testing of
 * an app. It essentially allows the development or integration testing to bypass
 * app attestation while still allowing App Check to enforce protection on supported
 * production Firebase services.
 * 
 * To get more information about DebugToken, see:
 * 
 * * [API documentation](https://firebase.google.com/docs/reference/appcheck/rest/v1/projects.apps.debugTokens)
 * * How-to Guides
 *     * [Official Documentation](https://firebase.google.com/docs/app-check)
 * 
 * ## Example Usage
 * 
 * ### Firebase App Check Debug Token Basic
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.firebase.WebApp;
 * import com.pulumi.gcp.firebase.WebAppArgs;
 * import com.pulumi.time.sleep;
 * import com.pulumi.time.SleepArgs;
 * import com.pulumi.gcp.firebase.AppCheckDebugToken;
 * import com.pulumi.gcp.firebase.AppCheckDebugTokenArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var default_ = new WebApp(&#34;default&#34;, WebAppArgs.builder()        
 *             .project(&#34;my-project-name&#34;)
 *             .displayName(&#34;Web App for debug token&#34;)
 *             .build());
 * 
 *         // It takes a while for App Check to recognize the new app
 *         // If your app already exists, you don&#39;t have to wait 30 seconds.
 *         var wait30s = new Sleep(&#34;wait30s&#34;, SleepArgs.builder()        
 *             .createDuration(&#34;30s&#34;)
 *             .build());
 * 
 *         var defaultAppCheckDebugToken = new AppCheckDebugToken(&#34;defaultAppCheckDebugToken&#34;, AppCheckDebugTokenArgs.builder()        
 *             .project(&#34;my-project-name&#34;)
 *             .appId(default_.appId())
 *             .displayName(&#34;Debug Token&#34;)
 *             .token(&#34;00000000-AAAA-BBBB-CCCC-000000000000&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * DebugToken can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/apps/{{app_id}}/debugTokens/{{debug_token_id}}`
 * 
 * * `{{project}}/{{app_id}}/{{debug_token_id}}`
 * 
 * * `{{app_id}}/{{debug_token_id}}`
 * 
 * When using the `pulumi import` command, DebugToken can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:firebase/appCheckDebugToken:AppCheckDebugToken default projects/{{project}}/apps/{{app_id}}/debugTokens/{{debug_token_id}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:firebase/appCheckDebugToken:AppCheckDebugToken default {{project}}/{{app_id}}/{{debug_token_id}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:firebase/appCheckDebugToken:AppCheckDebugToken default {{app_id}}/{{debug_token_id}}
 * ```
 * 
 */
@ResourceType(type="gcp:firebase/appCheckDebugToken:AppCheckDebugToken")
public class AppCheckDebugToken extends com.pulumi.resources.CustomResource {
    /**
     * The ID of a
     * [Web App](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects.webApps#WebApp.FIELDS.app_id),
     * [Apple App](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects.iosApps#IosApp.FIELDS.app_id),
     * or [Android App](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects.androidApps#AndroidApp.FIELDS.app_id)
     * 
     * ***
     * 
     */
    @Export(name="appId", refs={String.class}, tree="[0]")
    private Output<String> appId;

    /**
     * @return The ID of a
     * [Web App](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects.webApps#WebApp.FIELDS.app_id),
     * [Apple App](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects.iosApps#IosApp.FIELDS.app_id),
     * or [Android App](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects.androidApps#AndroidApp.FIELDS.app_id)
     * 
     * ***
     * 
     */
    public Output<String> appId() {
        return this.appId;
    }
    /**
     * The last segment of the resource name of the debug token.
     * 
     */
    @Export(name="debugTokenId", refs={String.class}, tree="[0]")
    private Output<String> debugTokenId;

    /**
     * @return The last segment of the resource name of the debug token.
     * 
     */
    public Output<String> debugTokenId() {
        return this.debugTokenId;
    }
    /**
     * A human readable display name used to identify this debug token.
     * 
     */
    @Export(name="displayName", refs={String.class}, tree="[0]")
    private Output<String> displayName;

    /**
     * @return A human readable display name used to identify this debug token.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * The secret token itself. Must be provided during creation, and must be a UUID4,
     * case insensitive. You may use a method of your choice such as random/random_uuid
     * to generate the token.
     * This field is immutable once set, and cannot be updated. You can, however, delete
     * this debug token to revoke it.
     * For security reasons, this field will never be populated in any response.
     * **Note**: This property is sensitive and will not be displayed in the plan.
     * 
     */
    @Export(name="token", refs={String.class}, tree="[0]")
    private Output<String> token;

    /**
     * @return The secret token itself. Must be provided during creation, and must be a UUID4,
     * case insensitive. You may use a method of your choice such as random/random_uuid
     * to generate the token.
     * This field is immutable once set, and cannot be updated. You can, however, delete
     * this debug token to revoke it.
     * For security reasons, this field will never be populated in any response.
     * **Note**: This property is sensitive and will not be displayed in the plan.
     * 
     */
    public Output<String> token() {
        return this.token;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public AppCheckDebugToken(String name) {
        this(name, AppCheckDebugTokenArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public AppCheckDebugToken(String name, AppCheckDebugTokenArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public AppCheckDebugToken(String name, AppCheckDebugTokenArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:firebase/appCheckDebugToken:AppCheckDebugToken", name, args == null ? AppCheckDebugTokenArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private AppCheckDebugToken(String name, Output<String> id, @Nullable AppCheckDebugTokenState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:firebase/appCheckDebugToken:AppCheckDebugToken", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "token"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static AppCheckDebugToken get(String name, Output<String> id, @Nullable AppCheckDebugTokenState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new AppCheckDebugToken(name, id, state, options);
    }
}
