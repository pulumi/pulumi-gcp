// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.diagflow.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class CxToolOpenApiSpecTlsConfigCaCert {
    /**
     * @return The allowed custom CA certificates (in DER format) for HTTPS verification. This overrides the default SSL trust store.
     * If this is empty or unspecified, Dialogflow will use Google&#39;s default trust store to verify certificates.
     * N.B. Make sure the HTTPS server certificates are signed with &#34;subject alt name&#34;.
     * For instance a certificate can be self-signed using the following command:
     * 
     * A base64-encoded string.
     * 
     */
    private String cert;
    /**
     * @return The name of the allowed custom CA certificates. This can be used to disambiguate the custom CA certificates.
     * 
     */
    private String displayName;

    private CxToolOpenApiSpecTlsConfigCaCert() {}
    /**
     * @return The allowed custom CA certificates (in DER format) for HTTPS verification. This overrides the default SSL trust store.
     * If this is empty or unspecified, Dialogflow will use Google&#39;s default trust store to verify certificates.
     * N.B. Make sure the HTTPS server certificates are signed with &#34;subject alt name&#34;.
     * For instance a certificate can be self-signed using the following command:
     * 
     * A base64-encoded string.
     * 
     */
    public String cert() {
        return this.cert;
    }
    /**
     * @return The name of the allowed custom CA certificates. This can be used to disambiguate the custom CA certificates.
     * 
     */
    public String displayName() {
        return this.displayName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CxToolOpenApiSpecTlsConfigCaCert defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String cert;
        private String displayName;
        public Builder() {}
        public Builder(CxToolOpenApiSpecTlsConfigCaCert defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cert = defaults.cert;
    	      this.displayName = defaults.displayName;
        }

        @CustomType.Setter
        public Builder cert(String cert) {
            if (cert == null) {
              throw new MissingRequiredPropertyException("CxToolOpenApiSpecTlsConfigCaCert", "cert");
            }
            this.cert = cert;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("CxToolOpenApiSpecTlsConfigCaCert", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        public CxToolOpenApiSpecTlsConfigCaCert build() {
            final var _resultValue = new CxToolOpenApiSpecTlsConfigCaCert();
            _resultValue.cert = cert;
            _resultValue.displayName = displayName;
            return _resultValue;
        }
    }
}
