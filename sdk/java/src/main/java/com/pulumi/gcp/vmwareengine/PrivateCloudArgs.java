// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.vmwareengine;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.vmwareengine.inputs.PrivateCloudManagementClusterArgs;
import com.pulumi.gcp.vmwareengine.inputs.PrivateCloudNetworkConfigArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PrivateCloudArgs extends com.pulumi.resources.ResourceArgs {

    public static final PrivateCloudArgs Empty = new PrivateCloudArgs();

    /**
     * User-provided description for this private cloud.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return User-provided description for this private cloud.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The location where the PrivateCloud should reside.
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return The location where the PrivateCloud should reside.
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * The management cluster for this private cloud. This used for creating and managing the default cluster.
     * Structure is documented below.
     * 
     */
    @Import(name="managementCluster", required=true)
    private Output<PrivateCloudManagementClusterArgs> managementCluster;

    /**
     * @return The management cluster for this private cloud. This used for creating and managing the default cluster.
     * Structure is documented below.
     * 
     */
    public Output<PrivateCloudManagementClusterArgs> managementCluster() {
        return this.managementCluster;
    }

    /**
     * The ID of the PrivateCloud.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The ID of the PrivateCloud.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Network configuration in the consumer project with which the peering has to be done.
     * Structure is documented below.
     * 
     */
    @Import(name="networkConfig", required=true)
    private Output<PrivateCloudNetworkConfigArgs> networkConfig;

    /**
     * @return Network configuration in the consumer project with which the peering has to be done.
     * Structure is documented below.
     * 
     */
    public Output<PrivateCloudNetworkConfigArgs> networkConfig() {
        return this.networkConfig;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Initial type of the private cloud.
     * Possible values are: `STANDARD`, `TIME_LIMITED`, `STRETCHED`.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Initial type of the private cloud.
     * Possible values are: `STANDARD`, `TIME_LIMITED`, `STRETCHED`.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private PrivateCloudArgs() {}

    private PrivateCloudArgs(PrivateCloudArgs $) {
        this.description = $.description;
        this.location = $.location;
        this.managementCluster = $.managementCluster;
        this.name = $.name;
        this.networkConfig = $.networkConfig;
        this.project = $.project;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PrivateCloudArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PrivateCloudArgs $;

        public Builder() {
            $ = new PrivateCloudArgs();
        }

        public Builder(PrivateCloudArgs defaults) {
            $ = new PrivateCloudArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description User-provided description for this private cloud.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description User-provided description for this private cloud.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param location The location where the PrivateCloud should reside.
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location where the PrivateCloud should reside.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param managementCluster The management cluster for this private cloud. This used for creating and managing the default cluster.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder managementCluster(Output<PrivateCloudManagementClusterArgs> managementCluster) {
            $.managementCluster = managementCluster;
            return this;
        }

        /**
         * @param managementCluster The management cluster for this private cloud. This used for creating and managing the default cluster.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder managementCluster(PrivateCloudManagementClusterArgs managementCluster) {
            return managementCluster(Output.of(managementCluster));
        }

        /**
         * @param name The ID of the PrivateCloud.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The ID of the PrivateCloud.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param networkConfig Network configuration in the consumer project with which the peering has to be done.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder networkConfig(Output<PrivateCloudNetworkConfigArgs> networkConfig) {
            $.networkConfig = networkConfig;
            return this;
        }

        /**
         * @param networkConfig Network configuration in the consumer project with which the peering has to be done.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder networkConfig(PrivateCloudNetworkConfigArgs networkConfig) {
            return networkConfig(Output.of(networkConfig));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param type Initial type of the private cloud.
         * Possible values are: `STANDARD`, `TIME_LIMITED`, `STRETCHED`.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Initial type of the private cloud.
         * Possible values are: `STANDARD`, `TIME_LIMITED`, `STRETCHED`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public PrivateCloudArgs build() {
            if ($.location == null) {
                throw new MissingRequiredPropertyException("PrivateCloudArgs", "location");
            }
            if ($.managementCluster == null) {
                throw new MissingRequiredPropertyException("PrivateCloudArgs", "managementCluster");
            }
            if ($.networkConfig == null) {
                throw new MissingRequiredPropertyException("PrivateCloudArgs", "networkConfig");
            }
            return $;
        }
    }

}
