// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataform;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.dataform.inputs.RepositoryIamMemberConditionArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RepositoryIamMemberArgs extends com.pulumi.resources.ResourceArgs {

    public static final RepositoryIamMemberArgs Empty = new RepositoryIamMemberArgs();

    @Import(name="condition")
    private @Nullable Output<RepositoryIamMemberConditionArgs> condition;

    public Optional<Output<RepositoryIamMemberConditionArgs>> condition() {
        return Optional.ofNullable(this.condition);
    }

    @Import(name="member", required=true)
    private Output<String> member;

    public Output<String> member() {
        return this.member;
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    @Import(name="region")
    private @Nullable Output<String> region;

    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    @Import(name="repository", required=true)
    private Output<String> repository;

    public Output<String> repository() {
        return this.repository;
    }

    @Import(name="role", required=true)
    private Output<String> role;

    public Output<String> role() {
        return this.role;
    }

    private RepositoryIamMemberArgs() {}

    private RepositoryIamMemberArgs(RepositoryIamMemberArgs $) {
        this.condition = $.condition;
        this.member = $.member;
        this.project = $.project;
        this.region = $.region;
        this.repository = $.repository;
        this.role = $.role;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RepositoryIamMemberArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RepositoryIamMemberArgs $;

        public Builder() {
            $ = new RepositoryIamMemberArgs();
        }

        public Builder(RepositoryIamMemberArgs defaults) {
            $ = new RepositoryIamMemberArgs(Objects.requireNonNull(defaults));
        }

        public Builder condition(@Nullable Output<RepositoryIamMemberConditionArgs> condition) {
            $.condition = condition;
            return this;
        }

        public Builder condition(RepositoryIamMemberConditionArgs condition) {
            return condition(Output.of(condition));
        }

        public Builder member(Output<String> member) {
            $.member = member;
            return this;
        }

        public Builder member(String member) {
            return member(Output.of(member));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        public Builder region(String region) {
            return region(Output.of(region));
        }

        public Builder repository(Output<String> repository) {
            $.repository = repository;
            return this;
        }

        public Builder repository(String repository) {
            return repository(Output.of(repository));
        }

        public Builder role(Output<String> role) {
            $.role = role;
            return this;
        }

        public Builder role(String role) {
            return role(Output.of(role));
        }

        public RepositoryIamMemberArgs build() {
            if ($.member == null) {
                throw new MissingRequiredPropertyException("RepositoryIamMemberArgs", "member");
            }
            if ($.repository == null) {
                throw new MissingRequiredPropertyException("RepositoryIamMemberArgs", "repository");
            }
            if ($.role == null) {
                throw new MissingRequiredPropertyException("RepositoryIamMemberArgs", "role");
            }
            return $;
        }
    }

}
