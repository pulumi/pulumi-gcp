// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.compute.GlobalForwardingRuleArgs;
import com.pulumi.gcp.compute.inputs.GlobalForwardingRuleState;
import com.pulumi.gcp.compute.outputs.GlobalForwardingRuleMetadataFilter;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Represents a GlobalForwardingRule resource. Global forwarding rules are
 * used to forward traffic to the correct load balancer for HTTP load
 * balancing. Global forwarding rules can only be used for HTTP load
 * balancing.
 * 
 * For more information, see
 * https://cloud.google.com/compute/docs/load-balancing/http/
 * 
 * ## Example Usage
 * ### External Ssl Proxy Lb Mig Backend
 * 
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.Network;
 * import com.pulumi.gcp.compute.NetworkArgs;
 * import com.pulumi.gcp.compute.Subnetwork;
 * import com.pulumi.gcp.compute.SubnetworkArgs;
 * import com.pulumi.gcp.compute.GlobalAddress;
 * import com.pulumi.tls.PrivateKey;
 * import com.pulumi.tls.PrivateKeyArgs;
 * import com.pulumi.tls.SelfSignedCert;
 * import com.pulumi.tls.SelfSignedCertArgs;
 * import com.pulumi.tls.inputs.SelfSignedCertSubjectArgs;
 * import com.pulumi.gcp.compute.SSLCertificate;
 * import com.pulumi.gcp.compute.SSLCertificateArgs;
 * import com.pulumi.gcp.compute.HealthCheck;
 * import com.pulumi.gcp.compute.HealthCheckArgs;
 * import com.pulumi.gcp.compute.inputs.HealthCheckTcpHealthCheckArgs;
 * import com.pulumi.gcp.compute.InstanceTemplate;
 * import com.pulumi.gcp.compute.InstanceTemplateArgs;
 * import com.pulumi.gcp.compute.inputs.InstanceTemplateNetworkInterfaceArgs;
 * import com.pulumi.gcp.compute.inputs.InstanceTemplateDiskArgs;
 * import com.pulumi.gcp.compute.InstanceGroupManager;
 * import com.pulumi.gcp.compute.InstanceGroupManagerArgs;
 * import com.pulumi.gcp.compute.inputs.InstanceGroupManagerNamedPortArgs;
 * import com.pulumi.gcp.compute.inputs.InstanceGroupManagerVersionArgs;
 * import com.pulumi.gcp.compute.BackendService;
 * import com.pulumi.gcp.compute.BackendServiceArgs;
 * import com.pulumi.gcp.compute.inputs.BackendServiceBackendArgs;
 * import com.pulumi.gcp.compute.TargetSSLProxy;
 * import com.pulumi.gcp.compute.TargetSSLProxyArgs;
 * import com.pulumi.gcp.compute.GlobalForwardingRule;
 * import com.pulumi.gcp.compute.GlobalForwardingRuleArgs;
 * import com.pulumi.gcp.compute.Firewall;
 * import com.pulumi.gcp.compute.FirewallArgs;
 * import com.pulumi.gcp.compute.inputs.FirewallAllowArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var defaultNetwork = new Network(&#34;defaultNetwork&#34;, NetworkArgs.builder()        
 *             .autoCreateSubnetworks(false)
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google)
 *                 .build());
 * 
 *         var defaultSubnetwork = new Subnetwork(&#34;defaultSubnetwork&#34;, SubnetworkArgs.builder()        
 *             .ipCidrRange(&#34;10.0.1.0/24&#34;)
 *             .region(&#34;us-central1&#34;)
 *             .network(defaultNetwork.id())
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google)
 *                 .build());
 * 
 *         var defaultGlobalAddress = new GlobalAddress(&#34;defaultGlobalAddress&#34;);
 * 
 *         var defaultPrivateKey = new PrivateKey(&#34;defaultPrivateKey&#34;, PrivateKeyArgs.builder()        
 *             .algorithm(&#34;RSA&#34;)
 *             .rsaBits(2048)
 *             .build());
 * 
 *         var defaultSelfSignedCert = new SelfSignedCert(&#34;defaultSelfSignedCert&#34;, SelfSignedCertArgs.builder()        
 *             .keyAlgorithm(defaultPrivateKey.algorithm())
 *             .privateKeyPem(defaultPrivateKey.privateKeyPem())
 *             .validityPeriodHours(12)
 *             .earlyRenewalHours(3)
 *             .allowedUses(            
 *                 &#34;key_encipherment&#34;,
 *                 &#34;digital_signature&#34;,
 *                 &#34;server_auth&#34;)
 *             .dnsNames(&#34;example.com&#34;)
 *             .subject(SelfSignedCertSubjectArgs.builder()
 *                 .commonName(&#34;example.com&#34;)
 *                 .organization(&#34;ACME Examples, Inc&#34;)
 *                 .build())
 *             .build());
 * 
 *         var defaultSSLCertificate = new SSLCertificate(&#34;defaultSSLCertificate&#34;, SSLCertificateArgs.builder()        
 *             .privateKey(defaultPrivateKey.privateKeyPem())
 *             .certificate(defaultSelfSignedCert.certPem())
 *             .build());
 * 
 *         var defaultHealthCheck = new HealthCheck(&#34;defaultHealthCheck&#34;, HealthCheckArgs.builder()        
 *             .timeoutSec(1)
 *             .checkIntervalSec(1)
 *             .tcpHealthCheck(HealthCheckTcpHealthCheckArgs.builder()
 *                 .port(&#34;443&#34;)
 *                 .build())
 *             .build());
 * 
 *         var defaultInstanceTemplate = new InstanceTemplate(&#34;defaultInstanceTemplate&#34;, InstanceTemplateArgs.builder()        
 *             .machineType(&#34;e2-small&#34;)
 *             .tags(&#34;allow-health-check&#34;)
 *             .networkInterfaces(InstanceTemplateNetworkInterfaceArgs.builder()
 *                 .network(defaultNetwork.id())
 *                 .subnetwork(defaultSubnetwork.id())
 *                 .accessConfigs()
 *                 .build())
 *             .disks(InstanceTemplateDiskArgs.builder()
 *                 .sourceImage(&#34;debian-cloud/debian-10&#34;)
 *                 .autoDelete(true)
 *                 .boot(true)
 *                 .build())
 *             .metadata(Map.of(&#34;startup-script&#34;, &#34;&#34;&#34;
 * #! /bin/bash
 * set -euo pipefail
 * export DEBIAN_FRONTEND=noninteractive
 * sudo apt-get update
 * sudo apt-get install  -y apache2 jq
 * sudo a2ensite default-ssl
 * sudo a2enmod ssl
 * sudo service apache2 restart
 * NAME=$(curl -H &#34;Metadata-Flavor: Google&#34; &#34;http://metadata.google.internal/computeMetadata/v1/instance/hostname&#34;)
 * IP=$(curl -H &#34;Metadata-Flavor: Google&#34; &#34;http://metadata.google.internal/computeMetadata/v1/instance/network-interfaces/0/ip&#34;)
 * METADATA=$(curl -f -H &#34;Metadata-Flavor: Google&#34; &#34;http://metadata.google.internal/computeMetadata/v1/instance/attributes/?recursive=True&#34; | jq &#39;del(.[&#34;startup-script&#34;])&#39;)
 * cat &lt;&lt;EOF &gt; /var/www/html/index.html
 * &lt;h1&gt;SSL Load Balancer&lt;/h1&gt;
 * &lt;pre&gt;
 * Name: $NAME
 * IP: $IP
 * Metadata: $METADATA
 * &lt;/pre&gt;
 * EOF
 *             &#34;&#34;&#34;))
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google)
 *                 .build());
 * 
 *         var defaultInstanceGroupManager = new InstanceGroupManager(&#34;defaultInstanceGroupManager&#34;, InstanceGroupManagerArgs.builder()        
 *             .zone(&#34;us-central1-c&#34;)
 *             .namedPorts(InstanceGroupManagerNamedPortArgs.builder()
 *                 .name(&#34;tcp&#34;)
 *                 .port(443)
 *                 .build())
 *             .versions(InstanceGroupManagerVersionArgs.builder()
 *                 .instanceTemplate(defaultInstanceTemplate.id())
 *                 .name(&#34;primary&#34;)
 *                 .build())
 *             .baseInstanceName(&#34;vm&#34;)
 *             .targetSize(2)
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google)
 *                 .build());
 * 
 *         var defaultBackendService = new BackendService(&#34;defaultBackendService&#34;, BackendServiceArgs.builder()        
 *             .protocol(&#34;SSL&#34;)
 *             .portName(&#34;tcp&#34;)
 *             .loadBalancingScheme(&#34;EXTERNAL&#34;)
 *             .timeoutSec(10)
 *             .healthChecks(defaultHealthCheck.id())
 *             .backends(BackendServiceBackendArgs.builder()
 *                 .group(defaultInstanceGroupManager.instanceGroup())
 *                 .balancingMode(&#34;UTILIZATION&#34;)
 *                 .maxUtilization(1)
 *                 .capacityScaler(1)
 *                 .build())
 *             .build());
 * 
 *         var defaultTargetSSLProxy = new TargetSSLProxy(&#34;defaultTargetSSLProxy&#34;, TargetSSLProxyArgs.builder()        
 *             .backendService(defaultBackendService.id())
 *             .sslCertificates(defaultSSLCertificate.id())
 *             .build());
 * 
 *         var defaultGlobalForwardingRule = new GlobalForwardingRule(&#34;defaultGlobalForwardingRule&#34;, GlobalForwardingRuleArgs.builder()        
 *             .ipProtocol(&#34;TCP&#34;)
 *             .loadBalancingScheme(&#34;EXTERNAL&#34;)
 *             .portRange(&#34;443&#34;)
 *             .target(defaultTargetSSLProxy.id())
 *             .ipAddress(defaultGlobalAddress.id())
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google)
 *                 .build());
 * 
 *         var defaultFirewall = new Firewall(&#34;defaultFirewall&#34;, FirewallArgs.builder()        
 *             .direction(&#34;INGRESS&#34;)
 *             .network(defaultNetwork.id())
 *             .sourceRanges(            
 *                 &#34;130.211.0.0/22&#34;,
 *                 &#34;35.191.0.0/16&#34;)
 *             .allows(FirewallAllowArgs.builder()
 *                 .protocol(&#34;tcp&#34;)
 *                 .build())
 *             .targetTags(&#34;allow-health-check&#34;)
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google)
 *                 .build());
 * 
 *     }
 * }
 * ```
 * ### External Tcp Proxy Lb Mig Backend
 * 
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.Network;
 * import com.pulumi.gcp.compute.NetworkArgs;
 * import com.pulumi.gcp.compute.Subnetwork;
 * import com.pulumi.gcp.compute.SubnetworkArgs;
 * import com.pulumi.gcp.compute.GlobalAddress;
 * import com.pulumi.gcp.compute.GlobalAddressArgs;
 * import com.pulumi.gcp.compute.HealthCheck;
 * import com.pulumi.gcp.compute.HealthCheckArgs;
 * import com.pulumi.gcp.compute.inputs.HealthCheckTcpHealthCheckArgs;
 * import com.pulumi.gcp.compute.InstanceTemplate;
 * import com.pulumi.gcp.compute.InstanceTemplateArgs;
 * import com.pulumi.gcp.compute.inputs.InstanceTemplateNetworkInterfaceArgs;
 * import com.pulumi.gcp.compute.inputs.InstanceTemplateDiskArgs;
 * import com.pulumi.gcp.compute.InstanceGroupManager;
 * import com.pulumi.gcp.compute.InstanceGroupManagerArgs;
 * import com.pulumi.gcp.compute.inputs.InstanceGroupManagerNamedPortArgs;
 * import com.pulumi.gcp.compute.inputs.InstanceGroupManagerVersionArgs;
 * import com.pulumi.gcp.compute.BackendService;
 * import com.pulumi.gcp.compute.BackendServiceArgs;
 * import com.pulumi.gcp.compute.inputs.BackendServiceBackendArgs;
 * import com.pulumi.gcp.compute.TargetTCPProxy;
 * import com.pulumi.gcp.compute.TargetTCPProxyArgs;
 * import com.pulumi.gcp.compute.GlobalForwardingRule;
 * import com.pulumi.gcp.compute.GlobalForwardingRuleArgs;
 * import com.pulumi.gcp.compute.Firewall;
 * import com.pulumi.gcp.compute.FirewallArgs;
 * import com.pulumi.gcp.compute.inputs.FirewallAllowArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var defaultNetwork = new Network(&#34;defaultNetwork&#34;, NetworkArgs.builder()        
 *             .autoCreateSubnetworks(false)
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *         var defaultSubnetwork = new Subnetwork(&#34;defaultSubnetwork&#34;, SubnetworkArgs.builder()        
 *             .ipCidrRange(&#34;10.0.1.0/24&#34;)
 *             .region(&#34;us-central1&#34;)
 *             .network(defaultNetwork.id())
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *         var defaultGlobalAddress = new GlobalAddress(&#34;defaultGlobalAddress&#34;, GlobalAddressArgs.Empty, CustomResourceOptions.builder()
 *             .provider(google_beta)
 *             .build());
 * 
 *         var defaultHealthCheck = new HealthCheck(&#34;defaultHealthCheck&#34;, HealthCheckArgs.builder()        
 *             .timeoutSec(1)
 *             .checkIntervalSec(1)
 *             .tcpHealthCheck(HealthCheckTcpHealthCheckArgs.builder()
 *                 .port(&#34;80&#34;)
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *         var defaultInstanceTemplate = new InstanceTemplate(&#34;defaultInstanceTemplate&#34;, InstanceTemplateArgs.builder()        
 *             .machineType(&#34;e2-small&#34;)
 *             .tags(&#34;allow-health-check&#34;)
 *             .networkInterfaces(InstanceTemplateNetworkInterfaceArgs.builder()
 *                 .network(defaultNetwork.id())
 *                 .subnetwork(defaultSubnetwork.id())
 *                 .accessConfigs()
 *                 .build())
 *             .disks(InstanceTemplateDiskArgs.builder()
 *                 .sourceImage(&#34;debian-cloud/debian-10&#34;)
 *                 .autoDelete(true)
 *                 .boot(true)
 *                 .build())
 *             .metadata(Map.of(&#34;startup-script&#34;, &#34;&#34;&#34;
 * #! /bin/bash
 * set -euo pipefail
 * export DEBIAN_FRONTEND=noninteractive
 * apt-get update
 * apt-get install -y nginx-light jq
 * NAME=$(curl -H &#34;Metadata-Flavor: Google&#34; &#34;http://metadata.google.internal/computeMetadata/v1/instance/hostname&#34;)
 * IP=$(curl -H &#34;Metadata-Flavor: Google&#34; &#34;http://metadata.google.internal/computeMetadata/v1/instance/network-interfaces/0/ip&#34;)
 * METADATA=$(curl -f -H &#34;Metadata-Flavor: Google&#34; &#34;http://metadata.google.internal/computeMetadata/v1/instance/attributes/?recursive=True&#34; | jq &#39;del(.[&#34;startup-script&#34;])&#39;)
 * cat &lt;&lt;EOF &gt; /var/www/html/index.html
 * &lt;pre&gt;
 * Name: $NAME
 * IP: $IP
 * Metadata: $METADATA
 * &lt;/pre&gt;
 * EOF
 *             &#34;&#34;&#34;))
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *         var defaultInstanceGroupManager = new InstanceGroupManager(&#34;defaultInstanceGroupManager&#34;, InstanceGroupManagerArgs.builder()        
 *             .zone(&#34;us-central1-c&#34;)
 *             .namedPorts(InstanceGroupManagerNamedPortArgs.builder()
 *                 .name(&#34;tcp&#34;)
 *                 .port(80)
 *                 .build())
 *             .versions(InstanceGroupManagerVersionArgs.builder()
 *                 .instanceTemplate(defaultInstanceTemplate.id())
 *                 .name(&#34;primary&#34;)
 *                 .build())
 *             .baseInstanceName(&#34;vm&#34;)
 *             .targetSize(2)
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *         var defaultBackendService = new BackendService(&#34;defaultBackendService&#34;, BackendServiceArgs.builder()        
 *             .protocol(&#34;TCP&#34;)
 *             .portName(&#34;tcp&#34;)
 *             .loadBalancingScheme(&#34;EXTERNAL&#34;)
 *             .timeoutSec(10)
 *             .healthChecks(defaultHealthCheck.id())
 *             .backends(BackendServiceBackendArgs.builder()
 *                 .group(defaultInstanceGroupManager.instanceGroup())
 *                 .balancingMode(&#34;UTILIZATION&#34;)
 *                 .maxUtilization(1)
 *                 .capacityScaler(1)
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *         var defaultTargetTCPProxy = new TargetTCPProxy(&#34;defaultTargetTCPProxy&#34;, TargetTCPProxyArgs.builder()        
 *             .backendService(defaultBackendService.id())
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *         var defaultGlobalForwardingRule = new GlobalForwardingRule(&#34;defaultGlobalForwardingRule&#34;, GlobalForwardingRuleArgs.builder()        
 *             .ipProtocol(&#34;TCP&#34;)
 *             .loadBalancingScheme(&#34;EXTERNAL&#34;)
 *             .portRange(&#34;110&#34;)
 *             .target(defaultTargetTCPProxy.id())
 *             .ipAddress(defaultGlobalAddress.id())
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *         var defaultFirewall = new Firewall(&#34;defaultFirewall&#34;, FirewallArgs.builder()        
 *             .direction(&#34;INGRESS&#34;)
 *             .network(defaultNetwork.id())
 *             .sourceRanges(            
 *                 &#34;130.211.0.0/22&#34;,
 *                 &#34;35.191.0.0/16&#34;)
 *             .allows(FirewallAllowArgs.builder()
 *                 .protocol(&#34;tcp&#34;)
 *                 .build())
 *             .targetTags(&#34;allow-health-check&#34;)
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *     }
 * }
 * ```
 * ### External Http Lb Mig Backend Custom Header
 * 
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.Network;
 * import com.pulumi.gcp.compute.NetworkArgs;
 * import com.pulumi.gcp.compute.Subnetwork;
 * import com.pulumi.gcp.compute.SubnetworkArgs;
 * import com.pulumi.gcp.compute.GlobalAddress;
 * import com.pulumi.gcp.compute.GlobalAddressArgs;
 * import com.pulumi.gcp.compute.HealthCheck;
 * import com.pulumi.gcp.compute.HealthCheckArgs;
 * import com.pulumi.gcp.compute.inputs.HealthCheckHttpHealthCheckArgs;
 * import com.pulumi.gcp.compute.InstanceTemplate;
 * import com.pulumi.gcp.compute.InstanceTemplateArgs;
 * import com.pulumi.gcp.compute.inputs.InstanceTemplateNetworkInterfaceArgs;
 * import com.pulumi.gcp.compute.inputs.InstanceTemplateDiskArgs;
 * import com.pulumi.gcp.compute.InstanceGroupManager;
 * import com.pulumi.gcp.compute.InstanceGroupManagerArgs;
 * import com.pulumi.gcp.compute.inputs.InstanceGroupManagerNamedPortArgs;
 * import com.pulumi.gcp.compute.inputs.InstanceGroupManagerVersionArgs;
 * import com.pulumi.gcp.compute.BackendService;
 * import com.pulumi.gcp.compute.BackendServiceArgs;
 * import com.pulumi.gcp.compute.inputs.BackendServiceBackendArgs;
 * import com.pulumi.gcp.compute.URLMap;
 * import com.pulumi.gcp.compute.URLMapArgs;
 * import com.pulumi.gcp.compute.TargetHttpProxy;
 * import com.pulumi.gcp.compute.TargetHttpProxyArgs;
 * import com.pulumi.gcp.compute.GlobalForwardingRule;
 * import com.pulumi.gcp.compute.GlobalForwardingRuleArgs;
 * import com.pulumi.gcp.compute.Firewall;
 * import com.pulumi.gcp.compute.FirewallArgs;
 * import com.pulumi.gcp.compute.inputs.FirewallAllowArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var defaultNetwork = new Network(&#34;defaultNetwork&#34;, NetworkArgs.builder()        
 *             .autoCreateSubnetworks(false)
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *         var defaultSubnetwork = new Subnetwork(&#34;defaultSubnetwork&#34;, SubnetworkArgs.builder()        
 *             .ipCidrRange(&#34;10.0.1.0/24&#34;)
 *             .region(&#34;us-central1&#34;)
 *             .network(defaultNetwork.id())
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *         var defaultGlobalAddress = new GlobalAddress(&#34;defaultGlobalAddress&#34;, GlobalAddressArgs.Empty, CustomResourceOptions.builder()
 *             .provider(google_beta)
 *             .build());
 * 
 *         var defaultHealthCheck = new HealthCheck(&#34;defaultHealthCheck&#34;, HealthCheckArgs.builder()        
 *             .httpHealthCheck(HealthCheckHttpHealthCheckArgs.builder()
 *                 .portSpecification(&#34;USE_SERVING_PORT&#34;)
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *         var defaultInstanceTemplate = new InstanceTemplate(&#34;defaultInstanceTemplate&#34;, InstanceTemplateArgs.builder()        
 *             .machineType(&#34;e2-small&#34;)
 *             .tags(&#34;allow-health-check&#34;)
 *             .networkInterfaces(InstanceTemplateNetworkInterfaceArgs.builder()
 *                 .network(defaultNetwork.id())
 *                 .subnetwork(defaultSubnetwork.id())
 *                 .accessConfigs()
 *                 .build())
 *             .disks(InstanceTemplateDiskArgs.builder()
 *                 .sourceImage(&#34;debian-cloud/debian-10&#34;)
 *                 .autoDelete(true)
 *                 .boot(true)
 *                 .build())
 *             .metadata(Map.of(&#34;startup-script&#34;, &#34;&#34;&#34;
 * #! /bin/bash
 * set -euo pipefail
 * 
 * export DEBIAN_FRONTEND=noninteractive
 * apt-get update
 * apt-get install -y nginx-light jq
 * 
 * NAME=$(curl -H &#34;Metadata-Flavor: Google&#34; &#34;http://metadata.google.internal/computeMetadata/v1/instance/hostname&#34;)
 * IP=$(curl -H &#34;Metadata-Flavor: Google&#34; &#34;http://metadata.google.internal/computeMetadata/v1/instance/network-interfaces/0/ip&#34;)
 * METADATA=$(curl -f -H &#34;Metadata-Flavor: Google&#34; &#34;http://metadata.google.internal/computeMetadata/v1/instance/attributes/?recursive=True&#34; | jq &#39;del(.[&#34;startup-script&#34;])&#39;)
 * 
 * cat &lt;&lt;EOF &gt; /var/www/html/index.html
 * &lt;pre&gt;
 * Name: $NAME
 * IP: $IP
 * Metadata: $METADATA
 * &lt;/pre&gt;
 * EOF
 *             &#34;&#34;&#34;))
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *         var defaultInstanceGroupManager = new InstanceGroupManager(&#34;defaultInstanceGroupManager&#34;, InstanceGroupManagerArgs.builder()        
 *             .zone(&#34;us-central1-c&#34;)
 *             .namedPorts(InstanceGroupManagerNamedPortArgs.builder()
 *                 .name(&#34;http&#34;)
 *                 .port(8080)
 *                 .build())
 *             .versions(InstanceGroupManagerVersionArgs.builder()
 *                 .instanceTemplate(defaultInstanceTemplate.id())
 *                 .name(&#34;primary&#34;)
 *                 .build())
 *             .baseInstanceName(&#34;vm&#34;)
 *             .targetSize(2)
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *         var defaultBackendService = new BackendService(&#34;defaultBackendService&#34;, BackendServiceArgs.builder()        
 *             .protocol(&#34;HTTP&#34;)
 *             .portName(&#34;my-port&#34;)
 *             .loadBalancingScheme(&#34;EXTERNAL&#34;)
 *             .timeoutSec(10)
 *             .enableCdn(true)
 *             .customRequestHeaders(&#34;X-Client-Geo-Location: {client_region_subdivision}, {client_city}&#34;)
 *             .customResponseHeaders(&#34;X-Cache-Hit: {cdn_cache_status}&#34;)
 *             .healthChecks(defaultHealthCheck.id())
 *             .backends(BackendServiceBackendArgs.builder()
 *                 .group(defaultInstanceGroupManager.instanceGroup())
 *                 .balancingMode(&#34;UTILIZATION&#34;)
 *                 .capacityScaler(1)
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *         var defaultURLMap = new URLMap(&#34;defaultURLMap&#34;, URLMapArgs.builder()        
 *             .defaultService(defaultBackendService.id())
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *         var defaultTargetHttpProxy = new TargetHttpProxy(&#34;defaultTargetHttpProxy&#34;, TargetHttpProxyArgs.builder()        
 *             .urlMap(defaultURLMap.id())
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *         var defaultGlobalForwardingRule = new GlobalForwardingRule(&#34;defaultGlobalForwardingRule&#34;, GlobalForwardingRuleArgs.builder()        
 *             .ipProtocol(&#34;TCP&#34;)
 *             .loadBalancingScheme(&#34;EXTERNAL&#34;)
 *             .portRange(&#34;80&#34;)
 *             .target(defaultTargetHttpProxy.id())
 *             .ipAddress(defaultGlobalAddress.id())
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *         var defaultFirewall = new Firewall(&#34;defaultFirewall&#34;, FirewallArgs.builder()        
 *             .direction(&#34;INGRESS&#34;)
 *             .network(defaultNetwork.id())
 *             .sourceRanges(            
 *                 &#34;130.211.0.0/22&#34;,
 *                 &#34;35.191.0.0/16&#34;)
 *             .allows(FirewallAllowArgs.builder()
 *                 .protocol(&#34;tcp&#34;)
 *                 .build())
 *             .targetTags(&#34;allow-health-check&#34;)
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *     }
 * }
 * ```
 * ### Global Forwarding Rule Http
 * 
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.HttpHealthCheck;
 * import com.pulumi.gcp.compute.HttpHealthCheckArgs;
 * import com.pulumi.gcp.compute.BackendService;
 * import com.pulumi.gcp.compute.BackendServiceArgs;
 * import com.pulumi.gcp.compute.URLMap;
 * import com.pulumi.gcp.compute.URLMapArgs;
 * import com.pulumi.gcp.compute.inputs.URLMapHostRuleArgs;
 * import com.pulumi.gcp.compute.inputs.URLMapPathMatcherArgs;
 * import com.pulumi.gcp.compute.TargetHttpProxy;
 * import com.pulumi.gcp.compute.TargetHttpProxyArgs;
 * import com.pulumi.gcp.compute.GlobalForwardingRule;
 * import com.pulumi.gcp.compute.GlobalForwardingRuleArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var defaultHttpHealthCheck = new HttpHealthCheck(&#34;defaultHttpHealthCheck&#34;, HttpHealthCheckArgs.builder()        
 *             .requestPath(&#34;/&#34;)
 *             .checkIntervalSec(1)
 *             .timeoutSec(1)
 *             .build());
 * 
 *         var defaultBackendService = new BackendService(&#34;defaultBackendService&#34;, BackendServiceArgs.builder()        
 *             .portName(&#34;http&#34;)
 *             .protocol(&#34;HTTP&#34;)
 *             .timeoutSec(10)
 *             .healthChecks(defaultHttpHealthCheck.id())
 *             .build());
 * 
 *         var defaultURLMap = new URLMap(&#34;defaultURLMap&#34;, URLMapArgs.builder()        
 *             .description(&#34;a description&#34;)
 *             .defaultService(defaultBackendService.id())
 *             .hostRules(URLMapHostRuleArgs.builder()
 *                 .hosts(&#34;mysite.com&#34;)
 *                 .pathMatcher(&#34;allpaths&#34;)
 *                 .build())
 *             .pathMatchers(URLMapPathMatcherArgs.builder()
 *                 .name(&#34;allpaths&#34;)
 *                 .defaultService(defaultBackendService.id())
 *                 .pathRules(URLMapPathMatcherPathRuleArgs.builder()
 *                     .paths(&#34;/*&#34;)
 *                     .service(defaultBackendService.id())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         var defaultTargetHttpProxy = new TargetHttpProxy(&#34;defaultTargetHttpProxy&#34;, TargetHttpProxyArgs.builder()        
 *             .description(&#34;a description&#34;)
 *             .urlMap(defaultURLMap.id())
 *             .build());
 * 
 *         var defaultGlobalForwardingRule = new GlobalForwardingRule(&#34;defaultGlobalForwardingRule&#34;, GlobalForwardingRuleArgs.builder()        
 *             .target(defaultTargetHttpProxy.id())
 *             .portRange(&#34;80&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Global Forwarding Rule Internal
 * 
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.ComputeFunctions;
 * import com.pulumi.gcp.compute.inputs.GetImageArgs;
 * import com.pulumi.gcp.compute.InstanceTemplate;
 * import com.pulumi.gcp.compute.InstanceTemplateArgs;
 * import com.pulumi.gcp.compute.inputs.InstanceTemplateNetworkInterfaceArgs;
 * import com.pulumi.gcp.compute.inputs.InstanceTemplateDiskArgs;
 * import com.pulumi.gcp.compute.InstanceGroupManager;
 * import com.pulumi.gcp.compute.InstanceGroupManagerArgs;
 * import com.pulumi.gcp.compute.inputs.InstanceGroupManagerVersionArgs;
 * import com.pulumi.gcp.compute.HealthCheck;
 * import com.pulumi.gcp.compute.HealthCheckArgs;
 * import com.pulumi.gcp.compute.inputs.HealthCheckTcpHealthCheckArgs;
 * import com.pulumi.gcp.compute.BackendService;
 * import com.pulumi.gcp.compute.BackendServiceArgs;
 * import com.pulumi.gcp.compute.inputs.BackendServiceBackendArgs;
 * import com.pulumi.gcp.compute.URLMap;
 * import com.pulumi.gcp.compute.URLMapArgs;
 * import com.pulumi.gcp.compute.inputs.URLMapHostRuleArgs;
 * import com.pulumi.gcp.compute.inputs.URLMapPathMatcherArgs;
 * import com.pulumi.gcp.compute.TargetHttpProxy;
 * import com.pulumi.gcp.compute.TargetHttpProxyArgs;
 * import com.pulumi.gcp.compute.GlobalForwardingRule;
 * import com.pulumi.gcp.compute.GlobalForwardingRuleArgs;
 * import com.pulumi.gcp.compute.inputs.GlobalForwardingRuleMetadataFilterArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var debianImage = ComputeFunctions.getImage(GetImageArgs.builder()
 *             .family(&#34;debian-11&#34;)
 *             .project(&#34;debian-cloud&#34;)
 *             .build());
 * 
 *         var instanceTemplate = new InstanceTemplate(&#34;instanceTemplate&#34;, InstanceTemplateArgs.builder()        
 *             .machineType(&#34;e2-medium&#34;)
 *             .networkInterfaces(InstanceTemplateNetworkInterfaceArgs.builder()
 *                 .network(&#34;default&#34;)
 *                 .build())
 *             .disks(InstanceTemplateDiskArgs.builder()
 *                 .sourceImage(debianImage.applyValue(getImageResult -&gt; getImageResult.selfLink()))
 *                 .autoDelete(true)
 *                 .boot(true)
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *         var igm = new InstanceGroupManager(&#34;igm&#34;, InstanceGroupManagerArgs.builder()        
 *             .versions(InstanceGroupManagerVersionArgs.builder()
 *                 .instanceTemplate(instanceTemplate.id())
 *                 .name(&#34;primary&#34;)
 *                 .build())
 *             .baseInstanceName(&#34;internal-glb&#34;)
 *             .zone(&#34;us-central1-f&#34;)
 *             .targetSize(1)
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *         var defaultHealthCheck = new HealthCheck(&#34;defaultHealthCheck&#34;, HealthCheckArgs.builder()        
 *             .checkIntervalSec(1)
 *             .timeoutSec(1)
 *             .tcpHealthCheck(HealthCheckTcpHealthCheckArgs.builder()
 *                 .port(&#34;80&#34;)
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *         var defaultBackendService = new BackendService(&#34;defaultBackendService&#34;, BackendServiceArgs.builder()        
 *             .portName(&#34;http&#34;)
 *             .protocol(&#34;HTTP&#34;)
 *             .timeoutSec(10)
 *             .loadBalancingScheme(&#34;INTERNAL_SELF_MANAGED&#34;)
 *             .backends(BackendServiceBackendArgs.builder()
 *                 .group(igm.instanceGroup())
 *                 .balancingMode(&#34;RATE&#34;)
 *                 .capacityScaler(0.4)
 *                 .maxRatePerInstance(50)
 *                 .build())
 *             .healthChecks(defaultHealthCheck.id())
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *         var defaultURLMap = new URLMap(&#34;defaultURLMap&#34;, URLMapArgs.builder()        
 *             .description(&#34;a description&#34;)
 *             .defaultService(defaultBackendService.id())
 *             .hostRules(URLMapHostRuleArgs.builder()
 *                 .hosts(&#34;mysite.com&#34;)
 *                 .pathMatcher(&#34;allpaths&#34;)
 *                 .build())
 *             .pathMatchers(URLMapPathMatcherArgs.builder()
 *                 .name(&#34;allpaths&#34;)
 *                 .defaultService(defaultBackendService.id())
 *                 .pathRules(URLMapPathMatcherPathRuleArgs.builder()
 *                     .paths(&#34;/*&#34;)
 *                     .service(defaultBackendService.id())
 *                     .build())
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *         var defaultTargetHttpProxy = new TargetHttpProxy(&#34;defaultTargetHttpProxy&#34;, TargetHttpProxyArgs.builder()        
 *             .description(&#34;a description&#34;)
 *             .urlMap(defaultURLMap.id())
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *         var defaultGlobalForwardingRule = new GlobalForwardingRule(&#34;defaultGlobalForwardingRule&#34;, GlobalForwardingRuleArgs.builder()        
 *             .target(defaultTargetHttpProxy.id())
 *             .portRange(&#34;80&#34;)
 *             .loadBalancingScheme(&#34;INTERNAL_SELF_MANAGED&#34;)
 *             .ipAddress(&#34;0.0.0.0&#34;)
 *             .metadataFilters(GlobalForwardingRuleMetadataFilterArgs.builder()
 *                 .filterMatchCriteria(&#34;MATCH_ANY&#34;)
 *                 .filterLabels(GlobalForwardingRuleMetadataFilterFilterLabelArgs.builder()
 *                     .name(&#34;PLANET&#34;)
 *                     .value(&#34;MARS&#34;)
 *                     .build())
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *     }
 * }
 * ```
 * ### Global Forwarding Rule External Managed
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.BackendService;
 * import com.pulumi.gcp.compute.BackendServiceArgs;
 * import com.pulumi.gcp.compute.URLMap;
 * import com.pulumi.gcp.compute.URLMapArgs;
 * import com.pulumi.gcp.compute.inputs.URLMapHostRuleArgs;
 * import com.pulumi.gcp.compute.inputs.URLMapPathMatcherArgs;
 * import com.pulumi.gcp.compute.TargetHttpProxy;
 * import com.pulumi.gcp.compute.TargetHttpProxyArgs;
 * import com.pulumi.gcp.compute.GlobalForwardingRule;
 * import com.pulumi.gcp.compute.GlobalForwardingRuleArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var defaultBackendService = new BackendService(&#34;defaultBackendService&#34;, BackendServiceArgs.builder()        
 *             .portName(&#34;http&#34;)
 *             .protocol(&#34;HTTP&#34;)
 *             .timeoutSec(10)
 *             .loadBalancingScheme(&#34;EXTERNAL_MANAGED&#34;)
 *             .build());
 * 
 *         var defaultURLMap = new URLMap(&#34;defaultURLMap&#34;, URLMapArgs.builder()        
 *             .description(&#34;a description&#34;)
 *             .defaultService(defaultBackendService.id())
 *             .hostRules(URLMapHostRuleArgs.builder()
 *                 .hosts(&#34;mysite.com&#34;)
 *                 .pathMatcher(&#34;allpaths&#34;)
 *                 .build())
 *             .pathMatchers(URLMapPathMatcherArgs.builder()
 *                 .name(&#34;allpaths&#34;)
 *                 .defaultService(defaultBackendService.id())
 *                 .pathRules(URLMapPathMatcherPathRuleArgs.builder()
 *                     .paths(&#34;/*&#34;)
 *                     .service(defaultBackendService.id())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         var defaultTargetHttpProxy = new TargetHttpProxy(&#34;defaultTargetHttpProxy&#34;, TargetHttpProxyArgs.builder()        
 *             .description(&#34;a description&#34;)
 *             .urlMap(defaultURLMap.id())
 *             .build());
 * 
 *         var defaultGlobalForwardingRule = new GlobalForwardingRule(&#34;defaultGlobalForwardingRule&#34;, GlobalForwardingRuleArgs.builder()        
 *             .target(defaultTargetHttpProxy.id())
 *             .portRange(&#34;80&#34;)
 *             .loadBalancingScheme(&#34;EXTERNAL_MANAGED&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Global Forwarding Rule Hybrid
 * 
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.Network;
 * import com.pulumi.gcp.compute.NetworkArgs;
 * import com.pulumi.gcp.compute.Subnetwork;
 * import com.pulumi.gcp.compute.SubnetworkArgs;
 * import com.pulumi.gcp.compute.NetworkEndpointGroup;
 * import com.pulumi.gcp.compute.NetworkEndpointGroupArgs;
 * import com.pulumi.gcp.compute.NetworkEndpoint;
 * import com.pulumi.gcp.compute.NetworkEndpointArgs;
 * import com.pulumi.gcp.compute.HealthCheck;
 * import com.pulumi.gcp.compute.HealthCheckArgs;
 * import com.pulumi.gcp.compute.inputs.HealthCheckTcpHealthCheckArgs;
 * import com.pulumi.gcp.compute.BackendService;
 * import com.pulumi.gcp.compute.BackendServiceArgs;
 * import com.pulumi.gcp.compute.inputs.BackendServiceBackendArgs;
 * import com.pulumi.gcp.compute.URLMap;
 * import com.pulumi.gcp.compute.URLMapArgs;
 * import com.pulumi.gcp.compute.inputs.URLMapHostRuleArgs;
 * import com.pulumi.gcp.compute.inputs.URLMapPathMatcherArgs;
 * import com.pulumi.gcp.compute.TargetHttpProxy;
 * import com.pulumi.gcp.compute.TargetHttpProxyArgs;
 * import com.pulumi.gcp.compute.GlobalForwardingRule;
 * import com.pulumi.gcp.compute.GlobalForwardingRuleArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var config = ctx.config();
 *         final var subnetworkCidr = config.get(&#34;subnetworkCidr&#34;).orElse(&#34;10.0.0.0/24&#34;);
 *         var defaultNetwork = new Network(&#34;defaultNetwork&#34;);
 * 
 *         var internalNetwork = new Network(&#34;internalNetwork&#34;, NetworkArgs.builder()        
 *             .autoCreateSubnetworks(false)
 *             .build());
 * 
 *         var internalSubnetwork = new Subnetwork(&#34;internalSubnetwork&#34;, SubnetworkArgs.builder()        
 *             .network(internalNetwork.id())
 *             .ipCidrRange(subnetworkCidr)
 *             .region(&#34;us-central1&#34;)
 *             .privateIpGoogleAccess(true)
 *             .build());
 * 
 *         var defaultNetworkEndpointGroup = new NetworkEndpointGroup(&#34;defaultNetworkEndpointGroup&#34;, NetworkEndpointGroupArgs.builder()        
 *             .network(defaultNetwork.id())
 *             .defaultPort(&#34;90&#34;)
 *             .zone(&#34;us-central1-a&#34;)
 *             .networkEndpointType(&#34;GCE_VM_IP_PORT&#34;)
 *             .build());
 * 
 *         var internalNetworkEndpointGroup = new NetworkEndpointGroup(&#34;internalNetworkEndpointGroup&#34;, NetworkEndpointGroupArgs.builder()        
 *             .network(internalNetwork.id())
 *             .subnetwork(internalSubnetwork.id())
 *             .zone(&#34;us-central1-a&#34;)
 *             .networkEndpointType(&#34;GCE_VM_IP&#34;)
 *             .build());
 * 
 *         var hybridNetworkEndpointGroup = new NetworkEndpointGroup(&#34;hybridNetworkEndpointGroup&#34;, NetworkEndpointGroupArgs.builder()        
 *             .network(defaultNetwork.id())
 *             .defaultPort(&#34;90&#34;)
 *             .zone(&#34;us-central1-a&#34;)
 *             .networkEndpointType(&#34;NON_GCP_PRIVATE_IP_PORT&#34;)
 *             .build());
 * 
 *         var hybrid_endpoint = new NetworkEndpoint(&#34;hybrid-endpoint&#34;, NetworkEndpointArgs.builder()        
 *             .networkEndpointGroup(hybridNetworkEndpointGroup.name())
 *             .port(hybridNetworkEndpointGroup.defaultPort())
 *             .ipAddress(&#34;127.0.0.1&#34;)
 *             .build());
 * 
 *         var defaultHealthCheck = new HealthCheck(&#34;defaultHealthCheck&#34;, HealthCheckArgs.builder()        
 *             .timeoutSec(1)
 *             .checkIntervalSec(1)
 *             .tcpHealthCheck(HealthCheckTcpHealthCheckArgs.builder()
 *                 .port(&#34;80&#34;)
 *                 .build())
 *             .build());
 * 
 *         var defaultBackendService = new BackendService(&#34;defaultBackendService&#34;, BackendServiceArgs.builder()        
 *             .portName(&#34;http&#34;)
 *             .protocol(&#34;HTTP&#34;)
 *             .timeoutSec(10)
 *             .backends(BackendServiceBackendArgs.builder()
 *                 .group(defaultNetworkEndpointGroup.id())
 *                 .balancingMode(&#34;RATE&#34;)
 *                 .maxRatePerEndpoint(10)
 *                 .build())
 *             .healthChecks(defaultHealthCheck.id())
 *             .build());
 * 
 *         var hybridBackendService = new BackendService(&#34;hybridBackendService&#34;, BackendServiceArgs.builder()        
 *             .portName(&#34;http&#34;)
 *             .protocol(&#34;HTTP&#34;)
 *             .timeoutSec(10)
 *             .backends(BackendServiceBackendArgs.builder()
 *                 .group(hybridNetworkEndpointGroup.id())
 *                 .balancingMode(&#34;RATE&#34;)
 *                 .maxRatePerEndpoint(10)
 *                 .build())
 *             .healthChecks(defaultHealthCheck.id())
 *             .build());
 * 
 *         var defaultURLMap = new URLMap(&#34;defaultURLMap&#34;, URLMapArgs.builder()        
 *             .description(&#34;a description&#34;)
 *             .defaultService(defaultBackendService.id())
 *             .hostRules(URLMapHostRuleArgs.builder()
 *                 .hosts(&#34;mysite.com&#34;)
 *                 .pathMatcher(&#34;allpaths&#34;)
 *                 .build())
 *             .pathMatchers(URLMapPathMatcherArgs.builder()
 *                 .name(&#34;allpaths&#34;)
 *                 .defaultService(defaultBackendService.id())
 *                 .pathRules(                
 *                     URLMapPathMatcherPathRuleArgs.builder()
 *                         .paths(&#34;/*&#34;)
 *                         .service(defaultBackendService.id())
 *                         .build(),
 *                     URLMapPathMatcherPathRuleArgs.builder()
 *                         .paths(&#34;/hybrid&#34;)
 *                         .service(hybridBackendService.id())
 *                         .build())
 *                 .build())
 *             .build());
 * 
 *         var defaultTargetHttpProxy = new TargetHttpProxy(&#34;defaultTargetHttpProxy&#34;, TargetHttpProxyArgs.builder()        
 *             .description(&#34;a description&#34;)
 *             .urlMap(defaultURLMap.id())
 *             .build());
 * 
 *         var defaultGlobalForwardingRule = new GlobalForwardingRule(&#34;defaultGlobalForwardingRule&#34;, GlobalForwardingRuleArgs.builder()        
 *             .target(defaultTargetHttpProxy.id())
 *             .portRange(&#34;80&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Global Internal Http Lb With Mig Backend
 * 
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.Network;
 * import com.pulumi.gcp.compute.NetworkArgs;
 * import com.pulumi.gcp.compute.Subnetwork;
 * import com.pulumi.gcp.compute.SubnetworkArgs;
 * import com.pulumi.gcp.compute.HealthCheck;
 * import com.pulumi.gcp.compute.HealthCheckArgs;
 * import com.pulumi.gcp.compute.inputs.HealthCheckHttpHealthCheckArgs;
 * import com.pulumi.gcp.compute.InstanceTemplate;
 * import com.pulumi.gcp.compute.InstanceTemplateArgs;
 * import com.pulumi.gcp.compute.inputs.InstanceTemplateNetworkInterfaceArgs;
 * import com.pulumi.gcp.compute.inputs.InstanceTemplateDiskArgs;
 * import com.pulumi.gcp.compute.InstanceGroupManager;
 * import com.pulumi.gcp.compute.InstanceGroupManagerArgs;
 * import com.pulumi.gcp.compute.inputs.InstanceGroupManagerVersionArgs;
 * import com.pulumi.gcp.compute.BackendService;
 * import com.pulumi.gcp.compute.BackendServiceArgs;
 * import com.pulumi.gcp.compute.inputs.BackendServiceBackendArgs;
 * import com.pulumi.gcp.compute.URLMap;
 * import com.pulumi.gcp.compute.URLMapArgs;
 * import com.pulumi.gcp.compute.TargetHttpProxy;
 * import com.pulumi.gcp.compute.TargetHttpProxyArgs;
 * import com.pulumi.gcp.compute.GlobalForwardingRule;
 * import com.pulumi.gcp.compute.GlobalForwardingRuleArgs;
 * import com.pulumi.gcp.compute.Firewall;
 * import com.pulumi.gcp.compute.FirewallArgs;
 * import com.pulumi.gcp.compute.inputs.FirewallAllowArgs;
 * import com.pulumi.gcp.compute.Instance;
 * import com.pulumi.gcp.compute.InstanceArgs;
 * import com.pulumi.gcp.compute.inputs.InstanceNetworkInterfaceArgs;
 * import com.pulumi.gcp.compute.inputs.InstanceBootDiskArgs;
 * import com.pulumi.gcp.compute.inputs.InstanceBootDiskInitializeParamsArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var gilbNetwork = new Network(&#34;gilbNetwork&#34;, NetworkArgs.builder()        
 *             .autoCreateSubnetworks(false)
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *         var proxySubnet = new Subnetwork(&#34;proxySubnet&#34;, SubnetworkArgs.builder()        
 *             .ipCidrRange(&#34;10.0.0.0/24&#34;)
 *             .region(&#34;europe-west1&#34;)
 *             .purpose(&#34;GLOBAL_MANAGED_PROXY&#34;)
 *             .role(&#34;ACTIVE&#34;)
 *             .network(gilbNetwork.id())
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *         var gilbSubnet = new Subnetwork(&#34;gilbSubnet&#34;, SubnetworkArgs.builder()        
 *             .ipCidrRange(&#34;10.0.1.0/24&#34;)
 *             .region(&#34;europe-west1&#34;)
 *             .network(gilbNetwork.id())
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *         var defaultHealthCheck = new HealthCheck(&#34;defaultHealthCheck&#34;, HealthCheckArgs.builder()        
 *             .httpHealthCheck(HealthCheckHttpHealthCheckArgs.builder()
 *                 .portSpecification(&#34;USE_SERVING_PORT&#34;)
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *         var instanceTemplate = new InstanceTemplate(&#34;instanceTemplate&#34;, InstanceTemplateArgs.builder()        
 *             .machineType(&#34;e2-small&#34;)
 *             .tags(&#34;http-server&#34;)
 *             .networkInterfaces(InstanceTemplateNetworkInterfaceArgs.builder()
 *                 .network(gilbNetwork.id())
 *                 .subnetwork(gilbSubnet.id())
 *                 .accessConfigs()
 *                 .build())
 *             .disks(InstanceTemplateDiskArgs.builder()
 *                 .sourceImage(&#34;debian-cloud/debian-10&#34;)
 *                 .autoDelete(true)
 *                 .boot(true)
 *                 .build())
 *             .metadata(Map.of(&#34;startup-script&#34;, &#34;&#34;&#34;
 * #! /bin/bash
 * set -euo pipefail
 * 
 * export DEBIAN_FRONTEND=noninteractive
 * apt-get update
 * apt-get install -y nginx-light jq
 * 
 * NAME=$(curl -H &#34;Metadata-Flavor: Google&#34; &#34;http://metadata.google.internal/computeMetadata/v1/instance/hostname&#34;)
 * IP=$(curl -H &#34;Metadata-Flavor: Google&#34; &#34;http://metadata.google.internal/computeMetadata/v1/instance/network-interfaces/0/ip&#34;)
 * METADATA=$(curl -f -H &#34;Metadata-Flavor: Google&#34; &#34;http://metadata.google.internal/computeMetadata/v1/instance/attributes/?recursive=True&#34; | jq &#39;del(.[&#34;startup-script&#34;])&#39;)
 * 
 * cat &lt;&lt;EOF &gt; /var/www/html/index.html
 * &lt;pre&gt;
 * Name: $NAME
 * IP: $IP
 * Metadata: $METADATA
 * &lt;/pre&gt;
 * EOF
 *             &#34;&#34;&#34;))
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *         var mig = new InstanceGroupManager(&#34;mig&#34;, InstanceGroupManagerArgs.builder()        
 *             .zone(&#34;europe-west1-b&#34;)
 *             .versions(InstanceGroupManagerVersionArgs.builder()
 *                 .instanceTemplate(instanceTemplate.id())
 *                 .name(&#34;primary&#34;)
 *                 .build())
 *             .baseInstanceName(&#34;vm&#34;)
 *             .targetSize(2)
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *         var defaultBackendService = new BackendService(&#34;defaultBackendService&#34;, BackendServiceArgs.builder()        
 *             .protocol(&#34;HTTP&#34;)
 *             .loadBalancingScheme(&#34;INTERNAL_MANAGED&#34;)
 *             .timeoutSec(10)
 *             .healthChecks(defaultHealthCheck.id())
 *             .backends(BackendServiceBackendArgs.builder()
 *                 .group(mig.instanceGroup())
 *                 .balancingMode(&#34;UTILIZATION&#34;)
 *                 .capacityScaler(1)
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *         var defaultURLMap = new URLMap(&#34;defaultURLMap&#34;, URLMapArgs.builder()        
 *             .defaultService(defaultBackendService.id())
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *         var defaultTargetHttpProxy = new TargetHttpProxy(&#34;defaultTargetHttpProxy&#34;, TargetHttpProxyArgs.builder()        
 *             .urlMap(defaultURLMap.id())
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *         var googleComputeForwardingRule = new GlobalForwardingRule(&#34;googleComputeForwardingRule&#34;, GlobalForwardingRuleArgs.builder()        
 *             .ipProtocol(&#34;TCP&#34;)
 *             .loadBalancingScheme(&#34;INTERNAL_MANAGED&#34;)
 *             .portRange(&#34;80&#34;)
 *             .target(defaultTargetHttpProxy.id())
 *             .network(gilbNetwork.id())
 *             .subnetwork(gilbSubnet.id())
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .dependsOn(proxySubnet)
 *                 .build());
 * 
 *         var fw_iap = new Firewall(&#34;fw-iap&#34;, FirewallArgs.builder()        
 *             .direction(&#34;INGRESS&#34;)
 *             .network(gilbNetwork.id())
 *             .sourceRanges(            
 *                 &#34;130.211.0.0/22&#34;,
 *                 &#34;35.191.0.0/16&#34;,
 *                 &#34;35.235.240.0/20&#34;)
 *             .allows(FirewallAllowArgs.builder()
 *                 .protocol(&#34;tcp&#34;)
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *         var fw_gilb_to_backends = new Firewall(&#34;fw-gilb-to-backends&#34;, FirewallArgs.builder()        
 *             .direction(&#34;INGRESS&#34;)
 *             .network(gilbNetwork.id())
 *             .sourceRanges(&#34;10.0.0.0/24&#34;)
 *             .targetTags(&#34;http-server&#34;)
 *             .allows(FirewallAllowArgs.builder()
 *                 .protocol(&#34;tcp&#34;)
 *                 .ports(                
 *                     &#34;80&#34;,
 *                     &#34;443&#34;,
 *                     &#34;8080&#34;)
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *         var vm_test = new Instance(&#34;vm-test&#34;, InstanceArgs.builder()        
 *             .zone(&#34;europe-west1-b&#34;)
 *             .machineType(&#34;e2-small&#34;)
 *             .networkInterfaces(InstanceNetworkInterfaceArgs.builder()
 *                 .network(gilbNetwork.id())
 *                 .subnetwork(gilbSubnet.id())
 *                 .build())
 *             .bootDisk(InstanceBootDiskArgs.builder()
 *                 .initializeParams(InstanceBootDiskInitializeParamsArgs.builder()
 *                     .image(&#34;debian-cloud/debian-10&#34;)
 *                     .build())
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *     }
 * }
 * ```
 * ### Private Service Connect Google Apis
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.Network;
 * import com.pulumi.gcp.compute.NetworkArgs;
 * import com.pulumi.gcp.compute.Subnetwork;
 * import com.pulumi.gcp.compute.SubnetworkArgs;
 * import com.pulumi.gcp.compute.GlobalAddress;
 * import com.pulumi.gcp.compute.GlobalAddressArgs;
 * import com.pulumi.gcp.compute.GlobalForwardingRule;
 * import com.pulumi.gcp.compute.GlobalForwardingRuleArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var network = new Network(&#34;network&#34;, NetworkArgs.builder()        
 *             .project(&#34;my-project-name&#34;)
 *             .autoCreateSubnetworks(false)
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *         var vpcSubnetwork = new Subnetwork(&#34;vpcSubnetwork&#34;, SubnetworkArgs.builder()        
 *             .project(network.project())
 *             .ipCidrRange(&#34;10.2.0.0/16&#34;)
 *             .region(&#34;us-central1&#34;)
 *             .network(network.id())
 *             .privateIpGoogleAccess(true)
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *         var defaultGlobalAddress = new GlobalAddress(&#34;defaultGlobalAddress&#34;, GlobalAddressArgs.builder()        
 *             .project(network.project())
 *             .addressType(&#34;INTERNAL&#34;)
 *             .purpose(&#34;PRIVATE_SERVICE_CONNECT&#34;)
 *             .network(network.id())
 *             .address(&#34;100.100.100.106&#34;)
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *         var defaultGlobalForwardingRule = new GlobalForwardingRule(&#34;defaultGlobalForwardingRule&#34;, GlobalForwardingRuleArgs.builder()        
 *             .project(network.project())
 *             .target(&#34;all-apis&#34;)
 *             .network(network.id())
 *             .ipAddress(defaultGlobalAddress.id())
 *             .loadBalancingScheme(&#34;&#34;)
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *     }
 * }
 * ```
 * ### Private Service Connect Google Apis No Automate Dns
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.Network;
 * import com.pulumi.gcp.compute.NetworkArgs;
 * import com.pulumi.gcp.compute.Subnetwork;
 * import com.pulumi.gcp.compute.SubnetworkArgs;
 * import com.pulumi.gcp.compute.GlobalAddress;
 * import com.pulumi.gcp.compute.GlobalAddressArgs;
 * import com.pulumi.gcp.compute.GlobalForwardingRule;
 * import com.pulumi.gcp.compute.GlobalForwardingRuleArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var network = new Network(&#34;network&#34;, NetworkArgs.builder()        
 *             .project(&#34;my-project-name&#34;)
 *             .autoCreateSubnetworks(false)
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *         var vpcSubnetwork = new Subnetwork(&#34;vpcSubnetwork&#34;, SubnetworkArgs.builder()        
 *             .project(network.project())
 *             .ipCidrRange(&#34;10.2.0.0/16&#34;)
 *             .region(&#34;us-central1&#34;)
 *             .network(network.id())
 *             .privateIpGoogleAccess(true)
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *         var defaultGlobalAddress = new GlobalAddress(&#34;defaultGlobalAddress&#34;, GlobalAddressArgs.builder()        
 *             .project(network.project())
 *             .addressType(&#34;INTERNAL&#34;)
 *             .purpose(&#34;PRIVATE_SERVICE_CONNECT&#34;)
 *             .network(network.id())
 *             .address(&#34;100.100.100.106&#34;)
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *         var defaultGlobalForwardingRule = new GlobalForwardingRule(&#34;defaultGlobalForwardingRule&#34;, GlobalForwardingRuleArgs.builder()        
 *             .project(network.project())
 *             .target(&#34;all-apis&#34;)
 *             .network(network.id())
 *             .ipAddress(defaultGlobalAddress.id())
 *             .loadBalancingScheme(&#34;&#34;)
 *             .noAutomateDnsZone(false)
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(google_beta)
 *                 .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * GlobalForwardingRule can be imported using any of these accepted formats
 * 
 * ```sh
 *  $ pulumi import gcp:compute/globalForwardingRule:GlobalForwardingRule default projects/{{project}}/global/forwardingRules/{{name}}
 * ```
 * 
 * ```sh
 *  $ pulumi import gcp:compute/globalForwardingRule:GlobalForwardingRule default {{project}}/{{name}}
 * ```
 * 
 * ```sh
 *  $ pulumi import gcp:compute/globalForwardingRule:GlobalForwardingRule default {{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:compute/globalForwardingRule:GlobalForwardingRule")
public class GlobalForwardingRule extends com.pulumi.resources.CustomResource {
    /**
     * This is used in PSC consumer ForwardingRule to control whether the PSC endpoint can be accessed from another region.
     * 
     */
    @Export(name="allowPscGlobalAccess", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> allowPscGlobalAccess;

    /**
     * @return This is used in PSC consumer ForwardingRule to control whether the PSC endpoint can be accessed from another region.
     * 
     */
    public Output<Optional<Boolean>> allowPscGlobalAccess() {
        return Codegen.optional(this.allowPscGlobalAccess);
    }
    /**
     * [Output Only] The URL for the corresponding base Forwarding Rule. By base Forwarding Rule, we mean the Forwarding Rule that has the same IP address, protocol, and port settings with the current Forwarding Rule, but without sourceIPRanges specified. Always empty if the current Forwarding Rule does not have sourceIPRanges specified.
     * 
     */
    @Export(name="baseForwardingRule", refs={String.class}, tree="[0]")
    private Output<String> baseForwardingRule;

    /**
     * @return [Output Only] The URL for the corresponding base Forwarding Rule. By base Forwarding Rule, we mean the Forwarding Rule that has the same IP address, protocol, and port settings with the current Forwarding Rule, but without sourceIPRanges specified. Always empty if the current Forwarding Rule does not have sourceIPRanges specified.
     * 
     */
    public Output<String> baseForwardingRule() {
        return this.baseForwardingRule;
    }
    /**
     * An optional description of this resource. Provide this property when
     * you create the resource.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return An optional description of this resource. Provide this property when
     * you create the resource.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * IP address for which this forwarding rule accepts traffic. When a client
     * sends traffic to this IP address, the forwarding rule directs the traffic
     * to the referenced `target`.
     * While creating a forwarding rule, specifying an `IPAddress` is
     * required under the following circumstances:
     * * When the `target` is set to `targetGrpcProxy` and
     *   `validateForProxyless` is set to `true`, the
     *   `IPAddress` should be set to `0.0.0.0`.
     * * When the `target` is a Private Service Connect Google APIs
     *   bundle, you must specify an `IPAddress`.
     * 
     * Otherwise, you can optionally specify an IP address that references an
     * existing static (reserved) IP address resource. When omitted, Google Cloud
     * assigns an ephemeral IP address.
     * Use one of the following formats to specify an IP address while creating a
     * forwarding rule:
     * * IP address number, as in `100.1.2.3`
     * * IPv6 address range, as in `2600:1234::/96`
     * * Full resource URL, as in
     *   `https://www.googleapis.com/compute/v1/projects/project_id/regions/region/addresses/address-name`
     * * Partial URL or by name, as in:
     * * `projects/project_id/regions/region/addresses/address-name`
     * * `regions/region/addresses/address-name`
     * * `global/addresses/address-name`
     * * `address-name`
     * 
     * The forwarding rule&#39;s `target`,
     * and in most cases, also the `loadBalancingScheme`, determine the
     * type of IP address that you can use. For detailed information, see
     * [IP address
     * specifications](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts#ip_address_specifications).
     * When reading an `IPAddress`, the API always returns the IP
     * address number.
     * 
     */
    @Export(name="ipAddress", refs={String.class}, tree="[0]")
    private Output<String> ipAddress;

    /**
     * @return IP address for which this forwarding rule accepts traffic. When a client
     * sends traffic to this IP address, the forwarding rule directs the traffic
     * to the referenced `target`.
     * While creating a forwarding rule, specifying an `IPAddress` is
     * required under the following circumstances:
     * * When the `target` is set to `targetGrpcProxy` and
     *   `validateForProxyless` is set to `true`, the
     *   `IPAddress` should be set to `0.0.0.0`.
     * * When the `target` is a Private Service Connect Google APIs
     *   bundle, you must specify an `IPAddress`.
     * 
     * Otherwise, you can optionally specify an IP address that references an
     * existing static (reserved) IP address resource. When omitted, Google Cloud
     * assigns an ephemeral IP address.
     * Use one of the following formats to specify an IP address while creating a
     * forwarding rule:
     * * IP address number, as in `100.1.2.3`
     * * IPv6 address range, as in `2600:1234::/96`
     * * Full resource URL, as in
     *   `https://www.googleapis.com/compute/v1/projects/project_id/regions/region/addresses/address-name`
     * * Partial URL or by name, as in:
     * * `projects/project_id/regions/region/addresses/address-name`
     * * `regions/region/addresses/address-name`
     * * `global/addresses/address-name`
     * * `address-name`
     * 
     * The forwarding rule&#39;s `target`,
     * and in most cases, also the `loadBalancingScheme`, determine the
     * type of IP address that you can use. For detailed information, see
     * [IP address
     * specifications](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts#ip_address_specifications).
     * When reading an `IPAddress`, the API always returns the IP
     * address number.
     * 
     */
    public Output<String> ipAddress() {
        return this.ipAddress;
    }
    /**
     * The IP protocol to which this rule applies.
     * For protocol forwarding, valid
     * options are `TCP`, `UDP`, `ESP`,
     * `AH`, `SCTP`, `ICMP` and
     * `L3_DEFAULT`.
     * The valid IP protocols are different for different load balancing products
     * as described in [Load balancing
     * features](https://cloud.google.com/load-balancing/docs/features#protocols_from_the_load_balancer_to_the_backends).
     * Possible values are: `TCP`, `UDP`, `ESP`, `AH`, `SCTP`, `ICMP`.
     * 
     */
    @Export(name="ipProtocol", refs={String.class}, tree="[0]")
    private Output<String> ipProtocol;

    /**
     * @return The IP protocol to which this rule applies.
     * For protocol forwarding, valid
     * options are `TCP`, `UDP`, `ESP`,
     * `AH`, `SCTP`, `ICMP` and
     * `L3_DEFAULT`.
     * The valid IP protocols are different for different load balancing products
     * as described in [Load balancing
     * features](https://cloud.google.com/load-balancing/docs/features#protocols_from_the_load_balancer_to_the_backends).
     * Possible values are: `TCP`, `UDP`, `ESP`, `AH`, `SCTP`, `ICMP`.
     * 
     */
    public Output<String> ipProtocol() {
        return this.ipProtocol;
    }
    /**
     * The IP Version that will be used by this global forwarding rule.
     * Possible values are: `IPV4`, `IPV6`.
     * 
     */
    @Export(name="ipVersion", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ipVersion;

    /**
     * @return The IP Version that will be used by this global forwarding rule.
     * Possible values are: `IPV4`, `IPV6`.
     * 
     */
    public Output<Optional<String>> ipVersion() {
        return Codegen.optional(this.ipVersion);
    }
    /**
     * The fingerprint used for optimistic locking of this resource.  Used
     * internally during updates.
     * 
     */
    @Export(name="labelFingerprint", refs={String.class}, tree="[0]")
    private Output<String> labelFingerprint;

    /**
     * @return The fingerprint used for optimistic locking of this resource.  Used
     * internally during updates.
     * 
     */
    public Output<String> labelFingerprint() {
        return this.labelFingerprint;
    }
    /**
     * Labels to apply to this forwarding rule.  A list of key-&gt;value pairs.
     * 
     */
    @Export(name="labels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> labels;

    /**
     * @return Labels to apply to this forwarding rule.  A list of key-&gt;value pairs.
     * 
     */
    public Output<Optional<Map<String,String>>> labels() {
        return Codegen.optional(this.labels);
    }
    /**
     * Specifies the forwarding rule type.
     * For more information about forwarding rules, refer to
     * [Forwarding rule concepts](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts).
     * Default value is `EXTERNAL`.
     * Possible values are: `EXTERNAL`, `EXTERNAL_MANAGED`, `INTERNAL_MANAGED`, `INTERNAL_SELF_MANAGED`.
     * 
     */
    @Export(name="loadBalancingScheme", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> loadBalancingScheme;

    /**
     * @return Specifies the forwarding rule type.
     * For more information about forwarding rules, refer to
     * [Forwarding rule concepts](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts).
     * Default value is `EXTERNAL`.
     * Possible values are: `EXTERNAL`, `EXTERNAL_MANAGED`, `INTERNAL_MANAGED`, `INTERNAL_SELF_MANAGED`.
     * 
     */
    public Output<Optional<String>> loadBalancingScheme() {
        return Codegen.optional(this.loadBalancingScheme);
    }
    /**
     * Opaque filter criteria used by Loadbalancer to restrict routing
     * configuration to a limited set xDS compliant clients. In their xDS
     * requests to Loadbalancer, xDS clients present node metadata. If a
     * match takes place, the relevant routing configuration is made available
     * to those proxies.
     * For each metadataFilter in this list, if its filterMatchCriteria is set
     * to MATCH_ANY, at least one of the filterLabels must match the
     * corresponding label provided in the metadata. If its filterMatchCriteria
     * is set to MATCH_ALL, then all of its filterLabels must match with
     * corresponding labels in the provided metadata.
     * metadataFilters specified here can be overridden by those specified in
     * the UrlMap that this ForwardingRule references.
     * metadataFilters only applies to Loadbalancers that have their
     * loadBalancingScheme set to INTERNAL_SELF_MANAGED.
     * Structure is documented below.
     * 
     */
    @Export(name="metadataFilters", refs={List.class,GlobalForwardingRuleMetadataFilter.class}, tree="[0,1]")
    private Output</* @Nullable */ List<GlobalForwardingRuleMetadataFilter>> metadataFilters;

    /**
     * @return Opaque filter criteria used by Loadbalancer to restrict routing
     * configuration to a limited set xDS compliant clients. In their xDS
     * requests to Loadbalancer, xDS clients present node metadata. If a
     * match takes place, the relevant routing configuration is made available
     * to those proxies.
     * For each metadataFilter in this list, if its filterMatchCriteria is set
     * to MATCH_ANY, at least one of the filterLabels must match the
     * corresponding label provided in the metadata. If its filterMatchCriteria
     * is set to MATCH_ALL, then all of its filterLabels must match with
     * corresponding labels in the provided metadata.
     * metadataFilters specified here can be overridden by those specified in
     * the UrlMap that this ForwardingRule references.
     * metadataFilters only applies to Loadbalancers that have their
     * loadBalancingScheme set to INTERNAL_SELF_MANAGED.
     * Structure is documented below.
     * 
     */
    public Output<Optional<List<GlobalForwardingRuleMetadataFilter>>> metadataFilters() {
        return Codegen.optional(this.metadataFilters);
    }
    /**
     * Name of the resource; provided by the client when the resource is created.
     * The name must be 1-63 characters long, and comply with
     * [RFC1035](https://www.ietf.org/rfc/rfc1035.txt).
     * Specifically, the name must be 1-63 characters long and match the regular
     * expression `a-z?` which means the first
     * character must be a lowercase letter, and all following characters must
     * be a dash, lowercase letter, or digit, except the last character, which
     * cannot be a dash.
     * For Private Service Connect forwarding rules that forward traffic to Google
     * APIs, the forwarding rule name must be a 1-20 characters string with
     * lowercase letters and numbers and must start with a letter.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the resource; provided by the client when the resource is created.
     * The name must be 1-63 characters long, and comply with
     * [RFC1035](https://www.ietf.org/rfc/rfc1035.txt).
     * Specifically, the name must be 1-63 characters long and match the regular
     * expression `a-z?` which means the first
     * character must be a lowercase letter, and all following characters must
     * be a dash, lowercase letter, or digit, except the last character, which
     * cannot be a dash.
     * For Private Service Connect forwarding rules that forward traffic to Google
     * APIs, the forwarding rule name must be a 1-20 characters string with
     * lowercase letters and numbers and must start with a letter.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * This field is not used for external load balancing.
     * For Internal TCP/UDP Load Balancing, this field identifies the network that
     * the load balanced IP should belong to for this Forwarding Rule.
     * If the subnetwork is specified, the network of the subnetwork will be used.
     * If neither subnetwork nor this field is specified, the default network will
     * be used.
     * For Private Service Connect forwarding rules that forward traffic to Google
     * APIs, a network must be provided.
     * 
     */
    @Export(name="network", refs={String.class}, tree="[0]")
    private Output<String> network;

    /**
     * @return This field is not used for external load balancing.
     * For Internal TCP/UDP Load Balancing, this field identifies the network that
     * the load balanced IP should belong to for this Forwarding Rule.
     * If the subnetwork is specified, the network of the subnetwork will be used.
     * If neither subnetwork nor this field is specified, the default network will
     * be used.
     * For Private Service Connect forwarding rules that forward traffic to Google
     * APIs, a network must be provided.
     * 
     */
    public Output<String> network() {
        return this.network;
    }
    /**
     * This is used in PSC consumer ForwardingRule to control whether it should try to auto-generate a DNS zone or not. Non-PSC forwarding rules do not use this field.
     * 
     */
    @Export(name="noAutomateDnsZone", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> noAutomateDnsZone;

    /**
     * @return This is used in PSC consumer ForwardingRule to control whether it should try to auto-generate a DNS zone or not. Non-PSC forwarding rules do not use this field.
     * 
     */
    public Output<Optional<Boolean>> noAutomateDnsZone() {
        return Codegen.optional(this.noAutomateDnsZone);
    }
    /**
     * This field can only be used:
     * * If `IPProtocol` is one of TCP, UDP, or SCTP.
     * * By backend service-based network load balancers, target pool-based
     * network load balancers, internal proxy load balancers, external proxy load
     * balancers, Traffic Director, external protocol forwarding, and Classic VPN.
     * Some products have restrictions on what ports can be used. See
     * [port specifications](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts#port_specifications)
     * for details.
     * 
     * * TargetHttpProxy: 80, 8080
     * * TargetHttpsProxy: 443
     * * TargetTcpProxy: 25, 43, 110, 143, 195, 443, 465, 587, 700, 993, 995,
     * 1883, 5222
     * * TargetSslProxy: 25, 43, 110, 143, 195, 443, 465, 587, 700, 993, 995,
     * 1883, 5222
     * * TargetVpnGateway: 500, 4500
     * 
     */
    @Export(name="portRange", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> portRange;

    /**
     * @return This field can only be used:
     * * If `IPProtocol` is one of TCP, UDP, or SCTP.
     * * By backend service-based network load balancers, target pool-based
     * network load balancers, internal proxy load balancers, external proxy load
     * balancers, Traffic Director, external protocol forwarding, and Classic VPN.
     * Some products have restrictions on what ports can be used. See
     * [port specifications](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts#port_specifications)
     * for details.
     * 
     * * TargetHttpProxy: 80, 8080
     * * TargetHttpsProxy: 443
     * * TargetTcpProxy: 25, 43, 110, 143, 195, 443, 465, 587, 700, 993, 995,
     * 1883, 5222
     * * TargetSslProxy: 25, 43, 110, 143, 195, 443, 465, 587, 700, 993, 995,
     * 1883, 5222
     * * TargetVpnGateway: 500, 4500
     * 
     */
    public Output<Optional<String>> portRange() {
        return Codegen.optional(this.portRange);
    }
    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * The PSC connection id of the PSC Forwarding Rule.
     * 
     */
    @Export(name="pscConnectionId", refs={String.class}, tree="[0]")
    private Output<String> pscConnectionId;

    /**
     * @return The PSC connection id of the PSC Forwarding Rule.
     * 
     */
    public Output<String> pscConnectionId() {
        return this.pscConnectionId;
    }
    /**
     * The PSC connection status of the PSC Forwarding Rule. Possible values: `STATUS_UNSPECIFIED`, `PENDING`, `ACCEPTED`, `REJECTED`, `CLOSED`
     * 
     */
    @Export(name="pscConnectionStatus", refs={String.class}, tree="[0]")
    private Output<String> pscConnectionStatus;

    /**
     * @return The PSC connection status of the PSC Forwarding Rule. Possible values: `STATUS_UNSPECIFIED`, `PENDING`, `ACCEPTED`, `REJECTED`, `CLOSED`
     * 
     */
    public Output<String> pscConnectionStatus() {
        return this.pscConnectionStatus;
    }
    /**
     * The URI of the created resource.
     * 
     */
    @Export(name="selfLink", refs={String.class}, tree="[0]")
    private Output<String> selfLink;

    /**
     * @return The URI of the created resource.
     * 
     */
    public Output<String> selfLink() {
        return this.selfLink;
    }
    /**
     * If not empty, this Forwarding Rule will only forward the traffic when the source IP address matches one of the IP addresses or CIDR ranges set here. Note that a Forwarding Rule can only have up to 64 source IP ranges, and this field can only be used with a regional Forwarding Rule whose scheme is EXTERNAL. Each sourceIpRange entry should be either an IP address (for example, 1.2.3.4) or a CIDR range (for example, 1.2.3.0/24).
     * 
     */
    @Export(name="sourceIpRanges", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> sourceIpRanges;

    /**
     * @return If not empty, this Forwarding Rule will only forward the traffic when the source IP address matches one of the IP addresses or CIDR ranges set here. Note that a Forwarding Rule can only have up to 64 source IP ranges, and this field can only be used with a regional Forwarding Rule whose scheme is EXTERNAL. Each sourceIpRange entry should be either an IP address (for example, 1.2.3.4) or a CIDR range (for example, 1.2.3.0/24).
     * 
     */
    public Output<Optional<List<String>>> sourceIpRanges() {
        return Codegen.optional(this.sourceIpRanges);
    }
    /**
     * This field identifies the subnetwork that the load balanced IP should
     * belong to for this Forwarding Rule, used in internal load balancing and
     * network load balancing with IPv6.
     * If the network specified is in auto subnet mode, this field is optional.
     * However, a subnetwork must be specified if the network is in custom subnet
     * mode or when creating external forwarding rule with IPv6.
     * 
     */
    @Export(name="subnetwork", refs={String.class}, tree="[0]")
    private Output<String> subnetwork;

    /**
     * @return This field identifies the subnetwork that the load balanced IP should
     * belong to for this Forwarding Rule, used in internal load balancing and
     * network load balancing with IPv6.
     * If the network specified is in auto subnet mode, this field is optional.
     * However, a subnetwork must be specified if the network is in custom subnet
     * mode or when creating external forwarding rule with IPv6.
     * 
     */
    public Output<String> subnetwork() {
        return this.subnetwork;
    }
    /**
     * The URL of the target resource to receive the matched traffic.  For
     * regional forwarding rules, this target must be in the same region as the
     * forwarding rule. For global forwarding rules, this target must be a global
     * load balancing resource.
     * The forwarded traffic must be of a type appropriate to the target object.
     * *  For load balancers, see the &#34;Target&#34; column in [Port specifications](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts#ip_address_specifications).
     * *  For Private Service Connect forwarding rules that forward traffic to Google APIs, provide the name of a supported Google API bundle:
     * *  `vpc-sc` - [ APIs that support VPC Service Controls](https://cloud.google.com/vpc-service-controls/docs/supported-products).
     * *  `all-apis` - [All supported Google APIs](https://cloud.google.com/vpc/docs/private-service-connect#supported-apis).
     * 
     * For Private Service Connect forwarding rules that forward traffic to managed services, the target must be a service attachment.
     * 
     * ***
     * 
     */
    @Export(name="target", refs={String.class}, tree="[0]")
    private Output<String> target;

    /**
     * @return The URL of the target resource to receive the matched traffic.  For
     * regional forwarding rules, this target must be in the same region as the
     * forwarding rule. For global forwarding rules, this target must be a global
     * load balancing resource.
     * The forwarded traffic must be of a type appropriate to the target object.
     * *  For load balancers, see the &#34;Target&#34; column in [Port specifications](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts#ip_address_specifications).
     * *  For Private Service Connect forwarding rules that forward traffic to Google APIs, provide the name of a supported Google API bundle:
     * *  `vpc-sc` - [ APIs that support VPC Service Controls](https://cloud.google.com/vpc-service-controls/docs/supported-products).
     * *  `all-apis` - [All supported Google APIs](https://cloud.google.com/vpc/docs/private-service-connect#supported-apis).
     * 
     * For Private Service Connect forwarding rules that forward traffic to managed services, the target must be a service attachment.
     * 
     * ***
     * 
     */
    public Output<String> target() {
        return this.target;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public GlobalForwardingRule(String name) {
        this(name, GlobalForwardingRuleArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public GlobalForwardingRule(String name, GlobalForwardingRuleArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public GlobalForwardingRule(String name, GlobalForwardingRuleArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:compute/globalForwardingRule:GlobalForwardingRule", name, args == null ? GlobalForwardingRuleArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private GlobalForwardingRule(String name, Output<String> id, @Nullable GlobalForwardingRuleState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:compute/globalForwardingRule:GlobalForwardingRule", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static GlobalForwardingRule get(String name, Output<String> id, @Nullable GlobalForwardingRuleState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new GlobalForwardingRule(name, id, state, options);
    }
}
