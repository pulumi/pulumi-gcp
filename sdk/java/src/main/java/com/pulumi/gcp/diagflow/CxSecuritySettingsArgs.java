// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.diagflow;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.diagflow.inputs.CxSecuritySettingsAudioExportSettingsArgs;
import com.pulumi.gcp.diagflow.inputs.CxSecuritySettingsInsightsExportSettingsArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CxSecuritySettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final CxSecuritySettingsArgs Empty = new CxSecuritySettingsArgs();

    /**
     * Controls audio export settings for post-conversation analytics when ingesting audio to conversations.
     * If retention_strategy is set to REMOVE_AFTER_CONVERSATION or gcs_bucket is empty, audio export is disabled.
     * If audio export is enabled, audio is recorded and saved to gcs_bucket, subject to retention policy of gcs_bucket.
     * This setting won&#39;t effect audio input for implicit sessions via [Sessions.DetectIntent](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/projects.locations.agents.sessions/detectIntent#google.cloud.dialogflow.cx.v3.Sessions.DetectIntent).
     * Structure is documented below.
     * 
     */
    @Import(name="audioExportSettings")
    private @Nullable Output<CxSecuritySettingsAudioExportSettingsArgs> audioExportSettings;

    /**
     * @return Controls audio export settings for post-conversation analytics when ingesting audio to conversations.
     * If retention_strategy is set to REMOVE_AFTER_CONVERSATION or gcs_bucket is empty, audio export is disabled.
     * If audio export is enabled, audio is recorded and saved to gcs_bucket, subject to retention policy of gcs_bucket.
     * This setting won&#39;t effect audio input for implicit sessions via [Sessions.DetectIntent](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/projects.locations.agents.sessions/detectIntent#google.cloud.dialogflow.cx.v3.Sessions.DetectIntent).
     * Structure is documented below.
     * 
     */
    public Optional<Output<CxSecuritySettingsAudioExportSettingsArgs>> audioExportSettings() {
        return Optional.ofNullable(this.audioExportSettings);
    }

    /**
     * [DLP](https://cloud.google.com/dlp/docs) deidentify template name. Use this template to define de-identification configuration for the content. If empty, Dialogflow replaces sensitive info with [redacted] text.
     * Note: deidentifyTemplate must be located in the same region as the SecuritySettings.
     * Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/deidentifyTemplates/&lt;Template ID&gt; OR organizations/&lt;Organization ID&gt;/locations/&lt;Location ID&gt;/deidentifyTemplates/&lt;Template ID&gt;
     * 
     */
    @Import(name="deidentifyTemplate")
    private @Nullable Output<String> deidentifyTemplate;

    /**
     * @return [DLP](https://cloud.google.com/dlp/docs) deidentify template name. Use this template to define de-identification configuration for the content. If empty, Dialogflow replaces sensitive info with [redacted] text.
     * Note: deidentifyTemplate must be located in the same region as the SecuritySettings.
     * Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/deidentifyTemplates/&lt;Template ID&gt; OR organizations/&lt;Organization ID&gt;/locations/&lt;Location ID&gt;/deidentifyTemplates/&lt;Template ID&gt;
     * 
     */
    public Optional<Output<String>> deidentifyTemplate() {
        return Optional.ofNullable(this.deidentifyTemplate);
    }

    /**
     * The human-readable name of the security settings, unique within the location.
     * 
     * ***
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    /**
     * @return The human-readable name of the security settings, unique within the location.
     * 
     * ***
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * Controls conversation exporting settings to Insights after conversation is completed.
     * If retentionStrategy is set to REMOVE_AFTER_CONVERSATION, Insights export is disabled no matter what you configure here.
     * Structure is documented below.
     * 
     */
    @Import(name="insightsExportSettings")
    private @Nullable Output<CxSecuritySettingsInsightsExportSettingsArgs> insightsExportSettings;

    /**
     * @return Controls conversation exporting settings to Insights after conversation is completed.
     * If retentionStrategy is set to REMOVE_AFTER_CONVERSATION, Insights export is disabled no matter what you configure here.
     * Structure is documented below.
     * 
     */
    public Optional<Output<CxSecuritySettingsInsightsExportSettingsArgs>> insightsExportSettings() {
        return Optional.ofNullable(this.insightsExportSettings);
    }

    /**
     * [DLP](https://cloud.google.com/dlp/docs) inspect template name. Use this template to define inspect base settings. If empty, we use the default DLP inspect config.
     * Note: inspectTemplate must be located in the same region as the SecuritySettings.
     * Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/inspectTemplates/&lt;Template ID&gt; OR organizations/&lt;Organization ID&gt;/locations/&lt;Location ID&gt;/inspectTemplates/&lt;Template ID&gt;
     * 
     */
    @Import(name="inspectTemplate")
    private @Nullable Output<String> inspectTemplate;

    /**
     * @return [DLP](https://cloud.google.com/dlp/docs) inspect template name. Use this template to define inspect base settings. If empty, we use the default DLP inspect config.
     * Note: inspectTemplate must be located in the same region as the SecuritySettings.
     * Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/inspectTemplates/&lt;Template ID&gt; OR organizations/&lt;Organization ID&gt;/locations/&lt;Location ID&gt;/inspectTemplates/&lt;Template ID&gt;
     * 
     */
    public Optional<Output<String>> inspectTemplate() {
        return Optional.ofNullable(this.inspectTemplate);
    }

    /**
     * The location these settings are located in. Settings can only be applied to an agent in the same location.
     * See [Available Regions](https://cloud.google.com/dialogflow/cx/docs/concept/region#avail) for a list of supported locations.
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return The location these settings are located in. Settings can only be applied to an agent in the same location.
     * See [Available Regions](https://cloud.google.com/dialogflow/cx/docs/concept/region#avail) for a list of supported locations.
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * List of types of data to remove when retention settings triggers purge.
     * Each value may be one of: `DIALOGFLOW_HISTORY`.
     * 
     */
    @Import(name="purgeDataTypes")
    private @Nullable Output<List<String>> purgeDataTypes;

    /**
     * @return List of types of data to remove when retention settings triggers purge.
     * Each value may be one of: `DIALOGFLOW_HISTORY`.
     * 
     */
    public Optional<Output<List<String>>> purgeDataTypes() {
        return Optional.ofNullable(this.purgeDataTypes);
    }

    /**
     * Defines what types of data to redact. If not set, defaults to not redacting any kind of data.
     * * REDACT_DISK_STORAGE: On data to be written to disk or similar devices that are capable of holding data even if power is disconnected. This includes data that are temporarily saved on disk.
     *   Possible values are: `REDACT_DISK_STORAGE`.
     * 
     */
    @Import(name="redactionScope")
    private @Nullable Output<String> redactionScope;

    /**
     * @return Defines what types of data to redact. If not set, defaults to not redacting any kind of data.
     * * REDACT_DISK_STORAGE: On data to be written to disk or similar devices that are capable of holding data even if power is disconnected. This includes data that are temporarily saved on disk.
     *   Possible values are: `REDACT_DISK_STORAGE`.
     * 
     */
    public Optional<Output<String>> redactionScope() {
        return Optional.ofNullable(this.redactionScope);
    }

    /**
     * Defines how we redact data. If not set, defaults to not redacting.
     * * REDACT_WITH_SERVICE: Call redaction service to clean up the data to be persisted.
     *   Possible values are: `REDACT_WITH_SERVICE`.
     * 
     */
    @Import(name="redactionStrategy")
    private @Nullable Output<String> redactionStrategy;

    /**
     * @return Defines how we redact data. If not set, defaults to not redacting.
     * * REDACT_WITH_SERVICE: Call redaction service to clean up the data to be persisted.
     *   Possible values are: `REDACT_WITH_SERVICE`.
     * 
     */
    public Optional<Output<String>> redactionStrategy() {
        return Optional.ofNullable(this.redactionStrategy);
    }

    /**
     * Defines how long we retain persisted data that contains sensitive info. Only one of `retention_window_days` and `retention_strategy` may be set.
     * * REMOVE_AFTER_CONVERSATION: Removes data when the conversation ends. If there is no conversation explicitly established, a default conversation ends when the corresponding Dialogflow session ends.
     *   Possible values are: `REMOVE_AFTER_CONVERSATION`.
     * 
     */
    @Import(name="retentionStrategy")
    private @Nullable Output<String> retentionStrategy;

    /**
     * @return Defines how long we retain persisted data that contains sensitive info. Only one of `retention_window_days` and `retention_strategy` may be set.
     * * REMOVE_AFTER_CONVERSATION: Removes data when the conversation ends. If there is no conversation explicitly established, a default conversation ends when the corresponding Dialogflow session ends.
     *   Possible values are: `REMOVE_AFTER_CONVERSATION`.
     * 
     */
    public Optional<Output<String>> retentionStrategy() {
        return Optional.ofNullable(this.retentionStrategy);
    }

    /**
     * Retains the data for the specified number of days. User must set a value lower than Dialogflow&#39;s default 365d TTL (30 days for Agent Assist traffic), higher value will be ignored and use default. Setting a value higher than that has no effect. A missing value or setting to 0 also means we use default TTL.
     * Only one of `retention_window_days` and `retention_strategy` may be set.
     * 
     */
    @Import(name="retentionWindowDays")
    private @Nullable Output<Integer> retentionWindowDays;

    /**
     * @return Retains the data for the specified number of days. User must set a value lower than Dialogflow&#39;s default 365d TTL (30 days for Agent Assist traffic), higher value will be ignored and use default. Setting a value higher than that has no effect. A missing value or setting to 0 also means we use default TTL.
     * Only one of `retention_window_days` and `retention_strategy` may be set.
     * 
     */
    public Optional<Output<Integer>> retentionWindowDays() {
        return Optional.ofNullable(this.retentionWindowDays);
    }

    private CxSecuritySettingsArgs() {}

    private CxSecuritySettingsArgs(CxSecuritySettingsArgs $) {
        this.audioExportSettings = $.audioExportSettings;
        this.deidentifyTemplate = $.deidentifyTemplate;
        this.displayName = $.displayName;
        this.insightsExportSettings = $.insightsExportSettings;
        this.inspectTemplate = $.inspectTemplate;
        this.location = $.location;
        this.project = $.project;
        this.purgeDataTypes = $.purgeDataTypes;
        this.redactionScope = $.redactionScope;
        this.redactionStrategy = $.redactionStrategy;
        this.retentionStrategy = $.retentionStrategy;
        this.retentionWindowDays = $.retentionWindowDays;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CxSecuritySettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CxSecuritySettingsArgs $;

        public Builder() {
            $ = new CxSecuritySettingsArgs();
        }

        public Builder(CxSecuritySettingsArgs defaults) {
            $ = new CxSecuritySettingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param audioExportSettings Controls audio export settings for post-conversation analytics when ingesting audio to conversations.
         * If retention_strategy is set to REMOVE_AFTER_CONVERSATION or gcs_bucket is empty, audio export is disabled.
         * If audio export is enabled, audio is recorded and saved to gcs_bucket, subject to retention policy of gcs_bucket.
         * This setting won&#39;t effect audio input for implicit sessions via [Sessions.DetectIntent](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/projects.locations.agents.sessions/detectIntent#google.cloud.dialogflow.cx.v3.Sessions.DetectIntent).
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder audioExportSettings(@Nullable Output<CxSecuritySettingsAudioExportSettingsArgs> audioExportSettings) {
            $.audioExportSettings = audioExportSettings;
            return this;
        }

        /**
         * @param audioExportSettings Controls audio export settings for post-conversation analytics when ingesting audio to conversations.
         * If retention_strategy is set to REMOVE_AFTER_CONVERSATION or gcs_bucket is empty, audio export is disabled.
         * If audio export is enabled, audio is recorded and saved to gcs_bucket, subject to retention policy of gcs_bucket.
         * This setting won&#39;t effect audio input for implicit sessions via [Sessions.DetectIntent](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/projects.locations.agents.sessions/detectIntent#google.cloud.dialogflow.cx.v3.Sessions.DetectIntent).
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder audioExportSettings(CxSecuritySettingsAudioExportSettingsArgs audioExportSettings) {
            return audioExportSettings(Output.of(audioExportSettings));
        }

        /**
         * @param deidentifyTemplate [DLP](https://cloud.google.com/dlp/docs) deidentify template name. Use this template to define de-identification configuration for the content. If empty, Dialogflow replaces sensitive info with [redacted] text.
         * Note: deidentifyTemplate must be located in the same region as the SecuritySettings.
         * Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/deidentifyTemplates/&lt;Template ID&gt; OR organizations/&lt;Organization ID&gt;/locations/&lt;Location ID&gt;/deidentifyTemplates/&lt;Template ID&gt;
         * 
         * @return builder
         * 
         */
        public Builder deidentifyTemplate(@Nullable Output<String> deidentifyTemplate) {
            $.deidentifyTemplate = deidentifyTemplate;
            return this;
        }

        /**
         * @param deidentifyTemplate [DLP](https://cloud.google.com/dlp/docs) deidentify template name. Use this template to define de-identification configuration for the content. If empty, Dialogflow replaces sensitive info with [redacted] text.
         * Note: deidentifyTemplate must be located in the same region as the SecuritySettings.
         * Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/deidentifyTemplates/&lt;Template ID&gt; OR organizations/&lt;Organization ID&gt;/locations/&lt;Location ID&gt;/deidentifyTemplates/&lt;Template ID&gt;
         * 
         * @return builder
         * 
         */
        public Builder deidentifyTemplate(String deidentifyTemplate) {
            return deidentifyTemplate(Output.of(deidentifyTemplate));
        }

        /**
         * @param displayName The human-readable name of the security settings, unique within the location.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The human-readable name of the security settings, unique within the location.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param insightsExportSettings Controls conversation exporting settings to Insights after conversation is completed.
         * If retentionStrategy is set to REMOVE_AFTER_CONVERSATION, Insights export is disabled no matter what you configure here.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder insightsExportSettings(@Nullable Output<CxSecuritySettingsInsightsExportSettingsArgs> insightsExportSettings) {
            $.insightsExportSettings = insightsExportSettings;
            return this;
        }

        /**
         * @param insightsExportSettings Controls conversation exporting settings to Insights after conversation is completed.
         * If retentionStrategy is set to REMOVE_AFTER_CONVERSATION, Insights export is disabled no matter what you configure here.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder insightsExportSettings(CxSecuritySettingsInsightsExportSettingsArgs insightsExportSettings) {
            return insightsExportSettings(Output.of(insightsExportSettings));
        }

        /**
         * @param inspectTemplate [DLP](https://cloud.google.com/dlp/docs) inspect template name. Use this template to define inspect base settings. If empty, we use the default DLP inspect config.
         * Note: inspectTemplate must be located in the same region as the SecuritySettings.
         * Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/inspectTemplates/&lt;Template ID&gt; OR organizations/&lt;Organization ID&gt;/locations/&lt;Location ID&gt;/inspectTemplates/&lt;Template ID&gt;
         * 
         * @return builder
         * 
         */
        public Builder inspectTemplate(@Nullable Output<String> inspectTemplate) {
            $.inspectTemplate = inspectTemplate;
            return this;
        }

        /**
         * @param inspectTemplate [DLP](https://cloud.google.com/dlp/docs) inspect template name. Use this template to define inspect base settings. If empty, we use the default DLP inspect config.
         * Note: inspectTemplate must be located in the same region as the SecuritySettings.
         * Format: projects/&lt;Project ID&gt;/locations/&lt;Location ID&gt;/inspectTemplates/&lt;Template ID&gt; OR organizations/&lt;Organization ID&gt;/locations/&lt;Location ID&gt;/inspectTemplates/&lt;Template ID&gt;
         * 
         * @return builder
         * 
         */
        public Builder inspectTemplate(String inspectTemplate) {
            return inspectTemplate(Output.of(inspectTemplate));
        }

        /**
         * @param location The location these settings are located in. Settings can only be applied to an agent in the same location.
         * See [Available Regions](https://cloud.google.com/dialogflow/cx/docs/concept/region#avail) for a list of supported locations.
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location these settings are located in. Settings can only be applied to an agent in the same location.
         * See [Available Regions](https://cloud.google.com/dialogflow/cx/docs/concept/region#avail) for a list of supported locations.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param purgeDataTypes List of types of data to remove when retention settings triggers purge.
         * Each value may be one of: `DIALOGFLOW_HISTORY`.
         * 
         * @return builder
         * 
         */
        public Builder purgeDataTypes(@Nullable Output<List<String>> purgeDataTypes) {
            $.purgeDataTypes = purgeDataTypes;
            return this;
        }

        /**
         * @param purgeDataTypes List of types of data to remove when retention settings triggers purge.
         * Each value may be one of: `DIALOGFLOW_HISTORY`.
         * 
         * @return builder
         * 
         */
        public Builder purgeDataTypes(List<String> purgeDataTypes) {
            return purgeDataTypes(Output.of(purgeDataTypes));
        }

        /**
         * @param purgeDataTypes List of types of data to remove when retention settings triggers purge.
         * Each value may be one of: `DIALOGFLOW_HISTORY`.
         * 
         * @return builder
         * 
         */
        public Builder purgeDataTypes(String... purgeDataTypes) {
            return purgeDataTypes(List.of(purgeDataTypes));
        }

        /**
         * @param redactionScope Defines what types of data to redact. If not set, defaults to not redacting any kind of data.
         * * REDACT_DISK_STORAGE: On data to be written to disk or similar devices that are capable of holding data even if power is disconnected. This includes data that are temporarily saved on disk.
         *   Possible values are: `REDACT_DISK_STORAGE`.
         * 
         * @return builder
         * 
         */
        public Builder redactionScope(@Nullable Output<String> redactionScope) {
            $.redactionScope = redactionScope;
            return this;
        }

        /**
         * @param redactionScope Defines what types of data to redact. If not set, defaults to not redacting any kind of data.
         * * REDACT_DISK_STORAGE: On data to be written to disk or similar devices that are capable of holding data even if power is disconnected. This includes data that are temporarily saved on disk.
         *   Possible values are: `REDACT_DISK_STORAGE`.
         * 
         * @return builder
         * 
         */
        public Builder redactionScope(String redactionScope) {
            return redactionScope(Output.of(redactionScope));
        }

        /**
         * @param redactionStrategy Defines how we redact data. If not set, defaults to not redacting.
         * * REDACT_WITH_SERVICE: Call redaction service to clean up the data to be persisted.
         *   Possible values are: `REDACT_WITH_SERVICE`.
         * 
         * @return builder
         * 
         */
        public Builder redactionStrategy(@Nullable Output<String> redactionStrategy) {
            $.redactionStrategy = redactionStrategy;
            return this;
        }

        /**
         * @param redactionStrategy Defines how we redact data. If not set, defaults to not redacting.
         * * REDACT_WITH_SERVICE: Call redaction service to clean up the data to be persisted.
         *   Possible values are: `REDACT_WITH_SERVICE`.
         * 
         * @return builder
         * 
         */
        public Builder redactionStrategy(String redactionStrategy) {
            return redactionStrategy(Output.of(redactionStrategy));
        }

        /**
         * @param retentionStrategy Defines how long we retain persisted data that contains sensitive info. Only one of `retention_window_days` and `retention_strategy` may be set.
         * * REMOVE_AFTER_CONVERSATION: Removes data when the conversation ends. If there is no conversation explicitly established, a default conversation ends when the corresponding Dialogflow session ends.
         *   Possible values are: `REMOVE_AFTER_CONVERSATION`.
         * 
         * @return builder
         * 
         */
        public Builder retentionStrategy(@Nullable Output<String> retentionStrategy) {
            $.retentionStrategy = retentionStrategy;
            return this;
        }

        /**
         * @param retentionStrategy Defines how long we retain persisted data that contains sensitive info. Only one of `retention_window_days` and `retention_strategy` may be set.
         * * REMOVE_AFTER_CONVERSATION: Removes data when the conversation ends. If there is no conversation explicitly established, a default conversation ends when the corresponding Dialogflow session ends.
         *   Possible values are: `REMOVE_AFTER_CONVERSATION`.
         * 
         * @return builder
         * 
         */
        public Builder retentionStrategy(String retentionStrategy) {
            return retentionStrategy(Output.of(retentionStrategy));
        }

        /**
         * @param retentionWindowDays Retains the data for the specified number of days. User must set a value lower than Dialogflow&#39;s default 365d TTL (30 days for Agent Assist traffic), higher value will be ignored and use default. Setting a value higher than that has no effect. A missing value or setting to 0 also means we use default TTL.
         * Only one of `retention_window_days` and `retention_strategy` may be set.
         * 
         * @return builder
         * 
         */
        public Builder retentionWindowDays(@Nullable Output<Integer> retentionWindowDays) {
            $.retentionWindowDays = retentionWindowDays;
            return this;
        }

        /**
         * @param retentionWindowDays Retains the data for the specified number of days. User must set a value lower than Dialogflow&#39;s default 365d TTL (30 days for Agent Assist traffic), higher value will be ignored and use default. Setting a value higher than that has no effect. A missing value or setting to 0 also means we use default TTL.
         * Only one of `retention_window_days` and `retention_strategy` may be set.
         * 
         * @return builder
         * 
         */
        public Builder retentionWindowDays(Integer retentionWindowDays) {
            return retentionWindowDays(Output.of(retentionWindowDays));
        }

        public CxSecuritySettingsArgs build() {
            $.displayName = Objects.requireNonNull($.displayName, "expected parameter 'displayName' to be non-null");
            $.location = Objects.requireNonNull($.location, "expected parameter 'location' to be non-null");
            return $;
        }
    }

}
