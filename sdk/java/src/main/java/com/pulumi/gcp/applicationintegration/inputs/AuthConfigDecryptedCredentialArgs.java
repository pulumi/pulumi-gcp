// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.applicationintegration.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.applicationintegration.inputs.AuthConfigDecryptedCredentialAuthTokenArgs;
import com.pulumi.gcp.applicationintegration.inputs.AuthConfigDecryptedCredentialJwtArgs;
import com.pulumi.gcp.applicationintegration.inputs.AuthConfigDecryptedCredentialOauth2AuthorizationCodeArgs;
import com.pulumi.gcp.applicationintegration.inputs.AuthConfigDecryptedCredentialOauth2ClientCredentialsArgs;
import com.pulumi.gcp.applicationintegration.inputs.AuthConfigDecryptedCredentialOidcTokenArgs;
import com.pulumi.gcp.applicationintegration.inputs.AuthConfigDecryptedCredentialServiceAccountCredentialsArgs;
import com.pulumi.gcp.applicationintegration.inputs.AuthConfigDecryptedCredentialUsernameAndPasswordArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AuthConfigDecryptedCredentialArgs extends com.pulumi.resources.ResourceArgs {

    public static final AuthConfigDecryptedCredentialArgs Empty = new AuthConfigDecryptedCredentialArgs();

    /**
     * Auth token credential.
     * Structure is documented below.
     * 
     */
    @Import(name="authToken")
    private @Nullable Output<AuthConfigDecryptedCredentialAuthTokenArgs> authToken;

    /**
     * @return Auth token credential.
     * Structure is documented below.
     * 
     */
    public Optional<Output<AuthConfigDecryptedCredentialAuthTokenArgs>> authToken() {
        return Optional.ofNullable(this.authToken);
    }

    /**
     * Credential type associated with auth configs.
     * 
     */
    @Import(name="credentialType", required=true)
    private Output<String> credentialType;

    /**
     * @return Credential type associated with auth configs.
     * 
     */
    public Output<String> credentialType() {
        return this.credentialType;
    }

    /**
     * JWT credential.
     * Structure is documented below.
     * 
     */
    @Import(name="jwt")
    private @Nullable Output<AuthConfigDecryptedCredentialJwtArgs> jwt;

    /**
     * @return JWT credential.
     * Structure is documented below.
     * 
     */
    public Optional<Output<AuthConfigDecryptedCredentialJwtArgs>> jwt() {
        return Optional.ofNullable(this.jwt);
    }

    /**
     * OAuth2 authorization code credential.
     * Structure is documented below.
     * 
     */
    @Import(name="oauth2AuthorizationCode")
    private @Nullable Output<AuthConfigDecryptedCredentialOauth2AuthorizationCodeArgs> oauth2AuthorizationCode;

    /**
     * @return OAuth2 authorization code credential.
     * Structure is documented below.
     * 
     */
    public Optional<Output<AuthConfigDecryptedCredentialOauth2AuthorizationCodeArgs>> oauth2AuthorizationCode() {
        return Optional.ofNullable(this.oauth2AuthorizationCode);
    }

    /**
     * OAuth2 client credentials.
     * Structure is documented below.
     * 
     */
    @Import(name="oauth2ClientCredentials")
    private @Nullable Output<AuthConfigDecryptedCredentialOauth2ClientCredentialsArgs> oauth2ClientCredentials;

    /**
     * @return OAuth2 client credentials.
     * Structure is documented below.
     * 
     */
    public Optional<Output<AuthConfigDecryptedCredentialOauth2ClientCredentialsArgs>> oauth2ClientCredentials() {
        return Optional.ofNullable(this.oauth2ClientCredentials);
    }

    /**
     * Google OIDC ID Token.
     * Structure is documented below.
     * 
     */
    @Import(name="oidcToken")
    private @Nullable Output<AuthConfigDecryptedCredentialOidcTokenArgs> oidcToken;

    /**
     * @return Google OIDC ID Token.
     * Structure is documented below.
     * 
     */
    public Optional<Output<AuthConfigDecryptedCredentialOidcTokenArgs>> oidcToken() {
        return Optional.ofNullable(this.oidcToken);
    }

    /**
     * Service account credential.
     * Structure is documented below.
     * 
     */
    @Import(name="serviceAccountCredentials")
    private @Nullable Output<AuthConfigDecryptedCredentialServiceAccountCredentialsArgs> serviceAccountCredentials;

    /**
     * @return Service account credential.
     * Structure is documented below.
     * 
     */
    public Optional<Output<AuthConfigDecryptedCredentialServiceAccountCredentialsArgs>> serviceAccountCredentials() {
        return Optional.ofNullable(this.serviceAccountCredentials);
    }

    /**
     * Username and password credential.
     * Structure is documented below.
     * 
     */
    @Import(name="usernameAndPassword")
    private @Nullable Output<AuthConfigDecryptedCredentialUsernameAndPasswordArgs> usernameAndPassword;

    /**
     * @return Username and password credential.
     * Structure is documented below.
     * 
     */
    public Optional<Output<AuthConfigDecryptedCredentialUsernameAndPasswordArgs>> usernameAndPassword() {
        return Optional.ofNullable(this.usernameAndPassword);
    }

    private AuthConfigDecryptedCredentialArgs() {}

    private AuthConfigDecryptedCredentialArgs(AuthConfigDecryptedCredentialArgs $) {
        this.authToken = $.authToken;
        this.credentialType = $.credentialType;
        this.jwt = $.jwt;
        this.oauth2AuthorizationCode = $.oauth2AuthorizationCode;
        this.oauth2ClientCredentials = $.oauth2ClientCredentials;
        this.oidcToken = $.oidcToken;
        this.serviceAccountCredentials = $.serviceAccountCredentials;
        this.usernameAndPassword = $.usernameAndPassword;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AuthConfigDecryptedCredentialArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AuthConfigDecryptedCredentialArgs $;

        public Builder() {
            $ = new AuthConfigDecryptedCredentialArgs();
        }

        public Builder(AuthConfigDecryptedCredentialArgs defaults) {
            $ = new AuthConfigDecryptedCredentialArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authToken Auth token credential.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder authToken(@Nullable Output<AuthConfigDecryptedCredentialAuthTokenArgs> authToken) {
            $.authToken = authToken;
            return this;
        }

        /**
         * @param authToken Auth token credential.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder authToken(AuthConfigDecryptedCredentialAuthTokenArgs authToken) {
            return authToken(Output.of(authToken));
        }

        /**
         * @param credentialType Credential type associated with auth configs.
         * 
         * @return builder
         * 
         */
        public Builder credentialType(Output<String> credentialType) {
            $.credentialType = credentialType;
            return this;
        }

        /**
         * @param credentialType Credential type associated with auth configs.
         * 
         * @return builder
         * 
         */
        public Builder credentialType(String credentialType) {
            return credentialType(Output.of(credentialType));
        }

        /**
         * @param jwt JWT credential.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder jwt(@Nullable Output<AuthConfigDecryptedCredentialJwtArgs> jwt) {
            $.jwt = jwt;
            return this;
        }

        /**
         * @param jwt JWT credential.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder jwt(AuthConfigDecryptedCredentialJwtArgs jwt) {
            return jwt(Output.of(jwt));
        }

        /**
         * @param oauth2AuthorizationCode OAuth2 authorization code credential.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder oauth2AuthorizationCode(@Nullable Output<AuthConfigDecryptedCredentialOauth2AuthorizationCodeArgs> oauth2AuthorizationCode) {
            $.oauth2AuthorizationCode = oauth2AuthorizationCode;
            return this;
        }

        /**
         * @param oauth2AuthorizationCode OAuth2 authorization code credential.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder oauth2AuthorizationCode(AuthConfigDecryptedCredentialOauth2AuthorizationCodeArgs oauth2AuthorizationCode) {
            return oauth2AuthorizationCode(Output.of(oauth2AuthorizationCode));
        }

        /**
         * @param oauth2ClientCredentials OAuth2 client credentials.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder oauth2ClientCredentials(@Nullable Output<AuthConfigDecryptedCredentialOauth2ClientCredentialsArgs> oauth2ClientCredentials) {
            $.oauth2ClientCredentials = oauth2ClientCredentials;
            return this;
        }

        /**
         * @param oauth2ClientCredentials OAuth2 client credentials.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder oauth2ClientCredentials(AuthConfigDecryptedCredentialOauth2ClientCredentialsArgs oauth2ClientCredentials) {
            return oauth2ClientCredentials(Output.of(oauth2ClientCredentials));
        }

        /**
         * @param oidcToken Google OIDC ID Token.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder oidcToken(@Nullable Output<AuthConfigDecryptedCredentialOidcTokenArgs> oidcToken) {
            $.oidcToken = oidcToken;
            return this;
        }

        /**
         * @param oidcToken Google OIDC ID Token.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder oidcToken(AuthConfigDecryptedCredentialOidcTokenArgs oidcToken) {
            return oidcToken(Output.of(oidcToken));
        }

        /**
         * @param serviceAccountCredentials Service account credential.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccountCredentials(@Nullable Output<AuthConfigDecryptedCredentialServiceAccountCredentialsArgs> serviceAccountCredentials) {
            $.serviceAccountCredentials = serviceAccountCredentials;
            return this;
        }

        /**
         * @param serviceAccountCredentials Service account credential.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccountCredentials(AuthConfigDecryptedCredentialServiceAccountCredentialsArgs serviceAccountCredentials) {
            return serviceAccountCredentials(Output.of(serviceAccountCredentials));
        }

        /**
         * @param usernameAndPassword Username and password credential.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder usernameAndPassword(@Nullable Output<AuthConfigDecryptedCredentialUsernameAndPasswordArgs> usernameAndPassword) {
            $.usernameAndPassword = usernameAndPassword;
            return this;
        }

        /**
         * @param usernameAndPassword Username and password credential.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder usernameAndPassword(AuthConfigDecryptedCredentialUsernameAndPasswordArgs usernameAndPassword) {
            return usernameAndPassword(Output.of(usernameAndPassword));
        }

        public AuthConfigDecryptedCredentialArgs build() {
            if ($.credentialType == null) {
                throw new MissingRequiredPropertyException("AuthConfigDecryptedCredentialArgs", "credentialType");
            }
            return $;
        }
    }

}
