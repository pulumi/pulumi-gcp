// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.projects;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.projects.inputs.OrganizationPolicyBooleanPolicyArgs;
import com.pulumi.gcp.projects.inputs.OrganizationPolicyListPolicyArgs;
import com.pulumi.gcp.projects.inputs.OrganizationPolicyRestorePolicyArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OrganizationPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final OrganizationPolicyArgs Empty = new OrganizationPolicyArgs();

    /**
     * A boolean policy is a constraint that is either enforced or not. Structure is documented below.
     * 
     */
    @Import(name="booleanPolicy")
    private @Nullable Output<OrganizationPolicyBooleanPolicyArgs> booleanPolicy;

    /**
     * @return A boolean policy is a constraint that is either enforced or not. Structure is documented below.
     * 
     */
    public Optional<Output<OrganizationPolicyBooleanPolicyArgs>> booleanPolicy() {
        return Optional.ofNullable(this.booleanPolicy);
    }

    /**
     * The name of the Constraint the Policy is configuring, for example, `serviceuser.services`. Check out the [complete list of available constraints](https://cloud.google.com/resource-manager/docs/organization-policy/understanding-constraints#available_constraints).
     * 
     */
    @Import(name="constraint", required=true)
    private Output<String> constraint;

    /**
     * @return The name of the Constraint the Policy is configuring, for example, `serviceuser.services`. Check out the [complete list of available constraints](https://cloud.google.com/resource-manager/docs/organization-policy/understanding-constraints#available_constraints).
     * 
     */
    public Output<String> constraint() {
        return this.constraint;
    }

    /**
     * A policy that can define specific values that are allowed or denied for the given constraint. It can also be used to allow or deny all values. Structure is documented below.
     * 
     */
    @Import(name="listPolicy")
    private @Nullable Output<OrganizationPolicyListPolicyArgs> listPolicy;

    /**
     * @return A policy that can define specific values that are allowed or denied for the given constraint. It can also be used to allow or deny all values. Structure is documented below.
     * 
     */
    public Optional<Output<OrganizationPolicyListPolicyArgs>> listPolicy() {
        return Optional.ofNullable(this.listPolicy);
    }

    /**
     * The project id of the project to set the policy for.
     * 
     */
    @Import(name="project", required=true)
    private Output<String> project;

    /**
     * @return The project id of the project to set the policy for.
     * 
     */
    public Output<String> project() {
        return this.project;
    }

    /**
     * A restore policy is a constraint to restore the default policy. Structure is documented below.
     * 
     */
    @Import(name="restorePolicy")
    private @Nullable Output<OrganizationPolicyRestorePolicyArgs> restorePolicy;

    /**
     * @return A restore policy is a constraint to restore the default policy. Structure is documented below.
     * 
     */
    public Optional<Output<OrganizationPolicyRestorePolicyArgs>> restorePolicy() {
        return Optional.ofNullable(this.restorePolicy);
    }

    /**
     * Version of the Policy. Default version is 0.
     * 
     */
    @Import(name="version")
    private @Nullable Output<Integer> version;

    /**
     * @return Version of the Policy. Default version is 0.
     * 
     */
    public Optional<Output<Integer>> version() {
        return Optional.ofNullable(this.version);
    }

    private OrganizationPolicyArgs() {}

    private OrganizationPolicyArgs(OrganizationPolicyArgs $) {
        this.booleanPolicy = $.booleanPolicy;
        this.constraint = $.constraint;
        this.listPolicy = $.listPolicy;
        this.project = $.project;
        this.restorePolicy = $.restorePolicy;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OrganizationPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OrganizationPolicyArgs $;

        public Builder() {
            $ = new OrganizationPolicyArgs();
        }

        public Builder(OrganizationPolicyArgs defaults) {
            $ = new OrganizationPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param booleanPolicy A boolean policy is a constraint that is either enforced or not. Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder booleanPolicy(@Nullable Output<OrganizationPolicyBooleanPolicyArgs> booleanPolicy) {
            $.booleanPolicy = booleanPolicy;
            return this;
        }

        /**
         * @param booleanPolicy A boolean policy is a constraint that is either enforced or not. Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder booleanPolicy(OrganizationPolicyBooleanPolicyArgs booleanPolicy) {
            return booleanPolicy(Output.of(booleanPolicy));
        }

        /**
         * @param constraint The name of the Constraint the Policy is configuring, for example, `serviceuser.services`. Check out the [complete list of available constraints](https://cloud.google.com/resource-manager/docs/organization-policy/understanding-constraints#available_constraints).
         * 
         * @return builder
         * 
         */
        public Builder constraint(Output<String> constraint) {
            $.constraint = constraint;
            return this;
        }

        /**
         * @param constraint The name of the Constraint the Policy is configuring, for example, `serviceuser.services`. Check out the [complete list of available constraints](https://cloud.google.com/resource-manager/docs/organization-policy/understanding-constraints#available_constraints).
         * 
         * @return builder
         * 
         */
        public Builder constraint(String constraint) {
            return constraint(Output.of(constraint));
        }

        /**
         * @param listPolicy A policy that can define specific values that are allowed or denied for the given constraint. It can also be used to allow or deny all values. Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder listPolicy(@Nullable Output<OrganizationPolicyListPolicyArgs> listPolicy) {
            $.listPolicy = listPolicy;
            return this;
        }

        /**
         * @param listPolicy A policy that can define specific values that are allowed or denied for the given constraint. It can also be used to allow or deny all values. Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder listPolicy(OrganizationPolicyListPolicyArgs listPolicy) {
            return listPolicy(Output.of(listPolicy));
        }

        /**
         * @param project The project id of the project to set the policy for.
         * 
         * @return builder
         * 
         */
        public Builder project(Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The project id of the project to set the policy for.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param restorePolicy A restore policy is a constraint to restore the default policy. Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder restorePolicy(@Nullable Output<OrganizationPolicyRestorePolicyArgs> restorePolicy) {
            $.restorePolicy = restorePolicy;
            return this;
        }

        /**
         * @param restorePolicy A restore policy is a constraint to restore the default policy. Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder restorePolicy(OrganizationPolicyRestorePolicyArgs restorePolicy) {
            return restorePolicy(Output.of(restorePolicy));
        }

        /**
         * @param version Version of the Policy. Default version is 0.
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<Integer> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version Version of the Policy. Default version is 0.
         * 
         * @return builder
         * 
         */
        public Builder version(Integer version) {
            return version(Output.of(version));
        }

        public OrganizationPolicyArgs build() {
            $.constraint = Objects.requireNonNull($.constraint, "expected parameter 'constraint' to be non-null");
            $.project = Objects.requireNonNull($.project, "expected parameter 'project' to be non-null");
            return $;
        }
    }

}
