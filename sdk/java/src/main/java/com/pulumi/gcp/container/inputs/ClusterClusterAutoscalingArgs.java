// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.container.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.container.inputs.ClusterClusterAutoscalingAutoProvisioningDefaultsArgs;
import com.pulumi.gcp.container.inputs.ClusterClusterAutoscalingResourceLimitArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClusterClusterAutoscalingArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClusterClusterAutoscalingArgs Empty = new ClusterClusterAutoscalingArgs();

    /**
     * Contains defaults for a node pool created by NAP. A subset of fields also apply to
     * GKE Autopilot clusters.
     * Structure is documented below.
     * 
     */
    @Import(name="autoProvisioningDefaults")
    private @Nullable Output<ClusterClusterAutoscalingAutoProvisioningDefaultsArgs> autoProvisioningDefaults;

    /**
     * @return Contains defaults for a node pool created by NAP. A subset of fields also apply to
     * GKE Autopilot clusters.
     * Structure is documented below.
     * 
     */
    public Optional<Output<ClusterClusterAutoscalingAutoProvisioningDefaultsArgs>> autoProvisioningDefaults() {
        return Optional.ofNullable(this.autoProvisioningDefaults);
    }

    /**
     * ) Configuration
     * options for the [Autoscaling profile](https://cloud.google.com/kubernetes-engine/docs/concepts/cluster-autoscaler#autoscaling_profiles)
     * feature, which lets you choose whether the cluster autoscaler should optimize for resource utilization or resource availability
     * when deciding to remove nodes from a cluster. Can be `BALANCED` or `OPTIMIZE_UTILIZATION`. Defaults to `BALANCED`.
     * 
     */
    @Import(name="autoscalingProfile")
    private @Nullable Output<String> autoscalingProfile;

    /**
     * @return ) Configuration
     * options for the [Autoscaling profile](https://cloud.google.com/kubernetes-engine/docs/concepts/cluster-autoscaler#autoscaling_profiles)
     * feature, which lets you choose whether the cluster autoscaler should optimize for resource utilization or resource availability
     * when deciding to remove nodes from a cluster. Can be `BALANCED` or `OPTIMIZE_UTILIZATION`. Defaults to `BALANCED`.
     * 
     */
    public Optional<Output<String>> autoscalingProfile() {
        return Optional.ofNullable(this.autoscalingProfile);
    }

    /**
     * Whether node auto-provisioning is enabled. Must be supplied for GKE Standard clusters, `true` is implied
     * for autopilot clusters. Resource limits for `cpu` and `memory` must be defined to enable node auto-provisioning for GKE Standard.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Whether node auto-provisioning is enabled. Must be supplied for GKE Standard clusters, `true` is implied
     * for autopilot clusters. Resource limits for `cpu` and `memory` must be defined to enable node auto-provisioning for GKE Standard.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Global constraints for machine resources in the
     * cluster. Configuring the `cpu` and `memory` types is required if node
     * auto-provisioning is enabled. These limits will apply to node pool autoscaling
     * in addition to node auto-provisioning. Structure is documented below.
     * 
     */
    @Import(name="resourceLimits")
    private @Nullable Output<List<ClusterClusterAutoscalingResourceLimitArgs>> resourceLimits;

    /**
     * @return Global constraints for machine resources in the
     * cluster. Configuring the `cpu` and `memory` types is required if node
     * auto-provisioning is enabled. These limits will apply to node pool autoscaling
     * in addition to node auto-provisioning. Structure is documented below.
     * 
     */
    public Optional<Output<List<ClusterClusterAutoscalingResourceLimitArgs>>> resourceLimits() {
        return Optional.ofNullable(this.resourceLimits);
    }

    private ClusterClusterAutoscalingArgs() {}

    private ClusterClusterAutoscalingArgs(ClusterClusterAutoscalingArgs $) {
        this.autoProvisioningDefaults = $.autoProvisioningDefaults;
        this.autoscalingProfile = $.autoscalingProfile;
        this.enabled = $.enabled;
        this.resourceLimits = $.resourceLimits;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClusterClusterAutoscalingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClusterClusterAutoscalingArgs $;

        public Builder() {
            $ = new ClusterClusterAutoscalingArgs();
        }

        public Builder(ClusterClusterAutoscalingArgs defaults) {
            $ = new ClusterClusterAutoscalingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param autoProvisioningDefaults Contains defaults for a node pool created by NAP. A subset of fields also apply to
         * GKE Autopilot clusters.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder autoProvisioningDefaults(@Nullable Output<ClusterClusterAutoscalingAutoProvisioningDefaultsArgs> autoProvisioningDefaults) {
            $.autoProvisioningDefaults = autoProvisioningDefaults;
            return this;
        }

        /**
         * @param autoProvisioningDefaults Contains defaults for a node pool created by NAP. A subset of fields also apply to
         * GKE Autopilot clusters.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder autoProvisioningDefaults(ClusterClusterAutoscalingAutoProvisioningDefaultsArgs autoProvisioningDefaults) {
            return autoProvisioningDefaults(Output.of(autoProvisioningDefaults));
        }

        /**
         * @param autoscalingProfile ) Configuration
         * options for the [Autoscaling profile](https://cloud.google.com/kubernetes-engine/docs/concepts/cluster-autoscaler#autoscaling_profiles)
         * feature, which lets you choose whether the cluster autoscaler should optimize for resource utilization or resource availability
         * when deciding to remove nodes from a cluster. Can be `BALANCED` or `OPTIMIZE_UTILIZATION`. Defaults to `BALANCED`.
         * 
         * @return builder
         * 
         */
        public Builder autoscalingProfile(@Nullable Output<String> autoscalingProfile) {
            $.autoscalingProfile = autoscalingProfile;
            return this;
        }

        /**
         * @param autoscalingProfile ) Configuration
         * options for the [Autoscaling profile](https://cloud.google.com/kubernetes-engine/docs/concepts/cluster-autoscaler#autoscaling_profiles)
         * feature, which lets you choose whether the cluster autoscaler should optimize for resource utilization or resource availability
         * when deciding to remove nodes from a cluster. Can be `BALANCED` or `OPTIMIZE_UTILIZATION`. Defaults to `BALANCED`.
         * 
         * @return builder
         * 
         */
        public Builder autoscalingProfile(String autoscalingProfile) {
            return autoscalingProfile(Output.of(autoscalingProfile));
        }

        /**
         * @param enabled Whether node auto-provisioning is enabled. Must be supplied for GKE Standard clusters, `true` is implied
         * for autopilot clusters. Resource limits for `cpu` and `memory` must be defined to enable node auto-provisioning for GKE Standard.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Whether node auto-provisioning is enabled. Must be supplied for GKE Standard clusters, `true` is implied
         * for autopilot clusters. Resource limits for `cpu` and `memory` must be defined to enable node auto-provisioning for GKE Standard.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param resourceLimits Global constraints for machine resources in the
         * cluster. Configuring the `cpu` and `memory` types is required if node
         * auto-provisioning is enabled. These limits will apply to node pool autoscaling
         * in addition to node auto-provisioning. Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder resourceLimits(@Nullable Output<List<ClusterClusterAutoscalingResourceLimitArgs>> resourceLimits) {
            $.resourceLimits = resourceLimits;
            return this;
        }

        /**
         * @param resourceLimits Global constraints for machine resources in the
         * cluster. Configuring the `cpu` and `memory` types is required if node
         * auto-provisioning is enabled. These limits will apply to node pool autoscaling
         * in addition to node auto-provisioning. Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder resourceLimits(List<ClusterClusterAutoscalingResourceLimitArgs> resourceLimits) {
            return resourceLimits(Output.of(resourceLimits));
        }

        /**
         * @param resourceLimits Global constraints for machine resources in the
         * cluster. Configuring the `cpu` and `memory` types is required if node
         * auto-provisioning is enabled. These limits will apply to node pool autoscaling
         * in addition to node auto-provisioning. Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder resourceLimits(ClusterClusterAutoscalingResourceLimitArgs... resourceLimits) {
            return resourceLimits(List.of(resourceLimits));
        }

        public ClusterClusterAutoscalingArgs build() {
            return $;
        }
    }

}
