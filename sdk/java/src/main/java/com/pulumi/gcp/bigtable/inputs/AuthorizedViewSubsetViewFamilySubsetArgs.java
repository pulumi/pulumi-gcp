// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.bigtable.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AuthorizedViewSubsetViewFamilySubsetArgs extends com.pulumi.resources.ResourceArgs {

    public static final AuthorizedViewSubsetViewFamilySubsetArgs Empty = new AuthorizedViewSubsetViewFamilySubsetArgs();

    /**
     * Name of the column family to be included in the authorized view. The specified column family must exist in the parent table of this authorized view.
     * 
     */
    @Import(name="familyName", required=true)
    private Output<String> familyName;

    /**
     * @return Name of the column family to be included in the authorized view. The specified column family must exist in the parent table of this authorized view.
     * 
     */
    public Output<String> familyName() {
        return this.familyName;
    }

    /**
     * A list of Base64-encoded prefixes for qualifiers of the column family to be included in the authorized view.
     * Every qualifier starting with one of these prefixes is included in the authorized view. To provide access to all qualifiers, include the empty string as a prefix (&#34;&#34;).
     * 
     */
    @Import(name="qualifierPrefixes")
    private @Nullable Output<List<String>> qualifierPrefixes;

    /**
     * @return A list of Base64-encoded prefixes for qualifiers of the column family to be included in the authorized view.
     * Every qualifier starting with one of these prefixes is included in the authorized view. To provide access to all qualifiers, include the empty string as a prefix (&#34;&#34;).
     * 
     */
    public Optional<Output<List<String>>> qualifierPrefixes() {
        return Optional.ofNullable(this.qualifierPrefixes);
    }

    /**
     * A list of Base64-encoded individual exact column qualifiers of the column family to be included in the authorized view.
     * 
     */
    @Import(name="qualifiers")
    private @Nullable Output<List<String>> qualifiers;

    /**
     * @return A list of Base64-encoded individual exact column qualifiers of the column family to be included in the authorized view.
     * 
     */
    public Optional<Output<List<String>>> qualifiers() {
        return Optional.ofNullable(this.qualifiers);
    }

    private AuthorizedViewSubsetViewFamilySubsetArgs() {}

    private AuthorizedViewSubsetViewFamilySubsetArgs(AuthorizedViewSubsetViewFamilySubsetArgs $) {
        this.familyName = $.familyName;
        this.qualifierPrefixes = $.qualifierPrefixes;
        this.qualifiers = $.qualifiers;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AuthorizedViewSubsetViewFamilySubsetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AuthorizedViewSubsetViewFamilySubsetArgs $;

        public Builder() {
            $ = new AuthorizedViewSubsetViewFamilySubsetArgs();
        }

        public Builder(AuthorizedViewSubsetViewFamilySubsetArgs defaults) {
            $ = new AuthorizedViewSubsetViewFamilySubsetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param familyName Name of the column family to be included in the authorized view. The specified column family must exist in the parent table of this authorized view.
         * 
         * @return builder
         * 
         */
        public Builder familyName(Output<String> familyName) {
            $.familyName = familyName;
            return this;
        }

        /**
         * @param familyName Name of the column family to be included in the authorized view. The specified column family must exist in the parent table of this authorized view.
         * 
         * @return builder
         * 
         */
        public Builder familyName(String familyName) {
            return familyName(Output.of(familyName));
        }

        /**
         * @param qualifierPrefixes A list of Base64-encoded prefixes for qualifiers of the column family to be included in the authorized view.
         * Every qualifier starting with one of these prefixes is included in the authorized view. To provide access to all qualifiers, include the empty string as a prefix (&#34;&#34;).
         * 
         * @return builder
         * 
         */
        public Builder qualifierPrefixes(@Nullable Output<List<String>> qualifierPrefixes) {
            $.qualifierPrefixes = qualifierPrefixes;
            return this;
        }

        /**
         * @param qualifierPrefixes A list of Base64-encoded prefixes for qualifiers of the column family to be included in the authorized view.
         * Every qualifier starting with one of these prefixes is included in the authorized view. To provide access to all qualifiers, include the empty string as a prefix (&#34;&#34;).
         * 
         * @return builder
         * 
         */
        public Builder qualifierPrefixes(List<String> qualifierPrefixes) {
            return qualifierPrefixes(Output.of(qualifierPrefixes));
        }

        /**
         * @param qualifierPrefixes A list of Base64-encoded prefixes for qualifiers of the column family to be included in the authorized view.
         * Every qualifier starting with one of these prefixes is included in the authorized view. To provide access to all qualifiers, include the empty string as a prefix (&#34;&#34;).
         * 
         * @return builder
         * 
         */
        public Builder qualifierPrefixes(String... qualifierPrefixes) {
            return qualifierPrefixes(List.of(qualifierPrefixes));
        }

        /**
         * @param qualifiers A list of Base64-encoded individual exact column qualifiers of the column family to be included in the authorized view.
         * 
         * @return builder
         * 
         */
        public Builder qualifiers(@Nullable Output<List<String>> qualifiers) {
            $.qualifiers = qualifiers;
            return this;
        }

        /**
         * @param qualifiers A list of Base64-encoded individual exact column qualifiers of the column family to be included in the authorized view.
         * 
         * @return builder
         * 
         */
        public Builder qualifiers(List<String> qualifiers) {
            return qualifiers(Output.of(qualifiers));
        }

        /**
         * @param qualifiers A list of Base64-encoded individual exact column qualifiers of the column family to be included in the authorized view.
         * 
         * @return builder
         * 
         */
        public Builder qualifiers(String... qualifiers) {
            return qualifiers(List.of(qualifiers));
        }

        public AuthorizedViewSubsetViewFamilySubsetArgs build() {
            if ($.familyName == null) {
                throw new MissingRequiredPropertyException("AuthorizedViewSubsetViewFamilySubsetArgs", "familyName");
            }
            return $;
        }
    }

}
