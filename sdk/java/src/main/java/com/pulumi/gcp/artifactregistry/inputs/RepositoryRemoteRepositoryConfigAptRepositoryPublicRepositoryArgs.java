// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.artifactregistry.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryArgs extends com.pulumi.resources.ResourceArgs {

    public static final RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryArgs Empty = new RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryArgs();

    /**
     * A common public repository base for Yum.
     * Possible values are: `CENTOS`, `CENTOS_DEBUG`, `CENTOS_VAULT`, `CENTOS_STREAM`, `ROCKY`, `EPEL`.
     * 
     */
    @Import(name="repositoryBase", required=true)
    private Output<String> repositoryBase;

    /**
     * @return A common public repository base for Yum.
     * Possible values are: `CENTOS`, `CENTOS_DEBUG`, `CENTOS_VAULT`, `CENTOS_STREAM`, `ROCKY`, `EPEL`.
     * 
     */
    public Output<String> repositoryBase() {
        return this.repositoryBase;
    }

    /**
     * Specific repository from the base, e.g. `&#34;pub/rocky/9/BaseOS/x86_64/os&#34;`
     * 
     */
    @Import(name="repositoryPath", required=true)
    private Output<String> repositoryPath;

    /**
     * @return Specific repository from the base, e.g. `&#34;pub/rocky/9/BaseOS/x86_64/os&#34;`
     * 
     */
    public Output<String> repositoryPath() {
        return this.repositoryPath;
    }

    private RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryArgs() {}

    private RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryArgs(RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryArgs $) {
        this.repositoryBase = $.repositoryBase;
        this.repositoryPath = $.repositoryPath;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryArgs $;

        public Builder() {
            $ = new RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryArgs();
        }

        public Builder(RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryArgs defaults) {
            $ = new RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param repositoryBase A common public repository base for Yum.
         * Possible values are: `CENTOS`, `CENTOS_DEBUG`, `CENTOS_VAULT`, `CENTOS_STREAM`, `ROCKY`, `EPEL`.
         * 
         * @return builder
         * 
         */
        public Builder repositoryBase(Output<String> repositoryBase) {
            $.repositoryBase = repositoryBase;
            return this;
        }

        /**
         * @param repositoryBase A common public repository base for Yum.
         * Possible values are: `CENTOS`, `CENTOS_DEBUG`, `CENTOS_VAULT`, `CENTOS_STREAM`, `ROCKY`, `EPEL`.
         * 
         * @return builder
         * 
         */
        public Builder repositoryBase(String repositoryBase) {
            return repositoryBase(Output.of(repositoryBase));
        }

        /**
         * @param repositoryPath Specific repository from the base, e.g. `&#34;pub/rocky/9/BaseOS/x86_64/os&#34;`
         * 
         * @return builder
         * 
         */
        public Builder repositoryPath(Output<String> repositoryPath) {
            $.repositoryPath = repositoryPath;
            return this;
        }

        /**
         * @param repositoryPath Specific repository from the base, e.g. `&#34;pub/rocky/9/BaseOS/x86_64/os&#34;`
         * 
         * @return builder
         * 
         */
        public Builder repositoryPath(String repositoryPath) {
            return repositoryPath(Output.of(repositoryPath));
        }

        public RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryArgs build() {
            if ($.repositoryBase == null) {
                throw new MissingRequiredPropertyException("RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryArgs", "repositoryBase");
            }
            if ($.repositoryPath == null) {
                throw new MissingRequiredPropertyException("RepositoryRemoteRepositoryConfigAptRepositoryPublicRepositoryArgs", "repositoryPath");
            }
            return $;
        }
    }

}
