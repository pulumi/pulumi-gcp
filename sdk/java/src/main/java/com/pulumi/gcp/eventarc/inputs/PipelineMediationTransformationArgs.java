// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.eventarc.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PipelineMediationTransformationArgs extends com.pulumi.resources.ResourceArgs {

    public static final PipelineMediationTransformationArgs Empty = new PipelineMediationTransformationArgs();

    /**
     * The CEL expression template to apply to transform messages.
     * The following CEL extension functions are provided for
     * use in this CEL expression:
     * - merge:
     *   map1.merge(map2) &gt; map3
     * - Merges the passed CEL map with the existing CEL map the
     *   function is applied to.
     * - If the same key exists in both maps, if the key&#39;s value is type
     *   map both maps are merged else the value from the passed map is
     *   used.
     * - denormalize:
     *   map.denormalize() &gt; map
     * - Denormalizes a CEL map such that every value of type map or key
     *   in the map is expanded to return a single level map.
     * - The resulting keys are &#34;.&#34; separated indices of the map keys.
     * - For example:
     *   {
     *   &#34;a&#34;: 1,
     *   &#34;b&#34;: {
     *   &#34;c&#34;: 2,
     *   &#34;d&#34;: 3
     *   }
     *   &#34;e&#34;: [4, 5]
     *   }
     *   .denormalize()
     * &gt; {
     * &#34;a&#34;: 1,
     * &#34;b.c&#34;: 2,
     * &#34;b.d&#34;: 3,
     * &#34;e.0&#34;: 4,
     * &#34;e.1&#34;: 5
     * }
     * - setField:
     *   map.setField(key, value) &gt; message
     * - Sets the field of the message with the given key to the
     *   given value.
     * - If the field is not present it will be added.
     * - If the field is present it will be overwritten.
     * - The key can be a dot separated path to set a field in a nested
     *   message.
     * - Key must be of type string.
     * - Value may be any valid type.
     * - removeFields:
     *   map.removeFields([key1, key2, ...]) &gt; message
     * - Removes the fields of the map with the given keys.
     * - The keys can be a dot separated path to remove a field in a
     *   nested message.
     * - If a key is not found it will be ignored.
     * - Keys must be of type string.
     * - toMap:
     *   [map1, map2, ...].toMap() &gt; map
     * - Converts a CEL list of CEL maps to a single CEL map
     * - toDestinationPayloadFormat():
     *   message.data.toDestinationPayloadFormat() &gt; string or bytes
     * - Converts the message data to the destination payload format
     *   specified in Pipeline.Destination.output_payload_format
     * - This function is meant to be applied to the message.data field.
     * - If the destination payload format is not set, the function will
     *   return the message data unchanged.
     * - toCloudEventJsonWithPayloadFormat:
     *   message.toCloudEventJsonWithPayloadFormat() &gt; map
     * - Converts a message to the corresponding structure of JSON
     *   format for CloudEvents
     * - This function applies toDestinationPayloadFormat() to the
     *   message data. It also sets the corresponding datacontenttype of
     *   the CloudEvent, as indicated by
     *   Pipeline.Destination.output_payload_format. If no
     *   output_payload_format is set it will use the existing
     *   datacontenttype on the CloudEvent if present, else leave
     *   datacontenttype absent.
     * - This function expects that the content of the message will
     *   adhere to the standard CloudEvent format. If it doesn&#39;t then this
     *   function will fail.
     * - The result is a CEL map that corresponds to the JSON
     *   representation of the CloudEvent. To convert that data to a JSON
     *   string it can be chained with the toJsonString function.
     * 
     */
    @Import(name="transformationTemplate")
    private @Nullable Output<String> transformationTemplate;

    /**
     * @return The CEL expression template to apply to transform messages.
     * The following CEL extension functions are provided for
     * use in this CEL expression:
     * - merge:
     *   map1.merge(map2) &gt; map3
     * - Merges the passed CEL map with the existing CEL map the
     *   function is applied to.
     * - If the same key exists in both maps, if the key&#39;s value is type
     *   map both maps are merged else the value from the passed map is
     *   used.
     * - denormalize:
     *   map.denormalize() &gt; map
     * - Denormalizes a CEL map such that every value of type map or key
     *   in the map is expanded to return a single level map.
     * - The resulting keys are &#34;.&#34; separated indices of the map keys.
     * - For example:
     *   {
     *   &#34;a&#34;: 1,
     *   &#34;b&#34;: {
     *   &#34;c&#34;: 2,
     *   &#34;d&#34;: 3
     *   }
     *   &#34;e&#34;: [4, 5]
     *   }
     *   .denormalize()
     * &gt; {
     * &#34;a&#34;: 1,
     * &#34;b.c&#34;: 2,
     * &#34;b.d&#34;: 3,
     * &#34;e.0&#34;: 4,
     * &#34;e.1&#34;: 5
     * }
     * - setField:
     *   map.setField(key, value) &gt; message
     * - Sets the field of the message with the given key to the
     *   given value.
     * - If the field is not present it will be added.
     * - If the field is present it will be overwritten.
     * - The key can be a dot separated path to set a field in a nested
     *   message.
     * - Key must be of type string.
     * - Value may be any valid type.
     * - removeFields:
     *   map.removeFields([key1, key2, ...]) &gt; message
     * - Removes the fields of the map with the given keys.
     * - The keys can be a dot separated path to remove a field in a
     *   nested message.
     * - If a key is not found it will be ignored.
     * - Keys must be of type string.
     * - toMap:
     *   [map1, map2, ...].toMap() &gt; map
     * - Converts a CEL list of CEL maps to a single CEL map
     * - toDestinationPayloadFormat():
     *   message.data.toDestinationPayloadFormat() &gt; string or bytes
     * - Converts the message data to the destination payload format
     *   specified in Pipeline.Destination.output_payload_format
     * - This function is meant to be applied to the message.data field.
     * - If the destination payload format is not set, the function will
     *   return the message data unchanged.
     * - toCloudEventJsonWithPayloadFormat:
     *   message.toCloudEventJsonWithPayloadFormat() &gt; map
     * - Converts a message to the corresponding structure of JSON
     *   format for CloudEvents
     * - This function applies toDestinationPayloadFormat() to the
     *   message data. It also sets the corresponding datacontenttype of
     *   the CloudEvent, as indicated by
     *   Pipeline.Destination.output_payload_format. If no
     *   output_payload_format is set it will use the existing
     *   datacontenttype on the CloudEvent if present, else leave
     *   datacontenttype absent.
     * - This function expects that the content of the message will
     *   adhere to the standard CloudEvent format. If it doesn&#39;t then this
     *   function will fail.
     * - The result is a CEL map that corresponds to the JSON
     *   representation of the CloudEvent. To convert that data to a JSON
     *   string it can be chained with the toJsonString function.
     * 
     */
    public Optional<Output<String>> transformationTemplate() {
        return Optional.ofNullable(this.transformationTemplate);
    }

    private PipelineMediationTransformationArgs() {}

    private PipelineMediationTransformationArgs(PipelineMediationTransformationArgs $) {
        this.transformationTemplate = $.transformationTemplate;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PipelineMediationTransformationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PipelineMediationTransformationArgs $;

        public Builder() {
            $ = new PipelineMediationTransformationArgs();
        }

        public Builder(PipelineMediationTransformationArgs defaults) {
            $ = new PipelineMediationTransformationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param transformationTemplate The CEL expression template to apply to transform messages.
         * The following CEL extension functions are provided for
         * use in this CEL expression:
         * - merge:
         *   map1.merge(map2) &gt; map3
         * - Merges the passed CEL map with the existing CEL map the
         *   function is applied to.
         * - If the same key exists in both maps, if the key&#39;s value is type
         *   map both maps are merged else the value from the passed map is
         *   used.
         * - denormalize:
         *   map.denormalize() &gt; map
         * - Denormalizes a CEL map such that every value of type map or key
         *   in the map is expanded to return a single level map.
         * - The resulting keys are &#34;.&#34; separated indices of the map keys.
         * - For example:
         *   {
         *   &#34;a&#34;: 1,
         *   &#34;b&#34;: {
         *   &#34;c&#34;: 2,
         *   &#34;d&#34;: 3
         *   }
         *   &#34;e&#34;: [4, 5]
         *   }
         *   .denormalize()
         * &gt; {
         * &#34;a&#34;: 1,
         * &#34;b.c&#34;: 2,
         * &#34;b.d&#34;: 3,
         * &#34;e.0&#34;: 4,
         * &#34;e.1&#34;: 5
         * }
         * - setField:
         *   map.setField(key, value) &gt; message
         * - Sets the field of the message with the given key to the
         *   given value.
         * - If the field is not present it will be added.
         * - If the field is present it will be overwritten.
         * - The key can be a dot separated path to set a field in a nested
         *   message.
         * - Key must be of type string.
         * - Value may be any valid type.
         * - removeFields:
         *   map.removeFields([key1, key2, ...]) &gt; message
         * - Removes the fields of the map with the given keys.
         * - The keys can be a dot separated path to remove a field in a
         *   nested message.
         * - If a key is not found it will be ignored.
         * - Keys must be of type string.
         * - toMap:
         *   [map1, map2, ...].toMap() &gt; map
         * - Converts a CEL list of CEL maps to a single CEL map
         * - toDestinationPayloadFormat():
         *   message.data.toDestinationPayloadFormat() &gt; string or bytes
         * - Converts the message data to the destination payload format
         *   specified in Pipeline.Destination.output_payload_format
         * - This function is meant to be applied to the message.data field.
         * - If the destination payload format is not set, the function will
         *   return the message data unchanged.
         * - toCloudEventJsonWithPayloadFormat:
         *   message.toCloudEventJsonWithPayloadFormat() &gt; map
         * - Converts a message to the corresponding structure of JSON
         *   format for CloudEvents
         * - This function applies toDestinationPayloadFormat() to the
         *   message data. It also sets the corresponding datacontenttype of
         *   the CloudEvent, as indicated by
         *   Pipeline.Destination.output_payload_format. If no
         *   output_payload_format is set it will use the existing
         *   datacontenttype on the CloudEvent if present, else leave
         *   datacontenttype absent.
         * - This function expects that the content of the message will
         *   adhere to the standard CloudEvent format. If it doesn&#39;t then this
         *   function will fail.
         * - The result is a CEL map that corresponds to the JSON
         *   representation of the CloudEvent. To convert that data to a JSON
         *   string it can be chained with the toJsonString function.
         * 
         * @return builder
         * 
         */
        public Builder transformationTemplate(@Nullable Output<String> transformationTemplate) {
            $.transformationTemplate = transformationTemplate;
            return this;
        }

        /**
         * @param transformationTemplate The CEL expression template to apply to transform messages.
         * The following CEL extension functions are provided for
         * use in this CEL expression:
         * - merge:
         *   map1.merge(map2) &gt; map3
         * - Merges the passed CEL map with the existing CEL map the
         *   function is applied to.
         * - If the same key exists in both maps, if the key&#39;s value is type
         *   map both maps are merged else the value from the passed map is
         *   used.
         * - denormalize:
         *   map.denormalize() &gt; map
         * - Denormalizes a CEL map such that every value of type map or key
         *   in the map is expanded to return a single level map.
         * - The resulting keys are &#34;.&#34; separated indices of the map keys.
         * - For example:
         *   {
         *   &#34;a&#34;: 1,
         *   &#34;b&#34;: {
         *   &#34;c&#34;: 2,
         *   &#34;d&#34;: 3
         *   }
         *   &#34;e&#34;: [4, 5]
         *   }
         *   .denormalize()
         * &gt; {
         * &#34;a&#34;: 1,
         * &#34;b.c&#34;: 2,
         * &#34;b.d&#34;: 3,
         * &#34;e.0&#34;: 4,
         * &#34;e.1&#34;: 5
         * }
         * - setField:
         *   map.setField(key, value) &gt; message
         * - Sets the field of the message with the given key to the
         *   given value.
         * - If the field is not present it will be added.
         * - If the field is present it will be overwritten.
         * - The key can be a dot separated path to set a field in a nested
         *   message.
         * - Key must be of type string.
         * - Value may be any valid type.
         * - removeFields:
         *   map.removeFields([key1, key2, ...]) &gt; message
         * - Removes the fields of the map with the given keys.
         * - The keys can be a dot separated path to remove a field in a
         *   nested message.
         * - If a key is not found it will be ignored.
         * - Keys must be of type string.
         * - toMap:
         *   [map1, map2, ...].toMap() &gt; map
         * - Converts a CEL list of CEL maps to a single CEL map
         * - toDestinationPayloadFormat():
         *   message.data.toDestinationPayloadFormat() &gt; string or bytes
         * - Converts the message data to the destination payload format
         *   specified in Pipeline.Destination.output_payload_format
         * - This function is meant to be applied to the message.data field.
         * - If the destination payload format is not set, the function will
         *   return the message data unchanged.
         * - toCloudEventJsonWithPayloadFormat:
         *   message.toCloudEventJsonWithPayloadFormat() &gt; map
         * - Converts a message to the corresponding structure of JSON
         *   format for CloudEvents
         * - This function applies toDestinationPayloadFormat() to the
         *   message data. It also sets the corresponding datacontenttype of
         *   the CloudEvent, as indicated by
         *   Pipeline.Destination.output_payload_format. If no
         *   output_payload_format is set it will use the existing
         *   datacontenttype on the CloudEvent if present, else leave
         *   datacontenttype absent.
         * - This function expects that the content of the message will
         *   adhere to the standard CloudEvent format. If it doesn&#39;t then this
         *   function will fail.
         * - The result is a CEL map that corresponds to the JSON
         *   representation of the CloudEvent. To convert that data to a JSON
         *   string it can be chained with the toJsonString function.
         * 
         * @return builder
         * 
         */
        public Builder transformationTemplate(String transformationTemplate) {
            return transformationTemplate(Output.of(transformationTemplate));
        }

        public PipelineMediationTransformationArgs build() {
            return $;
        }
    }

}
