// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.compute.outputs.SecurityPolicyRuleMatch;
import com.pulumi.gcp.compute.outputs.SecurityPolicyRulePreconfiguredWafConfig;
import com.pulumi.gcp.compute.outputs.SecurityPolicyRuleRateLimitOptions;
import com.pulumi.gcp.compute.outputs.SecurityPolicyRuleRedirectOptions;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SecurityPolicyRule {
    /**
     * @return Action to take when `match` matches the request. Valid values:
     * * allow: allow access to target.
     * * deny(): deny access to target, returns the HTTP response code specified (valid values are 403, 404, and 502).
     * * rate_based_ban: limit client traffic to the configured threshold and ban the client if the traffic exceeds the threshold. Configure parameters for this action in RateLimitOptions. Requires rateLimitOptions to be set.
     * * redirect: redirect to a different target. This can either be an internal reCAPTCHA redirect, or an external URL-based redirect via a 302 response. Parameters for this action can be configured via redirectOptions.
     * * throttle: limit client traffic to the configured threshold. Configure parameters for this action in rateLimitOptions. Requires rateLimitOptions to be set for this.
     * 
     */
    private String action;
    /**
     * @return An optional description of this rule. Max size is 64.
     * 
     */
    private @Nullable String description;
    /**
     * @return A match condition that incoming traffic is evaluated against.
     * If it evaluates to true, the corresponding `action` is enforced. Structure is documented below.
     * 
     */
    private SecurityPolicyRuleMatch match;
    /**
     * @return ) Preconfigured WAF configuration to be applied for the rule. If the rule does not evaluate preconfigured WAF rules, i.e., if evaluatePreconfiguredWaf() is not used, this field will have no effect. Structure is documented below.
     * 
     */
    private @Nullable SecurityPolicyRulePreconfiguredWafConfig preconfiguredWafConfig;
    /**
     * @return When set to true, the `action` specified above is not enforced.
     * Stackdriver logs for requests that trigger a preview action are annotated as such.
     * 
     */
    private @Nullable Boolean preview;
    /**
     * @return An unique positive integer indicating the priority of evaluation for a rule.
     * Rules are evaluated from highest priority (lowest numerically) to lowest priority (highest numerically) in order.
     * 
     */
    private Integer priority;
    /**
     * @return Must be specified if the `action` is &#34;rate_based_ban&#34; or &#34;throttle&#34;. Cannot be specified for other actions. Structure is documented below.
     * 
     */
    private @Nullable SecurityPolicyRuleRateLimitOptions rateLimitOptions;
    /**
     * @return Can be specified if the `action` is &#34;redirect&#34;. Cannot be specified for other actions. Structure is documented below.
     * 
     */
    private @Nullable SecurityPolicyRuleRedirectOptions redirectOptions;

    private SecurityPolicyRule() {}
    /**
     * @return Action to take when `match` matches the request. Valid values:
     * * allow: allow access to target.
     * * deny(): deny access to target, returns the HTTP response code specified (valid values are 403, 404, and 502).
     * * rate_based_ban: limit client traffic to the configured threshold and ban the client if the traffic exceeds the threshold. Configure parameters for this action in RateLimitOptions. Requires rateLimitOptions to be set.
     * * redirect: redirect to a different target. This can either be an internal reCAPTCHA redirect, or an external URL-based redirect via a 302 response. Parameters for this action can be configured via redirectOptions.
     * * throttle: limit client traffic to the configured threshold. Configure parameters for this action in rateLimitOptions. Requires rateLimitOptions to be set for this.
     * 
     */
    public String action() {
        return this.action;
    }
    /**
     * @return An optional description of this rule. Max size is 64.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return A match condition that incoming traffic is evaluated against.
     * If it evaluates to true, the corresponding `action` is enforced. Structure is documented below.
     * 
     */
    public SecurityPolicyRuleMatch match() {
        return this.match;
    }
    /**
     * @return ) Preconfigured WAF configuration to be applied for the rule. If the rule does not evaluate preconfigured WAF rules, i.e., if evaluatePreconfiguredWaf() is not used, this field will have no effect. Structure is documented below.
     * 
     */
    public Optional<SecurityPolicyRulePreconfiguredWafConfig> preconfiguredWafConfig() {
        return Optional.ofNullable(this.preconfiguredWafConfig);
    }
    /**
     * @return When set to true, the `action` specified above is not enforced.
     * Stackdriver logs for requests that trigger a preview action are annotated as such.
     * 
     */
    public Optional<Boolean> preview() {
        return Optional.ofNullable(this.preview);
    }
    /**
     * @return An unique positive integer indicating the priority of evaluation for a rule.
     * Rules are evaluated from highest priority (lowest numerically) to lowest priority (highest numerically) in order.
     * 
     */
    public Integer priority() {
        return this.priority;
    }
    /**
     * @return Must be specified if the `action` is &#34;rate_based_ban&#34; or &#34;throttle&#34;. Cannot be specified for other actions. Structure is documented below.
     * 
     */
    public Optional<SecurityPolicyRuleRateLimitOptions> rateLimitOptions() {
        return Optional.ofNullable(this.rateLimitOptions);
    }
    /**
     * @return Can be specified if the `action` is &#34;redirect&#34;. Cannot be specified for other actions. Structure is documented below.
     * 
     */
    public Optional<SecurityPolicyRuleRedirectOptions> redirectOptions() {
        return Optional.ofNullable(this.redirectOptions);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SecurityPolicyRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String action;
        private @Nullable String description;
        private SecurityPolicyRuleMatch match;
        private @Nullable SecurityPolicyRulePreconfiguredWafConfig preconfiguredWafConfig;
        private @Nullable Boolean preview;
        private Integer priority;
        private @Nullable SecurityPolicyRuleRateLimitOptions rateLimitOptions;
        private @Nullable SecurityPolicyRuleRedirectOptions redirectOptions;
        public Builder() {}
        public Builder(SecurityPolicyRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.action = defaults.action;
    	      this.description = defaults.description;
    	      this.match = defaults.match;
    	      this.preconfiguredWafConfig = defaults.preconfiguredWafConfig;
    	      this.preview = defaults.preview;
    	      this.priority = defaults.priority;
    	      this.rateLimitOptions = defaults.rateLimitOptions;
    	      this.redirectOptions = defaults.redirectOptions;
        }

        @CustomType.Setter
        public Builder action(String action) {
            this.action = Objects.requireNonNull(action);
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder match(SecurityPolicyRuleMatch match) {
            this.match = Objects.requireNonNull(match);
            return this;
        }
        @CustomType.Setter
        public Builder preconfiguredWafConfig(@Nullable SecurityPolicyRulePreconfiguredWafConfig preconfiguredWafConfig) {
            this.preconfiguredWafConfig = preconfiguredWafConfig;
            return this;
        }
        @CustomType.Setter
        public Builder preview(@Nullable Boolean preview) {
            this.preview = preview;
            return this;
        }
        @CustomType.Setter
        public Builder priority(Integer priority) {
            this.priority = Objects.requireNonNull(priority);
            return this;
        }
        @CustomType.Setter
        public Builder rateLimitOptions(@Nullable SecurityPolicyRuleRateLimitOptions rateLimitOptions) {
            this.rateLimitOptions = rateLimitOptions;
            return this;
        }
        @CustomType.Setter
        public Builder redirectOptions(@Nullable SecurityPolicyRuleRedirectOptions redirectOptions) {
            this.redirectOptions = redirectOptions;
            return this;
        }
        public SecurityPolicyRule build() {
            final var o = new SecurityPolicyRule();
            o.action = action;
            o.description = description;
            o.match = match;
            o.preconfiguredWafConfig = preconfiguredWafConfig;
            o.preview = preview;
            o.priority = priority;
            o.rateLimitOptions = rateLimitOptions;
            o.redirectOptions = redirectOptions;
            return o;
        }
    }
}
