// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.osconfig.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.osconfig.outputs.V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadInstanceFilter;
import com.pulumi.gcp.osconfig.outputs.V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicy;
import com.pulumi.gcp.osconfig.outputs.V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadRollout;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1Payload {
    /**
     * @return Indicates that this revision has been successfully rolled out in this zone
     * and new VMs will be assigned OS policies from this revision.
     * 
     * For a given OS policy assignment, there is only one revision with a value
     * of &#39;true&#39; for this field.
     * 
     */
    private @Nullable Boolean baseline;
    /**
     * @return Indicates that this revision deletes the OS policy assignment.
     * 
     */
    private @Nullable Boolean deleted;
    /**
     * @return OS policy assignment description.
     * Length of the description is limited to 1024 characters.
     * 
     */
    private @Nullable String description;
    /**
     * @return This checksum is computed by the server based on the value of other
     * fields, and may be sent on update and delete requests to ensure the
     * client has an up-to-date value before proceeding.
     * 
     */
    private @Nullable String etag;
    /**
     * @return Filters to select target VMs for an assignment.
     * 
     * If more than one filter criteria is specified below, a VM will be selected
     * if and only if it satisfies all of them.
     * 
     */
    private V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadInstanceFilter instanceFilter;
    /**
     * @return Identifier. In form of
     * * `organizations/{organization_id}/locations/global/policyOrchestrators/{orchestrator_id}`
     * * `folders/{folder_id}/locations/global/policyOrchestrators/{orchestrator_id}`
     * * `projects/{project_id_or_number}/locations/global/policyOrchestrators/{orchestrator_id}`
     * 
     */
    private @Nullable String name;
    /**
     * @return List of OS policies to be applied to the VMs.
     * 
     */
    private List<V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicy> osPolicies;
    /**
     * @return Set to true, if the there are ongoing changes being applied by the
     * orchestrator.
     * 
     */
    private @Nullable Boolean reconciling;
    /**
     * @return The timestamp that the revision was created.
     * 
     */
    private @Nullable String revisionCreateTime;
    /**
     * @return The assignment revision ID
     * A new revision is committed whenever a rollout is triggered for a OS policy
     * assignment
     * 
     */
    private @Nullable String revisionId;
    /**
     * @return Message to configure the rollout at the zonal level for the OS policy
     * assignment.
     * 
     */
    private V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadRollout rollout;
    /**
     * @return OS policy assignment rollout state
     * Possible values:
     * IN_PROGRESS
     * CANCELLING
     * CANCELLED
     * SUCCEEDED
     * 
     */
    private @Nullable String rolloutState;
    /**
     * @return Server generated unique id for the OS policy assignment resource.
     * 
     */
    private @Nullable String uid;

    private V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1Payload() {}
    /**
     * @return Indicates that this revision has been successfully rolled out in this zone
     * and new VMs will be assigned OS policies from this revision.
     * 
     * For a given OS policy assignment, there is only one revision with a value
     * of &#39;true&#39; for this field.
     * 
     */
    public Optional<Boolean> baseline() {
        return Optional.ofNullable(this.baseline);
    }
    /**
     * @return Indicates that this revision deletes the OS policy assignment.
     * 
     */
    public Optional<Boolean> deleted() {
        return Optional.ofNullable(this.deleted);
    }
    /**
     * @return OS policy assignment description.
     * Length of the description is limited to 1024 characters.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return This checksum is computed by the server based on the value of other
     * fields, and may be sent on update and delete requests to ensure the
     * client has an up-to-date value before proceeding.
     * 
     */
    public Optional<String> etag() {
        return Optional.ofNullable(this.etag);
    }
    /**
     * @return Filters to select target VMs for an assignment.
     * 
     * If more than one filter criteria is specified below, a VM will be selected
     * if and only if it satisfies all of them.
     * 
     */
    public V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadInstanceFilter instanceFilter() {
        return this.instanceFilter;
    }
    /**
     * @return Identifier. In form of
     * * `organizations/{organization_id}/locations/global/policyOrchestrators/{orchestrator_id}`
     * * `folders/{folder_id}/locations/global/policyOrchestrators/{orchestrator_id}`
     * * `projects/{project_id_or_number}/locations/global/policyOrchestrators/{orchestrator_id}`
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return List of OS policies to be applied to the VMs.
     * 
     */
    public List<V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicy> osPolicies() {
        return this.osPolicies;
    }
    /**
     * @return Set to true, if the there are ongoing changes being applied by the
     * orchestrator.
     * 
     */
    public Optional<Boolean> reconciling() {
        return Optional.ofNullable(this.reconciling);
    }
    /**
     * @return The timestamp that the revision was created.
     * 
     */
    public Optional<String> revisionCreateTime() {
        return Optional.ofNullable(this.revisionCreateTime);
    }
    /**
     * @return The assignment revision ID
     * A new revision is committed whenever a rollout is triggered for a OS policy
     * assignment
     * 
     */
    public Optional<String> revisionId() {
        return Optional.ofNullable(this.revisionId);
    }
    /**
     * @return Message to configure the rollout at the zonal level for the OS policy
     * assignment.
     * 
     */
    public V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadRollout rollout() {
        return this.rollout;
    }
    /**
     * @return OS policy assignment rollout state
     * Possible values:
     * IN_PROGRESS
     * CANCELLING
     * CANCELLED
     * SUCCEEDED
     * 
     */
    public Optional<String> rolloutState() {
        return Optional.ofNullable(this.rolloutState);
    }
    /**
     * @return Server generated unique id for the OS policy assignment resource.
     * 
     */
    public Optional<String> uid() {
        return Optional.ofNullable(this.uid);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1Payload defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean baseline;
        private @Nullable Boolean deleted;
        private @Nullable String description;
        private @Nullable String etag;
        private V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadInstanceFilter instanceFilter;
        private @Nullable String name;
        private List<V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicy> osPolicies;
        private @Nullable Boolean reconciling;
        private @Nullable String revisionCreateTime;
        private @Nullable String revisionId;
        private V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadRollout rollout;
        private @Nullable String rolloutState;
        private @Nullable String uid;
        public Builder() {}
        public Builder(V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1Payload defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.baseline = defaults.baseline;
    	      this.deleted = defaults.deleted;
    	      this.description = defaults.description;
    	      this.etag = defaults.etag;
    	      this.instanceFilter = defaults.instanceFilter;
    	      this.name = defaults.name;
    	      this.osPolicies = defaults.osPolicies;
    	      this.reconciling = defaults.reconciling;
    	      this.revisionCreateTime = defaults.revisionCreateTime;
    	      this.revisionId = defaults.revisionId;
    	      this.rollout = defaults.rollout;
    	      this.rolloutState = defaults.rolloutState;
    	      this.uid = defaults.uid;
        }

        @CustomType.Setter
        public Builder baseline(@Nullable Boolean baseline) {

            this.baseline = baseline;
            return this;
        }
        @CustomType.Setter
        public Builder deleted(@Nullable Boolean deleted) {

            this.deleted = deleted;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {

            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder etag(@Nullable String etag) {

            this.etag = etag;
            return this;
        }
        @CustomType.Setter
        public Builder instanceFilter(V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadInstanceFilter instanceFilter) {
            if (instanceFilter == null) {
              throw new MissingRequiredPropertyException("V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1Payload", "instanceFilter");
            }
            this.instanceFilter = instanceFilter;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder osPolicies(List<V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicy> osPolicies) {
            if (osPolicies == null) {
              throw new MissingRequiredPropertyException("V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1Payload", "osPolicies");
            }
            this.osPolicies = osPolicies;
            return this;
        }
        public Builder osPolicies(V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadOsPolicy... osPolicies) {
            return osPolicies(List.of(osPolicies));
        }
        @CustomType.Setter
        public Builder reconciling(@Nullable Boolean reconciling) {

            this.reconciling = reconciling;
            return this;
        }
        @CustomType.Setter
        public Builder revisionCreateTime(@Nullable String revisionCreateTime) {

            this.revisionCreateTime = revisionCreateTime;
            return this;
        }
        @CustomType.Setter
        public Builder revisionId(@Nullable String revisionId) {

            this.revisionId = revisionId;
            return this;
        }
        @CustomType.Setter
        public Builder rollout(V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1PayloadRollout rollout) {
            if (rollout == null) {
              throw new MissingRequiredPropertyException("V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1Payload", "rollout");
            }
            this.rollout = rollout;
            return this;
        }
        @CustomType.Setter
        public Builder rolloutState(@Nullable String rolloutState) {

            this.rolloutState = rolloutState;
            return this;
        }
        @CustomType.Setter
        public Builder uid(@Nullable String uid) {

            this.uid = uid;
            return this;
        }
        public V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1Payload build() {
            final var _resultValue = new V2PolicyOrchestratorForFolderOrchestratedResourceOsPolicyAssignmentV1Payload();
            _resultValue.baseline = baseline;
            _resultValue.deleted = deleted;
            _resultValue.description = description;
            _resultValue.etag = etag;
            _resultValue.instanceFilter = instanceFilter;
            _resultValue.name = name;
            _resultValue.osPolicies = osPolicies;
            _resultValue.reconciling = reconciling;
            _resultValue.revisionCreateTime = revisionCreateTime;
            _resultValue.revisionId = revisionId;
            _resultValue.rollout = rollout;
            _resultValue.rolloutState = rolloutState;
            _resultValue.uid = uid;
            return _resultValue;
        }
    }
}
