// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.secretmanager;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.secretmanager.inputs.RegionalSecretCustomerManagedEncryptionArgs;
import com.pulumi.gcp.secretmanager.inputs.RegionalSecretRotationArgs;
import com.pulumi.gcp.secretmanager.inputs.RegionalSecretTopicArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RegionalSecretArgs extends com.pulumi.resources.ResourceArgs {

    public static final RegionalSecretArgs Empty = new RegionalSecretArgs();

    /**
     * Custom metadata about the regional secret.
     * Annotations are distinct from various forms of labels. Annotations exist to allow
     * client tools to store their own state information without requiring a database.
     * Annotation keys must be between 1 and 63 characters long, have a UTF-8 encoding of
     * maximum 128 bytes, begin and end with an alphanumeric character ([a-z0-9A-Z]), and
     * may have dashes (-), underscores (_), dots (.), and alphanumerics in between these
     * symbols.
     * The total size of annotation keys and values must be less than 16KiB.
     * An object containing a list of &#34;key&#34;: value pairs. Example:
     * { &#34;name&#34;: &#34;wrench&#34;, &#34;mass&#34;: &#34;1.3kg&#34;, &#34;count&#34;: &#34;3&#34; }.
     * 
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effective_annotations` for all of the annotations present on the resource.
     * 
     */
    @Import(name="annotations")
    private @Nullable Output<Map<String,String>> annotations;

    /**
     * @return Custom metadata about the regional secret.
     * Annotations are distinct from various forms of labels. Annotations exist to allow
     * client tools to store their own state information without requiring a database.
     * Annotation keys must be between 1 and 63 characters long, have a UTF-8 encoding of
     * maximum 128 bytes, begin and end with an alphanumeric character ([a-z0-9A-Z]), and
     * may have dashes (-), underscores (_), dots (.), and alphanumerics in between these
     * symbols.
     * The total size of annotation keys and values must be less than 16KiB.
     * An object containing a list of &#34;key&#34;: value pairs. Example:
     * { &#34;name&#34;: &#34;wrench&#34;, &#34;mass&#34;: &#34;1.3kg&#34;, &#34;count&#34;: &#34;3&#34; }.
     * 
     * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
     * Please refer to the field `effective_annotations` for all of the annotations present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> annotations() {
        return Optional.ofNullable(this.annotations);
    }

    /**
     * The customer-managed encryption configuration of the regional secret.
     * Structure is documented below.
     * 
     */
    @Import(name="customerManagedEncryption")
    private @Nullable Output<RegionalSecretCustomerManagedEncryptionArgs> customerManagedEncryption;

    /**
     * @return The customer-managed encryption configuration of the regional secret.
     * Structure is documented below.
     * 
     */
    public Optional<Output<RegionalSecretCustomerManagedEncryptionArgs>> customerManagedEncryption() {
        return Optional.ofNullable(this.customerManagedEncryption);
    }

    @Import(name="deletionProtection")
    private @Nullable Output<Boolean> deletionProtection;

    public Optional<Output<Boolean>> deletionProtection() {
        return Optional.ofNullable(this.deletionProtection);
    }

    /**
     * Timestamp in UTC when the regional secret is scheduled to expire. This is always provided on
     * output, regardless of what was sent on input. A timestamp in RFC3339 UTC &#34;Zulu&#34; format, with
     * nanosecond resolution and up to nine fractional digits. Examples: &#34;2014-10-02T15:01:23Z&#34; and
     * &#34;2014-10-02T15:01:23.045123456Z&#34;. Only one of `expire_time` or `ttl` can be provided.
     * 
     */
    @Import(name="expireTime")
    private @Nullable Output<String> expireTime;

    /**
     * @return Timestamp in UTC when the regional secret is scheduled to expire. This is always provided on
     * output, regardless of what was sent on input. A timestamp in RFC3339 UTC &#34;Zulu&#34; format, with
     * nanosecond resolution and up to nine fractional digits. Examples: &#34;2014-10-02T15:01:23Z&#34; and
     * &#34;2014-10-02T15:01:23.045123456Z&#34;. Only one of `expire_time` or `ttl` can be provided.
     * 
     */
    public Optional<Output<String>> expireTime() {
        return Optional.ofNullable(this.expireTime);
    }

    /**
     * The labels assigned to this regional secret.
     * Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes,
     * and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}][\p{Ll}\p{Lo}\p{N}_-]{0,62}
     * Label values must be between 0 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes,
     * and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63}
     * No more than 64 labels can be assigned to a given resource.
     * An object containing a list of &#34;key&#34;: value pairs. Example:
     * { &#34;name&#34;: &#34;wrench&#34;, &#34;mass&#34;: &#34;1.3kg&#34;, &#34;count&#34;: &#34;3&#34; }.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return The labels assigned to this regional secret.
     * Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes,
     * and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}][\p{Ll}\p{Lo}\p{N}_-]{0,62}
     * Label values must be between 0 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes,
     * and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63}
     * No more than 64 labels can be assigned to a given resource.
     * An object containing a list of &#34;key&#34;: value pairs. Example:
     * { &#34;name&#34;: &#34;wrench&#34;, &#34;mass&#34;: &#34;1.3kg&#34;, &#34;count&#34;: &#34;3&#34; }.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * The location of the regional secret. eg us-central1
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return The location of the regional secret. eg us-central1
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The rotation time and period for a regional secret. At `next_rotation_time`, Secret Manager
     * will send a Pub/Sub notification to the topics configured on the Secret. `topics` must be
     * set to configure rotation.
     * Structure is documented below.
     * 
     */
    @Import(name="rotation")
    private @Nullable Output<RegionalSecretRotationArgs> rotation;

    /**
     * @return The rotation time and period for a regional secret. At `next_rotation_time`, Secret Manager
     * will send a Pub/Sub notification to the topics configured on the Secret. `topics` must be
     * set to configure rotation.
     * Structure is documented below.
     * 
     */
    public Optional<Output<RegionalSecretRotationArgs>> rotation() {
        return Optional.ofNullable(this.rotation);
    }

    /**
     * This must be unique within the project.
     * 
     */
    @Import(name="secretId", required=true)
    private Output<String> secretId;

    /**
     * @return This must be unique within the project.
     * 
     */
    public Output<String> secretId() {
        return this.secretId;
    }

    /**
     * A list of up to 10 Pub/Sub topics to which messages are published when control plane
     * operations are called on the regional secret or its versions.
     * Structure is documented below.
     * 
     */
    @Import(name="topics")
    private @Nullable Output<List<RegionalSecretTopicArgs>> topics;

    /**
     * @return A list of up to 10 Pub/Sub topics to which messages are published when control plane
     * operations are called on the regional secret or its versions.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<RegionalSecretTopicArgs>>> topics() {
        return Optional.ofNullable(this.topics);
    }

    /**
     * The TTL for the regional secret. A duration in seconds with up to nine fractional digits,
     * terminated by &#39;s&#39;. Example: &#34;3.5s&#34;. Only one of `ttl` or `expire_time` can be provided.
     * 
     */
    @Import(name="ttl")
    private @Nullable Output<String> ttl;

    /**
     * @return The TTL for the regional secret. A duration in seconds with up to nine fractional digits,
     * terminated by &#39;s&#39;. Example: &#34;3.5s&#34;. Only one of `ttl` or `expire_time` can be provided.
     * 
     */
    public Optional<Output<String>> ttl() {
        return Optional.ofNullable(this.ttl);
    }

    /**
     * Mapping from version alias to version name.
     * A version alias is a string with a maximum length of 63 characters and can contain
     * uppercase and lowercase letters, numerals, and the hyphen (-) and underscore (&#39;_&#39;)
     * characters. An alias string must start with a letter and cannot be the string
     * &#39;latest&#39; or &#39;NEW&#39;. No more than 50 aliases can be assigned to a given secret.
     * An object containing a list of &#34;key&#34;: value pairs. Example:
     * { &#34;name&#34;: &#34;wrench&#34;, &#34;mass&#34;: &#34;1.3kg&#34;, &#34;count&#34;: &#34;3&#34; }.
     * 
     */
    @Import(name="versionAliases")
    private @Nullable Output<Map<String,String>> versionAliases;

    /**
     * @return Mapping from version alias to version name.
     * A version alias is a string with a maximum length of 63 characters and can contain
     * uppercase and lowercase letters, numerals, and the hyphen (-) and underscore (&#39;_&#39;)
     * characters. An alias string must start with a letter and cannot be the string
     * &#39;latest&#39; or &#39;NEW&#39;. No more than 50 aliases can be assigned to a given secret.
     * An object containing a list of &#34;key&#34;: value pairs. Example:
     * { &#34;name&#34;: &#34;wrench&#34;, &#34;mass&#34;: &#34;1.3kg&#34;, &#34;count&#34;: &#34;3&#34; }.
     * 
     */
    public Optional<Output<Map<String,String>>> versionAliases() {
        return Optional.ofNullable(this.versionAliases);
    }

    /**
     * Secret Version TTL after destruction request.
     * This is a part of the delayed delete feature on Secret Version.
     * For secret with versionDestroyTtl&gt;0, version destruction doesn&#39;t happen immediately
     * on calling destroy instead the version goes to a disabled state and
     * the actual destruction happens after this TTL expires. It must be atleast 24h.
     * 
     */
    @Import(name="versionDestroyTtl")
    private @Nullable Output<String> versionDestroyTtl;

    /**
     * @return Secret Version TTL after destruction request.
     * This is a part of the delayed delete feature on Secret Version.
     * For secret with versionDestroyTtl&gt;0, version destruction doesn&#39;t happen immediately
     * on calling destroy instead the version goes to a disabled state and
     * the actual destruction happens after this TTL expires. It must be atleast 24h.
     * 
     */
    public Optional<Output<String>> versionDestroyTtl() {
        return Optional.ofNullable(this.versionDestroyTtl);
    }

    private RegionalSecretArgs() {}

    private RegionalSecretArgs(RegionalSecretArgs $) {
        this.annotations = $.annotations;
        this.customerManagedEncryption = $.customerManagedEncryption;
        this.deletionProtection = $.deletionProtection;
        this.expireTime = $.expireTime;
        this.labels = $.labels;
        this.location = $.location;
        this.project = $.project;
        this.rotation = $.rotation;
        this.secretId = $.secretId;
        this.topics = $.topics;
        this.ttl = $.ttl;
        this.versionAliases = $.versionAliases;
        this.versionDestroyTtl = $.versionDestroyTtl;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RegionalSecretArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RegionalSecretArgs $;

        public Builder() {
            $ = new RegionalSecretArgs();
        }

        public Builder(RegionalSecretArgs defaults) {
            $ = new RegionalSecretArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param annotations Custom metadata about the regional secret.
         * Annotations are distinct from various forms of labels. Annotations exist to allow
         * client tools to store their own state information without requiring a database.
         * Annotation keys must be between 1 and 63 characters long, have a UTF-8 encoding of
         * maximum 128 bytes, begin and end with an alphanumeric character ([a-z0-9A-Z]), and
         * may have dashes (-), underscores (_), dots (.), and alphanumerics in between these
         * symbols.
         * The total size of annotation keys and values must be less than 16KiB.
         * An object containing a list of &#34;key&#34;: value pairs. Example:
         * { &#34;name&#34;: &#34;wrench&#34;, &#34;mass&#34;: &#34;1.3kg&#34;, &#34;count&#34;: &#34;3&#34; }.
         * 
         * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
         * Please refer to the field `effective_annotations` for all of the annotations present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder annotations(@Nullable Output<Map<String,String>> annotations) {
            $.annotations = annotations;
            return this;
        }

        /**
         * @param annotations Custom metadata about the regional secret.
         * Annotations are distinct from various forms of labels. Annotations exist to allow
         * client tools to store their own state information without requiring a database.
         * Annotation keys must be between 1 and 63 characters long, have a UTF-8 encoding of
         * maximum 128 bytes, begin and end with an alphanumeric character ([a-z0-9A-Z]), and
         * may have dashes (-), underscores (_), dots (.), and alphanumerics in between these
         * symbols.
         * The total size of annotation keys and values must be less than 16KiB.
         * An object containing a list of &#34;key&#34;: value pairs. Example:
         * { &#34;name&#34;: &#34;wrench&#34;, &#34;mass&#34;: &#34;1.3kg&#34;, &#34;count&#34;: &#34;3&#34; }.
         * 
         * **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
         * Please refer to the field `effective_annotations` for all of the annotations present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder annotations(Map<String,String> annotations) {
            return annotations(Output.of(annotations));
        }

        /**
         * @param customerManagedEncryption The customer-managed encryption configuration of the regional secret.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder customerManagedEncryption(@Nullable Output<RegionalSecretCustomerManagedEncryptionArgs> customerManagedEncryption) {
            $.customerManagedEncryption = customerManagedEncryption;
            return this;
        }

        /**
         * @param customerManagedEncryption The customer-managed encryption configuration of the regional secret.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder customerManagedEncryption(RegionalSecretCustomerManagedEncryptionArgs customerManagedEncryption) {
            return customerManagedEncryption(Output.of(customerManagedEncryption));
        }

        public Builder deletionProtection(@Nullable Output<Boolean> deletionProtection) {
            $.deletionProtection = deletionProtection;
            return this;
        }

        public Builder deletionProtection(Boolean deletionProtection) {
            return deletionProtection(Output.of(deletionProtection));
        }

        /**
         * @param expireTime Timestamp in UTC when the regional secret is scheduled to expire. This is always provided on
         * output, regardless of what was sent on input. A timestamp in RFC3339 UTC &#34;Zulu&#34; format, with
         * nanosecond resolution and up to nine fractional digits. Examples: &#34;2014-10-02T15:01:23Z&#34; and
         * &#34;2014-10-02T15:01:23.045123456Z&#34;. Only one of `expire_time` or `ttl` can be provided.
         * 
         * @return builder
         * 
         */
        public Builder expireTime(@Nullable Output<String> expireTime) {
            $.expireTime = expireTime;
            return this;
        }

        /**
         * @param expireTime Timestamp in UTC when the regional secret is scheduled to expire. This is always provided on
         * output, regardless of what was sent on input. A timestamp in RFC3339 UTC &#34;Zulu&#34; format, with
         * nanosecond resolution and up to nine fractional digits. Examples: &#34;2014-10-02T15:01:23Z&#34; and
         * &#34;2014-10-02T15:01:23.045123456Z&#34;. Only one of `expire_time` or `ttl` can be provided.
         * 
         * @return builder
         * 
         */
        public Builder expireTime(String expireTime) {
            return expireTime(Output.of(expireTime));
        }

        /**
         * @param labels The labels assigned to this regional secret.
         * Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes,
         * and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}][\p{Ll}\p{Lo}\p{N}_-]{0,62}
         * Label values must be between 0 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes,
         * and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63}
         * No more than 64 labels can be assigned to a given resource.
         * An object containing a list of &#34;key&#34;: value pairs. Example:
         * { &#34;name&#34;: &#34;wrench&#34;, &#34;mass&#34;: &#34;1.3kg&#34;, &#34;count&#34;: &#34;3&#34; }.
         * 
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels The labels assigned to this regional secret.
         * Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes,
         * and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}][\p{Ll}\p{Lo}\p{N}_-]{0,62}
         * Label values must be between 0 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes,
         * and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63}
         * No more than 64 labels can be assigned to a given resource.
         * An object containing a list of &#34;key&#34;: value pairs. Example:
         * { &#34;name&#34;: &#34;wrench&#34;, &#34;mass&#34;: &#34;1.3kg&#34;, &#34;count&#34;: &#34;3&#34; }.
         * 
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param location The location of the regional secret. eg us-central1
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location of the regional secret. eg us-central1
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param rotation The rotation time and period for a regional secret. At `next_rotation_time`, Secret Manager
         * will send a Pub/Sub notification to the topics configured on the Secret. `topics` must be
         * set to configure rotation.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder rotation(@Nullable Output<RegionalSecretRotationArgs> rotation) {
            $.rotation = rotation;
            return this;
        }

        /**
         * @param rotation The rotation time and period for a regional secret. At `next_rotation_time`, Secret Manager
         * will send a Pub/Sub notification to the topics configured on the Secret. `topics` must be
         * set to configure rotation.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder rotation(RegionalSecretRotationArgs rotation) {
            return rotation(Output.of(rotation));
        }

        /**
         * @param secretId This must be unique within the project.
         * 
         * @return builder
         * 
         */
        public Builder secretId(Output<String> secretId) {
            $.secretId = secretId;
            return this;
        }

        /**
         * @param secretId This must be unique within the project.
         * 
         * @return builder
         * 
         */
        public Builder secretId(String secretId) {
            return secretId(Output.of(secretId));
        }

        /**
         * @param topics A list of up to 10 Pub/Sub topics to which messages are published when control plane
         * operations are called on the regional secret or its versions.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder topics(@Nullable Output<List<RegionalSecretTopicArgs>> topics) {
            $.topics = topics;
            return this;
        }

        /**
         * @param topics A list of up to 10 Pub/Sub topics to which messages are published when control plane
         * operations are called on the regional secret or its versions.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder topics(List<RegionalSecretTopicArgs> topics) {
            return topics(Output.of(topics));
        }

        /**
         * @param topics A list of up to 10 Pub/Sub topics to which messages are published when control plane
         * operations are called on the regional secret or its versions.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder topics(RegionalSecretTopicArgs... topics) {
            return topics(List.of(topics));
        }

        /**
         * @param ttl The TTL for the regional secret. A duration in seconds with up to nine fractional digits,
         * terminated by &#39;s&#39;. Example: &#34;3.5s&#34;. Only one of `ttl` or `expire_time` can be provided.
         * 
         * @return builder
         * 
         */
        public Builder ttl(@Nullable Output<String> ttl) {
            $.ttl = ttl;
            return this;
        }

        /**
         * @param ttl The TTL for the regional secret. A duration in seconds with up to nine fractional digits,
         * terminated by &#39;s&#39;. Example: &#34;3.5s&#34;. Only one of `ttl` or `expire_time` can be provided.
         * 
         * @return builder
         * 
         */
        public Builder ttl(String ttl) {
            return ttl(Output.of(ttl));
        }

        /**
         * @param versionAliases Mapping from version alias to version name.
         * A version alias is a string with a maximum length of 63 characters and can contain
         * uppercase and lowercase letters, numerals, and the hyphen (-) and underscore (&#39;_&#39;)
         * characters. An alias string must start with a letter and cannot be the string
         * &#39;latest&#39; or &#39;NEW&#39;. No more than 50 aliases can be assigned to a given secret.
         * An object containing a list of &#34;key&#34;: value pairs. Example:
         * { &#34;name&#34;: &#34;wrench&#34;, &#34;mass&#34;: &#34;1.3kg&#34;, &#34;count&#34;: &#34;3&#34; }.
         * 
         * @return builder
         * 
         */
        public Builder versionAliases(@Nullable Output<Map<String,String>> versionAliases) {
            $.versionAliases = versionAliases;
            return this;
        }

        /**
         * @param versionAliases Mapping from version alias to version name.
         * A version alias is a string with a maximum length of 63 characters and can contain
         * uppercase and lowercase letters, numerals, and the hyphen (-) and underscore (&#39;_&#39;)
         * characters. An alias string must start with a letter and cannot be the string
         * &#39;latest&#39; or &#39;NEW&#39;. No more than 50 aliases can be assigned to a given secret.
         * An object containing a list of &#34;key&#34;: value pairs. Example:
         * { &#34;name&#34;: &#34;wrench&#34;, &#34;mass&#34;: &#34;1.3kg&#34;, &#34;count&#34;: &#34;3&#34; }.
         * 
         * @return builder
         * 
         */
        public Builder versionAliases(Map<String,String> versionAliases) {
            return versionAliases(Output.of(versionAliases));
        }

        /**
         * @param versionDestroyTtl Secret Version TTL after destruction request.
         * This is a part of the delayed delete feature on Secret Version.
         * For secret with versionDestroyTtl&gt;0, version destruction doesn&#39;t happen immediately
         * on calling destroy instead the version goes to a disabled state and
         * the actual destruction happens after this TTL expires. It must be atleast 24h.
         * 
         * @return builder
         * 
         */
        public Builder versionDestroyTtl(@Nullable Output<String> versionDestroyTtl) {
            $.versionDestroyTtl = versionDestroyTtl;
            return this;
        }

        /**
         * @param versionDestroyTtl Secret Version TTL after destruction request.
         * This is a part of the delayed delete feature on Secret Version.
         * For secret with versionDestroyTtl&gt;0, version destruction doesn&#39;t happen immediately
         * on calling destroy instead the version goes to a disabled state and
         * the actual destruction happens after this TTL expires. It must be atleast 24h.
         * 
         * @return builder
         * 
         */
        public Builder versionDestroyTtl(String versionDestroyTtl) {
            return versionDestroyTtl(Output.of(versionDestroyTtl));
        }

        public RegionalSecretArgs build() {
            if ($.location == null) {
                throw new MissingRequiredPropertyException("RegionalSecretArgs", "location");
            }
            if ($.secretId == null) {
                throw new MissingRequiredPropertyException("RegionalSecretArgs", "secretId");
            }
            return $;
        }
    }

}
