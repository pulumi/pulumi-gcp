// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.container.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.container.outputs.NodePoolNodeConfigAdvancedMachineFeatures;
import com.pulumi.gcp.container.outputs.NodePoolNodeConfigConfidentialNodes;
import com.pulumi.gcp.container.outputs.NodePoolNodeConfigContainerdConfig;
import com.pulumi.gcp.container.outputs.NodePoolNodeConfigEffectiveTaint;
import com.pulumi.gcp.container.outputs.NodePoolNodeConfigEphemeralStorageConfig;
import com.pulumi.gcp.container.outputs.NodePoolNodeConfigEphemeralStorageLocalSsdConfig;
import com.pulumi.gcp.container.outputs.NodePoolNodeConfigFastSocket;
import com.pulumi.gcp.container.outputs.NodePoolNodeConfigGcfsConfig;
import com.pulumi.gcp.container.outputs.NodePoolNodeConfigGuestAccelerator;
import com.pulumi.gcp.container.outputs.NodePoolNodeConfigGvnic;
import com.pulumi.gcp.container.outputs.NodePoolNodeConfigHostMaintenancePolicy;
import com.pulumi.gcp.container.outputs.NodePoolNodeConfigKubeletConfig;
import com.pulumi.gcp.container.outputs.NodePoolNodeConfigLinuxNodeConfig;
import com.pulumi.gcp.container.outputs.NodePoolNodeConfigLocalNvmeSsdBlockConfig;
import com.pulumi.gcp.container.outputs.NodePoolNodeConfigReservationAffinity;
import com.pulumi.gcp.container.outputs.NodePoolNodeConfigSandboxConfig;
import com.pulumi.gcp.container.outputs.NodePoolNodeConfigSecondaryBootDisk;
import com.pulumi.gcp.container.outputs.NodePoolNodeConfigShieldedInstanceConfig;
import com.pulumi.gcp.container.outputs.NodePoolNodeConfigSoleTenantConfig;
import com.pulumi.gcp.container.outputs.NodePoolNodeConfigTaint;
import com.pulumi.gcp.container.outputs.NodePoolNodeConfigWorkloadMetadataConfig;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class NodePoolNodeConfig {
    /**
     * @return Specifies options for controlling advanced machine features.
     * 
     */
    private @Nullable NodePoolNodeConfigAdvancedMachineFeatures advancedMachineFeatures;
    /**
     * @return The Customer Managed Encryption Key used to encrypt the boot disk attached to each node in the node pool.
     * 
     */
    private @Nullable String bootDiskKmsKey;
    /**
     * @return Configuration for Confidential Nodes feature. Structure is documented below.
     * 
     */
    private @Nullable NodePoolNodeConfigConfidentialNodes confidentialNodes;
    /**
     * @return Parameters for containerd configuration.
     * 
     */
    private @Nullable NodePoolNodeConfigContainerdConfig containerdConfig;
    /**
     * @return Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB.
     * 
     */
    private @Nullable Integer diskSizeGb;
    /**
     * @return Type of the disk attached to each node. Such as pd-standard, pd-balanced or pd-ssd
     * 
     */
    private @Nullable String diskType;
    /**
     * @return List of kubernetes taints applied to each node.
     * 
     */
    private @Nullable List<NodePoolNodeConfigEffectiveTaint> effectiveTaints;
    /**
     * @return If enabled boot disks are configured with confidential mode.
     * 
     */
    private @Nullable Boolean enableConfidentialStorage;
    /**
     * @return Parameters for the ephemeral storage filesystem. If unspecified, ephemeral storage is backed by the boot disk.
     * 
     */
    private @Nullable NodePoolNodeConfigEphemeralStorageConfig ephemeralStorageConfig;
    /**
     * @return Parameters for the ephemeral storage filesystem. If unspecified, ephemeral storage is backed by the boot disk.
     * 
     */
    private @Nullable NodePoolNodeConfigEphemeralStorageLocalSsdConfig ephemeralStorageLocalSsdConfig;
    /**
     * @return Enable or disable NCCL Fast Socket in the node pool.
     * 
     */
    private @Nullable NodePoolNodeConfigFastSocket fastSocket;
    /**
     * @return GCFS configuration for this node.
     * 
     */
    private @Nullable NodePoolNodeConfigGcfsConfig gcfsConfig;
    /**
     * @return List of the type and count of accelerator cards attached to the instance.
     * 
     */
    private @Nullable List<NodePoolNodeConfigGuestAccelerator> guestAccelerators;
    /**
     * @return Enable or disable gvnic in the node pool.
     * 
     */
    private @Nullable NodePoolNodeConfigGvnic gvnic;
    /**
     * @return The maintenance policy for the hosts on which the GKE VMs run on.
     * 
     */
    private @Nullable NodePoolNodeConfigHostMaintenancePolicy hostMaintenancePolicy;
    /**
     * @return The image type to use for this node. Note that for a given image type, the latest version of it will be used.
     * 
     */
    private @Nullable String imageType;
    /**
     * @return Node kubelet configs.
     * 
     */
    private @Nullable NodePoolNodeConfigKubeletConfig kubeletConfig;
    /**
     * @return The map of Kubernetes labels (key/value pairs) to be applied to each node. These will added in addition to any default label(s) that Kubernetes may apply to the node.
     * 
     */
    private @Nullable Map<String,String> labels;
    /**
     * @return Parameters that can be configured on Linux nodes.
     * 
     */
    private @Nullable NodePoolNodeConfigLinuxNodeConfig linuxNodeConfig;
    /**
     * @return Parameters for raw-block local NVMe SSDs.
     * 
     */
    private @Nullable NodePoolNodeConfigLocalNvmeSsdBlockConfig localNvmeSsdBlockConfig;
    /**
     * @return The number of local SSD disks to be attached to the node.
     * 
     */
    private @Nullable Integer localSsdCount;
    /**
     * @return Type of logging agent that is used as the default value for node pools in the cluster. Valid values include DEFAULT and MAX_THROUGHPUT.
     * 
     */
    private @Nullable String loggingVariant;
    /**
     * @return The name of a Google Compute Engine machine type.
     * 
     */
    private @Nullable String machineType;
    /**
     * @return The metadata key/value pairs assigned to instances in the cluster.
     * 
     */
    private @Nullable Map<String,String> metadata;
    /**
     * @return Minimum CPU platform to be used by this instance. The instance may be scheduled on the specified or newer CPU platform.
     * 
     */
    private @Nullable String minCpuPlatform;
    /**
     * @return Setting this field will assign instances of this pool to run on the specified node group. This is useful for running workloads on sole tenant nodes.
     * 
     */
    private @Nullable String nodeGroup;
    /**
     * @return The set of Google API scopes to be made available on all of the node VMs.
     * 
     */
    private @Nullable List<String> oauthScopes;
    /**
     * @return Whether the nodes are created as preemptible VM instances.
     * 
     */
    private @Nullable Boolean preemptible;
    /**
     * @return The configuration of the desired reservation which instances could take capacity from.
     * Structure is documented below.
     * 
     * &lt;a name=&#34;nested_autoscaling&#34;&gt;&lt;/a&gt;The `autoscaling` block supports (either total or per zone limits are required):
     * 
     */
    private @Nullable NodePoolNodeConfigReservationAffinity reservationAffinity;
    /**
     * @return The GCE resource labels (a map of key/value pairs) to be applied to the node pool.
     * 
     */
    private @Nullable Map<String,String> resourceLabels;
    /**
     * @return A map of resource manager tags. Resource manager tag keys and values have the same definition as resource manager tags. Keys must be in the format tagKeys/{tag_key_id}, and values are in the format tagValues/456. The field is ignored (both PUT &amp; PATCH) when empty.
     * 
     */
    private @Nullable Map<String,String> resourceManagerTags;
    /**
     * @return Sandbox configuration for this node.
     * 
     */
    private @Nullable NodePoolNodeConfigSandboxConfig sandboxConfig;
    /**
     * @return Secondary boot disks for preloading data or container images.
     * 
     */
    private @Nullable List<NodePoolNodeConfigSecondaryBootDisk> secondaryBootDisks;
    /**
     * @return The Google Cloud Platform Service Account to be used by the node VMs.
     * 
     */
    private @Nullable String serviceAccount;
    /**
     * @return Shielded Instance options.
     * 
     */
    private @Nullable NodePoolNodeConfigShieldedInstanceConfig shieldedInstanceConfig;
    /**
     * @return Node affinity options for sole tenant node pools.
     * 
     */
    private @Nullable NodePoolNodeConfigSoleTenantConfig soleTenantConfig;
    /**
     * @return Whether the nodes are created as spot VM instances.
     * 
     */
    private @Nullable Boolean spot;
    /**
     * @return The list of instance tags applied to all nodes.
     * 
     */
    private @Nullable List<String> tags;
    /**
     * @return List of Kubernetes taints to be applied to each node.
     * 
     */
    private @Nullable List<NodePoolNodeConfigTaint> taints;
    /**
     * @return The workload metadata configuration for this node.
     * 
     */
    private @Nullable NodePoolNodeConfigWorkloadMetadataConfig workloadMetadataConfig;

    private NodePoolNodeConfig() {}
    /**
     * @return Specifies options for controlling advanced machine features.
     * 
     */
    public Optional<NodePoolNodeConfigAdvancedMachineFeatures> advancedMachineFeatures() {
        return Optional.ofNullable(this.advancedMachineFeatures);
    }
    /**
     * @return The Customer Managed Encryption Key used to encrypt the boot disk attached to each node in the node pool.
     * 
     */
    public Optional<String> bootDiskKmsKey() {
        return Optional.ofNullable(this.bootDiskKmsKey);
    }
    /**
     * @return Configuration for Confidential Nodes feature. Structure is documented below.
     * 
     */
    public Optional<NodePoolNodeConfigConfidentialNodes> confidentialNodes() {
        return Optional.ofNullable(this.confidentialNodes);
    }
    /**
     * @return Parameters for containerd configuration.
     * 
     */
    public Optional<NodePoolNodeConfigContainerdConfig> containerdConfig() {
        return Optional.ofNullable(this.containerdConfig);
    }
    /**
     * @return Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB.
     * 
     */
    public Optional<Integer> diskSizeGb() {
        return Optional.ofNullable(this.diskSizeGb);
    }
    /**
     * @return Type of the disk attached to each node. Such as pd-standard, pd-balanced or pd-ssd
     * 
     */
    public Optional<String> diskType() {
        return Optional.ofNullable(this.diskType);
    }
    /**
     * @return List of kubernetes taints applied to each node.
     * 
     */
    public List<NodePoolNodeConfigEffectiveTaint> effectiveTaints() {
        return this.effectiveTaints == null ? List.of() : this.effectiveTaints;
    }
    /**
     * @return If enabled boot disks are configured with confidential mode.
     * 
     */
    public Optional<Boolean> enableConfidentialStorage() {
        return Optional.ofNullable(this.enableConfidentialStorage);
    }
    /**
     * @return Parameters for the ephemeral storage filesystem. If unspecified, ephemeral storage is backed by the boot disk.
     * 
     */
    public Optional<NodePoolNodeConfigEphemeralStorageConfig> ephemeralStorageConfig() {
        return Optional.ofNullable(this.ephemeralStorageConfig);
    }
    /**
     * @return Parameters for the ephemeral storage filesystem. If unspecified, ephemeral storage is backed by the boot disk.
     * 
     */
    public Optional<NodePoolNodeConfigEphemeralStorageLocalSsdConfig> ephemeralStorageLocalSsdConfig() {
        return Optional.ofNullable(this.ephemeralStorageLocalSsdConfig);
    }
    /**
     * @return Enable or disable NCCL Fast Socket in the node pool.
     * 
     */
    public Optional<NodePoolNodeConfigFastSocket> fastSocket() {
        return Optional.ofNullable(this.fastSocket);
    }
    /**
     * @return GCFS configuration for this node.
     * 
     */
    public Optional<NodePoolNodeConfigGcfsConfig> gcfsConfig() {
        return Optional.ofNullable(this.gcfsConfig);
    }
    /**
     * @return List of the type and count of accelerator cards attached to the instance.
     * 
     */
    public List<NodePoolNodeConfigGuestAccelerator> guestAccelerators() {
        return this.guestAccelerators == null ? List.of() : this.guestAccelerators;
    }
    /**
     * @return Enable or disable gvnic in the node pool.
     * 
     */
    public Optional<NodePoolNodeConfigGvnic> gvnic() {
        return Optional.ofNullable(this.gvnic);
    }
    /**
     * @return The maintenance policy for the hosts on which the GKE VMs run on.
     * 
     */
    public Optional<NodePoolNodeConfigHostMaintenancePolicy> hostMaintenancePolicy() {
        return Optional.ofNullable(this.hostMaintenancePolicy);
    }
    /**
     * @return The image type to use for this node. Note that for a given image type, the latest version of it will be used.
     * 
     */
    public Optional<String> imageType() {
        return Optional.ofNullable(this.imageType);
    }
    /**
     * @return Node kubelet configs.
     * 
     */
    public Optional<NodePoolNodeConfigKubeletConfig> kubeletConfig() {
        return Optional.ofNullable(this.kubeletConfig);
    }
    /**
     * @return The map of Kubernetes labels (key/value pairs) to be applied to each node. These will added in addition to any default label(s) that Kubernetes may apply to the node.
     * 
     */
    public Map<String,String> labels() {
        return this.labels == null ? Map.of() : this.labels;
    }
    /**
     * @return Parameters that can be configured on Linux nodes.
     * 
     */
    public Optional<NodePoolNodeConfigLinuxNodeConfig> linuxNodeConfig() {
        return Optional.ofNullable(this.linuxNodeConfig);
    }
    /**
     * @return Parameters for raw-block local NVMe SSDs.
     * 
     */
    public Optional<NodePoolNodeConfigLocalNvmeSsdBlockConfig> localNvmeSsdBlockConfig() {
        return Optional.ofNullable(this.localNvmeSsdBlockConfig);
    }
    /**
     * @return The number of local SSD disks to be attached to the node.
     * 
     */
    public Optional<Integer> localSsdCount() {
        return Optional.ofNullable(this.localSsdCount);
    }
    /**
     * @return Type of logging agent that is used as the default value for node pools in the cluster. Valid values include DEFAULT and MAX_THROUGHPUT.
     * 
     */
    public Optional<String> loggingVariant() {
        return Optional.ofNullable(this.loggingVariant);
    }
    /**
     * @return The name of a Google Compute Engine machine type.
     * 
     */
    public Optional<String> machineType() {
        return Optional.ofNullable(this.machineType);
    }
    /**
     * @return The metadata key/value pairs assigned to instances in the cluster.
     * 
     */
    public Map<String,String> metadata() {
        return this.metadata == null ? Map.of() : this.metadata;
    }
    /**
     * @return Minimum CPU platform to be used by this instance. The instance may be scheduled on the specified or newer CPU platform.
     * 
     */
    public Optional<String> minCpuPlatform() {
        return Optional.ofNullable(this.minCpuPlatform);
    }
    /**
     * @return Setting this field will assign instances of this pool to run on the specified node group. This is useful for running workloads on sole tenant nodes.
     * 
     */
    public Optional<String> nodeGroup() {
        return Optional.ofNullable(this.nodeGroup);
    }
    /**
     * @return The set of Google API scopes to be made available on all of the node VMs.
     * 
     */
    public List<String> oauthScopes() {
        return this.oauthScopes == null ? List.of() : this.oauthScopes;
    }
    /**
     * @return Whether the nodes are created as preemptible VM instances.
     * 
     */
    public Optional<Boolean> preemptible() {
        return Optional.ofNullable(this.preemptible);
    }
    /**
     * @return The configuration of the desired reservation which instances could take capacity from.
     * Structure is documented below.
     * 
     * &lt;a name=&#34;nested_autoscaling&#34;&gt;&lt;/a&gt;The `autoscaling` block supports (either total or per zone limits are required):
     * 
     */
    public Optional<NodePoolNodeConfigReservationAffinity> reservationAffinity() {
        return Optional.ofNullable(this.reservationAffinity);
    }
    /**
     * @return The GCE resource labels (a map of key/value pairs) to be applied to the node pool.
     * 
     */
    public Map<String,String> resourceLabels() {
        return this.resourceLabels == null ? Map.of() : this.resourceLabels;
    }
    /**
     * @return A map of resource manager tags. Resource manager tag keys and values have the same definition as resource manager tags. Keys must be in the format tagKeys/{tag_key_id}, and values are in the format tagValues/456. The field is ignored (both PUT &amp; PATCH) when empty.
     * 
     */
    public Map<String,String> resourceManagerTags() {
        return this.resourceManagerTags == null ? Map.of() : this.resourceManagerTags;
    }
    /**
     * @return Sandbox configuration for this node.
     * 
     */
    public Optional<NodePoolNodeConfigSandboxConfig> sandboxConfig() {
        return Optional.ofNullable(this.sandboxConfig);
    }
    /**
     * @return Secondary boot disks for preloading data or container images.
     * 
     */
    public List<NodePoolNodeConfigSecondaryBootDisk> secondaryBootDisks() {
        return this.secondaryBootDisks == null ? List.of() : this.secondaryBootDisks;
    }
    /**
     * @return The Google Cloud Platform Service Account to be used by the node VMs.
     * 
     */
    public Optional<String> serviceAccount() {
        return Optional.ofNullable(this.serviceAccount);
    }
    /**
     * @return Shielded Instance options.
     * 
     */
    public Optional<NodePoolNodeConfigShieldedInstanceConfig> shieldedInstanceConfig() {
        return Optional.ofNullable(this.shieldedInstanceConfig);
    }
    /**
     * @return Node affinity options for sole tenant node pools.
     * 
     */
    public Optional<NodePoolNodeConfigSoleTenantConfig> soleTenantConfig() {
        return Optional.ofNullable(this.soleTenantConfig);
    }
    /**
     * @return Whether the nodes are created as spot VM instances.
     * 
     */
    public Optional<Boolean> spot() {
        return Optional.ofNullable(this.spot);
    }
    /**
     * @return The list of instance tags applied to all nodes.
     * 
     */
    public List<String> tags() {
        return this.tags == null ? List.of() : this.tags;
    }
    /**
     * @return List of Kubernetes taints to be applied to each node.
     * 
     */
    public List<NodePoolNodeConfigTaint> taints() {
        return this.taints == null ? List.of() : this.taints;
    }
    /**
     * @return The workload metadata configuration for this node.
     * 
     */
    public Optional<NodePoolNodeConfigWorkloadMetadataConfig> workloadMetadataConfig() {
        return Optional.ofNullable(this.workloadMetadataConfig);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NodePoolNodeConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable NodePoolNodeConfigAdvancedMachineFeatures advancedMachineFeatures;
        private @Nullable String bootDiskKmsKey;
        private @Nullable NodePoolNodeConfigConfidentialNodes confidentialNodes;
        private @Nullable NodePoolNodeConfigContainerdConfig containerdConfig;
        private @Nullable Integer diskSizeGb;
        private @Nullable String diskType;
        private @Nullable List<NodePoolNodeConfigEffectiveTaint> effectiveTaints;
        private @Nullable Boolean enableConfidentialStorage;
        private @Nullable NodePoolNodeConfigEphemeralStorageConfig ephemeralStorageConfig;
        private @Nullable NodePoolNodeConfigEphemeralStorageLocalSsdConfig ephemeralStorageLocalSsdConfig;
        private @Nullable NodePoolNodeConfigFastSocket fastSocket;
        private @Nullable NodePoolNodeConfigGcfsConfig gcfsConfig;
        private @Nullable List<NodePoolNodeConfigGuestAccelerator> guestAccelerators;
        private @Nullable NodePoolNodeConfigGvnic gvnic;
        private @Nullable NodePoolNodeConfigHostMaintenancePolicy hostMaintenancePolicy;
        private @Nullable String imageType;
        private @Nullable NodePoolNodeConfigKubeletConfig kubeletConfig;
        private @Nullable Map<String,String> labels;
        private @Nullable NodePoolNodeConfigLinuxNodeConfig linuxNodeConfig;
        private @Nullable NodePoolNodeConfigLocalNvmeSsdBlockConfig localNvmeSsdBlockConfig;
        private @Nullable Integer localSsdCount;
        private @Nullable String loggingVariant;
        private @Nullable String machineType;
        private @Nullable Map<String,String> metadata;
        private @Nullable String minCpuPlatform;
        private @Nullable String nodeGroup;
        private @Nullable List<String> oauthScopes;
        private @Nullable Boolean preemptible;
        private @Nullable NodePoolNodeConfigReservationAffinity reservationAffinity;
        private @Nullable Map<String,String> resourceLabels;
        private @Nullable Map<String,String> resourceManagerTags;
        private @Nullable NodePoolNodeConfigSandboxConfig sandboxConfig;
        private @Nullable List<NodePoolNodeConfigSecondaryBootDisk> secondaryBootDisks;
        private @Nullable String serviceAccount;
        private @Nullable NodePoolNodeConfigShieldedInstanceConfig shieldedInstanceConfig;
        private @Nullable NodePoolNodeConfigSoleTenantConfig soleTenantConfig;
        private @Nullable Boolean spot;
        private @Nullable List<String> tags;
        private @Nullable List<NodePoolNodeConfigTaint> taints;
        private @Nullable NodePoolNodeConfigWorkloadMetadataConfig workloadMetadataConfig;
        public Builder() {}
        public Builder(NodePoolNodeConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.advancedMachineFeatures = defaults.advancedMachineFeatures;
    	      this.bootDiskKmsKey = defaults.bootDiskKmsKey;
    	      this.confidentialNodes = defaults.confidentialNodes;
    	      this.containerdConfig = defaults.containerdConfig;
    	      this.diskSizeGb = defaults.diskSizeGb;
    	      this.diskType = defaults.diskType;
    	      this.effectiveTaints = defaults.effectiveTaints;
    	      this.enableConfidentialStorage = defaults.enableConfidentialStorage;
    	      this.ephemeralStorageConfig = defaults.ephemeralStorageConfig;
    	      this.ephemeralStorageLocalSsdConfig = defaults.ephemeralStorageLocalSsdConfig;
    	      this.fastSocket = defaults.fastSocket;
    	      this.gcfsConfig = defaults.gcfsConfig;
    	      this.guestAccelerators = defaults.guestAccelerators;
    	      this.gvnic = defaults.gvnic;
    	      this.hostMaintenancePolicy = defaults.hostMaintenancePolicy;
    	      this.imageType = defaults.imageType;
    	      this.kubeletConfig = defaults.kubeletConfig;
    	      this.labels = defaults.labels;
    	      this.linuxNodeConfig = defaults.linuxNodeConfig;
    	      this.localNvmeSsdBlockConfig = defaults.localNvmeSsdBlockConfig;
    	      this.localSsdCount = defaults.localSsdCount;
    	      this.loggingVariant = defaults.loggingVariant;
    	      this.machineType = defaults.machineType;
    	      this.metadata = defaults.metadata;
    	      this.minCpuPlatform = defaults.minCpuPlatform;
    	      this.nodeGroup = defaults.nodeGroup;
    	      this.oauthScopes = defaults.oauthScopes;
    	      this.preemptible = defaults.preemptible;
    	      this.reservationAffinity = defaults.reservationAffinity;
    	      this.resourceLabels = defaults.resourceLabels;
    	      this.resourceManagerTags = defaults.resourceManagerTags;
    	      this.sandboxConfig = defaults.sandboxConfig;
    	      this.secondaryBootDisks = defaults.secondaryBootDisks;
    	      this.serviceAccount = defaults.serviceAccount;
    	      this.shieldedInstanceConfig = defaults.shieldedInstanceConfig;
    	      this.soleTenantConfig = defaults.soleTenantConfig;
    	      this.spot = defaults.spot;
    	      this.tags = defaults.tags;
    	      this.taints = defaults.taints;
    	      this.workloadMetadataConfig = defaults.workloadMetadataConfig;
        }

        @CustomType.Setter
        public Builder advancedMachineFeatures(@Nullable NodePoolNodeConfigAdvancedMachineFeatures advancedMachineFeatures) {

            this.advancedMachineFeatures = advancedMachineFeatures;
            return this;
        }
        @CustomType.Setter
        public Builder bootDiskKmsKey(@Nullable String bootDiskKmsKey) {

            this.bootDiskKmsKey = bootDiskKmsKey;
            return this;
        }
        @CustomType.Setter
        public Builder confidentialNodes(@Nullable NodePoolNodeConfigConfidentialNodes confidentialNodes) {

            this.confidentialNodes = confidentialNodes;
            return this;
        }
        @CustomType.Setter
        public Builder containerdConfig(@Nullable NodePoolNodeConfigContainerdConfig containerdConfig) {

            this.containerdConfig = containerdConfig;
            return this;
        }
        @CustomType.Setter
        public Builder diskSizeGb(@Nullable Integer diskSizeGb) {

            this.diskSizeGb = diskSizeGb;
            return this;
        }
        @CustomType.Setter
        public Builder diskType(@Nullable String diskType) {

            this.diskType = diskType;
            return this;
        }
        @CustomType.Setter
        public Builder effectiveTaints(@Nullable List<NodePoolNodeConfigEffectiveTaint> effectiveTaints) {

            this.effectiveTaints = effectiveTaints;
            return this;
        }
        public Builder effectiveTaints(NodePoolNodeConfigEffectiveTaint... effectiveTaints) {
            return effectiveTaints(List.of(effectiveTaints));
        }
        @CustomType.Setter
        public Builder enableConfidentialStorage(@Nullable Boolean enableConfidentialStorage) {

            this.enableConfidentialStorage = enableConfidentialStorage;
            return this;
        }
        @CustomType.Setter
        public Builder ephemeralStorageConfig(@Nullable NodePoolNodeConfigEphemeralStorageConfig ephemeralStorageConfig) {

            this.ephemeralStorageConfig = ephemeralStorageConfig;
            return this;
        }
        @CustomType.Setter
        public Builder ephemeralStorageLocalSsdConfig(@Nullable NodePoolNodeConfigEphemeralStorageLocalSsdConfig ephemeralStorageLocalSsdConfig) {

            this.ephemeralStorageLocalSsdConfig = ephemeralStorageLocalSsdConfig;
            return this;
        }
        @CustomType.Setter
        public Builder fastSocket(@Nullable NodePoolNodeConfigFastSocket fastSocket) {

            this.fastSocket = fastSocket;
            return this;
        }
        @CustomType.Setter
        public Builder gcfsConfig(@Nullable NodePoolNodeConfigGcfsConfig gcfsConfig) {

            this.gcfsConfig = gcfsConfig;
            return this;
        }
        @CustomType.Setter
        public Builder guestAccelerators(@Nullable List<NodePoolNodeConfigGuestAccelerator> guestAccelerators) {

            this.guestAccelerators = guestAccelerators;
            return this;
        }
        public Builder guestAccelerators(NodePoolNodeConfigGuestAccelerator... guestAccelerators) {
            return guestAccelerators(List.of(guestAccelerators));
        }
        @CustomType.Setter
        public Builder gvnic(@Nullable NodePoolNodeConfigGvnic gvnic) {

            this.gvnic = gvnic;
            return this;
        }
        @CustomType.Setter
        public Builder hostMaintenancePolicy(@Nullable NodePoolNodeConfigHostMaintenancePolicy hostMaintenancePolicy) {

            this.hostMaintenancePolicy = hostMaintenancePolicy;
            return this;
        }
        @CustomType.Setter
        public Builder imageType(@Nullable String imageType) {

            this.imageType = imageType;
            return this;
        }
        @CustomType.Setter
        public Builder kubeletConfig(@Nullable NodePoolNodeConfigKubeletConfig kubeletConfig) {

            this.kubeletConfig = kubeletConfig;
            return this;
        }
        @CustomType.Setter
        public Builder labels(@Nullable Map<String,String> labels) {

            this.labels = labels;
            return this;
        }
        @CustomType.Setter
        public Builder linuxNodeConfig(@Nullable NodePoolNodeConfigLinuxNodeConfig linuxNodeConfig) {

            this.linuxNodeConfig = linuxNodeConfig;
            return this;
        }
        @CustomType.Setter
        public Builder localNvmeSsdBlockConfig(@Nullable NodePoolNodeConfigLocalNvmeSsdBlockConfig localNvmeSsdBlockConfig) {

            this.localNvmeSsdBlockConfig = localNvmeSsdBlockConfig;
            return this;
        }
        @CustomType.Setter
        public Builder localSsdCount(@Nullable Integer localSsdCount) {

            this.localSsdCount = localSsdCount;
            return this;
        }
        @CustomType.Setter
        public Builder loggingVariant(@Nullable String loggingVariant) {

            this.loggingVariant = loggingVariant;
            return this;
        }
        @CustomType.Setter
        public Builder machineType(@Nullable String machineType) {

            this.machineType = machineType;
            return this;
        }
        @CustomType.Setter
        public Builder metadata(@Nullable Map<String,String> metadata) {

            this.metadata = metadata;
            return this;
        }
        @CustomType.Setter
        public Builder minCpuPlatform(@Nullable String minCpuPlatform) {

            this.minCpuPlatform = minCpuPlatform;
            return this;
        }
        @CustomType.Setter
        public Builder nodeGroup(@Nullable String nodeGroup) {

            this.nodeGroup = nodeGroup;
            return this;
        }
        @CustomType.Setter
        public Builder oauthScopes(@Nullable List<String> oauthScopes) {

            this.oauthScopes = oauthScopes;
            return this;
        }
        public Builder oauthScopes(String... oauthScopes) {
            return oauthScopes(List.of(oauthScopes));
        }
        @CustomType.Setter
        public Builder preemptible(@Nullable Boolean preemptible) {

            this.preemptible = preemptible;
            return this;
        }
        @CustomType.Setter
        public Builder reservationAffinity(@Nullable NodePoolNodeConfigReservationAffinity reservationAffinity) {

            this.reservationAffinity = reservationAffinity;
            return this;
        }
        @CustomType.Setter
        public Builder resourceLabels(@Nullable Map<String,String> resourceLabels) {

            this.resourceLabels = resourceLabels;
            return this;
        }
        @CustomType.Setter
        public Builder resourceManagerTags(@Nullable Map<String,String> resourceManagerTags) {

            this.resourceManagerTags = resourceManagerTags;
            return this;
        }
        @CustomType.Setter
        public Builder sandboxConfig(@Nullable NodePoolNodeConfigSandboxConfig sandboxConfig) {

            this.sandboxConfig = sandboxConfig;
            return this;
        }
        @CustomType.Setter
        public Builder secondaryBootDisks(@Nullable List<NodePoolNodeConfigSecondaryBootDisk> secondaryBootDisks) {

            this.secondaryBootDisks = secondaryBootDisks;
            return this;
        }
        public Builder secondaryBootDisks(NodePoolNodeConfigSecondaryBootDisk... secondaryBootDisks) {
            return secondaryBootDisks(List.of(secondaryBootDisks));
        }
        @CustomType.Setter
        public Builder serviceAccount(@Nullable String serviceAccount) {

            this.serviceAccount = serviceAccount;
            return this;
        }
        @CustomType.Setter
        public Builder shieldedInstanceConfig(@Nullable NodePoolNodeConfigShieldedInstanceConfig shieldedInstanceConfig) {

            this.shieldedInstanceConfig = shieldedInstanceConfig;
            return this;
        }
        @CustomType.Setter
        public Builder soleTenantConfig(@Nullable NodePoolNodeConfigSoleTenantConfig soleTenantConfig) {

            this.soleTenantConfig = soleTenantConfig;
            return this;
        }
        @CustomType.Setter
        public Builder spot(@Nullable Boolean spot) {

            this.spot = spot;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable List<String> tags) {

            this.tags = tags;
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder taints(@Nullable List<NodePoolNodeConfigTaint> taints) {

            this.taints = taints;
            return this;
        }
        public Builder taints(NodePoolNodeConfigTaint... taints) {
            return taints(List.of(taints));
        }
        @CustomType.Setter
        public Builder workloadMetadataConfig(@Nullable NodePoolNodeConfigWorkloadMetadataConfig workloadMetadataConfig) {

            this.workloadMetadataConfig = workloadMetadataConfig;
            return this;
        }
        public NodePoolNodeConfig build() {
            final var _resultValue = new NodePoolNodeConfig();
            _resultValue.advancedMachineFeatures = advancedMachineFeatures;
            _resultValue.bootDiskKmsKey = bootDiskKmsKey;
            _resultValue.confidentialNodes = confidentialNodes;
            _resultValue.containerdConfig = containerdConfig;
            _resultValue.diskSizeGb = diskSizeGb;
            _resultValue.diskType = diskType;
            _resultValue.effectiveTaints = effectiveTaints;
            _resultValue.enableConfidentialStorage = enableConfidentialStorage;
            _resultValue.ephemeralStorageConfig = ephemeralStorageConfig;
            _resultValue.ephemeralStorageLocalSsdConfig = ephemeralStorageLocalSsdConfig;
            _resultValue.fastSocket = fastSocket;
            _resultValue.gcfsConfig = gcfsConfig;
            _resultValue.guestAccelerators = guestAccelerators;
            _resultValue.gvnic = gvnic;
            _resultValue.hostMaintenancePolicy = hostMaintenancePolicy;
            _resultValue.imageType = imageType;
            _resultValue.kubeletConfig = kubeletConfig;
            _resultValue.labels = labels;
            _resultValue.linuxNodeConfig = linuxNodeConfig;
            _resultValue.localNvmeSsdBlockConfig = localNvmeSsdBlockConfig;
            _resultValue.localSsdCount = localSsdCount;
            _resultValue.loggingVariant = loggingVariant;
            _resultValue.machineType = machineType;
            _resultValue.metadata = metadata;
            _resultValue.minCpuPlatform = minCpuPlatform;
            _resultValue.nodeGroup = nodeGroup;
            _resultValue.oauthScopes = oauthScopes;
            _resultValue.preemptible = preemptible;
            _resultValue.reservationAffinity = reservationAffinity;
            _resultValue.resourceLabels = resourceLabels;
            _resultValue.resourceManagerTags = resourceManagerTags;
            _resultValue.sandboxConfig = sandboxConfig;
            _resultValue.secondaryBootDisks = secondaryBootDisks;
            _resultValue.serviceAccount = serviceAccount;
            _resultValue.shieldedInstanceConfig = shieldedInstanceConfig;
            _resultValue.soleTenantConfig = soleTenantConfig;
            _resultValue.spot = spot;
            _resultValue.tags = tags;
            _resultValue.taints = taints;
            _resultValue.workloadMetadataConfig = workloadMetadataConfig;
            return _resultValue;
        }
    }
}
