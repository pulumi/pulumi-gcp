// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataproc.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MetastoreServiceScalingConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final MetastoreServiceScalingConfigArgs Empty = new MetastoreServiceScalingConfigArgs();

    /**
     * Metastore instance sizes.
     * Possible values are: `EXTRA_SMALL`, `SMALL`, `MEDIUM`, `LARGE`, `EXTRA_LARGE`.
     * 
     */
    @Import(name="instanceSize")
    private @Nullable Output<String> instanceSize;

    /**
     * @return Metastore instance sizes.
     * Possible values are: `EXTRA_SMALL`, `SMALL`, `MEDIUM`, `LARGE`, `EXTRA_LARGE`.
     * 
     */
    public Optional<Output<String>> instanceSize() {
        return Optional.ofNullable(this.instanceSize);
    }

    /**
     * Scaling factor, in increments of 0.1 for values less than 1.0, and increments of 1.0 for values greater than 1.0.
     * 
     */
    @Import(name="scalingFactor")
    private @Nullable Output<Double> scalingFactor;

    /**
     * @return Scaling factor, in increments of 0.1 for values less than 1.0, and increments of 1.0 for values greater than 1.0.
     * 
     */
    public Optional<Output<Double>> scalingFactor() {
        return Optional.ofNullable(this.scalingFactor);
    }

    private MetastoreServiceScalingConfigArgs() {}

    private MetastoreServiceScalingConfigArgs(MetastoreServiceScalingConfigArgs $) {
        this.instanceSize = $.instanceSize;
        this.scalingFactor = $.scalingFactor;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MetastoreServiceScalingConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MetastoreServiceScalingConfigArgs $;

        public Builder() {
            $ = new MetastoreServiceScalingConfigArgs();
        }

        public Builder(MetastoreServiceScalingConfigArgs defaults) {
            $ = new MetastoreServiceScalingConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param instanceSize Metastore instance sizes.
         * Possible values are: `EXTRA_SMALL`, `SMALL`, `MEDIUM`, `LARGE`, `EXTRA_LARGE`.
         * 
         * @return builder
         * 
         */
        public Builder instanceSize(@Nullable Output<String> instanceSize) {
            $.instanceSize = instanceSize;
            return this;
        }

        /**
         * @param instanceSize Metastore instance sizes.
         * Possible values are: `EXTRA_SMALL`, `SMALL`, `MEDIUM`, `LARGE`, `EXTRA_LARGE`.
         * 
         * @return builder
         * 
         */
        public Builder instanceSize(String instanceSize) {
            return instanceSize(Output.of(instanceSize));
        }

        /**
         * @param scalingFactor Scaling factor, in increments of 0.1 for values less than 1.0, and increments of 1.0 for values greater than 1.0.
         * 
         * @return builder
         * 
         */
        public Builder scalingFactor(@Nullable Output<Double> scalingFactor) {
            $.scalingFactor = scalingFactor;
            return this;
        }

        /**
         * @param scalingFactor Scaling factor, in increments of 0.1 for values less than 1.0, and increments of 1.0 for values greater than 1.0.
         * 
         * @return builder
         * 
         */
        public Builder scalingFactor(Double scalingFactor) {
            return scalingFactor(Output.of(scalingFactor));
        }

        public MetastoreServiceScalingConfigArgs build() {
            return $;
        }
    }

}
