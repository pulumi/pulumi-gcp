// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.container.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.container.outputs.NodePoolNodeConfigGuestAcceleratorGpuDriverInstallationConfig;
import com.pulumi.gcp.container.outputs.NodePoolNodeConfigGuestAcceleratorGpuSharingConfig;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class NodePoolNodeConfigGuestAccelerator {
    /**
     * @return The number of the accelerator cards exposed to an instance.
     * 
     */
    private Integer count;
    /**
     * @return Configuration for auto installation of GPU driver.
     * 
     */
    private @Nullable NodePoolNodeConfigGuestAcceleratorGpuDriverInstallationConfig gpuDriverInstallationConfig;
    /**
     * @return Size of partitions to create on the GPU. Valid values are described in the NVIDIA mig user guide (https://docs.nvidia.com/datacenter/tesla/mig-user-guide/#partitioning)
     * 
     */
    private @Nullable String gpuPartitionSize;
    /**
     * @return Configuration for GPU sharing.
     * 
     */
    private @Nullable NodePoolNodeConfigGuestAcceleratorGpuSharingConfig gpuSharingConfig;
    /**
     * @return The type of the policy. Supports a single value: COMPACT.
     * Specifying COMPACT placement policy type places node pool&#39;s nodes in a closer
     * physical proximity in order to reduce network latency between nodes.
     * 
     */
    private String type;

    private NodePoolNodeConfigGuestAccelerator() {}
    /**
     * @return The number of the accelerator cards exposed to an instance.
     * 
     */
    public Integer count() {
        return this.count;
    }
    /**
     * @return Configuration for auto installation of GPU driver.
     * 
     */
    public Optional<NodePoolNodeConfigGuestAcceleratorGpuDriverInstallationConfig> gpuDriverInstallationConfig() {
        return Optional.ofNullable(this.gpuDriverInstallationConfig);
    }
    /**
     * @return Size of partitions to create on the GPU. Valid values are described in the NVIDIA mig user guide (https://docs.nvidia.com/datacenter/tesla/mig-user-guide/#partitioning)
     * 
     */
    public Optional<String> gpuPartitionSize() {
        return Optional.ofNullable(this.gpuPartitionSize);
    }
    /**
     * @return Configuration for GPU sharing.
     * 
     */
    public Optional<NodePoolNodeConfigGuestAcceleratorGpuSharingConfig> gpuSharingConfig() {
        return Optional.ofNullable(this.gpuSharingConfig);
    }
    /**
     * @return The type of the policy. Supports a single value: COMPACT.
     * Specifying COMPACT placement policy type places node pool&#39;s nodes in a closer
     * physical proximity in order to reduce network latency between nodes.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NodePoolNodeConfigGuestAccelerator defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer count;
        private @Nullable NodePoolNodeConfigGuestAcceleratorGpuDriverInstallationConfig gpuDriverInstallationConfig;
        private @Nullable String gpuPartitionSize;
        private @Nullable NodePoolNodeConfigGuestAcceleratorGpuSharingConfig gpuSharingConfig;
        private String type;
        public Builder() {}
        public Builder(NodePoolNodeConfigGuestAccelerator defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.count = defaults.count;
    	      this.gpuDriverInstallationConfig = defaults.gpuDriverInstallationConfig;
    	      this.gpuPartitionSize = defaults.gpuPartitionSize;
    	      this.gpuSharingConfig = defaults.gpuSharingConfig;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder count(Integer count) {
            if (count == null) {
              throw new MissingRequiredPropertyException("NodePoolNodeConfigGuestAccelerator", "count");
            }
            this.count = count;
            return this;
        }
        @CustomType.Setter
        public Builder gpuDriverInstallationConfig(@Nullable NodePoolNodeConfigGuestAcceleratorGpuDriverInstallationConfig gpuDriverInstallationConfig) {

            this.gpuDriverInstallationConfig = gpuDriverInstallationConfig;
            return this;
        }
        @CustomType.Setter
        public Builder gpuPartitionSize(@Nullable String gpuPartitionSize) {

            this.gpuPartitionSize = gpuPartitionSize;
            return this;
        }
        @CustomType.Setter
        public Builder gpuSharingConfig(@Nullable NodePoolNodeConfigGuestAcceleratorGpuSharingConfig gpuSharingConfig) {

            this.gpuSharingConfig = gpuSharingConfig;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("NodePoolNodeConfigGuestAccelerator", "type");
            }
            this.type = type;
            return this;
        }
        public NodePoolNodeConfigGuestAccelerator build() {
            final var _resultValue = new NodePoolNodeConfigGuestAccelerator();
            _resultValue.count = count;
            _resultValue.gpuDriverInstallationConfig = gpuDriverInstallationConfig;
            _resultValue.gpuPartitionSize = gpuPartitionSize;
            _resultValue.gpuSharingConfig = gpuSharingConfig;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
