// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.firebase;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DatabaseInstanceArgs extends com.pulumi.resources.ResourceArgs {

    public static final DatabaseInstanceArgs Empty = new DatabaseInstanceArgs();

    /**
     * The intended database state.
     * 
     */
    @Import(name="desiredState")
    private @Nullable Output<String> desiredState;

    /**
     * @return The intended database state.
     * 
     */
    public Optional<Output<String>> desiredState() {
        return Optional.ofNullable(this.desiredState);
    }

    /**
     * The globally unique identifier of the Firebase Realtime Database instance.
     * Instance IDs cannot be reused after deletion.
     * 
     */
    @Import(name="instanceId", required=true)
    private Output<String> instanceId;

    /**
     * @return The globally unique identifier of the Firebase Realtime Database instance.
     * Instance IDs cannot be reused after deletion.
     * 
     */
    public Output<String> instanceId() {
        return this.instanceId;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * A reference to the region where the Firebase Realtime database resides.
     * 
     */
    @Import(name="region", required=true)
    private Output<String> region;

    /**
     * @return A reference to the region where the Firebase Realtime database resides.
     * 
     */
    public Output<String> region() {
        return this.region;
    }

    /**
     * The database type.
     * Each project can create one default Firebase Realtime Database, which cannot be deleted once created.
     * Creating user Databases is only available for projects on the Blaze plan.
     * Projects can be upgraded using the Cloud Billing API https://cloud.google.com/billing/reference/rest/v1/projects/updateBillingInfo.
     * Default value is `USER_DATABASE`.
     * Possible values are `DEFAULT_DATABASE` and `USER_DATABASE`.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The database type.
     * Each project can create one default Firebase Realtime Database, which cannot be deleted once created.
     * Creating user Databases is only available for projects on the Blaze plan.
     * Projects can be upgraded using the Cloud Billing API https://cloud.google.com/billing/reference/rest/v1/projects/updateBillingInfo.
     * Default value is `USER_DATABASE`.
     * Possible values are `DEFAULT_DATABASE` and `USER_DATABASE`.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private DatabaseInstanceArgs() {}

    private DatabaseInstanceArgs(DatabaseInstanceArgs $) {
        this.desiredState = $.desiredState;
        this.instanceId = $.instanceId;
        this.project = $.project;
        this.region = $.region;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatabaseInstanceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatabaseInstanceArgs $;

        public Builder() {
            $ = new DatabaseInstanceArgs();
        }

        public Builder(DatabaseInstanceArgs defaults) {
            $ = new DatabaseInstanceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param desiredState The intended database state.
         * 
         * @return builder
         * 
         */
        public Builder desiredState(@Nullable Output<String> desiredState) {
            $.desiredState = desiredState;
            return this;
        }

        /**
         * @param desiredState The intended database state.
         * 
         * @return builder
         * 
         */
        public Builder desiredState(String desiredState) {
            return desiredState(Output.of(desiredState));
        }

        /**
         * @param instanceId The globally unique identifier of the Firebase Realtime Database instance.
         * Instance IDs cannot be reused after deletion.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(Output<String> instanceId) {
            $.instanceId = instanceId;
            return this;
        }

        /**
         * @param instanceId The globally unique identifier of the Firebase Realtime Database instance.
         * Instance IDs cannot be reused after deletion.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(String instanceId) {
            return instanceId(Output.of(instanceId));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param region A reference to the region where the Firebase Realtime database resides.
         * 
         * @return builder
         * 
         */
        public Builder region(Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region A reference to the region where the Firebase Realtime database resides.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param type The database type.
         * Each project can create one default Firebase Realtime Database, which cannot be deleted once created.
         * Creating user Databases is only available for projects on the Blaze plan.
         * Projects can be upgraded using the Cloud Billing API https://cloud.google.com/billing/reference/rest/v1/projects/updateBillingInfo.
         * Default value is `USER_DATABASE`.
         * Possible values are `DEFAULT_DATABASE` and `USER_DATABASE`.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The database type.
         * Each project can create one default Firebase Realtime Database, which cannot be deleted once created.
         * Creating user Databases is only available for projects on the Blaze plan.
         * Projects can be upgraded using the Cloud Billing API https://cloud.google.com/billing/reference/rest/v1/projects/updateBillingInfo.
         * Default value is `USER_DATABASE`.
         * Possible values are `DEFAULT_DATABASE` and `USER_DATABASE`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public DatabaseInstanceArgs build() {
            $.instanceId = Objects.requireNonNull($.instanceId, "expected parameter 'instanceId' to be non-null");
            $.region = Objects.requireNonNull($.region, "expected parameter 'region' to be non-null");
            return $;
        }
    }

}
