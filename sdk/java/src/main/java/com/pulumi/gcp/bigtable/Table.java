// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.bigtable;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.bigtable.TableArgs;
import com.pulumi.gcp.bigtable.inputs.TableState;
import com.pulumi.gcp.bigtable.outputs.TableAutomatedBackupPolicy;
import com.pulumi.gcp.bigtable.outputs.TableColumnFamily;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Creates a Google Cloud Bigtable table inside an instance. For more information see
 * [the official documentation](https://cloud.google.com/bigtable/) and
 * [API](https://cloud.google.com/bigtable/docs/go/reference).
 * 
 * ## Example Usage
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.bigtable.Instance;
 * import com.pulumi.gcp.bigtable.InstanceArgs;
 * import com.pulumi.gcp.bigtable.inputs.InstanceClusterArgs;
 * import com.pulumi.gcp.bigtable.Table;
 * import com.pulumi.gcp.bigtable.TableArgs;
 * import com.pulumi.gcp.bigtable.inputs.TableColumnFamilyArgs;
 * import com.pulumi.gcp.bigtable.inputs.TableAutomatedBackupPolicyArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var instance = new Instance("instance", InstanceArgs.builder()
 *             .name("tf-instance")
 *             .clusters(InstanceClusterArgs.builder()
 *                 .clusterId("tf-instance-cluster")
 *                 .zone("us-central1-b")
 *                 .numNodes(3)
 *                 .storageType("HDD")
 *                 .build())
 *             .build());
 * 
 *         var table = new Table("table", TableArgs.builder()
 *             .name("tf-table")
 *             .instanceName(instance.name())
 *             .splitKeys(            
 *                 "a",
 *                 "b",
 *                 "c")
 *             .columnFamilies(            
 *                 TableColumnFamilyArgs.builder()
 *                     .family("family-first")
 *                     .build(),
 *                 TableColumnFamilyArgs.builder()
 *                     .family("family-second")
 *                     .type("intsum")
 *                     .build(),
 *                 TableColumnFamilyArgs.builder()
 *                     .family("family-third")
 *                     .type("""
 *         {
 * 					"aggregateType": {
 * 						"max": {},
 * 						"inputType": {
 * 							"int64Type": {
 * 								"encoding": {
 * 									"bigEndianBytes": {}
 * 								}
 * 							}
 * 						}
 * 					}
 * 				}
 *                     """)
 *                     .build())
 *             .changeStreamRetention("24h0m0s")
 *             .automatedBackupPolicy(TableAutomatedBackupPolicyArgs.builder()
 *                 .retentionPeriod("72h0m0s")
 *                 .frequency("24h0m0s")
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * -&gt; **Fields affected by import** The following fields can&#39;t be read and will show diffs if set in config when imported: `split_keys`
 * 
 * Bigtable Tables can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/instances/{{instance_name}}/tables/{{name}}`
 * 
 * * `{{project}}/{{instance_name}}/{{name}}`
 * 
 * * `{{instance_name}}/{{name}}`
 * 
 * When using the `pulumi import` command, Bigtable Tables can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:bigtable/table:Table default projects/{{project}}/instances/{{instance_name}}/tables/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:bigtable/table:Table default {{project}}/{{instance_name}}/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:bigtable/table:Table default {{instance_name}}/{{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:bigtable/table:Table")
public class Table extends com.pulumi.resources.CustomResource {
    /**
     * Defines an automated backup policy for a table, specified by Retention Period and Frequency. To _create_ a table with automated backup disabled, either omit the automated_backup_policy argument, or set both Retention Period and Frequency properties to &#34;0&#34;. To disable automated backup on an _existing_ table that has automated backup enabled, set _both_ Retention Period and Frequency properties to &#34;0&#34;. When updating an existing table, to modify the Retention Period or Frequency properties of the resource&#39;s automated backup policy, set the respective property to a non-zero value. If the automated_backup_policy argument is not provided in the configuration on update, the resource&#39;s automated backup policy will _not_ be modified.
     * 
     * ***
     * 
     */
    @Export(name="automatedBackupPolicy", refs={TableAutomatedBackupPolicy.class}, tree="[0]")
    private Output<TableAutomatedBackupPolicy> automatedBackupPolicy;

    /**
     * @return Defines an automated backup policy for a table, specified by Retention Period and Frequency. To _create_ a table with automated backup disabled, either omit the automated_backup_policy argument, or set both Retention Period and Frequency properties to &#34;0&#34;. To disable automated backup on an _existing_ table that has automated backup enabled, set _both_ Retention Period and Frequency properties to &#34;0&#34;. When updating an existing table, to modify the Retention Period or Frequency properties of the resource&#39;s automated backup policy, set the respective property to a non-zero value. If the automated_backup_policy argument is not provided in the configuration on update, the resource&#39;s automated backup policy will _not_ be modified.
     * 
     * ***
     * 
     */
    public Output<TableAutomatedBackupPolicy> automatedBackupPolicy() {
        return this.automatedBackupPolicy;
    }
    /**
     * Duration to retain change stream data for the table. Set to 0 to disable. Must be between 1 and 7 days.
     * 
     */
    @Export(name="changeStreamRetention", refs={String.class}, tree="[0]")
    private Output<String> changeStreamRetention;

    /**
     * @return Duration to retain change stream data for the table. Set to 0 to disable. Must be between 1 and 7 days.
     * 
     */
    public Output<String> changeStreamRetention() {
        return this.changeStreamRetention;
    }
    /**
     * A group of columns within a table which share a common configuration. This can be specified multiple times. Structure is documented below.
     * 
     */
    @Export(name="columnFamilies", refs={List.class,TableColumnFamily.class}, tree="[0,1]")
    private Output</* @Nullable */ List<TableColumnFamily>> columnFamilies;

    /**
     * @return A group of columns within a table which share a common configuration. This can be specified multiple times. Structure is documented below.
     * 
     */
    public Output<Optional<List<TableColumnFamily>>> columnFamilies() {
        return Codegen.optional(this.columnFamilies);
    }
    /**
     * A field to make the table protected against data loss i.e. when set to PROTECTED, deleting the table, the column families in the table, and the instance containing the table would be prohibited. If not provided, deletion protection will be set to UNPROTECTED.
     * 
     */
    @Export(name="deletionProtection", refs={String.class}, tree="[0]")
    private Output<String> deletionProtection;

    /**
     * @return A field to make the table protected against data loss i.e. when set to PROTECTED, deleting the table, the column families in the table, and the instance containing the table would be prohibited. If not provided, deletion protection will be set to UNPROTECTED.
     * 
     */
    public Output<String> deletionProtection() {
        return this.deletionProtection;
    }
    /**
     * The name of the Bigtable instance.
     * 
     */
    @Export(name="instanceName", refs={String.class}, tree="[0]")
    private Output<String> instanceName;

    /**
     * @return The name of the Bigtable instance.
     * 
     */
    public Output<String> instanceName() {
        return this.instanceName;
    }
    /**
     * The name of the table. Must be 1-50 characters and must only contain hyphens, underscores, periods, letters and numbers.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the table. Must be 1-50 characters and must only contain hyphens, underscores, periods, letters and numbers.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The ID of the project in which the resource belongs. If it
     * is not provided, the provider project is used.
     * 
     */
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs. If it
     * is not provided, the provider project is used.
     * 
     */
    public Output<String> project() {
        return this.project;
    }
    /**
     * Defines the row key schema of a table. To create or update a table with a row key schema, specify this argument.
     * 					Note that in-place update is not supported, and any in-place modification to the schema will lead to failure.
     * 				    To update a schema, please clear it (by omitting the field), and update the resource again with a new schema.\n
     * 
     *                     The schema must be a valid JSON encoded string representing a Type&#39;s struct protobuf message. Note that for bytes sequence (like delimited_bytes.delimiter)
     *                     the delimiter must be base64 encoded. For example, if you want to set a delimiter to a single byte character &#34;#&#34;, it should be set to &#34;Iw==&#34;, which is the base64 encoding of the byte sequence &#34;#&#34;.
     * 
     */
    @Export(name="rowKeySchema", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> rowKeySchema;

    /**
     * @return Defines the row key schema of a table. To create or update a table with a row key schema, specify this argument.
     * 					Note that in-place update is not supported, and any in-place modification to the schema will lead to failure.
     * 				    To update a schema, please clear it (by omitting the field), and update the resource again with a new schema.\n
     * 
     *                     The schema must be a valid JSON encoded string representing a Type&#39;s struct protobuf message. Note that for bytes sequence (like delimited_bytes.delimiter)
     *                     the delimiter must be base64 encoded. For example, if you want to set a delimiter to a single byte character &#34;#&#34;, it should be set to &#34;Iw==&#34;, which is the base64 encoding of the byte sequence &#34;#&#34;.
     * 
     */
    public Output<Optional<String>> rowKeySchema() {
        return Codegen.optional(this.rowKeySchema);
    }
    /**
     * A list of predefined keys to split the table on.
     * !&gt; **Warning:** Modifying the `split_keys` of an existing table will cause the provider
     * to delete/recreate the entire `gcp.bigtable.Table` resource.
     * 
     */
    @Export(name="splitKeys", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> splitKeys;

    /**
     * @return A list of predefined keys to split the table on.
     * !&gt; **Warning:** Modifying the `split_keys` of an existing table will cause the provider
     * to delete/recreate the entire `gcp.bigtable.Table` resource.
     * 
     */
    public Output<Optional<List<String>>> splitKeys() {
        return Codegen.optional(this.splitKeys);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Table(java.lang.String name) {
        this(name, TableArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Table(java.lang.String name, TableArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Table(java.lang.String name, TableArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:bigtable/table:Table", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Table(java.lang.String name, Output<java.lang.String> id, @Nullable TableState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:bigtable/table:Table", name, state, makeResourceOptions(options, id), false);
    }

    private static TableArgs makeArgs(TableArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? TableArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Table get(java.lang.String name, Output<java.lang.String> id, @Nullable TableState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Table(name, id, state, options);
    }
}
