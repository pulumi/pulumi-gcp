// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.networksecurity.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.networksecurity.outputs.AuthzPolicyHttpRuleFromNotSource;
import com.pulumi.gcp.networksecurity.outputs.AuthzPolicyHttpRuleFromSource;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class AuthzPolicyHttpRuleFrom {
    /**
     * @return Describes the properties of a request&#39;s sources. At least one of sources or notSources must be specified. Limited to 5 sources. A match occurs when ANY source (in sources or notSources) matches the request. Within a single source, the match follows AND semantics across fields and OR semantics within a single field, i.e. a match occurs when ANY principal matches AND ANY ipBlocks match.
     * Structure is documented below.
     * 
     */
    private @Nullable List<AuthzPolicyHttpRuleFromNotSource> notSources;
    /**
     * @return Describes the properties of a request&#39;s sources. At least one of sources or notSources must be specified. Limited to 5 sources. A match occurs when ANY source (in sources or notSources) matches the request. Within a single source, the match follows AND semantics across fields and OR semantics within a single field, i.e. a match occurs when ANY principal matches AND ANY ipBlocks match.
     * Structure is documented below.
     * 
     */
    private @Nullable List<AuthzPolicyHttpRuleFromSource> sources;

    private AuthzPolicyHttpRuleFrom() {}
    /**
     * @return Describes the properties of a request&#39;s sources. At least one of sources or notSources must be specified. Limited to 5 sources. A match occurs when ANY source (in sources or notSources) matches the request. Within a single source, the match follows AND semantics across fields and OR semantics within a single field, i.e. a match occurs when ANY principal matches AND ANY ipBlocks match.
     * Structure is documented below.
     * 
     */
    public List<AuthzPolicyHttpRuleFromNotSource> notSources() {
        return this.notSources == null ? List.of() : this.notSources;
    }
    /**
     * @return Describes the properties of a request&#39;s sources. At least one of sources or notSources must be specified. Limited to 5 sources. A match occurs when ANY source (in sources or notSources) matches the request. Within a single source, the match follows AND semantics across fields and OR semantics within a single field, i.e. a match occurs when ANY principal matches AND ANY ipBlocks match.
     * Structure is documented below.
     * 
     */
    public List<AuthzPolicyHttpRuleFromSource> sources() {
        return this.sources == null ? List.of() : this.sources;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AuthzPolicyHttpRuleFrom defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<AuthzPolicyHttpRuleFromNotSource> notSources;
        private @Nullable List<AuthzPolicyHttpRuleFromSource> sources;
        public Builder() {}
        public Builder(AuthzPolicyHttpRuleFrom defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.notSources = defaults.notSources;
    	      this.sources = defaults.sources;
        }

        @CustomType.Setter
        public Builder notSources(@Nullable List<AuthzPolicyHttpRuleFromNotSource> notSources) {

            this.notSources = notSources;
            return this;
        }
        public Builder notSources(AuthzPolicyHttpRuleFromNotSource... notSources) {
            return notSources(List.of(notSources));
        }
        @CustomType.Setter
        public Builder sources(@Nullable List<AuthzPolicyHttpRuleFromSource> sources) {

            this.sources = sources;
            return this;
        }
        public Builder sources(AuthzPolicyHttpRuleFromSource... sources) {
            return sources(List.of(sources));
        }
        public AuthzPolicyHttpRuleFrom build() {
            final var _resultValue = new AuthzPolicyHttpRuleFrom();
            _resultValue.notSources = notSources;
            _resultValue.sources = sources;
            return _resultValue;
        }
    }
}
