// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class NodeTemplateServerBindingArgs extends com.pulumi.resources.ResourceArgs {

    public static final NodeTemplateServerBindingArgs Empty = new NodeTemplateServerBindingArgs();

    /**
     * Type of server binding policy. If `RESTART_NODE_ON_ANY_SERVER`,
     * nodes using this template will restart on any physical server
     * following a maintenance event.
     * If `RESTART_NODE_ON_MINIMAL_SERVER`, nodes using this template
     * will restart on the same physical server following a maintenance
     * event, instead of being live migrated to or restarted on a new
     * physical server. This option may be useful if you are using
     * software licenses tied to the underlying server characteristics
     * such as physical sockets or cores, to avoid the need for
     * additional licenses when maintenance occurs. However, VMs on such
     * nodes will experience outages while maintenance is applied.
     * Possible values are `RESTART_NODE_ON_ANY_SERVER` and `RESTART_NODE_ON_MINIMAL_SERVERS`.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Type of server binding policy. If `RESTART_NODE_ON_ANY_SERVER`,
     * nodes using this template will restart on any physical server
     * following a maintenance event.
     * If `RESTART_NODE_ON_MINIMAL_SERVER`, nodes using this template
     * will restart on the same physical server following a maintenance
     * event, instead of being live migrated to or restarted on a new
     * physical server. This option may be useful if you are using
     * software licenses tied to the underlying server characteristics
     * such as physical sockets or cores, to avoid the need for
     * additional licenses when maintenance occurs. However, VMs on such
     * nodes will experience outages while maintenance is applied.
     * Possible values are `RESTART_NODE_ON_ANY_SERVER` and `RESTART_NODE_ON_MINIMAL_SERVERS`.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private NodeTemplateServerBindingArgs() {}

    private NodeTemplateServerBindingArgs(NodeTemplateServerBindingArgs $) {
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NodeTemplateServerBindingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NodeTemplateServerBindingArgs $;

        public Builder() {
            $ = new NodeTemplateServerBindingArgs();
        }

        public Builder(NodeTemplateServerBindingArgs defaults) {
            $ = new NodeTemplateServerBindingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param type Type of server binding policy. If `RESTART_NODE_ON_ANY_SERVER`,
         * nodes using this template will restart on any physical server
         * following a maintenance event.
         * If `RESTART_NODE_ON_MINIMAL_SERVER`, nodes using this template
         * will restart on the same physical server following a maintenance
         * event, instead of being live migrated to or restarted on a new
         * physical server. This option may be useful if you are using
         * software licenses tied to the underlying server characteristics
         * such as physical sockets or cores, to avoid the need for
         * additional licenses when maintenance occurs. However, VMs on such
         * nodes will experience outages while maintenance is applied.
         * Possible values are `RESTART_NODE_ON_ANY_SERVER` and `RESTART_NODE_ON_MINIMAL_SERVERS`.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of server binding policy. If `RESTART_NODE_ON_ANY_SERVER`,
         * nodes using this template will restart on any physical server
         * following a maintenance event.
         * If `RESTART_NODE_ON_MINIMAL_SERVER`, nodes using this template
         * will restart on the same physical server following a maintenance
         * event, instead of being live migrated to or restarted on a new
         * physical server. This option may be useful if you are using
         * software licenses tied to the underlying server characteristics
         * such as physical sockets or cores, to avoid the need for
         * additional licenses when maintenance occurs. However, VMs on such
         * nodes will experience outages while maintenance is applied.
         * Possible values are `RESTART_NODE_ON_ANY_SERVER` and `RESTART_NODE_ON_MINIMAL_SERVERS`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public NodeTemplateServerBindingArgs build() {
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
