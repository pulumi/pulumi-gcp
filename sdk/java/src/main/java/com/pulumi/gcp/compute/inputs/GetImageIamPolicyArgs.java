// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetImageIamPolicyArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetImageIamPolicyArgs Empty = new GetImageIamPolicyArgs();

    /**
     * Used to find the parent resource to bind the IAM policy to
     * 
     */
    @Import(name="image", required=true)
    private Output<String> image;

    /**
     * @return Used to find the parent resource to bind the IAM policy to
     * 
     */
    public Output<String> image() {
        return this.image;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    private GetImageIamPolicyArgs() {}

    private GetImageIamPolicyArgs(GetImageIamPolicyArgs $) {
        this.image = $.image;
        this.project = $.project;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetImageIamPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetImageIamPolicyArgs $;

        public Builder() {
            $ = new GetImageIamPolicyArgs();
        }

        public Builder(GetImageIamPolicyArgs defaults) {
            $ = new GetImageIamPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param image Used to find the parent resource to bind the IAM policy to
         * 
         * @return builder
         * 
         */
        public Builder image(Output<String> image) {
            $.image = image;
            return this;
        }

        /**
         * @param image Used to find the parent resource to bind the IAM policy to
         * 
         * @return builder
         * 
         */
        public Builder image(String image) {
            return image(Output.of(image));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        public GetImageIamPolicyArgs build() {
            if ($.image == null) {
                throw new MissingRequiredPropertyException("GetImageIamPolicyArgs", "image");
            }
            return $;
        }
    }

}
