// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.bigqueryanalyticshub;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.bigqueryanalyticshub.inputs.ListingSubscriptionDestinationDatasetArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ListingSubscriptionArgs extends com.pulumi.resources.ResourceArgs {

    public static final ListingSubscriptionArgs Empty = new ListingSubscriptionArgs();

    /**
     * The ID of the data exchange. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.
     * 
     */
    @Import(name="dataExchangeId", required=true)
    private Output<String> dataExchangeId;

    /**
     * @return The ID of the data exchange. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.
     * 
     */
    public Output<String> dataExchangeId() {
        return this.dataExchangeId;
    }

    /**
     * The destination dataset for this subscription.
     * Structure is documented below.
     * 
     */
    @Import(name="destinationDataset", required=true)
    private Output<ListingSubscriptionDestinationDatasetArgs> destinationDataset;

    /**
     * @return The destination dataset for this subscription.
     * Structure is documented below.
     * 
     */
    public Output<ListingSubscriptionDestinationDatasetArgs> destinationDataset() {
        return this.destinationDataset;
    }

    /**
     * The ID of the listing. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.
     * 
     */
    @Import(name="listingId", required=true)
    private Output<String> listingId;

    /**
     * @return The ID of the listing. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.
     * 
     */
    public Output<String> listingId() {
        return this.listingId;
    }

    /**
     * The name of the location of the data exchange. Distinct from the location of the destination data set.
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return The name of the location of the data exchange. Distinct from the location of the destination data set.
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    @Import(name="project")
    private @Nullable Output<String> project;

    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    private ListingSubscriptionArgs() {}

    private ListingSubscriptionArgs(ListingSubscriptionArgs $) {
        this.dataExchangeId = $.dataExchangeId;
        this.destinationDataset = $.destinationDataset;
        this.listingId = $.listingId;
        this.location = $.location;
        this.project = $.project;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ListingSubscriptionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ListingSubscriptionArgs $;

        public Builder() {
            $ = new ListingSubscriptionArgs();
        }

        public Builder(ListingSubscriptionArgs defaults) {
            $ = new ListingSubscriptionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dataExchangeId The ID of the data exchange. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.
         * 
         * @return builder
         * 
         */
        public Builder dataExchangeId(Output<String> dataExchangeId) {
            $.dataExchangeId = dataExchangeId;
            return this;
        }

        /**
         * @param dataExchangeId The ID of the data exchange. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.
         * 
         * @return builder
         * 
         */
        public Builder dataExchangeId(String dataExchangeId) {
            return dataExchangeId(Output.of(dataExchangeId));
        }

        /**
         * @param destinationDataset The destination dataset for this subscription.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder destinationDataset(Output<ListingSubscriptionDestinationDatasetArgs> destinationDataset) {
            $.destinationDataset = destinationDataset;
            return this;
        }

        /**
         * @param destinationDataset The destination dataset for this subscription.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder destinationDataset(ListingSubscriptionDestinationDatasetArgs destinationDataset) {
            return destinationDataset(Output.of(destinationDataset));
        }

        /**
         * @param listingId The ID of the listing. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.
         * 
         * @return builder
         * 
         */
        public Builder listingId(Output<String> listingId) {
            $.listingId = listingId;
            return this;
        }

        /**
         * @param listingId The ID of the listing. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.
         * 
         * @return builder
         * 
         */
        public Builder listingId(String listingId) {
            return listingId(Output.of(listingId));
        }

        /**
         * @param location The name of the location of the data exchange. Distinct from the location of the destination data set.
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The name of the location of the data exchange. Distinct from the location of the destination data set.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        public Builder project(String project) {
            return project(Output.of(project));
        }

        public ListingSubscriptionArgs build() {
            if ($.dataExchangeId == null) {
                throw new MissingRequiredPropertyException("ListingSubscriptionArgs", "dataExchangeId");
            }
            if ($.destinationDataset == null) {
                throw new MissingRequiredPropertyException("ListingSubscriptionArgs", "destinationDataset");
            }
            if ($.listingId == null) {
                throw new MissingRequiredPropertyException("ListingSubscriptionArgs", "listingId");
            }
            if ($.location == null) {
                throw new MissingRequiredPropertyException("ListingSubscriptionArgs", "location");
            }
            return $;
        }
    }

}
