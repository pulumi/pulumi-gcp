// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.folder.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.folder.inputs.AccessApprovalSettingsEnrolledServiceArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AccessApprovalSettingsState extends com.pulumi.resources.ResourceArgs {

    public static final AccessApprovalSettingsState Empty = new AccessApprovalSettingsState();

    /**
     * The asymmetric crypto key version to use for signing approval requests.
     * Empty active_key_version indicates that a Google-managed key should be used for signing.
     * This property will be ignored if set by an ancestor of the resource, and new non-empty values may not be set.
     * 
     */
    @Import(name="activeKeyVersion")
    private @Nullable Output<String> activeKeyVersion;

    /**
     * @return The asymmetric crypto key version to use for signing approval requests.
     * Empty active_key_version indicates that a Google-managed key should be used for signing.
     * This property will be ignored if set by an ancestor of the resource, and new non-empty values may not be set.
     * 
     */
    public Optional<Output<String>> activeKeyVersion() {
        return Optional.ofNullable(this.activeKeyVersion);
    }

    /**
     * If the field is true, that indicates that an ancestor of this Folder has set active_key_version.
     * 
     */
    @Import(name="ancestorHasActiveKeyVersion")
    private @Nullable Output<Boolean> ancestorHasActiveKeyVersion;

    /**
     * @return If the field is true, that indicates that an ancestor of this Folder has set active_key_version.
     * 
     */
    public Optional<Output<Boolean>> ancestorHasActiveKeyVersion() {
        return Optional.ofNullable(this.ancestorHasActiveKeyVersion);
    }

    /**
     * If the field is true, that indicates that at least one service is enrolled for Access Approval in one or more ancestors of the Folder.
     * 
     */
    @Import(name="enrolledAncestor")
    private @Nullable Output<Boolean> enrolledAncestor;

    /**
     * @return If the field is true, that indicates that at least one service is enrolled for Access Approval in one or more ancestors of the Folder.
     * 
     */
    public Optional<Output<Boolean>> enrolledAncestor() {
        return Optional.ofNullable(this.enrolledAncestor);
    }

    /**
     * A list of Google Cloud Services for which the given resource has Access Approval enrolled.
     * Access requests for the resource given by name against any of these services contained here will be required
     * to have explicit approval. Enrollment can only be done on an all or nothing basis.
     * A maximum of 10 enrolled services will be enforced, to be expanded as the set of supported services is expanded.
     * Structure is documented below.
     * 
     */
    @Import(name="enrolledServices")
    private @Nullable Output<List<AccessApprovalSettingsEnrolledServiceArgs>> enrolledServices;

    /**
     * @return A list of Google Cloud Services for which the given resource has Access Approval enrolled.
     * Access requests for the resource given by name against any of these services contained here will be required
     * to have explicit approval. Enrollment can only be done on an all or nothing basis.
     * A maximum of 10 enrolled services will be enforced, to be expanded as the set of supported services is expanded.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<AccessApprovalSettingsEnrolledServiceArgs>>> enrolledServices() {
        return Optional.ofNullable(this.enrolledServices);
    }

    /**
     * ID of the folder of the access approval settings.
     * 
     */
    @Import(name="folderId")
    private @Nullable Output<String> folderId;

    /**
     * @return ID of the folder of the access approval settings.
     * 
     */
    public Optional<Output<String>> folderId() {
        return Optional.ofNullable(this.folderId);
    }

    /**
     * If the field is true, that indicates that there is some configuration issue with the active_key_version
     * configured on this Folder (e.g. it doesn&#39;t exist or the Access Approval service account doesn&#39;t have the
     * correct permissions on it, etc.) This key version is not necessarily the effective key version at this level,
     * as key versions are inherited top-down.
     * 
     */
    @Import(name="invalidKeyVersion")
    private @Nullable Output<Boolean> invalidKeyVersion;

    /**
     * @return If the field is true, that indicates that there is some configuration issue with the active_key_version
     * configured on this Folder (e.g. it doesn&#39;t exist or the Access Approval service account doesn&#39;t have the
     * correct permissions on it, etc.) This key version is not necessarily the effective key version at this level,
     * as key versions are inherited top-down.
     * 
     */
    public Optional<Output<Boolean>> invalidKeyVersion() {
        return Optional.ofNullable(this.invalidKeyVersion);
    }

    /**
     * The resource name of the settings. Format is &#34;folders/{folder_id}/accessApprovalSettings&#34;
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The resource name of the settings. Format is &#34;folders/{folder_id}/accessApprovalSettings&#34;
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * A list of email addresses to which notifications relating to approval requests should be sent.
     * Notifications relating to a resource will be sent to all emails in the settings of ancestor
     * resources of that resource. A maximum of 50 email addresses are allowed.
     * 
     */
    @Import(name="notificationEmails")
    private @Nullable Output<List<String>> notificationEmails;

    /**
     * @return A list of email addresses to which notifications relating to approval requests should be sent.
     * Notifications relating to a resource will be sent to all emails in the settings of ancestor
     * resources of that resource. A maximum of 50 email addresses are allowed.
     * 
     */
    public Optional<Output<List<String>>> notificationEmails() {
        return Optional.ofNullable(this.notificationEmails);
    }

    private AccessApprovalSettingsState() {}

    private AccessApprovalSettingsState(AccessApprovalSettingsState $) {
        this.activeKeyVersion = $.activeKeyVersion;
        this.ancestorHasActiveKeyVersion = $.ancestorHasActiveKeyVersion;
        this.enrolledAncestor = $.enrolledAncestor;
        this.enrolledServices = $.enrolledServices;
        this.folderId = $.folderId;
        this.invalidKeyVersion = $.invalidKeyVersion;
        this.name = $.name;
        this.notificationEmails = $.notificationEmails;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AccessApprovalSettingsState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AccessApprovalSettingsState $;

        public Builder() {
            $ = new AccessApprovalSettingsState();
        }

        public Builder(AccessApprovalSettingsState defaults) {
            $ = new AccessApprovalSettingsState(Objects.requireNonNull(defaults));
        }

        /**
         * @param activeKeyVersion The asymmetric crypto key version to use for signing approval requests.
         * Empty active_key_version indicates that a Google-managed key should be used for signing.
         * This property will be ignored if set by an ancestor of the resource, and new non-empty values may not be set.
         * 
         * @return builder
         * 
         */
        public Builder activeKeyVersion(@Nullable Output<String> activeKeyVersion) {
            $.activeKeyVersion = activeKeyVersion;
            return this;
        }

        /**
         * @param activeKeyVersion The asymmetric crypto key version to use for signing approval requests.
         * Empty active_key_version indicates that a Google-managed key should be used for signing.
         * This property will be ignored if set by an ancestor of the resource, and new non-empty values may not be set.
         * 
         * @return builder
         * 
         */
        public Builder activeKeyVersion(String activeKeyVersion) {
            return activeKeyVersion(Output.of(activeKeyVersion));
        }

        /**
         * @param ancestorHasActiveKeyVersion If the field is true, that indicates that an ancestor of this Folder has set active_key_version.
         * 
         * @return builder
         * 
         */
        public Builder ancestorHasActiveKeyVersion(@Nullable Output<Boolean> ancestorHasActiveKeyVersion) {
            $.ancestorHasActiveKeyVersion = ancestorHasActiveKeyVersion;
            return this;
        }

        /**
         * @param ancestorHasActiveKeyVersion If the field is true, that indicates that an ancestor of this Folder has set active_key_version.
         * 
         * @return builder
         * 
         */
        public Builder ancestorHasActiveKeyVersion(Boolean ancestorHasActiveKeyVersion) {
            return ancestorHasActiveKeyVersion(Output.of(ancestorHasActiveKeyVersion));
        }

        /**
         * @param enrolledAncestor If the field is true, that indicates that at least one service is enrolled for Access Approval in one or more ancestors of the Folder.
         * 
         * @return builder
         * 
         */
        public Builder enrolledAncestor(@Nullable Output<Boolean> enrolledAncestor) {
            $.enrolledAncestor = enrolledAncestor;
            return this;
        }

        /**
         * @param enrolledAncestor If the field is true, that indicates that at least one service is enrolled for Access Approval in one or more ancestors of the Folder.
         * 
         * @return builder
         * 
         */
        public Builder enrolledAncestor(Boolean enrolledAncestor) {
            return enrolledAncestor(Output.of(enrolledAncestor));
        }

        /**
         * @param enrolledServices A list of Google Cloud Services for which the given resource has Access Approval enrolled.
         * Access requests for the resource given by name against any of these services contained here will be required
         * to have explicit approval. Enrollment can only be done on an all or nothing basis.
         * A maximum of 10 enrolled services will be enforced, to be expanded as the set of supported services is expanded.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder enrolledServices(@Nullable Output<List<AccessApprovalSettingsEnrolledServiceArgs>> enrolledServices) {
            $.enrolledServices = enrolledServices;
            return this;
        }

        /**
         * @param enrolledServices A list of Google Cloud Services for which the given resource has Access Approval enrolled.
         * Access requests for the resource given by name against any of these services contained here will be required
         * to have explicit approval. Enrollment can only be done on an all or nothing basis.
         * A maximum of 10 enrolled services will be enforced, to be expanded as the set of supported services is expanded.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder enrolledServices(List<AccessApprovalSettingsEnrolledServiceArgs> enrolledServices) {
            return enrolledServices(Output.of(enrolledServices));
        }

        /**
         * @param enrolledServices A list of Google Cloud Services for which the given resource has Access Approval enrolled.
         * Access requests for the resource given by name against any of these services contained here will be required
         * to have explicit approval. Enrollment can only be done on an all or nothing basis.
         * A maximum of 10 enrolled services will be enforced, to be expanded as the set of supported services is expanded.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder enrolledServices(AccessApprovalSettingsEnrolledServiceArgs... enrolledServices) {
            return enrolledServices(List.of(enrolledServices));
        }

        /**
         * @param folderId ID of the folder of the access approval settings.
         * 
         * @return builder
         * 
         */
        public Builder folderId(@Nullable Output<String> folderId) {
            $.folderId = folderId;
            return this;
        }

        /**
         * @param folderId ID of the folder of the access approval settings.
         * 
         * @return builder
         * 
         */
        public Builder folderId(String folderId) {
            return folderId(Output.of(folderId));
        }

        /**
         * @param invalidKeyVersion If the field is true, that indicates that there is some configuration issue with the active_key_version
         * configured on this Folder (e.g. it doesn&#39;t exist or the Access Approval service account doesn&#39;t have the
         * correct permissions on it, etc.) This key version is not necessarily the effective key version at this level,
         * as key versions are inherited top-down.
         * 
         * @return builder
         * 
         */
        public Builder invalidKeyVersion(@Nullable Output<Boolean> invalidKeyVersion) {
            $.invalidKeyVersion = invalidKeyVersion;
            return this;
        }

        /**
         * @param invalidKeyVersion If the field is true, that indicates that there is some configuration issue with the active_key_version
         * configured on this Folder (e.g. it doesn&#39;t exist or the Access Approval service account doesn&#39;t have the
         * correct permissions on it, etc.) This key version is not necessarily the effective key version at this level,
         * as key versions are inherited top-down.
         * 
         * @return builder
         * 
         */
        public Builder invalidKeyVersion(Boolean invalidKeyVersion) {
            return invalidKeyVersion(Output.of(invalidKeyVersion));
        }

        /**
         * @param name The resource name of the settings. Format is &#34;folders/{folder_id}/accessApprovalSettings&#34;
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The resource name of the settings. Format is &#34;folders/{folder_id}/accessApprovalSettings&#34;
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param notificationEmails A list of email addresses to which notifications relating to approval requests should be sent.
         * Notifications relating to a resource will be sent to all emails in the settings of ancestor
         * resources of that resource. A maximum of 50 email addresses are allowed.
         * 
         * @return builder
         * 
         */
        public Builder notificationEmails(@Nullable Output<List<String>> notificationEmails) {
            $.notificationEmails = notificationEmails;
            return this;
        }

        /**
         * @param notificationEmails A list of email addresses to which notifications relating to approval requests should be sent.
         * Notifications relating to a resource will be sent to all emails in the settings of ancestor
         * resources of that resource. A maximum of 50 email addresses are allowed.
         * 
         * @return builder
         * 
         */
        public Builder notificationEmails(List<String> notificationEmails) {
            return notificationEmails(Output.of(notificationEmails));
        }

        /**
         * @param notificationEmails A list of email addresses to which notifications relating to approval requests should be sent.
         * Notifications relating to a resource will be sent to all emails in the settings of ancestor
         * resources of that resource. A maximum of 50 email addresses are allowed.
         * 
         * @return builder
         * 
         */
        public Builder notificationEmails(String... notificationEmails) {
            return notificationEmails(List.of(notificationEmails));
        }

        public AccessApprovalSettingsState build() {
            return $;
        }
    }

}
