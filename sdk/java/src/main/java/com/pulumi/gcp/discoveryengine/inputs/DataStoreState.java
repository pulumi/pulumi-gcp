// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.discoveryengine.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.discoveryengine.inputs.DataStoreAdvancedSiteSearchConfigArgs;
import com.pulumi.gcp.discoveryengine.inputs.DataStoreDocumentProcessingConfigArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DataStoreState extends com.pulumi.resources.ResourceArgs {

    public static final DataStoreState Empty = new DataStoreState();

    /**
     * Configuration data for advance site search.
     * Structure is documented below.
     * 
     */
    @Import(name="advancedSiteSearchConfig")
    private @Nullable Output<DataStoreAdvancedSiteSearchConfigArgs> advancedSiteSearchConfig;

    /**
     * @return Configuration data for advance site search.
     * Structure is documented below.
     * 
     */
    public Optional<Output<DataStoreAdvancedSiteSearchConfigArgs>> advancedSiteSearchConfig() {
        return Optional.ofNullable(this.advancedSiteSearchConfig);
    }

    /**
     * The content config of the data store.
     * Possible values are: `NO_CONTENT`, `CONTENT_REQUIRED`, `PUBLIC_WEBSITE`.
     * 
     */
    @Import(name="contentConfig")
    private @Nullable Output<String> contentConfig;

    /**
     * @return The content config of the data store.
     * Possible values are: `NO_CONTENT`, `CONTENT_REQUIRED`, `PUBLIC_WEBSITE`.
     * 
     */
    public Optional<Output<String>> contentConfig() {
        return Optional.ofNullable(this.contentConfig);
    }

    /**
     * If true, an advanced data store for site search will be created. If the
     * data store is not configured as site search (GENERIC vertical and
     * PUBLIC_WEBSITE contentConfig), this flag will be ignored.
     * 
     */
    @Import(name="createAdvancedSiteSearch")
    private @Nullable Output<Boolean> createAdvancedSiteSearch;

    /**
     * @return If true, an advanced data store for site search will be created. If the
     * data store is not configured as site search (GENERIC vertical and
     * PUBLIC_WEBSITE contentConfig), this flag will be ignored.
     * 
     */
    public Optional<Output<Boolean>> createAdvancedSiteSearch() {
        return Optional.ofNullable(this.createAdvancedSiteSearch);
    }

    /**
     * Timestamp when the DataStore was created.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return Timestamp when the DataStore was created.
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * The unique id of the data store.
     * 
     * ***
     * 
     */
    @Import(name="dataStoreId")
    private @Nullable Output<String> dataStoreId;

    /**
     * @return The unique id of the data store.
     * 
     * ***
     * 
     */
    public Optional<Output<String>> dataStoreId() {
        return Optional.ofNullable(this.dataStoreId);
    }

    /**
     * The id of the default Schema associated with this data store.
     * 
     */
    @Import(name="defaultSchemaId")
    private @Nullable Output<String> defaultSchemaId;

    /**
     * @return The id of the default Schema associated with this data store.
     * 
     */
    public Optional<Output<String>> defaultSchemaId() {
        return Optional.ofNullable(this.defaultSchemaId);
    }

    /**
     * The display name of the data store. This field must be a UTF-8 encoded
     * string with a length limit of 128 characters.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return The display name of the data store. This field must be a UTF-8 encoded
     * string with a length limit of 128 characters.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Configuration for Document understanding and enrichment.
     * Structure is documented below.
     * 
     */
    @Import(name="documentProcessingConfig")
    private @Nullable Output<DataStoreDocumentProcessingConfigArgs> documentProcessingConfig;

    /**
     * @return Configuration for Document understanding and enrichment.
     * Structure is documented below.
     * 
     */
    public Optional<Output<DataStoreDocumentProcessingConfigArgs>> documentProcessingConfig() {
        return Optional.ofNullable(this.documentProcessingConfig);
    }

    /**
     * The industry vertical that the data store registers.
     * Possible values are: `GENERIC`, `MEDIA`, `HEALTHCARE_FHIR`.
     * 
     */
    @Import(name="industryVertical")
    private @Nullable Output<String> industryVertical;

    /**
     * @return The industry vertical that the data store registers.
     * Possible values are: `GENERIC`, `MEDIA`, `HEALTHCARE_FHIR`.
     * 
     */
    public Optional<Output<String>> industryVertical() {
        return Optional.ofNullable(this.industryVertical);
    }

    /**
     * The geographic location where the data store should reside. The value can
     * only be one of &#34;global&#34;, &#34;us&#34; and &#34;eu&#34;.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The geographic location where the data store should reside. The value can
     * only be one of &#34;global&#34;, &#34;us&#34; and &#34;eu&#34;.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The unique full resource name of the data store. Values are of the format
     * `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}`.
     * This field must be a UTF-8 encoded string with a length limit of 1024
     * characters.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The unique full resource name of the data store. Values are of the format
     * `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}`.
     * This field must be a UTF-8 encoded string with a length limit of 1024
     * characters.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * A boolean flag indicating whether to skip the default schema creation for
     * the data store. Only enable this flag if you are certain that the default
     * schema is incompatible with your use case.
     * If set to true, you must manually create a schema for the data store
     * before any documents can be ingested.
     * This flag cannot be specified if `data_store.starting_schema` is
     * specified.
     * 
     */
    @Import(name="skipDefaultSchemaCreation")
    private @Nullable Output<Boolean> skipDefaultSchemaCreation;

    /**
     * @return A boolean flag indicating whether to skip the default schema creation for
     * the data store. Only enable this flag if you are certain that the default
     * schema is incompatible with your use case.
     * If set to true, you must manually create a schema for the data store
     * before any documents can be ingested.
     * This flag cannot be specified if `data_store.starting_schema` is
     * specified.
     * 
     */
    public Optional<Output<Boolean>> skipDefaultSchemaCreation() {
        return Optional.ofNullable(this.skipDefaultSchemaCreation);
    }

    /**
     * The solutions that the data store enrolls.
     * Each value may be one of: `SOLUTION_TYPE_RECOMMENDATION`, `SOLUTION_TYPE_SEARCH`, `SOLUTION_TYPE_CHAT`, `SOLUTION_TYPE_GENERATIVE_CHAT`.
     * 
     */
    @Import(name="solutionTypes")
    private @Nullable Output<List<String>> solutionTypes;

    /**
     * @return The solutions that the data store enrolls.
     * Each value may be one of: `SOLUTION_TYPE_RECOMMENDATION`, `SOLUTION_TYPE_SEARCH`, `SOLUTION_TYPE_CHAT`, `SOLUTION_TYPE_GENERATIVE_CHAT`.
     * 
     */
    public Optional<Output<List<String>>> solutionTypes() {
        return Optional.ofNullable(this.solutionTypes);
    }

    private DataStoreState() {}

    private DataStoreState(DataStoreState $) {
        this.advancedSiteSearchConfig = $.advancedSiteSearchConfig;
        this.contentConfig = $.contentConfig;
        this.createAdvancedSiteSearch = $.createAdvancedSiteSearch;
        this.createTime = $.createTime;
        this.dataStoreId = $.dataStoreId;
        this.defaultSchemaId = $.defaultSchemaId;
        this.displayName = $.displayName;
        this.documentProcessingConfig = $.documentProcessingConfig;
        this.industryVertical = $.industryVertical;
        this.location = $.location;
        this.name = $.name;
        this.project = $.project;
        this.skipDefaultSchemaCreation = $.skipDefaultSchemaCreation;
        this.solutionTypes = $.solutionTypes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataStoreState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataStoreState $;

        public Builder() {
            $ = new DataStoreState();
        }

        public Builder(DataStoreState defaults) {
            $ = new DataStoreState(Objects.requireNonNull(defaults));
        }

        /**
         * @param advancedSiteSearchConfig Configuration data for advance site search.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder advancedSiteSearchConfig(@Nullable Output<DataStoreAdvancedSiteSearchConfigArgs> advancedSiteSearchConfig) {
            $.advancedSiteSearchConfig = advancedSiteSearchConfig;
            return this;
        }

        /**
         * @param advancedSiteSearchConfig Configuration data for advance site search.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder advancedSiteSearchConfig(DataStoreAdvancedSiteSearchConfigArgs advancedSiteSearchConfig) {
            return advancedSiteSearchConfig(Output.of(advancedSiteSearchConfig));
        }

        /**
         * @param contentConfig The content config of the data store.
         * Possible values are: `NO_CONTENT`, `CONTENT_REQUIRED`, `PUBLIC_WEBSITE`.
         * 
         * @return builder
         * 
         */
        public Builder contentConfig(@Nullable Output<String> contentConfig) {
            $.contentConfig = contentConfig;
            return this;
        }

        /**
         * @param contentConfig The content config of the data store.
         * Possible values are: `NO_CONTENT`, `CONTENT_REQUIRED`, `PUBLIC_WEBSITE`.
         * 
         * @return builder
         * 
         */
        public Builder contentConfig(String contentConfig) {
            return contentConfig(Output.of(contentConfig));
        }

        /**
         * @param createAdvancedSiteSearch If true, an advanced data store for site search will be created. If the
         * data store is not configured as site search (GENERIC vertical and
         * PUBLIC_WEBSITE contentConfig), this flag will be ignored.
         * 
         * @return builder
         * 
         */
        public Builder createAdvancedSiteSearch(@Nullable Output<Boolean> createAdvancedSiteSearch) {
            $.createAdvancedSiteSearch = createAdvancedSiteSearch;
            return this;
        }

        /**
         * @param createAdvancedSiteSearch If true, an advanced data store for site search will be created. If the
         * data store is not configured as site search (GENERIC vertical and
         * PUBLIC_WEBSITE contentConfig), this flag will be ignored.
         * 
         * @return builder
         * 
         */
        public Builder createAdvancedSiteSearch(Boolean createAdvancedSiteSearch) {
            return createAdvancedSiteSearch(Output.of(createAdvancedSiteSearch));
        }

        /**
         * @param createTime Timestamp when the DataStore was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime Timestamp when the DataStore was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param dataStoreId The unique id of the data store.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder dataStoreId(@Nullable Output<String> dataStoreId) {
            $.dataStoreId = dataStoreId;
            return this;
        }

        /**
         * @param dataStoreId The unique id of the data store.
         * 
         * ***
         * 
         * @return builder
         * 
         */
        public Builder dataStoreId(String dataStoreId) {
            return dataStoreId(Output.of(dataStoreId));
        }

        /**
         * @param defaultSchemaId The id of the default Schema associated with this data store.
         * 
         * @return builder
         * 
         */
        public Builder defaultSchemaId(@Nullable Output<String> defaultSchemaId) {
            $.defaultSchemaId = defaultSchemaId;
            return this;
        }

        /**
         * @param defaultSchemaId The id of the default Schema associated with this data store.
         * 
         * @return builder
         * 
         */
        public Builder defaultSchemaId(String defaultSchemaId) {
            return defaultSchemaId(Output.of(defaultSchemaId));
        }

        /**
         * @param displayName The display name of the data store. This field must be a UTF-8 encoded
         * string with a length limit of 128 characters.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The display name of the data store. This field must be a UTF-8 encoded
         * string with a length limit of 128 characters.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param documentProcessingConfig Configuration for Document understanding and enrichment.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder documentProcessingConfig(@Nullable Output<DataStoreDocumentProcessingConfigArgs> documentProcessingConfig) {
            $.documentProcessingConfig = documentProcessingConfig;
            return this;
        }

        /**
         * @param documentProcessingConfig Configuration for Document understanding and enrichment.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder documentProcessingConfig(DataStoreDocumentProcessingConfigArgs documentProcessingConfig) {
            return documentProcessingConfig(Output.of(documentProcessingConfig));
        }

        /**
         * @param industryVertical The industry vertical that the data store registers.
         * Possible values are: `GENERIC`, `MEDIA`, `HEALTHCARE_FHIR`.
         * 
         * @return builder
         * 
         */
        public Builder industryVertical(@Nullable Output<String> industryVertical) {
            $.industryVertical = industryVertical;
            return this;
        }

        /**
         * @param industryVertical The industry vertical that the data store registers.
         * Possible values are: `GENERIC`, `MEDIA`, `HEALTHCARE_FHIR`.
         * 
         * @return builder
         * 
         */
        public Builder industryVertical(String industryVertical) {
            return industryVertical(Output.of(industryVertical));
        }

        /**
         * @param location The geographic location where the data store should reside. The value can
         * only be one of &#34;global&#34;, &#34;us&#34; and &#34;eu&#34;.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The geographic location where the data store should reside. The value can
         * only be one of &#34;global&#34;, &#34;us&#34; and &#34;eu&#34;.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name The unique full resource name of the data store. Values are of the format
         * `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}`.
         * This field must be a UTF-8 encoded string with a length limit of 1024
         * characters.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The unique full resource name of the data store. Values are of the format
         * `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}`.
         * This field must be a UTF-8 encoded string with a length limit of 1024
         * characters.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param skipDefaultSchemaCreation A boolean flag indicating whether to skip the default schema creation for
         * the data store. Only enable this flag if you are certain that the default
         * schema is incompatible with your use case.
         * If set to true, you must manually create a schema for the data store
         * before any documents can be ingested.
         * This flag cannot be specified if `data_store.starting_schema` is
         * specified.
         * 
         * @return builder
         * 
         */
        public Builder skipDefaultSchemaCreation(@Nullable Output<Boolean> skipDefaultSchemaCreation) {
            $.skipDefaultSchemaCreation = skipDefaultSchemaCreation;
            return this;
        }

        /**
         * @param skipDefaultSchemaCreation A boolean flag indicating whether to skip the default schema creation for
         * the data store. Only enable this flag if you are certain that the default
         * schema is incompatible with your use case.
         * If set to true, you must manually create a schema for the data store
         * before any documents can be ingested.
         * This flag cannot be specified if `data_store.starting_schema` is
         * specified.
         * 
         * @return builder
         * 
         */
        public Builder skipDefaultSchemaCreation(Boolean skipDefaultSchemaCreation) {
            return skipDefaultSchemaCreation(Output.of(skipDefaultSchemaCreation));
        }

        /**
         * @param solutionTypes The solutions that the data store enrolls.
         * Each value may be one of: `SOLUTION_TYPE_RECOMMENDATION`, `SOLUTION_TYPE_SEARCH`, `SOLUTION_TYPE_CHAT`, `SOLUTION_TYPE_GENERATIVE_CHAT`.
         * 
         * @return builder
         * 
         */
        public Builder solutionTypes(@Nullable Output<List<String>> solutionTypes) {
            $.solutionTypes = solutionTypes;
            return this;
        }

        /**
         * @param solutionTypes The solutions that the data store enrolls.
         * Each value may be one of: `SOLUTION_TYPE_RECOMMENDATION`, `SOLUTION_TYPE_SEARCH`, `SOLUTION_TYPE_CHAT`, `SOLUTION_TYPE_GENERATIVE_CHAT`.
         * 
         * @return builder
         * 
         */
        public Builder solutionTypes(List<String> solutionTypes) {
            return solutionTypes(Output.of(solutionTypes));
        }

        /**
         * @param solutionTypes The solutions that the data store enrolls.
         * Each value may be one of: `SOLUTION_TYPE_RECOMMENDATION`, `SOLUTION_TYPE_SEARCH`, `SOLUTION_TYPE_CHAT`, `SOLUTION_TYPE_GENERATIVE_CHAT`.
         * 
         * @return builder
         * 
         */
        public Builder solutionTypes(String... solutionTypes) {
            return solutionTypes(List.of(solutionTypes));
        }

        public DataStoreState build() {
            return $;
        }
    }

}
