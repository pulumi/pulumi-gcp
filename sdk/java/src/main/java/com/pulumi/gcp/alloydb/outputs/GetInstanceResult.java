// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.alloydb.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.alloydb.outputs.GetInstanceClientConnectionConfig;
import com.pulumi.gcp.alloydb.outputs.GetInstanceMachineConfig;
import com.pulumi.gcp.alloydb.outputs.GetInstanceNetworkConfig;
import com.pulumi.gcp.alloydb.outputs.GetInstanceObservabilityConfig;
import com.pulumi.gcp.alloydb.outputs.GetInstancePscInstanceConfig;
import com.pulumi.gcp.alloydb.outputs.GetInstanceQueryInsightsConfig;
import com.pulumi.gcp.alloydb.outputs.GetInstanceReadPoolConfig;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetInstanceResult {
    private String activationPolicy;
    private Map<String,String> annotations;
    private String availabilityType;
    private List<GetInstanceClientConnectionConfig> clientConnectionConfigs;
    private String cluster;
    private String clusterId;
    private String createTime;
    private Map<String,String> databaseFlags;
    private String displayName;
    private Map<String,String> effectiveAnnotations;
    private Map<String,String> effectiveLabels;
    private String gceZone;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String instanceId;
    private String instanceType;
    private String ipAddress;
    private Map<String,String> labels;
    private @Nullable String location;
    private List<GetInstanceMachineConfig> machineConfigs;
    private String name;
    private List<GetInstanceNetworkConfig> networkConfigs;
    private List<GetInstanceObservabilityConfig> observabilityConfigs;
    private List<String> outboundPublicIpAddresses;
    private @Nullable String project;
    private List<GetInstancePscInstanceConfig> pscInstanceConfigs;
    private String publicIpAddress;
    private Map<String,String> pulumiLabels;
    private List<GetInstanceQueryInsightsConfig> queryInsightsConfigs;
    private List<GetInstanceReadPoolConfig> readPoolConfigs;
    private Boolean reconciling;
    private String state;
    private String uid;
    private String updateTime;

    private GetInstanceResult() {}
    public String activationPolicy() {
        return this.activationPolicy;
    }
    public Map<String,String> annotations() {
        return this.annotations;
    }
    public String availabilityType() {
        return this.availabilityType;
    }
    public List<GetInstanceClientConnectionConfig> clientConnectionConfigs() {
        return this.clientConnectionConfigs;
    }
    public String cluster() {
        return this.cluster;
    }
    public String clusterId() {
        return this.clusterId;
    }
    public String createTime() {
        return this.createTime;
    }
    public Map<String,String> databaseFlags() {
        return this.databaseFlags;
    }
    public String displayName() {
        return this.displayName;
    }
    public Map<String,String> effectiveAnnotations() {
        return this.effectiveAnnotations;
    }
    public Map<String,String> effectiveLabels() {
        return this.effectiveLabels;
    }
    public String gceZone() {
        return this.gceZone;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String instanceId() {
        return this.instanceId;
    }
    public String instanceType() {
        return this.instanceType;
    }
    public String ipAddress() {
        return this.ipAddress;
    }
    public Map<String,String> labels() {
        return this.labels;
    }
    public Optional<String> location() {
        return Optional.ofNullable(this.location);
    }
    public List<GetInstanceMachineConfig> machineConfigs() {
        return this.machineConfigs;
    }
    public String name() {
        return this.name;
    }
    public List<GetInstanceNetworkConfig> networkConfigs() {
        return this.networkConfigs;
    }
    public List<GetInstanceObservabilityConfig> observabilityConfigs() {
        return this.observabilityConfigs;
    }
    public List<String> outboundPublicIpAddresses() {
        return this.outboundPublicIpAddresses;
    }
    public Optional<String> project() {
        return Optional.ofNullable(this.project);
    }
    public List<GetInstancePscInstanceConfig> pscInstanceConfigs() {
        return this.pscInstanceConfigs;
    }
    public String publicIpAddress() {
        return this.publicIpAddress;
    }
    public Map<String,String> pulumiLabels() {
        return this.pulumiLabels;
    }
    public List<GetInstanceQueryInsightsConfig> queryInsightsConfigs() {
        return this.queryInsightsConfigs;
    }
    public List<GetInstanceReadPoolConfig> readPoolConfigs() {
        return this.readPoolConfigs;
    }
    public Boolean reconciling() {
        return this.reconciling;
    }
    public String state() {
        return this.state;
    }
    public String uid() {
        return this.uid;
    }
    public String updateTime() {
        return this.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstanceResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String activationPolicy;
        private Map<String,String> annotations;
        private String availabilityType;
        private List<GetInstanceClientConnectionConfig> clientConnectionConfigs;
        private String cluster;
        private String clusterId;
        private String createTime;
        private Map<String,String> databaseFlags;
        private String displayName;
        private Map<String,String> effectiveAnnotations;
        private Map<String,String> effectiveLabels;
        private String gceZone;
        private String id;
        private String instanceId;
        private String instanceType;
        private String ipAddress;
        private Map<String,String> labels;
        private @Nullable String location;
        private List<GetInstanceMachineConfig> machineConfigs;
        private String name;
        private List<GetInstanceNetworkConfig> networkConfigs;
        private List<GetInstanceObservabilityConfig> observabilityConfigs;
        private List<String> outboundPublicIpAddresses;
        private @Nullable String project;
        private List<GetInstancePscInstanceConfig> pscInstanceConfigs;
        private String publicIpAddress;
        private Map<String,String> pulumiLabels;
        private List<GetInstanceQueryInsightsConfig> queryInsightsConfigs;
        private List<GetInstanceReadPoolConfig> readPoolConfigs;
        private Boolean reconciling;
        private String state;
        private String uid;
        private String updateTime;
        public Builder() {}
        public Builder(GetInstanceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.activationPolicy = defaults.activationPolicy;
    	      this.annotations = defaults.annotations;
    	      this.availabilityType = defaults.availabilityType;
    	      this.clientConnectionConfigs = defaults.clientConnectionConfigs;
    	      this.cluster = defaults.cluster;
    	      this.clusterId = defaults.clusterId;
    	      this.createTime = defaults.createTime;
    	      this.databaseFlags = defaults.databaseFlags;
    	      this.displayName = defaults.displayName;
    	      this.effectiveAnnotations = defaults.effectiveAnnotations;
    	      this.effectiveLabels = defaults.effectiveLabels;
    	      this.gceZone = defaults.gceZone;
    	      this.id = defaults.id;
    	      this.instanceId = defaults.instanceId;
    	      this.instanceType = defaults.instanceType;
    	      this.ipAddress = defaults.ipAddress;
    	      this.labels = defaults.labels;
    	      this.location = defaults.location;
    	      this.machineConfigs = defaults.machineConfigs;
    	      this.name = defaults.name;
    	      this.networkConfigs = defaults.networkConfigs;
    	      this.observabilityConfigs = defaults.observabilityConfigs;
    	      this.outboundPublicIpAddresses = defaults.outboundPublicIpAddresses;
    	      this.project = defaults.project;
    	      this.pscInstanceConfigs = defaults.pscInstanceConfigs;
    	      this.publicIpAddress = defaults.publicIpAddress;
    	      this.pulumiLabels = defaults.pulumiLabels;
    	      this.queryInsightsConfigs = defaults.queryInsightsConfigs;
    	      this.readPoolConfigs = defaults.readPoolConfigs;
    	      this.reconciling = defaults.reconciling;
    	      this.state = defaults.state;
    	      this.uid = defaults.uid;
    	      this.updateTime = defaults.updateTime;
        }

        @CustomType.Setter
        public Builder activationPolicy(String activationPolicy) {
            if (activationPolicy == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "activationPolicy");
            }
            this.activationPolicy = activationPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder annotations(Map<String,String> annotations) {
            if (annotations == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "annotations");
            }
            this.annotations = annotations;
            return this;
        }
        @CustomType.Setter
        public Builder availabilityType(String availabilityType) {
            if (availabilityType == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "availabilityType");
            }
            this.availabilityType = availabilityType;
            return this;
        }
        @CustomType.Setter
        public Builder clientConnectionConfigs(List<GetInstanceClientConnectionConfig> clientConnectionConfigs) {
            if (clientConnectionConfigs == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "clientConnectionConfigs");
            }
            this.clientConnectionConfigs = clientConnectionConfigs;
            return this;
        }
        public Builder clientConnectionConfigs(GetInstanceClientConnectionConfig... clientConnectionConfigs) {
            return clientConnectionConfigs(List.of(clientConnectionConfigs));
        }
        @CustomType.Setter
        public Builder cluster(String cluster) {
            if (cluster == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "cluster");
            }
            this.cluster = cluster;
            return this;
        }
        @CustomType.Setter
        public Builder clusterId(String clusterId) {
            if (clusterId == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "clusterId");
            }
            this.clusterId = clusterId;
            return this;
        }
        @CustomType.Setter
        public Builder createTime(String createTime) {
            if (createTime == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "createTime");
            }
            this.createTime = createTime;
            return this;
        }
        @CustomType.Setter
        public Builder databaseFlags(Map<String,String> databaseFlags) {
            if (databaseFlags == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "databaseFlags");
            }
            this.databaseFlags = databaseFlags;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder effectiveAnnotations(Map<String,String> effectiveAnnotations) {
            if (effectiveAnnotations == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "effectiveAnnotations");
            }
            this.effectiveAnnotations = effectiveAnnotations;
            return this;
        }
        @CustomType.Setter
        public Builder effectiveLabels(Map<String,String> effectiveLabels) {
            if (effectiveLabels == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "effectiveLabels");
            }
            this.effectiveLabels = effectiveLabels;
            return this;
        }
        @CustomType.Setter
        public Builder gceZone(String gceZone) {
            if (gceZone == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "gceZone");
            }
            this.gceZone = gceZone;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder instanceId(String instanceId) {
            if (instanceId == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "instanceId");
            }
            this.instanceId = instanceId;
            return this;
        }
        @CustomType.Setter
        public Builder instanceType(String instanceType) {
            if (instanceType == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "instanceType");
            }
            this.instanceType = instanceType;
            return this;
        }
        @CustomType.Setter
        public Builder ipAddress(String ipAddress) {
            if (ipAddress == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "ipAddress");
            }
            this.ipAddress = ipAddress;
            return this;
        }
        @CustomType.Setter
        public Builder labels(Map<String,String> labels) {
            if (labels == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "labels");
            }
            this.labels = labels;
            return this;
        }
        @CustomType.Setter
        public Builder location(@Nullable String location) {

            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder machineConfigs(List<GetInstanceMachineConfig> machineConfigs) {
            if (machineConfigs == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "machineConfigs");
            }
            this.machineConfigs = machineConfigs;
            return this;
        }
        public Builder machineConfigs(GetInstanceMachineConfig... machineConfigs) {
            return machineConfigs(List.of(machineConfigs));
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder networkConfigs(List<GetInstanceNetworkConfig> networkConfigs) {
            if (networkConfigs == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "networkConfigs");
            }
            this.networkConfigs = networkConfigs;
            return this;
        }
        public Builder networkConfigs(GetInstanceNetworkConfig... networkConfigs) {
            return networkConfigs(List.of(networkConfigs));
        }
        @CustomType.Setter
        public Builder observabilityConfigs(List<GetInstanceObservabilityConfig> observabilityConfigs) {
            if (observabilityConfigs == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "observabilityConfigs");
            }
            this.observabilityConfigs = observabilityConfigs;
            return this;
        }
        public Builder observabilityConfigs(GetInstanceObservabilityConfig... observabilityConfigs) {
            return observabilityConfigs(List.of(observabilityConfigs));
        }
        @CustomType.Setter
        public Builder outboundPublicIpAddresses(List<String> outboundPublicIpAddresses) {
            if (outboundPublicIpAddresses == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "outboundPublicIpAddresses");
            }
            this.outboundPublicIpAddresses = outboundPublicIpAddresses;
            return this;
        }
        public Builder outboundPublicIpAddresses(String... outboundPublicIpAddresses) {
            return outboundPublicIpAddresses(List.of(outboundPublicIpAddresses));
        }
        @CustomType.Setter
        public Builder project(@Nullable String project) {

            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder pscInstanceConfigs(List<GetInstancePscInstanceConfig> pscInstanceConfigs) {
            if (pscInstanceConfigs == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "pscInstanceConfigs");
            }
            this.pscInstanceConfigs = pscInstanceConfigs;
            return this;
        }
        public Builder pscInstanceConfigs(GetInstancePscInstanceConfig... pscInstanceConfigs) {
            return pscInstanceConfigs(List.of(pscInstanceConfigs));
        }
        @CustomType.Setter
        public Builder publicIpAddress(String publicIpAddress) {
            if (publicIpAddress == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "publicIpAddress");
            }
            this.publicIpAddress = publicIpAddress;
            return this;
        }
        @CustomType.Setter
        public Builder pulumiLabels(Map<String,String> pulumiLabels) {
            if (pulumiLabels == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "pulumiLabels");
            }
            this.pulumiLabels = pulumiLabels;
            return this;
        }
        @CustomType.Setter
        public Builder queryInsightsConfigs(List<GetInstanceQueryInsightsConfig> queryInsightsConfigs) {
            if (queryInsightsConfigs == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "queryInsightsConfigs");
            }
            this.queryInsightsConfigs = queryInsightsConfigs;
            return this;
        }
        public Builder queryInsightsConfigs(GetInstanceQueryInsightsConfig... queryInsightsConfigs) {
            return queryInsightsConfigs(List.of(queryInsightsConfigs));
        }
        @CustomType.Setter
        public Builder readPoolConfigs(List<GetInstanceReadPoolConfig> readPoolConfigs) {
            if (readPoolConfigs == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "readPoolConfigs");
            }
            this.readPoolConfigs = readPoolConfigs;
            return this;
        }
        public Builder readPoolConfigs(GetInstanceReadPoolConfig... readPoolConfigs) {
            return readPoolConfigs(List.of(readPoolConfigs));
        }
        @CustomType.Setter
        public Builder reconciling(Boolean reconciling) {
            if (reconciling == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "reconciling");
            }
            this.reconciling = reconciling;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder uid(String uid) {
            if (uid == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "uid");
            }
            this.uid = uid;
            return this;
        }
        @CustomType.Setter
        public Builder updateTime(String updateTime) {
            if (updateTime == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "updateTime");
            }
            this.updateTime = updateTime;
            return this;
        }
        public GetInstanceResult build() {
            final var _resultValue = new GetInstanceResult();
            _resultValue.activationPolicy = activationPolicy;
            _resultValue.annotations = annotations;
            _resultValue.availabilityType = availabilityType;
            _resultValue.clientConnectionConfigs = clientConnectionConfigs;
            _resultValue.cluster = cluster;
            _resultValue.clusterId = clusterId;
            _resultValue.createTime = createTime;
            _resultValue.databaseFlags = databaseFlags;
            _resultValue.displayName = displayName;
            _resultValue.effectiveAnnotations = effectiveAnnotations;
            _resultValue.effectiveLabels = effectiveLabels;
            _resultValue.gceZone = gceZone;
            _resultValue.id = id;
            _resultValue.instanceId = instanceId;
            _resultValue.instanceType = instanceType;
            _resultValue.ipAddress = ipAddress;
            _resultValue.labels = labels;
            _resultValue.location = location;
            _resultValue.machineConfigs = machineConfigs;
            _resultValue.name = name;
            _resultValue.networkConfigs = networkConfigs;
            _resultValue.observabilityConfigs = observabilityConfigs;
            _resultValue.outboundPublicIpAddresses = outboundPublicIpAddresses;
            _resultValue.project = project;
            _resultValue.pscInstanceConfigs = pscInstanceConfigs;
            _resultValue.publicIpAddress = publicIpAddress;
            _resultValue.pulumiLabels = pulumiLabels;
            _resultValue.queryInsightsConfigs = queryInsightsConfigs;
            _resultValue.readPoolConfigs = readPoolConfigs;
            _resultValue.reconciling = reconciling;
            _resultValue.state = state;
            _resultValue.uid = uid;
            _resultValue.updateTime = updateTime;
            return _resultValue;
        }
    }
}
