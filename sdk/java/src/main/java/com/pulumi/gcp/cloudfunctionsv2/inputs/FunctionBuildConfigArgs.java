// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudfunctionsv2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.cloudfunctionsv2.inputs.FunctionBuildConfigSourceArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FunctionBuildConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final FunctionBuildConfigArgs Empty = new FunctionBuildConfigArgs();

    /**
     * - 
     * The Cloud Build name of the latest successful
     * deployment of the function.
     * 
     */
    @Import(name="build")
    private @Nullable Output<String> build;

    /**
     * @return -
     * The Cloud Build name of the latest successful
     * deployment of the function.
     * 
     */
    public Optional<Output<String>> build() {
        return Optional.ofNullable(this.build);
    }

    /**
     * User managed repository created in Artifact Registry optionally with a customer managed encryption key.
     * 
     */
    @Import(name="dockerRepository")
    private @Nullable Output<String> dockerRepository;

    /**
     * @return User managed repository created in Artifact Registry optionally with a customer managed encryption key.
     * 
     */
    public Optional<Output<String>> dockerRepository() {
        return Optional.ofNullable(this.dockerRepository);
    }

    /**
     * The name of the function (as defined in source code) that will be executed.
     * Defaults to the resource name suffix, if not specified. For backward
     * compatibility, if function with given name is not found, then the system
     * will try to use function named &#34;function&#34;. For Node.js this is name of a
     * function exported by the module specified in source_location.
     * 
     */
    @Import(name="entryPoint")
    private @Nullable Output<String> entryPoint;

    /**
     * @return The name of the function (as defined in source code) that will be executed.
     * Defaults to the resource name suffix, if not specified. For backward
     * compatibility, if function with given name is not found, then the system
     * will try to use function named &#34;function&#34;. For Node.js this is name of a
     * function exported by the module specified in source_location.
     * 
     */
    public Optional<Output<String>> entryPoint() {
        return Optional.ofNullable(this.entryPoint);
    }

    /**
     * Environment variables that shall be available during function execution.
     * 
     */
    @Import(name="environmentVariables")
    private @Nullable Output<Map<String,String>> environmentVariables;

    /**
     * @return Environment variables that shall be available during function execution.
     * 
     */
    public Optional<Output<Map<String,String>>> environmentVariables() {
        return Optional.ofNullable(this.environmentVariables);
    }

    /**
     * The runtime in which to run the function. Required when deploying a new
     * function, optional when updating an existing function.
     * 
     */
    @Import(name="runtime")
    private @Nullable Output<String> runtime;

    /**
     * @return The runtime in which to run the function. Required when deploying a new
     * function, optional when updating an existing function.
     * 
     */
    public Optional<Output<String>> runtime() {
        return Optional.ofNullable(this.runtime);
    }

    /**
     * The location of the function source code.
     * Structure is documented below.
     * 
     */
    @Import(name="source")
    private @Nullable Output<FunctionBuildConfigSourceArgs> source;

    /**
     * @return The location of the function source code.
     * Structure is documented below.
     * 
     */
    public Optional<Output<FunctionBuildConfigSourceArgs>> source() {
        return Optional.ofNullable(this.source);
    }

    /**
     * Name of the Cloud Build Custom Worker Pool that should be used to build the function.
     * 
     */
    @Import(name="workerPool")
    private @Nullable Output<String> workerPool;

    /**
     * @return Name of the Cloud Build Custom Worker Pool that should be used to build the function.
     * 
     */
    public Optional<Output<String>> workerPool() {
        return Optional.ofNullable(this.workerPool);
    }

    private FunctionBuildConfigArgs() {}

    private FunctionBuildConfigArgs(FunctionBuildConfigArgs $) {
        this.build = $.build;
        this.dockerRepository = $.dockerRepository;
        this.entryPoint = $.entryPoint;
        this.environmentVariables = $.environmentVariables;
        this.runtime = $.runtime;
        this.source = $.source;
        this.workerPool = $.workerPool;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FunctionBuildConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FunctionBuildConfigArgs $;

        public Builder() {
            $ = new FunctionBuildConfigArgs();
        }

        public Builder(FunctionBuildConfigArgs defaults) {
            $ = new FunctionBuildConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param build -
         * The Cloud Build name of the latest successful
         * deployment of the function.
         * 
         * @return builder
         * 
         */
        public Builder build(@Nullable Output<String> build) {
            $.build = build;
            return this;
        }

        /**
         * @param build -
         * The Cloud Build name of the latest successful
         * deployment of the function.
         * 
         * @return builder
         * 
         */
        public Builder build(String build) {
            return build(Output.of(build));
        }

        /**
         * @param dockerRepository User managed repository created in Artifact Registry optionally with a customer managed encryption key.
         * 
         * @return builder
         * 
         */
        public Builder dockerRepository(@Nullable Output<String> dockerRepository) {
            $.dockerRepository = dockerRepository;
            return this;
        }

        /**
         * @param dockerRepository User managed repository created in Artifact Registry optionally with a customer managed encryption key.
         * 
         * @return builder
         * 
         */
        public Builder dockerRepository(String dockerRepository) {
            return dockerRepository(Output.of(dockerRepository));
        }

        /**
         * @param entryPoint The name of the function (as defined in source code) that will be executed.
         * Defaults to the resource name suffix, if not specified. For backward
         * compatibility, if function with given name is not found, then the system
         * will try to use function named &#34;function&#34;. For Node.js this is name of a
         * function exported by the module specified in source_location.
         * 
         * @return builder
         * 
         */
        public Builder entryPoint(@Nullable Output<String> entryPoint) {
            $.entryPoint = entryPoint;
            return this;
        }

        /**
         * @param entryPoint The name of the function (as defined in source code) that will be executed.
         * Defaults to the resource name suffix, if not specified. For backward
         * compatibility, if function with given name is not found, then the system
         * will try to use function named &#34;function&#34;. For Node.js this is name of a
         * function exported by the module specified in source_location.
         * 
         * @return builder
         * 
         */
        public Builder entryPoint(String entryPoint) {
            return entryPoint(Output.of(entryPoint));
        }

        /**
         * @param environmentVariables Environment variables that shall be available during function execution.
         * 
         * @return builder
         * 
         */
        public Builder environmentVariables(@Nullable Output<Map<String,String>> environmentVariables) {
            $.environmentVariables = environmentVariables;
            return this;
        }

        /**
         * @param environmentVariables Environment variables that shall be available during function execution.
         * 
         * @return builder
         * 
         */
        public Builder environmentVariables(Map<String,String> environmentVariables) {
            return environmentVariables(Output.of(environmentVariables));
        }

        /**
         * @param runtime The runtime in which to run the function. Required when deploying a new
         * function, optional when updating an existing function.
         * 
         * @return builder
         * 
         */
        public Builder runtime(@Nullable Output<String> runtime) {
            $.runtime = runtime;
            return this;
        }

        /**
         * @param runtime The runtime in which to run the function. Required when deploying a new
         * function, optional when updating an existing function.
         * 
         * @return builder
         * 
         */
        public Builder runtime(String runtime) {
            return runtime(Output.of(runtime));
        }

        /**
         * @param source The location of the function source code.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder source(@Nullable Output<FunctionBuildConfigSourceArgs> source) {
            $.source = source;
            return this;
        }

        /**
         * @param source The location of the function source code.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder source(FunctionBuildConfigSourceArgs source) {
            return source(Output.of(source));
        }

        /**
         * @param workerPool Name of the Cloud Build Custom Worker Pool that should be used to build the function.
         * 
         * @return builder
         * 
         */
        public Builder workerPool(@Nullable Output<String> workerPool) {
            $.workerPool = workerPool;
            return this;
        }

        /**
         * @param workerPool Name of the Cloud Build Custom Worker Pool that should be used to build the function.
         * 
         * @return builder
         * 
         */
        public Builder workerPool(String workerPool) {
            return workerPool(Output.of(workerPool));
        }

        public FunctionBuildConfigArgs build() {
            return $;
        }
    }

}
