// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.container.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.container.outputs.AzureClusterControlPlaneDatabaseEncryption;
import com.pulumi.gcp.container.outputs.AzureClusterControlPlaneMainVolume;
import com.pulumi.gcp.container.outputs.AzureClusterControlPlaneProxyConfig;
import com.pulumi.gcp.container.outputs.AzureClusterControlPlaneReplicaPlacement;
import com.pulumi.gcp.container.outputs.AzureClusterControlPlaneRootVolume;
import com.pulumi.gcp.container.outputs.AzureClusterControlPlaneSshConfig;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AzureClusterControlPlane {
    /**
     * @return Optional. Configuration related to application-layer secrets encryption.
     * 
     */
    private @Nullable AzureClusterControlPlaneDatabaseEncryption databaseEncryption;
    /**
     * @return Optional. Configuration related to the main volume provisioned for each control plane replica. The main volume is in charge of storing all of the cluster&#39;s etcd state. When unspecified, it defaults to a 8-GiB Azure Disk.
     * 
     */
    private @Nullable AzureClusterControlPlaneMainVolume mainVolume;
    /**
     * @return Proxy configuration for outbound HTTP(S) traffic.
     * 
     */
    private @Nullable AzureClusterControlPlaneProxyConfig proxyConfig;
    /**
     * @return Configuration for where to place the control plane replicas. Up to three replica placement instances can be specified. If replica_placements is set, the replica placement instances will be applied to the three control plane replicas as evenly as possible.
     * 
     */
    private @Nullable List<AzureClusterControlPlaneReplicaPlacement> replicaPlacements;
    /**
     * @return Optional. Configuration related to the root volume provisioned for each control plane replica. When unspecified, it defaults to 32-GiB Azure Disk.
     * 
     */
    private @Nullable AzureClusterControlPlaneRootVolume rootVolume;
    /**
     * @return SSH configuration for how to access the underlying control plane machines.
     * 
     */
    private AzureClusterControlPlaneSshConfig sshConfig;
    /**
     * @return For a given replica, the ARM ID of the subnet where the control plane VM is deployed. Make sure it&#39;s a subnet under the virtual network in the cluster configuration.
     * 
     */
    private String subnetId;
    /**
     * @return Optional. A set of tags to apply to all underlying control plane Azure resources.
     * 
     */
    private @Nullable Map<String,String> tags;
    /**
     * @return The Kubernetes version to run on control plane replicas (e.g. `1.19.10-gke.1000`). You can list all supported versions on a given Google Cloud region by calling GetAzureServerConfig.
     * 
     */
    private String version;
    /**
     * @return Optional. The Azure VM size name. Example: `Standard_DS2_v2`. For available VM sizes, see https://docs.microsoft.com/en-us/azure/virtual-machines/vm-naming-conventions. When unspecified, it defaults to `Standard_DS2_v2`.
     * 
     */
    private @Nullable String vmSize;

    private AzureClusterControlPlane() {}
    /**
     * @return Optional. Configuration related to application-layer secrets encryption.
     * 
     */
    public Optional<AzureClusterControlPlaneDatabaseEncryption> databaseEncryption() {
        return Optional.ofNullable(this.databaseEncryption);
    }
    /**
     * @return Optional. Configuration related to the main volume provisioned for each control plane replica. The main volume is in charge of storing all of the cluster&#39;s etcd state. When unspecified, it defaults to a 8-GiB Azure Disk.
     * 
     */
    public Optional<AzureClusterControlPlaneMainVolume> mainVolume() {
        return Optional.ofNullable(this.mainVolume);
    }
    /**
     * @return Proxy configuration for outbound HTTP(S) traffic.
     * 
     */
    public Optional<AzureClusterControlPlaneProxyConfig> proxyConfig() {
        return Optional.ofNullable(this.proxyConfig);
    }
    /**
     * @return Configuration for where to place the control plane replicas. Up to three replica placement instances can be specified. If replica_placements is set, the replica placement instances will be applied to the three control plane replicas as evenly as possible.
     * 
     */
    public List<AzureClusterControlPlaneReplicaPlacement> replicaPlacements() {
        return this.replicaPlacements == null ? List.of() : this.replicaPlacements;
    }
    /**
     * @return Optional. Configuration related to the root volume provisioned for each control plane replica. When unspecified, it defaults to 32-GiB Azure Disk.
     * 
     */
    public Optional<AzureClusterControlPlaneRootVolume> rootVolume() {
        return Optional.ofNullable(this.rootVolume);
    }
    /**
     * @return SSH configuration for how to access the underlying control plane machines.
     * 
     */
    public AzureClusterControlPlaneSshConfig sshConfig() {
        return this.sshConfig;
    }
    /**
     * @return For a given replica, the ARM ID of the subnet where the control plane VM is deployed. Make sure it&#39;s a subnet under the virtual network in the cluster configuration.
     * 
     */
    public String subnetId() {
        return this.subnetId;
    }
    /**
     * @return Optional. A set of tags to apply to all underlying control plane Azure resources.
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return The Kubernetes version to run on control plane replicas (e.g. `1.19.10-gke.1000`). You can list all supported versions on a given Google Cloud region by calling GetAzureServerConfig.
     * 
     */
    public String version() {
        return this.version;
    }
    /**
     * @return Optional. The Azure VM size name. Example: `Standard_DS2_v2`. For available VM sizes, see https://docs.microsoft.com/en-us/azure/virtual-machines/vm-naming-conventions. When unspecified, it defaults to `Standard_DS2_v2`.
     * 
     */
    public Optional<String> vmSize() {
        return Optional.ofNullable(this.vmSize);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AzureClusterControlPlane defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable AzureClusterControlPlaneDatabaseEncryption databaseEncryption;
        private @Nullable AzureClusterControlPlaneMainVolume mainVolume;
        private @Nullable AzureClusterControlPlaneProxyConfig proxyConfig;
        private @Nullable List<AzureClusterControlPlaneReplicaPlacement> replicaPlacements;
        private @Nullable AzureClusterControlPlaneRootVolume rootVolume;
        private AzureClusterControlPlaneSshConfig sshConfig;
        private String subnetId;
        private @Nullable Map<String,String> tags;
        private String version;
        private @Nullable String vmSize;
        public Builder() {}
        public Builder(AzureClusterControlPlane defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.databaseEncryption = defaults.databaseEncryption;
    	      this.mainVolume = defaults.mainVolume;
    	      this.proxyConfig = defaults.proxyConfig;
    	      this.replicaPlacements = defaults.replicaPlacements;
    	      this.rootVolume = defaults.rootVolume;
    	      this.sshConfig = defaults.sshConfig;
    	      this.subnetId = defaults.subnetId;
    	      this.tags = defaults.tags;
    	      this.version = defaults.version;
    	      this.vmSize = defaults.vmSize;
        }

        @CustomType.Setter
        public Builder databaseEncryption(@Nullable AzureClusterControlPlaneDatabaseEncryption databaseEncryption) {
            this.databaseEncryption = databaseEncryption;
            return this;
        }
        @CustomType.Setter
        public Builder mainVolume(@Nullable AzureClusterControlPlaneMainVolume mainVolume) {
            this.mainVolume = mainVolume;
            return this;
        }
        @CustomType.Setter
        public Builder proxyConfig(@Nullable AzureClusterControlPlaneProxyConfig proxyConfig) {
            this.proxyConfig = proxyConfig;
            return this;
        }
        @CustomType.Setter
        public Builder replicaPlacements(@Nullable List<AzureClusterControlPlaneReplicaPlacement> replicaPlacements) {
            this.replicaPlacements = replicaPlacements;
            return this;
        }
        public Builder replicaPlacements(AzureClusterControlPlaneReplicaPlacement... replicaPlacements) {
            return replicaPlacements(List.of(replicaPlacements));
        }
        @CustomType.Setter
        public Builder rootVolume(@Nullable AzureClusterControlPlaneRootVolume rootVolume) {
            this.rootVolume = rootVolume;
            return this;
        }
        @CustomType.Setter
        public Builder sshConfig(AzureClusterControlPlaneSshConfig sshConfig) {
            this.sshConfig = Objects.requireNonNull(sshConfig);
            return this;
        }
        @CustomType.Setter
        public Builder subnetId(String subnetId) {
            this.subnetId = Objects.requireNonNull(subnetId);
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder version(String version) {
            this.version = Objects.requireNonNull(version);
            return this;
        }
        @CustomType.Setter
        public Builder vmSize(@Nullable String vmSize) {
            this.vmSize = vmSize;
            return this;
        }
        public AzureClusterControlPlane build() {
            final var o = new AzureClusterControlPlane();
            o.databaseEncryption = databaseEncryption;
            o.mainVolume = mainVolume;
            o.proxyConfig = proxyConfig;
            o.replicaPlacements = replicaPlacements;
            o.rootVolume = rootVolume;
            o.sshConfig = sshConfig;
            o.subnetId = subnetId;
            o.tags = tags;
            o.version = version;
            o.vmSize = vmSize;
            return o;
        }
    }
}
