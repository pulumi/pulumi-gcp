// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.networkservices.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class TcpRouteRuleMatchArgs extends com.pulumi.resources.ResourceArgs {

    public static final TcpRouteRuleMatchArgs Empty = new TcpRouteRuleMatchArgs();

    /**
     * Must be specified in the CIDR range format. A CIDR range consists of an IP Address and a prefix length to construct the subnet mask.
     * By default, the prefix length is 32 (i.e. matches a single IP address). Only IPV4 addresses are supported. Examples: &#34;10.0.0.1&#34; - matches against this exact IP address. &#34;10.0.0.0/8&#34; - matches against any IP address within the 10.0.0.0 subnet and 255.255.255.0 mask. &#34;0.0.0.0/0&#34; - matches against any IP address&#39;.
     * 
     */
    @Import(name="address", required=true)
    private Output<String> address;

    /**
     * @return Must be specified in the CIDR range format. A CIDR range consists of an IP Address and a prefix length to construct the subnet mask.
     * By default, the prefix length is 32 (i.e. matches a single IP address). Only IPV4 addresses are supported. Examples: &#34;10.0.0.1&#34; - matches against this exact IP address. &#34;10.0.0.0/8&#34; - matches against any IP address within the 10.0.0.0 subnet and 255.255.255.0 mask. &#34;0.0.0.0/0&#34; - matches against any IP address&#39;.
     * 
     */
    public Output<String> address() {
        return this.address;
    }

    /**
     * Specifies the destination port to match against.
     * 
     */
    @Import(name="port", required=true)
    private Output<String> port;

    /**
     * @return Specifies the destination port to match against.
     * 
     */
    public Output<String> port() {
        return this.port;
    }

    private TcpRouteRuleMatchArgs() {}

    private TcpRouteRuleMatchArgs(TcpRouteRuleMatchArgs $) {
        this.address = $.address;
        this.port = $.port;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TcpRouteRuleMatchArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TcpRouteRuleMatchArgs $;

        public Builder() {
            $ = new TcpRouteRuleMatchArgs();
        }

        public Builder(TcpRouteRuleMatchArgs defaults) {
            $ = new TcpRouteRuleMatchArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param address Must be specified in the CIDR range format. A CIDR range consists of an IP Address and a prefix length to construct the subnet mask.
         * By default, the prefix length is 32 (i.e. matches a single IP address). Only IPV4 addresses are supported. Examples: &#34;10.0.0.1&#34; - matches against this exact IP address. &#34;10.0.0.0/8&#34; - matches against any IP address within the 10.0.0.0 subnet and 255.255.255.0 mask. &#34;0.0.0.0/0&#34; - matches against any IP address&#39;.
         * 
         * @return builder
         * 
         */
        public Builder address(Output<String> address) {
            $.address = address;
            return this;
        }

        /**
         * @param address Must be specified in the CIDR range format. A CIDR range consists of an IP Address and a prefix length to construct the subnet mask.
         * By default, the prefix length is 32 (i.e. matches a single IP address). Only IPV4 addresses are supported. Examples: &#34;10.0.0.1&#34; - matches against this exact IP address. &#34;10.0.0.0/8&#34; - matches against any IP address within the 10.0.0.0 subnet and 255.255.255.0 mask. &#34;0.0.0.0/0&#34; - matches against any IP address&#39;.
         * 
         * @return builder
         * 
         */
        public Builder address(String address) {
            return address(Output.of(address));
        }

        /**
         * @param port Specifies the destination port to match against.
         * 
         * @return builder
         * 
         */
        public Builder port(Output<String> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port Specifies the destination port to match against.
         * 
         * @return builder
         * 
         */
        public Builder port(String port) {
            return port(Output.of(port));
        }

        public TcpRouteRuleMatchArgs build() {
            $.address = Objects.requireNonNull($.address, "expected parameter 'address' to be non-null");
            $.port = Objects.requireNonNull($.port, "expected parameter 'port' to be non-null");
            return $;
        }
    }

}
