// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.compute.inputs.RegionBackendServiceBackendArgs;
import com.pulumi.gcp.compute.inputs.RegionBackendServiceCdnPolicyArgs;
import com.pulumi.gcp.compute.inputs.RegionBackendServiceCircuitBreakersArgs;
import com.pulumi.gcp.compute.inputs.RegionBackendServiceConnectionTrackingPolicyArgs;
import com.pulumi.gcp.compute.inputs.RegionBackendServiceConsistentHashArgs;
import com.pulumi.gcp.compute.inputs.RegionBackendServiceCustomMetricArgs;
import com.pulumi.gcp.compute.inputs.RegionBackendServiceDynamicForwardingArgs;
import com.pulumi.gcp.compute.inputs.RegionBackendServiceFailoverPolicyArgs;
import com.pulumi.gcp.compute.inputs.RegionBackendServiceHaPolicyArgs;
import com.pulumi.gcp.compute.inputs.RegionBackendServiceIapArgs;
import com.pulumi.gcp.compute.inputs.RegionBackendServiceLogConfigArgs;
import com.pulumi.gcp.compute.inputs.RegionBackendServiceOutlierDetectionArgs;
import com.pulumi.gcp.compute.inputs.RegionBackendServiceParamsArgs;
import com.pulumi.gcp.compute.inputs.RegionBackendServiceStrongSessionAffinityCookieArgs;
import com.pulumi.gcp.compute.inputs.RegionBackendServiceSubsettingArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RegionBackendServiceState extends com.pulumi.resources.ResourceArgs {

    public static final RegionBackendServiceState Empty = new RegionBackendServiceState();

    /**
     * Lifetime of cookies in seconds if session_affinity is
     * GENERATED_COOKIE. If set to 0, the cookie is non-persistent and lasts
     * only until the end of the browser session (or equivalent). The
     * maximum allowed value for TTL is one day.
     * When the load balancing scheme is INTERNAL, this field is not used.
     * 
     */
    @Import(name="affinityCookieTtlSec")
    private @Nullable Output<Integer> affinityCookieTtlSec;

    /**
     * @return Lifetime of cookies in seconds if session_affinity is
     * GENERATED_COOKIE. If set to 0, the cookie is non-persistent and lasts
     * only until the end of the browser session (or equivalent). The
     * maximum allowed value for TTL is one day.
     * When the load balancing scheme is INTERNAL, this field is not used.
     * 
     */
    public Optional<Output<Integer>> affinityCookieTtlSec() {
        return Optional.ofNullable(this.affinityCookieTtlSec);
    }

    /**
     * The set of backends that serve this RegionBackendService.
     * Structure is documented below.
     * 
     */
    @Import(name="backends")
    private @Nullable Output<List<RegionBackendServiceBackendArgs>> backends;

    /**
     * @return The set of backends that serve this RegionBackendService.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<RegionBackendServiceBackendArgs>>> backends() {
        return Optional.ofNullable(this.backends);
    }

    /**
     * Cloud CDN configuration for this BackendService.
     * Structure is documented below.
     * 
     */
    @Import(name="cdnPolicy")
    private @Nullable Output<RegionBackendServiceCdnPolicyArgs> cdnPolicy;

    /**
     * @return Cloud CDN configuration for this BackendService.
     * Structure is documented below.
     * 
     */
    public Optional<Output<RegionBackendServiceCdnPolicyArgs>> cdnPolicy() {
        return Optional.ofNullable(this.cdnPolicy);
    }

    /**
     * Settings controlling the volume of connections to a backend service. This field
     * is applicable only when the `load_balancing_scheme` is set to INTERNAL_MANAGED
     * and the `protocol` is set to HTTP, HTTPS, HTTP2 or H2C.
     * Structure is documented below.
     * 
     */
    @Import(name="circuitBreakers")
    private @Nullable Output<RegionBackendServiceCircuitBreakersArgs> circuitBreakers;

    /**
     * @return Settings controlling the volume of connections to a backend service. This field
     * is applicable only when the `load_balancing_scheme` is set to INTERNAL_MANAGED
     * and the `protocol` is set to HTTP, HTTPS, HTTP2 or H2C.
     * Structure is documented below.
     * 
     */
    public Optional<Output<RegionBackendServiceCircuitBreakersArgs>> circuitBreakers() {
        return Optional.ofNullable(this.circuitBreakers);
    }

    /**
     * Time for which instance will be drained (not accept new
     * connections, but still work to finish started).
     * 
     */
    @Import(name="connectionDrainingTimeoutSec")
    private @Nullable Output<Integer> connectionDrainingTimeoutSec;

    /**
     * @return Time for which instance will be drained (not accept new
     * connections, but still work to finish started).
     * 
     */
    public Optional<Output<Integer>> connectionDrainingTimeoutSec() {
        return Optional.ofNullable(this.connectionDrainingTimeoutSec);
    }

    /**
     * Connection Tracking configuration for this BackendService.
     * This is available only for Layer 4 Internal Load Balancing and
     * Network Load Balancing.
     * Structure is documented below.
     * 
     */
    @Import(name="connectionTrackingPolicy")
    private @Nullable Output<RegionBackendServiceConnectionTrackingPolicyArgs> connectionTrackingPolicy;

    /**
     * @return Connection Tracking configuration for this BackendService.
     * This is available only for Layer 4 Internal Load Balancing and
     * Network Load Balancing.
     * Structure is documented below.
     * 
     */
    public Optional<Output<RegionBackendServiceConnectionTrackingPolicyArgs>> connectionTrackingPolicy() {
        return Optional.ofNullable(this.connectionTrackingPolicy);
    }

    /**
     * Consistent Hash-based load balancing can be used to provide soft session
     * affinity based on HTTP headers, cookies or other properties. This load balancing
     * policy is applicable only for HTTP connections. The affinity to a particular
     * destination host will be lost when one or more hosts are added/removed from the
     * destination service. This field specifies parameters that control consistent
     * hashing.
     * This field only applies when all of the following are true -
     * 
     */
    @Import(name="consistentHash")
    private @Nullable Output<RegionBackendServiceConsistentHashArgs> consistentHash;

    /**
     * @return Consistent Hash-based load balancing can be used to provide soft session
     * affinity based on HTTP headers, cookies or other properties. This load balancing
     * policy is applicable only for HTTP connections. The affinity to a particular
     * destination host will be lost when one or more hosts are added/removed from the
     * destination service. This field specifies parameters that control consistent
     * hashing.
     * This field only applies when all of the following are true -
     * 
     */
    public Optional<Output<RegionBackendServiceConsistentHashArgs>> consistentHash() {
        return Optional.ofNullable(this.consistentHash);
    }

    /**
     * Creation timestamp in RFC3339 text format.
     * 
     */
    @Import(name="creationTimestamp")
    private @Nullable Output<String> creationTimestamp;

    /**
     * @return Creation timestamp in RFC3339 text format.
     * 
     */
    public Optional<Output<String>> creationTimestamp() {
        return Optional.ofNullable(this.creationTimestamp);
    }

    /**
     * List of custom metrics that are used for the WEIGHTED_ROUND_ROBIN locality_lb_policy.
     * Structure is documented below.
     * 
     */
    @Import(name="customMetrics")
    private @Nullable Output<List<RegionBackendServiceCustomMetricArgs>> customMetrics;

    /**
     * @return List of custom metrics that are used for the WEIGHTED_ROUND_ROBIN locality_lb_policy.
     * Structure is documented below.
     * 
     */
    public Optional<Output<List<RegionBackendServiceCustomMetricArgs>>> customMetrics() {
        return Optional.ofNullable(this.customMetrics);
    }

    /**
     * An optional description of this resource.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return An optional description of this resource.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Dynamic forwarding configuration. This field is used to configure the backend service with dynamic forwarding
     * feature which together with Service Extension allows customized and complex routing logic.
     * Structure is documented below.
     * 
     */
    @Import(name="dynamicForwarding")
    private @Nullable Output<RegionBackendServiceDynamicForwardingArgs> dynamicForwarding;

    /**
     * @return Dynamic forwarding configuration. This field is used to configure the backend service with dynamic forwarding
     * feature which together with Service Extension allows customized and complex routing logic.
     * Structure is documented below.
     * 
     */
    public Optional<Output<RegionBackendServiceDynamicForwardingArgs>> dynamicForwarding() {
        return Optional.ofNullable(this.dynamicForwarding);
    }

    /**
     * If true, enable Cloud CDN for this RegionBackendService.
     * 
     */
    @Import(name="enableCdn")
    private @Nullable Output<Boolean> enableCdn;

    /**
     * @return If true, enable Cloud CDN for this RegionBackendService.
     * 
     */
    public Optional<Output<Boolean>> enableCdn() {
        return Optional.ofNullable(this.enableCdn);
    }

    /**
     * Policy for failovers.
     * Structure is documented below.
     * 
     */
    @Import(name="failoverPolicy")
    private @Nullable Output<RegionBackendServiceFailoverPolicyArgs> failoverPolicy;

    /**
     * @return Policy for failovers.
     * Structure is documented below.
     * 
     */
    public Optional<Output<RegionBackendServiceFailoverPolicyArgs>> failoverPolicy() {
        return Optional.ofNullable(this.failoverPolicy);
    }

    /**
     * Fingerprint of this resource. A hash of the contents stored in this
     * object. This field is used in optimistic locking.
     * 
     */
    @Import(name="fingerprint")
    private @Nullable Output<String> fingerprint;

    /**
     * @return Fingerprint of this resource. A hash of the contents stored in this
     * object. This field is used in optimistic locking.
     * 
     */
    public Optional<Output<String>> fingerprint() {
        return Optional.ofNullable(this.fingerprint);
    }

    /**
     * The unique identifier for the resource. This identifier is defined by the server.
     * 
     */
    @Import(name="generatedId")
    private @Nullable Output<Integer> generatedId;

    /**
     * @return The unique identifier for the resource. This identifier is defined by the server.
     * 
     */
    public Optional<Output<Integer>> generatedId() {
        return Optional.ofNullable(this.generatedId);
    }

    /**
     * Configures self-managed High Availability (HA) for External and Internal Protocol Forwarding.
     * The backends of this regional backend service must only specify zonal network endpoint groups
     * (NEGs) of type GCE_VM_IP. Note that haPolicy is not for load balancing, and therefore cannot
     * be specified with sessionAffinity, connectionTrackingPolicy, and failoverPolicy. haPolicy
     * requires customers to be responsible for tracking backend endpoint health and electing a
     * leader among the healthy endpoints. Therefore, haPolicy cannot be specified with healthChecks.
     * haPolicy can only be specified for External Passthrough Network Load Balancers and Internal
     * Passthrough Network Load Balancers.
     * Structure is documented below.
     * 
     */
    @Import(name="haPolicy")
    private @Nullable Output<RegionBackendServiceHaPolicyArgs> haPolicy;

    /**
     * @return Configures self-managed High Availability (HA) for External and Internal Protocol Forwarding.
     * The backends of this regional backend service must only specify zonal network endpoint groups
     * (NEGs) of type GCE_VM_IP. Note that haPolicy is not for load balancing, and therefore cannot
     * be specified with sessionAffinity, connectionTrackingPolicy, and failoverPolicy. haPolicy
     * requires customers to be responsible for tracking backend endpoint health and electing a
     * leader among the healthy endpoints. Therefore, haPolicy cannot be specified with healthChecks.
     * haPolicy can only be specified for External Passthrough Network Load Balancers and Internal
     * Passthrough Network Load Balancers.
     * Structure is documented below.
     * 
     */
    public Optional<Output<RegionBackendServiceHaPolicyArgs>> haPolicy() {
        return Optional.ofNullable(this.haPolicy);
    }

    /**
     * The set of URLs to HealthCheck resources for health checking
     * this RegionBackendService. Currently at most one health
     * check can be specified.
     * A health check must be specified unless the backend service uses an internet
     * or serverless NEG as a backend.
     * 
     */
    @Import(name="healthChecks")
    private @Nullable Output<String> healthChecks;

    /**
     * @return The set of URLs to HealthCheck resources for health checking
     * this RegionBackendService. Currently at most one health
     * check can be specified.
     * A health check must be specified unless the backend service uses an internet
     * or serverless NEG as a backend.
     * 
     */
    public Optional<Output<String>> healthChecks() {
        return Optional.ofNullable(this.healthChecks);
    }

    /**
     * Settings for enabling Cloud Identity Aware Proxy.
     * If OAuth client is not set, Google-managed OAuth client is used.
     * Structure is documented below.
     * 
     */
    @Import(name="iap")
    private @Nullable Output<RegionBackendServiceIapArgs> iap;

    /**
     * @return Settings for enabling Cloud Identity Aware Proxy.
     * If OAuth client is not set, Google-managed OAuth client is used.
     * Structure is documented below.
     * 
     */
    public Optional<Output<RegionBackendServiceIapArgs>> iap() {
        return Optional.ofNullable(this.iap);
    }

    /**
     * Specifies preference of traffic to the backend (from the proxy and from the client for proxyless gRPC).
     * Possible values are: `IPV4_ONLY`, `PREFER_IPV6`, `IPV6_ONLY`.
     * 
     */
    @Import(name="ipAddressSelectionPolicy")
    private @Nullable Output<String> ipAddressSelectionPolicy;

    /**
     * @return Specifies preference of traffic to the backend (from the proxy and from the client for proxyless gRPC).
     * Possible values are: `IPV4_ONLY`, `PREFER_IPV6`, `IPV6_ONLY`.
     * 
     */
    public Optional<Output<String>> ipAddressSelectionPolicy() {
        return Optional.ofNullable(this.ipAddressSelectionPolicy);
    }

    /**
     * Indicates what kind of load balancing this regional backend service
     * will be used for. A backend service created for one type of load
     * balancing cannot be used with the other(s). For more information, refer to
     * [Choosing a load balancer](https://cloud.google.com/load-balancing/docs/backend-service).
     * Default value is `INTERNAL`.
     * Possible values are: `EXTERNAL`, `EXTERNAL_MANAGED`, `INTERNAL`, `INTERNAL_MANAGED`.
     * 
     */
    @Import(name="loadBalancingScheme")
    private @Nullable Output<String> loadBalancingScheme;

    /**
     * @return Indicates what kind of load balancing this regional backend service
     * will be used for. A backend service created for one type of load
     * balancing cannot be used with the other(s). For more information, refer to
     * [Choosing a load balancer](https://cloud.google.com/load-balancing/docs/backend-service).
     * Default value is `INTERNAL`.
     * Possible values are: `EXTERNAL`, `EXTERNAL_MANAGED`, `INTERNAL`, `INTERNAL_MANAGED`.
     * 
     */
    public Optional<Output<String>> loadBalancingScheme() {
        return Optional.ofNullable(this.loadBalancingScheme);
    }

    /**
     * The load balancing algorithm used within the scope of the locality.
     * The possible values are:
     * * `ROUND_ROBIN`: This is a simple policy in which each healthy backend
     *   is selected in round robin order.
     * * `LEAST_REQUEST`: An O(1) algorithm which selects two random healthy
     *   hosts and picks the host which has fewer active requests.
     * * `RING_HASH`: The ring/modulo hash load balancer implements consistent
     *   hashing to backends. The algorithm has the property that the
     *   addition/removal of a host from a set of N hosts only affects
     *   1/N of the requests.
     * * `RANDOM`: The load balancer selects a random healthy host.
     * * `ORIGINAL_DESTINATION`: Backend host is selected based on the client
     *   connection metadata, i.e., connections are opened
     *   to the same address as the destination address of
     *   the incoming connection before the connection
     *   was redirected to the load balancer.
     * * `MAGLEV`: used as a drop in replacement for the ring hash load balancer.
     *   Maglev is not as stable as ring hash but has faster table lookup
     *   build times and host selection times. For more information about
     *   Maglev, refer to https://ai.google/research/pubs/pub44824
     * * `WEIGHTED_MAGLEV`: Per-instance weighted Load Balancing via health check
     *   reported weights. Only applicable to loadBalancingScheme
     *   EXTERNAL. If set, the Backend Service must
     *   configure a non legacy HTTP-based Health Check, and
     *   health check replies are expected to contain
     *   non-standard HTTP response header field
     *   X-Load-Balancing-Endpoint-Weight to specify the
     *   per-instance weights. If set, Load Balancing is weight
     *   based on the per-instance weights reported in the last
     *   processed health check replies, as long as every
     *   instance either reported a valid weight or had
     *   UNAVAILABLE_WEIGHT. Otherwise, Load Balancing remains
     *   equal-weight.
     * * `WEIGHTED_ROUND_ROBIN`: Per-endpoint weighted round-robin Load Balancing using weights computed
     *   from Backend reported Custom Metrics. If set, the Backend Service
     *   responses are expected to contain non-standard HTTP response header field
     *   X-Endpoint-Load-Metrics. The reported metrics
     *   to use for computing the weights are specified via the
     *   backends[].customMetrics fields.
     *   locality_lb_policy is applicable to either:
     * * A regional backend service with the service_protocol set to HTTP, HTTPS, HTTP2 or H2C,
     *   and loadBalancingScheme set to INTERNAL_MANAGED.
     * * A global backend service with the load_balancing_scheme set to INTERNAL_SELF_MANAGED.
     * * A regional backend service with loadBalancingScheme set to EXTERNAL (External Network
     *   Load Balancing). Only MAGLEV and WEIGHTED_MAGLEV values are possible for External
     *   Network Load Balancing. The default is MAGLEV.
     *   If session_affinity is not NONE, and locality_lb_policy is not set to MAGLEV, WEIGHTED_MAGLEV,
     *   or RING_HASH, session affinity settings will not take effect.
     *   Only ROUND_ROBIN and RING_HASH are supported when the backend service is referenced
     *   by a URL map that is bound to target gRPC proxy that has validate_for_proxyless
     *   field set to true.
     *   Possible values are: `ROUND_ROBIN`, `LEAST_REQUEST`, `RING_HASH`, `RANDOM`, `ORIGINAL_DESTINATION`, `MAGLEV`, `WEIGHTED_MAGLEV`, `WEIGHTED_ROUND_ROBIN`.
     * 
     */
    @Import(name="localityLbPolicy")
    private @Nullable Output<String> localityLbPolicy;

    /**
     * @return The load balancing algorithm used within the scope of the locality.
     * The possible values are:
     * * `ROUND_ROBIN`: This is a simple policy in which each healthy backend
     *   is selected in round robin order.
     * * `LEAST_REQUEST`: An O(1) algorithm which selects two random healthy
     *   hosts and picks the host which has fewer active requests.
     * * `RING_HASH`: The ring/modulo hash load balancer implements consistent
     *   hashing to backends. The algorithm has the property that the
     *   addition/removal of a host from a set of N hosts only affects
     *   1/N of the requests.
     * * `RANDOM`: The load balancer selects a random healthy host.
     * * `ORIGINAL_DESTINATION`: Backend host is selected based on the client
     *   connection metadata, i.e., connections are opened
     *   to the same address as the destination address of
     *   the incoming connection before the connection
     *   was redirected to the load balancer.
     * * `MAGLEV`: used as a drop in replacement for the ring hash load balancer.
     *   Maglev is not as stable as ring hash but has faster table lookup
     *   build times and host selection times. For more information about
     *   Maglev, refer to https://ai.google/research/pubs/pub44824
     * * `WEIGHTED_MAGLEV`: Per-instance weighted Load Balancing via health check
     *   reported weights. Only applicable to loadBalancingScheme
     *   EXTERNAL. If set, the Backend Service must
     *   configure a non legacy HTTP-based Health Check, and
     *   health check replies are expected to contain
     *   non-standard HTTP response header field
     *   X-Load-Balancing-Endpoint-Weight to specify the
     *   per-instance weights. If set, Load Balancing is weight
     *   based on the per-instance weights reported in the last
     *   processed health check replies, as long as every
     *   instance either reported a valid weight or had
     *   UNAVAILABLE_WEIGHT. Otherwise, Load Balancing remains
     *   equal-weight.
     * * `WEIGHTED_ROUND_ROBIN`: Per-endpoint weighted round-robin Load Balancing using weights computed
     *   from Backend reported Custom Metrics. If set, the Backend Service
     *   responses are expected to contain non-standard HTTP response header field
     *   X-Endpoint-Load-Metrics. The reported metrics
     *   to use for computing the weights are specified via the
     *   backends[].customMetrics fields.
     *   locality_lb_policy is applicable to either:
     * * A regional backend service with the service_protocol set to HTTP, HTTPS, HTTP2 or H2C,
     *   and loadBalancingScheme set to INTERNAL_MANAGED.
     * * A global backend service with the load_balancing_scheme set to INTERNAL_SELF_MANAGED.
     * * A regional backend service with loadBalancingScheme set to EXTERNAL (External Network
     *   Load Balancing). Only MAGLEV and WEIGHTED_MAGLEV values are possible for External
     *   Network Load Balancing. The default is MAGLEV.
     *   If session_affinity is not NONE, and locality_lb_policy is not set to MAGLEV, WEIGHTED_MAGLEV,
     *   or RING_HASH, session affinity settings will not take effect.
     *   Only ROUND_ROBIN and RING_HASH are supported when the backend service is referenced
     *   by a URL map that is bound to target gRPC proxy that has validate_for_proxyless
     *   field set to true.
     *   Possible values are: `ROUND_ROBIN`, `LEAST_REQUEST`, `RING_HASH`, `RANDOM`, `ORIGINAL_DESTINATION`, `MAGLEV`, `WEIGHTED_MAGLEV`, `WEIGHTED_ROUND_ROBIN`.
     * 
     */
    public Optional<Output<String>> localityLbPolicy() {
        return Optional.ofNullable(this.localityLbPolicy);
    }

    /**
     * This field denotes the logging options for the load balancer traffic served by this backend service.
     * If logging is enabled, logs will be exported to Stackdriver.
     * Structure is documented below.
     * 
     */
    @Import(name="logConfig")
    private @Nullable Output<RegionBackendServiceLogConfigArgs> logConfig;

    /**
     * @return This field denotes the logging options for the load balancer traffic served by this backend service.
     * If logging is enabled, logs will be exported to Stackdriver.
     * Structure is documented below.
     * 
     */
    public Optional<Output<RegionBackendServiceLogConfigArgs>> logConfig() {
        return Optional.ofNullable(this.logConfig);
    }

    /**
     * Name of the resource. Provided by the client when the resource is
     * created. The name must be 1-63 characters long, and comply with
     * RFC1035. Specifically, the name must be 1-63 characters long and match
     * the regular expression `a-z?` which means the
     * first character must be a lowercase letter, and all following
     * characters must be a dash, lowercase letter, or digit, except the last
     * character, which cannot be a dash.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the resource. Provided by the client when the resource is
     * created. The name must be 1-63 characters long, and comply with
     * RFC1035. Specifically, the name must be 1-63 characters long and match
     * the regular expression `a-z?` which means the
     * first character must be a lowercase letter, and all following
     * characters must be a dash, lowercase letter, or digit, except the last
     * character, which cannot be a dash.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The URL of the network to which this backend service belongs.
     * This field can only be specified when the load balancing scheme is set to INTERNAL.
     * 
     */
    @Import(name="network")
    private @Nullable Output<String> network;

    /**
     * @return The URL of the network to which this backend service belongs.
     * This field can only be specified when the load balancing scheme is set to INTERNAL.
     * 
     */
    public Optional<Output<String>> network() {
        return Optional.ofNullable(this.network);
    }

    /**
     * Settings controlling eviction of unhealthy hosts from the load balancing pool.
     * This field is applicable only when the `load_balancing_scheme` is set
     * to INTERNAL_MANAGED and the `protocol` is set to HTTP, HTTPS, HTTP2 or H2C.
     * Structure is documented below.
     * 
     */
    @Import(name="outlierDetection")
    private @Nullable Output<RegionBackendServiceOutlierDetectionArgs> outlierDetection;

    /**
     * @return Settings controlling eviction of unhealthy hosts from the load balancing pool.
     * This field is applicable only when the `load_balancing_scheme` is set
     * to INTERNAL_MANAGED and the `protocol` is set to HTTP, HTTPS, HTTP2 or H2C.
     * Structure is documented below.
     * 
     */
    public Optional<Output<RegionBackendServiceOutlierDetectionArgs>> outlierDetection() {
        return Optional.ofNullable(this.outlierDetection);
    }

    /**
     * Additional params passed with the request, but not persisted as part of resource payload
     * Structure is documented below.
     * 
     */
    @Import(name="params")
    private @Nullable Output<RegionBackendServiceParamsArgs> params;

    /**
     * @return Additional params passed with the request, but not persisted as part of resource payload
     * Structure is documented below.
     * 
     */
    public Optional<Output<RegionBackendServiceParamsArgs>> params() {
        return Optional.ofNullable(this.params);
    }

    /**
     * A named port on a backend instance group representing the port for
     * communication to the backend VMs in that group. Required when the
     * loadBalancingScheme is EXTERNAL, EXTERNAL_MANAGED, INTERNAL_MANAGED, or INTERNAL_SELF_MANAGED
     * and the backends are instance groups. The named port must be defined on each
     * backend instance group. This parameter has no meaning if the backends are NEGs. API sets a
     * default of &#34;http&#34; if not given.
     * Must be omitted when the loadBalancingScheme is INTERNAL (Internal TCP/UDP Load Balancing).
     * 
     */
    @Import(name="portName")
    private @Nullable Output<String> portName;

    /**
     * @return A named port on a backend instance group representing the port for
     * communication to the backend VMs in that group. Required when the
     * loadBalancingScheme is EXTERNAL, EXTERNAL_MANAGED, INTERNAL_MANAGED, or INTERNAL_SELF_MANAGED
     * and the backends are instance groups. The named port must be defined on each
     * backend instance group. This parameter has no meaning if the backends are NEGs. API sets a
     * default of &#34;http&#34; if not given.
     * Must be omitted when the loadBalancingScheme is INTERNAL (Internal TCP/UDP Load Balancing).
     * 
     */
    public Optional<Output<String>> portName() {
        return Optional.ofNullable(this.portName);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * The protocol this BackendService uses to communicate with backends.
     * The default is HTTP. Possible values are HTTP, HTTPS, HTTP2, H2C, TCP, SSL, UDP
     * or GRPC. Refer to the documentation for the load balancers or for Traffic Director
     * for more information.
     * Possible values are: `HTTP`, `HTTPS`, `HTTP2`, `TCP`, `SSL`, `UDP`, `GRPC`, `UNSPECIFIED`, `H2C`.
     * 
     */
    @Import(name="protocol")
    private @Nullable Output<String> protocol;

    /**
     * @return The protocol this BackendService uses to communicate with backends.
     * The default is HTTP. Possible values are HTTP, HTTPS, HTTP2, H2C, TCP, SSL, UDP
     * or GRPC. Refer to the documentation for the load balancers or for Traffic Director
     * for more information.
     * Possible values are: `HTTP`, `HTTPS`, `HTTP2`, `TCP`, `SSL`, `UDP`, `GRPC`, `UNSPECIFIED`, `H2C`.
     * 
     */
    public Optional<Output<String>> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    /**
     * The Region in which the created backend service should reside.
     * If it is not provided, the provider region is used.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The Region in which the created backend service should reside.
     * If it is not provided, the provider region is used.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The security policy associated with this backend service.
     * 
     */
    @Import(name="securityPolicy")
    private @Nullable Output<String> securityPolicy;

    /**
     * @return The security policy associated with this backend service.
     * 
     */
    public Optional<Output<String>> securityPolicy() {
        return Optional.ofNullable(this.securityPolicy);
    }

    /**
     * The URI of the created resource.
     * 
     */
    @Import(name="selfLink")
    private @Nullable Output<String> selfLink;

    /**
     * @return The URI of the created resource.
     * 
     */
    public Optional<Output<String>> selfLink() {
        return Optional.ofNullable(this.selfLink);
    }

    /**
     * Type of session affinity to use. The default is NONE. Session affinity is
     * not applicable if the protocol is UDP.
     * Possible values are: `NONE`, `CLIENT_IP`, `CLIENT_IP_PORT_PROTO`, `CLIENT_IP_PROTO`, `GENERATED_COOKIE`, `HEADER_FIELD`, `HTTP_COOKIE`, `CLIENT_IP_NO_DESTINATION`, `STRONG_COOKIE_AFFINITY`.
     * 
     */
    @Import(name="sessionAffinity")
    private @Nullable Output<String> sessionAffinity;

    /**
     * @return Type of session affinity to use. The default is NONE. Session affinity is
     * not applicable if the protocol is UDP.
     * Possible values are: `NONE`, `CLIENT_IP`, `CLIENT_IP_PORT_PROTO`, `CLIENT_IP_PROTO`, `GENERATED_COOKIE`, `HEADER_FIELD`, `HTTP_COOKIE`, `CLIENT_IP_NO_DESTINATION`, `STRONG_COOKIE_AFFINITY`.
     * 
     */
    public Optional<Output<String>> sessionAffinity() {
        return Optional.ofNullable(this.sessionAffinity);
    }

    /**
     * Describes the HTTP cookie used for stateful session affinity. This field is applicable and required if the sessionAffinity is set to STRONG_COOKIE_AFFINITY.
     * Structure is documented below.
     * 
     */
    @Import(name="strongSessionAffinityCookie")
    private @Nullable Output<RegionBackendServiceStrongSessionAffinityCookieArgs> strongSessionAffinityCookie;

    /**
     * @return Describes the HTTP cookie used for stateful session affinity. This field is applicable and required if the sessionAffinity is set to STRONG_COOKIE_AFFINITY.
     * Structure is documented below.
     * 
     */
    public Optional<Output<RegionBackendServiceStrongSessionAffinityCookieArgs>> strongSessionAffinityCookie() {
        return Optional.ofNullable(this.strongSessionAffinityCookie);
    }

    /**
     * Subsetting configuration for this BackendService. Currently this is applicable only for Internal TCP/UDP load balancing and Internal HTTP(S) load balancing.
     * Structure is documented below.
     * 
     */
    @Import(name="subsetting")
    private @Nullable Output<RegionBackendServiceSubsettingArgs> subsetting;

    /**
     * @return Subsetting configuration for this BackendService. Currently this is applicable only for Internal TCP/UDP load balancing and Internal HTTP(S) load balancing.
     * Structure is documented below.
     * 
     */
    public Optional<Output<RegionBackendServiceSubsettingArgs>> subsetting() {
        return Optional.ofNullable(this.subsetting);
    }

    /**
     * The backend service timeout has a different meaning depending on the type of load balancer.
     * For more information see, [Backend service settings](https://cloud.google.com/compute/docs/reference/rest/v1/backendServices).
     * The default is 30 seconds.
     * The full range of timeout values allowed goes from 1 through 2,147,483,647 seconds.
     * 
     */
    @Import(name="timeoutSec")
    private @Nullable Output<Integer> timeoutSec;

    /**
     * @return The backend service timeout has a different meaning depending on the type of load balancer.
     * For more information see, [Backend service settings](https://cloud.google.com/compute/docs/reference/rest/v1/backendServices).
     * The default is 30 seconds.
     * The full range of timeout values allowed goes from 1 through 2,147,483,647 seconds.
     * 
     */
    public Optional<Output<Integer>> timeoutSec() {
        return Optional.ofNullable(this.timeoutSec);
    }

    private RegionBackendServiceState() {}

    private RegionBackendServiceState(RegionBackendServiceState $) {
        this.affinityCookieTtlSec = $.affinityCookieTtlSec;
        this.backends = $.backends;
        this.cdnPolicy = $.cdnPolicy;
        this.circuitBreakers = $.circuitBreakers;
        this.connectionDrainingTimeoutSec = $.connectionDrainingTimeoutSec;
        this.connectionTrackingPolicy = $.connectionTrackingPolicy;
        this.consistentHash = $.consistentHash;
        this.creationTimestamp = $.creationTimestamp;
        this.customMetrics = $.customMetrics;
        this.description = $.description;
        this.dynamicForwarding = $.dynamicForwarding;
        this.enableCdn = $.enableCdn;
        this.failoverPolicy = $.failoverPolicy;
        this.fingerprint = $.fingerprint;
        this.generatedId = $.generatedId;
        this.haPolicy = $.haPolicy;
        this.healthChecks = $.healthChecks;
        this.iap = $.iap;
        this.ipAddressSelectionPolicy = $.ipAddressSelectionPolicy;
        this.loadBalancingScheme = $.loadBalancingScheme;
        this.localityLbPolicy = $.localityLbPolicy;
        this.logConfig = $.logConfig;
        this.name = $.name;
        this.network = $.network;
        this.outlierDetection = $.outlierDetection;
        this.params = $.params;
        this.portName = $.portName;
        this.project = $.project;
        this.protocol = $.protocol;
        this.region = $.region;
        this.securityPolicy = $.securityPolicy;
        this.selfLink = $.selfLink;
        this.sessionAffinity = $.sessionAffinity;
        this.strongSessionAffinityCookie = $.strongSessionAffinityCookie;
        this.subsetting = $.subsetting;
        this.timeoutSec = $.timeoutSec;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RegionBackendServiceState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RegionBackendServiceState $;

        public Builder() {
            $ = new RegionBackendServiceState();
        }

        public Builder(RegionBackendServiceState defaults) {
            $ = new RegionBackendServiceState(Objects.requireNonNull(defaults));
        }

        /**
         * @param affinityCookieTtlSec Lifetime of cookies in seconds if session_affinity is
         * GENERATED_COOKIE. If set to 0, the cookie is non-persistent and lasts
         * only until the end of the browser session (or equivalent). The
         * maximum allowed value for TTL is one day.
         * When the load balancing scheme is INTERNAL, this field is not used.
         * 
         * @return builder
         * 
         */
        public Builder affinityCookieTtlSec(@Nullable Output<Integer> affinityCookieTtlSec) {
            $.affinityCookieTtlSec = affinityCookieTtlSec;
            return this;
        }

        /**
         * @param affinityCookieTtlSec Lifetime of cookies in seconds if session_affinity is
         * GENERATED_COOKIE. If set to 0, the cookie is non-persistent and lasts
         * only until the end of the browser session (or equivalent). The
         * maximum allowed value for TTL is one day.
         * When the load balancing scheme is INTERNAL, this field is not used.
         * 
         * @return builder
         * 
         */
        public Builder affinityCookieTtlSec(Integer affinityCookieTtlSec) {
            return affinityCookieTtlSec(Output.of(affinityCookieTtlSec));
        }

        /**
         * @param backends The set of backends that serve this RegionBackendService.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder backends(@Nullable Output<List<RegionBackendServiceBackendArgs>> backends) {
            $.backends = backends;
            return this;
        }

        /**
         * @param backends The set of backends that serve this RegionBackendService.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder backends(List<RegionBackendServiceBackendArgs> backends) {
            return backends(Output.of(backends));
        }

        /**
         * @param backends The set of backends that serve this RegionBackendService.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder backends(RegionBackendServiceBackendArgs... backends) {
            return backends(List.of(backends));
        }

        /**
         * @param cdnPolicy Cloud CDN configuration for this BackendService.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder cdnPolicy(@Nullable Output<RegionBackendServiceCdnPolicyArgs> cdnPolicy) {
            $.cdnPolicy = cdnPolicy;
            return this;
        }

        /**
         * @param cdnPolicy Cloud CDN configuration for this BackendService.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder cdnPolicy(RegionBackendServiceCdnPolicyArgs cdnPolicy) {
            return cdnPolicy(Output.of(cdnPolicy));
        }

        /**
         * @param circuitBreakers Settings controlling the volume of connections to a backend service. This field
         * is applicable only when the `load_balancing_scheme` is set to INTERNAL_MANAGED
         * and the `protocol` is set to HTTP, HTTPS, HTTP2 or H2C.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder circuitBreakers(@Nullable Output<RegionBackendServiceCircuitBreakersArgs> circuitBreakers) {
            $.circuitBreakers = circuitBreakers;
            return this;
        }

        /**
         * @param circuitBreakers Settings controlling the volume of connections to a backend service. This field
         * is applicable only when the `load_balancing_scheme` is set to INTERNAL_MANAGED
         * and the `protocol` is set to HTTP, HTTPS, HTTP2 or H2C.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder circuitBreakers(RegionBackendServiceCircuitBreakersArgs circuitBreakers) {
            return circuitBreakers(Output.of(circuitBreakers));
        }

        /**
         * @param connectionDrainingTimeoutSec Time for which instance will be drained (not accept new
         * connections, but still work to finish started).
         * 
         * @return builder
         * 
         */
        public Builder connectionDrainingTimeoutSec(@Nullable Output<Integer> connectionDrainingTimeoutSec) {
            $.connectionDrainingTimeoutSec = connectionDrainingTimeoutSec;
            return this;
        }

        /**
         * @param connectionDrainingTimeoutSec Time for which instance will be drained (not accept new
         * connections, but still work to finish started).
         * 
         * @return builder
         * 
         */
        public Builder connectionDrainingTimeoutSec(Integer connectionDrainingTimeoutSec) {
            return connectionDrainingTimeoutSec(Output.of(connectionDrainingTimeoutSec));
        }

        /**
         * @param connectionTrackingPolicy Connection Tracking configuration for this BackendService.
         * This is available only for Layer 4 Internal Load Balancing and
         * Network Load Balancing.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder connectionTrackingPolicy(@Nullable Output<RegionBackendServiceConnectionTrackingPolicyArgs> connectionTrackingPolicy) {
            $.connectionTrackingPolicy = connectionTrackingPolicy;
            return this;
        }

        /**
         * @param connectionTrackingPolicy Connection Tracking configuration for this BackendService.
         * This is available only for Layer 4 Internal Load Balancing and
         * Network Load Balancing.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder connectionTrackingPolicy(RegionBackendServiceConnectionTrackingPolicyArgs connectionTrackingPolicy) {
            return connectionTrackingPolicy(Output.of(connectionTrackingPolicy));
        }

        /**
         * @param consistentHash Consistent Hash-based load balancing can be used to provide soft session
         * affinity based on HTTP headers, cookies or other properties. This load balancing
         * policy is applicable only for HTTP connections. The affinity to a particular
         * destination host will be lost when one or more hosts are added/removed from the
         * destination service. This field specifies parameters that control consistent
         * hashing.
         * This field only applies when all of the following are true -
         * 
         * @return builder
         * 
         */
        public Builder consistentHash(@Nullable Output<RegionBackendServiceConsistentHashArgs> consistentHash) {
            $.consistentHash = consistentHash;
            return this;
        }

        /**
         * @param consistentHash Consistent Hash-based load balancing can be used to provide soft session
         * affinity based on HTTP headers, cookies or other properties. This load balancing
         * policy is applicable only for HTTP connections. The affinity to a particular
         * destination host will be lost when one or more hosts are added/removed from the
         * destination service. This field specifies parameters that control consistent
         * hashing.
         * This field only applies when all of the following are true -
         * 
         * @return builder
         * 
         */
        public Builder consistentHash(RegionBackendServiceConsistentHashArgs consistentHash) {
            return consistentHash(Output.of(consistentHash));
        }

        /**
         * @param creationTimestamp Creation timestamp in RFC3339 text format.
         * 
         * @return builder
         * 
         */
        public Builder creationTimestamp(@Nullable Output<String> creationTimestamp) {
            $.creationTimestamp = creationTimestamp;
            return this;
        }

        /**
         * @param creationTimestamp Creation timestamp in RFC3339 text format.
         * 
         * @return builder
         * 
         */
        public Builder creationTimestamp(String creationTimestamp) {
            return creationTimestamp(Output.of(creationTimestamp));
        }

        /**
         * @param customMetrics List of custom metrics that are used for the WEIGHTED_ROUND_ROBIN locality_lb_policy.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder customMetrics(@Nullable Output<List<RegionBackendServiceCustomMetricArgs>> customMetrics) {
            $.customMetrics = customMetrics;
            return this;
        }

        /**
         * @param customMetrics List of custom metrics that are used for the WEIGHTED_ROUND_ROBIN locality_lb_policy.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder customMetrics(List<RegionBackendServiceCustomMetricArgs> customMetrics) {
            return customMetrics(Output.of(customMetrics));
        }

        /**
         * @param customMetrics List of custom metrics that are used for the WEIGHTED_ROUND_ROBIN locality_lb_policy.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder customMetrics(RegionBackendServiceCustomMetricArgs... customMetrics) {
            return customMetrics(List.of(customMetrics));
        }

        /**
         * @param description An optional description of this resource.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description An optional description of this resource.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param dynamicForwarding Dynamic forwarding configuration. This field is used to configure the backend service with dynamic forwarding
         * feature which together with Service Extension allows customized and complex routing logic.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder dynamicForwarding(@Nullable Output<RegionBackendServiceDynamicForwardingArgs> dynamicForwarding) {
            $.dynamicForwarding = dynamicForwarding;
            return this;
        }

        /**
         * @param dynamicForwarding Dynamic forwarding configuration. This field is used to configure the backend service with dynamic forwarding
         * feature which together with Service Extension allows customized and complex routing logic.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder dynamicForwarding(RegionBackendServiceDynamicForwardingArgs dynamicForwarding) {
            return dynamicForwarding(Output.of(dynamicForwarding));
        }

        /**
         * @param enableCdn If true, enable Cloud CDN for this RegionBackendService.
         * 
         * @return builder
         * 
         */
        public Builder enableCdn(@Nullable Output<Boolean> enableCdn) {
            $.enableCdn = enableCdn;
            return this;
        }

        /**
         * @param enableCdn If true, enable Cloud CDN for this RegionBackendService.
         * 
         * @return builder
         * 
         */
        public Builder enableCdn(Boolean enableCdn) {
            return enableCdn(Output.of(enableCdn));
        }

        /**
         * @param failoverPolicy Policy for failovers.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder failoverPolicy(@Nullable Output<RegionBackendServiceFailoverPolicyArgs> failoverPolicy) {
            $.failoverPolicy = failoverPolicy;
            return this;
        }

        /**
         * @param failoverPolicy Policy for failovers.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder failoverPolicy(RegionBackendServiceFailoverPolicyArgs failoverPolicy) {
            return failoverPolicy(Output.of(failoverPolicy));
        }

        /**
         * @param fingerprint Fingerprint of this resource. A hash of the contents stored in this
         * object. This field is used in optimistic locking.
         * 
         * @return builder
         * 
         */
        public Builder fingerprint(@Nullable Output<String> fingerprint) {
            $.fingerprint = fingerprint;
            return this;
        }

        /**
         * @param fingerprint Fingerprint of this resource. A hash of the contents stored in this
         * object. This field is used in optimistic locking.
         * 
         * @return builder
         * 
         */
        public Builder fingerprint(String fingerprint) {
            return fingerprint(Output.of(fingerprint));
        }

        /**
         * @param generatedId The unique identifier for the resource. This identifier is defined by the server.
         * 
         * @return builder
         * 
         */
        public Builder generatedId(@Nullable Output<Integer> generatedId) {
            $.generatedId = generatedId;
            return this;
        }

        /**
         * @param generatedId The unique identifier for the resource. This identifier is defined by the server.
         * 
         * @return builder
         * 
         */
        public Builder generatedId(Integer generatedId) {
            return generatedId(Output.of(generatedId));
        }

        /**
         * @param haPolicy Configures self-managed High Availability (HA) for External and Internal Protocol Forwarding.
         * The backends of this regional backend service must only specify zonal network endpoint groups
         * (NEGs) of type GCE_VM_IP. Note that haPolicy is not for load balancing, and therefore cannot
         * be specified with sessionAffinity, connectionTrackingPolicy, and failoverPolicy. haPolicy
         * requires customers to be responsible for tracking backend endpoint health and electing a
         * leader among the healthy endpoints. Therefore, haPolicy cannot be specified with healthChecks.
         * haPolicy can only be specified for External Passthrough Network Load Balancers and Internal
         * Passthrough Network Load Balancers.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder haPolicy(@Nullable Output<RegionBackendServiceHaPolicyArgs> haPolicy) {
            $.haPolicy = haPolicy;
            return this;
        }

        /**
         * @param haPolicy Configures self-managed High Availability (HA) for External and Internal Protocol Forwarding.
         * The backends of this regional backend service must only specify zonal network endpoint groups
         * (NEGs) of type GCE_VM_IP. Note that haPolicy is not for load balancing, and therefore cannot
         * be specified with sessionAffinity, connectionTrackingPolicy, and failoverPolicy. haPolicy
         * requires customers to be responsible for tracking backend endpoint health and electing a
         * leader among the healthy endpoints. Therefore, haPolicy cannot be specified with healthChecks.
         * haPolicy can only be specified for External Passthrough Network Load Balancers and Internal
         * Passthrough Network Load Balancers.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder haPolicy(RegionBackendServiceHaPolicyArgs haPolicy) {
            return haPolicy(Output.of(haPolicy));
        }

        /**
         * @param healthChecks The set of URLs to HealthCheck resources for health checking
         * this RegionBackendService. Currently at most one health
         * check can be specified.
         * A health check must be specified unless the backend service uses an internet
         * or serverless NEG as a backend.
         * 
         * @return builder
         * 
         */
        public Builder healthChecks(@Nullable Output<String> healthChecks) {
            $.healthChecks = healthChecks;
            return this;
        }

        /**
         * @param healthChecks The set of URLs to HealthCheck resources for health checking
         * this RegionBackendService. Currently at most one health
         * check can be specified.
         * A health check must be specified unless the backend service uses an internet
         * or serverless NEG as a backend.
         * 
         * @return builder
         * 
         */
        public Builder healthChecks(String healthChecks) {
            return healthChecks(Output.of(healthChecks));
        }

        /**
         * @param iap Settings for enabling Cloud Identity Aware Proxy.
         * If OAuth client is not set, Google-managed OAuth client is used.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder iap(@Nullable Output<RegionBackendServiceIapArgs> iap) {
            $.iap = iap;
            return this;
        }

        /**
         * @param iap Settings for enabling Cloud Identity Aware Proxy.
         * If OAuth client is not set, Google-managed OAuth client is used.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder iap(RegionBackendServiceIapArgs iap) {
            return iap(Output.of(iap));
        }

        /**
         * @param ipAddressSelectionPolicy Specifies preference of traffic to the backend (from the proxy and from the client for proxyless gRPC).
         * Possible values are: `IPV4_ONLY`, `PREFER_IPV6`, `IPV6_ONLY`.
         * 
         * @return builder
         * 
         */
        public Builder ipAddressSelectionPolicy(@Nullable Output<String> ipAddressSelectionPolicy) {
            $.ipAddressSelectionPolicy = ipAddressSelectionPolicy;
            return this;
        }

        /**
         * @param ipAddressSelectionPolicy Specifies preference of traffic to the backend (from the proxy and from the client for proxyless gRPC).
         * Possible values are: `IPV4_ONLY`, `PREFER_IPV6`, `IPV6_ONLY`.
         * 
         * @return builder
         * 
         */
        public Builder ipAddressSelectionPolicy(String ipAddressSelectionPolicy) {
            return ipAddressSelectionPolicy(Output.of(ipAddressSelectionPolicy));
        }

        /**
         * @param loadBalancingScheme Indicates what kind of load balancing this regional backend service
         * will be used for. A backend service created for one type of load
         * balancing cannot be used with the other(s). For more information, refer to
         * [Choosing a load balancer](https://cloud.google.com/load-balancing/docs/backend-service).
         * Default value is `INTERNAL`.
         * Possible values are: `EXTERNAL`, `EXTERNAL_MANAGED`, `INTERNAL`, `INTERNAL_MANAGED`.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancingScheme(@Nullable Output<String> loadBalancingScheme) {
            $.loadBalancingScheme = loadBalancingScheme;
            return this;
        }

        /**
         * @param loadBalancingScheme Indicates what kind of load balancing this regional backend service
         * will be used for. A backend service created for one type of load
         * balancing cannot be used with the other(s). For more information, refer to
         * [Choosing a load balancer](https://cloud.google.com/load-balancing/docs/backend-service).
         * Default value is `INTERNAL`.
         * Possible values are: `EXTERNAL`, `EXTERNAL_MANAGED`, `INTERNAL`, `INTERNAL_MANAGED`.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancingScheme(String loadBalancingScheme) {
            return loadBalancingScheme(Output.of(loadBalancingScheme));
        }

        /**
         * @param localityLbPolicy The load balancing algorithm used within the scope of the locality.
         * The possible values are:
         * * `ROUND_ROBIN`: This is a simple policy in which each healthy backend
         *   is selected in round robin order.
         * * `LEAST_REQUEST`: An O(1) algorithm which selects two random healthy
         *   hosts and picks the host which has fewer active requests.
         * * `RING_HASH`: The ring/modulo hash load balancer implements consistent
         *   hashing to backends. The algorithm has the property that the
         *   addition/removal of a host from a set of N hosts only affects
         *   1/N of the requests.
         * * `RANDOM`: The load balancer selects a random healthy host.
         * * `ORIGINAL_DESTINATION`: Backend host is selected based on the client
         *   connection metadata, i.e., connections are opened
         *   to the same address as the destination address of
         *   the incoming connection before the connection
         *   was redirected to the load balancer.
         * * `MAGLEV`: used as a drop in replacement for the ring hash load balancer.
         *   Maglev is not as stable as ring hash but has faster table lookup
         *   build times and host selection times. For more information about
         *   Maglev, refer to https://ai.google/research/pubs/pub44824
         * * `WEIGHTED_MAGLEV`: Per-instance weighted Load Balancing via health check
         *   reported weights. Only applicable to loadBalancingScheme
         *   EXTERNAL. If set, the Backend Service must
         *   configure a non legacy HTTP-based Health Check, and
         *   health check replies are expected to contain
         *   non-standard HTTP response header field
         *   X-Load-Balancing-Endpoint-Weight to specify the
         *   per-instance weights. If set, Load Balancing is weight
         *   based on the per-instance weights reported in the last
         *   processed health check replies, as long as every
         *   instance either reported a valid weight or had
         *   UNAVAILABLE_WEIGHT. Otherwise, Load Balancing remains
         *   equal-weight.
         * * `WEIGHTED_ROUND_ROBIN`: Per-endpoint weighted round-robin Load Balancing using weights computed
         *   from Backend reported Custom Metrics. If set, the Backend Service
         *   responses are expected to contain non-standard HTTP response header field
         *   X-Endpoint-Load-Metrics. The reported metrics
         *   to use for computing the weights are specified via the
         *   backends[].customMetrics fields.
         *   locality_lb_policy is applicable to either:
         * * A regional backend service with the service_protocol set to HTTP, HTTPS, HTTP2 or H2C,
         *   and loadBalancingScheme set to INTERNAL_MANAGED.
         * * A global backend service with the load_balancing_scheme set to INTERNAL_SELF_MANAGED.
         * * A regional backend service with loadBalancingScheme set to EXTERNAL (External Network
         *   Load Balancing). Only MAGLEV and WEIGHTED_MAGLEV values are possible for External
         *   Network Load Balancing. The default is MAGLEV.
         *   If session_affinity is not NONE, and locality_lb_policy is not set to MAGLEV, WEIGHTED_MAGLEV,
         *   or RING_HASH, session affinity settings will not take effect.
         *   Only ROUND_ROBIN and RING_HASH are supported when the backend service is referenced
         *   by a URL map that is bound to target gRPC proxy that has validate_for_proxyless
         *   field set to true.
         *   Possible values are: `ROUND_ROBIN`, `LEAST_REQUEST`, `RING_HASH`, `RANDOM`, `ORIGINAL_DESTINATION`, `MAGLEV`, `WEIGHTED_MAGLEV`, `WEIGHTED_ROUND_ROBIN`.
         * 
         * @return builder
         * 
         */
        public Builder localityLbPolicy(@Nullable Output<String> localityLbPolicy) {
            $.localityLbPolicy = localityLbPolicy;
            return this;
        }

        /**
         * @param localityLbPolicy The load balancing algorithm used within the scope of the locality.
         * The possible values are:
         * * `ROUND_ROBIN`: This is a simple policy in which each healthy backend
         *   is selected in round robin order.
         * * `LEAST_REQUEST`: An O(1) algorithm which selects two random healthy
         *   hosts and picks the host which has fewer active requests.
         * * `RING_HASH`: The ring/modulo hash load balancer implements consistent
         *   hashing to backends. The algorithm has the property that the
         *   addition/removal of a host from a set of N hosts only affects
         *   1/N of the requests.
         * * `RANDOM`: The load balancer selects a random healthy host.
         * * `ORIGINAL_DESTINATION`: Backend host is selected based on the client
         *   connection metadata, i.e., connections are opened
         *   to the same address as the destination address of
         *   the incoming connection before the connection
         *   was redirected to the load balancer.
         * * `MAGLEV`: used as a drop in replacement for the ring hash load balancer.
         *   Maglev is not as stable as ring hash but has faster table lookup
         *   build times and host selection times. For more information about
         *   Maglev, refer to https://ai.google/research/pubs/pub44824
         * * `WEIGHTED_MAGLEV`: Per-instance weighted Load Balancing via health check
         *   reported weights. Only applicable to loadBalancingScheme
         *   EXTERNAL. If set, the Backend Service must
         *   configure a non legacy HTTP-based Health Check, and
         *   health check replies are expected to contain
         *   non-standard HTTP response header field
         *   X-Load-Balancing-Endpoint-Weight to specify the
         *   per-instance weights. If set, Load Balancing is weight
         *   based on the per-instance weights reported in the last
         *   processed health check replies, as long as every
         *   instance either reported a valid weight or had
         *   UNAVAILABLE_WEIGHT. Otherwise, Load Balancing remains
         *   equal-weight.
         * * `WEIGHTED_ROUND_ROBIN`: Per-endpoint weighted round-robin Load Balancing using weights computed
         *   from Backend reported Custom Metrics. If set, the Backend Service
         *   responses are expected to contain non-standard HTTP response header field
         *   X-Endpoint-Load-Metrics. The reported metrics
         *   to use for computing the weights are specified via the
         *   backends[].customMetrics fields.
         *   locality_lb_policy is applicable to either:
         * * A regional backend service with the service_protocol set to HTTP, HTTPS, HTTP2 or H2C,
         *   and loadBalancingScheme set to INTERNAL_MANAGED.
         * * A global backend service with the load_balancing_scheme set to INTERNAL_SELF_MANAGED.
         * * A regional backend service with loadBalancingScheme set to EXTERNAL (External Network
         *   Load Balancing). Only MAGLEV and WEIGHTED_MAGLEV values are possible for External
         *   Network Load Balancing. The default is MAGLEV.
         *   If session_affinity is not NONE, and locality_lb_policy is not set to MAGLEV, WEIGHTED_MAGLEV,
         *   or RING_HASH, session affinity settings will not take effect.
         *   Only ROUND_ROBIN and RING_HASH are supported when the backend service is referenced
         *   by a URL map that is bound to target gRPC proxy that has validate_for_proxyless
         *   field set to true.
         *   Possible values are: `ROUND_ROBIN`, `LEAST_REQUEST`, `RING_HASH`, `RANDOM`, `ORIGINAL_DESTINATION`, `MAGLEV`, `WEIGHTED_MAGLEV`, `WEIGHTED_ROUND_ROBIN`.
         * 
         * @return builder
         * 
         */
        public Builder localityLbPolicy(String localityLbPolicy) {
            return localityLbPolicy(Output.of(localityLbPolicy));
        }

        /**
         * @param logConfig This field denotes the logging options for the load balancer traffic served by this backend service.
         * If logging is enabled, logs will be exported to Stackdriver.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder logConfig(@Nullable Output<RegionBackendServiceLogConfigArgs> logConfig) {
            $.logConfig = logConfig;
            return this;
        }

        /**
         * @param logConfig This field denotes the logging options for the load balancer traffic served by this backend service.
         * If logging is enabled, logs will be exported to Stackdriver.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder logConfig(RegionBackendServiceLogConfigArgs logConfig) {
            return logConfig(Output.of(logConfig));
        }

        /**
         * @param name Name of the resource. Provided by the client when the resource is
         * created. The name must be 1-63 characters long, and comply with
         * RFC1035. Specifically, the name must be 1-63 characters long and match
         * the regular expression `a-z?` which means the
         * first character must be a lowercase letter, and all following
         * characters must be a dash, lowercase letter, or digit, except the last
         * character, which cannot be a dash.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the resource. Provided by the client when the resource is
         * created. The name must be 1-63 characters long, and comply with
         * RFC1035. Specifically, the name must be 1-63 characters long and match
         * the regular expression `a-z?` which means the
         * first character must be a lowercase letter, and all following
         * characters must be a dash, lowercase letter, or digit, except the last
         * character, which cannot be a dash.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param network The URL of the network to which this backend service belongs.
         * This field can only be specified when the load balancing scheme is set to INTERNAL.
         * 
         * @return builder
         * 
         */
        public Builder network(@Nullable Output<String> network) {
            $.network = network;
            return this;
        }

        /**
         * @param network The URL of the network to which this backend service belongs.
         * This field can only be specified when the load balancing scheme is set to INTERNAL.
         * 
         * @return builder
         * 
         */
        public Builder network(String network) {
            return network(Output.of(network));
        }

        /**
         * @param outlierDetection Settings controlling eviction of unhealthy hosts from the load balancing pool.
         * This field is applicable only when the `load_balancing_scheme` is set
         * to INTERNAL_MANAGED and the `protocol` is set to HTTP, HTTPS, HTTP2 or H2C.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder outlierDetection(@Nullable Output<RegionBackendServiceOutlierDetectionArgs> outlierDetection) {
            $.outlierDetection = outlierDetection;
            return this;
        }

        /**
         * @param outlierDetection Settings controlling eviction of unhealthy hosts from the load balancing pool.
         * This field is applicable only when the `load_balancing_scheme` is set
         * to INTERNAL_MANAGED and the `protocol` is set to HTTP, HTTPS, HTTP2 or H2C.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder outlierDetection(RegionBackendServiceOutlierDetectionArgs outlierDetection) {
            return outlierDetection(Output.of(outlierDetection));
        }

        /**
         * @param params Additional params passed with the request, but not persisted as part of resource payload
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder params(@Nullable Output<RegionBackendServiceParamsArgs> params) {
            $.params = params;
            return this;
        }

        /**
         * @param params Additional params passed with the request, but not persisted as part of resource payload
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder params(RegionBackendServiceParamsArgs params) {
            return params(Output.of(params));
        }

        /**
         * @param portName A named port on a backend instance group representing the port for
         * communication to the backend VMs in that group. Required when the
         * loadBalancingScheme is EXTERNAL, EXTERNAL_MANAGED, INTERNAL_MANAGED, or INTERNAL_SELF_MANAGED
         * and the backends are instance groups. The named port must be defined on each
         * backend instance group. This parameter has no meaning if the backends are NEGs. API sets a
         * default of &#34;http&#34; if not given.
         * Must be omitted when the loadBalancingScheme is INTERNAL (Internal TCP/UDP Load Balancing).
         * 
         * @return builder
         * 
         */
        public Builder portName(@Nullable Output<String> portName) {
            $.portName = portName;
            return this;
        }

        /**
         * @param portName A named port on a backend instance group representing the port for
         * communication to the backend VMs in that group. Required when the
         * loadBalancingScheme is EXTERNAL, EXTERNAL_MANAGED, INTERNAL_MANAGED, or INTERNAL_SELF_MANAGED
         * and the backends are instance groups. The named port must be defined on each
         * backend instance group. This parameter has no meaning if the backends are NEGs. API sets a
         * default of &#34;http&#34; if not given.
         * Must be omitted when the loadBalancingScheme is INTERNAL (Internal TCP/UDP Load Balancing).
         * 
         * @return builder
         * 
         */
        public Builder portName(String portName) {
            return portName(Output.of(portName));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param protocol The protocol this BackendService uses to communicate with backends.
         * The default is HTTP. Possible values are HTTP, HTTPS, HTTP2, H2C, TCP, SSL, UDP
         * or GRPC. Refer to the documentation for the load balancers or for Traffic Director
         * for more information.
         * Possible values are: `HTTP`, `HTTPS`, `HTTP2`, `TCP`, `SSL`, `UDP`, `GRPC`, `UNSPECIFIED`, `H2C`.
         * 
         * @return builder
         * 
         */
        public Builder protocol(@Nullable Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol The protocol this BackendService uses to communicate with backends.
         * The default is HTTP. Possible values are HTTP, HTTPS, HTTP2, H2C, TCP, SSL, UDP
         * or GRPC. Refer to the documentation for the load balancers or for Traffic Director
         * for more information.
         * Possible values are: `HTTP`, `HTTPS`, `HTTP2`, `TCP`, `SSL`, `UDP`, `GRPC`, `UNSPECIFIED`, `H2C`.
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param region The Region in which the created backend service should reside.
         * If it is not provided, the provider region is used.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The Region in which the created backend service should reside.
         * If it is not provided, the provider region is used.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param securityPolicy The security policy associated with this backend service.
         * 
         * @return builder
         * 
         */
        public Builder securityPolicy(@Nullable Output<String> securityPolicy) {
            $.securityPolicy = securityPolicy;
            return this;
        }

        /**
         * @param securityPolicy The security policy associated with this backend service.
         * 
         * @return builder
         * 
         */
        public Builder securityPolicy(String securityPolicy) {
            return securityPolicy(Output.of(securityPolicy));
        }

        /**
         * @param selfLink The URI of the created resource.
         * 
         * @return builder
         * 
         */
        public Builder selfLink(@Nullable Output<String> selfLink) {
            $.selfLink = selfLink;
            return this;
        }

        /**
         * @param selfLink The URI of the created resource.
         * 
         * @return builder
         * 
         */
        public Builder selfLink(String selfLink) {
            return selfLink(Output.of(selfLink));
        }

        /**
         * @param sessionAffinity Type of session affinity to use. The default is NONE. Session affinity is
         * not applicable if the protocol is UDP.
         * Possible values are: `NONE`, `CLIENT_IP`, `CLIENT_IP_PORT_PROTO`, `CLIENT_IP_PROTO`, `GENERATED_COOKIE`, `HEADER_FIELD`, `HTTP_COOKIE`, `CLIENT_IP_NO_DESTINATION`, `STRONG_COOKIE_AFFINITY`.
         * 
         * @return builder
         * 
         */
        public Builder sessionAffinity(@Nullable Output<String> sessionAffinity) {
            $.sessionAffinity = sessionAffinity;
            return this;
        }

        /**
         * @param sessionAffinity Type of session affinity to use. The default is NONE. Session affinity is
         * not applicable if the protocol is UDP.
         * Possible values are: `NONE`, `CLIENT_IP`, `CLIENT_IP_PORT_PROTO`, `CLIENT_IP_PROTO`, `GENERATED_COOKIE`, `HEADER_FIELD`, `HTTP_COOKIE`, `CLIENT_IP_NO_DESTINATION`, `STRONG_COOKIE_AFFINITY`.
         * 
         * @return builder
         * 
         */
        public Builder sessionAffinity(String sessionAffinity) {
            return sessionAffinity(Output.of(sessionAffinity));
        }

        /**
         * @param strongSessionAffinityCookie Describes the HTTP cookie used for stateful session affinity. This field is applicable and required if the sessionAffinity is set to STRONG_COOKIE_AFFINITY.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder strongSessionAffinityCookie(@Nullable Output<RegionBackendServiceStrongSessionAffinityCookieArgs> strongSessionAffinityCookie) {
            $.strongSessionAffinityCookie = strongSessionAffinityCookie;
            return this;
        }

        /**
         * @param strongSessionAffinityCookie Describes the HTTP cookie used for stateful session affinity. This field is applicable and required if the sessionAffinity is set to STRONG_COOKIE_AFFINITY.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder strongSessionAffinityCookie(RegionBackendServiceStrongSessionAffinityCookieArgs strongSessionAffinityCookie) {
            return strongSessionAffinityCookie(Output.of(strongSessionAffinityCookie));
        }

        /**
         * @param subsetting Subsetting configuration for this BackendService. Currently this is applicable only for Internal TCP/UDP load balancing and Internal HTTP(S) load balancing.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder subsetting(@Nullable Output<RegionBackendServiceSubsettingArgs> subsetting) {
            $.subsetting = subsetting;
            return this;
        }

        /**
         * @param subsetting Subsetting configuration for this BackendService. Currently this is applicable only for Internal TCP/UDP load balancing and Internal HTTP(S) load balancing.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder subsetting(RegionBackendServiceSubsettingArgs subsetting) {
            return subsetting(Output.of(subsetting));
        }

        /**
         * @param timeoutSec The backend service timeout has a different meaning depending on the type of load balancer.
         * For more information see, [Backend service settings](https://cloud.google.com/compute/docs/reference/rest/v1/backendServices).
         * The default is 30 seconds.
         * The full range of timeout values allowed goes from 1 through 2,147,483,647 seconds.
         * 
         * @return builder
         * 
         */
        public Builder timeoutSec(@Nullable Output<Integer> timeoutSec) {
            $.timeoutSec = timeoutSec;
            return this;
        }

        /**
         * @param timeoutSec The backend service timeout has a different meaning depending on the type of load balancer.
         * For more information see, [Backend service settings](https://cloud.google.com/compute/docs/reference/rest/v1/backendServices).
         * The default is 30 seconds.
         * The full range of timeout values allowed goes from 1 through 2,147,483,647 seconds.
         * 
         * @return builder
         * 
         */
        public Builder timeoutSec(Integer timeoutSec) {
            return timeoutSec(Output.of(timeoutSec));
        }

        public RegionBackendServiceState build() {
            return $;
        }
    }

}
