// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.artifactregistry.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RepositoryMavenConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final RepositoryMavenConfigArgs Empty = new RepositoryMavenConfigArgs();

    /**
     * The repository with this flag will allow publishing the same
     * snapshot versions.
     * 
     */
    @Import(name="allowSnapshotOverwrites")
    private @Nullable Output<Boolean> allowSnapshotOverwrites;

    /**
     * @return The repository with this flag will allow publishing the same
     * snapshot versions.
     * 
     */
    public Optional<Output<Boolean>> allowSnapshotOverwrites() {
        return Optional.ofNullable(this.allowSnapshotOverwrites);
    }

    /**
     * Version policy defines the versions that the registry will accept.
     * Default value is `VERSION_POLICY_UNSPECIFIED`.
     * Possible values are `VERSION_POLICY_UNSPECIFIED`, `RELEASE`, and `SNAPSHOT`.
     * 
     */
    @Import(name="versionPolicy")
    private @Nullable Output<String> versionPolicy;

    /**
     * @return Version policy defines the versions that the registry will accept.
     * Default value is `VERSION_POLICY_UNSPECIFIED`.
     * Possible values are `VERSION_POLICY_UNSPECIFIED`, `RELEASE`, and `SNAPSHOT`.
     * 
     */
    public Optional<Output<String>> versionPolicy() {
        return Optional.ofNullable(this.versionPolicy);
    }

    private RepositoryMavenConfigArgs() {}

    private RepositoryMavenConfigArgs(RepositoryMavenConfigArgs $) {
        this.allowSnapshotOverwrites = $.allowSnapshotOverwrites;
        this.versionPolicy = $.versionPolicy;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RepositoryMavenConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RepositoryMavenConfigArgs $;

        public Builder() {
            $ = new RepositoryMavenConfigArgs();
        }

        public Builder(RepositoryMavenConfigArgs defaults) {
            $ = new RepositoryMavenConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowSnapshotOverwrites The repository with this flag will allow publishing the same
         * snapshot versions.
         * 
         * @return builder
         * 
         */
        public Builder allowSnapshotOverwrites(@Nullable Output<Boolean> allowSnapshotOverwrites) {
            $.allowSnapshotOverwrites = allowSnapshotOverwrites;
            return this;
        }

        /**
         * @param allowSnapshotOverwrites The repository with this flag will allow publishing the same
         * snapshot versions.
         * 
         * @return builder
         * 
         */
        public Builder allowSnapshotOverwrites(Boolean allowSnapshotOverwrites) {
            return allowSnapshotOverwrites(Output.of(allowSnapshotOverwrites));
        }

        /**
         * @param versionPolicy Version policy defines the versions that the registry will accept.
         * Default value is `VERSION_POLICY_UNSPECIFIED`.
         * Possible values are `VERSION_POLICY_UNSPECIFIED`, `RELEASE`, and `SNAPSHOT`.
         * 
         * @return builder
         * 
         */
        public Builder versionPolicy(@Nullable Output<String> versionPolicy) {
            $.versionPolicy = versionPolicy;
            return this;
        }

        /**
         * @param versionPolicy Version policy defines the versions that the registry will accept.
         * Default value is `VERSION_POLICY_UNSPECIFIED`.
         * Possible values are `VERSION_POLICY_UNSPECIFIED`, `RELEASE`, and `SNAPSHOT`.
         * 
         * @return builder
         * 
         */
        public Builder versionPolicy(String versionPolicy) {
            return versionPolicy(Output.of(versionPolicy));
        }

        public RepositoryMavenConfigArgs build() {
            return $;
        }
    }

}
