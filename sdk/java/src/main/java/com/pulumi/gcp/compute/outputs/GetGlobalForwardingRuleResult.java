// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.compute.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.compute.outputs.GetGlobalForwardingRuleMetadataFilter;
import com.pulumi.gcp.compute.outputs.GetGlobalForwardingRuleServiceDirectoryRegistration;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetGlobalForwardingRuleResult {
    private Boolean allowPscGlobalAccess;
    private String baseForwardingRule;
    private String description;
    private Map<String,String> effectiveLabels;
    private Integer forwardingRuleId;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String ipAddress;
    private String ipProtocol;
    private String ipVersion;
    private String labelFingerprint;
    private Map<String,String> labels;
    private String loadBalancingScheme;
    private List<GetGlobalForwardingRuleMetadataFilter> metadataFilters;
    private String name;
    private String network;
    private Boolean noAutomateDnsZone;
    private String portRange;
    private @Nullable String project;
    private String pscConnectionId;
    private String pscConnectionStatus;
    private Map<String,String> pulumiLabels;
    private String selfLink;
    private List<GetGlobalForwardingRuleServiceDirectoryRegistration> serviceDirectoryRegistrations;
    private List<String> sourceIpRanges;
    private String subnetwork;
    private String target;

    private GetGlobalForwardingRuleResult() {}
    public Boolean allowPscGlobalAccess() {
        return this.allowPscGlobalAccess;
    }
    public String baseForwardingRule() {
        return this.baseForwardingRule;
    }
    public String description() {
        return this.description;
    }
    public Map<String,String> effectiveLabels() {
        return this.effectiveLabels;
    }
    public Integer forwardingRuleId() {
        return this.forwardingRuleId;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String ipAddress() {
        return this.ipAddress;
    }
    public String ipProtocol() {
        return this.ipProtocol;
    }
    public String ipVersion() {
        return this.ipVersion;
    }
    public String labelFingerprint() {
        return this.labelFingerprint;
    }
    public Map<String,String> labels() {
        return this.labels;
    }
    public String loadBalancingScheme() {
        return this.loadBalancingScheme;
    }
    public List<GetGlobalForwardingRuleMetadataFilter> metadataFilters() {
        return this.metadataFilters;
    }
    public String name() {
        return this.name;
    }
    public String network() {
        return this.network;
    }
    public Boolean noAutomateDnsZone() {
        return this.noAutomateDnsZone;
    }
    public String portRange() {
        return this.portRange;
    }
    public Optional<String> project() {
        return Optional.ofNullable(this.project);
    }
    public String pscConnectionId() {
        return this.pscConnectionId;
    }
    public String pscConnectionStatus() {
        return this.pscConnectionStatus;
    }
    public Map<String,String> pulumiLabels() {
        return this.pulumiLabels;
    }
    public String selfLink() {
        return this.selfLink;
    }
    public List<GetGlobalForwardingRuleServiceDirectoryRegistration> serviceDirectoryRegistrations() {
        return this.serviceDirectoryRegistrations;
    }
    public List<String> sourceIpRanges() {
        return this.sourceIpRanges;
    }
    public String subnetwork() {
        return this.subnetwork;
    }
    public String target() {
        return this.target;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGlobalForwardingRuleResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean allowPscGlobalAccess;
        private String baseForwardingRule;
        private String description;
        private Map<String,String> effectiveLabels;
        private Integer forwardingRuleId;
        private String id;
        private String ipAddress;
        private String ipProtocol;
        private String ipVersion;
        private String labelFingerprint;
        private Map<String,String> labels;
        private String loadBalancingScheme;
        private List<GetGlobalForwardingRuleMetadataFilter> metadataFilters;
        private String name;
        private String network;
        private Boolean noAutomateDnsZone;
        private String portRange;
        private @Nullable String project;
        private String pscConnectionId;
        private String pscConnectionStatus;
        private Map<String,String> pulumiLabels;
        private String selfLink;
        private List<GetGlobalForwardingRuleServiceDirectoryRegistration> serviceDirectoryRegistrations;
        private List<String> sourceIpRanges;
        private String subnetwork;
        private String target;
        public Builder() {}
        public Builder(GetGlobalForwardingRuleResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowPscGlobalAccess = defaults.allowPscGlobalAccess;
    	      this.baseForwardingRule = defaults.baseForwardingRule;
    	      this.description = defaults.description;
    	      this.effectiveLabels = defaults.effectiveLabels;
    	      this.forwardingRuleId = defaults.forwardingRuleId;
    	      this.id = defaults.id;
    	      this.ipAddress = defaults.ipAddress;
    	      this.ipProtocol = defaults.ipProtocol;
    	      this.ipVersion = defaults.ipVersion;
    	      this.labelFingerprint = defaults.labelFingerprint;
    	      this.labels = defaults.labels;
    	      this.loadBalancingScheme = defaults.loadBalancingScheme;
    	      this.metadataFilters = defaults.metadataFilters;
    	      this.name = defaults.name;
    	      this.network = defaults.network;
    	      this.noAutomateDnsZone = defaults.noAutomateDnsZone;
    	      this.portRange = defaults.portRange;
    	      this.project = defaults.project;
    	      this.pscConnectionId = defaults.pscConnectionId;
    	      this.pscConnectionStatus = defaults.pscConnectionStatus;
    	      this.pulumiLabels = defaults.pulumiLabels;
    	      this.selfLink = defaults.selfLink;
    	      this.serviceDirectoryRegistrations = defaults.serviceDirectoryRegistrations;
    	      this.sourceIpRanges = defaults.sourceIpRanges;
    	      this.subnetwork = defaults.subnetwork;
    	      this.target = defaults.target;
        }

        @CustomType.Setter
        public Builder allowPscGlobalAccess(Boolean allowPscGlobalAccess) {
            if (allowPscGlobalAccess == null) {
              throw new MissingRequiredPropertyException("GetGlobalForwardingRuleResult", "allowPscGlobalAccess");
            }
            this.allowPscGlobalAccess = allowPscGlobalAccess;
            return this;
        }
        @CustomType.Setter
        public Builder baseForwardingRule(String baseForwardingRule) {
            if (baseForwardingRule == null) {
              throw new MissingRequiredPropertyException("GetGlobalForwardingRuleResult", "baseForwardingRule");
            }
            this.baseForwardingRule = baseForwardingRule;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetGlobalForwardingRuleResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder effectiveLabels(Map<String,String> effectiveLabels) {
            if (effectiveLabels == null) {
              throw new MissingRequiredPropertyException("GetGlobalForwardingRuleResult", "effectiveLabels");
            }
            this.effectiveLabels = effectiveLabels;
            return this;
        }
        @CustomType.Setter
        public Builder forwardingRuleId(Integer forwardingRuleId) {
            if (forwardingRuleId == null) {
              throw new MissingRequiredPropertyException("GetGlobalForwardingRuleResult", "forwardingRuleId");
            }
            this.forwardingRuleId = forwardingRuleId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetGlobalForwardingRuleResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ipAddress(String ipAddress) {
            if (ipAddress == null) {
              throw new MissingRequiredPropertyException("GetGlobalForwardingRuleResult", "ipAddress");
            }
            this.ipAddress = ipAddress;
            return this;
        }
        @CustomType.Setter
        public Builder ipProtocol(String ipProtocol) {
            if (ipProtocol == null) {
              throw new MissingRequiredPropertyException("GetGlobalForwardingRuleResult", "ipProtocol");
            }
            this.ipProtocol = ipProtocol;
            return this;
        }
        @CustomType.Setter
        public Builder ipVersion(String ipVersion) {
            if (ipVersion == null) {
              throw new MissingRequiredPropertyException("GetGlobalForwardingRuleResult", "ipVersion");
            }
            this.ipVersion = ipVersion;
            return this;
        }
        @CustomType.Setter
        public Builder labelFingerprint(String labelFingerprint) {
            if (labelFingerprint == null) {
              throw new MissingRequiredPropertyException("GetGlobalForwardingRuleResult", "labelFingerprint");
            }
            this.labelFingerprint = labelFingerprint;
            return this;
        }
        @CustomType.Setter
        public Builder labels(Map<String,String> labels) {
            if (labels == null) {
              throw new MissingRequiredPropertyException("GetGlobalForwardingRuleResult", "labels");
            }
            this.labels = labels;
            return this;
        }
        @CustomType.Setter
        public Builder loadBalancingScheme(String loadBalancingScheme) {
            if (loadBalancingScheme == null) {
              throw new MissingRequiredPropertyException("GetGlobalForwardingRuleResult", "loadBalancingScheme");
            }
            this.loadBalancingScheme = loadBalancingScheme;
            return this;
        }
        @CustomType.Setter
        public Builder metadataFilters(List<GetGlobalForwardingRuleMetadataFilter> metadataFilters) {
            if (metadataFilters == null) {
              throw new MissingRequiredPropertyException("GetGlobalForwardingRuleResult", "metadataFilters");
            }
            this.metadataFilters = metadataFilters;
            return this;
        }
        public Builder metadataFilters(GetGlobalForwardingRuleMetadataFilter... metadataFilters) {
            return metadataFilters(List.of(metadataFilters));
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetGlobalForwardingRuleResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder network(String network) {
            if (network == null) {
              throw new MissingRequiredPropertyException("GetGlobalForwardingRuleResult", "network");
            }
            this.network = network;
            return this;
        }
        @CustomType.Setter
        public Builder noAutomateDnsZone(Boolean noAutomateDnsZone) {
            if (noAutomateDnsZone == null) {
              throw new MissingRequiredPropertyException("GetGlobalForwardingRuleResult", "noAutomateDnsZone");
            }
            this.noAutomateDnsZone = noAutomateDnsZone;
            return this;
        }
        @CustomType.Setter
        public Builder portRange(String portRange) {
            if (portRange == null) {
              throw new MissingRequiredPropertyException("GetGlobalForwardingRuleResult", "portRange");
            }
            this.portRange = portRange;
            return this;
        }
        @CustomType.Setter
        public Builder project(@Nullable String project) {

            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder pscConnectionId(String pscConnectionId) {
            if (pscConnectionId == null) {
              throw new MissingRequiredPropertyException("GetGlobalForwardingRuleResult", "pscConnectionId");
            }
            this.pscConnectionId = pscConnectionId;
            return this;
        }
        @CustomType.Setter
        public Builder pscConnectionStatus(String pscConnectionStatus) {
            if (pscConnectionStatus == null) {
              throw new MissingRequiredPropertyException("GetGlobalForwardingRuleResult", "pscConnectionStatus");
            }
            this.pscConnectionStatus = pscConnectionStatus;
            return this;
        }
        @CustomType.Setter
        public Builder pulumiLabels(Map<String,String> pulumiLabels) {
            if (pulumiLabels == null) {
              throw new MissingRequiredPropertyException("GetGlobalForwardingRuleResult", "pulumiLabels");
            }
            this.pulumiLabels = pulumiLabels;
            return this;
        }
        @CustomType.Setter
        public Builder selfLink(String selfLink) {
            if (selfLink == null) {
              throw new MissingRequiredPropertyException("GetGlobalForwardingRuleResult", "selfLink");
            }
            this.selfLink = selfLink;
            return this;
        }
        @CustomType.Setter
        public Builder serviceDirectoryRegistrations(List<GetGlobalForwardingRuleServiceDirectoryRegistration> serviceDirectoryRegistrations) {
            if (serviceDirectoryRegistrations == null) {
              throw new MissingRequiredPropertyException("GetGlobalForwardingRuleResult", "serviceDirectoryRegistrations");
            }
            this.serviceDirectoryRegistrations = serviceDirectoryRegistrations;
            return this;
        }
        public Builder serviceDirectoryRegistrations(GetGlobalForwardingRuleServiceDirectoryRegistration... serviceDirectoryRegistrations) {
            return serviceDirectoryRegistrations(List.of(serviceDirectoryRegistrations));
        }
        @CustomType.Setter
        public Builder sourceIpRanges(List<String> sourceIpRanges) {
            if (sourceIpRanges == null) {
              throw new MissingRequiredPropertyException("GetGlobalForwardingRuleResult", "sourceIpRanges");
            }
            this.sourceIpRanges = sourceIpRanges;
            return this;
        }
        public Builder sourceIpRanges(String... sourceIpRanges) {
            return sourceIpRanges(List.of(sourceIpRanges));
        }
        @CustomType.Setter
        public Builder subnetwork(String subnetwork) {
            if (subnetwork == null) {
              throw new MissingRequiredPropertyException("GetGlobalForwardingRuleResult", "subnetwork");
            }
            this.subnetwork = subnetwork;
            return this;
        }
        @CustomType.Setter
        public Builder target(String target) {
            if (target == null) {
              throw new MissingRequiredPropertyException("GetGlobalForwardingRuleResult", "target");
            }
            this.target = target;
            return this;
        }
        public GetGlobalForwardingRuleResult build() {
            final var _resultValue = new GetGlobalForwardingRuleResult();
            _resultValue.allowPscGlobalAccess = allowPscGlobalAccess;
            _resultValue.baseForwardingRule = baseForwardingRule;
            _resultValue.description = description;
            _resultValue.effectiveLabels = effectiveLabels;
            _resultValue.forwardingRuleId = forwardingRuleId;
            _resultValue.id = id;
            _resultValue.ipAddress = ipAddress;
            _resultValue.ipProtocol = ipProtocol;
            _resultValue.ipVersion = ipVersion;
            _resultValue.labelFingerprint = labelFingerprint;
            _resultValue.labels = labels;
            _resultValue.loadBalancingScheme = loadBalancingScheme;
            _resultValue.metadataFilters = metadataFilters;
            _resultValue.name = name;
            _resultValue.network = network;
            _resultValue.noAutomateDnsZone = noAutomateDnsZone;
            _resultValue.portRange = portRange;
            _resultValue.project = project;
            _resultValue.pscConnectionId = pscConnectionId;
            _resultValue.pscConnectionStatus = pscConnectionStatus;
            _resultValue.pulumiLabels = pulumiLabels;
            _resultValue.selfLink = selfLink;
            _resultValue.serviceDirectoryRegistrations = serviceDirectoryRegistrations;
            _resultValue.sourceIpRanges = sourceIpRanges;
            _resultValue.subnetwork = subnetwork;
            _resultValue.target = target;
            return _resultValue;
        }
    }
}
