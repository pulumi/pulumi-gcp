// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.datastream.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StreamDestinationConfigBigqueryDestinationConfigBlmtConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final StreamDestinationConfigBigqueryDestinationConfigBlmtConfigArgs Empty = new StreamDestinationConfigBigqueryDestinationConfigBlmtConfigArgs();

    /**
     * The Cloud Storage bucket name.
     * 
     */
    @Import(name="bucket", required=true)
    private Output<String> bucket;

    /**
     * @return The Cloud Storage bucket name.
     * 
     */
    public Output<String> bucket() {
        return this.bucket;
    }

    /**
     * The bigquery connection. Format: `{project}.{location}.{name}`
     * 
     */
    @Import(name="connectionName", required=true)
    private Output<String> connectionName;

    /**
     * @return The bigquery connection. Format: `{project}.{location}.{name}`
     * 
     */
    public Output<String> connectionName() {
        return this.connectionName;
    }

    /**
     * The file format.
     * 
     */
    @Import(name="fileFormat", required=true)
    private Output<String> fileFormat;

    /**
     * @return The file format.
     * 
     */
    public Output<String> fileFormat() {
        return this.fileFormat;
    }

    /**
     * The root path inside the Cloud Storage bucket.
     * 
     */
    @Import(name="rootPath")
    private @Nullable Output<String> rootPath;

    /**
     * @return The root path inside the Cloud Storage bucket.
     * 
     */
    public Optional<Output<String>> rootPath() {
        return Optional.ofNullable(this.rootPath);
    }

    /**
     * The table format.
     * 
     */
    @Import(name="tableFormat", required=true)
    private Output<String> tableFormat;

    /**
     * @return The table format.
     * 
     */
    public Output<String> tableFormat() {
        return this.tableFormat;
    }

    private StreamDestinationConfigBigqueryDestinationConfigBlmtConfigArgs() {}

    private StreamDestinationConfigBigqueryDestinationConfigBlmtConfigArgs(StreamDestinationConfigBigqueryDestinationConfigBlmtConfigArgs $) {
        this.bucket = $.bucket;
        this.connectionName = $.connectionName;
        this.fileFormat = $.fileFormat;
        this.rootPath = $.rootPath;
        this.tableFormat = $.tableFormat;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StreamDestinationConfigBigqueryDestinationConfigBlmtConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StreamDestinationConfigBigqueryDestinationConfigBlmtConfigArgs $;

        public Builder() {
            $ = new StreamDestinationConfigBigqueryDestinationConfigBlmtConfigArgs();
        }

        public Builder(StreamDestinationConfigBigqueryDestinationConfigBlmtConfigArgs defaults) {
            $ = new StreamDestinationConfigBigqueryDestinationConfigBlmtConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bucket The Cloud Storage bucket name.
         * 
         * @return builder
         * 
         */
        public Builder bucket(Output<String> bucket) {
            $.bucket = bucket;
            return this;
        }

        /**
         * @param bucket The Cloud Storage bucket name.
         * 
         * @return builder
         * 
         */
        public Builder bucket(String bucket) {
            return bucket(Output.of(bucket));
        }

        /**
         * @param connectionName The bigquery connection. Format: `{project}.{location}.{name}`
         * 
         * @return builder
         * 
         */
        public Builder connectionName(Output<String> connectionName) {
            $.connectionName = connectionName;
            return this;
        }

        /**
         * @param connectionName The bigquery connection. Format: `{project}.{location}.{name}`
         * 
         * @return builder
         * 
         */
        public Builder connectionName(String connectionName) {
            return connectionName(Output.of(connectionName));
        }

        /**
         * @param fileFormat The file format.
         * 
         * @return builder
         * 
         */
        public Builder fileFormat(Output<String> fileFormat) {
            $.fileFormat = fileFormat;
            return this;
        }

        /**
         * @param fileFormat The file format.
         * 
         * @return builder
         * 
         */
        public Builder fileFormat(String fileFormat) {
            return fileFormat(Output.of(fileFormat));
        }

        /**
         * @param rootPath The root path inside the Cloud Storage bucket.
         * 
         * @return builder
         * 
         */
        public Builder rootPath(@Nullable Output<String> rootPath) {
            $.rootPath = rootPath;
            return this;
        }

        /**
         * @param rootPath The root path inside the Cloud Storage bucket.
         * 
         * @return builder
         * 
         */
        public Builder rootPath(String rootPath) {
            return rootPath(Output.of(rootPath));
        }

        /**
         * @param tableFormat The table format.
         * 
         * @return builder
         * 
         */
        public Builder tableFormat(Output<String> tableFormat) {
            $.tableFormat = tableFormat;
            return this;
        }

        /**
         * @param tableFormat The table format.
         * 
         * @return builder
         * 
         */
        public Builder tableFormat(String tableFormat) {
            return tableFormat(Output.of(tableFormat));
        }

        public StreamDestinationConfigBigqueryDestinationConfigBlmtConfigArgs build() {
            if ($.bucket == null) {
                throw new MissingRequiredPropertyException("StreamDestinationConfigBigqueryDestinationConfigBlmtConfigArgs", "bucket");
            }
            if ($.connectionName == null) {
                throw new MissingRequiredPropertyException("StreamDestinationConfigBigqueryDestinationConfigBlmtConfigArgs", "connectionName");
            }
            if ($.fileFormat == null) {
                throw new MissingRequiredPropertyException("StreamDestinationConfigBigqueryDestinationConfigBlmtConfigArgs", "fileFormat");
            }
            if ($.tableFormat == null) {
                throw new MissingRequiredPropertyException("StreamDestinationConfigBigqueryDestinationConfigBlmtConfigArgs", "tableFormat");
            }
            return $;
        }
    }

}
