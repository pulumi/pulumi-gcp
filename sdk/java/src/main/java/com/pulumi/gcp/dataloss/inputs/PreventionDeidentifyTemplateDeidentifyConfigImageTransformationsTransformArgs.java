// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.dataloss.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.dataloss.inputs.PreventionDeidentifyTemplateDeidentifyConfigImageTransformationsTransformAllInfoTypesArgs;
import com.pulumi.gcp.dataloss.inputs.PreventionDeidentifyTemplateDeidentifyConfigImageTransformationsTransformAllTextArgs;
import com.pulumi.gcp.dataloss.inputs.PreventionDeidentifyTemplateDeidentifyConfigImageTransformationsTransformRedactionColorArgs;
import com.pulumi.gcp.dataloss.inputs.PreventionDeidentifyTemplateDeidentifyConfigImageTransformationsTransformSelectedInfoTypesArgs;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PreventionDeidentifyTemplateDeidentifyConfigImageTransformationsTransformArgs extends com.pulumi.resources.ResourceArgs {

    public static final PreventionDeidentifyTemplateDeidentifyConfigImageTransformationsTransformArgs Empty = new PreventionDeidentifyTemplateDeidentifyConfigImageTransformationsTransformArgs();

    /**
     * Apply transformation to all findings not specified in other ImageTransformation&#39;s selectedInfoTypes.
     * 
     */
    @Import(name="allInfoTypes")
    private @Nullable Output<PreventionDeidentifyTemplateDeidentifyConfigImageTransformationsTransformAllInfoTypesArgs> allInfoTypes;

    /**
     * @return Apply transformation to all findings not specified in other ImageTransformation&#39;s selectedInfoTypes.
     * 
     */
    public Optional<Output<PreventionDeidentifyTemplateDeidentifyConfigImageTransformationsTransformAllInfoTypesArgs>> allInfoTypes() {
        return Optional.ofNullable(this.allInfoTypes);
    }

    /**
     * Apply transformation to all text that doesn&#39;t match an infoType.
     * 
     */
    @Import(name="allText")
    private @Nullable Output<PreventionDeidentifyTemplateDeidentifyConfigImageTransformationsTransformAllTextArgs> allText;

    /**
     * @return Apply transformation to all text that doesn&#39;t match an infoType.
     * 
     */
    public Optional<Output<PreventionDeidentifyTemplateDeidentifyConfigImageTransformationsTransformAllTextArgs>> allText() {
        return Optional.ofNullable(this.allText);
    }

    /**
     * The color to use when redacting content from an image. If not specified, the default is black.
     * Structure is documented below.
     * 
     */
    @Import(name="redactionColor")
    private @Nullable Output<PreventionDeidentifyTemplateDeidentifyConfigImageTransformationsTransformRedactionColorArgs> redactionColor;

    /**
     * @return The color to use when redacting content from an image. If not specified, the default is black.
     * Structure is documented below.
     * 
     */
    public Optional<Output<PreventionDeidentifyTemplateDeidentifyConfigImageTransformationsTransformRedactionColorArgs>> redactionColor() {
        return Optional.ofNullable(this.redactionColor);
    }

    /**
     * Apply transformation to the selected infoTypes.
     * Structure is documented below.
     * 
     */
    @Import(name="selectedInfoTypes")
    private @Nullable Output<PreventionDeidentifyTemplateDeidentifyConfigImageTransformationsTransformSelectedInfoTypesArgs> selectedInfoTypes;

    /**
     * @return Apply transformation to the selected infoTypes.
     * Structure is documented below.
     * 
     */
    public Optional<Output<PreventionDeidentifyTemplateDeidentifyConfigImageTransformationsTransformSelectedInfoTypesArgs>> selectedInfoTypes() {
        return Optional.ofNullable(this.selectedInfoTypes);
    }

    private PreventionDeidentifyTemplateDeidentifyConfigImageTransformationsTransformArgs() {}

    private PreventionDeidentifyTemplateDeidentifyConfigImageTransformationsTransformArgs(PreventionDeidentifyTemplateDeidentifyConfigImageTransformationsTransformArgs $) {
        this.allInfoTypes = $.allInfoTypes;
        this.allText = $.allText;
        this.redactionColor = $.redactionColor;
        this.selectedInfoTypes = $.selectedInfoTypes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PreventionDeidentifyTemplateDeidentifyConfigImageTransformationsTransformArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PreventionDeidentifyTemplateDeidentifyConfigImageTransformationsTransformArgs $;

        public Builder() {
            $ = new PreventionDeidentifyTemplateDeidentifyConfigImageTransformationsTransformArgs();
        }

        public Builder(PreventionDeidentifyTemplateDeidentifyConfigImageTransformationsTransformArgs defaults) {
            $ = new PreventionDeidentifyTemplateDeidentifyConfigImageTransformationsTransformArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allInfoTypes Apply transformation to all findings not specified in other ImageTransformation&#39;s selectedInfoTypes.
         * 
         * @return builder
         * 
         */
        public Builder allInfoTypes(@Nullable Output<PreventionDeidentifyTemplateDeidentifyConfigImageTransformationsTransformAllInfoTypesArgs> allInfoTypes) {
            $.allInfoTypes = allInfoTypes;
            return this;
        }

        /**
         * @param allInfoTypes Apply transformation to all findings not specified in other ImageTransformation&#39;s selectedInfoTypes.
         * 
         * @return builder
         * 
         */
        public Builder allInfoTypes(PreventionDeidentifyTemplateDeidentifyConfigImageTransformationsTransformAllInfoTypesArgs allInfoTypes) {
            return allInfoTypes(Output.of(allInfoTypes));
        }

        /**
         * @param allText Apply transformation to all text that doesn&#39;t match an infoType.
         * 
         * @return builder
         * 
         */
        public Builder allText(@Nullable Output<PreventionDeidentifyTemplateDeidentifyConfigImageTransformationsTransformAllTextArgs> allText) {
            $.allText = allText;
            return this;
        }

        /**
         * @param allText Apply transformation to all text that doesn&#39;t match an infoType.
         * 
         * @return builder
         * 
         */
        public Builder allText(PreventionDeidentifyTemplateDeidentifyConfigImageTransformationsTransformAllTextArgs allText) {
            return allText(Output.of(allText));
        }

        /**
         * @param redactionColor The color to use when redacting content from an image. If not specified, the default is black.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder redactionColor(@Nullable Output<PreventionDeidentifyTemplateDeidentifyConfigImageTransformationsTransformRedactionColorArgs> redactionColor) {
            $.redactionColor = redactionColor;
            return this;
        }

        /**
         * @param redactionColor The color to use when redacting content from an image. If not specified, the default is black.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder redactionColor(PreventionDeidentifyTemplateDeidentifyConfigImageTransformationsTransformRedactionColorArgs redactionColor) {
            return redactionColor(Output.of(redactionColor));
        }

        /**
         * @param selectedInfoTypes Apply transformation to the selected infoTypes.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder selectedInfoTypes(@Nullable Output<PreventionDeidentifyTemplateDeidentifyConfigImageTransformationsTransformSelectedInfoTypesArgs> selectedInfoTypes) {
            $.selectedInfoTypes = selectedInfoTypes;
            return this;
        }

        /**
         * @param selectedInfoTypes Apply transformation to the selected infoTypes.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder selectedInfoTypes(PreventionDeidentifyTemplateDeidentifyConfigImageTransformationsTransformSelectedInfoTypesArgs selectedInfoTypes) {
            return selectedInfoTypes(Output.of(selectedInfoTypes));
        }

        public PreventionDeidentifyTemplateDeidentifyConfigImageTransformationsTransformArgs build() {
            return $;
        }
    }

}
