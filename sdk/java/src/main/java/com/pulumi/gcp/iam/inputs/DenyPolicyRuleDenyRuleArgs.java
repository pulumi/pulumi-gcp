// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.iam.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.iam.inputs.DenyPolicyRuleDenyRuleDenialConditionArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DenyPolicyRuleDenyRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final DenyPolicyRuleDenyRuleArgs Empty = new DenyPolicyRuleDenyRuleArgs();

    /**
     * User defined CEVAL expression. A CEVAL expression is used to specify match criteria such as origin.ip, source.region_code and contents in the request header.
     * Structure is documented below.
     * 
     */
    @Import(name="denialCondition", required=true)
    private Output<DenyPolicyRuleDenyRuleDenialConditionArgs> denialCondition;

    /**
     * @return User defined CEVAL expression. A CEVAL expression is used to specify match criteria such as origin.ip, source.region_code and contents in the request header.
     * Structure is documented below.
     * 
     */
    public Output<DenyPolicyRuleDenyRuleDenialConditionArgs> denialCondition() {
        return this.denialCondition;
    }

    /**
     * The permissions that are explicitly denied by this rule. Each permission uses the format `{service-fqdn}/{resource}.{verb}`,
     * where `{service-fqdn}` is the fully qualified domain name for the service. For example, `iam.googleapis.com/roles.list`.
     * 
     */
    @Import(name="deniedPermissions")
    private @Nullable Output<List<String>> deniedPermissions;

    /**
     * @return The permissions that are explicitly denied by this rule. Each permission uses the format `{service-fqdn}/{resource}.{verb}`,
     * where `{service-fqdn}` is the fully qualified domain name for the service. For example, `iam.googleapis.com/roles.list`.
     * 
     */
    public Optional<Output<List<String>>> deniedPermissions() {
        return Optional.ofNullable(this.deniedPermissions);
    }

    /**
     * The identities that are prevented from using one or more permissions on Google Cloud resources.
     * 
     */
    @Import(name="deniedPrincipals")
    private @Nullable Output<List<String>> deniedPrincipals;

    /**
     * @return The identities that are prevented from using one or more permissions on Google Cloud resources.
     * 
     */
    public Optional<Output<List<String>>> deniedPrincipals() {
        return Optional.ofNullable(this.deniedPrincipals);
    }

    /**
     * Specifies the permissions that this rule excludes from the set of denied permissions given by deniedPermissions.
     * If a permission appears in deniedPermissions and in exceptionPermissions then it will not be denied.
     * The excluded permissions can be specified using the same syntax as deniedPermissions.
     * 
     */
    @Import(name="exceptionPermissions")
    private @Nullable Output<List<String>> exceptionPermissions;

    /**
     * @return Specifies the permissions that this rule excludes from the set of denied permissions given by deniedPermissions.
     * If a permission appears in deniedPermissions and in exceptionPermissions then it will not be denied.
     * The excluded permissions can be specified using the same syntax as deniedPermissions.
     * 
     */
    public Optional<Output<List<String>>> exceptionPermissions() {
        return Optional.ofNullable(this.exceptionPermissions);
    }

    /**
     * The identities that are excluded from the deny rule, even if they are listed in the deniedPrincipals.
     * For example, you could add a Google group to the deniedPrincipals, then exclude specific users who belong to that group.
     * 
     */
    @Import(name="exceptionPrincipals")
    private @Nullable Output<List<String>> exceptionPrincipals;

    /**
     * @return The identities that are excluded from the deny rule, even if they are listed in the deniedPrincipals.
     * For example, you could add a Google group to the deniedPrincipals, then exclude specific users who belong to that group.
     * 
     */
    public Optional<Output<List<String>>> exceptionPrincipals() {
        return Optional.ofNullable(this.exceptionPrincipals);
    }

    private DenyPolicyRuleDenyRuleArgs() {}

    private DenyPolicyRuleDenyRuleArgs(DenyPolicyRuleDenyRuleArgs $) {
        this.denialCondition = $.denialCondition;
        this.deniedPermissions = $.deniedPermissions;
        this.deniedPrincipals = $.deniedPrincipals;
        this.exceptionPermissions = $.exceptionPermissions;
        this.exceptionPrincipals = $.exceptionPrincipals;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DenyPolicyRuleDenyRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DenyPolicyRuleDenyRuleArgs $;

        public Builder() {
            $ = new DenyPolicyRuleDenyRuleArgs();
        }

        public Builder(DenyPolicyRuleDenyRuleArgs defaults) {
            $ = new DenyPolicyRuleDenyRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param denialCondition User defined CEVAL expression. A CEVAL expression is used to specify match criteria such as origin.ip, source.region_code and contents in the request header.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder denialCondition(Output<DenyPolicyRuleDenyRuleDenialConditionArgs> denialCondition) {
            $.denialCondition = denialCondition;
            return this;
        }

        /**
         * @param denialCondition User defined CEVAL expression. A CEVAL expression is used to specify match criteria such as origin.ip, source.region_code and contents in the request header.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder denialCondition(DenyPolicyRuleDenyRuleDenialConditionArgs denialCondition) {
            return denialCondition(Output.of(denialCondition));
        }

        /**
         * @param deniedPermissions The permissions that are explicitly denied by this rule. Each permission uses the format `{service-fqdn}/{resource}.{verb}`,
         * where `{service-fqdn}` is the fully qualified domain name for the service. For example, `iam.googleapis.com/roles.list`.
         * 
         * @return builder
         * 
         */
        public Builder deniedPermissions(@Nullable Output<List<String>> deniedPermissions) {
            $.deniedPermissions = deniedPermissions;
            return this;
        }

        /**
         * @param deniedPermissions The permissions that are explicitly denied by this rule. Each permission uses the format `{service-fqdn}/{resource}.{verb}`,
         * where `{service-fqdn}` is the fully qualified domain name for the service. For example, `iam.googleapis.com/roles.list`.
         * 
         * @return builder
         * 
         */
        public Builder deniedPermissions(List<String> deniedPermissions) {
            return deniedPermissions(Output.of(deniedPermissions));
        }

        /**
         * @param deniedPermissions The permissions that are explicitly denied by this rule. Each permission uses the format `{service-fqdn}/{resource}.{verb}`,
         * where `{service-fqdn}` is the fully qualified domain name for the service. For example, `iam.googleapis.com/roles.list`.
         * 
         * @return builder
         * 
         */
        public Builder deniedPermissions(String... deniedPermissions) {
            return deniedPermissions(List.of(deniedPermissions));
        }

        /**
         * @param deniedPrincipals The identities that are prevented from using one or more permissions on Google Cloud resources.
         * 
         * @return builder
         * 
         */
        public Builder deniedPrincipals(@Nullable Output<List<String>> deniedPrincipals) {
            $.deniedPrincipals = deniedPrincipals;
            return this;
        }

        /**
         * @param deniedPrincipals The identities that are prevented from using one or more permissions on Google Cloud resources.
         * 
         * @return builder
         * 
         */
        public Builder deniedPrincipals(List<String> deniedPrincipals) {
            return deniedPrincipals(Output.of(deniedPrincipals));
        }

        /**
         * @param deniedPrincipals The identities that are prevented from using one or more permissions on Google Cloud resources.
         * 
         * @return builder
         * 
         */
        public Builder deniedPrincipals(String... deniedPrincipals) {
            return deniedPrincipals(List.of(deniedPrincipals));
        }

        /**
         * @param exceptionPermissions Specifies the permissions that this rule excludes from the set of denied permissions given by deniedPermissions.
         * If a permission appears in deniedPermissions and in exceptionPermissions then it will not be denied.
         * The excluded permissions can be specified using the same syntax as deniedPermissions.
         * 
         * @return builder
         * 
         */
        public Builder exceptionPermissions(@Nullable Output<List<String>> exceptionPermissions) {
            $.exceptionPermissions = exceptionPermissions;
            return this;
        }

        /**
         * @param exceptionPermissions Specifies the permissions that this rule excludes from the set of denied permissions given by deniedPermissions.
         * If a permission appears in deniedPermissions and in exceptionPermissions then it will not be denied.
         * The excluded permissions can be specified using the same syntax as deniedPermissions.
         * 
         * @return builder
         * 
         */
        public Builder exceptionPermissions(List<String> exceptionPermissions) {
            return exceptionPermissions(Output.of(exceptionPermissions));
        }

        /**
         * @param exceptionPermissions Specifies the permissions that this rule excludes from the set of denied permissions given by deniedPermissions.
         * If a permission appears in deniedPermissions and in exceptionPermissions then it will not be denied.
         * The excluded permissions can be specified using the same syntax as deniedPermissions.
         * 
         * @return builder
         * 
         */
        public Builder exceptionPermissions(String... exceptionPermissions) {
            return exceptionPermissions(List.of(exceptionPermissions));
        }

        /**
         * @param exceptionPrincipals The identities that are excluded from the deny rule, even if they are listed in the deniedPrincipals.
         * For example, you could add a Google group to the deniedPrincipals, then exclude specific users who belong to that group.
         * 
         * @return builder
         * 
         */
        public Builder exceptionPrincipals(@Nullable Output<List<String>> exceptionPrincipals) {
            $.exceptionPrincipals = exceptionPrincipals;
            return this;
        }

        /**
         * @param exceptionPrincipals The identities that are excluded from the deny rule, even if they are listed in the deniedPrincipals.
         * For example, you could add a Google group to the deniedPrincipals, then exclude specific users who belong to that group.
         * 
         * @return builder
         * 
         */
        public Builder exceptionPrincipals(List<String> exceptionPrincipals) {
            return exceptionPrincipals(Output.of(exceptionPrincipals));
        }

        /**
         * @param exceptionPrincipals The identities that are excluded from the deny rule, even if they are listed in the deniedPrincipals.
         * For example, you could add a Google group to the deniedPrincipals, then exclude specific users who belong to that group.
         * 
         * @return builder
         * 
         */
        public Builder exceptionPrincipals(String... exceptionPrincipals) {
            return exceptionPrincipals(List.of(exceptionPrincipals));
        }

        public DenyPolicyRuleDenyRuleArgs build() {
            $.denialCondition = Objects.requireNonNull($.denialCondition, "expected parameter 'denialCondition' to be non-null");
            return $;
        }
    }

}
