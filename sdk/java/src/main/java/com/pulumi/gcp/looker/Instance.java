// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.looker;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.gcp.Utilities;
import com.pulumi.gcp.looker.InstanceArgs;
import com.pulumi.gcp.looker.inputs.InstanceState;
import com.pulumi.gcp.looker.outputs.InstanceAdminSettings;
import com.pulumi.gcp.looker.outputs.InstanceCustomDomain;
import com.pulumi.gcp.looker.outputs.InstanceDenyMaintenancePeriod;
import com.pulumi.gcp.looker.outputs.InstanceEncryptionConfig;
import com.pulumi.gcp.looker.outputs.InstanceMaintenanceWindow;
import com.pulumi.gcp.looker.outputs.InstanceOauthConfig;
import com.pulumi.gcp.looker.outputs.InstancePscConfig;
import com.pulumi.gcp.looker.outputs.InstanceUserMetadata;
import java.lang.Boolean;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * A Google Cloud Looker instance.
 * 
 * To get more information about Instance, see:
 * 
 * * [API documentation](https://cloud.google.com/looker/docs/reference/rest/v1/projects.locations.instances)
 * * How-to Guides
 *     * [Configure a Looker (Google Cloud core) instance](https://cloud.google.com/looker/docs/looker-core-instance-setup)
 *     * [Create a Looker (Google Cloud core) instance](https://cloud.google.com/looker/docs/looker-core-instance-create)
 * 
 * ## Example Usage
 * 
 * ### Looker Instance Basic
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.looker.Instance;
 * import com.pulumi.gcp.looker.InstanceArgs;
 * import com.pulumi.gcp.looker.inputs.InstanceOauthConfigArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var looker_instance = new Instance("looker-instance", InstanceArgs.builder()
 *             .name("my-instance")
 *             .platformEdition("LOOKER_CORE_STANDARD_ANNUAL")
 *             .region("us-central1")
 *             .oauthConfig(InstanceOauthConfigArgs.builder()
 *                 .clientId("my-client-id")
 *                 .clientSecret("my-client-secret")
 *                 .build())
 *             .deletionPolicy("DEFAULT")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Looker Instance Full
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.looker.Instance;
 * import com.pulumi.gcp.looker.InstanceArgs;
 * import com.pulumi.gcp.looker.inputs.InstanceAdminSettingsArgs;
 * import com.pulumi.gcp.looker.inputs.InstanceMaintenanceWindowArgs;
 * import com.pulumi.gcp.looker.inputs.InstanceMaintenanceWindowStartTimeArgs;
 * import com.pulumi.gcp.looker.inputs.InstanceDenyMaintenancePeriodArgs;
 * import com.pulumi.gcp.looker.inputs.InstanceDenyMaintenancePeriodStartDateArgs;
 * import com.pulumi.gcp.looker.inputs.InstanceDenyMaintenancePeriodEndDateArgs;
 * import com.pulumi.gcp.looker.inputs.InstanceDenyMaintenancePeriodTimeArgs;
 * import com.pulumi.gcp.looker.inputs.InstanceOauthConfigArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var looker_instance = new Instance("looker-instance", InstanceArgs.builder()
 *             .name("my-instance")
 *             .platformEdition("LOOKER_CORE_STANDARD_ANNUAL")
 *             .region("us-central1")
 *             .publicIpEnabled(true)
 *             .adminSettings(InstanceAdminSettingsArgs.builder()
 *                 .allowedEmailDomains("google.com")
 *                 .build())
 *             .maintenanceWindow(InstanceMaintenanceWindowArgs.builder()
 *                 .dayOfWeek("THURSDAY")
 *                 .startTime(InstanceMaintenanceWindowStartTimeArgs.builder()
 *                     .hours(22)
 *                     .minutes(0)
 *                     .seconds(0)
 *                     .nanos(0)
 *                     .build())
 *                 .build())
 *             .denyMaintenancePeriod(InstanceDenyMaintenancePeriodArgs.builder()
 *                 .startDate(InstanceDenyMaintenancePeriodStartDateArgs.builder()
 *                     .year(2050)
 *                     .month(1)
 *                     .day(1)
 *                     .build())
 *                 .endDate(InstanceDenyMaintenancePeriodEndDateArgs.builder()
 *                     .year(2050)
 *                     .month(2)
 *                     .day(1)
 *                     .build())
 *                 .time(InstanceDenyMaintenancePeriodTimeArgs.builder()
 *                     .hours(10)
 *                     .minutes(0)
 *                     .seconds(0)
 *                     .nanos(0)
 *                     .build())
 *                 .build())
 *             .oauthConfig(InstanceOauthConfigArgs.builder()
 *                 .clientId("my-client-id")
 *                 .clientSecret("my-client-secret")
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Looker Instance Fips
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.looker.Instance;
 * import com.pulumi.gcp.looker.InstanceArgs;
 * import com.pulumi.gcp.looker.inputs.InstanceOauthConfigArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var looker_instance = new Instance("looker-instance", InstanceArgs.builder()
 *             .name("my-instance-fips")
 *             .platformEdition("LOOKER_CORE_ENTERPRISE_ANNUAL")
 *             .region("us-central1")
 *             .publicIpEnabled(true)
 *             .fipsEnabled(true)
 *             .oauthConfig(InstanceOauthConfigArgs.builder()
 *                 .clientId("my-client-id")
 *                 .clientSecret("my-client-secret")
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Looker Instance Enterprise Full
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.compute.Network;
 * import com.pulumi.gcp.compute.NetworkArgs;
 * import com.pulumi.gcp.compute.GlobalAddress;
 * import com.pulumi.gcp.compute.GlobalAddressArgs;
 * import com.pulumi.gcp.servicenetworking.Connection;
 * import com.pulumi.gcp.servicenetworking.ConnectionArgs;
 * import com.pulumi.gcp.looker.Instance;
 * import com.pulumi.gcp.looker.InstanceArgs;
 * import com.pulumi.gcp.looker.inputs.InstanceAdminSettingsArgs;
 * import com.pulumi.gcp.looker.inputs.InstanceEncryptionConfigArgs;
 * import com.pulumi.gcp.looker.inputs.InstanceMaintenanceWindowArgs;
 * import com.pulumi.gcp.looker.inputs.InstanceMaintenanceWindowStartTimeArgs;
 * import com.pulumi.gcp.looker.inputs.InstanceDenyMaintenancePeriodArgs;
 * import com.pulumi.gcp.looker.inputs.InstanceDenyMaintenancePeriodStartDateArgs;
 * import com.pulumi.gcp.looker.inputs.InstanceDenyMaintenancePeriodEndDateArgs;
 * import com.pulumi.gcp.looker.inputs.InstanceDenyMaintenancePeriodTimeArgs;
 * import com.pulumi.gcp.looker.inputs.InstanceOauthConfigArgs;
 * import com.pulumi.gcp.organizations.OrganizationsFunctions;
 * import com.pulumi.gcp.organizations.inputs.GetProjectArgs;
 * import com.pulumi.gcp.kms.CryptoKeyIAMMember;
 * import com.pulumi.gcp.kms.CryptoKeyIAMMemberArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         var lookerNetwork = new Network("lookerNetwork", NetworkArgs.builder()
 *             .name("looker-network")
 *             .build());
 * 
 *         var lookerRange = new GlobalAddress("lookerRange", GlobalAddressArgs.builder()
 *             .name("looker-range")
 *             .purpose("VPC_PEERING")
 *             .addressType("INTERNAL")
 *             .prefixLength(20)
 *             .network(lookerNetwork.id())
 *             .build());
 * 
 *         var lookerVpcConnection = new Connection("lookerVpcConnection", ConnectionArgs.builder()
 *             .network(lookerNetwork.id())
 *             .service("servicenetworking.googleapis.com")
 *             .reservedPeeringRanges(lookerRange.name())
 *             .build());
 * 
 *         var looker_instance = new Instance("looker-instance", InstanceArgs.builder()
 *             .name("my-instance")
 *             .platformEdition("LOOKER_CORE_ENTERPRISE_ANNUAL")
 *             .region("us-central1")
 *             .privateIpEnabled(true)
 *             .publicIpEnabled(false)
 *             .reservedRange(lookerRange.name())
 *             .consumerNetwork(lookerNetwork.id())
 *             .adminSettings(InstanceAdminSettingsArgs.builder()
 *                 .allowedEmailDomains("google.com")
 *                 .build())
 *             .encryptionConfig(InstanceEncryptionConfigArgs.builder()
 *                 .kmsKeyName("looker-kms-key")
 *                 .build())
 *             .maintenanceWindow(InstanceMaintenanceWindowArgs.builder()
 *                 .dayOfWeek("THURSDAY")
 *                 .startTime(InstanceMaintenanceWindowStartTimeArgs.builder()
 *                     .hours(22)
 *                     .minutes(0)
 *                     .seconds(0)
 *                     .nanos(0)
 *                     .build())
 *                 .build())
 *             .denyMaintenancePeriod(InstanceDenyMaintenancePeriodArgs.builder()
 *                 .startDate(InstanceDenyMaintenancePeriodStartDateArgs.builder()
 *                     .year(2050)
 *                     .month(1)
 *                     .day(1)
 *                     .build())
 *                 .endDate(InstanceDenyMaintenancePeriodEndDateArgs.builder()
 *                     .year(2050)
 *                     .month(2)
 *                     .day(1)
 *                     .build())
 *                 .time(InstanceDenyMaintenancePeriodTimeArgs.builder()
 *                     .hours(10)
 *                     .minutes(0)
 *                     .seconds(0)
 *                     .nanos(0)
 *                     .build())
 *                 .build())
 *             .oauthConfig(InstanceOauthConfigArgs.builder()
 *                 .clientId("my-client-id")
 *                 .clientSecret("my-client-secret")
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(lookerVpcConnection)
 *                 .build());
 * 
 *         final var project = OrganizationsFunctions.getProject();
 * 
 *         var cryptoKey = new CryptoKeyIAMMember("cryptoKey", CryptoKeyIAMMemberArgs.builder()
 *             .cryptoKeyId("looker-kms-key")
 *             .role("roles/cloudkms.cryptoKeyEncrypterDecrypter")
 *             .member(String.format("serviceAccount:service-%s}{@literal @}{@code gcp-sa-looker.iam.gserviceaccount.com", project.applyValue(getProjectResult -> getProjectResult.number())))
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Looker Instance Custom Domain
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.looker.Instance;
 * import com.pulumi.gcp.looker.InstanceArgs;
 * import com.pulumi.gcp.looker.inputs.InstanceOauthConfigArgs;
 * import com.pulumi.gcp.looker.inputs.InstanceCustomDomainArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var looker_instance = new Instance("looker-instance", InstanceArgs.builder()
 *             .name("my-instance")
 *             .platformEdition("LOOKER_CORE_STANDARD_ANNUAL")
 *             .region("us-central1")
 *             .oauthConfig(InstanceOauthConfigArgs.builder()
 *                 .clientId("my-client-id")
 *                 .clientSecret("my-client-secret")
 *                 .build())
 *             .customDomain(InstanceCustomDomainArgs.builder()
 *                 .domain("my-custom-domain.com")
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Looker Instance Psc
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.looker.Instance;
 * import com.pulumi.gcp.looker.InstanceArgs;
 * import com.pulumi.gcp.looker.inputs.InstanceOauthConfigArgs;
 * import com.pulumi.gcp.looker.inputs.InstancePscConfigArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var looker_instance = new Instance("looker-instance", InstanceArgs.builder()
 *             .name("my-instance")
 *             .platformEdition("LOOKER_CORE_ENTERPRISE_ANNUAL")
 *             .region("us-central1")
 *             .privateIpEnabled(false)
 *             .publicIpEnabled(false)
 *             .pscEnabled(true)
 *             .oauthConfig(InstanceOauthConfigArgs.builder()
 *                 .clientId("my-client-id")
 *                 .clientSecret("my-client-secret")
 *                 .build())
 *             .pscConfig(InstancePscConfigArgs.builder()
 *                 .allowedVpcs("projects/test-project/global/networks/test")
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * ### Looker Instance Force Delete
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.gcp.looker.Instance;
 * import com.pulumi.gcp.looker.InstanceArgs;
 * import com.pulumi.gcp.looker.inputs.InstanceOauthConfigArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var looker_instance = new Instance("looker-instance", InstanceArgs.builder()
 *             .name("my-instance")
 *             .platformEdition("LOOKER_CORE_STANDARD_ANNUAL")
 *             .region("us-central1")
 *             .oauthConfig(InstanceOauthConfigArgs.builder()
 *                 .clientId("my-client-id")
 *                 .clientSecret("my-client-secret")
 *                 .build())
 *             .deletionPolicy("FORCE")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Instance can be imported using any of these accepted formats:
 * 
 * * `projects/{{project}}/locations/{{region}}/instances/{{name}}`
 * 
 * * `{{project}}/{{region}}/{{name}}`
 * 
 * * `{{region}}/{{name}}`
 * 
 * * `{{name}}`
 * 
 * When using the `pulumi import` command, Instance can be imported using one of the formats above. For example:
 * 
 * ```sh
 * $ pulumi import gcp:looker/instance:Instance default projects/{{project}}/locations/{{region}}/instances/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:looker/instance:Instance default {{project}}/{{region}}/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:looker/instance:Instance default {{region}}/{{name}}
 * ```
 * 
 * ```sh
 * $ pulumi import gcp:looker/instance:Instance default {{name}}
 * ```
 * 
 */
@ResourceType(type="gcp:looker/instance:Instance")
public class Instance extends com.pulumi.resources.CustomResource {
    /**
     * Looker instance Admin settings.
     * 
     */
    @Export(name="adminSettings", refs={InstanceAdminSettings.class}, tree="[0]")
    private Output</* @Nullable */ InstanceAdminSettings> adminSettings;

    /**
     * @return Looker instance Admin settings.
     * 
     */
    public Output<Optional<InstanceAdminSettings>> adminSettings() {
        return Codegen.optional(this.adminSettings);
    }
    /**
     * Network name in the consumer project in the format of: projects/{project}/global/networks/{network} Note that the
     * consumer network may be in a different GCP project than the consumer project that is hosting the Looker Instance.
     * 
     */
    @Export(name="consumerNetwork", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> consumerNetwork;

    /**
     * @return Network name in the consumer project in the format of: projects/{project}/global/networks/{network} Note that the
     * consumer network may be in a different GCP project than the consumer project that is hosting the Looker Instance.
     * 
     */
    public Output<Optional<String>> consumerNetwork() {
        return Codegen.optional(this.consumerNetwork);
    }
    /**
     * The time the instance was created in RFC3339 UTC &#34;Zulu&#34; format,
     * accurate to nanoseconds.
     * 
     */
    @Export(name="createTime", refs={String.class}, tree="[0]")
    private Output<String> createTime;

    /**
     * @return The time the instance was created in RFC3339 UTC &#34;Zulu&#34; format,
     * accurate to nanoseconds.
     * 
     */
    public Output<String> createTime() {
        return this.createTime;
    }
    /**
     * Custom domain settings for a Looker instance.
     * 
     */
    @Export(name="customDomain", refs={InstanceCustomDomain.class}, tree="[0]")
    private Output</* @Nullable */ InstanceCustomDomain> customDomain;

    /**
     * @return Custom domain settings for a Looker instance.
     * 
     */
    public Output<Optional<InstanceCustomDomain>> customDomain() {
        return Codegen.optional(this.customDomain);
    }
    /**
     * Policy to determine if the cluster should be deleted forcefully. If setting deletion_policy = &#34;FORCE&#34;, the Looker
     * instance will be deleted regardless of its nested resources. If set to &#34;DEFAULT&#34;, Looker instances that still have
     * nested resources will return an error. Possible values: DEFAULT, FORCE
     * 
     */
    @Export(name="deletionPolicy", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> deletionPolicy;

    /**
     * @return Policy to determine if the cluster should be deleted forcefully. If setting deletion_policy = &#34;FORCE&#34;, the Looker
     * instance will be deleted regardless of its nested resources. If set to &#34;DEFAULT&#34;, Looker instances that still have
     * nested resources will return an error. Possible values: DEFAULT, FORCE
     * 
     */
    public Output<Optional<String>> deletionPolicy() {
        return Codegen.optional(this.deletionPolicy);
    }
    /**
     * Maintenance denial period for this instance. You must allow at least 14 days of maintenance availability between any two
     * deny maintenance periods.
     * 
     */
    @Export(name="denyMaintenancePeriod", refs={InstanceDenyMaintenancePeriod.class}, tree="[0]")
    private Output</* @Nullable */ InstanceDenyMaintenancePeriod> denyMaintenancePeriod;

    /**
     * @return Maintenance denial period for this instance. You must allow at least 14 days of maintenance availability between any two
     * deny maintenance periods.
     * 
     */
    public Output<Optional<InstanceDenyMaintenancePeriod>> denyMaintenancePeriod() {
        return Codegen.optional(this.denyMaintenancePeriod);
    }
    /**
     * Public Egress IP (IPv4).
     * 
     */
    @Export(name="egressPublicIp", refs={String.class}, tree="[0]")
    private Output<String> egressPublicIp;

    /**
     * @return Public Egress IP (IPv4).
     * 
     */
    public Output<String> egressPublicIp() {
        return this.egressPublicIp;
    }
    /**
     * Looker instance encryption settings.
     * 
     */
    @Export(name="encryptionConfig", refs={InstanceEncryptionConfig.class}, tree="[0]")
    private Output<InstanceEncryptionConfig> encryptionConfig;

    /**
     * @return Looker instance encryption settings.
     * 
     */
    public Output<InstanceEncryptionConfig> encryptionConfig() {
        return this.encryptionConfig;
    }
    /**
     * FIPS 140-2 Encryption enablement for Looker (Google Cloud Core).
     * 
     */
    @Export(name="fipsEnabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> fipsEnabled;

    /**
     * @return FIPS 140-2 Encryption enablement for Looker (Google Cloud Core).
     * 
     */
    public Output<Optional<Boolean>> fipsEnabled() {
        return Codegen.optional(this.fipsEnabled);
    }
    /**
     * Private Ingress IP (IPv4).
     * 
     */
    @Export(name="ingressPrivateIp", refs={String.class}, tree="[0]")
    private Output<String> ingressPrivateIp;

    /**
     * @return Private Ingress IP (IPv4).
     * 
     */
    public Output<String> ingressPrivateIp() {
        return this.ingressPrivateIp;
    }
    /**
     * Public Ingress IP (IPv4).
     * 
     */
    @Export(name="ingressPublicIp", refs={String.class}, tree="[0]")
    private Output<String> ingressPublicIp;

    /**
     * @return Public Ingress IP (IPv4).
     * 
     */
    public Output<String> ingressPublicIp() {
        return this.ingressPublicIp;
    }
    /**
     * Looker instance URI which can be used to access the Looker Instance UI.
     * 
     */
    @Export(name="lookerUri", refs={String.class}, tree="[0]")
    private Output<String> lookerUri;

    /**
     * @return Looker instance URI which can be used to access the Looker Instance UI.
     * 
     */
    public Output<String> lookerUri() {
        return this.lookerUri;
    }
    /**
     * The Looker version that the instance is using.
     * 
     */
    @Export(name="lookerVersion", refs={String.class}, tree="[0]")
    private Output<String> lookerVersion;

    /**
     * @return The Looker version that the instance is using.
     * 
     */
    public Output<String> lookerVersion() {
        return this.lookerVersion;
    }
    /**
     * Maintenance window for an instance. Maintenance of your instance takes place once a month, and will require your
     * instance to be restarted during updates, which will temporarily disrupt service.
     * 
     */
    @Export(name="maintenanceWindow", refs={InstanceMaintenanceWindow.class}, tree="[0]")
    private Output</* @Nullable */ InstanceMaintenanceWindow> maintenanceWindow;

    /**
     * @return Maintenance window for an instance. Maintenance of your instance takes place once a month, and will require your
     * instance to be restarted during updates, which will temporarily disrupt service.
     * 
     */
    public Output<Optional<InstanceMaintenanceWindow>> maintenanceWindow() {
        return Codegen.optional(this.maintenanceWindow);
    }
    /**
     * The ID of the instance or a fully qualified identifier for the instance.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The ID of the instance or a fully qualified identifier for the instance.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Looker Instance OAuth login settings.
     * Structure is documented below.
     * 
     */
    @Export(name="oauthConfig", refs={InstanceOauthConfig.class}, tree="[0]")
    private Output<InstanceOauthConfig> oauthConfig;

    /**
     * @return Looker Instance OAuth login settings.
     * Structure is documented below.
     * 
     */
    public Output<InstanceOauthConfig> oauthConfig() {
        return this.oauthConfig;
    }
    /**
     * Platform editions for a Looker instance. Each edition maps to a set of instance features, like its size. Must be one of
     * these values: - LOOKER_CORE_TRIAL: trial instance (Currently Unavailable) - LOOKER_CORE_STANDARD: pay as you go standard
     * instance (Currently Unavailable) - LOOKER_CORE_STANDARD_ANNUAL: subscription standard instance -
     * LOOKER_CORE_ENTERPRISE_ANNUAL: subscription enterprise instance - LOOKER_CORE_EMBED_ANNUAL: subscription embed instance
     * Default value: &#34;LOOKER_CORE_TRIAL&#34; Possible values: [&#34;LOOKER_CORE_TRIAL&#34;, &#34;LOOKER_CORE_STANDARD&#34;,
     * &#34;LOOKER_CORE_STANDARD_ANNUAL&#34;, &#34;LOOKER_CORE_ENTERPRISE_ANNUAL&#34;, &#34;LOOKER_CORE_EMBED_ANNUAL&#34;]
     * 
     */
    @Export(name="platformEdition", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> platformEdition;

    /**
     * @return Platform editions for a Looker instance. Each edition maps to a set of instance features, like its size. Must be one of
     * these values: - LOOKER_CORE_TRIAL: trial instance (Currently Unavailable) - LOOKER_CORE_STANDARD: pay as you go standard
     * instance (Currently Unavailable) - LOOKER_CORE_STANDARD_ANNUAL: subscription standard instance -
     * LOOKER_CORE_ENTERPRISE_ANNUAL: subscription enterprise instance - LOOKER_CORE_EMBED_ANNUAL: subscription embed instance
     * Default value: &#34;LOOKER_CORE_TRIAL&#34; Possible values: [&#34;LOOKER_CORE_TRIAL&#34;, &#34;LOOKER_CORE_STANDARD&#34;,
     * &#34;LOOKER_CORE_STANDARD_ANNUAL&#34;, &#34;LOOKER_CORE_ENTERPRISE_ANNUAL&#34;, &#34;LOOKER_CORE_EMBED_ANNUAL&#34;]
     * 
     */
    public Output<Optional<String>> platformEdition() {
        return Codegen.optional(this.platformEdition);
    }
    /**
     * Whether private IP is enabled on the Looker instance.
     * 
     */
    @Export(name="privateIpEnabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> privateIpEnabled;

    /**
     * @return Whether private IP is enabled on the Looker instance.
     * 
     */
    public Output<Optional<Boolean>> privateIpEnabled() {
        return Codegen.optional(this.privateIpEnabled);
    }
    @Export(name="project", refs={String.class}, tree="[0]")
    private Output<String> project;

    public Output<String> project() {
        return this.project;
    }
    /**
     * Information for Private Service Connect (PSC) setup for a Looker instance.
     * 
     */
    @Export(name="pscConfig", refs={InstancePscConfig.class}, tree="[0]")
    private Output</* @Nullable */ InstancePscConfig> pscConfig;

    /**
     * @return Information for Private Service Connect (PSC) setup for a Looker instance.
     * 
     */
    public Output<Optional<InstancePscConfig>> pscConfig() {
        return Codegen.optional(this.pscConfig);
    }
    /**
     * Whether Public Service Connect (PSC) is enabled on the Looker instance
     * 
     */
    @Export(name="pscEnabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> pscEnabled;

    /**
     * @return Whether Public Service Connect (PSC) is enabled on the Looker instance
     * 
     */
    public Output<Optional<Boolean>> pscEnabled() {
        return Codegen.optional(this.pscEnabled);
    }
    /**
     * Whether public IP is enabled on the Looker instance.
     * 
     */
    @Export(name="publicIpEnabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> publicIpEnabled;

    /**
     * @return Whether public IP is enabled on the Looker instance.
     * 
     */
    public Output<Optional<Boolean>> publicIpEnabled() {
        return Codegen.optional(this.publicIpEnabled);
    }
    /**
     * The name of the Looker region of the instance.
     * 
     */
    @Export(name="region", refs={String.class}, tree="[0]")
    private Output<String> region;

    /**
     * @return The name of the Looker region of the instance.
     * 
     */
    public Output<String> region() {
        return this.region;
    }
    /**
     * Name of a reserved IP address range within the consumer network, to be used for private service access connection. User
     * may or may not specify this in a request.
     * 
     */
    @Export(name="reservedRange", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> reservedRange;

    /**
     * @return Name of a reserved IP address range within the consumer network, to be used for private service access connection. User
     * may or may not specify this in a request.
     * 
     */
    public Output<Optional<String>> reservedRange() {
        return Codegen.optional(this.reservedRange);
    }
    /**
     * The time the instance was updated in RFC3339 UTC &#34;Zulu&#34; format,
     * accurate to nanoseconds.
     * 
     */
    @Export(name="updateTime", refs={String.class}, tree="[0]")
    private Output<String> updateTime;

    /**
     * @return The time the instance was updated in RFC3339 UTC &#34;Zulu&#34; format,
     * accurate to nanoseconds.
     * 
     */
    public Output<String> updateTime() {
        return this.updateTime;
    }
    /**
     * Metadata about users for a Looker instance. These settings are only available when platform edition LOOKER_CORE_STANDARD
     * is set. There are ten Standard and two Developer users included in the cost of the product. You can allocate additional
     * Standard, Viewer, and Developer users for this instance. It is an optional step and can be modified later. With the
     * Standard edition of Looker (Google Cloud core), you can provision up to 50 total users, distributed across Viewer,
     * Standard, and Developer.
     * 
     */
    @Export(name="userMetadata", refs={InstanceUserMetadata.class}, tree="[0]")
    private Output</* @Nullable */ InstanceUserMetadata> userMetadata;

    /**
     * @return Metadata about users for a Looker instance. These settings are only available when platform edition LOOKER_CORE_STANDARD
     * is set. There are ten Standard and two Developer users included in the cost of the product. You can allocate additional
     * Standard, Viewer, and Developer users for this instance. It is an optional step and can be modified later. With the
     * Standard edition of Looker (Google Cloud core), you can provision up to 50 total users, distributed across Viewer,
     * Standard, and Developer.
     * 
     */
    public Output<Optional<InstanceUserMetadata>> userMetadata() {
        return Codegen.optional(this.userMetadata);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Instance(java.lang.String name) {
        this(name, InstanceArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Instance(java.lang.String name, InstanceArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Instance(java.lang.String name, InstanceArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:looker/instance:Instance", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Instance(java.lang.String name, Output<java.lang.String> id, @Nullable InstanceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("gcp:looker/instance:Instance", name, state, makeResourceOptions(options, id), false);
    }

    private static InstanceArgs makeArgs(InstanceArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? InstanceArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Instance get(java.lang.String name, Output<java.lang.String> id, @Nullable InstanceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Instance(name, id, state, options);
    }
}
