// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.bigquery.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.gcp.bigquery.outputs.DatasetAccessDataset;
import com.pulumi.gcp.bigquery.outputs.DatasetAccessView;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DatasetAccess {
    /**
     * @return The dataset this entry applies to
     * Structure is documented below.
     * 
     */
    private @Nullable DatasetAccessDataset dataset;
    /**
     * @return A domain to grant access to. Any users signed in with the
     * domain specified will be granted the specified access
     * 
     */
    private @Nullable String domain;
    /**
     * @return An email address of a Google Group to grant access to.
     * 
     */
    private @Nullable String groupByEmail;
    /**
     * @return Describes the rights granted to the user specified by the other
     * member of the access object. Basic, predefined, and custom roles
     * are supported. Predefined roles that have equivalent basic roles
     * are swapped by the API to their basic counterparts. See
     * [official docs](https://cloud.google.com/bigquery/docs/access-control).
     * 
     */
    private @Nullable String role;
    /**
     * @return A special group to grant access to. Possible values include:
     * 
     */
    private @Nullable String specialGroup;
    /**
     * @return An email address of a user to grant access to. For example:
     * fred@example.com
     * 
     */
    private @Nullable String userByEmail;
    /**
     * @return A view from a different dataset to grant access to. Queries
     * executed against that view will have read access to tables in
     * this dataset. The role field is not required when this field is
     * set. If that view is updated by any user, access to the view
     * needs to be granted again via an update operation.
     * Structure is documented below.
     * 
     */
    private @Nullable DatasetAccessView view;

    private DatasetAccess() {}
    /**
     * @return The dataset this entry applies to
     * Structure is documented below.
     * 
     */
    public Optional<DatasetAccessDataset> dataset() {
        return Optional.ofNullable(this.dataset);
    }
    /**
     * @return A domain to grant access to. Any users signed in with the
     * domain specified will be granted the specified access
     * 
     */
    public Optional<String> domain() {
        return Optional.ofNullable(this.domain);
    }
    /**
     * @return An email address of a Google Group to grant access to.
     * 
     */
    public Optional<String> groupByEmail() {
        return Optional.ofNullable(this.groupByEmail);
    }
    /**
     * @return Describes the rights granted to the user specified by the other
     * member of the access object. Basic, predefined, and custom roles
     * are supported. Predefined roles that have equivalent basic roles
     * are swapped by the API to their basic counterparts. See
     * [official docs](https://cloud.google.com/bigquery/docs/access-control).
     * 
     */
    public Optional<String> role() {
        return Optional.ofNullable(this.role);
    }
    /**
     * @return A special group to grant access to. Possible values include:
     * 
     */
    public Optional<String> specialGroup() {
        return Optional.ofNullable(this.specialGroup);
    }
    /**
     * @return An email address of a user to grant access to. For example:
     * fred@example.com
     * 
     */
    public Optional<String> userByEmail() {
        return Optional.ofNullable(this.userByEmail);
    }
    /**
     * @return A view from a different dataset to grant access to. Queries
     * executed against that view will have read access to tables in
     * this dataset. The role field is not required when this field is
     * set. If that view is updated by any user, access to the view
     * needs to be granted again via an update operation.
     * Structure is documented below.
     * 
     */
    public Optional<DatasetAccessView> view() {
        return Optional.ofNullable(this.view);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DatasetAccess defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable DatasetAccessDataset dataset;
        private @Nullable String domain;
        private @Nullable String groupByEmail;
        private @Nullable String role;
        private @Nullable String specialGroup;
        private @Nullable String userByEmail;
        private @Nullable DatasetAccessView view;
        public Builder() {}
        public Builder(DatasetAccess defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dataset = defaults.dataset;
    	      this.domain = defaults.domain;
    	      this.groupByEmail = defaults.groupByEmail;
    	      this.role = defaults.role;
    	      this.specialGroup = defaults.specialGroup;
    	      this.userByEmail = defaults.userByEmail;
    	      this.view = defaults.view;
        }

        @CustomType.Setter
        public Builder dataset(@Nullable DatasetAccessDataset dataset) {
            this.dataset = dataset;
            return this;
        }
        @CustomType.Setter
        public Builder domain(@Nullable String domain) {
            this.domain = domain;
            return this;
        }
        @CustomType.Setter
        public Builder groupByEmail(@Nullable String groupByEmail) {
            this.groupByEmail = groupByEmail;
            return this;
        }
        @CustomType.Setter
        public Builder role(@Nullable String role) {
            this.role = role;
            return this;
        }
        @CustomType.Setter
        public Builder specialGroup(@Nullable String specialGroup) {
            this.specialGroup = specialGroup;
            return this;
        }
        @CustomType.Setter
        public Builder userByEmail(@Nullable String userByEmail) {
            this.userByEmail = userByEmail;
            return this;
        }
        @CustomType.Setter
        public Builder view(@Nullable DatasetAccessView view) {
            this.view = view;
            return this;
        }
        public DatasetAccess build() {
            final var o = new DatasetAccess();
            o.dataset = dataset;
            o.domain = domain;
            o.groupByEmail = groupByEmail;
            o.role = role;
            o.specialGroup = specialGroup;
            o.userByEmail = userByEmail;
            o.view = view;
            return o;
        }
    }
}
