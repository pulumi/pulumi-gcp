// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.gemini;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.gemini.inputs.RepositoryGroupRepositoryArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RepositoryGroupArgs extends com.pulumi.resources.ResourceArgs {

    public static final RepositoryGroupArgs Empty = new RepositoryGroupArgs();

    /**
     * Required. Id of the Code Repository Index.
     * 
     */
    @Import(name="codeRepositoryIndex", required=true)
    private Output<String> codeRepositoryIndex;

    /**
     * @return Required. Id of the Code Repository Index.
     * 
     */
    public Output<String> codeRepositoryIndex() {
        return this.codeRepositoryIndex;
    }

    /**
     * Optional. Labels as key value pairs.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Optional. Labels as key value pairs.
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * The location of the Code Repository Index, for example `us-central1`.
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return The location of the Code Repository Index, for example `us-central1`.
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Required. List of repositories to group.
     * Structure is documented below.
     * 
     */
    @Import(name="repositories", required=true)
    private Output<List<RepositoryGroupRepositoryArgs>> repositories;

    /**
     * @return Required. List of repositories to group.
     * Structure is documented below.
     * 
     */
    public Output<List<RepositoryGroupRepositoryArgs>> repositories() {
        return this.repositories;
    }

    /**
     * Required. Id of the Repository Group.
     * 
     */
    @Import(name="repositoryGroupId", required=true)
    private Output<String> repositoryGroupId;

    /**
     * @return Required. Id of the Repository Group.
     * 
     */
    public Output<String> repositoryGroupId() {
        return this.repositoryGroupId;
    }

    private RepositoryGroupArgs() {}

    private RepositoryGroupArgs(RepositoryGroupArgs $) {
        this.codeRepositoryIndex = $.codeRepositoryIndex;
        this.labels = $.labels;
        this.location = $.location;
        this.project = $.project;
        this.repositories = $.repositories;
        this.repositoryGroupId = $.repositoryGroupId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RepositoryGroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RepositoryGroupArgs $;

        public Builder() {
            $ = new RepositoryGroupArgs();
        }

        public Builder(RepositoryGroupArgs defaults) {
            $ = new RepositoryGroupArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param codeRepositoryIndex Required. Id of the Code Repository Index.
         * 
         * @return builder
         * 
         */
        public Builder codeRepositoryIndex(Output<String> codeRepositoryIndex) {
            $.codeRepositoryIndex = codeRepositoryIndex;
            return this;
        }

        /**
         * @param codeRepositoryIndex Required. Id of the Code Repository Index.
         * 
         * @return builder
         * 
         */
        public Builder codeRepositoryIndex(String codeRepositoryIndex) {
            return codeRepositoryIndex(Output.of(codeRepositoryIndex));
        }

        /**
         * @param labels Optional. Labels as key value pairs.
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Optional. Labels as key value pairs.
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param location The location of the Code Repository Index, for example `us-central1`.
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location of the Code Repository Index, for example `us-central1`.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param repositories Required. List of repositories to group.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder repositories(Output<List<RepositoryGroupRepositoryArgs>> repositories) {
            $.repositories = repositories;
            return this;
        }

        /**
         * @param repositories Required. List of repositories to group.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder repositories(List<RepositoryGroupRepositoryArgs> repositories) {
            return repositories(Output.of(repositories));
        }

        /**
         * @param repositories Required. List of repositories to group.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder repositories(RepositoryGroupRepositoryArgs... repositories) {
            return repositories(List.of(repositories));
        }

        /**
         * @param repositoryGroupId Required. Id of the Repository Group.
         * 
         * @return builder
         * 
         */
        public Builder repositoryGroupId(Output<String> repositoryGroupId) {
            $.repositoryGroupId = repositoryGroupId;
            return this;
        }

        /**
         * @param repositoryGroupId Required. Id of the Repository Group.
         * 
         * @return builder
         * 
         */
        public Builder repositoryGroupId(String repositoryGroupId) {
            return repositoryGroupId(Output.of(repositoryGroupId));
        }

        public RepositoryGroupArgs build() {
            if ($.codeRepositoryIndex == null) {
                throw new MissingRequiredPropertyException("RepositoryGroupArgs", "codeRepositoryIndex");
            }
            if ($.location == null) {
                throw new MissingRequiredPropertyException("RepositoryGroupArgs", "location");
            }
            if ($.repositories == null) {
                throw new MissingRequiredPropertyException("RepositoryGroupArgs", "repositories");
            }
            if ($.repositoryGroupId == null) {
                throw new MissingRequiredPropertyException("RepositoryGroupArgs", "repositoryGroupId");
            }
            return $;
        }
    }

}
