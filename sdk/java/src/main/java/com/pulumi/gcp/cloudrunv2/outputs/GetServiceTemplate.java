// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudrunv2.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.cloudrunv2.outputs.GetServiceTemplateContainer;
import com.pulumi.gcp.cloudrunv2.outputs.GetServiceTemplateScaling;
import com.pulumi.gcp.cloudrunv2.outputs.GetServiceTemplateVolume;
import com.pulumi.gcp.cloudrunv2.outputs.GetServiceTemplateVpcAccess;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetServiceTemplate {
    private Map<String,String> annotations;
    private List<GetServiceTemplateContainer> containers;
    private String encryptionKey;
    private String executionEnvironment;
    private Map<String,String> labels;
    private Integer maxInstanceRequestConcurrency;
    private String revision;
    private List<GetServiceTemplateScaling> scalings;
    private String serviceAccount;
    private Boolean sessionAffinity;
    private String timeout;
    private List<GetServiceTemplateVolume> volumes;
    private List<GetServiceTemplateVpcAccess> vpcAccesses;

    private GetServiceTemplate() {}
    public Map<String,String> annotations() {
        return this.annotations;
    }
    public List<GetServiceTemplateContainer> containers() {
        return this.containers;
    }
    public String encryptionKey() {
        return this.encryptionKey;
    }
    public String executionEnvironment() {
        return this.executionEnvironment;
    }
    public Map<String,String> labels() {
        return this.labels;
    }
    public Integer maxInstanceRequestConcurrency() {
        return this.maxInstanceRequestConcurrency;
    }
    public String revision() {
        return this.revision;
    }
    public List<GetServiceTemplateScaling> scalings() {
        return this.scalings;
    }
    public String serviceAccount() {
        return this.serviceAccount;
    }
    public Boolean sessionAffinity() {
        return this.sessionAffinity;
    }
    public String timeout() {
        return this.timeout;
    }
    public List<GetServiceTemplateVolume> volumes() {
        return this.volumes;
    }
    public List<GetServiceTemplateVpcAccess> vpcAccesses() {
        return this.vpcAccesses;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServiceTemplate defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Map<String,String> annotations;
        private List<GetServiceTemplateContainer> containers;
        private String encryptionKey;
        private String executionEnvironment;
        private Map<String,String> labels;
        private Integer maxInstanceRequestConcurrency;
        private String revision;
        private List<GetServiceTemplateScaling> scalings;
        private String serviceAccount;
        private Boolean sessionAffinity;
        private String timeout;
        private List<GetServiceTemplateVolume> volumes;
        private List<GetServiceTemplateVpcAccess> vpcAccesses;
        public Builder() {}
        public Builder(GetServiceTemplate defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.annotations = defaults.annotations;
    	      this.containers = defaults.containers;
    	      this.encryptionKey = defaults.encryptionKey;
    	      this.executionEnvironment = defaults.executionEnvironment;
    	      this.labels = defaults.labels;
    	      this.maxInstanceRequestConcurrency = defaults.maxInstanceRequestConcurrency;
    	      this.revision = defaults.revision;
    	      this.scalings = defaults.scalings;
    	      this.serviceAccount = defaults.serviceAccount;
    	      this.sessionAffinity = defaults.sessionAffinity;
    	      this.timeout = defaults.timeout;
    	      this.volumes = defaults.volumes;
    	      this.vpcAccesses = defaults.vpcAccesses;
        }

        @CustomType.Setter
        public Builder annotations(Map<String,String> annotations) {
            if (annotations == null) {
              throw new MissingRequiredPropertyException("GetServiceTemplate", "annotations");
            }
            this.annotations = annotations;
            return this;
        }
        @CustomType.Setter
        public Builder containers(List<GetServiceTemplateContainer> containers) {
            if (containers == null) {
              throw new MissingRequiredPropertyException("GetServiceTemplate", "containers");
            }
            this.containers = containers;
            return this;
        }
        public Builder containers(GetServiceTemplateContainer... containers) {
            return containers(List.of(containers));
        }
        @CustomType.Setter
        public Builder encryptionKey(String encryptionKey) {
            if (encryptionKey == null) {
              throw new MissingRequiredPropertyException("GetServiceTemplate", "encryptionKey");
            }
            this.encryptionKey = encryptionKey;
            return this;
        }
        @CustomType.Setter
        public Builder executionEnvironment(String executionEnvironment) {
            if (executionEnvironment == null) {
              throw new MissingRequiredPropertyException("GetServiceTemplate", "executionEnvironment");
            }
            this.executionEnvironment = executionEnvironment;
            return this;
        }
        @CustomType.Setter
        public Builder labels(Map<String,String> labels) {
            if (labels == null) {
              throw new MissingRequiredPropertyException("GetServiceTemplate", "labels");
            }
            this.labels = labels;
            return this;
        }
        @CustomType.Setter
        public Builder maxInstanceRequestConcurrency(Integer maxInstanceRequestConcurrency) {
            if (maxInstanceRequestConcurrency == null) {
              throw new MissingRequiredPropertyException("GetServiceTemplate", "maxInstanceRequestConcurrency");
            }
            this.maxInstanceRequestConcurrency = maxInstanceRequestConcurrency;
            return this;
        }
        @CustomType.Setter
        public Builder revision(String revision) {
            if (revision == null) {
              throw new MissingRequiredPropertyException("GetServiceTemplate", "revision");
            }
            this.revision = revision;
            return this;
        }
        @CustomType.Setter
        public Builder scalings(List<GetServiceTemplateScaling> scalings) {
            if (scalings == null) {
              throw new MissingRequiredPropertyException("GetServiceTemplate", "scalings");
            }
            this.scalings = scalings;
            return this;
        }
        public Builder scalings(GetServiceTemplateScaling... scalings) {
            return scalings(List.of(scalings));
        }
        @CustomType.Setter
        public Builder serviceAccount(String serviceAccount) {
            if (serviceAccount == null) {
              throw new MissingRequiredPropertyException("GetServiceTemplate", "serviceAccount");
            }
            this.serviceAccount = serviceAccount;
            return this;
        }
        @CustomType.Setter
        public Builder sessionAffinity(Boolean sessionAffinity) {
            if (sessionAffinity == null) {
              throw new MissingRequiredPropertyException("GetServiceTemplate", "sessionAffinity");
            }
            this.sessionAffinity = sessionAffinity;
            return this;
        }
        @CustomType.Setter
        public Builder timeout(String timeout) {
            if (timeout == null) {
              throw new MissingRequiredPropertyException("GetServiceTemplate", "timeout");
            }
            this.timeout = timeout;
            return this;
        }
        @CustomType.Setter
        public Builder volumes(List<GetServiceTemplateVolume> volumes) {
            if (volumes == null) {
              throw new MissingRequiredPropertyException("GetServiceTemplate", "volumes");
            }
            this.volumes = volumes;
            return this;
        }
        public Builder volumes(GetServiceTemplateVolume... volumes) {
            return volumes(List.of(volumes));
        }
        @CustomType.Setter
        public Builder vpcAccesses(List<GetServiceTemplateVpcAccess> vpcAccesses) {
            if (vpcAccesses == null) {
              throw new MissingRequiredPropertyException("GetServiceTemplate", "vpcAccesses");
            }
            this.vpcAccesses = vpcAccesses;
            return this;
        }
        public Builder vpcAccesses(GetServiceTemplateVpcAccess... vpcAccesses) {
            return vpcAccesses(List.of(vpcAccesses));
        }
        public GetServiceTemplate build() {
            final var _resultValue = new GetServiceTemplate();
            _resultValue.annotations = annotations;
            _resultValue.containers = containers;
            _resultValue.encryptionKey = encryptionKey;
            _resultValue.executionEnvironment = executionEnvironment;
            _resultValue.labels = labels;
            _resultValue.maxInstanceRequestConcurrency = maxInstanceRequestConcurrency;
            _resultValue.revision = revision;
            _resultValue.scalings = scalings;
            _resultValue.serviceAccount = serviceAccount;
            _resultValue.sessionAffinity = sessionAffinity;
            _resultValue.timeout = timeout;
            _resultValue.volumes = volumes;
            _resultValue.vpcAccesses = vpcAccesses;
            return _resultValue;
        }
    }
}
