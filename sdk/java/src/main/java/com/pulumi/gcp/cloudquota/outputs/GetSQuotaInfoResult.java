// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.cloudquota.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.cloudquota.outputs.GetSQuotaInfoDimensionsInfo;
import com.pulumi.gcp.cloudquota.outputs.GetSQuotaInfoQuotaIncreaseEligibility;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetSQuotaInfoResult {
    /**
     * @return (Output) The container type of the QuotaInfo.
     * 
     */
    private String containerType;
    /**
     * @return The map of dimensions for this dimensions info. The key of a map entry is &#34;region&#34;, &#34;zone&#34; or the name of a service specific dimension, and the value of a map entry is the value of the dimension. If a dimension does not appear in the map of dimensions, the dimensions info applies to all the dimension values except for those that have another DimenisonInfo instance configured for the specific value. Example: {&#34;provider&#34; : &#34;Foo Inc&#34;} where &#34;provider&#34; is a service specific dimension of a quota.
     * 
     */
    private List<String> dimensions;
    /**
     * @return (Output) The collection of dimensions info ordered by their dimensions from more specific ones to less specific ones.
     * 
     */
    private List<GetSQuotaInfoDimensionsInfo> dimensionsInfos;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return (Output) Whether the quota is a concurrent quota. Concurrent quotas are enforced on the total number of concurrent operations in flight at any given time.
     * 
     */
    private Boolean isConcurrent;
    /**
     * @return (Output) Whether the quota value is fixed or adjustable.
     * 
     */
    private Boolean isFixed;
    /**
     * @return (Output) Whether this is a precise quota. A precise quota is tracked with absolute precision. In contrast, an imprecise quota is not tracked with precision.
     * 
     */
    private Boolean isPrecise;
    /**
     * @return (Output) The metric of the quota. It specifies the resources consumption the quota is defined for, for example: `compute.googleapis.com/cpus`.
     * 
     */
    private String metric;
    /**
     * @return (Output) The display name of the quota metric.
     * 
     */
    private String metricDisplayName;
    /**
     * @return (Output) The unit in which the metric value is reported, e.g., `MByte`.
     * 
     */
    private String metricUnit;
    /**
     * @return (Output) Resource name of this QuotaInfo, for example: `projects/123/locations/global/services/compute.googleapis.com/quotaInfos/CpusPerProjectPerRegion`.
     * 
     */
    private String name;
    private String parent;
    /**
     * @return (Output) The display name of the quota.
     * 
     */
    private String quotaDisplayName;
    private String quotaId;
    /**
     * @return (Output) Whether it is eligible to request a higher quota value for this quota.
     * 
     */
    private List<GetSQuotaInfoQuotaIncreaseEligibility> quotaIncreaseEligibilities;
    /**
     * @return (Output) The reset time interval for the quota. Refresh interval applies to rate quota only. Example: &#34;minute&#34; for per minute, &#34;day&#34; for per day, or &#34;10 seconds&#34; for every 10 seconds.
     * 
     */
    private String refreshInterval;
    private String service;
    /**
     * @return (Output) URI to the page where users can request more quota for the cloud service, for example: `https://console.cloud.google.com/iam-admin/quotas`.
     * 
     */
    private String serviceRequestQuotaUri;

    private GetSQuotaInfoResult() {}
    /**
     * @return (Output) The container type of the QuotaInfo.
     * 
     */
    public String containerType() {
        return this.containerType;
    }
    /**
     * @return The map of dimensions for this dimensions info. The key of a map entry is &#34;region&#34;, &#34;zone&#34; or the name of a service specific dimension, and the value of a map entry is the value of the dimension. If a dimension does not appear in the map of dimensions, the dimensions info applies to all the dimension values except for those that have another DimenisonInfo instance configured for the specific value. Example: {&#34;provider&#34; : &#34;Foo Inc&#34;} where &#34;provider&#34; is a service specific dimension of a quota.
     * 
     */
    public List<String> dimensions() {
        return this.dimensions;
    }
    /**
     * @return (Output) The collection of dimensions info ordered by their dimensions from more specific ones to less specific ones.
     * 
     */
    public List<GetSQuotaInfoDimensionsInfo> dimensionsInfos() {
        return this.dimensionsInfos;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return (Output) Whether the quota is a concurrent quota. Concurrent quotas are enforced on the total number of concurrent operations in flight at any given time.
     * 
     */
    public Boolean isConcurrent() {
        return this.isConcurrent;
    }
    /**
     * @return (Output) Whether the quota value is fixed or adjustable.
     * 
     */
    public Boolean isFixed() {
        return this.isFixed;
    }
    /**
     * @return (Output) Whether this is a precise quota. A precise quota is tracked with absolute precision. In contrast, an imprecise quota is not tracked with precision.
     * 
     */
    public Boolean isPrecise() {
        return this.isPrecise;
    }
    /**
     * @return (Output) The metric of the quota. It specifies the resources consumption the quota is defined for, for example: `compute.googleapis.com/cpus`.
     * 
     */
    public String metric() {
        return this.metric;
    }
    /**
     * @return (Output) The display name of the quota metric.
     * 
     */
    public String metricDisplayName() {
        return this.metricDisplayName;
    }
    /**
     * @return (Output) The unit in which the metric value is reported, e.g., `MByte`.
     * 
     */
    public String metricUnit() {
        return this.metricUnit;
    }
    /**
     * @return (Output) Resource name of this QuotaInfo, for example: `projects/123/locations/global/services/compute.googleapis.com/quotaInfos/CpusPerProjectPerRegion`.
     * 
     */
    public String name() {
        return this.name;
    }
    public String parent() {
        return this.parent;
    }
    /**
     * @return (Output) The display name of the quota.
     * 
     */
    public String quotaDisplayName() {
        return this.quotaDisplayName;
    }
    public String quotaId() {
        return this.quotaId;
    }
    /**
     * @return (Output) Whether it is eligible to request a higher quota value for this quota.
     * 
     */
    public List<GetSQuotaInfoQuotaIncreaseEligibility> quotaIncreaseEligibilities() {
        return this.quotaIncreaseEligibilities;
    }
    /**
     * @return (Output) The reset time interval for the quota. Refresh interval applies to rate quota only. Example: &#34;minute&#34; for per minute, &#34;day&#34; for per day, or &#34;10 seconds&#34; for every 10 seconds.
     * 
     */
    public String refreshInterval() {
        return this.refreshInterval;
    }
    public String service() {
        return this.service;
    }
    /**
     * @return (Output) URI to the page where users can request more quota for the cloud service, for example: `https://console.cloud.google.com/iam-admin/quotas`.
     * 
     */
    public String serviceRequestQuotaUri() {
        return this.serviceRequestQuotaUri;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSQuotaInfoResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String containerType;
        private List<String> dimensions;
        private List<GetSQuotaInfoDimensionsInfo> dimensionsInfos;
        private String id;
        private Boolean isConcurrent;
        private Boolean isFixed;
        private Boolean isPrecise;
        private String metric;
        private String metricDisplayName;
        private String metricUnit;
        private String name;
        private String parent;
        private String quotaDisplayName;
        private String quotaId;
        private List<GetSQuotaInfoQuotaIncreaseEligibility> quotaIncreaseEligibilities;
        private String refreshInterval;
        private String service;
        private String serviceRequestQuotaUri;
        public Builder() {}
        public Builder(GetSQuotaInfoResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.containerType = defaults.containerType;
    	      this.dimensions = defaults.dimensions;
    	      this.dimensionsInfos = defaults.dimensionsInfos;
    	      this.id = defaults.id;
    	      this.isConcurrent = defaults.isConcurrent;
    	      this.isFixed = defaults.isFixed;
    	      this.isPrecise = defaults.isPrecise;
    	      this.metric = defaults.metric;
    	      this.metricDisplayName = defaults.metricDisplayName;
    	      this.metricUnit = defaults.metricUnit;
    	      this.name = defaults.name;
    	      this.parent = defaults.parent;
    	      this.quotaDisplayName = defaults.quotaDisplayName;
    	      this.quotaId = defaults.quotaId;
    	      this.quotaIncreaseEligibilities = defaults.quotaIncreaseEligibilities;
    	      this.refreshInterval = defaults.refreshInterval;
    	      this.service = defaults.service;
    	      this.serviceRequestQuotaUri = defaults.serviceRequestQuotaUri;
        }

        @CustomType.Setter
        public Builder containerType(String containerType) {
            if (containerType == null) {
              throw new MissingRequiredPropertyException("GetSQuotaInfoResult", "containerType");
            }
            this.containerType = containerType;
            return this;
        }
        @CustomType.Setter
        public Builder dimensions(List<String> dimensions) {
            if (dimensions == null) {
              throw new MissingRequiredPropertyException("GetSQuotaInfoResult", "dimensions");
            }
            this.dimensions = dimensions;
            return this;
        }
        public Builder dimensions(String... dimensions) {
            return dimensions(List.of(dimensions));
        }
        @CustomType.Setter
        public Builder dimensionsInfos(List<GetSQuotaInfoDimensionsInfo> dimensionsInfos) {
            if (dimensionsInfos == null) {
              throw new MissingRequiredPropertyException("GetSQuotaInfoResult", "dimensionsInfos");
            }
            this.dimensionsInfos = dimensionsInfos;
            return this;
        }
        public Builder dimensionsInfos(GetSQuotaInfoDimensionsInfo... dimensionsInfos) {
            return dimensionsInfos(List.of(dimensionsInfos));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetSQuotaInfoResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isConcurrent(Boolean isConcurrent) {
            if (isConcurrent == null) {
              throw new MissingRequiredPropertyException("GetSQuotaInfoResult", "isConcurrent");
            }
            this.isConcurrent = isConcurrent;
            return this;
        }
        @CustomType.Setter
        public Builder isFixed(Boolean isFixed) {
            if (isFixed == null) {
              throw new MissingRequiredPropertyException("GetSQuotaInfoResult", "isFixed");
            }
            this.isFixed = isFixed;
            return this;
        }
        @CustomType.Setter
        public Builder isPrecise(Boolean isPrecise) {
            if (isPrecise == null) {
              throw new MissingRequiredPropertyException("GetSQuotaInfoResult", "isPrecise");
            }
            this.isPrecise = isPrecise;
            return this;
        }
        @CustomType.Setter
        public Builder metric(String metric) {
            if (metric == null) {
              throw new MissingRequiredPropertyException("GetSQuotaInfoResult", "metric");
            }
            this.metric = metric;
            return this;
        }
        @CustomType.Setter
        public Builder metricDisplayName(String metricDisplayName) {
            if (metricDisplayName == null) {
              throw new MissingRequiredPropertyException("GetSQuotaInfoResult", "metricDisplayName");
            }
            this.metricDisplayName = metricDisplayName;
            return this;
        }
        @CustomType.Setter
        public Builder metricUnit(String metricUnit) {
            if (metricUnit == null) {
              throw new MissingRequiredPropertyException("GetSQuotaInfoResult", "metricUnit");
            }
            this.metricUnit = metricUnit;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetSQuotaInfoResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder parent(String parent) {
            if (parent == null) {
              throw new MissingRequiredPropertyException("GetSQuotaInfoResult", "parent");
            }
            this.parent = parent;
            return this;
        }
        @CustomType.Setter
        public Builder quotaDisplayName(String quotaDisplayName) {
            if (quotaDisplayName == null) {
              throw new MissingRequiredPropertyException("GetSQuotaInfoResult", "quotaDisplayName");
            }
            this.quotaDisplayName = quotaDisplayName;
            return this;
        }
        @CustomType.Setter
        public Builder quotaId(String quotaId) {
            if (quotaId == null) {
              throw new MissingRequiredPropertyException("GetSQuotaInfoResult", "quotaId");
            }
            this.quotaId = quotaId;
            return this;
        }
        @CustomType.Setter
        public Builder quotaIncreaseEligibilities(List<GetSQuotaInfoQuotaIncreaseEligibility> quotaIncreaseEligibilities) {
            if (quotaIncreaseEligibilities == null) {
              throw new MissingRequiredPropertyException("GetSQuotaInfoResult", "quotaIncreaseEligibilities");
            }
            this.quotaIncreaseEligibilities = quotaIncreaseEligibilities;
            return this;
        }
        public Builder quotaIncreaseEligibilities(GetSQuotaInfoQuotaIncreaseEligibility... quotaIncreaseEligibilities) {
            return quotaIncreaseEligibilities(List.of(quotaIncreaseEligibilities));
        }
        @CustomType.Setter
        public Builder refreshInterval(String refreshInterval) {
            if (refreshInterval == null) {
              throw new MissingRequiredPropertyException("GetSQuotaInfoResult", "refreshInterval");
            }
            this.refreshInterval = refreshInterval;
            return this;
        }
        @CustomType.Setter
        public Builder service(String service) {
            if (service == null) {
              throw new MissingRequiredPropertyException("GetSQuotaInfoResult", "service");
            }
            this.service = service;
            return this;
        }
        @CustomType.Setter
        public Builder serviceRequestQuotaUri(String serviceRequestQuotaUri) {
            if (serviceRequestQuotaUri == null) {
              throw new MissingRequiredPropertyException("GetSQuotaInfoResult", "serviceRequestQuotaUri");
            }
            this.serviceRequestQuotaUri = serviceRequestQuotaUri;
            return this;
        }
        public GetSQuotaInfoResult build() {
            final var _resultValue = new GetSQuotaInfoResult();
            _resultValue.containerType = containerType;
            _resultValue.dimensions = dimensions;
            _resultValue.dimensionsInfos = dimensionsInfos;
            _resultValue.id = id;
            _resultValue.isConcurrent = isConcurrent;
            _resultValue.isFixed = isFixed;
            _resultValue.isPrecise = isPrecise;
            _resultValue.metric = metric;
            _resultValue.metricDisplayName = metricDisplayName;
            _resultValue.metricUnit = metricUnit;
            _resultValue.name = name;
            _resultValue.parent = parent;
            _resultValue.quotaDisplayName = quotaDisplayName;
            _resultValue.quotaId = quotaId;
            _resultValue.quotaIncreaseEligibilities = quotaIncreaseEligibilities;
            _resultValue.refreshInterval = refreshInterval;
            _resultValue.service = service;
            _resultValue.serviceRequestQuotaUri = serviceRequestQuotaUri;
            return _resultValue;
        }
    }
}
