// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.healthcare.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class FhirStoreStreamConfigBigqueryDestinationSchemaConfig {
    /**
     * @return The depth for all recursive structures in the output analytics schema. For example, concept in the CodeSystem
     * resource is a recursive structure; when the depth is 2, the CodeSystem table will have a column called
     * concept.concept but not concept.concept.concept. If not specified or set to 0, the server will use the default
     * value 2. The maximum depth allowed is 5.
     * 
     */
    private Integer recursiveStructureDepth;
    /**
     * @return Specifies the output schema type.
     * * ANALYTICS: Analytics schema defined by the FHIR community.
     *   See https://github.com/FHIR/sql-on-fhir/blob/master/sql-on-fhir.md.
     * * ANALYTICS_V2: Analytics V2, similar to schema defined by the FHIR community, with added support for extensions with one or more occurrences and contained resources in stringified JSON.
     * * LOSSLESS: A data-driven schema generated from the fields present in the FHIR data being exported, with no additional simplification.
     *   Default value is `ANALYTICS`.
     *   Possible values are `ANALYTICS`, `ANALYTICS_V2`, and `LOSSLESS`.
     * 
     */
    private @Nullable String schemaType;

    private FhirStoreStreamConfigBigqueryDestinationSchemaConfig() {}
    /**
     * @return The depth for all recursive structures in the output analytics schema. For example, concept in the CodeSystem
     * resource is a recursive structure; when the depth is 2, the CodeSystem table will have a column called
     * concept.concept but not concept.concept.concept. If not specified or set to 0, the server will use the default
     * value 2. The maximum depth allowed is 5.
     * 
     */
    public Integer recursiveStructureDepth() {
        return this.recursiveStructureDepth;
    }
    /**
     * @return Specifies the output schema type.
     * * ANALYTICS: Analytics schema defined by the FHIR community.
     *   See https://github.com/FHIR/sql-on-fhir/blob/master/sql-on-fhir.md.
     * * ANALYTICS_V2: Analytics V2, similar to schema defined by the FHIR community, with added support for extensions with one or more occurrences and contained resources in stringified JSON.
     * * LOSSLESS: A data-driven schema generated from the fields present in the FHIR data being exported, with no additional simplification.
     *   Default value is `ANALYTICS`.
     *   Possible values are `ANALYTICS`, `ANALYTICS_V2`, and `LOSSLESS`.
     * 
     */
    public Optional<String> schemaType() {
        return Optional.ofNullable(this.schemaType);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FhirStoreStreamConfigBigqueryDestinationSchemaConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer recursiveStructureDepth;
        private @Nullable String schemaType;
        public Builder() {}
        public Builder(FhirStoreStreamConfigBigqueryDestinationSchemaConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.recursiveStructureDepth = defaults.recursiveStructureDepth;
    	      this.schemaType = defaults.schemaType;
        }

        @CustomType.Setter
        public Builder recursiveStructureDepth(Integer recursiveStructureDepth) {
            this.recursiveStructureDepth = Objects.requireNonNull(recursiveStructureDepth);
            return this;
        }
        @CustomType.Setter
        public Builder schemaType(@Nullable String schemaType) {
            this.schemaType = schemaType;
            return this;
        }
        public FhirStoreStreamConfigBigqueryDestinationSchemaConfig build() {
            final var o = new FhirStoreStreamConfigBigqueryDestinationSchemaConfig();
            o.recursiveStructureDepth = recursiveStructureDepth;
            o.schemaType = schemaType;
            return o;
        }
    }
}
