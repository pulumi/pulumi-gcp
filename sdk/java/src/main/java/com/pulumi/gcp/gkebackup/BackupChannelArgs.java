// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.gkebackup;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BackupChannelArgs extends com.pulumi.resources.ResourceArgs {

    public static final BackupChannelArgs Empty = new BackupChannelArgs();

    /**
     * User specified descriptive string for this BackupChannel.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return User specified descriptive string for this BackupChannel.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The project where Backups are allowed to be stored.
     * The format is `projects/{project}`.
     * {project} can be project number or project id.
     * 
     */
    @Import(name="destinationProject", required=true)
    private Output<String> destinationProject;

    /**
     * @return The project where Backups are allowed to be stored.
     * The format is `projects/{project}`.
     * {project} can be project number or project id.
     * 
     */
    public Output<String> destinationProject() {
        return this.destinationProject;
    }

    /**
     * Description: A set of custom labels supplied by the user.
     * A list of key-&gt;value pairs.
     * Example: { &#34;name&#34;: &#34;wrench&#34;, &#34;mass&#34;: &#34;1.3kg&#34;, &#34;count&#34;: &#34;3&#34; }.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Description: A set of custom labels supplied by the user.
     * A list of key-&gt;value pairs.
     * Example: { &#34;name&#34;: &#34;wrench&#34;, &#34;mass&#34;: &#34;1.3kg&#34;, &#34;count&#34;: &#34;3&#34; }.
     * 
     * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
     * Please refer to the field `effective_labels` for all of the labels present on the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * The region of the Backup Channel.
     * 
     */
    @Import(name="location", required=true)
    private Output<String> location;

    /**
     * @return The region of the Backup Channel.
     * 
     */
    public Output<String> location() {
        return this.location;
    }

    /**
     * The full name of the BackupChannel Resource.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The full name of the BackupChannel Resource.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    private BackupChannelArgs() {}

    private BackupChannelArgs(BackupChannelArgs $) {
        this.description = $.description;
        this.destinationProject = $.destinationProject;
        this.labels = $.labels;
        this.location = $.location;
        this.name = $.name;
        this.project = $.project;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BackupChannelArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BackupChannelArgs $;

        public Builder() {
            $ = new BackupChannelArgs();
        }

        public Builder(BackupChannelArgs defaults) {
            $ = new BackupChannelArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description User specified descriptive string for this BackupChannel.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description User specified descriptive string for this BackupChannel.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param destinationProject The project where Backups are allowed to be stored.
         * The format is `projects/{project}`.
         * {project} can be project number or project id.
         * 
         * @return builder
         * 
         */
        public Builder destinationProject(Output<String> destinationProject) {
            $.destinationProject = destinationProject;
            return this;
        }

        /**
         * @param destinationProject The project where Backups are allowed to be stored.
         * The format is `projects/{project}`.
         * {project} can be project number or project id.
         * 
         * @return builder
         * 
         */
        public Builder destinationProject(String destinationProject) {
            return destinationProject(Output.of(destinationProject));
        }

        /**
         * @param labels Description: A set of custom labels supplied by the user.
         * A list of key-&gt;value pairs.
         * Example: { &#34;name&#34;: &#34;wrench&#34;, &#34;mass&#34;: &#34;1.3kg&#34;, &#34;count&#34;: &#34;3&#34; }.
         * 
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Description: A set of custom labels supplied by the user.
         * A list of key-&gt;value pairs.
         * Example: { &#34;name&#34;: &#34;wrench&#34;, &#34;mass&#34;: &#34;1.3kg&#34;, &#34;count&#34;: &#34;3&#34; }.
         * 
         * **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
         * Please refer to the field `effective_labels` for all of the labels present on the resource.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param location The region of the Backup Channel.
         * 
         * @return builder
         * 
         */
        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The region of the Backup Channel.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name The full name of the BackupChannel Resource.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The full name of the BackupChannel Resource.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        public BackupChannelArgs build() {
            if ($.destinationProject == null) {
                throw new MissingRequiredPropertyException("BackupChannelArgs", "destinationProject");
            }
            if ($.location == null) {
                throw new MissingRequiredPropertyException("BackupChannelArgs", "location");
            }
            return $;
        }
    }

}
