// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.beyondcorp.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.beyondcorp.outputs.GetAppGatewayAllocatedConnection;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetAppGatewayResult {
    private List<GetAppGatewayAllocatedConnection> allocatedConnections;
    private String displayName;
    private Map<String,String> effectiveLabels;
    private String hostType;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private Map<String,String> labels;
    private String name;
    private @Nullable String project;
    private Map<String,String> pulumiLabels;
    private @Nullable String region;
    private String state;
    private String type;
    private String uri;

    private GetAppGatewayResult() {}
    public List<GetAppGatewayAllocatedConnection> allocatedConnections() {
        return this.allocatedConnections;
    }
    public String displayName() {
        return this.displayName;
    }
    public Map<String,String> effectiveLabels() {
        return this.effectiveLabels;
    }
    public String hostType() {
        return this.hostType;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Map<String,String> labels() {
        return this.labels;
    }
    public String name() {
        return this.name;
    }
    public Optional<String> project() {
        return Optional.ofNullable(this.project);
    }
    public Map<String,String> pulumiLabels() {
        return this.pulumiLabels;
    }
    public Optional<String> region() {
        return Optional.ofNullable(this.region);
    }
    public String state() {
        return this.state;
    }
    public String type() {
        return this.type;
    }
    public String uri() {
        return this.uri;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAppGatewayResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetAppGatewayAllocatedConnection> allocatedConnections;
        private String displayName;
        private Map<String,String> effectiveLabels;
        private String hostType;
        private String id;
        private Map<String,String> labels;
        private String name;
        private @Nullable String project;
        private Map<String,String> pulumiLabels;
        private @Nullable String region;
        private String state;
        private String type;
        private String uri;
        public Builder() {}
        public Builder(GetAppGatewayResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allocatedConnections = defaults.allocatedConnections;
    	      this.displayName = defaults.displayName;
    	      this.effectiveLabels = defaults.effectiveLabels;
    	      this.hostType = defaults.hostType;
    	      this.id = defaults.id;
    	      this.labels = defaults.labels;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.pulumiLabels = defaults.pulumiLabels;
    	      this.region = defaults.region;
    	      this.state = defaults.state;
    	      this.type = defaults.type;
    	      this.uri = defaults.uri;
        }

        @CustomType.Setter
        public Builder allocatedConnections(List<GetAppGatewayAllocatedConnection> allocatedConnections) {
            if (allocatedConnections == null) {
              throw new MissingRequiredPropertyException("GetAppGatewayResult", "allocatedConnections");
            }
            this.allocatedConnections = allocatedConnections;
            return this;
        }
        public Builder allocatedConnections(GetAppGatewayAllocatedConnection... allocatedConnections) {
            return allocatedConnections(List.of(allocatedConnections));
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetAppGatewayResult", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder effectiveLabels(Map<String,String> effectiveLabels) {
            if (effectiveLabels == null) {
              throw new MissingRequiredPropertyException("GetAppGatewayResult", "effectiveLabels");
            }
            this.effectiveLabels = effectiveLabels;
            return this;
        }
        @CustomType.Setter
        public Builder hostType(String hostType) {
            if (hostType == null) {
              throw new MissingRequiredPropertyException("GetAppGatewayResult", "hostType");
            }
            this.hostType = hostType;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetAppGatewayResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder labels(Map<String,String> labels) {
            if (labels == null) {
              throw new MissingRequiredPropertyException("GetAppGatewayResult", "labels");
            }
            this.labels = labels;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetAppGatewayResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder project(@Nullable String project) {

            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder pulumiLabels(Map<String,String> pulumiLabels) {
            if (pulumiLabels == null) {
              throw new MissingRequiredPropertyException("GetAppGatewayResult", "pulumiLabels");
            }
            this.pulumiLabels = pulumiLabels;
            return this;
        }
        @CustomType.Setter
        public Builder region(@Nullable String region) {

            this.region = region;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetAppGatewayResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetAppGatewayResult", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder uri(String uri) {
            if (uri == null) {
              throw new MissingRequiredPropertyException("GetAppGatewayResult", "uri");
            }
            this.uri = uri;
            return this;
        }
        public GetAppGatewayResult build() {
            final var _resultValue = new GetAppGatewayResult();
            _resultValue.allocatedConnections = allocatedConnections;
            _resultValue.displayName = displayName;
            _resultValue.effectiveLabels = effectiveLabels;
            _resultValue.hostType = hostType;
            _resultValue.id = id;
            _resultValue.labels = labels;
            _resultValue.name = name;
            _resultValue.project = project;
            _resultValue.pulumiLabels = pulumiLabels;
            _resultValue.region = region;
            _resultValue.state = state;
            _resultValue.type = type;
            _resultValue.uri = uri;
            return _resultValue;
        }
    }
}
