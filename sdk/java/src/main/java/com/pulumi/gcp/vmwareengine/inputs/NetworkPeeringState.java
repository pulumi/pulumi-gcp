// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.vmwareengine.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NetworkPeeringState extends com.pulumi.resources.ResourceArgs {

    public static final NetworkPeeringState Empty = new NetworkPeeringState();

    /**
     * Creation time of this resource.
     * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, with nanosecond resolution and
     * up to nine fractional digits. Examples: &#34;2014-10-02T15:01:23Z&#34; and &#34;2014-10-02T15:01:23.045123456Z&#34;.
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return Creation time of this resource.
     * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, with nanosecond resolution and
     * up to nine fractional digits. Examples: &#34;2014-10-02T15:01:23Z&#34; and &#34;2014-10-02T15:01:23.045123456Z&#34;.
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * User-provided description for this network peering.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return User-provided description for this network peering.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * True if custom routes are exported to the peered network; false otherwise.
     * 
     */
    @Import(name="exportCustomRoutes")
    private @Nullable Output<Boolean> exportCustomRoutes;

    /**
     * @return True if custom routes are exported to the peered network; false otherwise.
     * 
     */
    public Optional<Output<Boolean>> exportCustomRoutes() {
        return Optional.ofNullable(this.exportCustomRoutes);
    }

    /**
     * True if all subnet routes with a public IP address range are exported; false otherwise.
     * 
     */
    @Import(name="exportCustomRoutesWithPublicIp")
    private @Nullable Output<Boolean> exportCustomRoutesWithPublicIp;

    /**
     * @return True if all subnet routes with a public IP address range are exported; false otherwise.
     * 
     */
    public Optional<Output<Boolean>> exportCustomRoutesWithPublicIp() {
        return Optional.ofNullable(this.exportCustomRoutesWithPublicIp);
    }

    /**
     * True if custom routes are imported from the peered network; false otherwise.
     * 
     */
    @Import(name="importCustomRoutes")
    private @Nullable Output<Boolean> importCustomRoutes;

    /**
     * @return True if custom routes are imported from the peered network; false otherwise.
     * 
     */
    public Optional<Output<Boolean>> importCustomRoutes() {
        return Optional.ofNullable(this.importCustomRoutes);
    }

    /**
     * True if custom routes are imported from the peered network; false otherwise.
     * 
     */
    @Import(name="importCustomRoutesWithPublicIp")
    private @Nullable Output<Boolean> importCustomRoutesWithPublicIp;

    /**
     * @return True if custom routes are imported from the peered network; false otherwise.
     * 
     */
    public Optional<Output<Boolean>> importCustomRoutesWithPublicIp() {
        return Optional.ofNullable(this.importCustomRoutesWithPublicIp);
    }

    /**
     * The ID of the Network Peering.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The ID of the Network Peering.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The relative resource name of the network to peer with a standard VMware Engine network.
     * The provided network can be a consumer VPC network or another standard VMware Engine network.
     * 
     */
    @Import(name="peerNetwork")
    private @Nullable Output<String> peerNetwork;

    /**
     * @return The relative resource name of the network to peer with a standard VMware Engine network.
     * The provided network can be a consumer VPC network or another standard VMware Engine network.
     * 
     */
    public Optional<Output<String>> peerNetwork() {
        return Optional.ofNullable(this.peerNetwork);
    }

    /**
     * The type of the network to peer with the VMware Engine network.
     * Possible values are: `STANDARD`, `VMWARE_ENGINE_NETWORK`, `PRIVATE_SERVICES_ACCESS`, `NETAPP_CLOUD_VOLUMES`, `THIRD_PARTY_SERVICE`, `DELL_POWERSCALE`, `GOOGLE_CLOUD_NETAPP_VOLUMES`.
     * 
     */
    @Import(name="peerNetworkType")
    private @Nullable Output<String> peerNetworkType;

    /**
     * @return The type of the network to peer with the VMware Engine network.
     * Possible values are: `STANDARD`, `VMWARE_ENGINE_NETWORK`, `PRIVATE_SERVICES_ACCESS`, `NETAPP_CLOUD_VOLUMES`, `THIRD_PARTY_SERVICE`, `DELL_POWERSCALE`, `GOOGLE_CLOUD_NETAPP_VOLUMES`.
     * 
     */
    public Optional<Output<String>> peerNetworkType() {
        return Optional.ofNullable(this.peerNetworkType);
    }

    /**
     * The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return The ID of the project in which the resource belongs.
     * If it is not provided, the provider project is used.
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * State of the network peering.
     * This field has a value of &#39;ACTIVE&#39; when there&#39;s a matching configuration in the peer network.
     * New values may be added to this enum when appropriate.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return State of the network peering.
     * This field has a value of &#39;ACTIVE&#39; when there&#39;s a matching configuration in the peer network.
     * New values may be added to this enum when appropriate.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * Details about the current state of the network peering.
     * 
     */
    @Import(name="stateDetails")
    private @Nullable Output<String> stateDetails;

    /**
     * @return Details about the current state of the network peering.
     * 
     */
    public Optional<Output<String>> stateDetails() {
        return Optional.ofNullable(this.stateDetails);
    }

    /**
     * System-generated unique identifier for the resource.
     * 
     */
    @Import(name="uid")
    private @Nullable Output<String> uid;

    /**
     * @return System-generated unique identifier for the resource.
     * 
     */
    public Optional<Output<String>> uid() {
        return Optional.ofNullable(this.uid);
    }

    /**
     * Last updated time of this resource.
     * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, with nanosecond resolution and up to nine
     * fractional digits. Examples: &#34;2014-10-02T15:01:23Z&#34; and &#34;2014-10-02T15:01:23.045123456Z&#34;.
     * 
     */
    @Import(name="updateTime")
    private @Nullable Output<String> updateTime;

    /**
     * @return Last updated time of this resource.
     * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, with nanosecond resolution and up to nine
     * fractional digits. Examples: &#34;2014-10-02T15:01:23Z&#34; and &#34;2014-10-02T15:01:23.045123456Z&#34;.
     * 
     */
    public Optional<Output<String>> updateTime() {
        return Optional.ofNullable(this.updateTime);
    }

    /**
     * The relative resource name of the VMware Engine network. Specify the name in the following form:
     * projects/{project}/locations/{location}/vmwareEngineNetworks/{vmwareEngineNetworkId} where {project}
     * can either be a project number or a project ID.
     * 
     */
    @Import(name="vmwareEngineNetwork")
    private @Nullable Output<String> vmwareEngineNetwork;

    /**
     * @return The relative resource name of the VMware Engine network. Specify the name in the following form:
     * projects/{project}/locations/{location}/vmwareEngineNetworks/{vmwareEngineNetworkId} where {project}
     * can either be a project number or a project ID.
     * 
     */
    public Optional<Output<String>> vmwareEngineNetwork() {
        return Optional.ofNullable(this.vmwareEngineNetwork);
    }

    /**
     * The canonical name of the VMware Engine network in the form:
     * projects/{project_number}/locations/{location}/vmwareEngineNetworks/{vmwareEngineNetworkId}
     * 
     */
    @Import(name="vmwareEngineNetworkCanonical")
    private @Nullable Output<String> vmwareEngineNetworkCanonical;

    /**
     * @return The canonical name of the VMware Engine network in the form:
     * projects/{project_number}/locations/{location}/vmwareEngineNetworks/{vmwareEngineNetworkId}
     * 
     */
    public Optional<Output<String>> vmwareEngineNetworkCanonical() {
        return Optional.ofNullable(this.vmwareEngineNetworkCanonical);
    }

    private NetworkPeeringState() {}

    private NetworkPeeringState(NetworkPeeringState $) {
        this.createTime = $.createTime;
        this.description = $.description;
        this.exportCustomRoutes = $.exportCustomRoutes;
        this.exportCustomRoutesWithPublicIp = $.exportCustomRoutesWithPublicIp;
        this.importCustomRoutes = $.importCustomRoutes;
        this.importCustomRoutesWithPublicIp = $.importCustomRoutesWithPublicIp;
        this.name = $.name;
        this.peerNetwork = $.peerNetwork;
        this.peerNetworkType = $.peerNetworkType;
        this.project = $.project;
        this.state = $.state;
        this.stateDetails = $.stateDetails;
        this.uid = $.uid;
        this.updateTime = $.updateTime;
        this.vmwareEngineNetwork = $.vmwareEngineNetwork;
        this.vmwareEngineNetworkCanonical = $.vmwareEngineNetworkCanonical;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetworkPeeringState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetworkPeeringState $;

        public Builder() {
            $ = new NetworkPeeringState();
        }

        public Builder(NetworkPeeringState defaults) {
            $ = new NetworkPeeringState(Objects.requireNonNull(defaults));
        }

        /**
         * @param createTime Creation time of this resource.
         * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, with nanosecond resolution and
         * up to nine fractional digits. Examples: &#34;2014-10-02T15:01:23Z&#34; and &#34;2014-10-02T15:01:23.045123456Z&#34;.
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime Creation time of this resource.
         * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, with nanosecond resolution and
         * up to nine fractional digits. Examples: &#34;2014-10-02T15:01:23Z&#34; and &#34;2014-10-02T15:01:23.045123456Z&#34;.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param description User-provided description for this network peering.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description User-provided description for this network peering.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param exportCustomRoutes True if custom routes are exported to the peered network; false otherwise.
         * 
         * @return builder
         * 
         */
        public Builder exportCustomRoutes(@Nullable Output<Boolean> exportCustomRoutes) {
            $.exportCustomRoutes = exportCustomRoutes;
            return this;
        }

        /**
         * @param exportCustomRoutes True if custom routes are exported to the peered network; false otherwise.
         * 
         * @return builder
         * 
         */
        public Builder exportCustomRoutes(Boolean exportCustomRoutes) {
            return exportCustomRoutes(Output.of(exportCustomRoutes));
        }

        /**
         * @param exportCustomRoutesWithPublicIp True if all subnet routes with a public IP address range are exported; false otherwise.
         * 
         * @return builder
         * 
         */
        public Builder exportCustomRoutesWithPublicIp(@Nullable Output<Boolean> exportCustomRoutesWithPublicIp) {
            $.exportCustomRoutesWithPublicIp = exportCustomRoutesWithPublicIp;
            return this;
        }

        /**
         * @param exportCustomRoutesWithPublicIp True if all subnet routes with a public IP address range are exported; false otherwise.
         * 
         * @return builder
         * 
         */
        public Builder exportCustomRoutesWithPublicIp(Boolean exportCustomRoutesWithPublicIp) {
            return exportCustomRoutesWithPublicIp(Output.of(exportCustomRoutesWithPublicIp));
        }

        /**
         * @param importCustomRoutes True if custom routes are imported from the peered network; false otherwise.
         * 
         * @return builder
         * 
         */
        public Builder importCustomRoutes(@Nullable Output<Boolean> importCustomRoutes) {
            $.importCustomRoutes = importCustomRoutes;
            return this;
        }

        /**
         * @param importCustomRoutes True if custom routes are imported from the peered network; false otherwise.
         * 
         * @return builder
         * 
         */
        public Builder importCustomRoutes(Boolean importCustomRoutes) {
            return importCustomRoutes(Output.of(importCustomRoutes));
        }

        /**
         * @param importCustomRoutesWithPublicIp True if custom routes are imported from the peered network; false otherwise.
         * 
         * @return builder
         * 
         */
        public Builder importCustomRoutesWithPublicIp(@Nullable Output<Boolean> importCustomRoutesWithPublicIp) {
            $.importCustomRoutesWithPublicIp = importCustomRoutesWithPublicIp;
            return this;
        }

        /**
         * @param importCustomRoutesWithPublicIp True if custom routes are imported from the peered network; false otherwise.
         * 
         * @return builder
         * 
         */
        public Builder importCustomRoutesWithPublicIp(Boolean importCustomRoutesWithPublicIp) {
            return importCustomRoutesWithPublicIp(Output.of(importCustomRoutesWithPublicIp));
        }

        /**
         * @param name The ID of the Network Peering.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The ID of the Network Peering.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param peerNetwork The relative resource name of the network to peer with a standard VMware Engine network.
         * The provided network can be a consumer VPC network or another standard VMware Engine network.
         * 
         * @return builder
         * 
         */
        public Builder peerNetwork(@Nullable Output<String> peerNetwork) {
            $.peerNetwork = peerNetwork;
            return this;
        }

        /**
         * @param peerNetwork The relative resource name of the network to peer with a standard VMware Engine network.
         * The provided network can be a consumer VPC network or another standard VMware Engine network.
         * 
         * @return builder
         * 
         */
        public Builder peerNetwork(String peerNetwork) {
            return peerNetwork(Output.of(peerNetwork));
        }

        /**
         * @param peerNetworkType The type of the network to peer with the VMware Engine network.
         * Possible values are: `STANDARD`, `VMWARE_ENGINE_NETWORK`, `PRIVATE_SERVICES_ACCESS`, `NETAPP_CLOUD_VOLUMES`, `THIRD_PARTY_SERVICE`, `DELL_POWERSCALE`, `GOOGLE_CLOUD_NETAPP_VOLUMES`.
         * 
         * @return builder
         * 
         */
        public Builder peerNetworkType(@Nullable Output<String> peerNetworkType) {
            $.peerNetworkType = peerNetworkType;
            return this;
        }

        /**
         * @param peerNetworkType The type of the network to peer with the VMware Engine network.
         * Possible values are: `STANDARD`, `VMWARE_ENGINE_NETWORK`, `PRIVATE_SERVICES_ACCESS`, `NETAPP_CLOUD_VOLUMES`, `THIRD_PARTY_SERVICE`, `DELL_POWERSCALE`, `GOOGLE_CLOUD_NETAPP_VOLUMES`.
         * 
         * @return builder
         * 
         */
        public Builder peerNetworkType(String peerNetworkType) {
            return peerNetworkType(Output.of(peerNetworkType));
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The ID of the project in which the resource belongs.
         * If it is not provided, the provider project is used.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param state State of the network peering.
         * This field has a value of &#39;ACTIVE&#39; when there&#39;s a matching configuration in the peer network.
         * New values may be added to this enum when appropriate.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state State of the network peering.
         * This field has a value of &#39;ACTIVE&#39; when there&#39;s a matching configuration in the peer network.
         * New values may be added to this enum when appropriate.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param stateDetails Details about the current state of the network peering.
         * 
         * @return builder
         * 
         */
        public Builder stateDetails(@Nullable Output<String> stateDetails) {
            $.stateDetails = stateDetails;
            return this;
        }

        /**
         * @param stateDetails Details about the current state of the network peering.
         * 
         * @return builder
         * 
         */
        public Builder stateDetails(String stateDetails) {
            return stateDetails(Output.of(stateDetails));
        }

        /**
         * @param uid System-generated unique identifier for the resource.
         * 
         * @return builder
         * 
         */
        public Builder uid(@Nullable Output<String> uid) {
            $.uid = uid;
            return this;
        }

        /**
         * @param uid System-generated unique identifier for the resource.
         * 
         * @return builder
         * 
         */
        public Builder uid(String uid) {
            return uid(Output.of(uid));
        }

        /**
         * @param updateTime Last updated time of this resource.
         * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, with nanosecond resolution and up to nine
         * fractional digits. Examples: &#34;2014-10-02T15:01:23Z&#34; and &#34;2014-10-02T15:01:23.045123456Z&#34;.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(@Nullable Output<String> updateTime) {
            $.updateTime = updateTime;
            return this;
        }

        /**
         * @param updateTime Last updated time of this resource.
         * A timestamp in RFC3339 UTC &#34;Zulu&#34; format, with nanosecond resolution and up to nine
         * fractional digits. Examples: &#34;2014-10-02T15:01:23Z&#34; and &#34;2014-10-02T15:01:23.045123456Z&#34;.
         * 
         * @return builder
         * 
         */
        public Builder updateTime(String updateTime) {
            return updateTime(Output.of(updateTime));
        }

        /**
         * @param vmwareEngineNetwork The relative resource name of the VMware Engine network. Specify the name in the following form:
         * projects/{project}/locations/{location}/vmwareEngineNetworks/{vmwareEngineNetworkId} where {project}
         * can either be a project number or a project ID.
         * 
         * @return builder
         * 
         */
        public Builder vmwareEngineNetwork(@Nullable Output<String> vmwareEngineNetwork) {
            $.vmwareEngineNetwork = vmwareEngineNetwork;
            return this;
        }

        /**
         * @param vmwareEngineNetwork The relative resource name of the VMware Engine network. Specify the name in the following form:
         * projects/{project}/locations/{location}/vmwareEngineNetworks/{vmwareEngineNetworkId} where {project}
         * can either be a project number or a project ID.
         * 
         * @return builder
         * 
         */
        public Builder vmwareEngineNetwork(String vmwareEngineNetwork) {
            return vmwareEngineNetwork(Output.of(vmwareEngineNetwork));
        }

        /**
         * @param vmwareEngineNetworkCanonical The canonical name of the VMware Engine network in the form:
         * projects/{project_number}/locations/{location}/vmwareEngineNetworks/{vmwareEngineNetworkId}
         * 
         * @return builder
         * 
         */
        public Builder vmwareEngineNetworkCanonical(@Nullable Output<String> vmwareEngineNetworkCanonical) {
            $.vmwareEngineNetworkCanonical = vmwareEngineNetworkCanonical;
            return this;
        }

        /**
         * @param vmwareEngineNetworkCanonical The canonical name of the VMware Engine network in the form:
         * projects/{project_number}/locations/{location}/vmwareEngineNetworks/{vmwareEngineNetworkId}
         * 
         * @return builder
         * 
         */
        public Builder vmwareEngineNetworkCanonical(String vmwareEngineNetworkCanonical) {
            return vmwareEngineNetworkCanonical(Output.of(vmwareEngineNetworkCanonical));
        }

        public NetworkPeeringState build() {
            return $;
        }
    }

}
