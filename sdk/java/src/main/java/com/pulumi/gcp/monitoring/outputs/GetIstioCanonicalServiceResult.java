// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.monitoring.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.monitoring.outputs.GetIstioCanonicalServiceTelemetry;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetIstioCanonicalServiceResult {
    private String canonicalService;
    private String canonicalServiceNamespace;
    /**
     * @return Name used for UI elements listing this (Monitoring) Service.
     * 
     */
    private String displayName;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String meshUid;
    /**
     * @return The full REST resource name for this channel. The syntax is:
     * `projects/[PROJECT_ID]/services/[SERVICE_ID]`.
     * 
     */
    private String name;
    private @Nullable String project;
    private String serviceId;
    /**
     * @return Configuration for how to query telemetry on the Service. Structure is documented below.
     * 
     */
    private List<GetIstioCanonicalServiceTelemetry> telemetries;
    private Map<String,String> userLabels;

    private GetIstioCanonicalServiceResult() {}
    public String canonicalService() {
        return this.canonicalService;
    }
    public String canonicalServiceNamespace() {
        return this.canonicalServiceNamespace;
    }
    /**
     * @return Name used for UI elements listing this (Monitoring) Service.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String meshUid() {
        return this.meshUid;
    }
    /**
     * @return The full REST resource name for this channel. The syntax is:
     * `projects/[PROJECT_ID]/services/[SERVICE_ID]`.
     * 
     */
    public String name() {
        return this.name;
    }
    public Optional<String> project() {
        return Optional.ofNullable(this.project);
    }
    public String serviceId() {
        return this.serviceId;
    }
    /**
     * @return Configuration for how to query telemetry on the Service. Structure is documented below.
     * 
     */
    public List<GetIstioCanonicalServiceTelemetry> telemetries() {
        return this.telemetries;
    }
    public Map<String,String> userLabels() {
        return this.userLabels;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetIstioCanonicalServiceResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String canonicalService;
        private String canonicalServiceNamespace;
        private String displayName;
        private String id;
        private String meshUid;
        private String name;
        private @Nullable String project;
        private String serviceId;
        private List<GetIstioCanonicalServiceTelemetry> telemetries;
        private Map<String,String> userLabels;
        public Builder() {}
        public Builder(GetIstioCanonicalServiceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.canonicalService = defaults.canonicalService;
    	      this.canonicalServiceNamespace = defaults.canonicalServiceNamespace;
    	      this.displayName = defaults.displayName;
    	      this.id = defaults.id;
    	      this.meshUid = defaults.meshUid;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.serviceId = defaults.serviceId;
    	      this.telemetries = defaults.telemetries;
    	      this.userLabels = defaults.userLabels;
        }

        @CustomType.Setter
        public Builder canonicalService(String canonicalService) {
            if (canonicalService == null) {
              throw new MissingRequiredPropertyException("GetIstioCanonicalServiceResult", "canonicalService");
            }
            this.canonicalService = canonicalService;
            return this;
        }
        @CustomType.Setter
        public Builder canonicalServiceNamespace(String canonicalServiceNamespace) {
            if (canonicalServiceNamespace == null) {
              throw new MissingRequiredPropertyException("GetIstioCanonicalServiceResult", "canonicalServiceNamespace");
            }
            this.canonicalServiceNamespace = canonicalServiceNamespace;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetIstioCanonicalServiceResult", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetIstioCanonicalServiceResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder meshUid(String meshUid) {
            if (meshUid == null) {
              throw new MissingRequiredPropertyException("GetIstioCanonicalServiceResult", "meshUid");
            }
            this.meshUid = meshUid;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetIstioCanonicalServiceResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder project(@Nullable String project) {

            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder serviceId(String serviceId) {
            if (serviceId == null) {
              throw new MissingRequiredPropertyException("GetIstioCanonicalServiceResult", "serviceId");
            }
            this.serviceId = serviceId;
            return this;
        }
        @CustomType.Setter
        public Builder telemetries(List<GetIstioCanonicalServiceTelemetry> telemetries) {
            if (telemetries == null) {
              throw new MissingRequiredPropertyException("GetIstioCanonicalServiceResult", "telemetries");
            }
            this.telemetries = telemetries;
            return this;
        }
        public Builder telemetries(GetIstioCanonicalServiceTelemetry... telemetries) {
            return telemetries(List.of(telemetries));
        }
        @CustomType.Setter
        public Builder userLabels(Map<String,String> userLabels) {
            if (userLabels == null) {
              throw new MissingRequiredPropertyException("GetIstioCanonicalServiceResult", "userLabels");
            }
            this.userLabels = userLabels;
            return this;
        }
        public GetIstioCanonicalServiceResult build() {
            final var _resultValue = new GetIstioCanonicalServiceResult();
            _resultValue.canonicalService = canonicalService;
            _resultValue.canonicalServiceNamespace = canonicalServiceNamespace;
            _resultValue.displayName = displayName;
            _resultValue.id = id;
            _resultValue.meshUid = meshUid;
            _resultValue.name = name;
            _resultValue.project = project;
            _resultValue.serviceId = serviceId;
            _resultValue.telemetries = telemetries;
            _resultValue.userLabels = userLabels;
            return _resultValue;
        }
    }
}
