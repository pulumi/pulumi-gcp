// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.developerconnect.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.gcp.developerconnect.inputs.ConnectionBitbucketDataCenterConfigAuthorizerCredentialArgs;
import com.pulumi.gcp.developerconnect.inputs.ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialArgs;
import com.pulumi.gcp.developerconnect.inputs.ConnectionBitbucketDataCenterConfigServiceDirectoryConfigArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectionBitbucketDataCenterConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConnectionBitbucketDataCenterConfigArgs Empty = new ConnectionBitbucketDataCenterConfigArgs();

    /**
     * Represents a personal access token that authorized the Connection,
     * and associated metadata.
     * Structure is documented below.
     * 
     */
    @Import(name="authorizerCredential", required=true)
    private Output<ConnectionBitbucketDataCenterConfigAuthorizerCredentialArgs> authorizerCredential;

    /**
     * @return Represents a personal access token that authorized the Connection,
     * and associated metadata.
     * Structure is documented below.
     * 
     */
    public Output<ConnectionBitbucketDataCenterConfigAuthorizerCredentialArgs> authorizerCredential() {
        return this.authorizerCredential;
    }

    /**
     * Required. The URI of the Bitbucket Data Center host this connection is for.
     * 
     */
    @Import(name="hostUri", required=true)
    private Output<String> hostUri;

    /**
     * @return Required. The URI of the Bitbucket Data Center host this connection is for.
     * 
     */
    public Output<String> hostUri() {
        return this.hostUri;
    }

    /**
     * Represents a personal access token that authorized the Connection,
     * and associated metadata.
     * Structure is documented below.
     * 
     */
    @Import(name="readAuthorizerCredential", required=true)
    private Output<ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialArgs> readAuthorizerCredential;

    /**
     * @return Represents a personal access token that authorized the Connection,
     * and associated metadata.
     * Structure is documented below.
     * 
     */
    public Output<ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialArgs> readAuthorizerCredential() {
        return this.readAuthorizerCredential;
    }

    /**
     * (Output)
     * Output only. Version of the Bitbucket Data Center server running on the `host_uri`.
     * 
     */
    @Import(name="serverVersion")
    private @Nullable Output<String> serverVersion;

    /**
     * @return (Output)
     * Output only. Version of the Bitbucket Data Center server running on the `host_uri`.
     * 
     */
    public Optional<Output<String>> serverVersion() {
        return Optional.ofNullable(this.serverVersion);
    }

    /**
     * ServiceDirectoryConfig represents Service Directory configuration for a
     * connection.
     * Structure is documented below.
     * 
     */
    @Import(name="serviceDirectoryConfig")
    private @Nullable Output<ConnectionBitbucketDataCenterConfigServiceDirectoryConfigArgs> serviceDirectoryConfig;

    /**
     * @return ServiceDirectoryConfig represents Service Directory configuration for a
     * connection.
     * Structure is documented below.
     * 
     */
    public Optional<Output<ConnectionBitbucketDataCenterConfigServiceDirectoryConfigArgs>> serviceDirectoryConfig() {
        return Optional.ofNullable(this.serviceDirectoryConfig);
    }

    /**
     * Optional. SSL certificate authority to trust when making requests to Bitbucket Data
     * Center.
     * 
     */
    @Import(name="sslCaCertificate")
    private @Nullable Output<String> sslCaCertificate;

    /**
     * @return Optional. SSL certificate authority to trust when making requests to Bitbucket Data
     * Center.
     * 
     */
    public Optional<Output<String>> sslCaCertificate() {
        return Optional.ofNullable(this.sslCaCertificate);
    }

    /**
     * Required. Immutable. SecretManager resource containing the webhook secret used to verify webhook
     * events, formatted as `projects/*&#47;secrets/*&#47;versions/*`. This is used to
     * validate webhooks.
     * 
     */
    @Import(name="webhookSecretSecretVersion", required=true)
    private Output<String> webhookSecretSecretVersion;

    /**
     * @return Required. Immutable. SecretManager resource containing the webhook secret used to verify webhook
     * events, formatted as `projects/*&#47;secrets/*&#47;versions/*`. This is used to
     * validate webhooks.
     * 
     */
    public Output<String> webhookSecretSecretVersion() {
        return this.webhookSecretSecretVersion;
    }

    private ConnectionBitbucketDataCenterConfigArgs() {}

    private ConnectionBitbucketDataCenterConfigArgs(ConnectionBitbucketDataCenterConfigArgs $) {
        this.authorizerCredential = $.authorizerCredential;
        this.hostUri = $.hostUri;
        this.readAuthorizerCredential = $.readAuthorizerCredential;
        this.serverVersion = $.serverVersion;
        this.serviceDirectoryConfig = $.serviceDirectoryConfig;
        this.sslCaCertificate = $.sslCaCertificate;
        this.webhookSecretSecretVersion = $.webhookSecretSecretVersion;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectionBitbucketDataCenterConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectionBitbucketDataCenterConfigArgs $;

        public Builder() {
            $ = new ConnectionBitbucketDataCenterConfigArgs();
        }

        public Builder(ConnectionBitbucketDataCenterConfigArgs defaults) {
            $ = new ConnectionBitbucketDataCenterConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authorizerCredential Represents a personal access token that authorized the Connection,
         * and associated metadata.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder authorizerCredential(Output<ConnectionBitbucketDataCenterConfigAuthorizerCredentialArgs> authorizerCredential) {
            $.authorizerCredential = authorizerCredential;
            return this;
        }

        /**
         * @param authorizerCredential Represents a personal access token that authorized the Connection,
         * and associated metadata.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder authorizerCredential(ConnectionBitbucketDataCenterConfigAuthorizerCredentialArgs authorizerCredential) {
            return authorizerCredential(Output.of(authorizerCredential));
        }

        /**
         * @param hostUri Required. The URI of the Bitbucket Data Center host this connection is for.
         * 
         * @return builder
         * 
         */
        public Builder hostUri(Output<String> hostUri) {
            $.hostUri = hostUri;
            return this;
        }

        /**
         * @param hostUri Required. The URI of the Bitbucket Data Center host this connection is for.
         * 
         * @return builder
         * 
         */
        public Builder hostUri(String hostUri) {
            return hostUri(Output.of(hostUri));
        }

        /**
         * @param readAuthorizerCredential Represents a personal access token that authorized the Connection,
         * and associated metadata.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder readAuthorizerCredential(Output<ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialArgs> readAuthorizerCredential) {
            $.readAuthorizerCredential = readAuthorizerCredential;
            return this;
        }

        /**
         * @param readAuthorizerCredential Represents a personal access token that authorized the Connection,
         * and associated metadata.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder readAuthorizerCredential(ConnectionBitbucketDataCenterConfigReadAuthorizerCredentialArgs readAuthorizerCredential) {
            return readAuthorizerCredential(Output.of(readAuthorizerCredential));
        }

        /**
         * @param serverVersion (Output)
         * Output only. Version of the Bitbucket Data Center server running on the `host_uri`.
         * 
         * @return builder
         * 
         */
        public Builder serverVersion(@Nullable Output<String> serverVersion) {
            $.serverVersion = serverVersion;
            return this;
        }

        /**
         * @param serverVersion (Output)
         * Output only. Version of the Bitbucket Data Center server running on the `host_uri`.
         * 
         * @return builder
         * 
         */
        public Builder serverVersion(String serverVersion) {
            return serverVersion(Output.of(serverVersion));
        }

        /**
         * @param serviceDirectoryConfig ServiceDirectoryConfig represents Service Directory configuration for a
         * connection.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder serviceDirectoryConfig(@Nullable Output<ConnectionBitbucketDataCenterConfigServiceDirectoryConfigArgs> serviceDirectoryConfig) {
            $.serviceDirectoryConfig = serviceDirectoryConfig;
            return this;
        }

        /**
         * @param serviceDirectoryConfig ServiceDirectoryConfig represents Service Directory configuration for a
         * connection.
         * Structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder serviceDirectoryConfig(ConnectionBitbucketDataCenterConfigServiceDirectoryConfigArgs serviceDirectoryConfig) {
            return serviceDirectoryConfig(Output.of(serviceDirectoryConfig));
        }

        /**
         * @param sslCaCertificate Optional. SSL certificate authority to trust when making requests to Bitbucket Data
         * Center.
         * 
         * @return builder
         * 
         */
        public Builder sslCaCertificate(@Nullable Output<String> sslCaCertificate) {
            $.sslCaCertificate = sslCaCertificate;
            return this;
        }

        /**
         * @param sslCaCertificate Optional. SSL certificate authority to trust when making requests to Bitbucket Data
         * Center.
         * 
         * @return builder
         * 
         */
        public Builder sslCaCertificate(String sslCaCertificate) {
            return sslCaCertificate(Output.of(sslCaCertificate));
        }

        /**
         * @param webhookSecretSecretVersion Required. Immutable. SecretManager resource containing the webhook secret used to verify webhook
         * events, formatted as `projects/*&#47;secrets/*&#47;versions/*`. This is used to
         * validate webhooks.
         * 
         * @return builder
         * 
         */
        public Builder webhookSecretSecretVersion(Output<String> webhookSecretSecretVersion) {
            $.webhookSecretSecretVersion = webhookSecretSecretVersion;
            return this;
        }

        /**
         * @param webhookSecretSecretVersion Required. Immutable. SecretManager resource containing the webhook secret used to verify webhook
         * events, formatted as `projects/*&#47;secrets/*&#47;versions/*`. This is used to
         * validate webhooks.
         * 
         * @return builder
         * 
         */
        public Builder webhookSecretSecretVersion(String webhookSecretSecretVersion) {
            return webhookSecretSecretVersion(Output.of(webhookSecretSecretVersion));
        }

        public ConnectionBitbucketDataCenterConfigArgs build() {
            if ($.authorizerCredential == null) {
                throw new MissingRequiredPropertyException("ConnectionBitbucketDataCenterConfigArgs", "authorizerCredential");
            }
            if ($.hostUri == null) {
                throw new MissingRequiredPropertyException("ConnectionBitbucketDataCenterConfigArgs", "hostUri");
            }
            if ($.readAuthorizerCredential == null) {
                throw new MissingRequiredPropertyException("ConnectionBitbucketDataCenterConfigArgs", "readAuthorizerCredential");
            }
            if ($.webhookSecretSecretVersion == null) {
                throw new MissingRequiredPropertyException("ConnectionBitbucketDataCenterConfigArgs", "webhookSecretSecretVersion");
            }
            return $;
        }
    }

}
