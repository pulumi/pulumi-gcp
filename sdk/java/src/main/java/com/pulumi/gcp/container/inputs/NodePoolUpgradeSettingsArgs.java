// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.gcp.container.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.gcp.container.inputs.NodePoolUpgradeSettingsBlueGreenSettingsArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NodePoolUpgradeSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final NodePoolUpgradeSettingsArgs Empty = new NodePoolUpgradeSettingsArgs();

    /**
     * The settings to adjust [blue green upgrades](https://cloud.google.com/kubernetes-engine/docs/concepts/node-pool-upgrade-strategies#blue-green-upgrade-strategy).
     * Structure is documented below
     * 
     */
    @Import(name="blueGreenSettings")
    private @Nullable Output<NodePoolUpgradeSettingsBlueGreenSettingsArgs> blueGreenSettings;

    /**
     * @return The settings to adjust [blue green upgrades](https://cloud.google.com/kubernetes-engine/docs/concepts/node-pool-upgrade-strategies#blue-green-upgrade-strategy).
     * Structure is documented below
     * 
     */
    public Optional<Output<NodePoolUpgradeSettingsBlueGreenSettingsArgs>> blueGreenSettings() {
        return Optional.ofNullable(this.blueGreenSettings);
    }

    /**
     * The number of additional nodes that can be added to the node pool during
     * an upgrade. Increasing `max_surge` raises the number of nodes that can be upgraded simultaneously.
     * Can be set to 0 or greater.
     * 
     */
    @Import(name="maxSurge")
    private @Nullable Output<Integer> maxSurge;

    /**
     * @return The number of additional nodes that can be added to the node pool during
     * an upgrade. Increasing `max_surge` raises the number of nodes that can be upgraded simultaneously.
     * Can be set to 0 or greater.
     * 
     */
    public Optional<Output<Integer>> maxSurge() {
        return Optional.ofNullable(this.maxSurge);
    }

    /**
     * The number of nodes that can be simultaneously unavailable during
     * an upgrade. Increasing `max_unavailable` raises the number of nodes that can be upgraded in
     * parallel. Can be set to 0 or greater.
     * 
     */
    @Import(name="maxUnavailable")
    private @Nullable Output<Integer> maxUnavailable;

    /**
     * @return The number of nodes that can be simultaneously unavailable during
     * an upgrade. Increasing `max_unavailable` raises the number of nodes that can be upgraded in
     * parallel. Can be set to 0 or greater.
     * 
     */
    public Optional<Output<Integer>> maxUnavailable() {
        return Optional.ofNullable(this.maxUnavailable);
    }

    /**
     * The upgrade stragey to be used for upgrading the nodes.
     * 
     */
    @Import(name="strategy")
    private @Nullable Output<String> strategy;

    /**
     * @return The upgrade stragey to be used for upgrading the nodes.
     * 
     */
    public Optional<Output<String>> strategy() {
        return Optional.ofNullable(this.strategy);
    }

    private NodePoolUpgradeSettingsArgs() {}

    private NodePoolUpgradeSettingsArgs(NodePoolUpgradeSettingsArgs $) {
        this.blueGreenSettings = $.blueGreenSettings;
        this.maxSurge = $.maxSurge;
        this.maxUnavailable = $.maxUnavailable;
        this.strategy = $.strategy;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NodePoolUpgradeSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NodePoolUpgradeSettingsArgs $;

        public Builder() {
            $ = new NodePoolUpgradeSettingsArgs();
        }

        public Builder(NodePoolUpgradeSettingsArgs defaults) {
            $ = new NodePoolUpgradeSettingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param blueGreenSettings The settings to adjust [blue green upgrades](https://cloud.google.com/kubernetes-engine/docs/concepts/node-pool-upgrade-strategies#blue-green-upgrade-strategy).
         * Structure is documented below
         * 
         * @return builder
         * 
         */
        public Builder blueGreenSettings(@Nullable Output<NodePoolUpgradeSettingsBlueGreenSettingsArgs> blueGreenSettings) {
            $.blueGreenSettings = blueGreenSettings;
            return this;
        }

        /**
         * @param blueGreenSettings The settings to adjust [blue green upgrades](https://cloud.google.com/kubernetes-engine/docs/concepts/node-pool-upgrade-strategies#blue-green-upgrade-strategy).
         * Structure is documented below
         * 
         * @return builder
         * 
         */
        public Builder blueGreenSettings(NodePoolUpgradeSettingsBlueGreenSettingsArgs blueGreenSettings) {
            return blueGreenSettings(Output.of(blueGreenSettings));
        }

        /**
         * @param maxSurge The number of additional nodes that can be added to the node pool during
         * an upgrade. Increasing `max_surge` raises the number of nodes that can be upgraded simultaneously.
         * Can be set to 0 or greater.
         * 
         * @return builder
         * 
         */
        public Builder maxSurge(@Nullable Output<Integer> maxSurge) {
            $.maxSurge = maxSurge;
            return this;
        }

        /**
         * @param maxSurge The number of additional nodes that can be added to the node pool during
         * an upgrade. Increasing `max_surge` raises the number of nodes that can be upgraded simultaneously.
         * Can be set to 0 or greater.
         * 
         * @return builder
         * 
         */
        public Builder maxSurge(Integer maxSurge) {
            return maxSurge(Output.of(maxSurge));
        }

        /**
         * @param maxUnavailable The number of nodes that can be simultaneously unavailable during
         * an upgrade. Increasing `max_unavailable` raises the number of nodes that can be upgraded in
         * parallel. Can be set to 0 or greater.
         * 
         * @return builder
         * 
         */
        public Builder maxUnavailable(@Nullable Output<Integer> maxUnavailable) {
            $.maxUnavailable = maxUnavailable;
            return this;
        }

        /**
         * @param maxUnavailable The number of nodes that can be simultaneously unavailable during
         * an upgrade. Increasing `max_unavailable` raises the number of nodes that can be upgraded in
         * parallel. Can be set to 0 or greater.
         * 
         * @return builder
         * 
         */
        public Builder maxUnavailable(Integer maxUnavailable) {
            return maxUnavailable(Output.of(maxUnavailable));
        }

        /**
         * @param strategy The upgrade stragey to be used for upgrading the nodes.
         * 
         * @return builder
         * 
         */
        public Builder strategy(@Nullable Output<String> strategy) {
            $.strategy = strategy;
            return this;
        }

        /**
         * @param strategy The upgrade stragey to be used for upgrading the nodes.
         * 
         * @return builder
         * 
         */
        public Builder strategy(String strategy) {
            return strategy(Output.of(strategy));
        }

        public NodePoolUpgradeSettingsArgs build() {
            return $;
        }
    }

}
