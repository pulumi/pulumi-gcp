# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from .. import utilities, tables

class VPNTunnel(pulumi.CustomResource):
    creation_timestamp: pulumi.Output[str]
    description: pulumi.Output[str]
    detailed_status: pulumi.Output[str]
    ike_version: pulumi.Output[int]
    label_fingerprint: pulumi.Output[str]
    labels: pulumi.Output[dict]
    local_traffic_selectors: pulumi.Output[list]
    name: pulumi.Output[str]
    peer_ip: pulumi.Output[str]
    project: pulumi.Output[str]
    """
    The ID of the project in which the resource belongs.
    If it is not provided, the provider project is used.
    """
    region: pulumi.Output[str]
    remote_traffic_selectors: pulumi.Output[list]
    router: pulumi.Output[str]
    self_link: pulumi.Output[str]
    """
    The URI of the created resource.
    """
    shared_secret: pulumi.Output[str]
    shared_secret_hash: pulumi.Output[str]
    target_vpn_gateway: pulumi.Output[str]
    def __init__(__self__, resource_name, opts=None, description=None, ike_version=None, labels=None, local_traffic_selectors=None, name=None, peer_ip=None, project=None, region=None, remote_traffic_selectors=None, router=None, shared_secret=None, target_vpn_gateway=None, __name__=None, __opts__=None):
        """
        VPN tunnel resource.
        
        
        To get more information about VpnTunnel, see:
        
        * [API documentation](https://cloud.google.com/compute/docs/reference/rest/v1/vpnTunnels)
        * How-to Guides
            * [Cloud VPN Overview](https://cloud.google.com/vpn/docs/concepts/overview)
            * [Networks and Tunnel Routing](https://cloud.google.com/vpn/docs/concepts/choosing-networks-routing)
        
        > **Warning:** All arguments including the shared secret will be stored in the raw
        state as plain-text.
        [Read more about sensitive data in state](https://www.terraform.io/docs/state/sensitive-data.html).
        
        <div class = "oics-button" style="float: right; margin: 0 0 -15px">
          <a href="https://console.cloud.google.com/cloudshell/open?cloudshell_git_repo=https%3A%2F%2Fgithub.com%2Fterraform-google-modules%2Fdocs-examples.git&cloudshell_working_dir=vpn_tunnel_basic&cloudshell_image=gcr.io%2Fgraphite-cloud-shell-images%2Fterraform%3Alatest&open_in_editor=main.tf&cloudshell_print=.%2Fmotd&cloudshell_tutorial=.%2Ftutorial.md" target="_blank">
            <img alt="Open in Cloud Shell" src="//gstatic.com/cloudssh/images/open-btn.svg" style="max-height: 44px; margin: 32px auto; max-width: 100%;">
          </a>
        </div>
        
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] project: The ID of the project in which the resource belongs.
               If it is not provided, the provider project is used.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if not resource_name:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(resource_name, str):
            raise TypeError('Expected resource name to be a string')
        if opts and not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        __props__['description'] = description

        __props__['ike_version'] = ike_version

        __props__['labels'] = labels

        __props__['local_traffic_selectors'] = local_traffic_selectors

        __props__['name'] = name

        if peer_ip is None:
            raise TypeError('Missing required property peer_ip')
        __props__['peer_ip'] = peer_ip

        __props__['project'] = project

        __props__['region'] = region

        __props__['remote_traffic_selectors'] = remote_traffic_selectors

        __props__['router'] = router

        if shared_secret is None:
            raise TypeError('Missing required property shared_secret')
        __props__['shared_secret'] = shared_secret

        if target_vpn_gateway is None:
            raise TypeError('Missing required property target_vpn_gateway')
        __props__['target_vpn_gateway'] = target_vpn_gateway

        __props__['creation_timestamp'] = None
        __props__['detailed_status'] = None
        __props__['label_fingerprint'] = None
        __props__['self_link'] = None
        __props__['shared_secret_hash'] = None

        super(VPNTunnel, __self__).__init__(
            'gcp:compute/vPNTunnel:VPNTunnel',
            resource_name,
            __props__,
            opts)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

