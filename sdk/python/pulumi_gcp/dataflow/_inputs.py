# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'PipelineScheduleInfoArgs',
    'PipelineWorkloadArgs',
    'PipelineWorkloadDataflowFlexTemplateRequestArgs',
    'PipelineWorkloadDataflowFlexTemplateRequestLaunchParameterArgs',
    'PipelineWorkloadDataflowFlexTemplateRequestLaunchParameterEnvironmentArgs',
    'PipelineWorkloadDataflowLaunchTemplateRequestArgs',
    'PipelineWorkloadDataflowLaunchTemplateRequestLaunchParametersArgs',
    'PipelineWorkloadDataflowLaunchTemplateRequestLaunchParametersEnvironmentArgs',
]

@pulumi.input_type
class PipelineScheduleInfoArgs:
    def __init__(__self__, *,
                 next_job_time: Optional[pulumi.Input[str]] = None,
                 schedule: Optional[pulumi.Input[str]] = None,
                 time_zone: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] next_job_time: (Output)
               When the next Scheduler job is going to run.
               A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
        :param pulumi.Input[str] schedule: Unix-cron format of the schedule. This information is retrieved from the linked Cloud Scheduler.
        :param pulumi.Input[str] time_zone: Timezone ID. This matches the timezone IDs used by the Cloud Scheduler API. If empty, UTC time is assumed.
        """
        PipelineScheduleInfoArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            next_job_time=next_job_time,
            schedule=schedule,
            time_zone=time_zone,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             next_job_time: Optional[pulumi.Input[str]] = None,
             schedule: Optional[pulumi.Input[str]] = None,
             time_zone: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if next_job_time is not None:
            _setter("next_job_time", next_job_time)
        if schedule is not None:
            _setter("schedule", schedule)
        if time_zone is not None:
            _setter("time_zone", time_zone)

    @property
    @pulumi.getter(name="nextJobTime")
    def next_job_time(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        When the next Scheduler job is going to run.
        A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
        """
        return pulumi.get(self, "next_job_time")

    @next_job_time.setter
    def next_job_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next_job_time", value)

    @property
    @pulumi.getter
    def schedule(self) -> Optional[pulumi.Input[str]]:
        """
        Unix-cron format of the schedule. This information is retrieved from the linked Cloud Scheduler.
        """
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schedule", value)

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> Optional[pulumi.Input[str]]:
        """
        Timezone ID. This matches the timezone IDs used by the Cloud Scheduler API. If empty, UTC time is assumed.
        """
        return pulumi.get(self, "time_zone")

    @time_zone.setter
    def time_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_zone", value)


@pulumi.input_type
class PipelineWorkloadArgs:
    def __init__(__self__, *,
                 dataflow_flex_template_request: Optional[pulumi.Input['PipelineWorkloadDataflowFlexTemplateRequestArgs']] = None,
                 dataflow_launch_template_request: Optional[pulumi.Input['PipelineWorkloadDataflowLaunchTemplateRequestArgs']] = None):
        """
        :param pulumi.Input['PipelineWorkloadDataflowFlexTemplateRequestArgs'] dataflow_flex_template_request: Template information and additional parameters needed to launch a Dataflow job using the flex launch API.
               https://cloud.google.com/dataflow/docs/reference/data-pipelines/rest/v1/projects.locations.pipelines#launchflextemplaterequest
               Structure is documented below.
        :param pulumi.Input['PipelineWorkloadDataflowLaunchTemplateRequestArgs'] dataflow_launch_template_request: Template information and additional parameters needed to launch a Dataflow job using the standard launch API.
               https://cloud.google.com/dataflow/docs/reference/data-pipelines/rest/v1/projects.locations.pipelines#launchtemplaterequest
               Structure is documented below.
        """
        PipelineWorkloadArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dataflow_flex_template_request=dataflow_flex_template_request,
            dataflow_launch_template_request=dataflow_launch_template_request,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dataflow_flex_template_request: Optional[pulumi.Input['PipelineWorkloadDataflowFlexTemplateRequestArgs']] = None,
             dataflow_launch_template_request: Optional[pulumi.Input['PipelineWorkloadDataflowLaunchTemplateRequestArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if dataflow_flex_template_request is not None:
            _setter("dataflow_flex_template_request", dataflow_flex_template_request)
        if dataflow_launch_template_request is not None:
            _setter("dataflow_launch_template_request", dataflow_launch_template_request)

    @property
    @pulumi.getter(name="dataflowFlexTemplateRequest")
    def dataflow_flex_template_request(self) -> Optional[pulumi.Input['PipelineWorkloadDataflowFlexTemplateRequestArgs']]:
        """
        Template information and additional parameters needed to launch a Dataflow job using the flex launch API.
        https://cloud.google.com/dataflow/docs/reference/data-pipelines/rest/v1/projects.locations.pipelines#launchflextemplaterequest
        Structure is documented below.
        """
        return pulumi.get(self, "dataflow_flex_template_request")

    @dataflow_flex_template_request.setter
    def dataflow_flex_template_request(self, value: Optional[pulumi.Input['PipelineWorkloadDataflowFlexTemplateRequestArgs']]):
        pulumi.set(self, "dataflow_flex_template_request", value)

    @property
    @pulumi.getter(name="dataflowLaunchTemplateRequest")
    def dataflow_launch_template_request(self) -> Optional[pulumi.Input['PipelineWorkloadDataflowLaunchTemplateRequestArgs']]:
        """
        Template information and additional parameters needed to launch a Dataflow job using the standard launch API.
        https://cloud.google.com/dataflow/docs/reference/data-pipelines/rest/v1/projects.locations.pipelines#launchtemplaterequest
        Structure is documented below.
        """
        return pulumi.get(self, "dataflow_launch_template_request")

    @dataflow_launch_template_request.setter
    def dataflow_launch_template_request(self, value: Optional[pulumi.Input['PipelineWorkloadDataflowLaunchTemplateRequestArgs']]):
        pulumi.set(self, "dataflow_launch_template_request", value)


@pulumi.input_type
class PipelineWorkloadDataflowFlexTemplateRequestArgs:
    def __init__(__self__, *,
                 launch_parameter: pulumi.Input['PipelineWorkloadDataflowFlexTemplateRequestLaunchParameterArgs'],
                 location: pulumi.Input[str],
                 project_id: pulumi.Input[str],
                 validate_only: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input['PipelineWorkloadDataflowFlexTemplateRequestLaunchParameterArgs'] launch_parameter: Parameter to launch a job from a Flex Template.
               https://cloud.google.com/dataflow/docs/reference/data-pipelines/rest/v1/projects.locations.pipelines#launchflextemplateparameter
               Structure is documented below.
        :param pulumi.Input[str] location: The regional endpoint to which to direct the request. For example, us-central1, us-west1.
        :param pulumi.Input[str] project_id: The ID of the Cloud Platform project that the job belongs to.
        :param pulumi.Input[bool] validate_only: If true, the request is validated but not actually executed. Defaults to false.
        """
        PipelineWorkloadDataflowFlexTemplateRequestArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            launch_parameter=launch_parameter,
            location=location,
            project_id=project_id,
            validate_only=validate_only,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             launch_parameter: pulumi.Input['PipelineWorkloadDataflowFlexTemplateRequestLaunchParameterArgs'],
             location: pulumi.Input[str],
             project_id: pulumi.Input[str],
             validate_only: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("launch_parameter", launch_parameter)
        _setter("location", location)
        _setter("project_id", project_id)
        if validate_only is not None:
            _setter("validate_only", validate_only)

    @property
    @pulumi.getter(name="launchParameter")
    def launch_parameter(self) -> pulumi.Input['PipelineWorkloadDataflowFlexTemplateRequestLaunchParameterArgs']:
        """
        Parameter to launch a job from a Flex Template.
        https://cloud.google.com/dataflow/docs/reference/data-pipelines/rest/v1/projects.locations.pipelines#launchflextemplateparameter
        Structure is documented below.
        """
        return pulumi.get(self, "launch_parameter")

    @launch_parameter.setter
    def launch_parameter(self, value: pulumi.Input['PipelineWorkloadDataflowFlexTemplateRequestLaunchParameterArgs']):
        pulumi.set(self, "launch_parameter", value)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input[str]:
        """
        The regional endpoint to which to direct the request. For example, us-central1, us-west1.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[str]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[str]:
        """
        The ID of the Cloud Platform project that the job belongs to.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="validateOnly")
    def validate_only(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, the request is validated but not actually executed. Defaults to false.
        """
        return pulumi.get(self, "validate_only")

    @validate_only.setter
    def validate_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "validate_only", value)


@pulumi.input_type
class PipelineWorkloadDataflowFlexTemplateRequestLaunchParameterArgs:
    def __init__(__self__, *,
                 job_name: pulumi.Input[str],
                 container_spec_gcs_path: Optional[pulumi.Input[str]] = None,
                 environment: Optional[pulumi.Input['PipelineWorkloadDataflowFlexTemplateRequestLaunchParameterEnvironmentArgs']] = None,
                 launch_options: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 transform_name_mappings: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 update: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] job_name: The job name to use for the created job. For an update job request, the job name should be the same as the existing running job.
        :param pulumi.Input[str] container_spec_gcs_path: Cloud Storage path to a file with a JSON-serialized ContainerSpec as content.
        :param pulumi.Input['PipelineWorkloadDataflowFlexTemplateRequestLaunchParameterEnvironmentArgs'] environment: The runtime environment for the Flex Template job.
               https://cloud.google.com/dataflow/docs/reference/data-pipelines/rest/v1/projects.locations.pipelines#FlexTemplateRuntimeEnvironment
               Structure is documented below.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] launch_options: Launch options for this Flex Template job. This is a common set of options across languages and templates. This should not be used to pass job parameters.
               'An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.'
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] parameters: 'The parameters for the Flex Template. Example: {"numWorkers":"5"}'
               'An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.'
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] transform_name_mappings: 'Use this to pass transform name mappings for streaming update jobs. Example: {"oldTransformName":"newTransformName",...}'
               'An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.'
        :param pulumi.Input[bool] update: Set this to true if you are sending a request to update a running streaming job. When set, the job name should be the same as the running job.
        """
        PipelineWorkloadDataflowFlexTemplateRequestLaunchParameterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            job_name=job_name,
            container_spec_gcs_path=container_spec_gcs_path,
            environment=environment,
            launch_options=launch_options,
            parameters=parameters,
            transform_name_mappings=transform_name_mappings,
            update=update,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             job_name: pulumi.Input[str],
             container_spec_gcs_path: Optional[pulumi.Input[str]] = None,
             environment: Optional[pulumi.Input['PipelineWorkloadDataflowFlexTemplateRequestLaunchParameterEnvironmentArgs']] = None,
             launch_options: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             transform_name_mappings: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             update: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("job_name", job_name)
        if container_spec_gcs_path is not None:
            _setter("container_spec_gcs_path", container_spec_gcs_path)
        if environment is not None:
            _setter("environment", environment)
        if launch_options is not None:
            _setter("launch_options", launch_options)
        if parameters is not None:
            _setter("parameters", parameters)
        if transform_name_mappings is not None:
            _setter("transform_name_mappings", transform_name_mappings)
        if update is not None:
            _setter("update", update)

    @property
    @pulumi.getter(name="jobName")
    def job_name(self) -> pulumi.Input[str]:
        """
        The job name to use for the created job. For an update job request, the job name should be the same as the existing running job.
        """
        return pulumi.get(self, "job_name")

    @job_name.setter
    def job_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "job_name", value)

    @property
    @pulumi.getter(name="containerSpecGcsPath")
    def container_spec_gcs_path(self) -> Optional[pulumi.Input[str]]:
        """
        Cloud Storage path to a file with a JSON-serialized ContainerSpec as content.
        """
        return pulumi.get(self, "container_spec_gcs_path")

    @container_spec_gcs_path.setter
    def container_spec_gcs_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_spec_gcs_path", value)

    @property
    @pulumi.getter
    def environment(self) -> Optional[pulumi.Input['PipelineWorkloadDataflowFlexTemplateRequestLaunchParameterEnvironmentArgs']]:
        """
        The runtime environment for the Flex Template job.
        https://cloud.google.com/dataflow/docs/reference/data-pipelines/rest/v1/projects.locations.pipelines#FlexTemplateRuntimeEnvironment
        Structure is documented below.
        """
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(self, value: Optional[pulumi.Input['PipelineWorkloadDataflowFlexTemplateRequestLaunchParameterEnvironmentArgs']]):
        pulumi.set(self, "environment", value)

    @property
    @pulumi.getter(name="launchOptions")
    def launch_options(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Launch options for this Flex Template job. This is a common set of options across languages and templates. This should not be used to pass job parameters.
        'An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.'
        """
        return pulumi.get(self, "launch_options")

    @launch_options.setter
    def launch_options(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "launch_options", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        'The parameters for the Flex Template. Example: {"numWorkers":"5"}'
        'An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.'
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "parameters", value)

    @property
    @pulumi.getter(name="transformNameMappings")
    def transform_name_mappings(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        'Use this to pass transform name mappings for streaming update jobs. Example: {"oldTransformName":"newTransformName",...}'
        'An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.'
        """
        return pulumi.get(self, "transform_name_mappings")

    @transform_name_mappings.setter
    def transform_name_mappings(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "transform_name_mappings", value)

    @property
    @pulumi.getter
    def update(self) -> Optional[pulumi.Input[bool]]:
        """
        Set this to true if you are sending a request to update a running streaming job. When set, the job name should be the same as the running job.
        """
        return pulumi.get(self, "update")

    @update.setter
    def update(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "update", value)


@pulumi.input_type
class PipelineWorkloadDataflowFlexTemplateRequestLaunchParameterEnvironmentArgs:
    def __init__(__self__, *,
                 additional_experiments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 additional_user_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 enable_streaming_engine: Optional[pulumi.Input[bool]] = None,
                 flexrs_goal: Optional[pulumi.Input[str]] = None,
                 ip_configuration: Optional[pulumi.Input[str]] = None,
                 kms_key_name: Optional[pulumi.Input[str]] = None,
                 machine_type: Optional[pulumi.Input[str]] = None,
                 max_workers: Optional[pulumi.Input[int]] = None,
                 network: Optional[pulumi.Input[str]] = None,
                 num_workers: Optional[pulumi.Input[int]] = None,
                 service_account_email: Optional[pulumi.Input[str]] = None,
                 subnetwork: Optional[pulumi.Input[str]] = None,
                 temp_location: Optional[pulumi.Input[str]] = None,
                 worker_region: Optional[pulumi.Input[str]] = None,
                 worker_zone: Optional[pulumi.Input[str]] = None,
                 zone: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] additional_experiments: Additional experiment flags for the job.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] additional_user_labels: Additional user labels to be specified for the job. Keys and values should follow the restrictions specified in the labeling restrictions page. An object containing a list of key/value pairs.
               'Example: { "name": "wrench", "mass": "1kg", "count": "3" }.'
               'An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.'
        :param pulumi.Input[bool] enable_streaming_engine: Whether to enable Streaming Engine for the job.
        :param pulumi.Input[str] flexrs_goal: Set FlexRS goal for the job. https://cloud.google.com/dataflow/docs/guides/flexrs
               https://cloud.google.com/dataflow/docs/reference/data-pipelines/rest/v1/projects.locations.pipelines#FlexResourceSchedulingGoal
               Possible values are: `FLEXRS_UNSPECIFIED`, `FLEXRS_SPEED_OPTIMIZED`, `FLEXRS_COST_OPTIMIZED`.
        :param pulumi.Input[str] ip_configuration: Configuration for VM IPs.
               https://cloud.google.com/dataflow/docs/reference/data-pipelines/rest/v1/projects.locations.pipelines#WorkerIPAddressConfiguration
               Possible values are: `WORKER_IP_UNSPECIFIED`, `WORKER_IP_PUBLIC`, `WORKER_IP_PRIVATE`.
        :param pulumi.Input[str] kms_key_name: 'Name for the Cloud KMS key for the job. The key format is: projects//locations//keyRings//cryptoKeys/'
        :param pulumi.Input[str] machine_type: The machine type to use for the job. Defaults to the value from the template if not specified.
        :param pulumi.Input[int] max_workers: The maximum number of Compute Engine instances to be made available to your pipeline during execution, from 1 to 1000.
        :param pulumi.Input[str] network: Network to which VMs will be assigned. If empty or unspecified, the service will use the network "default".
        :param pulumi.Input[int] num_workers: The initial number of Compute Engine instances for the job.
        :param pulumi.Input[str] service_account_email: The email address of the service account to run the job as.
        :param pulumi.Input[str] subnetwork: Subnetwork to which VMs will be assigned, if desired. You can specify a subnetwork using either a complete URL or an abbreviated path. Expected to be of the form "https://www.googleapis.com/compute/v1/projects/HOST_PROJECT_ID/regions/REGION/subnetworks/SUBNETWORK" or "regions/REGION/subnetworks/SUBNETWORK". If the subnetwork is located in a Shared VPC network, you must use the complete URL.
        :param pulumi.Input[str] temp_location: The Cloud Storage path to use for temporary files. Must be a valid Cloud Storage URL, beginning with gs://.
        :param pulumi.Input[str] worker_region: The Compute Engine region (https://cloud.google.com/compute/docs/regions-zones/regions-zones) in which worker processing should occur, e.g. "us-west1". Mutually exclusive with workerZone. If neither workerRegion nor workerZone is specified, default to the control plane's region.
        :param pulumi.Input[str] worker_zone: The Compute Engine zone (https://cloud.google.com/compute/docs/regions-zones/regions-zones) in which worker processing should occur, e.g. "us-west1-a". Mutually exclusive with workerRegion. If neither workerRegion nor workerZone is specified, a zone in the control plane's region is chosen based on available capacity. If both workerZone and zone are set, workerZone takes precedence.
        :param pulumi.Input[str] zone: The Compute Engine availability zone for launching worker instances to run your pipeline. In the future, workerZone will take precedence.
        """
        PipelineWorkloadDataflowFlexTemplateRequestLaunchParameterEnvironmentArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            additional_experiments=additional_experiments,
            additional_user_labels=additional_user_labels,
            enable_streaming_engine=enable_streaming_engine,
            flexrs_goal=flexrs_goal,
            ip_configuration=ip_configuration,
            kms_key_name=kms_key_name,
            machine_type=machine_type,
            max_workers=max_workers,
            network=network,
            num_workers=num_workers,
            service_account_email=service_account_email,
            subnetwork=subnetwork,
            temp_location=temp_location,
            worker_region=worker_region,
            worker_zone=worker_zone,
            zone=zone,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             additional_experiments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             additional_user_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             enable_streaming_engine: Optional[pulumi.Input[bool]] = None,
             flexrs_goal: Optional[pulumi.Input[str]] = None,
             ip_configuration: Optional[pulumi.Input[str]] = None,
             kms_key_name: Optional[pulumi.Input[str]] = None,
             machine_type: Optional[pulumi.Input[str]] = None,
             max_workers: Optional[pulumi.Input[int]] = None,
             network: Optional[pulumi.Input[str]] = None,
             num_workers: Optional[pulumi.Input[int]] = None,
             service_account_email: Optional[pulumi.Input[str]] = None,
             subnetwork: Optional[pulumi.Input[str]] = None,
             temp_location: Optional[pulumi.Input[str]] = None,
             worker_region: Optional[pulumi.Input[str]] = None,
             worker_zone: Optional[pulumi.Input[str]] = None,
             zone: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if additional_experiments is not None:
            _setter("additional_experiments", additional_experiments)
        if additional_user_labels is not None:
            _setter("additional_user_labels", additional_user_labels)
        if enable_streaming_engine is not None:
            _setter("enable_streaming_engine", enable_streaming_engine)
        if flexrs_goal is not None:
            _setter("flexrs_goal", flexrs_goal)
        if ip_configuration is not None:
            _setter("ip_configuration", ip_configuration)
        if kms_key_name is not None:
            _setter("kms_key_name", kms_key_name)
        if machine_type is not None:
            _setter("machine_type", machine_type)
        if max_workers is not None:
            _setter("max_workers", max_workers)
        if network is not None:
            _setter("network", network)
        if num_workers is not None:
            _setter("num_workers", num_workers)
        if service_account_email is not None:
            _setter("service_account_email", service_account_email)
        if subnetwork is not None:
            _setter("subnetwork", subnetwork)
        if temp_location is not None:
            _setter("temp_location", temp_location)
        if worker_region is not None:
            _setter("worker_region", worker_region)
        if worker_zone is not None:
            _setter("worker_zone", worker_zone)
        if zone is not None:
            _setter("zone", zone)

    @property
    @pulumi.getter(name="additionalExperiments")
    def additional_experiments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Additional experiment flags for the job.
        """
        return pulumi.get(self, "additional_experiments")

    @additional_experiments.setter
    def additional_experiments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "additional_experiments", value)

    @property
    @pulumi.getter(name="additionalUserLabels")
    def additional_user_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Additional user labels to be specified for the job. Keys and values should follow the restrictions specified in the labeling restrictions page. An object containing a list of key/value pairs.
        'Example: { "name": "wrench", "mass": "1kg", "count": "3" }.'
        'An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.'
        """
        return pulumi.get(self, "additional_user_labels")

    @additional_user_labels.setter
    def additional_user_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "additional_user_labels", value)

    @property
    @pulumi.getter(name="enableStreamingEngine")
    def enable_streaming_engine(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable Streaming Engine for the job.
        """
        return pulumi.get(self, "enable_streaming_engine")

    @enable_streaming_engine.setter
    def enable_streaming_engine(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_streaming_engine", value)

    @property
    @pulumi.getter(name="flexrsGoal")
    def flexrs_goal(self) -> Optional[pulumi.Input[str]]:
        """
        Set FlexRS goal for the job. https://cloud.google.com/dataflow/docs/guides/flexrs
        https://cloud.google.com/dataflow/docs/reference/data-pipelines/rest/v1/projects.locations.pipelines#FlexResourceSchedulingGoal
        Possible values are: `FLEXRS_UNSPECIFIED`, `FLEXRS_SPEED_OPTIMIZED`, `FLEXRS_COST_OPTIMIZED`.
        """
        return pulumi.get(self, "flexrs_goal")

    @flexrs_goal.setter
    def flexrs_goal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "flexrs_goal", value)

    @property
    @pulumi.getter(name="ipConfiguration")
    def ip_configuration(self) -> Optional[pulumi.Input[str]]:
        """
        Configuration for VM IPs.
        https://cloud.google.com/dataflow/docs/reference/data-pipelines/rest/v1/projects.locations.pipelines#WorkerIPAddressConfiguration
        Possible values are: `WORKER_IP_UNSPECIFIED`, `WORKER_IP_PUBLIC`, `WORKER_IP_PRIVATE`.
        """
        return pulumi.get(self, "ip_configuration")

    @ip_configuration.setter
    def ip_configuration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_configuration", value)

    @property
    @pulumi.getter(name="kmsKeyName")
    def kms_key_name(self) -> Optional[pulumi.Input[str]]:
        """
        'Name for the Cloud KMS key for the job. The key format is: projects//locations//keyRings//cryptoKeys/'
        """
        return pulumi.get(self, "kms_key_name")

    @kms_key_name.setter
    def kms_key_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_name", value)

    @property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> Optional[pulumi.Input[str]]:
        """
        The machine type to use for the job. Defaults to the value from the template if not specified.
        """
        return pulumi.get(self, "machine_type")

    @machine_type.setter
    def machine_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "machine_type", value)

    @property
    @pulumi.getter(name="maxWorkers")
    def max_workers(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of Compute Engine instances to be made available to your pipeline during execution, from 1 to 1000.
        """
        return pulumi.get(self, "max_workers")

    @max_workers.setter
    def max_workers(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_workers", value)

    @property
    @pulumi.getter
    def network(self) -> Optional[pulumi.Input[str]]:
        """
        Network to which VMs will be assigned. If empty or unspecified, the service will use the network "default".
        """
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter(name="numWorkers")
    def num_workers(self) -> Optional[pulumi.Input[int]]:
        """
        The initial number of Compute Engine instances for the job.
        """
        return pulumi.get(self, "num_workers")

    @num_workers.setter
    def num_workers(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "num_workers", value)

    @property
    @pulumi.getter(name="serviceAccountEmail")
    def service_account_email(self) -> Optional[pulumi.Input[str]]:
        """
        The email address of the service account to run the job as.
        """
        return pulumi.get(self, "service_account_email")

    @service_account_email.setter
    def service_account_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_email", value)

    @property
    @pulumi.getter
    def subnetwork(self) -> Optional[pulumi.Input[str]]:
        """
        Subnetwork to which VMs will be assigned, if desired. You can specify a subnetwork using either a complete URL or an abbreviated path. Expected to be of the form "https://www.googleapis.com/compute/v1/projects/HOST_PROJECT_ID/regions/REGION/subnetworks/SUBNETWORK" or "regions/REGION/subnetworks/SUBNETWORK". If the subnetwork is located in a Shared VPC network, you must use the complete URL.
        """
        return pulumi.get(self, "subnetwork")

    @subnetwork.setter
    def subnetwork(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnetwork", value)

    @property
    @pulumi.getter(name="tempLocation")
    def temp_location(self) -> Optional[pulumi.Input[str]]:
        """
        The Cloud Storage path to use for temporary files. Must be a valid Cloud Storage URL, beginning with gs://.
        """
        return pulumi.get(self, "temp_location")

    @temp_location.setter
    def temp_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "temp_location", value)

    @property
    @pulumi.getter(name="workerRegion")
    def worker_region(self) -> Optional[pulumi.Input[str]]:
        """
        The Compute Engine region (https://cloud.google.com/compute/docs/regions-zones/regions-zones) in which worker processing should occur, e.g. "us-west1". Mutually exclusive with workerZone. If neither workerRegion nor workerZone is specified, default to the control plane's region.
        """
        return pulumi.get(self, "worker_region")

    @worker_region.setter
    def worker_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "worker_region", value)

    @property
    @pulumi.getter(name="workerZone")
    def worker_zone(self) -> Optional[pulumi.Input[str]]:
        """
        The Compute Engine zone (https://cloud.google.com/compute/docs/regions-zones/regions-zones) in which worker processing should occur, e.g. "us-west1-a". Mutually exclusive with workerRegion. If neither workerRegion nor workerZone is specified, a zone in the control plane's region is chosen based on available capacity. If both workerZone and zone are set, workerZone takes precedence.
        """
        return pulumi.get(self, "worker_zone")

    @worker_zone.setter
    def worker_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "worker_zone", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[str]]:
        """
        The Compute Engine availability zone for launching worker instances to run your pipeline. In the future, workerZone will take precedence.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone", value)


@pulumi.input_type
class PipelineWorkloadDataflowLaunchTemplateRequestArgs:
    def __init__(__self__, *,
                 project_id: pulumi.Input[str],
                 gcs_path: Optional[pulumi.Input[str]] = None,
                 launch_parameters: Optional[pulumi.Input['PipelineWorkloadDataflowLaunchTemplateRequestLaunchParametersArgs']] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 validate_only: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] project_id: The ID of the Cloud Platform project that the job belongs to.
        :param pulumi.Input[str] gcs_path: A Cloud Storage path to the template from which to create the job. Must be a valid Cloud Storage URL, beginning with 'gs://'.
        :param pulumi.Input['PipelineWorkloadDataflowLaunchTemplateRequestLaunchParametersArgs'] launch_parameters: The parameters of the template to launch. This should be part of the body of the POST request.
               https://cloud.google.com/dataflow/docs/reference/data-pipelines/rest/v1/projects.locations.pipelines#launchtemplateparameters
               Structure is documented below.
        :param pulumi.Input[str] location: The regional endpoint to which to direct the request.
        :param pulumi.Input[bool] validate_only: (Optional)
        """
        PipelineWorkloadDataflowLaunchTemplateRequestArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            project_id=project_id,
            gcs_path=gcs_path,
            launch_parameters=launch_parameters,
            location=location,
            validate_only=validate_only,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             project_id: pulumi.Input[str],
             gcs_path: Optional[pulumi.Input[str]] = None,
             launch_parameters: Optional[pulumi.Input['PipelineWorkloadDataflowLaunchTemplateRequestLaunchParametersArgs']] = None,
             location: Optional[pulumi.Input[str]] = None,
             validate_only: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("project_id", project_id)
        if gcs_path is not None:
            _setter("gcs_path", gcs_path)
        if launch_parameters is not None:
            _setter("launch_parameters", launch_parameters)
        if location is not None:
            _setter("location", location)
        if validate_only is not None:
            _setter("validate_only", validate_only)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[str]:
        """
        The ID of the Cloud Platform project that the job belongs to.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="gcsPath")
    def gcs_path(self) -> Optional[pulumi.Input[str]]:
        """
        A Cloud Storage path to the template from which to create the job. Must be a valid Cloud Storage URL, beginning with 'gs://'.
        """
        return pulumi.get(self, "gcs_path")

    @gcs_path.setter
    def gcs_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gcs_path", value)

    @property
    @pulumi.getter(name="launchParameters")
    def launch_parameters(self) -> Optional[pulumi.Input['PipelineWorkloadDataflowLaunchTemplateRequestLaunchParametersArgs']]:
        """
        The parameters of the template to launch. This should be part of the body of the POST request.
        https://cloud.google.com/dataflow/docs/reference/data-pipelines/rest/v1/projects.locations.pipelines#launchtemplateparameters
        Structure is documented below.
        """
        return pulumi.get(self, "launch_parameters")

    @launch_parameters.setter
    def launch_parameters(self, value: Optional[pulumi.Input['PipelineWorkloadDataflowLaunchTemplateRequestLaunchParametersArgs']]):
        pulumi.set(self, "launch_parameters", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        The regional endpoint to which to direct the request.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="validateOnly")
    def validate_only(self) -> Optional[pulumi.Input[bool]]:
        """
        (Optional)
        """
        return pulumi.get(self, "validate_only")

    @validate_only.setter
    def validate_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "validate_only", value)


@pulumi.input_type
class PipelineWorkloadDataflowLaunchTemplateRequestLaunchParametersArgs:
    def __init__(__self__, *,
                 job_name: pulumi.Input[str],
                 environment: Optional[pulumi.Input['PipelineWorkloadDataflowLaunchTemplateRequestLaunchParametersEnvironmentArgs']] = None,
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 transform_name_mapping: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 update: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] job_name: The job name to use for the created job.
        :param pulumi.Input['PipelineWorkloadDataflowLaunchTemplateRequestLaunchParametersEnvironmentArgs'] environment: The runtime environment for the job.
               https://cloud.google.com/dataflow/docs/reference/data-pipelines/rest/v1/projects.locations.pipelines#RuntimeEnvironment
               Structure is documented below.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] parameters: The runtime parameters to pass to the job.
               'An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.'
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] transform_name_mapping: Map of transform name prefixes of the job to be replaced to the corresponding name prefixes of the new job. Only applicable when updating a pipeline.
               'An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.'
        :param pulumi.Input[bool] update: If set, replace the existing pipeline with the name specified by jobName with this pipeline, preserving state.
        """
        PipelineWorkloadDataflowLaunchTemplateRequestLaunchParametersArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            job_name=job_name,
            environment=environment,
            parameters=parameters,
            transform_name_mapping=transform_name_mapping,
            update=update,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             job_name: pulumi.Input[str],
             environment: Optional[pulumi.Input['PipelineWorkloadDataflowLaunchTemplateRequestLaunchParametersEnvironmentArgs']] = None,
             parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             transform_name_mapping: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             update: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("job_name", job_name)
        if environment is not None:
            _setter("environment", environment)
        if parameters is not None:
            _setter("parameters", parameters)
        if transform_name_mapping is not None:
            _setter("transform_name_mapping", transform_name_mapping)
        if update is not None:
            _setter("update", update)

    @property
    @pulumi.getter(name="jobName")
    def job_name(self) -> pulumi.Input[str]:
        """
        The job name to use for the created job.
        """
        return pulumi.get(self, "job_name")

    @job_name.setter
    def job_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "job_name", value)

    @property
    @pulumi.getter
    def environment(self) -> Optional[pulumi.Input['PipelineWorkloadDataflowLaunchTemplateRequestLaunchParametersEnvironmentArgs']]:
        """
        The runtime environment for the job.
        https://cloud.google.com/dataflow/docs/reference/data-pipelines/rest/v1/projects.locations.pipelines#RuntimeEnvironment
        Structure is documented below.
        """
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(self, value: Optional[pulumi.Input['PipelineWorkloadDataflowLaunchTemplateRequestLaunchParametersEnvironmentArgs']]):
        pulumi.set(self, "environment", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The runtime parameters to pass to the job.
        'An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.'
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "parameters", value)

    @property
    @pulumi.getter(name="transformNameMapping")
    def transform_name_mapping(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map of transform name prefixes of the job to be replaced to the corresponding name prefixes of the new job. Only applicable when updating a pipeline.
        'An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.'
        """
        return pulumi.get(self, "transform_name_mapping")

    @transform_name_mapping.setter
    def transform_name_mapping(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "transform_name_mapping", value)

    @property
    @pulumi.getter
    def update(self) -> Optional[pulumi.Input[bool]]:
        """
        If set, replace the existing pipeline with the name specified by jobName with this pipeline, preserving state.
        """
        return pulumi.get(self, "update")

    @update.setter
    def update(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "update", value)


@pulumi.input_type
class PipelineWorkloadDataflowLaunchTemplateRequestLaunchParametersEnvironmentArgs:
    def __init__(__self__, *,
                 additional_experiments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 additional_user_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 bypass_temp_dir_validation: Optional[pulumi.Input[bool]] = None,
                 enable_streaming_engine: Optional[pulumi.Input[bool]] = None,
                 ip_configuration: Optional[pulumi.Input[str]] = None,
                 kms_key_name: Optional[pulumi.Input[str]] = None,
                 machine_type: Optional[pulumi.Input[str]] = None,
                 max_workers: Optional[pulumi.Input[int]] = None,
                 network: Optional[pulumi.Input[str]] = None,
                 num_workers: Optional[pulumi.Input[int]] = None,
                 service_account_email: Optional[pulumi.Input[str]] = None,
                 subnetwork: Optional[pulumi.Input[str]] = None,
                 temp_location: Optional[pulumi.Input[str]] = None,
                 worker_region: Optional[pulumi.Input[str]] = None,
                 worker_zone: Optional[pulumi.Input[str]] = None,
                 zone: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] additional_experiments: Additional experiment flags for the job.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] additional_user_labels: Additional user labels to be specified for the job. Keys and values should follow the restrictions specified in the labeling restrictions page. An object containing a list of key/value pairs.
               'Example: { "name": "wrench", "mass": "1kg", "count": "3" }.'
               'An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.'
        :param pulumi.Input[bool] bypass_temp_dir_validation: Whether to bypass the safety checks for the job's temporary directory. Use with caution.
        :param pulumi.Input[bool] enable_streaming_engine: Whether to enable Streaming Engine for the job.
        :param pulumi.Input[str] ip_configuration: Configuration for VM IPs.
               https://cloud.google.com/dataflow/docs/reference/data-pipelines/rest/v1/projects.locations.pipelines#WorkerIPAddressConfiguration
               Possible values are: `WORKER_IP_UNSPECIFIED`, `WORKER_IP_PUBLIC`, `WORKER_IP_PRIVATE`.
        :param pulumi.Input[str] kms_key_name: 'Name for the Cloud KMS key for the job. The key format is: projects//locations//keyRings//cryptoKeys/'
        :param pulumi.Input[str] machine_type: The machine type to use for the job. Defaults to the value from the template if not specified.
        :param pulumi.Input[int] max_workers: The maximum number of Compute Engine instances to be made available to your pipeline during execution, from 1 to 1000.
        :param pulumi.Input[str] network: Network to which VMs will be assigned. If empty or unspecified, the service will use the network "default".
        :param pulumi.Input[int] num_workers: The initial number of Compute Engine instances for the job.
        :param pulumi.Input[str] service_account_email: The email address of the service account to run the job as.
        :param pulumi.Input[str] subnetwork: Subnetwork to which VMs will be assigned, if desired. You can specify a subnetwork using either a complete URL or an abbreviated path. Expected to be of the form "https://www.googleapis.com/compute/v1/projects/HOST_PROJECT_ID/regions/REGION/subnetworks/SUBNETWORK" or "regions/REGION/subnetworks/SUBNETWORK". If the subnetwork is located in a Shared VPC network, you must use the complete URL.
        :param pulumi.Input[str] temp_location: The Cloud Storage path to use for temporary files. Must be a valid Cloud Storage URL, beginning with gs://.
        :param pulumi.Input[str] worker_region: The Compute Engine region (https://cloud.google.com/compute/docs/regions-zones/regions-zones) in which worker processing should occur, e.g. "us-west1". Mutually exclusive with workerZone. If neither workerRegion nor workerZone is specified, default to the control plane's region.
        :param pulumi.Input[str] worker_zone: The Compute Engine zone (https://cloud.google.com/compute/docs/regions-zones/regions-zones) in which worker processing should occur, e.g. "us-west1-a". Mutually exclusive with workerRegion. If neither workerRegion nor workerZone is specified, a zone in the control plane's region is chosen based on available capacity. If both workerZone and zone are set, workerZone takes precedence.
        :param pulumi.Input[str] zone: The Compute Engine availability zone for launching worker instances to run your pipeline. In the future, workerZone will take precedence.
        """
        PipelineWorkloadDataflowLaunchTemplateRequestLaunchParametersEnvironmentArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            additional_experiments=additional_experiments,
            additional_user_labels=additional_user_labels,
            bypass_temp_dir_validation=bypass_temp_dir_validation,
            enable_streaming_engine=enable_streaming_engine,
            ip_configuration=ip_configuration,
            kms_key_name=kms_key_name,
            machine_type=machine_type,
            max_workers=max_workers,
            network=network,
            num_workers=num_workers,
            service_account_email=service_account_email,
            subnetwork=subnetwork,
            temp_location=temp_location,
            worker_region=worker_region,
            worker_zone=worker_zone,
            zone=zone,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             additional_experiments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             additional_user_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             bypass_temp_dir_validation: Optional[pulumi.Input[bool]] = None,
             enable_streaming_engine: Optional[pulumi.Input[bool]] = None,
             ip_configuration: Optional[pulumi.Input[str]] = None,
             kms_key_name: Optional[pulumi.Input[str]] = None,
             machine_type: Optional[pulumi.Input[str]] = None,
             max_workers: Optional[pulumi.Input[int]] = None,
             network: Optional[pulumi.Input[str]] = None,
             num_workers: Optional[pulumi.Input[int]] = None,
             service_account_email: Optional[pulumi.Input[str]] = None,
             subnetwork: Optional[pulumi.Input[str]] = None,
             temp_location: Optional[pulumi.Input[str]] = None,
             worker_region: Optional[pulumi.Input[str]] = None,
             worker_zone: Optional[pulumi.Input[str]] = None,
             zone: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if additional_experiments is not None:
            _setter("additional_experiments", additional_experiments)
        if additional_user_labels is not None:
            _setter("additional_user_labels", additional_user_labels)
        if bypass_temp_dir_validation is not None:
            _setter("bypass_temp_dir_validation", bypass_temp_dir_validation)
        if enable_streaming_engine is not None:
            _setter("enable_streaming_engine", enable_streaming_engine)
        if ip_configuration is not None:
            _setter("ip_configuration", ip_configuration)
        if kms_key_name is not None:
            _setter("kms_key_name", kms_key_name)
        if machine_type is not None:
            _setter("machine_type", machine_type)
        if max_workers is not None:
            _setter("max_workers", max_workers)
        if network is not None:
            _setter("network", network)
        if num_workers is not None:
            _setter("num_workers", num_workers)
        if service_account_email is not None:
            _setter("service_account_email", service_account_email)
        if subnetwork is not None:
            _setter("subnetwork", subnetwork)
        if temp_location is not None:
            _setter("temp_location", temp_location)
        if worker_region is not None:
            _setter("worker_region", worker_region)
        if worker_zone is not None:
            _setter("worker_zone", worker_zone)
        if zone is not None:
            _setter("zone", zone)

    @property
    @pulumi.getter(name="additionalExperiments")
    def additional_experiments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Additional experiment flags for the job.
        """
        return pulumi.get(self, "additional_experiments")

    @additional_experiments.setter
    def additional_experiments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "additional_experiments", value)

    @property
    @pulumi.getter(name="additionalUserLabels")
    def additional_user_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Additional user labels to be specified for the job. Keys and values should follow the restrictions specified in the labeling restrictions page. An object containing a list of key/value pairs.
        'Example: { "name": "wrench", "mass": "1kg", "count": "3" }.'
        'An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.'
        """
        return pulumi.get(self, "additional_user_labels")

    @additional_user_labels.setter
    def additional_user_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "additional_user_labels", value)

    @property
    @pulumi.getter(name="bypassTempDirValidation")
    def bypass_temp_dir_validation(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to bypass the safety checks for the job's temporary directory. Use with caution.
        """
        return pulumi.get(self, "bypass_temp_dir_validation")

    @bypass_temp_dir_validation.setter
    def bypass_temp_dir_validation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "bypass_temp_dir_validation", value)

    @property
    @pulumi.getter(name="enableStreamingEngine")
    def enable_streaming_engine(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable Streaming Engine for the job.
        """
        return pulumi.get(self, "enable_streaming_engine")

    @enable_streaming_engine.setter
    def enable_streaming_engine(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_streaming_engine", value)

    @property
    @pulumi.getter(name="ipConfiguration")
    def ip_configuration(self) -> Optional[pulumi.Input[str]]:
        """
        Configuration for VM IPs.
        https://cloud.google.com/dataflow/docs/reference/data-pipelines/rest/v1/projects.locations.pipelines#WorkerIPAddressConfiguration
        Possible values are: `WORKER_IP_UNSPECIFIED`, `WORKER_IP_PUBLIC`, `WORKER_IP_PRIVATE`.
        """
        return pulumi.get(self, "ip_configuration")

    @ip_configuration.setter
    def ip_configuration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_configuration", value)

    @property
    @pulumi.getter(name="kmsKeyName")
    def kms_key_name(self) -> Optional[pulumi.Input[str]]:
        """
        'Name for the Cloud KMS key for the job. The key format is: projects//locations//keyRings//cryptoKeys/'
        """
        return pulumi.get(self, "kms_key_name")

    @kms_key_name.setter
    def kms_key_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_name", value)

    @property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> Optional[pulumi.Input[str]]:
        """
        The machine type to use for the job. Defaults to the value from the template if not specified.
        """
        return pulumi.get(self, "machine_type")

    @machine_type.setter
    def machine_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "machine_type", value)

    @property
    @pulumi.getter(name="maxWorkers")
    def max_workers(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of Compute Engine instances to be made available to your pipeline during execution, from 1 to 1000.
        """
        return pulumi.get(self, "max_workers")

    @max_workers.setter
    def max_workers(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_workers", value)

    @property
    @pulumi.getter
    def network(self) -> Optional[pulumi.Input[str]]:
        """
        Network to which VMs will be assigned. If empty or unspecified, the service will use the network "default".
        """
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter(name="numWorkers")
    def num_workers(self) -> Optional[pulumi.Input[int]]:
        """
        The initial number of Compute Engine instances for the job.
        """
        return pulumi.get(self, "num_workers")

    @num_workers.setter
    def num_workers(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "num_workers", value)

    @property
    @pulumi.getter(name="serviceAccountEmail")
    def service_account_email(self) -> Optional[pulumi.Input[str]]:
        """
        The email address of the service account to run the job as.
        """
        return pulumi.get(self, "service_account_email")

    @service_account_email.setter
    def service_account_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_email", value)

    @property
    @pulumi.getter
    def subnetwork(self) -> Optional[pulumi.Input[str]]:
        """
        Subnetwork to which VMs will be assigned, if desired. You can specify a subnetwork using either a complete URL or an abbreviated path. Expected to be of the form "https://www.googleapis.com/compute/v1/projects/HOST_PROJECT_ID/regions/REGION/subnetworks/SUBNETWORK" or "regions/REGION/subnetworks/SUBNETWORK". If the subnetwork is located in a Shared VPC network, you must use the complete URL.
        """
        return pulumi.get(self, "subnetwork")

    @subnetwork.setter
    def subnetwork(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnetwork", value)

    @property
    @pulumi.getter(name="tempLocation")
    def temp_location(self) -> Optional[pulumi.Input[str]]:
        """
        The Cloud Storage path to use for temporary files. Must be a valid Cloud Storage URL, beginning with gs://.
        """
        return pulumi.get(self, "temp_location")

    @temp_location.setter
    def temp_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "temp_location", value)

    @property
    @pulumi.getter(name="workerRegion")
    def worker_region(self) -> Optional[pulumi.Input[str]]:
        """
        The Compute Engine region (https://cloud.google.com/compute/docs/regions-zones/regions-zones) in which worker processing should occur, e.g. "us-west1". Mutually exclusive with workerZone. If neither workerRegion nor workerZone is specified, default to the control plane's region.
        """
        return pulumi.get(self, "worker_region")

    @worker_region.setter
    def worker_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "worker_region", value)

    @property
    @pulumi.getter(name="workerZone")
    def worker_zone(self) -> Optional[pulumi.Input[str]]:
        """
        The Compute Engine zone (https://cloud.google.com/compute/docs/regions-zones/regions-zones) in which worker processing should occur, e.g. "us-west1-a". Mutually exclusive with workerRegion. If neither workerRegion nor workerZone is specified, a zone in the control plane's region is chosen based on available capacity. If both workerZone and zone are set, workerZone takes precedence.
        """
        return pulumi.get(self, "worker_zone")

    @worker_zone.setter
    def worker_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "worker_zone", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[str]]:
        """
        The Compute Engine availability zone for launching worker instances to run your pipeline. In the future, workerZone will take precedence.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone", value)


