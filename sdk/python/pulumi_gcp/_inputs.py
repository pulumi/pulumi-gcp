# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'ProviderBatchingArgs',
    'ProviderBatchingArgsDict',
    'ProviderExternalCredentialsArgs',
    'ProviderExternalCredentialsArgsDict',
]

MYPY = False

if not MYPY:
    class ProviderBatchingArgsDict(TypedDict):
        enable_batching: NotRequired[pulumi.Input[bool]]
        send_after: NotRequired[pulumi.Input[str]]
elif False:
    ProviderBatchingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ProviderBatchingArgs:
    def __init__(__self__, *,
                 enable_batching: Optional[pulumi.Input[bool]] = None,
                 send_after: Optional[pulumi.Input[str]] = None):
        if enable_batching is not None:
            pulumi.set(__self__, "enable_batching", enable_batching)
        if send_after is not None:
            pulumi.set(__self__, "send_after", send_after)

    @property
    @pulumi.getter(name="enableBatching")
    def enable_batching(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_batching")

    @enable_batching.setter
    def enable_batching(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_batching", value)

    @property
    @pulumi.getter(name="sendAfter")
    def send_after(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "send_after")

    @send_after.setter
    def send_after(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "send_after", value)


if not MYPY:
    class ProviderExternalCredentialsArgsDict(TypedDict):
        audience: pulumi.Input[str]
        identity_token: pulumi.Input[str]
        service_account_email: pulumi.Input[str]
elif False:
    ProviderExternalCredentialsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ProviderExternalCredentialsArgs:
    def __init__(__self__, *,
                 audience: pulumi.Input[str],
                 identity_token: pulumi.Input[str],
                 service_account_email: pulumi.Input[str]):
        pulumi.set(__self__, "audience", audience)
        pulumi.set(__self__, "identity_token", identity_token)
        pulumi.set(__self__, "service_account_email", service_account_email)

    @property
    @pulumi.getter
    def audience(self) -> pulumi.Input[str]:
        return pulumi.get(self, "audience")

    @audience.setter
    def audience(self, value: pulumi.Input[str]):
        pulumi.set(self, "audience", value)

    @property
    @pulumi.getter(name="identityToken")
    def identity_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "identity_token")

    @identity_token.setter
    def identity_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "identity_token", value)

    @property
    @pulumi.getter(name="serviceAccountEmail")
    def service_account_email(self) -> pulumi.Input[str]:
        return pulumi.get(self, "service_account_email")

    @service_account_email.setter
    def service_account_email(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_account_email", value)


