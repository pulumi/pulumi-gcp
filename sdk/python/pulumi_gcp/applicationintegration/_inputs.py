# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'ClientCloudKmsConfigArgs',
]

@pulumi.input_type
class ClientCloudKmsConfigArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 kms_location: pulumi.Input[str],
                 kms_ring: pulumi.Input[str],
                 key_version: Optional[pulumi.Input[str]] = None,
                 kms_project_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] key: A Cloud KMS key is a named object containing one or more key versions, along
               with metadata for the key. A key exists on exactly one key ring tied to a
               specific location.
        :param pulumi.Input[str] kms_location: Location name of the key ring, e.g. "us-west1".
        :param pulumi.Input[str] kms_ring: A key ring organizes keys in a specific Google Cloud location and allows you to
               manage access control on groups of keys. A key ring's name does not need to be
               unique across a Google Cloud project, but must be unique within a given location.
        :param pulumi.Input[str] key_version: Each version of a key contains key material used for encryption or signing.
               A key's version is represented by an integer, starting at 1. To decrypt data
               or verify a signature, you must use the same key version that was used to
               encrypt or sign the data.
        :param pulumi.Input[str] kms_project_id: The Google Cloud project id of the project where the kms key stored. If empty,
               the kms key is stored at the same project as customer's project and ecrypted
               with CMEK, otherwise, the kms key is stored in the tenant project and
               encrypted with GMEK.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "kms_location", kms_location)
        pulumi.set(__self__, "kms_ring", kms_ring)
        if key_version is not None:
            pulumi.set(__self__, "key_version", key_version)
        if kms_project_id is not None:
            pulumi.set(__self__, "kms_project_id", kms_project_id)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        A Cloud KMS key is a named object containing one or more key versions, along
        with metadata for the key. A key exists on exactly one key ring tied to a
        specific location.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="kmsLocation")
    def kms_location(self) -> pulumi.Input[str]:
        """
        Location name of the key ring, e.g. "us-west1".
        """
        return pulumi.get(self, "kms_location")

    @kms_location.setter
    def kms_location(self, value: pulumi.Input[str]):
        pulumi.set(self, "kms_location", value)

    @property
    @pulumi.getter(name="kmsRing")
    def kms_ring(self) -> pulumi.Input[str]:
        """
        A key ring organizes keys in a specific Google Cloud location and allows you to
        manage access control on groups of keys. A key ring's name does not need to be
        unique across a Google Cloud project, but must be unique within a given location.
        """
        return pulumi.get(self, "kms_ring")

    @kms_ring.setter
    def kms_ring(self, value: pulumi.Input[str]):
        pulumi.set(self, "kms_ring", value)

    @property
    @pulumi.getter(name="keyVersion")
    def key_version(self) -> Optional[pulumi.Input[str]]:
        """
        Each version of a key contains key material used for encryption or signing.
        A key's version is represented by an integer, starting at 1. To decrypt data
        or verify a signature, you must use the same key version that was used to
        encrypt or sign the data.
        """
        return pulumi.get(self, "key_version")

    @key_version.setter
    def key_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_version", value)

    @property
    @pulumi.getter(name="kmsProjectId")
    def kms_project_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Google Cloud project id of the project where the kms key stored. If empty,
        the kms key is stored at the same project as customer's project and ecrypted
        with CMEK, otherwise, the kms key is stored in the tenant project and
        encrypted with GMEK.
        """
        return pulumi.get(self, "kms_project_id")

    @kms_project_id.setter
    def kms_project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_project_id", value)


