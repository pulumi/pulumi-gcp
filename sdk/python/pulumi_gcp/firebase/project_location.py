# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['ProjectLocationArgs', 'ProjectLocation']

@pulumi.input_type
class ProjectLocationArgs:
    def __init__(__self__, *,
                 location_id: pulumi.Input[str],
                 project: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ProjectLocation resource.
        :param pulumi.Input[str] location_id: The ID of the default GCP resource location for the Project. The location must be one of the available GCP
               resource locations.
               
               
               - - -
        :param pulumi.Input[str] project: The ID of the project in which the resource belongs.
               If it is not provided, the provider project is used.
        """
        pulumi.set(__self__, "location_id", location_id)
        if project is not None:
            pulumi.set(__self__, "project", project)

    @property
    @pulumi.getter(name="locationId")
    def location_id(self) -> pulumi.Input[str]:
        """
        The ID of the default GCP resource location for the Project. The location must be one of the available GCP
        resource locations.


        - - -
        """
        return pulumi.get(self, "location_id")

    @location_id.setter
    def location_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "location_id", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the project in which the resource belongs.
        If it is not provided, the provider project is used.
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)


@pulumi.input_type
class _ProjectLocationState:
    def __init__(__self__, *,
                 location_id: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ProjectLocation resources.
        :param pulumi.Input[str] location_id: The ID of the default GCP resource location for the Project. The location must be one of the available GCP
               resource locations.
               
               
               - - -
        :param pulumi.Input[str] project: The ID of the project in which the resource belongs.
               If it is not provided, the provider project is used.
        """
        if location_id is not None:
            pulumi.set(__self__, "location_id", location_id)
        if project is not None:
            pulumi.set(__self__, "project", project)

    @property
    @pulumi.getter(name="locationId")
    def location_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the default GCP resource location for the Project. The location must be one of the available GCP
        resource locations.


        - - -
        """
        return pulumi.get(self, "location_id")

    @location_id.setter
    def location_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location_id", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the project in which the resource belongs.
        If it is not provided, the provider project is used.
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)


class ProjectLocation(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 location_id: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        > **Warning:** `firebase.ProjectLocation` is deprecated in favor of explicitly configuring `appengine.Application` and `firestore.Database`. This resource will be removed in the next major release of the provider.

        Sets the default Google Cloud Platform (GCP) resource location for the specified FirebaseProject.
        This method creates an App Engine application with a default Cloud Storage bucket, located in the specified
        locationId. This location must be one of the available GCP resource locations.
        After the default GCP resource location is finalized, or if it was already set, it cannot be changed.
        The default GCP resource location for the specified FirebaseProject might already be set because either the
        GCP Project already has an App Engine application or defaultLocation.finalize was previously called with a
        specified locationId. Any new calls to defaultLocation.finalize with a different specified locationId will
        return a 409 error.

        To get more information about ProjectLocation, see:

        * [API documentation](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects.defaultLocation/finalize)
        * How-to Guides
            * [Official Documentation](https://firebase.google.com/)

        ## Example Usage
        ### Firebase Project Location Basic

        ```python
        import pulumi
        import pulumi_gcp as gcp

        default_project = gcp.organizations.Project("defaultProject",
            project_id="my-project",
            org_id="123456789",
            labels={
                "firebase": "enabled",
            },
            opts=pulumi.ResourceOptions(provider=google_beta))
        default_firebase_project_project = gcp.firebase.Project("defaultFirebase/projectProject", project=default_project.project_id,
        opts=pulumi.ResourceOptions(provider=google_beta))
        basic = gcp.firebase.ProjectLocation("basic",
            project=default_firebase / project_project["project"],
            location_id="us-central",
            opts=pulumi.ResourceOptions(provider=google_beta))
        ```

        ## Import

        ProjectLocation can be imported using any of these accepted formats

        ```sh
         $ pulumi import gcp:firebase/projectLocation:ProjectLocation default projects/{{project}}
        ```

        ```sh
         $ pulumi import gcp:firebase/projectLocation:ProjectLocation default {{project}}
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] location_id: The ID of the default GCP resource location for the Project. The location must be one of the available GCP
               resource locations.
               
               
               - - -
        :param pulumi.Input[str] project: The ID of the project in which the resource belongs.
               If it is not provided, the provider project is used.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ProjectLocationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        > **Warning:** `firebase.ProjectLocation` is deprecated in favor of explicitly configuring `appengine.Application` and `firestore.Database`. This resource will be removed in the next major release of the provider.

        Sets the default Google Cloud Platform (GCP) resource location for the specified FirebaseProject.
        This method creates an App Engine application with a default Cloud Storage bucket, located in the specified
        locationId. This location must be one of the available GCP resource locations.
        After the default GCP resource location is finalized, or if it was already set, it cannot be changed.
        The default GCP resource location for the specified FirebaseProject might already be set because either the
        GCP Project already has an App Engine application or defaultLocation.finalize was previously called with a
        specified locationId. Any new calls to defaultLocation.finalize with a different specified locationId will
        return a 409 error.

        To get more information about ProjectLocation, see:

        * [API documentation](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects.defaultLocation/finalize)
        * How-to Guides
            * [Official Documentation](https://firebase.google.com/)

        ## Example Usage
        ### Firebase Project Location Basic

        ```python
        import pulumi
        import pulumi_gcp as gcp

        default_project = gcp.organizations.Project("defaultProject",
            project_id="my-project",
            org_id="123456789",
            labels={
                "firebase": "enabled",
            },
            opts=pulumi.ResourceOptions(provider=google_beta))
        default_firebase_project_project = gcp.firebase.Project("defaultFirebase/projectProject", project=default_project.project_id,
        opts=pulumi.ResourceOptions(provider=google_beta))
        basic = gcp.firebase.ProjectLocation("basic",
            project=default_firebase / project_project["project"],
            location_id="us-central",
            opts=pulumi.ResourceOptions(provider=google_beta))
        ```

        ## Import

        ProjectLocation can be imported using any of these accepted formats

        ```sh
         $ pulumi import gcp:firebase/projectLocation:ProjectLocation default projects/{{project}}
        ```

        ```sh
         $ pulumi import gcp:firebase/projectLocation:ProjectLocation default {{project}}
        ```

        :param str resource_name: The name of the resource.
        :param ProjectLocationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProjectLocationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 location_id: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProjectLocationArgs.__new__(ProjectLocationArgs)

            if location_id is None and not opts.urn:
                raise TypeError("Missing required property 'location_id'")
            __props__.__dict__["location_id"] = location_id
            __props__.__dict__["project"] = project
        super(ProjectLocation, __self__).__init__(
            'gcp:firebase/projectLocation:ProjectLocation',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            location_id: Optional[pulumi.Input[str]] = None,
            project: Optional[pulumi.Input[str]] = None) -> 'ProjectLocation':
        """
        Get an existing ProjectLocation resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] location_id: The ID of the default GCP resource location for the Project. The location must be one of the available GCP
               resource locations.
               
               
               - - -
        :param pulumi.Input[str] project: The ID of the project in which the resource belongs.
               If it is not provided, the provider project is used.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ProjectLocationState.__new__(_ProjectLocationState)

        __props__.__dict__["location_id"] = location_id
        __props__.__dict__["project"] = project
        return ProjectLocation(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="locationId")
    def location_id(self) -> pulumi.Output[str]:
        """
        The ID of the default GCP resource location for the Project. The location must be one of the available GCP
        resource locations.


        - - -
        """
        return pulumi.get(self, "location_id")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[str]:
        """
        The ID of the project in which the resource belongs.
        If it is not provided, the provider project is used.
        """
        return pulumi.get(self, "project")

