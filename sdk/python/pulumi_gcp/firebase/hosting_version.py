# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['HostingVersionArgs', 'HostingVersion']

@pulumi.input_type
class HostingVersionArgs:
    def __init__(__self__, *,
                 site_id: pulumi.Input[str],
                 config: Optional[pulumi.Input['HostingVersionConfigArgs']] = None):
        """
        The set of arguments for constructing a HostingVersion resource.
        :param pulumi.Input[str] site_id: Required. The ID of the site in which to create this Version.
               
               
               - - -
        :param pulumi.Input['HostingVersionConfigArgs'] config: The configuration for the behavior of the site. This configuration exists in the `firebase.json` file.
               Structure is documented below.
        """
        HostingVersionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            site_id=site_id,
            config=config,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             site_id: Optional[pulumi.Input[str]] = None,
             config: Optional[pulumi.Input['HostingVersionConfigArgs']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if site_id is None and 'siteId' in kwargs:
            site_id = kwargs['siteId']
        if site_id is None:
            raise TypeError("Missing 'site_id' argument")

        _setter("site_id", site_id)
        if config is not None:
            _setter("config", config)

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> pulumi.Input[str]:
        """
        Required. The ID of the site in which to create this Version.


        - - -
        """
        return pulumi.get(self, "site_id")

    @site_id.setter
    def site_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "site_id", value)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input['HostingVersionConfigArgs']]:
        """
        The configuration for the behavior of the site. This configuration exists in the `firebase.json` file.
        Structure is documented below.
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input['HostingVersionConfigArgs']]):
        pulumi.set(self, "config", value)


@pulumi.input_type
class _HostingVersionState:
    def __init__(__self__, *,
                 config: Optional[pulumi.Input['HostingVersionConfigArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 site_id: Optional[pulumi.Input[str]] = None,
                 version_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering HostingVersion resources.
        :param pulumi.Input['HostingVersionConfigArgs'] config: The configuration for the behavior of the site. This configuration exists in the `firebase.json` file.
               Structure is documented below.
        :param pulumi.Input[str] name: The fully-qualified resource name for the version, in the format:
               sites/SITE_ID/versions/VERSION_ID
        :param pulumi.Input[str] site_id: Required. The ID of the site in which to create this Version.
               
               
               - - -
        :param pulumi.Input[str] version_id: The ID for the version as in sites/SITE_ID/versions/VERSION_ID
        """
        _HostingVersionState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            config=config,
            name=name,
            site_id=site_id,
            version_id=version_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             config: Optional[pulumi.Input['HostingVersionConfigArgs']] = None,
             name: Optional[pulumi.Input[str]] = None,
             site_id: Optional[pulumi.Input[str]] = None,
             version_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if site_id is None and 'siteId' in kwargs:
            site_id = kwargs['siteId']
        if version_id is None and 'versionId' in kwargs:
            version_id = kwargs['versionId']

        if config is not None:
            _setter("config", config)
        if name is not None:
            _setter("name", name)
        if site_id is not None:
            _setter("site_id", site_id)
        if version_id is not None:
            _setter("version_id", version_id)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input['HostingVersionConfigArgs']]:
        """
        The configuration for the behavior of the site. This configuration exists in the `firebase.json` file.
        Structure is documented below.
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input['HostingVersionConfigArgs']]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The fully-qualified resource name for the version, in the format:
        sites/SITE_ID/versions/VERSION_ID
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> Optional[pulumi.Input[str]]:
        """
        Required. The ID of the site in which to create this Version.


        - - -
        """
        return pulumi.get(self, "site_id")

    @site_id.setter
    def site_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "site_id", value)

    @property
    @pulumi.getter(name="versionId")
    def version_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID for the version as in sites/SITE_ID/versions/VERSION_ID
        """
        return pulumi.get(self, "version_id")

    @version_id.setter
    def version_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version_id", value)


class HostingVersion(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 config: Optional[pulumi.Input[pulumi.InputType['HostingVersionConfigArgs']]] = None,
                 site_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## Example Usage

        ## Import

        Version can be imported using any of these accepted formats

        ```sh
         $ pulumi import gcp:firebase/hostingVersion:HostingVersion default sites/{{site_id}}/versions/{{version_id}}
        ```

        ```sh
         $ pulumi import gcp:firebase/hostingVersion:HostingVersion default {{site_id}}/{{version_id}}
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['HostingVersionConfigArgs']] config: The configuration for the behavior of the site. This configuration exists in the `firebase.json` file.
               Structure is documented below.
        :param pulumi.Input[str] site_id: Required. The ID of the site in which to create this Version.
               
               
               - - -
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: HostingVersionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ## Import

        Version can be imported using any of these accepted formats

        ```sh
         $ pulumi import gcp:firebase/hostingVersion:HostingVersion default sites/{{site_id}}/versions/{{version_id}}
        ```

        ```sh
         $ pulumi import gcp:firebase/hostingVersion:HostingVersion default {{site_id}}/{{version_id}}
        ```

        :param str resource_name: The name of the resource.
        :param HostingVersionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(HostingVersionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            HostingVersionArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 config: Optional[pulumi.Input[pulumi.InputType['HostingVersionConfigArgs']]] = None,
                 site_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = HostingVersionArgs.__new__(HostingVersionArgs)

            config = _utilities.configure(config, HostingVersionConfigArgs, True)
            __props__.__dict__["config"] = config
            if site_id is None and not opts.urn:
                raise TypeError("Missing required property 'site_id'")
            __props__.__dict__["site_id"] = site_id
            __props__.__dict__["name"] = None
            __props__.__dict__["version_id"] = None
        super(HostingVersion, __self__).__init__(
            'gcp:firebase/hostingVersion:HostingVersion',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            config: Optional[pulumi.Input[pulumi.InputType['HostingVersionConfigArgs']]] = None,
            name: Optional[pulumi.Input[str]] = None,
            site_id: Optional[pulumi.Input[str]] = None,
            version_id: Optional[pulumi.Input[str]] = None) -> 'HostingVersion':
        """
        Get an existing HostingVersion resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['HostingVersionConfigArgs']] config: The configuration for the behavior of the site. This configuration exists in the `firebase.json` file.
               Structure is documented below.
        :param pulumi.Input[str] name: The fully-qualified resource name for the version, in the format:
               sites/SITE_ID/versions/VERSION_ID
        :param pulumi.Input[str] site_id: Required. The ID of the site in which to create this Version.
               
               
               - - -
        :param pulumi.Input[str] version_id: The ID for the version as in sites/SITE_ID/versions/VERSION_ID
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _HostingVersionState.__new__(_HostingVersionState)

        __props__.__dict__["config"] = config
        __props__.__dict__["name"] = name
        __props__.__dict__["site_id"] = site_id
        __props__.__dict__["version_id"] = version_id
        return HostingVersion(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def config(self) -> pulumi.Output[Optional['outputs.HostingVersionConfig']]:
        """
        The configuration for the behavior of the site. This configuration exists in the `firebase.json` file.
        Structure is documented below.
        """
        return pulumi.get(self, "config")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The fully-qualified resource name for the version, in the format:
        sites/SITE_ID/versions/VERSION_ID
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> pulumi.Output[str]:
        """
        Required. The ID of the site in which to create this Version.


        - - -
        """
        return pulumi.get(self, "site_id")

    @property
    @pulumi.getter(name="versionId")
    def version_id(self) -> pulumi.Output[str]:
        """
        The ID for the version as in sites/SITE_ID/versions/VERSION_ID
        """
        return pulumi.get(self, "version_id")

