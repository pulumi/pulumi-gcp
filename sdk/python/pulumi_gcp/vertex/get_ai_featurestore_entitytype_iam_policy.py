# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetAiFeaturestoreEntitytypeIamPolicyResult',
    'AwaitableGetAiFeaturestoreEntitytypeIamPolicyResult',
    'get_ai_featurestore_entitytype_iam_policy',
    'get_ai_featurestore_entitytype_iam_policy_output',
]

@pulumi.output_type
class GetAiFeaturestoreEntitytypeIamPolicyResult:
    """
    A collection of values returned by getAiFeaturestoreEntitytypeIamPolicy.
    """
    def __init__(__self__, entitytype=None, etag=None, featurestore=None, id=None, policy_data=None):
        if entitytype and not isinstance(entitytype, str):
            raise TypeError("Expected argument 'entitytype' to be a str")
        pulumi.set(__self__, "entitytype", entitytype)
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        pulumi.set(__self__, "etag", etag)
        if featurestore and not isinstance(featurestore, str):
            raise TypeError("Expected argument 'featurestore' to be a str")
        pulumi.set(__self__, "featurestore", featurestore)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if policy_data and not isinstance(policy_data, str):
            raise TypeError("Expected argument 'policy_data' to be a str")
        pulumi.set(__self__, "policy_data", policy_data)

    @property
    @pulumi.getter
    def entitytype(self) -> str:
        return pulumi.get(self, "entitytype")

    @property
    @pulumi.getter
    def etag(self) -> str:
        """
        (Computed) The etag of the IAM policy.
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter
    def featurestore(self) -> str:
        return pulumi.get(self, "featurestore")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="policyData")
    def policy_data(self) -> str:
        """
        (Required only by `vertex.AiFeatureStoreEntityTypeIamPolicy`) The policy data generated by
        a `organizations_get_iam_policy` data source.
        """
        return pulumi.get(self, "policy_data")


class AwaitableGetAiFeaturestoreEntitytypeIamPolicyResult(GetAiFeaturestoreEntitytypeIamPolicyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAiFeaturestoreEntitytypeIamPolicyResult(
            entitytype=self.entitytype,
            etag=self.etag,
            featurestore=self.featurestore,
            id=self.id,
            policy_data=self.policy_data)


def get_ai_featurestore_entitytype_iam_policy(entitytype: Optional[str] = None,
                                              featurestore: Optional[str] = None,
                                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAiFeaturestoreEntitytypeIamPolicyResult:
    """
    Use this data source to access information about an existing resource.

    :param str entitytype: Used to find the parent resource to bind the IAM policy to
    :param str featurestore: The name of the Featurestore to use, in the format projects/{project}/locations/{location}/featurestores/{featurestore}. Used to find the parent resource to bind the IAM policy to
    """
    __args__ = dict()
    __args__['entitytype'] = entitytype
    __args__['featurestore'] = featurestore
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('gcp:vertex/getAiFeaturestoreEntitytypeIamPolicy:getAiFeaturestoreEntitytypeIamPolicy', __args__, opts=opts, typ=GetAiFeaturestoreEntitytypeIamPolicyResult).value

    return AwaitableGetAiFeaturestoreEntitytypeIamPolicyResult(
        entitytype=pulumi.get(__ret__, 'entitytype'),
        etag=pulumi.get(__ret__, 'etag'),
        featurestore=pulumi.get(__ret__, 'featurestore'),
        id=pulumi.get(__ret__, 'id'),
        policy_data=pulumi.get(__ret__, 'policy_data'))


@_utilities.lift_output_func(get_ai_featurestore_entitytype_iam_policy)
def get_ai_featurestore_entitytype_iam_policy_output(entitytype: Optional[pulumi.Input[str]] = None,
                                                     featurestore: Optional[pulumi.Input[str]] = None,
                                                     opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAiFeaturestoreEntitytypeIamPolicyResult]:
    """
    Use this data source to access information about an existing resource.

    :param str entitytype: Used to find the parent resource to bind the IAM policy to
    :param str featurestore: The name of the Featurestore to use, in the format projects/{project}/locations/{location}/featurestores/{featurestore}. Used to find the parent resource to bind the IAM policy to
    """
    ...
