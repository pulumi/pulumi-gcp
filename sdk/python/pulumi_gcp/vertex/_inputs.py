# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'AiDatasetEncryptionSpecArgs',
    'AiDatasetEncryptionSpecArgsDict',
    'AiDeploymentResourcePoolDedicatedResourcesArgs',
    'AiDeploymentResourcePoolDedicatedResourcesArgsDict',
    'AiDeploymentResourcePoolDedicatedResourcesAutoscalingMetricSpecArgs',
    'AiDeploymentResourcePoolDedicatedResourcesAutoscalingMetricSpecArgsDict',
    'AiDeploymentResourcePoolDedicatedResourcesMachineSpecArgs',
    'AiDeploymentResourcePoolDedicatedResourcesMachineSpecArgsDict',
    'AiEndpointDeployedModelArgs',
    'AiEndpointDeployedModelArgsDict',
    'AiEndpointDeployedModelAutomaticResourceArgs',
    'AiEndpointDeployedModelAutomaticResourceArgsDict',
    'AiEndpointDeployedModelDedicatedResourceArgs',
    'AiEndpointDeployedModelDedicatedResourceArgsDict',
    'AiEndpointDeployedModelDedicatedResourceAutoscalingMetricSpecArgs',
    'AiEndpointDeployedModelDedicatedResourceAutoscalingMetricSpecArgsDict',
    'AiEndpointDeployedModelDedicatedResourceMachineSpecArgs',
    'AiEndpointDeployedModelDedicatedResourceMachineSpecArgsDict',
    'AiEndpointDeployedModelPrivateEndpointArgs',
    'AiEndpointDeployedModelPrivateEndpointArgsDict',
    'AiEndpointEncryptionSpecArgs',
    'AiEndpointEncryptionSpecArgsDict',
    'AiEndpointIamBindingConditionArgs',
    'AiEndpointIamBindingConditionArgsDict',
    'AiEndpointIamMemberConditionArgs',
    'AiEndpointIamMemberConditionArgsDict',
    'AiEndpointPredictRequestResponseLoggingConfigArgs',
    'AiEndpointPredictRequestResponseLoggingConfigArgsDict',
    'AiEndpointPredictRequestResponseLoggingConfigBigqueryDestinationArgs',
    'AiEndpointPredictRequestResponseLoggingConfigBigqueryDestinationArgsDict',
    'AiEndpointPrivateServiceConnectConfigArgs',
    'AiEndpointPrivateServiceConnectConfigArgsDict',
    'AiEndpointWithModelGardenDeploymentDeployConfigArgs',
    'AiEndpointWithModelGardenDeploymentDeployConfigArgsDict',
    'AiEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesArgs',
    'AiEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesArgsDict',
    'AiEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesAutoscalingMetricSpecArgs',
    'AiEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesAutoscalingMetricSpecArgsDict',
    'AiEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesMachineSpecArgs',
    'AiEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesMachineSpecArgsDict',
    'AiEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesMachineSpecReservationAffinityArgs',
    'AiEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesMachineSpecReservationAffinityArgsDict',
    'AiEndpointWithModelGardenDeploymentEndpointConfigArgs',
    'AiEndpointWithModelGardenDeploymentEndpointConfigArgsDict',
    'AiEndpointWithModelGardenDeploymentModelConfigArgs',
    'AiEndpointWithModelGardenDeploymentModelConfigArgsDict',
    'AiEndpointWithModelGardenDeploymentModelConfigContainerSpecArgs',
    'AiEndpointWithModelGardenDeploymentModelConfigContainerSpecArgsDict',
    'AiEndpointWithModelGardenDeploymentModelConfigContainerSpecEnvArgs',
    'AiEndpointWithModelGardenDeploymentModelConfigContainerSpecEnvArgsDict',
    'AiEndpointWithModelGardenDeploymentModelConfigContainerSpecGrpcPortArgs',
    'AiEndpointWithModelGardenDeploymentModelConfigContainerSpecGrpcPortArgsDict',
    'AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeArgs',
    'AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeArgsDict',
    'AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeExecArgs',
    'AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeExecArgsDict',
    'AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeGrpcArgs',
    'AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeGrpcArgsDict',
    'AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeHttpGetArgs',
    'AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeHttpGetArgsDict',
    'AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeHttpGetHttpHeaderArgs',
    'AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeHttpGetHttpHeaderArgsDict',
    'AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeTcpSocketArgs',
    'AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeTcpSocketArgsDict',
    'AiEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeArgs',
    'AiEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeArgsDict',
    'AiEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeExecArgs',
    'AiEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeExecArgsDict',
    'AiEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeGrpcArgs',
    'AiEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeGrpcArgsDict',
    'AiEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeHttpGetArgs',
    'AiEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeHttpGetArgsDict',
    'AiEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeHttpGetHttpHeaderArgs',
    'AiEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeHttpGetHttpHeaderArgsDict',
    'AiEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeTcpSocketArgs',
    'AiEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeTcpSocketArgsDict',
    'AiEndpointWithModelGardenDeploymentModelConfigContainerSpecPortArgs',
    'AiEndpointWithModelGardenDeploymentModelConfigContainerSpecPortArgsDict',
    'AiEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeArgs',
    'AiEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeArgsDict',
    'AiEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeExecArgs',
    'AiEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeExecArgsDict',
    'AiEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeGrpcArgs',
    'AiEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeGrpcArgsDict',
    'AiEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeHttpGetArgs',
    'AiEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeHttpGetArgsDict',
    'AiEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeHttpGetHttpHeaderArgs',
    'AiEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeHttpGetHttpHeaderArgsDict',
    'AiEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeTcpSocketArgs',
    'AiEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeTcpSocketArgsDict',
    'AiFeatureGroupBigQueryArgs',
    'AiFeatureGroupBigQueryArgsDict',
    'AiFeatureGroupBigQueryBigQuerySourceArgs',
    'AiFeatureGroupBigQueryBigQuerySourceArgsDict',
    'AiFeatureGroupIamBindingConditionArgs',
    'AiFeatureGroupIamBindingConditionArgsDict',
    'AiFeatureGroupIamMemberConditionArgs',
    'AiFeatureGroupIamMemberConditionArgsDict',
    'AiFeatureOnlineStoreBigtableArgs',
    'AiFeatureOnlineStoreBigtableArgsDict',
    'AiFeatureOnlineStoreBigtableAutoScalingArgs',
    'AiFeatureOnlineStoreBigtableAutoScalingArgsDict',
    'AiFeatureOnlineStoreDedicatedServingEndpointArgs',
    'AiFeatureOnlineStoreDedicatedServingEndpointArgsDict',
    'AiFeatureOnlineStoreDedicatedServingEndpointPrivateServiceConnectConfigArgs',
    'AiFeatureOnlineStoreDedicatedServingEndpointPrivateServiceConnectConfigArgsDict',
    'AiFeatureOnlineStoreEmbeddingManagementArgs',
    'AiFeatureOnlineStoreEmbeddingManagementArgsDict',
    'AiFeatureOnlineStoreFeatureviewBigQuerySourceArgs',
    'AiFeatureOnlineStoreFeatureviewBigQuerySourceArgsDict',
    'AiFeatureOnlineStoreFeatureviewFeatureRegistrySourceArgs',
    'AiFeatureOnlineStoreFeatureviewFeatureRegistrySourceArgsDict',
    'AiFeatureOnlineStoreFeatureviewFeatureRegistrySourceFeatureGroupArgs',
    'AiFeatureOnlineStoreFeatureviewFeatureRegistrySourceFeatureGroupArgsDict',
    'AiFeatureOnlineStoreFeatureviewIamBindingConditionArgs',
    'AiFeatureOnlineStoreFeatureviewIamBindingConditionArgsDict',
    'AiFeatureOnlineStoreFeatureviewIamMemberConditionArgs',
    'AiFeatureOnlineStoreFeatureviewIamMemberConditionArgsDict',
    'AiFeatureOnlineStoreFeatureviewSyncConfigArgs',
    'AiFeatureOnlineStoreFeatureviewSyncConfigArgsDict',
    'AiFeatureOnlineStoreFeatureviewVectorSearchConfigArgs',
    'AiFeatureOnlineStoreFeatureviewVectorSearchConfigArgsDict',
    'AiFeatureOnlineStoreFeatureviewVectorSearchConfigBruteForceConfigArgs',
    'AiFeatureOnlineStoreFeatureviewVectorSearchConfigBruteForceConfigArgsDict',
    'AiFeatureOnlineStoreFeatureviewVectorSearchConfigTreeAhConfigArgs',
    'AiFeatureOnlineStoreFeatureviewVectorSearchConfigTreeAhConfigArgsDict',
    'AiFeatureOnlineStoreIamBindingConditionArgs',
    'AiFeatureOnlineStoreIamBindingConditionArgsDict',
    'AiFeatureOnlineStoreIamMemberConditionArgs',
    'AiFeatureOnlineStoreIamMemberConditionArgsDict',
    'AiFeatureOnlineStoreOptimizedArgs',
    'AiFeatureOnlineStoreOptimizedArgsDict',
    'AiFeatureStoreEncryptionSpecArgs',
    'AiFeatureStoreEncryptionSpecArgsDict',
    'AiFeatureStoreEntityTypeIamBindingConditionArgs',
    'AiFeatureStoreEntityTypeIamBindingConditionArgsDict',
    'AiFeatureStoreEntityTypeIamMemberConditionArgs',
    'AiFeatureStoreEntityTypeIamMemberConditionArgsDict',
    'AiFeatureStoreEntityTypeMonitoringConfigArgs',
    'AiFeatureStoreEntityTypeMonitoringConfigArgsDict',
    'AiFeatureStoreEntityTypeMonitoringConfigCategoricalThresholdConfigArgs',
    'AiFeatureStoreEntityTypeMonitoringConfigCategoricalThresholdConfigArgsDict',
    'AiFeatureStoreEntityTypeMonitoringConfigImportFeaturesAnalysisArgs',
    'AiFeatureStoreEntityTypeMonitoringConfigImportFeaturesAnalysisArgsDict',
    'AiFeatureStoreEntityTypeMonitoringConfigNumericalThresholdConfigArgs',
    'AiFeatureStoreEntityTypeMonitoringConfigNumericalThresholdConfigArgsDict',
    'AiFeatureStoreEntityTypeMonitoringConfigSnapshotAnalysisArgs',
    'AiFeatureStoreEntityTypeMonitoringConfigSnapshotAnalysisArgsDict',
    'AiFeatureStoreIamBindingConditionArgs',
    'AiFeatureStoreIamBindingConditionArgsDict',
    'AiFeatureStoreIamMemberConditionArgs',
    'AiFeatureStoreIamMemberConditionArgsDict',
    'AiFeatureStoreOnlineServingConfigArgs',
    'AiFeatureStoreOnlineServingConfigArgsDict',
    'AiFeatureStoreOnlineServingConfigScalingArgs',
    'AiFeatureStoreOnlineServingConfigScalingArgsDict',
    'AiIndexDeployedIndexArgs',
    'AiIndexDeployedIndexArgsDict',
    'AiIndexEndpointDeployedIndexAutomaticResourcesArgs',
    'AiIndexEndpointDeployedIndexAutomaticResourcesArgsDict',
    'AiIndexEndpointDeployedIndexDedicatedResourcesArgs',
    'AiIndexEndpointDeployedIndexDedicatedResourcesArgsDict',
    'AiIndexEndpointDeployedIndexDedicatedResourcesMachineSpecArgs',
    'AiIndexEndpointDeployedIndexDedicatedResourcesMachineSpecArgsDict',
    'AiIndexEndpointDeployedIndexDeployedIndexAuthConfigArgs',
    'AiIndexEndpointDeployedIndexDeployedIndexAuthConfigArgsDict',
    'AiIndexEndpointDeployedIndexDeployedIndexAuthConfigAuthProviderArgs',
    'AiIndexEndpointDeployedIndexDeployedIndexAuthConfigAuthProviderArgsDict',
    'AiIndexEndpointDeployedIndexPrivateEndpointArgs',
    'AiIndexEndpointDeployedIndexPrivateEndpointArgsDict',
    'AiIndexEndpointDeployedIndexPrivateEndpointPscAutomatedEndpointArgs',
    'AiIndexEndpointDeployedIndexPrivateEndpointPscAutomatedEndpointArgsDict',
    'AiIndexEndpointPrivateServiceConnectConfigArgs',
    'AiIndexEndpointPrivateServiceConnectConfigArgsDict',
    'AiIndexIndexStatArgs',
    'AiIndexIndexStatArgsDict',
    'AiIndexMetadataArgs',
    'AiIndexMetadataArgsDict',
    'AiIndexMetadataConfigArgs',
    'AiIndexMetadataConfigArgsDict',
    'AiIndexMetadataConfigAlgorithmConfigArgs',
    'AiIndexMetadataConfigAlgorithmConfigArgsDict',
    'AiIndexMetadataConfigAlgorithmConfigBruteForceConfigArgs',
    'AiIndexMetadataConfigAlgorithmConfigBruteForceConfigArgsDict',
    'AiIndexMetadataConfigAlgorithmConfigTreeAhConfigArgs',
    'AiIndexMetadataConfigAlgorithmConfigTreeAhConfigArgsDict',
    'AiMetadataStoreEncryptionSpecArgs',
    'AiMetadataStoreEncryptionSpecArgsDict',
    'AiMetadataStoreStateArgs',
    'AiMetadataStoreStateArgsDict',
    'AiTensorboardEncryptionSpecArgs',
    'AiTensorboardEncryptionSpecArgsDict',
]

MYPY = False

if not MYPY:
    class AiDatasetEncryptionSpecArgsDict(TypedDict):
        kms_key_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Required. The Cloud KMS resource identifier of the customer managed encryption key used to protect a resource.
        Has the form: projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key. The key needs to be in the same region as where the resource is created.
        """
elif False:
    AiDatasetEncryptionSpecArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiDatasetEncryptionSpecArgs:
    def __init__(__self__, *,
                 kms_key_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] kms_key_name: Required. The Cloud KMS resource identifier of the customer managed encryption key used to protect a resource.
               Has the form: projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key. The key needs to be in the same region as where the resource is created.
        """
        if kms_key_name is not None:
            pulumi.set(__self__, "kms_key_name", kms_key_name)

    @_builtins.property
    @pulumi.getter(name="kmsKeyName")
    def kms_key_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Required. The Cloud KMS resource identifier of the customer managed encryption key used to protect a resource.
        Has the form: projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key. The key needs to be in the same region as where the resource is created.
        """
        return pulumi.get(self, "kms_key_name")

    @kms_key_name.setter
    def kms_key_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "kms_key_name", value)


if not MYPY:
    class AiDeploymentResourcePoolDedicatedResourcesArgsDict(TypedDict):
        machine_spec: pulumi.Input['AiDeploymentResourcePoolDedicatedResourcesMachineSpecArgsDict']
        """
        The specification of a single machine used by the prediction
        Structure is documented below.
        """
        min_replica_count: pulumi.Input[_builtins.int]
        """
        The minimum number of machine replicas this DeployedModel will be always deployed on. This value must be greater than or equal to 1. If traffic against the DeployedModel increases, it may dynamically be deployed onto more replicas, and as traffic decreases, some of these extra replicas may be freed.
        """
        autoscaling_metric_specs: NotRequired[pulumi.Input[Sequence[pulumi.Input['AiDeploymentResourcePoolDedicatedResourcesAutoscalingMetricSpecArgsDict']]]]
        """
        A list of the metric specifications that overrides a resource utilization metric.
        Structure is documented below.
        """
        max_replica_count: NotRequired[pulumi.Input[_builtins.int]]
        """
        The maximum number of replicas this DeployedModel may be deployed on when the traffic against it increases. If the requested value is too large, the deployment will error, but if deployment succeeds then the ability to scale the model to that many replicas is guaranteed (barring service outages). If traffic against the DeployedModel increases beyond what its replicas at maximum may handle, a portion of the traffic will be dropped. If this value is not provided, will use min_replica_count as the default value. The value of this field impacts the charge against Vertex CPU and GPU quotas. Specifically, you will be charged for max_replica_count * number of cores in the selected machine type) and (max_replica_count * number of GPUs per replica in the selected machine type).
        """
elif False:
    AiDeploymentResourcePoolDedicatedResourcesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiDeploymentResourcePoolDedicatedResourcesArgs:
    def __init__(__self__, *,
                 machine_spec: pulumi.Input['AiDeploymentResourcePoolDedicatedResourcesMachineSpecArgs'],
                 min_replica_count: pulumi.Input[_builtins.int],
                 autoscaling_metric_specs: Optional[pulumi.Input[Sequence[pulumi.Input['AiDeploymentResourcePoolDedicatedResourcesAutoscalingMetricSpecArgs']]]] = None,
                 max_replica_count: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input['AiDeploymentResourcePoolDedicatedResourcesMachineSpecArgs'] machine_spec: The specification of a single machine used by the prediction
               Structure is documented below.
        :param pulumi.Input[_builtins.int] min_replica_count: The minimum number of machine replicas this DeployedModel will be always deployed on. This value must be greater than or equal to 1. If traffic against the DeployedModel increases, it may dynamically be deployed onto more replicas, and as traffic decreases, some of these extra replicas may be freed.
        :param pulumi.Input[Sequence[pulumi.Input['AiDeploymentResourcePoolDedicatedResourcesAutoscalingMetricSpecArgs']]] autoscaling_metric_specs: A list of the metric specifications that overrides a resource utilization metric.
               Structure is documented below.
        :param pulumi.Input[_builtins.int] max_replica_count: The maximum number of replicas this DeployedModel may be deployed on when the traffic against it increases. If the requested value is too large, the deployment will error, but if deployment succeeds then the ability to scale the model to that many replicas is guaranteed (barring service outages). If traffic against the DeployedModel increases beyond what its replicas at maximum may handle, a portion of the traffic will be dropped. If this value is not provided, will use min_replica_count as the default value. The value of this field impacts the charge against Vertex CPU and GPU quotas. Specifically, you will be charged for max_replica_count * number of cores in the selected machine type) and (max_replica_count * number of GPUs per replica in the selected machine type).
        """
        pulumi.set(__self__, "machine_spec", machine_spec)
        pulumi.set(__self__, "min_replica_count", min_replica_count)
        if autoscaling_metric_specs is not None:
            pulumi.set(__self__, "autoscaling_metric_specs", autoscaling_metric_specs)
        if max_replica_count is not None:
            pulumi.set(__self__, "max_replica_count", max_replica_count)

    @_builtins.property
    @pulumi.getter(name="machineSpec")
    def machine_spec(self) -> pulumi.Input['AiDeploymentResourcePoolDedicatedResourcesMachineSpecArgs']:
        """
        The specification of a single machine used by the prediction
        Structure is documented below.
        """
        return pulumi.get(self, "machine_spec")

    @machine_spec.setter
    def machine_spec(self, value: pulumi.Input['AiDeploymentResourcePoolDedicatedResourcesMachineSpecArgs']):
        pulumi.set(self, "machine_spec", value)

    @_builtins.property
    @pulumi.getter(name="minReplicaCount")
    def min_replica_count(self) -> pulumi.Input[_builtins.int]:
        """
        The minimum number of machine replicas this DeployedModel will be always deployed on. This value must be greater than or equal to 1. If traffic against the DeployedModel increases, it may dynamically be deployed onto more replicas, and as traffic decreases, some of these extra replicas may be freed.
        """
        return pulumi.get(self, "min_replica_count")

    @min_replica_count.setter
    def min_replica_count(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "min_replica_count", value)

    @_builtins.property
    @pulumi.getter(name="autoscalingMetricSpecs")
    def autoscaling_metric_specs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AiDeploymentResourcePoolDedicatedResourcesAutoscalingMetricSpecArgs']]]]:
        """
        A list of the metric specifications that overrides a resource utilization metric.
        Structure is documented below.
        """
        return pulumi.get(self, "autoscaling_metric_specs")

    @autoscaling_metric_specs.setter
    def autoscaling_metric_specs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AiDeploymentResourcePoolDedicatedResourcesAutoscalingMetricSpecArgs']]]]):
        pulumi.set(self, "autoscaling_metric_specs", value)

    @_builtins.property
    @pulumi.getter(name="maxReplicaCount")
    def max_replica_count(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The maximum number of replicas this DeployedModel may be deployed on when the traffic against it increases. If the requested value is too large, the deployment will error, but if deployment succeeds then the ability to scale the model to that many replicas is guaranteed (barring service outages). If traffic against the DeployedModel increases beyond what its replicas at maximum may handle, a portion of the traffic will be dropped. If this value is not provided, will use min_replica_count as the default value. The value of this field impacts the charge against Vertex CPU and GPU quotas. Specifically, you will be charged for max_replica_count * number of cores in the selected machine type) and (max_replica_count * number of GPUs per replica in the selected machine type).
        """
        return pulumi.get(self, "max_replica_count")

    @max_replica_count.setter
    def max_replica_count(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "max_replica_count", value)


if not MYPY:
    class AiDeploymentResourcePoolDedicatedResourcesAutoscalingMetricSpecArgsDict(TypedDict):
        metric_name: pulumi.Input[_builtins.str]
        """
        The resource metric name. Supported metrics: For Online Prediction: * `aiplatform.googleapis.com/prediction/online/accelerator/duty_cycle` * `aiplatform.googleapis.com/prediction/online/cpu/utilization`
        """
        target: NotRequired[pulumi.Input[_builtins.int]]
        """
        The target resource utilization in percentage (1% - 100%) for the given metric; once the real usage deviates from the target by a certain percentage, the machine replicas change. The default value is 60 (representing 60%) if not provided.
        """
elif False:
    AiDeploymentResourcePoolDedicatedResourcesAutoscalingMetricSpecArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiDeploymentResourcePoolDedicatedResourcesAutoscalingMetricSpecArgs:
    def __init__(__self__, *,
                 metric_name: pulumi.Input[_builtins.str],
                 target: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] metric_name: The resource metric name. Supported metrics: For Online Prediction: * `aiplatform.googleapis.com/prediction/online/accelerator/duty_cycle` * `aiplatform.googleapis.com/prediction/online/cpu/utilization`
        :param pulumi.Input[_builtins.int] target: The target resource utilization in percentage (1% - 100%) for the given metric; once the real usage deviates from the target by a certain percentage, the machine replicas change. The default value is 60 (representing 60%) if not provided.
        """
        pulumi.set(__self__, "metric_name", metric_name)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @_builtins.property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> pulumi.Input[_builtins.str]:
        """
        The resource metric name. Supported metrics: For Online Prediction: * `aiplatform.googleapis.com/prediction/online/accelerator/duty_cycle` * `aiplatform.googleapis.com/prediction/online/cpu/utilization`
        """
        return pulumi.get(self, "metric_name")

    @metric_name.setter
    def metric_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "metric_name", value)

    @_builtins.property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The target resource utilization in percentage (1% - 100%) for the given metric; once the real usage deviates from the target by a certain percentage, the machine replicas change. The default value is 60 (representing 60%) if not provided.
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "target", value)


if not MYPY:
    class AiDeploymentResourcePoolDedicatedResourcesMachineSpecArgsDict(TypedDict):
        accelerator_count: NotRequired[pulumi.Input[_builtins.int]]
        """
        The number of accelerators to attach to the machine.
        """
        accelerator_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        The type of accelerator(s) that may be attached to the machine as per accelerator_count. See possible values [here](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/MachineSpec#AcceleratorType).
        """
        machine_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        The type of the machine. See the [list of machine types supported for prediction](https://cloud.google.com/vertex-ai/docs/predictions/configure-compute#machine-types).
        """
elif False:
    AiDeploymentResourcePoolDedicatedResourcesMachineSpecArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiDeploymentResourcePoolDedicatedResourcesMachineSpecArgs:
    def __init__(__self__, *,
                 accelerator_count: Optional[pulumi.Input[_builtins.int]] = None,
                 accelerator_type: Optional[pulumi.Input[_builtins.str]] = None,
                 machine_type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.int] accelerator_count: The number of accelerators to attach to the machine.
        :param pulumi.Input[_builtins.str] accelerator_type: The type of accelerator(s) that may be attached to the machine as per accelerator_count. See possible values [here](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/MachineSpec#AcceleratorType).
        :param pulumi.Input[_builtins.str] machine_type: The type of the machine. See the [list of machine types supported for prediction](https://cloud.google.com/vertex-ai/docs/predictions/configure-compute#machine-types).
        """
        if accelerator_count is not None:
            pulumi.set(__self__, "accelerator_count", accelerator_count)
        if accelerator_type is not None:
            pulumi.set(__self__, "accelerator_type", accelerator_type)
        if machine_type is not None:
            pulumi.set(__self__, "machine_type", machine_type)

    @_builtins.property
    @pulumi.getter(name="acceleratorCount")
    def accelerator_count(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The number of accelerators to attach to the machine.
        """
        return pulumi.get(self, "accelerator_count")

    @accelerator_count.setter
    def accelerator_count(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "accelerator_count", value)

    @_builtins.property
    @pulumi.getter(name="acceleratorType")
    def accelerator_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of accelerator(s) that may be attached to the machine as per accelerator_count. See possible values [here](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/MachineSpec#AcceleratorType).
        """
        return pulumi.get(self, "accelerator_type")

    @accelerator_type.setter
    def accelerator_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "accelerator_type", value)

    @_builtins.property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of the machine. See the [list of machine types supported for prediction](https://cloud.google.com/vertex-ai/docs/predictions/configure-compute#machine-types).
        """
        return pulumi.get(self, "machine_type")

    @machine_type.setter
    def machine_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "machine_type", value)


if not MYPY:
    class AiEndpointDeployedModelArgsDict(TypedDict):
        automatic_resources: NotRequired[pulumi.Input[Sequence[pulumi.Input['AiEndpointDeployedModelAutomaticResourceArgsDict']]]]
        """
        (Output)
        A description of resources that to large degree are decided by Vertex AI, and require only a modest additional configuration.
        Structure is documented below.
        """
        create_time: NotRequired[pulumi.Input[_builtins.str]]
        """
        (Output)
        Output only. Timestamp when the DeployedModel was created.
        """
        dedicated_resources: NotRequired[pulumi.Input[Sequence[pulumi.Input['AiEndpointDeployedModelDedicatedResourceArgsDict']]]]
        """
        (Output)
        A description of resources that are dedicated to the DeployedModel, and that need a higher degree of manual configuration.
        Structure is documented below.
        """
        display_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Required. The display name of the Endpoint. The name can be up to 128 characters long and can consist of any UTF-8 characters.
        """
        enable_access_logging: NotRequired[pulumi.Input[_builtins.bool]]
        """
        (Output)
        These logs are like standard server access logs, containing information like timestamp and latency for each prediction request. Note that Stackdriver logs may incur a cost, especially if your project receives prediction requests at a high queries per second rate (QPS). Estimate your costs before enabling this option.
        """
        enable_container_logging: NotRequired[pulumi.Input[_builtins.bool]]
        """
        (Output)
        If true, the container of the DeployedModel instances will send `stderr` and `stdout` streams to Stackdriver Logging. Only supported for custom-trained Models and AutoML Tabular Models.
        """
        id: NotRequired[pulumi.Input[_builtins.str]]
        """
        (Output)
        The ID of the DeployedModel. If not provided upon deployment, Vertex AI will generate a value for this ID. This value should be 1-10 characters, and valid characters are /[0-9]/.
        """
        model: NotRequired[pulumi.Input[_builtins.str]]
        """
        (Output)
        The name of the Model that this is the deployment of. Note that the Model may be in a different location than the DeployedModel's Endpoint.
        """
        model_version_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        (Output)
        Output only. The version ID of the model that is deployed.
        """
        private_endpoints: NotRequired[pulumi.Input[Sequence[pulumi.Input['AiEndpointDeployedModelPrivateEndpointArgsDict']]]]
        """
        (Output)
        Output only. Provide paths for users to send predict/explain/health requests directly to the deployed model services running on Cloud via private services access. This field is populated if network is configured.
        Structure is documented below.
        """
        service_account: NotRequired[pulumi.Input[_builtins.str]]
        """
        (Output)
        The service account that the DeployedModel's container runs as. Specify the email address of the service account. If this service account is not specified, the container runs as a service account that doesn't have access to the resource project. Users deploying the Model must have the `iam.serviceAccounts.actAs` permission on this service account.
        """
        shared_resources: NotRequired[pulumi.Input[_builtins.str]]
        """
        (Output)
        The resource name of the shared DeploymentResourcePool to deploy on. Format: projects/{project}/locations/{location}/deploymentResourcePools/{deployment_resource_pool}
        """
elif False:
    AiEndpointDeployedModelArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiEndpointDeployedModelArgs:
    def __init__(__self__, *,
                 automatic_resources: Optional[pulumi.Input[Sequence[pulumi.Input['AiEndpointDeployedModelAutomaticResourceArgs']]]] = None,
                 create_time: Optional[pulumi.Input[_builtins.str]] = None,
                 dedicated_resources: Optional[pulumi.Input[Sequence[pulumi.Input['AiEndpointDeployedModelDedicatedResourceArgs']]]] = None,
                 display_name: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_access_logging: Optional[pulumi.Input[_builtins.bool]] = None,
                 enable_container_logging: Optional[pulumi.Input[_builtins.bool]] = None,
                 id: Optional[pulumi.Input[_builtins.str]] = None,
                 model: Optional[pulumi.Input[_builtins.str]] = None,
                 model_version_id: Optional[pulumi.Input[_builtins.str]] = None,
                 private_endpoints: Optional[pulumi.Input[Sequence[pulumi.Input['AiEndpointDeployedModelPrivateEndpointArgs']]]] = None,
                 service_account: Optional[pulumi.Input[_builtins.str]] = None,
                 shared_resources: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['AiEndpointDeployedModelAutomaticResourceArgs']]] automatic_resources: (Output)
               A description of resources that to large degree are decided by Vertex AI, and require only a modest additional configuration.
               Structure is documented below.
        :param pulumi.Input[_builtins.str] create_time: (Output)
               Output only. Timestamp when the DeployedModel was created.
        :param pulumi.Input[Sequence[pulumi.Input['AiEndpointDeployedModelDedicatedResourceArgs']]] dedicated_resources: (Output)
               A description of resources that are dedicated to the DeployedModel, and that need a higher degree of manual configuration.
               Structure is documented below.
        :param pulumi.Input[_builtins.str] display_name: Required. The display name of the Endpoint. The name can be up to 128 characters long and can consist of any UTF-8 characters.
        :param pulumi.Input[_builtins.bool] enable_access_logging: (Output)
               These logs are like standard server access logs, containing information like timestamp and latency for each prediction request. Note that Stackdriver logs may incur a cost, especially if your project receives prediction requests at a high queries per second rate (QPS). Estimate your costs before enabling this option.
        :param pulumi.Input[_builtins.bool] enable_container_logging: (Output)
               If true, the container of the DeployedModel instances will send `stderr` and `stdout` streams to Stackdriver Logging. Only supported for custom-trained Models and AutoML Tabular Models.
        :param pulumi.Input[_builtins.str] id: (Output)
               The ID of the DeployedModel. If not provided upon deployment, Vertex AI will generate a value for this ID. This value should be 1-10 characters, and valid characters are /[0-9]/.
        :param pulumi.Input[_builtins.str] model: (Output)
               The name of the Model that this is the deployment of. Note that the Model may be in a different location than the DeployedModel's Endpoint.
        :param pulumi.Input[_builtins.str] model_version_id: (Output)
               Output only. The version ID of the model that is deployed.
        :param pulumi.Input[Sequence[pulumi.Input['AiEndpointDeployedModelPrivateEndpointArgs']]] private_endpoints: (Output)
               Output only. Provide paths for users to send predict/explain/health requests directly to the deployed model services running on Cloud via private services access. This field is populated if network is configured.
               Structure is documented below.
        :param pulumi.Input[_builtins.str] service_account: (Output)
               The service account that the DeployedModel's container runs as. Specify the email address of the service account. If this service account is not specified, the container runs as a service account that doesn't have access to the resource project. Users deploying the Model must have the `iam.serviceAccounts.actAs` permission on this service account.
        :param pulumi.Input[_builtins.str] shared_resources: (Output)
               The resource name of the shared DeploymentResourcePool to deploy on. Format: projects/{project}/locations/{location}/deploymentResourcePools/{deployment_resource_pool}
        """
        if automatic_resources is not None:
            pulumi.set(__self__, "automatic_resources", automatic_resources)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if dedicated_resources is not None:
            pulumi.set(__self__, "dedicated_resources", dedicated_resources)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if enable_access_logging is not None:
            pulumi.set(__self__, "enable_access_logging", enable_access_logging)
        if enable_container_logging is not None:
            pulumi.set(__self__, "enable_container_logging", enable_container_logging)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if model is not None:
            pulumi.set(__self__, "model", model)
        if model_version_id is not None:
            pulumi.set(__self__, "model_version_id", model_version_id)
        if private_endpoints is not None:
            pulumi.set(__self__, "private_endpoints", private_endpoints)
        if service_account is not None:
            pulumi.set(__self__, "service_account", service_account)
        if shared_resources is not None:
            pulumi.set(__self__, "shared_resources", shared_resources)

    @_builtins.property
    @pulumi.getter(name="automaticResources")
    def automatic_resources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AiEndpointDeployedModelAutomaticResourceArgs']]]]:
        """
        (Output)
        A description of resources that to large degree are decided by Vertex AI, and require only a modest additional configuration.
        Structure is documented below.
        """
        return pulumi.get(self, "automatic_resources")

    @automatic_resources.setter
    def automatic_resources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AiEndpointDeployedModelAutomaticResourceArgs']]]]):
        pulumi.set(self, "automatic_resources", value)

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        (Output)
        Output only. Timestamp when the DeployedModel was created.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "create_time", value)

    @_builtins.property
    @pulumi.getter(name="dedicatedResources")
    def dedicated_resources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AiEndpointDeployedModelDedicatedResourceArgs']]]]:
        """
        (Output)
        A description of resources that are dedicated to the DeployedModel, and that need a higher degree of manual configuration.
        Structure is documented below.
        """
        return pulumi.get(self, "dedicated_resources")

    @dedicated_resources.setter
    def dedicated_resources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AiEndpointDeployedModelDedicatedResourceArgs']]]]):
        pulumi.set(self, "dedicated_resources", value)

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Required. The display name of the Endpoint. The name can be up to 128 characters long and can consist of any UTF-8 characters.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "display_name", value)

    @_builtins.property
    @pulumi.getter(name="enableAccessLogging")
    def enable_access_logging(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        (Output)
        These logs are like standard server access logs, containing information like timestamp and latency for each prediction request. Note that Stackdriver logs may incur a cost, especially if your project receives prediction requests at a high queries per second rate (QPS). Estimate your costs before enabling this option.
        """
        return pulumi.get(self, "enable_access_logging")

    @enable_access_logging.setter
    def enable_access_logging(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_access_logging", value)

    @_builtins.property
    @pulumi.getter(name="enableContainerLogging")
    def enable_container_logging(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        (Output)
        If true, the container of the DeployedModel instances will send `stderr` and `stdout` streams to Stackdriver Logging. Only supported for custom-trained Models and AutoML Tabular Models.
        """
        return pulumi.get(self, "enable_container_logging")

    @enable_container_logging.setter
    def enable_container_logging(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_container_logging", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        (Output)
        The ID of the DeployedModel. If not provided upon deployment, Vertex AI will generate a value for this ID. This value should be 1-10 characters, and valid characters are /[0-9]/.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter
    def model(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        (Output)
        The name of the Model that this is the deployment of. Note that the Model may be in a different location than the DeployedModel's Endpoint.
        """
        return pulumi.get(self, "model")

    @model.setter
    def model(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "model", value)

    @_builtins.property
    @pulumi.getter(name="modelVersionId")
    def model_version_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        (Output)
        Output only. The version ID of the model that is deployed.
        """
        return pulumi.get(self, "model_version_id")

    @model_version_id.setter
    def model_version_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "model_version_id", value)

    @_builtins.property
    @pulumi.getter(name="privateEndpoints")
    def private_endpoints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AiEndpointDeployedModelPrivateEndpointArgs']]]]:
        """
        (Output)
        Output only. Provide paths for users to send predict/explain/health requests directly to the deployed model services running on Cloud via private services access. This field is populated if network is configured.
        Structure is documented below.
        """
        return pulumi.get(self, "private_endpoints")

    @private_endpoints.setter
    def private_endpoints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AiEndpointDeployedModelPrivateEndpointArgs']]]]):
        pulumi.set(self, "private_endpoints", value)

    @_builtins.property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        (Output)
        The service account that the DeployedModel's container runs as. Specify the email address of the service account. If this service account is not specified, the container runs as a service account that doesn't have access to the resource project. Users deploying the Model must have the `iam.serviceAccounts.actAs` permission on this service account.
        """
        return pulumi.get(self, "service_account")

    @service_account.setter
    def service_account(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_account", value)

    @_builtins.property
    @pulumi.getter(name="sharedResources")
    def shared_resources(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        (Output)
        The resource name of the shared DeploymentResourcePool to deploy on. Format: projects/{project}/locations/{location}/deploymentResourcePools/{deployment_resource_pool}
        """
        return pulumi.get(self, "shared_resources")

    @shared_resources.setter
    def shared_resources(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "shared_resources", value)


if not MYPY:
    class AiEndpointDeployedModelAutomaticResourceArgsDict(TypedDict):
        max_replica_count: NotRequired[pulumi.Input[_builtins.int]]
        """
        (Output)
        The maximum number of replicas this DeployedModel may be deployed on when the traffic against it increases. If the requested value is too large, the deployment will error, but if deployment succeeds then the ability to scale the model to that many replicas is guaranteed (barring service outages). If traffic against the DeployedModel increases beyond what its replicas at maximum may handle, a portion of the traffic will be dropped. If this value is not provided, a no upper bound for scaling under heavy traffic will be assume, though Vertex AI may be unable to scale beyond certain replica number.
        """
        min_replica_count: NotRequired[pulumi.Input[_builtins.int]]
        """
        (Output)
        The minimum number of replicas this DeployedModel will be always deployed on. If traffic against it increases, it may dynamically be deployed onto more replicas up to max_replica_count, and as traffic decreases, some of these extra replicas may be freed. If the requested value is too large, the deployment will error.
        """
elif False:
    AiEndpointDeployedModelAutomaticResourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiEndpointDeployedModelAutomaticResourceArgs:
    def __init__(__self__, *,
                 max_replica_count: Optional[pulumi.Input[_builtins.int]] = None,
                 min_replica_count: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.int] max_replica_count: (Output)
               The maximum number of replicas this DeployedModel may be deployed on when the traffic against it increases. If the requested value is too large, the deployment will error, but if deployment succeeds then the ability to scale the model to that many replicas is guaranteed (barring service outages). If traffic against the DeployedModel increases beyond what its replicas at maximum may handle, a portion of the traffic will be dropped. If this value is not provided, a no upper bound for scaling under heavy traffic will be assume, though Vertex AI may be unable to scale beyond certain replica number.
        :param pulumi.Input[_builtins.int] min_replica_count: (Output)
               The minimum number of replicas this DeployedModel will be always deployed on. If traffic against it increases, it may dynamically be deployed onto more replicas up to max_replica_count, and as traffic decreases, some of these extra replicas may be freed. If the requested value is too large, the deployment will error.
        """
        if max_replica_count is not None:
            pulumi.set(__self__, "max_replica_count", max_replica_count)
        if min_replica_count is not None:
            pulumi.set(__self__, "min_replica_count", min_replica_count)

    @_builtins.property
    @pulumi.getter(name="maxReplicaCount")
    def max_replica_count(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        (Output)
        The maximum number of replicas this DeployedModel may be deployed on when the traffic against it increases. If the requested value is too large, the deployment will error, but if deployment succeeds then the ability to scale the model to that many replicas is guaranteed (barring service outages). If traffic against the DeployedModel increases beyond what its replicas at maximum may handle, a portion of the traffic will be dropped. If this value is not provided, a no upper bound for scaling under heavy traffic will be assume, though Vertex AI may be unable to scale beyond certain replica number.
        """
        return pulumi.get(self, "max_replica_count")

    @max_replica_count.setter
    def max_replica_count(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "max_replica_count", value)

    @_builtins.property
    @pulumi.getter(name="minReplicaCount")
    def min_replica_count(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        (Output)
        The minimum number of replicas this DeployedModel will be always deployed on. If traffic against it increases, it may dynamically be deployed onto more replicas up to max_replica_count, and as traffic decreases, some of these extra replicas may be freed. If the requested value is too large, the deployment will error.
        """
        return pulumi.get(self, "min_replica_count")

    @min_replica_count.setter
    def min_replica_count(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "min_replica_count", value)


if not MYPY:
    class AiEndpointDeployedModelDedicatedResourceArgsDict(TypedDict):
        autoscaling_metric_specs: NotRequired[pulumi.Input[Sequence[pulumi.Input['AiEndpointDeployedModelDedicatedResourceAutoscalingMetricSpecArgsDict']]]]
        """
        (Output)
        The metric specifications that overrides a resource utilization metric (CPU utilization, accelerator's duty cycle, and so on) target value (default to 60 if not set). At most one entry is allowed per metric. If machine_spec.accelerator_count is above 0, the autoscaling will be based on both CPU utilization and accelerator's duty cycle metrics and scale up when either metrics exceeds its target value while scale down if both metrics are under their target value. The default target value is 60 for both metrics. If machine_spec.accelerator_count is 0, the autoscaling will be based on CPU utilization metric only with default target value 60 if not explicitly set. For example, in the case of Online Prediction, if you want to override target CPU utilization to 80, you should set autoscaling_metric_specs.metric_name to `aiplatform.googleapis.com/prediction/online/cpu/utilization` and autoscaling_metric_specs.target to `80`.
        Structure is documented below.
        """
        machine_specs: NotRequired[pulumi.Input[Sequence[pulumi.Input['AiEndpointDeployedModelDedicatedResourceMachineSpecArgsDict']]]]
        """
        (Output)
        The specification of a single machine used by the prediction.
        Structure is documented below.
        """
        max_replica_count: NotRequired[pulumi.Input[_builtins.int]]
        """
        (Output)
        The maximum number of replicas this DeployedModel may be deployed on when the traffic against it increases. If the requested value is too large, the deployment will error, but if deployment succeeds then the ability to scale the model to that many replicas is guaranteed (barring service outages). If traffic against the DeployedModel increases beyond what its replicas at maximum may handle, a portion of the traffic will be dropped. If this value is not provided, a no upper bound for scaling under heavy traffic will be assume, though Vertex AI may be unable to scale beyond certain replica number.
        """
        min_replica_count: NotRequired[pulumi.Input[_builtins.int]]
        """
        (Output)
        The minimum number of replicas this DeployedModel will be always deployed on. If traffic against it increases, it may dynamically be deployed onto more replicas up to max_replica_count, and as traffic decreases, some of these extra replicas may be freed. If the requested value is too large, the deployment will error.
        """
elif False:
    AiEndpointDeployedModelDedicatedResourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiEndpointDeployedModelDedicatedResourceArgs:
    def __init__(__self__, *,
                 autoscaling_metric_specs: Optional[pulumi.Input[Sequence[pulumi.Input['AiEndpointDeployedModelDedicatedResourceAutoscalingMetricSpecArgs']]]] = None,
                 machine_specs: Optional[pulumi.Input[Sequence[pulumi.Input['AiEndpointDeployedModelDedicatedResourceMachineSpecArgs']]]] = None,
                 max_replica_count: Optional[pulumi.Input[_builtins.int]] = None,
                 min_replica_count: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['AiEndpointDeployedModelDedicatedResourceAutoscalingMetricSpecArgs']]] autoscaling_metric_specs: (Output)
               The metric specifications that overrides a resource utilization metric (CPU utilization, accelerator's duty cycle, and so on) target value (default to 60 if not set). At most one entry is allowed per metric. If machine_spec.accelerator_count is above 0, the autoscaling will be based on both CPU utilization and accelerator's duty cycle metrics and scale up when either metrics exceeds its target value while scale down if both metrics are under their target value. The default target value is 60 for both metrics. If machine_spec.accelerator_count is 0, the autoscaling will be based on CPU utilization metric only with default target value 60 if not explicitly set. For example, in the case of Online Prediction, if you want to override target CPU utilization to 80, you should set autoscaling_metric_specs.metric_name to `aiplatform.googleapis.com/prediction/online/cpu/utilization` and autoscaling_metric_specs.target to `80`.
               Structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['AiEndpointDeployedModelDedicatedResourceMachineSpecArgs']]] machine_specs: (Output)
               The specification of a single machine used by the prediction.
               Structure is documented below.
        :param pulumi.Input[_builtins.int] max_replica_count: (Output)
               The maximum number of replicas this DeployedModel may be deployed on when the traffic against it increases. If the requested value is too large, the deployment will error, but if deployment succeeds then the ability to scale the model to that many replicas is guaranteed (barring service outages). If traffic against the DeployedModel increases beyond what its replicas at maximum may handle, a portion of the traffic will be dropped. If this value is not provided, a no upper bound for scaling under heavy traffic will be assume, though Vertex AI may be unable to scale beyond certain replica number.
        :param pulumi.Input[_builtins.int] min_replica_count: (Output)
               The minimum number of replicas this DeployedModel will be always deployed on. If traffic against it increases, it may dynamically be deployed onto more replicas up to max_replica_count, and as traffic decreases, some of these extra replicas may be freed. If the requested value is too large, the deployment will error.
        """
        if autoscaling_metric_specs is not None:
            pulumi.set(__self__, "autoscaling_metric_specs", autoscaling_metric_specs)
        if machine_specs is not None:
            pulumi.set(__self__, "machine_specs", machine_specs)
        if max_replica_count is not None:
            pulumi.set(__self__, "max_replica_count", max_replica_count)
        if min_replica_count is not None:
            pulumi.set(__self__, "min_replica_count", min_replica_count)

    @_builtins.property
    @pulumi.getter(name="autoscalingMetricSpecs")
    def autoscaling_metric_specs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AiEndpointDeployedModelDedicatedResourceAutoscalingMetricSpecArgs']]]]:
        """
        (Output)
        The metric specifications that overrides a resource utilization metric (CPU utilization, accelerator's duty cycle, and so on) target value (default to 60 if not set). At most one entry is allowed per metric. If machine_spec.accelerator_count is above 0, the autoscaling will be based on both CPU utilization and accelerator's duty cycle metrics and scale up when either metrics exceeds its target value while scale down if both metrics are under their target value. The default target value is 60 for both metrics. If machine_spec.accelerator_count is 0, the autoscaling will be based on CPU utilization metric only with default target value 60 if not explicitly set. For example, in the case of Online Prediction, if you want to override target CPU utilization to 80, you should set autoscaling_metric_specs.metric_name to `aiplatform.googleapis.com/prediction/online/cpu/utilization` and autoscaling_metric_specs.target to `80`.
        Structure is documented below.
        """
        return pulumi.get(self, "autoscaling_metric_specs")

    @autoscaling_metric_specs.setter
    def autoscaling_metric_specs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AiEndpointDeployedModelDedicatedResourceAutoscalingMetricSpecArgs']]]]):
        pulumi.set(self, "autoscaling_metric_specs", value)

    @_builtins.property
    @pulumi.getter(name="machineSpecs")
    def machine_specs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AiEndpointDeployedModelDedicatedResourceMachineSpecArgs']]]]:
        """
        (Output)
        The specification of a single machine used by the prediction.
        Structure is documented below.
        """
        return pulumi.get(self, "machine_specs")

    @machine_specs.setter
    def machine_specs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AiEndpointDeployedModelDedicatedResourceMachineSpecArgs']]]]):
        pulumi.set(self, "machine_specs", value)

    @_builtins.property
    @pulumi.getter(name="maxReplicaCount")
    def max_replica_count(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        (Output)
        The maximum number of replicas this DeployedModel may be deployed on when the traffic against it increases. If the requested value is too large, the deployment will error, but if deployment succeeds then the ability to scale the model to that many replicas is guaranteed (barring service outages). If traffic against the DeployedModel increases beyond what its replicas at maximum may handle, a portion of the traffic will be dropped. If this value is not provided, a no upper bound for scaling under heavy traffic will be assume, though Vertex AI may be unable to scale beyond certain replica number.
        """
        return pulumi.get(self, "max_replica_count")

    @max_replica_count.setter
    def max_replica_count(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "max_replica_count", value)

    @_builtins.property
    @pulumi.getter(name="minReplicaCount")
    def min_replica_count(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        (Output)
        The minimum number of replicas this DeployedModel will be always deployed on. If traffic against it increases, it may dynamically be deployed onto more replicas up to max_replica_count, and as traffic decreases, some of these extra replicas may be freed. If the requested value is too large, the deployment will error.
        """
        return pulumi.get(self, "min_replica_count")

    @min_replica_count.setter
    def min_replica_count(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "min_replica_count", value)


if not MYPY:
    class AiEndpointDeployedModelDedicatedResourceAutoscalingMetricSpecArgsDict(TypedDict):
        metric_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        (Output)
        The resource metric name. Supported metrics: * For Online Prediction: * `aiplatform.googleapis.com/prediction/online/accelerator/duty_cycle` * `aiplatform.googleapis.com/prediction/online/cpu/utilization`
        """
        target: NotRequired[pulumi.Input[_builtins.int]]
        """
        (Output)
        The target resource utilization in percentage (1% - 100%) for the given metric; once the real usage deviates from the target by a certain percentage, the machine replicas change. The default value is 60 (representing 60%) if not provided.
        """
elif False:
    AiEndpointDeployedModelDedicatedResourceAutoscalingMetricSpecArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiEndpointDeployedModelDedicatedResourceAutoscalingMetricSpecArgs:
    def __init__(__self__, *,
                 metric_name: Optional[pulumi.Input[_builtins.str]] = None,
                 target: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] metric_name: (Output)
               The resource metric name. Supported metrics: * For Online Prediction: * `aiplatform.googleapis.com/prediction/online/accelerator/duty_cycle` * `aiplatform.googleapis.com/prediction/online/cpu/utilization`
        :param pulumi.Input[_builtins.int] target: (Output)
               The target resource utilization in percentage (1% - 100%) for the given metric; once the real usage deviates from the target by a certain percentage, the machine replicas change. The default value is 60 (representing 60%) if not provided.
        """
        if metric_name is not None:
            pulumi.set(__self__, "metric_name", metric_name)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @_builtins.property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        (Output)
        The resource metric name. Supported metrics: * For Online Prediction: * `aiplatform.googleapis.com/prediction/online/accelerator/duty_cycle` * `aiplatform.googleapis.com/prediction/online/cpu/utilization`
        """
        return pulumi.get(self, "metric_name")

    @metric_name.setter
    def metric_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "metric_name", value)

    @_builtins.property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        (Output)
        The target resource utilization in percentage (1% - 100%) for the given metric; once the real usage deviates from the target by a certain percentage, the machine replicas change. The default value is 60 (representing 60%) if not provided.
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "target", value)


if not MYPY:
    class AiEndpointDeployedModelDedicatedResourceMachineSpecArgsDict(TypedDict):
        accelerator_count: NotRequired[pulumi.Input[_builtins.int]]
        """
        (Output)
        The number of accelerators to attach to the machine.
        """
        accelerator_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        (Output)
        The type of accelerator(s) that may be attached to the machine as per accelerator_count. See possible values [here](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/MachineSpec#AcceleratorType).
        """
        machine_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        (Output)
        The type of the machine. See the [list of machine types supported for prediction](https://cloud.google.com/vertex-ai/docs/predictions/configure-compute#machine-types) See the [list of machine types supported for custom training](https://cloud.google.com/vertex-ai/docs/training/configure-compute#machine-types). For DeployedModel this field is optional, and the default value is `n1-standard-2`. For BatchPredictionJob or as part of WorkerPoolSpec this field is required. TODO: Try to better unify the required vs optional.
        """
elif False:
    AiEndpointDeployedModelDedicatedResourceMachineSpecArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiEndpointDeployedModelDedicatedResourceMachineSpecArgs:
    def __init__(__self__, *,
                 accelerator_count: Optional[pulumi.Input[_builtins.int]] = None,
                 accelerator_type: Optional[pulumi.Input[_builtins.str]] = None,
                 machine_type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.int] accelerator_count: (Output)
               The number of accelerators to attach to the machine.
        :param pulumi.Input[_builtins.str] accelerator_type: (Output)
               The type of accelerator(s) that may be attached to the machine as per accelerator_count. See possible values [here](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/MachineSpec#AcceleratorType).
        :param pulumi.Input[_builtins.str] machine_type: (Output)
               The type of the machine. See the [list of machine types supported for prediction](https://cloud.google.com/vertex-ai/docs/predictions/configure-compute#machine-types) See the [list of machine types supported for custom training](https://cloud.google.com/vertex-ai/docs/training/configure-compute#machine-types). For DeployedModel this field is optional, and the default value is `n1-standard-2`. For BatchPredictionJob or as part of WorkerPoolSpec this field is required. TODO: Try to better unify the required vs optional.
        """
        if accelerator_count is not None:
            pulumi.set(__self__, "accelerator_count", accelerator_count)
        if accelerator_type is not None:
            pulumi.set(__self__, "accelerator_type", accelerator_type)
        if machine_type is not None:
            pulumi.set(__self__, "machine_type", machine_type)

    @_builtins.property
    @pulumi.getter(name="acceleratorCount")
    def accelerator_count(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        (Output)
        The number of accelerators to attach to the machine.
        """
        return pulumi.get(self, "accelerator_count")

    @accelerator_count.setter
    def accelerator_count(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "accelerator_count", value)

    @_builtins.property
    @pulumi.getter(name="acceleratorType")
    def accelerator_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        (Output)
        The type of accelerator(s) that may be attached to the machine as per accelerator_count. See possible values [here](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/MachineSpec#AcceleratorType).
        """
        return pulumi.get(self, "accelerator_type")

    @accelerator_type.setter
    def accelerator_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "accelerator_type", value)

    @_builtins.property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        (Output)
        The type of the machine. See the [list of machine types supported for prediction](https://cloud.google.com/vertex-ai/docs/predictions/configure-compute#machine-types) See the [list of machine types supported for custom training](https://cloud.google.com/vertex-ai/docs/training/configure-compute#machine-types). For DeployedModel this field is optional, and the default value is `n1-standard-2`. For BatchPredictionJob or as part of WorkerPoolSpec this field is required. TODO: Try to better unify the required vs optional.
        """
        return pulumi.get(self, "machine_type")

    @machine_type.setter
    def machine_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "machine_type", value)


if not MYPY:
    class AiEndpointDeployedModelPrivateEndpointArgsDict(TypedDict):
        explain_http_uri: NotRequired[pulumi.Input[_builtins.str]]
        """
        (Output)
        Output only. Http(s) path to send explain requests.
        """
        health_http_uri: NotRequired[pulumi.Input[_builtins.str]]
        """
        (Output)
        Output only. Http(s) path to send health check requests.
        """
        predict_http_uri: NotRequired[pulumi.Input[_builtins.str]]
        """
        (Output)
        Output only. Http(s) path to send prediction requests.
        """
        service_attachment: NotRequired[pulumi.Input[_builtins.str]]
        """
        (Output)
        Output only. The name of the service attachment resource. Populated if private service connect is enabled.
        """
elif False:
    AiEndpointDeployedModelPrivateEndpointArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiEndpointDeployedModelPrivateEndpointArgs:
    def __init__(__self__, *,
                 explain_http_uri: Optional[pulumi.Input[_builtins.str]] = None,
                 health_http_uri: Optional[pulumi.Input[_builtins.str]] = None,
                 predict_http_uri: Optional[pulumi.Input[_builtins.str]] = None,
                 service_attachment: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] explain_http_uri: (Output)
               Output only. Http(s) path to send explain requests.
        :param pulumi.Input[_builtins.str] health_http_uri: (Output)
               Output only. Http(s) path to send health check requests.
        :param pulumi.Input[_builtins.str] predict_http_uri: (Output)
               Output only. Http(s) path to send prediction requests.
        :param pulumi.Input[_builtins.str] service_attachment: (Output)
               Output only. The name of the service attachment resource. Populated if private service connect is enabled.
        """
        if explain_http_uri is not None:
            pulumi.set(__self__, "explain_http_uri", explain_http_uri)
        if health_http_uri is not None:
            pulumi.set(__self__, "health_http_uri", health_http_uri)
        if predict_http_uri is not None:
            pulumi.set(__self__, "predict_http_uri", predict_http_uri)
        if service_attachment is not None:
            pulumi.set(__self__, "service_attachment", service_attachment)

    @_builtins.property
    @pulumi.getter(name="explainHttpUri")
    def explain_http_uri(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        (Output)
        Output only. Http(s) path to send explain requests.
        """
        return pulumi.get(self, "explain_http_uri")

    @explain_http_uri.setter
    def explain_http_uri(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "explain_http_uri", value)

    @_builtins.property
    @pulumi.getter(name="healthHttpUri")
    def health_http_uri(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        (Output)
        Output only. Http(s) path to send health check requests.
        """
        return pulumi.get(self, "health_http_uri")

    @health_http_uri.setter
    def health_http_uri(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "health_http_uri", value)

    @_builtins.property
    @pulumi.getter(name="predictHttpUri")
    def predict_http_uri(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        (Output)
        Output only. Http(s) path to send prediction requests.
        """
        return pulumi.get(self, "predict_http_uri")

    @predict_http_uri.setter
    def predict_http_uri(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "predict_http_uri", value)

    @_builtins.property
    @pulumi.getter(name="serviceAttachment")
    def service_attachment(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        (Output)
        Output only. The name of the service attachment resource. Populated if private service connect is enabled.
        """
        return pulumi.get(self, "service_attachment")

    @service_attachment.setter
    def service_attachment(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_attachment", value)


if not MYPY:
    class AiEndpointEncryptionSpecArgsDict(TypedDict):
        kms_key_name: pulumi.Input[_builtins.str]
        """
        Required. The Cloud KMS resource identifier of the customer managed encryption key used to protect a resource. Has the form: `projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key`. The key needs to be in the same region as where the compute resource is created.
        """
elif False:
    AiEndpointEncryptionSpecArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiEndpointEncryptionSpecArgs:
    def __init__(__self__, *,
                 kms_key_name: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] kms_key_name: Required. The Cloud KMS resource identifier of the customer managed encryption key used to protect a resource. Has the form: `projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key`. The key needs to be in the same region as where the compute resource is created.
        """
        pulumi.set(__self__, "kms_key_name", kms_key_name)

    @_builtins.property
    @pulumi.getter(name="kmsKeyName")
    def kms_key_name(self) -> pulumi.Input[_builtins.str]:
        """
        Required. The Cloud KMS resource identifier of the customer managed encryption key used to protect a resource. Has the form: `projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key`. The key needs to be in the same region as where the compute resource is created.
        """
        return pulumi.get(self, "kms_key_name")

    @kms_key_name.setter
    def kms_key_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "kms_key_name", value)


if not MYPY:
    class AiEndpointIamBindingConditionArgsDict(TypedDict):
        expression: pulumi.Input[_builtins.str]
        title: pulumi.Input[_builtins.str]
        description: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    AiEndpointIamBindingConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiEndpointIamBindingConditionArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[_builtins.str],
                 title: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "title", title)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @_builtins.property
    @pulumi.getter
    def expression(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "expression", value)

    @_builtins.property
    @pulumi.getter
    def title(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "title", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)


if not MYPY:
    class AiEndpointIamMemberConditionArgsDict(TypedDict):
        expression: pulumi.Input[_builtins.str]
        title: pulumi.Input[_builtins.str]
        description: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    AiEndpointIamMemberConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiEndpointIamMemberConditionArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[_builtins.str],
                 title: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "title", title)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @_builtins.property
    @pulumi.getter
    def expression(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "expression", value)

    @_builtins.property
    @pulumi.getter
    def title(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "title", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)


if not MYPY:
    class AiEndpointPredictRequestResponseLoggingConfigArgsDict(TypedDict):
        bigquery_destination: NotRequired[pulumi.Input['AiEndpointPredictRequestResponseLoggingConfigBigqueryDestinationArgsDict']]
        """
        BigQuery table for logging. If only given a project, a new dataset will be created with name `logging_<endpoint-display-name>_<endpoint-id>` where will be made BigQuery-dataset-name compatible (e.g. most special characters will become underscores). If no table name is given, a new table will be created with name `request_response_logging`
        Structure is documented below.
        """
        enabled: NotRequired[pulumi.Input[_builtins.bool]]
        """
        If logging is enabled or not.
        """
        sampling_rate: NotRequired[pulumi.Input[_builtins.float]]
        """
        Percentage of requests to be logged, expressed as a fraction in range(0,1]
        """
elif False:
    AiEndpointPredictRequestResponseLoggingConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiEndpointPredictRequestResponseLoggingConfigArgs:
    def __init__(__self__, *,
                 bigquery_destination: Optional[pulumi.Input['AiEndpointPredictRequestResponseLoggingConfigBigqueryDestinationArgs']] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 sampling_rate: Optional[pulumi.Input[_builtins.float]] = None):
        """
        :param pulumi.Input['AiEndpointPredictRequestResponseLoggingConfigBigqueryDestinationArgs'] bigquery_destination: BigQuery table for logging. If only given a project, a new dataset will be created with name `logging_<endpoint-display-name>_<endpoint-id>` where will be made BigQuery-dataset-name compatible (e.g. most special characters will become underscores). If no table name is given, a new table will be created with name `request_response_logging`
               Structure is documented below.
        :param pulumi.Input[_builtins.bool] enabled: If logging is enabled or not.
        :param pulumi.Input[_builtins.float] sampling_rate: Percentage of requests to be logged, expressed as a fraction in range(0,1]
        """
        if bigquery_destination is not None:
            pulumi.set(__self__, "bigquery_destination", bigquery_destination)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if sampling_rate is not None:
            pulumi.set(__self__, "sampling_rate", sampling_rate)

    @_builtins.property
    @pulumi.getter(name="bigqueryDestination")
    def bigquery_destination(self) -> Optional[pulumi.Input['AiEndpointPredictRequestResponseLoggingConfigBigqueryDestinationArgs']]:
        """
        BigQuery table for logging. If only given a project, a new dataset will be created with name `logging_<endpoint-display-name>_<endpoint-id>` where will be made BigQuery-dataset-name compatible (e.g. most special characters will become underscores). If no table name is given, a new table will be created with name `request_response_logging`
        Structure is documented below.
        """
        return pulumi.get(self, "bigquery_destination")

    @bigquery_destination.setter
    def bigquery_destination(self, value: Optional[pulumi.Input['AiEndpointPredictRequestResponseLoggingConfigBigqueryDestinationArgs']]):
        pulumi.set(self, "bigquery_destination", value)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If logging is enabled or not.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter(name="samplingRate")
    def sampling_rate(self) -> Optional[pulumi.Input[_builtins.float]]:
        """
        Percentage of requests to be logged, expressed as a fraction in range(0,1]
        """
        return pulumi.get(self, "sampling_rate")

    @sampling_rate.setter
    def sampling_rate(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "sampling_rate", value)


if not MYPY:
    class AiEndpointPredictRequestResponseLoggingConfigBigqueryDestinationArgsDict(TypedDict):
        output_uri: NotRequired[pulumi.Input[_builtins.str]]
        """
        BigQuery URI to a project or table, up to 2000 characters long. When only the project is specified, the Dataset and Table is created. When the full table reference is specified, the Dataset must exist and table must not exist. Accepted forms: - BigQuery path. For example: `bq://projectId` or `bq://projectId.bqDatasetId` or `bq://projectId.bqDatasetId.bqTableId`.
        """
elif False:
    AiEndpointPredictRequestResponseLoggingConfigBigqueryDestinationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiEndpointPredictRequestResponseLoggingConfigBigqueryDestinationArgs:
    def __init__(__self__, *,
                 output_uri: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] output_uri: BigQuery URI to a project or table, up to 2000 characters long. When only the project is specified, the Dataset and Table is created. When the full table reference is specified, the Dataset must exist and table must not exist. Accepted forms: - BigQuery path. For example: `bq://projectId` or `bq://projectId.bqDatasetId` or `bq://projectId.bqDatasetId.bqTableId`.
        """
        if output_uri is not None:
            pulumi.set(__self__, "output_uri", output_uri)

    @_builtins.property
    @pulumi.getter(name="outputUri")
    def output_uri(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        BigQuery URI to a project or table, up to 2000 characters long. When only the project is specified, the Dataset and Table is created. When the full table reference is specified, the Dataset must exist and table must not exist. Accepted forms: - BigQuery path. For example: `bq://projectId` or `bq://projectId.bqDatasetId` or `bq://projectId.bqDatasetId.bqTableId`.
        """
        return pulumi.get(self, "output_uri")

    @output_uri.setter
    def output_uri(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "output_uri", value)


if not MYPY:
    class AiEndpointPrivateServiceConnectConfigArgsDict(TypedDict):
        enable_private_service_connect: pulumi.Input[_builtins.bool]
        """
        Required. If true, expose the IndexEndpoint via private service connect.
        """
        enable_secure_private_service_connect: NotRequired[pulumi.Input[_builtins.bool]]
        """
        If set to true, enable secure private service connect with IAM authorization. Otherwise, private service connect will be done without authorization. Note latency will be slightly increased if authorization is enabled.
        """
        project_allowlists: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        A list of Projects from which the forwarding rule will target the service attachment.
        """
elif False:
    AiEndpointPrivateServiceConnectConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiEndpointPrivateServiceConnectConfigArgs:
    def __init__(__self__, *,
                 enable_private_service_connect: pulumi.Input[_builtins.bool],
                 enable_secure_private_service_connect: Optional[pulumi.Input[_builtins.bool]] = None,
                 project_allowlists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        :param pulumi.Input[_builtins.bool] enable_private_service_connect: Required. If true, expose the IndexEndpoint via private service connect.
        :param pulumi.Input[_builtins.bool] enable_secure_private_service_connect: If set to true, enable secure private service connect with IAM authorization. Otherwise, private service connect will be done without authorization. Note latency will be slightly increased if authorization is enabled.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] project_allowlists: A list of Projects from which the forwarding rule will target the service attachment.
        """
        pulumi.set(__self__, "enable_private_service_connect", enable_private_service_connect)
        if enable_secure_private_service_connect is not None:
            pulumi.set(__self__, "enable_secure_private_service_connect", enable_secure_private_service_connect)
        if project_allowlists is not None:
            pulumi.set(__self__, "project_allowlists", project_allowlists)

    @_builtins.property
    @pulumi.getter(name="enablePrivateServiceConnect")
    def enable_private_service_connect(self) -> pulumi.Input[_builtins.bool]:
        """
        Required. If true, expose the IndexEndpoint via private service connect.
        """
        return pulumi.get(self, "enable_private_service_connect")

    @enable_private_service_connect.setter
    def enable_private_service_connect(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "enable_private_service_connect", value)

    @_builtins.property
    @pulumi.getter(name="enableSecurePrivateServiceConnect")
    def enable_secure_private_service_connect(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If set to true, enable secure private service connect with IAM authorization. Otherwise, private service connect will be done without authorization. Note latency will be slightly increased if authorization is enabled.
        """
        return pulumi.get(self, "enable_secure_private_service_connect")

    @enable_secure_private_service_connect.setter
    def enable_secure_private_service_connect(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enable_secure_private_service_connect", value)

    @_builtins.property
    @pulumi.getter(name="projectAllowlists")
    def project_allowlists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        A list of Projects from which the forwarding rule will target the service attachment.
        """
        return pulumi.get(self, "project_allowlists")

    @project_allowlists.setter
    def project_allowlists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "project_allowlists", value)


if not MYPY:
    class AiEndpointWithModelGardenDeploymentDeployConfigArgsDict(TypedDict):
        dedicated_resources: NotRequired[pulumi.Input['AiEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesArgsDict']]
        """
        A description of resources that are dedicated to a DeployedModel or
        DeployedIndex, and that need a higher degree of manual configuration.
        Structure is documented below.
        """
        fast_tryout_enabled: NotRequired[pulumi.Input[_builtins.bool]]
        """
        If true, enable the QMT fast tryout feature for this model if possible.
        """
        system_labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]
        """
        System labels for Model Garden deployments.
        These labels are managed by Google and for tracking purposes only.
        """
elif False:
    AiEndpointWithModelGardenDeploymentDeployConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiEndpointWithModelGardenDeploymentDeployConfigArgs:
    def __init__(__self__, *,
                 dedicated_resources: Optional[pulumi.Input['AiEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesArgs']] = None,
                 fast_tryout_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 system_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None):
        """
        :param pulumi.Input['AiEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesArgs'] dedicated_resources: A description of resources that are dedicated to a DeployedModel or
               DeployedIndex, and that need a higher degree of manual configuration.
               Structure is documented below.
        :param pulumi.Input[_builtins.bool] fast_tryout_enabled: If true, enable the QMT fast tryout feature for this model if possible.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] system_labels: System labels for Model Garden deployments.
               These labels are managed by Google and for tracking purposes only.
        """
        if dedicated_resources is not None:
            pulumi.set(__self__, "dedicated_resources", dedicated_resources)
        if fast_tryout_enabled is not None:
            pulumi.set(__self__, "fast_tryout_enabled", fast_tryout_enabled)
        if system_labels is not None:
            pulumi.set(__self__, "system_labels", system_labels)

    @_builtins.property
    @pulumi.getter(name="dedicatedResources")
    def dedicated_resources(self) -> Optional[pulumi.Input['AiEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesArgs']]:
        """
        A description of resources that are dedicated to a DeployedModel or
        DeployedIndex, and that need a higher degree of manual configuration.
        Structure is documented below.
        """
        return pulumi.get(self, "dedicated_resources")

    @dedicated_resources.setter
    def dedicated_resources(self, value: Optional[pulumi.Input['AiEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesArgs']]):
        pulumi.set(self, "dedicated_resources", value)

    @_builtins.property
    @pulumi.getter(name="fastTryoutEnabled")
    def fast_tryout_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If true, enable the QMT fast tryout feature for this model if possible.
        """
        return pulumi.get(self, "fast_tryout_enabled")

    @fast_tryout_enabled.setter
    def fast_tryout_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "fast_tryout_enabled", value)

    @_builtins.property
    @pulumi.getter(name="systemLabels")
    def system_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        System labels for Model Garden deployments.
        These labels are managed by Google and for tracking purposes only.
        """
        return pulumi.get(self, "system_labels")

    @system_labels.setter
    def system_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "system_labels", value)


if not MYPY:
    class AiEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesArgsDict(TypedDict):
        machine_spec: pulumi.Input['AiEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesMachineSpecArgsDict']
        """
        Specification of a single machine.
        Structure is documented below.
        """
        min_replica_count: pulumi.Input[_builtins.int]
        """
        The minimum number of machine replicas that will be always deployed on.
        This value must be greater than or equal to 1.
        If traffic increases, it may dynamically be deployed onto more replicas,
        and as traffic decreases, some of these extra replicas may be freed.
        """
        autoscaling_metric_specs: NotRequired[pulumi.Input[Sequence[pulumi.Input['AiEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesAutoscalingMetricSpecArgsDict']]]]
        """
        The metric specifications that overrides a resource
        utilization metric (CPU utilization, accelerator's duty cycle, and so on)
        target value (default to 60 if not set). At most one entry is allowed per
        metric.
        If machine_spec.accelerator_count is
        above 0, the autoscaling will be based on both CPU utilization and
        accelerator's duty cycle metrics and scale up when either metrics exceeds
        its target value while scale down if both metrics are under their target
        value. The default target value is 60 for both metrics.
        If machine_spec.accelerator_count is
        0, the autoscaling will be based on CPU utilization metric only with
        default target value 60 if not explicitly set.
        For example, in the case of Online Prediction, if you want to override
        target CPU utilization to 80, you should set
        autoscaling_metric_specs.metric_name
        to `aiplatform.googleapis.com/prediction/online/cpu/utilization` and
        autoscaling_metric_specs.target to `80`.
        Structure is documented below.
        """
        max_replica_count: NotRequired[pulumi.Input[_builtins.int]]
        """
        The maximum number of replicas that may be deployed on when the traffic
        against it increases. If the requested value is too large, the deployment
        will error, but if deployment succeeds then the ability to scale to that
        many replicas is guaranteed (barring service outages). If traffic increases
        beyond what its replicas at maximum may handle, a portion of the traffic
        will be dropped. If this value is not provided, will use
        min_replica_count as the default value.
        The value of this field impacts the charge against Vertex CPU and GPU
        quotas. Specifically, you will be charged for (max_replica_count *
        number of cores in the selected machine type) and (max_replica_count *
        number of GPUs per replica in the selected machine type).
        """
        required_replica_count: NotRequired[pulumi.Input[_builtins.int]]
        """
        Number of required available replicas for the deployment to succeed.
        This field is only needed when partial deployment/mutation is
        desired. If set, the deploy/mutate operation will succeed once
        available_replica_count reaches required_replica_count, and the rest of
        the replicas will be retried. If not set, the default
        required_replica_count will be min_replica_count.
        """
        spot: NotRequired[pulumi.Input[_builtins.bool]]
        """
        If true, schedule the deployment workload on [spot
        VMs](https://cloud.google.com/kubernetes-engine/docs/concepts/spot-vms).
        """
elif False:
    AiEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesArgs:
    def __init__(__self__, *,
                 machine_spec: pulumi.Input['AiEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesMachineSpecArgs'],
                 min_replica_count: pulumi.Input[_builtins.int],
                 autoscaling_metric_specs: Optional[pulumi.Input[Sequence[pulumi.Input['AiEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesAutoscalingMetricSpecArgs']]]] = None,
                 max_replica_count: Optional[pulumi.Input[_builtins.int]] = None,
                 required_replica_count: Optional[pulumi.Input[_builtins.int]] = None,
                 spot: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input['AiEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesMachineSpecArgs'] machine_spec: Specification of a single machine.
               Structure is documented below.
        :param pulumi.Input[_builtins.int] min_replica_count: The minimum number of machine replicas that will be always deployed on.
               This value must be greater than or equal to 1.
               If traffic increases, it may dynamically be deployed onto more replicas,
               and as traffic decreases, some of these extra replicas may be freed.
        :param pulumi.Input[Sequence[pulumi.Input['AiEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesAutoscalingMetricSpecArgs']]] autoscaling_metric_specs: The metric specifications that overrides a resource
               utilization metric (CPU utilization, accelerator's duty cycle, and so on)
               target value (default to 60 if not set). At most one entry is allowed per
               metric.
               If machine_spec.accelerator_count is
               above 0, the autoscaling will be based on both CPU utilization and
               accelerator's duty cycle metrics and scale up when either metrics exceeds
               its target value while scale down if both metrics are under their target
               value. The default target value is 60 for both metrics.
               If machine_spec.accelerator_count is
               0, the autoscaling will be based on CPU utilization metric only with
               default target value 60 if not explicitly set.
               For example, in the case of Online Prediction, if you want to override
               target CPU utilization to 80, you should set
               autoscaling_metric_specs.metric_name
               to `aiplatform.googleapis.com/prediction/online/cpu/utilization` and
               autoscaling_metric_specs.target to `80`.
               Structure is documented below.
        :param pulumi.Input[_builtins.int] max_replica_count: The maximum number of replicas that may be deployed on when the traffic
               against it increases. If the requested value is too large, the deployment
               will error, but if deployment succeeds then the ability to scale to that
               many replicas is guaranteed (barring service outages). If traffic increases
               beyond what its replicas at maximum may handle, a portion of the traffic
               will be dropped. If this value is not provided, will use
               min_replica_count as the default value.
               The value of this field impacts the charge against Vertex CPU and GPU
               quotas. Specifically, you will be charged for (max_replica_count *
               number of cores in the selected machine type) and (max_replica_count *
               number of GPUs per replica in the selected machine type).
        :param pulumi.Input[_builtins.int] required_replica_count: Number of required available replicas for the deployment to succeed.
               This field is only needed when partial deployment/mutation is
               desired. If set, the deploy/mutate operation will succeed once
               available_replica_count reaches required_replica_count, and the rest of
               the replicas will be retried. If not set, the default
               required_replica_count will be min_replica_count.
        :param pulumi.Input[_builtins.bool] spot: If true, schedule the deployment workload on [spot
               VMs](https://cloud.google.com/kubernetes-engine/docs/concepts/spot-vms).
        """
        pulumi.set(__self__, "machine_spec", machine_spec)
        pulumi.set(__self__, "min_replica_count", min_replica_count)
        if autoscaling_metric_specs is not None:
            pulumi.set(__self__, "autoscaling_metric_specs", autoscaling_metric_specs)
        if max_replica_count is not None:
            pulumi.set(__self__, "max_replica_count", max_replica_count)
        if required_replica_count is not None:
            pulumi.set(__self__, "required_replica_count", required_replica_count)
        if spot is not None:
            pulumi.set(__self__, "spot", spot)

    @_builtins.property
    @pulumi.getter(name="machineSpec")
    def machine_spec(self) -> pulumi.Input['AiEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesMachineSpecArgs']:
        """
        Specification of a single machine.
        Structure is documented below.
        """
        return pulumi.get(self, "machine_spec")

    @machine_spec.setter
    def machine_spec(self, value: pulumi.Input['AiEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesMachineSpecArgs']):
        pulumi.set(self, "machine_spec", value)

    @_builtins.property
    @pulumi.getter(name="minReplicaCount")
    def min_replica_count(self) -> pulumi.Input[_builtins.int]:
        """
        The minimum number of machine replicas that will be always deployed on.
        This value must be greater than or equal to 1.
        If traffic increases, it may dynamically be deployed onto more replicas,
        and as traffic decreases, some of these extra replicas may be freed.
        """
        return pulumi.get(self, "min_replica_count")

    @min_replica_count.setter
    def min_replica_count(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "min_replica_count", value)

    @_builtins.property
    @pulumi.getter(name="autoscalingMetricSpecs")
    def autoscaling_metric_specs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AiEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesAutoscalingMetricSpecArgs']]]]:
        """
        The metric specifications that overrides a resource
        utilization metric (CPU utilization, accelerator's duty cycle, and so on)
        target value (default to 60 if not set). At most one entry is allowed per
        metric.
        If machine_spec.accelerator_count is
        above 0, the autoscaling will be based on both CPU utilization and
        accelerator's duty cycle metrics and scale up when either metrics exceeds
        its target value while scale down if both metrics are under their target
        value. The default target value is 60 for both metrics.
        If machine_spec.accelerator_count is
        0, the autoscaling will be based on CPU utilization metric only with
        default target value 60 if not explicitly set.
        For example, in the case of Online Prediction, if you want to override
        target CPU utilization to 80, you should set
        autoscaling_metric_specs.metric_name
        to `aiplatform.googleapis.com/prediction/online/cpu/utilization` and
        autoscaling_metric_specs.target to `80`.
        Structure is documented below.
        """
        return pulumi.get(self, "autoscaling_metric_specs")

    @autoscaling_metric_specs.setter
    def autoscaling_metric_specs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AiEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesAutoscalingMetricSpecArgs']]]]):
        pulumi.set(self, "autoscaling_metric_specs", value)

    @_builtins.property
    @pulumi.getter(name="maxReplicaCount")
    def max_replica_count(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The maximum number of replicas that may be deployed on when the traffic
        against it increases. If the requested value is too large, the deployment
        will error, but if deployment succeeds then the ability to scale to that
        many replicas is guaranteed (barring service outages). If traffic increases
        beyond what its replicas at maximum may handle, a portion of the traffic
        will be dropped. If this value is not provided, will use
        min_replica_count as the default value.
        The value of this field impacts the charge against Vertex CPU and GPU
        quotas. Specifically, you will be charged for (max_replica_count *
        number of cores in the selected machine type) and (max_replica_count *
        number of GPUs per replica in the selected machine type).
        """
        return pulumi.get(self, "max_replica_count")

    @max_replica_count.setter
    def max_replica_count(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "max_replica_count", value)

    @_builtins.property
    @pulumi.getter(name="requiredReplicaCount")
    def required_replica_count(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Number of required available replicas for the deployment to succeed.
        This field is only needed when partial deployment/mutation is
        desired. If set, the deploy/mutate operation will succeed once
        available_replica_count reaches required_replica_count, and the rest of
        the replicas will be retried. If not set, the default
        required_replica_count will be min_replica_count.
        """
        return pulumi.get(self, "required_replica_count")

    @required_replica_count.setter
    def required_replica_count(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "required_replica_count", value)

    @_builtins.property
    @pulumi.getter
    def spot(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If true, schedule the deployment workload on [spot
        VMs](https://cloud.google.com/kubernetes-engine/docs/concepts/spot-vms).
        """
        return pulumi.get(self, "spot")

    @spot.setter
    def spot(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "spot", value)


if not MYPY:
    class AiEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesAutoscalingMetricSpecArgsDict(TypedDict):
        metric_name: pulumi.Input[_builtins.str]
        """
        The resource metric name.
        Supported metrics:
        * For Online Prediction:
        * `aiplatform.googleapis.com/prediction/online/accelerator/duty_cycle`
        * `aiplatform.googleapis.com/prediction/online/cpu/utilization`
        """
        target: NotRequired[pulumi.Input[_builtins.int]]
        """
        The target resource utilization in percentage (1% - 100%) for the given
        metric; once the real usage deviates from the target by a certain
        percentage, the machine replicas change. The default value is 60
        (representing 60%) if not provided.
        """
elif False:
    AiEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesAutoscalingMetricSpecArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesAutoscalingMetricSpecArgs:
    def __init__(__self__, *,
                 metric_name: pulumi.Input[_builtins.str],
                 target: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] metric_name: The resource metric name.
               Supported metrics:
               * For Online Prediction:
               * `aiplatform.googleapis.com/prediction/online/accelerator/duty_cycle`
               * `aiplatform.googleapis.com/prediction/online/cpu/utilization`
        :param pulumi.Input[_builtins.int] target: The target resource utilization in percentage (1% - 100%) for the given
               metric; once the real usage deviates from the target by a certain
               percentage, the machine replicas change. The default value is 60
               (representing 60%) if not provided.
        """
        pulumi.set(__self__, "metric_name", metric_name)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @_builtins.property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> pulumi.Input[_builtins.str]:
        """
        The resource metric name.
        Supported metrics:
        * For Online Prediction:
        * `aiplatform.googleapis.com/prediction/online/accelerator/duty_cycle`
        * `aiplatform.googleapis.com/prediction/online/cpu/utilization`
        """
        return pulumi.get(self, "metric_name")

    @metric_name.setter
    def metric_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "metric_name", value)

    @_builtins.property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The target resource utilization in percentage (1% - 100%) for the given
        metric; once the real usage deviates from the target by a certain
        percentage, the machine replicas change. The default value is 60
        (representing 60%) if not provided.
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "target", value)


if not MYPY:
    class AiEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesMachineSpecArgsDict(TypedDict):
        accelerator_count: NotRequired[pulumi.Input[_builtins.int]]
        """
        The number of accelerators to attach to the machine.
        """
        accelerator_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Possible values:
        ACCELERATOR_TYPE_UNSPECIFIED
        NVIDIA_TESLA_K80
        NVIDIA_TESLA_P100
        NVIDIA_TESLA_V100
        NVIDIA_TESLA_P4
        NVIDIA_TESLA_T4
        NVIDIA_TESLA_A100
        NVIDIA_A100_80GB
        NVIDIA_L4
        NVIDIA_H100_80GB
        NVIDIA_H100_MEGA_80GB
        NVIDIA_H200_141GB
        NVIDIA_B200
        TPU_V2
        TPU_V3
        TPU_V4_POD
        TPU_V5_LITEPOD
        """
        machine_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        The type of the machine.
        See the [list of machine types supported for
        prediction](https://cloud.google.com/vertex-ai/docs/predictions/configure-compute#machine-types)
        See the [list of machine types supported for custom
        training](https://cloud.google.com/vertex-ai/docs/training/configure-compute#machine-types).
        For DeployedModel this field is optional, and the default
        value is `n1-standard-2`. For BatchPredictionJob or as part of
        WorkerPoolSpec this field is required.
        """
        multihost_gpu_node_count: NotRequired[pulumi.Input[_builtins.int]]
        """
        The number of nodes per replica for multihost GPU deployments.
        """
        reservation_affinity: NotRequired[pulumi.Input['AiEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesMachineSpecReservationAffinityArgsDict']]
        """
        A ReservationAffinity can be used to configure a Vertex AI resource (e.g., a
        DeployedModel) to draw its Compute Engine resources from a Shared
        Reservation, or exclusively from on-demand capacity.
        Structure is documented below.
        """
        tpu_topology: NotRequired[pulumi.Input[_builtins.str]]
        """
        The topology of the TPUs. Corresponds to the TPU topologies available from
        GKE. (Example: tpu_topology: "2x2x1").
        """
elif False:
    AiEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesMachineSpecArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesMachineSpecArgs:
    def __init__(__self__, *,
                 accelerator_count: Optional[pulumi.Input[_builtins.int]] = None,
                 accelerator_type: Optional[pulumi.Input[_builtins.str]] = None,
                 machine_type: Optional[pulumi.Input[_builtins.str]] = None,
                 multihost_gpu_node_count: Optional[pulumi.Input[_builtins.int]] = None,
                 reservation_affinity: Optional[pulumi.Input['AiEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesMachineSpecReservationAffinityArgs']] = None,
                 tpu_topology: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.int] accelerator_count: The number of accelerators to attach to the machine.
        :param pulumi.Input[_builtins.str] accelerator_type: Possible values:
               ACCELERATOR_TYPE_UNSPECIFIED
               NVIDIA_TESLA_K80
               NVIDIA_TESLA_P100
               NVIDIA_TESLA_V100
               NVIDIA_TESLA_P4
               NVIDIA_TESLA_T4
               NVIDIA_TESLA_A100
               NVIDIA_A100_80GB
               NVIDIA_L4
               NVIDIA_H100_80GB
               NVIDIA_H100_MEGA_80GB
               NVIDIA_H200_141GB
               NVIDIA_B200
               TPU_V2
               TPU_V3
               TPU_V4_POD
               TPU_V5_LITEPOD
        :param pulumi.Input[_builtins.str] machine_type: The type of the machine.
               See the [list of machine types supported for
               prediction](https://cloud.google.com/vertex-ai/docs/predictions/configure-compute#machine-types)
               See the [list of machine types supported for custom
               training](https://cloud.google.com/vertex-ai/docs/training/configure-compute#machine-types).
               For DeployedModel this field is optional, and the default
               value is `n1-standard-2`. For BatchPredictionJob or as part of
               WorkerPoolSpec this field is required.
        :param pulumi.Input[_builtins.int] multihost_gpu_node_count: The number of nodes per replica for multihost GPU deployments.
        :param pulumi.Input['AiEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesMachineSpecReservationAffinityArgs'] reservation_affinity: A ReservationAffinity can be used to configure a Vertex AI resource (e.g., a
               DeployedModel) to draw its Compute Engine resources from a Shared
               Reservation, or exclusively from on-demand capacity.
               Structure is documented below.
        :param pulumi.Input[_builtins.str] tpu_topology: The topology of the TPUs. Corresponds to the TPU topologies available from
               GKE. (Example: tpu_topology: "2x2x1").
        """
        if accelerator_count is not None:
            pulumi.set(__self__, "accelerator_count", accelerator_count)
        if accelerator_type is not None:
            pulumi.set(__self__, "accelerator_type", accelerator_type)
        if machine_type is not None:
            pulumi.set(__self__, "machine_type", machine_type)
        if multihost_gpu_node_count is not None:
            pulumi.set(__self__, "multihost_gpu_node_count", multihost_gpu_node_count)
        if reservation_affinity is not None:
            pulumi.set(__self__, "reservation_affinity", reservation_affinity)
        if tpu_topology is not None:
            pulumi.set(__self__, "tpu_topology", tpu_topology)

    @_builtins.property
    @pulumi.getter(name="acceleratorCount")
    def accelerator_count(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The number of accelerators to attach to the machine.
        """
        return pulumi.get(self, "accelerator_count")

    @accelerator_count.setter
    def accelerator_count(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "accelerator_count", value)

    @_builtins.property
    @pulumi.getter(name="acceleratorType")
    def accelerator_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Possible values:
        ACCELERATOR_TYPE_UNSPECIFIED
        NVIDIA_TESLA_K80
        NVIDIA_TESLA_P100
        NVIDIA_TESLA_V100
        NVIDIA_TESLA_P4
        NVIDIA_TESLA_T4
        NVIDIA_TESLA_A100
        NVIDIA_A100_80GB
        NVIDIA_L4
        NVIDIA_H100_80GB
        NVIDIA_H100_MEGA_80GB
        NVIDIA_H200_141GB
        NVIDIA_B200
        TPU_V2
        TPU_V3
        TPU_V4_POD
        TPU_V5_LITEPOD
        """
        return pulumi.get(self, "accelerator_type")

    @accelerator_type.setter
    def accelerator_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "accelerator_type", value)

    @_builtins.property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of the machine.
        See the [list of machine types supported for
        prediction](https://cloud.google.com/vertex-ai/docs/predictions/configure-compute#machine-types)
        See the [list of machine types supported for custom
        training](https://cloud.google.com/vertex-ai/docs/training/configure-compute#machine-types).
        For DeployedModel this field is optional, and the default
        value is `n1-standard-2`. For BatchPredictionJob or as part of
        WorkerPoolSpec this field is required.
        """
        return pulumi.get(self, "machine_type")

    @machine_type.setter
    def machine_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "machine_type", value)

    @_builtins.property
    @pulumi.getter(name="multihostGpuNodeCount")
    def multihost_gpu_node_count(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The number of nodes per replica for multihost GPU deployments.
        """
        return pulumi.get(self, "multihost_gpu_node_count")

    @multihost_gpu_node_count.setter
    def multihost_gpu_node_count(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "multihost_gpu_node_count", value)

    @_builtins.property
    @pulumi.getter(name="reservationAffinity")
    def reservation_affinity(self) -> Optional[pulumi.Input['AiEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesMachineSpecReservationAffinityArgs']]:
        """
        A ReservationAffinity can be used to configure a Vertex AI resource (e.g., a
        DeployedModel) to draw its Compute Engine resources from a Shared
        Reservation, or exclusively from on-demand capacity.
        Structure is documented below.
        """
        return pulumi.get(self, "reservation_affinity")

    @reservation_affinity.setter
    def reservation_affinity(self, value: Optional[pulumi.Input['AiEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesMachineSpecReservationAffinityArgs']]):
        pulumi.set(self, "reservation_affinity", value)

    @_builtins.property
    @pulumi.getter(name="tpuTopology")
    def tpu_topology(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The topology of the TPUs. Corresponds to the TPU topologies available from
        GKE. (Example: tpu_topology: "2x2x1").
        """
        return pulumi.get(self, "tpu_topology")

    @tpu_topology.setter
    def tpu_topology(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tpu_topology", value)


if not MYPY:
    class AiEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesMachineSpecReservationAffinityArgsDict(TypedDict):
        reservation_affinity_type: pulumi.Input[_builtins.str]
        """
        Specifies the reservation affinity type.
        Possible values:
        TYPE_UNSPECIFIED
        NO_RESERVATION
        ANY_RESERVATION
        SPECIFIC_RESERVATION
        """
        key: NotRequired[pulumi.Input[_builtins.str]]
        """
        Corresponds to the label key of a reservation resource. To target a
        SPECIFIC_RESERVATION by name, use `compute.googleapis.com/reservation-name`
        as the key and specify the name of your reservation as its value.
        """
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Corresponds to the label values of a reservation resource. This must be the
        full resource name of the reservation or reservation block.
        """
elif False:
    AiEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesMachineSpecReservationAffinityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiEndpointWithModelGardenDeploymentDeployConfigDedicatedResourcesMachineSpecReservationAffinityArgs:
    def __init__(__self__, *,
                 reservation_affinity_type: pulumi.Input[_builtins.str],
                 key: Optional[pulumi.Input[_builtins.str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        :param pulumi.Input[_builtins.str] reservation_affinity_type: Specifies the reservation affinity type.
               Possible values:
               TYPE_UNSPECIFIED
               NO_RESERVATION
               ANY_RESERVATION
               SPECIFIC_RESERVATION
        :param pulumi.Input[_builtins.str] key: Corresponds to the label key of a reservation resource. To target a
               SPECIFIC_RESERVATION by name, use `compute.googleapis.com/reservation-name`
               as the key and specify the name of your reservation as its value.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] values: Corresponds to the label values of a reservation resource. This must be the
               full resource name of the reservation or reservation block.
        """
        pulumi.set(__self__, "reservation_affinity_type", reservation_affinity_type)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter(name="reservationAffinityType")
    def reservation_affinity_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the reservation affinity type.
        Possible values:
        TYPE_UNSPECIFIED
        NO_RESERVATION
        ANY_RESERVATION
        SPECIFIC_RESERVATION
        """
        return pulumi.get(self, "reservation_affinity_type")

    @reservation_affinity_type.setter
    def reservation_affinity_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "reservation_affinity_type", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Corresponds to the label key of a reservation resource. To target a
        SPECIFIC_RESERVATION by name, use `compute.googleapis.com/reservation-name`
        as the key and specify the name of your reservation as its value.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "key", value)

    @_builtins.property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Corresponds to the label values of a reservation resource. This must be the
        full resource name of the reservation or reservation block.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class AiEndpointWithModelGardenDeploymentEndpointConfigArgsDict(TypedDict):
        dedicated_endpoint_enabled: NotRequired[pulumi.Input[_builtins.bool]]
        """
        If true, the endpoint will be exposed through a dedicated
        DNS [Endpoint.dedicated_endpoint_dns]. Your request to the dedicated DNS
        will be isolated from other users' traffic and will have better
        performance and reliability. Note: Once you enabled dedicated endpoint,
        you won't be able to send request to the shared DNS
        {region}-aiplatform.googleapis.com. The limitations will be removed soon.
        """
        endpoint_display_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The user-specified display name of the endpoint. If not set, a
        default name will be used.
        """
elif False:
    AiEndpointWithModelGardenDeploymentEndpointConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiEndpointWithModelGardenDeploymentEndpointConfigArgs:
    def __init__(__self__, *,
                 dedicated_endpoint_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 endpoint_display_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] dedicated_endpoint_enabled: If true, the endpoint will be exposed through a dedicated
               DNS [Endpoint.dedicated_endpoint_dns]. Your request to the dedicated DNS
               will be isolated from other users' traffic and will have better
               performance and reliability. Note: Once you enabled dedicated endpoint,
               you won't be able to send request to the shared DNS
               {region}-aiplatform.googleapis.com. The limitations will be removed soon.
        :param pulumi.Input[_builtins.str] endpoint_display_name: The user-specified display name of the endpoint. If not set, a
               default name will be used.
        """
        if dedicated_endpoint_enabled is not None:
            pulumi.set(__self__, "dedicated_endpoint_enabled", dedicated_endpoint_enabled)
        if endpoint_display_name is not None:
            pulumi.set(__self__, "endpoint_display_name", endpoint_display_name)

    @_builtins.property
    @pulumi.getter(name="dedicatedEndpointEnabled")
    def dedicated_endpoint_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If true, the endpoint will be exposed through a dedicated
        DNS [Endpoint.dedicated_endpoint_dns]. Your request to the dedicated DNS
        will be isolated from other users' traffic and will have better
        performance and reliability. Note: Once you enabled dedicated endpoint,
        you won't be able to send request to the shared DNS
        {region}-aiplatform.googleapis.com. The limitations will be removed soon.
        """
        return pulumi.get(self, "dedicated_endpoint_enabled")

    @dedicated_endpoint_enabled.setter
    def dedicated_endpoint_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "dedicated_endpoint_enabled", value)

    @_builtins.property
    @pulumi.getter(name="endpointDisplayName")
    def endpoint_display_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The user-specified display name of the endpoint. If not set, a
        default name will be used.
        """
        return pulumi.get(self, "endpoint_display_name")

    @endpoint_display_name.setter
    def endpoint_display_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "endpoint_display_name", value)


if not MYPY:
    class AiEndpointWithModelGardenDeploymentModelConfigArgsDict(TypedDict):
        accept_eula: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Whether the user accepts the End User License Agreement (EULA)
        for the model.
        """
        container_spec: NotRequired[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecArgsDict']]
        """
        Specification of a container for serving predictions. Some fields in this
        message correspond to fields in the [Kubernetes Container v1 core
        specification](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#container-v1-core).
        Structure is documented below.
        """
        hugging_face_access_token: NotRequired[pulumi.Input[_builtins.str]]
        """
        The Hugging Face read access token used to access the model
        artifacts of gated models.
        """
        hugging_face_cache_enabled: NotRequired[pulumi.Input[_builtins.bool]]
        """
        If true, the model will deploy with a cached version instead of directly
        downloading the model artifacts from Hugging Face. This is suitable for
        VPC-SC users with limited internet access.
        """
        model_display_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The user-specified display name of the uploaded model. If not
        set, a default name will be used.
        """
elif False:
    AiEndpointWithModelGardenDeploymentModelConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiEndpointWithModelGardenDeploymentModelConfigArgs:
    def __init__(__self__, *,
                 accept_eula: Optional[pulumi.Input[_builtins.bool]] = None,
                 container_spec: Optional[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecArgs']] = None,
                 hugging_face_access_token: Optional[pulumi.Input[_builtins.str]] = None,
                 hugging_face_cache_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 model_display_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.bool] accept_eula: Whether the user accepts the End User License Agreement (EULA)
               for the model.
        :param pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecArgs'] container_spec: Specification of a container for serving predictions. Some fields in this
               message correspond to fields in the [Kubernetes Container v1 core
               specification](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#container-v1-core).
               Structure is documented below.
        :param pulumi.Input[_builtins.str] hugging_face_access_token: The Hugging Face read access token used to access the model
               artifacts of gated models.
        :param pulumi.Input[_builtins.bool] hugging_face_cache_enabled: If true, the model will deploy with a cached version instead of directly
               downloading the model artifacts from Hugging Face. This is suitable for
               VPC-SC users with limited internet access.
        :param pulumi.Input[_builtins.str] model_display_name: The user-specified display name of the uploaded model. If not
               set, a default name will be used.
        """
        if accept_eula is not None:
            pulumi.set(__self__, "accept_eula", accept_eula)
        if container_spec is not None:
            pulumi.set(__self__, "container_spec", container_spec)
        if hugging_face_access_token is not None:
            pulumi.set(__self__, "hugging_face_access_token", hugging_face_access_token)
        if hugging_face_cache_enabled is not None:
            pulumi.set(__self__, "hugging_face_cache_enabled", hugging_face_cache_enabled)
        if model_display_name is not None:
            pulumi.set(__self__, "model_display_name", model_display_name)

    @_builtins.property
    @pulumi.getter(name="acceptEula")
    def accept_eula(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether the user accepts the End User License Agreement (EULA)
        for the model.
        """
        return pulumi.get(self, "accept_eula")

    @accept_eula.setter
    def accept_eula(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "accept_eula", value)

    @_builtins.property
    @pulumi.getter(name="containerSpec")
    def container_spec(self) -> Optional[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecArgs']]:
        """
        Specification of a container for serving predictions. Some fields in this
        message correspond to fields in the [Kubernetes Container v1 core
        specification](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#container-v1-core).
        Structure is documented below.
        """
        return pulumi.get(self, "container_spec")

    @container_spec.setter
    def container_spec(self, value: Optional[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecArgs']]):
        pulumi.set(self, "container_spec", value)

    @_builtins.property
    @pulumi.getter(name="huggingFaceAccessToken")
    def hugging_face_access_token(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Hugging Face read access token used to access the model
        artifacts of gated models.
        """
        return pulumi.get(self, "hugging_face_access_token")

    @hugging_face_access_token.setter
    def hugging_face_access_token(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hugging_face_access_token", value)

    @_builtins.property
    @pulumi.getter(name="huggingFaceCacheEnabled")
    def hugging_face_cache_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If true, the model will deploy with a cached version instead of directly
        downloading the model artifacts from Hugging Face. This is suitable for
        VPC-SC users with limited internet access.
        """
        return pulumi.get(self, "hugging_face_cache_enabled")

    @hugging_face_cache_enabled.setter
    def hugging_face_cache_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "hugging_face_cache_enabled", value)

    @_builtins.property
    @pulumi.getter(name="modelDisplayName")
    def model_display_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The user-specified display name of the uploaded model. If not
        set, a default name will be used.
        """
        return pulumi.get(self, "model_display_name")

    @model_display_name.setter
    def model_display_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "model_display_name", value)


if not MYPY:
    class AiEndpointWithModelGardenDeploymentModelConfigContainerSpecArgsDict(TypedDict):
        image_uri: pulumi.Input[_builtins.str]
        """
        URI of the Docker image to be used as the custom container for serving
        predictions. This URI must identify an image in Artifact Registry or
        Container Registry. Learn more about the [container publishing
        requirements](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#publishing),
        including permissions requirements for the Vertex AI Service Agent.
        The container image is ingested upon ModelService.UploadModel, stored
        internally, and this original path is afterwards not used.
        To learn about the requirements for the Docker image itself, see
        [Custom container
        requirements](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#).
        You can use the URI to one of Vertex AI's [pre-built container images for
        prediction](https://cloud.google.com/vertex-ai/docs/predictions/pre-built-containers)
        in this field.
        """
        args: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Specifies arguments for the command that runs when the container starts.
        This overrides the container's
        [`CMD`](https://docs.docker.com/engine/reference/builder/#cmd). Specify
        this field as an array of executable and arguments, similar to a Docker
        `CMD`'s "default parameters" form.
        If you don't specify this field but do specify the
        command field, then the command from the
        `command` field runs without any additional arguments. See the
        [Kubernetes documentation about how the
        `command` and `args` fields interact with a container's `ENTRYPOINT` and
        `CMD`](https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#notes).
        If you don't specify this field and don't specify the `command` field,
        then the container's
        [`ENTRYPOINT`](https://docs.docker.com/engine/reference/builder/#cmd) and
        `CMD` determine what runs based on their default behavior. See the Docker
        documentation about [how `CMD` and `ENTRYPOINT`
        interact](https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact).
        In this field, you can reference [environment variables
        set by Vertex
        AI](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#aip-variables)
        and environment variables set in the env field.
        You cannot reference environment variables set in the Docker image. In
        order for environment variables to be expanded, reference them by using the
        following syntax:$(VARIABLE_NAME)
        Note that this differs from Bash variable expansion, which does not use
        parentheses. If a variable cannot be resolved, the reference in the input
        string is used unchanged. To avoid variable expansion, you can escape this
        syntax with `$$`; for example:$$(VARIABLE_NAME)
        This field corresponds to the `args` field of the Kubernetes Containers
        [v1 core
        API](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#container-v1-core).
        """
        commands: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Specifies the command that runs when the container starts. This overrides
        the container's
        [ENTRYPOINT](https://docs.docker.com/engine/reference/builder/#entrypoint).
        Specify this field as an array of executable and arguments, similar to a
        Docker `ENTRYPOINT`'s "exec" form, not its "shell" form.
        If you do not specify this field, then the container's `ENTRYPOINT` runs,
        in conjunction with the args field or the
        container's [`CMD`](https://docs.docker.com/engine/reference/builder/#cmd),
        if either exists. If this field is not specified and the container does not
        have an `ENTRYPOINT`, then refer to the Docker documentation about [how
        `CMD` and `ENTRYPOINT`
        interact](https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact).
        If you specify this field, then you can also specify the `args` field to
        provide additional arguments for this command. However, if you specify this
        field, then the container's `CMD` is ignored. See the
        [Kubernetes documentation about how the
        `command` and `args` fields interact with a container's `ENTRYPOINT` and
        `CMD`](https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#notes).
        In this field, you can reference [environment variables set by Vertex
        AI](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#aip-variables)
        and environment variables set in the env field.
        You cannot reference environment variables set in the Docker image. In
        order for environment variables to be expanded, reference them by using the
        following syntax:$(VARIABLE_NAME)
        Note that this differs from Bash variable expansion, which does not use
        parentheses. If a variable cannot be resolved, the reference in the input
        string is used unchanged. To avoid variable expansion, you can escape this
        syntax with `$$`; for example:$$(VARIABLE_NAME)
        This field corresponds to the `command` field of the Kubernetes Containers
        [v1 core
        API](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#container-v1-core).
        """
        deployment_timeout: NotRequired[pulumi.Input[_builtins.str]]
        """
        Deployment timeout.
        Limit for deployment timeout is 2 hours.
        """
        envs: NotRequired[pulumi.Input[Sequence[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecEnvArgsDict']]]]
        """
        List of environment variables to set in the container. After the container
        starts running, code running in the container can read these environment
        variables.
        Additionally, the command and
        args fields can reference these variables. Later
        entries in this list can also reference earlier entries. For example, the
        following example sets the variable `VAR_2` to have the value `foo bar`:
        ```json
        [
        {
        "name": "VAR_1",
        "value": "foo"
        },
        {
        "name": "VAR_2",
        "value": "$(VAR_1) bar"
        }
        ]
        ```
        If you switch the order of the variables in the example, then the expansion
        does not occur.
        This field corresponds to the `env` field of the Kubernetes Containers
        [v1 core
        API](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#container-v1-core).
        Structure is documented below.
        """
        grpc_ports: NotRequired[pulumi.Input[Sequence[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecGrpcPortArgsDict']]]]
        """
        List of ports to expose from the container. Vertex AI sends gRPC
        prediction requests that it receives to the first port on this list. Vertex
        AI also sends liveness and health checks to this port.
        If you do not specify this field, gRPC requests to the container will be
        disabled.
        Vertex AI does not use ports other than the first one listed. This field
        corresponds to the `ports` field of the Kubernetes Containers v1 core API.
        Structure is documented below.
        """
        health_probe: NotRequired[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeArgsDict']]
        """
        Probe describes a health check to be performed against a container to
        determine whether it is alive or ready to receive traffic.
        Structure is documented below.
        """
        health_route: NotRequired[pulumi.Input[_builtins.str]]
        """
        HTTP path on the container to send health checks to. Vertex AI
        intermittently sends GET requests to this path on the container's IP
        address and port to check that the container is healthy. Read more about
        [health
        checks](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#health).
        For example, if you set this field to `/bar`, then Vertex AI
        intermittently sends a GET request to the `/bar` path on the port of your
        container specified by the first value of this `ModelContainerSpec`'s
        ports field.
        If you don't specify this field, it defaults to the following value when
        you deploy this Model to an Endpoint:/v1/endpoints/ENDPOINT/deployedModels/DEPLOYED_MODEL:predict
        The placeholders in this value are replaced as follows:
        * ENDPOINT: The last segment (following `endpoints/`)of the
        Endpoint.name][] field of the Endpoint where this Model has been
        deployed. (Vertex AI makes this value available to your container code
        as the [`AIP_ENDPOINT_ID` environment
        variable](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#aip-variables).)
        * DEPLOYED_MODEL: DeployedModel.id of the `DeployedModel`.
        (Vertex AI makes this value available to your container code as the
        [`AIP_DEPLOYED_MODEL_ID` environment
        variable](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#aip-variables).)
        """
        liveness_probe: NotRequired[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeArgsDict']]
        """
        Probe describes a health check to be performed against a container to
        determine whether it is alive or ready to receive traffic.
        Structure is documented below.
        """
        ports: NotRequired[pulumi.Input[Sequence[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecPortArgsDict']]]]
        """
        List of ports to expose from the container. Vertex AI sends any
        prediction requests that it receives to the first port on this list. Vertex
        AI also sends
        [liveness and health
        checks](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#liveness)
        to this port.
        If you do not specify this field, it defaults to following value:
        ```json
        [
        {
        "containerPort": 8080
        }
        ]
        ```
        Vertex AI does not use ports other than the first one listed. This field
        corresponds to the `ports` field of the Kubernetes Containers
        [v1 core
        API](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#container-v1-core).
        Structure is documented below.
        """
        predict_route: NotRequired[pulumi.Input[_builtins.str]]
        """
        HTTP path on the container to send prediction requests to. Vertex AI
        forwards requests sent using
        projects.locations.endpoints.predict to this
        path on the container's IP address and port. Vertex AI then returns the
        container's response in the API response.
        For example, if you set this field to `/foo`, then when Vertex AI
        receives a prediction request, it forwards the request body in a POST
        request to the `/foo` path on the port of your container specified by the
        first value of this `ModelContainerSpec`'s
        ports field.
        If you don't specify this field, it defaults to the following value when
        you deploy this Model to an Endpoint:/v1/endpoints/ENDPOINT/deployedModels/DEPLOYED_MODEL:predict
        The placeholders in this value are replaced as follows:
        * ENDPOINT: The last segment (following `endpoints/`)of the
        Endpoint.name][] field of the Endpoint where this Model has been
        deployed. (Vertex AI makes this value available to your container code
        as the [`AIP_ENDPOINT_ID` environment
        variable](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#aip-variables).)
        * DEPLOYED_MODEL: DeployedModel.id of the `DeployedModel`.
        (Vertex AI makes this value available to your container code
        as the [`AIP_DEPLOYED_MODEL_ID` environment
        variable](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#aip-variables).)
        """
        shared_memory_size_mb: NotRequired[pulumi.Input[_builtins.str]]
        """
        The amount of the VM memory to reserve as the shared memory for the model
        in megabytes.
        """
        startup_probe: NotRequired[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeArgsDict']]
        """
        Probe describes a health check to be performed against a container to
        determine whether it is alive or ready to receive traffic.
        Structure is documented below.
        """
elif False:
    AiEndpointWithModelGardenDeploymentModelConfigContainerSpecArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiEndpointWithModelGardenDeploymentModelConfigContainerSpecArgs:
    def __init__(__self__, *,
                 image_uri: pulumi.Input[_builtins.str],
                 args: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 commands: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 deployment_timeout: Optional[pulumi.Input[_builtins.str]] = None,
                 envs: Optional[pulumi.Input[Sequence[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecEnvArgs']]]] = None,
                 grpc_ports: Optional[pulumi.Input[Sequence[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecGrpcPortArgs']]]] = None,
                 health_probe: Optional[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeArgs']] = None,
                 health_route: Optional[pulumi.Input[_builtins.str]] = None,
                 liveness_probe: Optional[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeArgs']] = None,
                 ports: Optional[pulumi.Input[Sequence[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecPortArgs']]]] = None,
                 predict_route: Optional[pulumi.Input[_builtins.str]] = None,
                 shared_memory_size_mb: Optional[pulumi.Input[_builtins.str]] = None,
                 startup_probe: Optional[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeArgs']] = None):
        """
        :param pulumi.Input[_builtins.str] image_uri: URI of the Docker image to be used as the custom container for serving
               predictions. This URI must identify an image in Artifact Registry or
               Container Registry. Learn more about the [container publishing
               requirements](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#publishing),
               including permissions requirements for the Vertex AI Service Agent.
               The container image is ingested upon ModelService.UploadModel, stored
               internally, and this original path is afterwards not used.
               To learn about the requirements for the Docker image itself, see
               [Custom container
               requirements](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#).
               You can use the URI to one of Vertex AI's [pre-built container images for
               prediction](https://cloud.google.com/vertex-ai/docs/predictions/pre-built-containers)
               in this field.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] args: Specifies arguments for the command that runs when the container starts.
               This overrides the container's
               [`CMD`](https://docs.docker.com/engine/reference/builder/#cmd). Specify
               this field as an array of executable and arguments, similar to a Docker
               `CMD`'s "default parameters" form.
               If you don't specify this field but do specify the
               command field, then the command from the
               `command` field runs without any additional arguments. See the
               [Kubernetes documentation about how the
               `command` and `args` fields interact with a container's `ENTRYPOINT` and
               `CMD`](https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#notes).
               If you don't specify this field and don't specify the `command` field,
               then the container's
               [`ENTRYPOINT`](https://docs.docker.com/engine/reference/builder/#cmd) and
               `CMD` determine what runs based on their default behavior. See the Docker
               documentation about [how `CMD` and `ENTRYPOINT`
               interact](https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact).
               In this field, you can reference [environment variables
               set by Vertex
               AI](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#aip-variables)
               and environment variables set in the env field.
               You cannot reference environment variables set in the Docker image. In
               order for environment variables to be expanded, reference them by using the
               following syntax:$(VARIABLE_NAME)
               Note that this differs from Bash variable expansion, which does not use
               parentheses. If a variable cannot be resolved, the reference in the input
               string is used unchanged. To avoid variable expansion, you can escape this
               syntax with `$$`; for example:$$(VARIABLE_NAME)
               This field corresponds to the `args` field of the Kubernetes Containers
               [v1 core
               API](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#container-v1-core).
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] commands: Specifies the command that runs when the container starts. This overrides
               the container's
               [ENTRYPOINT](https://docs.docker.com/engine/reference/builder/#entrypoint).
               Specify this field as an array of executable and arguments, similar to a
               Docker `ENTRYPOINT`'s "exec" form, not its "shell" form.
               If you do not specify this field, then the container's `ENTRYPOINT` runs,
               in conjunction with the args field or the
               container's [`CMD`](https://docs.docker.com/engine/reference/builder/#cmd),
               if either exists. If this field is not specified and the container does not
               have an `ENTRYPOINT`, then refer to the Docker documentation about [how
               `CMD` and `ENTRYPOINT`
               interact](https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact).
               If you specify this field, then you can also specify the `args` field to
               provide additional arguments for this command. However, if you specify this
               field, then the container's `CMD` is ignored. See the
               [Kubernetes documentation about how the
               `command` and `args` fields interact with a container's `ENTRYPOINT` and
               `CMD`](https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#notes).
               In this field, you can reference [environment variables set by Vertex
               AI](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#aip-variables)
               and environment variables set in the env field.
               You cannot reference environment variables set in the Docker image. In
               order for environment variables to be expanded, reference them by using the
               following syntax:$(VARIABLE_NAME)
               Note that this differs from Bash variable expansion, which does not use
               parentheses. If a variable cannot be resolved, the reference in the input
               string is used unchanged. To avoid variable expansion, you can escape this
               syntax with `$$`; for example:$$(VARIABLE_NAME)
               This field corresponds to the `command` field of the Kubernetes Containers
               [v1 core
               API](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#container-v1-core).
        :param pulumi.Input[_builtins.str] deployment_timeout: Deployment timeout.
               Limit for deployment timeout is 2 hours.
        :param pulumi.Input[Sequence[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecEnvArgs']]] envs: List of environment variables to set in the container. After the container
               starts running, code running in the container can read these environment
               variables.
               Additionally, the command and
               args fields can reference these variables. Later
               entries in this list can also reference earlier entries. For example, the
               following example sets the variable `VAR_2` to have the value `foo bar`:
               ```json
               [
               {
               "name": "VAR_1",
               "value": "foo"
               },
               {
               "name": "VAR_2",
               "value": "$(VAR_1) bar"
               }
               ]
               ```
               If you switch the order of the variables in the example, then the expansion
               does not occur.
               This field corresponds to the `env` field of the Kubernetes Containers
               [v1 core
               API](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#container-v1-core).
               Structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecGrpcPortArgs']]] grpc_ports: List of ports to expose from the container. Vertex AI sends gRPC
               prediction requests that it receives to the first port on this list. Vertex
               AI also sends liveness and health checks to this port.
               If you do not specify this field, gRPC requests to the container will be
               disabled.
               Vertex AI does not use ports other than the first one listed. This field
               corresponds to the `ports` field of the Kubernetes Containers v1 core API.
               Structure is documented below.
        :param pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeArgs'] health_probe: Probe describes a health check to be performed against a container to
               determine whether it is alive or ready to receive traffic.
               Structure is documented below.
        :param pulumi.Input[_builtins.str] health_route: HTTP path on the container to send health checks to. Vertex AI
               intermittently sends GET requests to this path on the container's IP
               address and port to check that the container is healthy. Read more about
               [health
               checks](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#health).
               For example, if you set this field to `/bar`, then Vertex AI
               intermittently sends a GET request to the `/bar` path on the port of your
               container specified by the first value of this `ModelContainerSpec`'s
               ports field.
               If you don't specify this field, it defaults to the following value when
               you deploy this Model to an Endpoint:/v1/endpoints/ENDPOINT/deployedModels/DEPLOYED_MODEL:predict
               The placeholders in this value are replaced as follows:
               * ENDPOINT: The last segment (following `endpoints/`)of the
               Endpoint.name][] field of the Endpoint where this Model has been
               deployed. (Vertex AI makes this value available to your container code
               as the [`AIP_ENDPOINT_ID` environment
               variable](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#aip-variables).)
               * DEPLOYED_MODEL: DeployedModel.id of the `DeployedModel`.
               (Vertex AI makes this value available to your container code as the
               [`AIP_DEPLOYED_MODEL_ID` environment
               variable](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#aip-variables).)
        :param pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeArgs'] liveness_probe: Probe describes a health check to be performed against a container to
               determine whether it is alive or ready to receive traffic.
               Structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecPortArgs']]] ports: List of ports to expose from the container. Vertex AI sends any
               prediction requests that it receives to the first port on this list. Vertex
               AI also sends
               [liveness and health
               checks](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#liveness)
               to this port.
               If you do not specify this field, it defaults to following value:
               ```json
               [
               {
               "containerPort": 8080
               }
               ]
               ```
               Vertex AI does not use ports other than the first one listed. This field
               corresponds to the `ports` field of the Kubernetes Containers
               [v1 core
               API](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#container-v1-core).
               Structure is documented below.
        :param pulumi.Input[_builtins.str] predict_route: HTTP path on the container to send prediction requests to. Vertex AI
               forwards requests sent using
               projects.locations.endpoints.predict to this
               path on the container's IP address and port. Vertex AI then returns the
               container's response in the API response.
               For example, if you set this field to `/foo`, then when Vertex AI
               receives a prediction request, it forwards the request body in a POST
               request to the `/foo` path on the port of your container specified by the
               first value of this `ModelContainerSpec`'s
               ports field.
               If you don't specify this field, it defaults to the following value when
               you deploy this Model to an Endpoint:/v1/endpoints/ENDPOINT/deployedModels/DEPLOYED_MODEL:predict
               The placeholders in this value are replaced as follows:
               * ENDPOINT: The last segment (following `endpoints/`)of the
               Endpoint.name][] field of the Endpoint where this Model has been
               deployed. (Vertex AI makes this value available to your container code
               as the [`AIP_ENDPOINT_ID` environment
               variable](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#aip-variables).)
               * DEPLOYED_MODEL: DeployedModel.id of the `DeployedModel`.
               (Vertex AI makes this value available to your container code
               as the [`AIP_DEPLOYED_MODEL_ID` environment
               variable](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#aip-variables).)
        :param pulumi.Input[_builtins.str] shared_memory_size_mb: The amount of the VM memory to reserve as the shared memory for the model
               in megabytes.
        :param pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeArgs'] startup_probe: Probe describes a health check to be performed against a container to
               determine whether it is alive or ready to receive traffic.
               Structure is documented below.
        """
        pulumi.set(__self__, "image_uri", image_uri)
        if args is not None:
            pulumi.set(__self__, "args", args)
        if commands is not None:
            pulumi.set(__self__, "commands", commands)
        if deployment_timeout is not None:
            pulumi.set(__self__, "deployment_timeout", deployment_timeout)
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if grpc_ports is not None:
            pulumi.set(__self__, "grpc_ports", grpc_ports)
        if health_probe is not None:
            pulumi.set(__self__, "health_probe", health_probe)
        if health_route is not None:
            pulumi.set(__self__, "health_route", health_route)
        if liveness_probe is not None:
            pulumi.set(__self__, "liveness_probe", liveness_probe)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if predict_route is not None:
            pulumi.set(__self__, "predict_route", predict_route)
        if shared_memory_size_mb is not None:
            pulumi.set(__self__, "shared_memory_size_mb", shared_memory_size_mb)
        if startup_probe is not None:
            pulumi.set(__self__, "startup_probe", startup_probe)

    @_builtins.property
    @pulumi.getter(name="imageUri")
    def image_uri(self) -> pulumi.Input[_builtins.str]:
        """
        URI of the Docker image to be used as the custom container for serving
        predictions. This URI must identify an image in Artifact Registry or
        Container Registry. Learn more about the [container publishing
        requirements](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#publishing),
        including permissions requirements for the Vertex AI Service Agent.
        The container image is ingested upon ModelService.UploadModel, stored
        internally, and this original path is afterwards not used.
        To learn about the requirements for the Docker image itself, see
        [Custom container
        requirements](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#).
        You can use the URI to one of Vertex AI's [pre-built container images for
        prediction](https://cloud.google.com/vertex-ai/docs/predictions/pre-built-containers)
        in this field.
        """
        return pulumi.get(self, "image_uri")

    @image_uri.setter
    def image_uri(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "image_uri", value)

    @_builtins.property
    @pulumi.getter
    def args(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies arguments for the command that runs when the container starts.
        This overrides the container's
        [`CMD`](https://docs.docker.com/engine/reference/builder/#cmd). Specify
        this field as an array of executable and arguments, similar to a Docker
        `CMD`'s "default parameters" form.
        If you don't specify this field but do specify the
        command field, then the command from the
        `command` field runs without any additional arguments. See the
        [Kubernetes documentation about how the
        `command` and `args` fields interact with a container's `ENTRYPOINT` and
        `CMD`](https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#notes).
        If you don't specify this field and don't specify the `command` field,
        then the container's
        [`ENTRYPOINT`](https://docs.docker.com/engine/reference/builder/#cmd) and
        `CMD` determine what runs based on their default behavior. See the Docker
        documentation about [how `CMD` and `ENTRYPOINT`
        interact](https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact).
        In this field, you can reference [environment variables
        set by Vertex
        AI](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#aip-variables)
        and environment variables set in the env field.
        You cannot reference environment variables set in the Docker image. In
        order for environment variables to be expanded, reference them by using the
        following syntax:$(VARIABLE_NAME)
        Note that this differs from Bash variable expansion, which does not use
        parentheses. If a variable cannot be resolved, the reference in the input
        string is used unchanged. To avoid variable expansion, you can escape this
        syntax with `$$`; for example:$$(VARIABLE_NAME)
        This field corresponds to the `args` field of the Kubernetes Containers
        [v1 core
        API](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#container-v1-core).
        """
        return pulumi.get(self, "args")

    @args.setter
    def args(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "args", value)

    @_builtins.property
    @pulumi.getter
    def commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the command that runs when the container starts. This overrides
        the container's
        [ENTRYPOINT](https://docs.docker.com/engine/reference/builder/#entrypoint).
        Specify this field as an array of executable and arguments, similar to a
        Docker `ENTRYPOINT`'s "exec" form, not its "shell" form.
        If you do not specify this field, then the container's `ENTRYPOINT` runs,
        in conjunction with the args field or the
        container's [`CMD`](https://docs.docker.com/engine/reference/builder/#cmd),
        if either exists. If this field is not specified and the container does not
        have an `ENTRYPOINT`, then refer to the Docker documentation about [how
        `CMD` and `ENTRYPOINT`
        interact](https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact).
        If you specify this field, then you can also specify the `args` field to
        provide additional arguments for this command. However, if you specify this
        field, then the container's `CMD` is ignored. See the
        [Kubernetes documentation about how the
        `command` and `args` fields interact with a container's `ENTRYPOINT` and
        `CMD`](https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#notes).
        In this field, you can reference [environment variables set by Vertex
        AI](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#aip-variables)
        and environment variables set in the env field.
        You cannot reference environment variables set in the Docker image. In
        order for environment variables to be expanded, reference them by using the
        following syntax:$(VARIABLE_NAME)
        Note that this differs from Bash variable expansion, which does not use
        parentheses. If a variable cannot be resolved, the reference in the input
        string is used unchanged. To avoid variable expansion, you can escape this
        syntax with `$$`; for example:$$(VARIABLE_NAME)
        This field corresponds to the `command` field of the Kubernetes Containers
        [v1 core
        API](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#container-v1-core).
        """
        return pulumi.get(self, "commands")

    @commands.setter
    def commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "commands", value)

    @_builtins.property
    @pulumi.getter(name="deploymentTimeout")
    def deployment_timeout(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Deployment timeout.
        Limit for deployment timeout is 2 hours.
        """
        return pulumi.get(self, "deployment_timeout")

    @deployment_timeout.setter
    def deployment_timeout(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "deployment_timeout", value)

    @_builtins.property
    @pulumi.getter
    def envs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecEnvArgs']]]]:
        """
        List of environment variables to set in the container. After the container
        starts running, code running in the container can read these environment
        variables.
        Additionally, the command and
        args fields can reference these variables. Later
        entries in this list can also reference earlier entries. For example, the
        following example sets the variable `VAR_2` to have the value `foo bar`:
        ```json
        [
        {
        "name": "VAR_1",
        "value": "foo"
        },
        {
        "name": "VAR_2",
        "value": "$(VAR_1) bar"
        }
        ]
        ```
        If you switch the order of the variables in the example, then the expansion
        does not occur.
        This field corresponds to the `env` field of the Kubernetes Containers
        [v1 core
        API](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#container-v1-core).
        Structure is documented below.
        """
        return pulumi.get(self, "envs")

    @envs.setter
    def envs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecEnvArgs']]]]):
        pulumi.set(self, "envs", value)

    @_builtins.property
    @pulumi.getter(name="grpcPorts")
    def grpc_ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecGrpcPortArgs']]]]:
        """
        List of ports to expose from the container. Vertex AI sends gRPC
        prediction requests that it receives to the first port on this list. Vertex
        AI also sends liveness and health checks to this port.
        If you do not specify this field, gRPC requests to the container will be
        disabled.
        Vertex AI does not use ports other than the first one listed. This field
        corresponds to the `ports` field of the Kubernetes Containers v1 core API.
        Structure is documented below.
        """
        return pulumi.get(self, "grpc_ports")

    @grpc_ports.setter
    def grpc_ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecGrpcPortArgs']]]]):
        pulumi.set(self, "grpc_ports", value)

    @_builtins.property
    @pulumi.getter(name="healthProbe")
    def health_probe(self) -> Optional[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeArgs']]:
        """
        Probe describes a health check to be performed against a container to
        determine whether it is alive or ready to receive traffic.
        Structure is documented below.
        """
        return pulumi.get(self, "health_probe")

    @health_probe.setter
    def health_probe(self, value: Optional[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeArgs']]):
        pulumi.set(self, "health_probe", value)

    @_builtins.property
    @pulumi.getter(name="healthRoute")
    def health_route(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        HTTP path on the container to send health checks to. Vertex AI
        intermittently sends GET requests to this path on the container's IP
        address and port to check that the container is healthy. Read more about
        [health
        checks](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#health).
        For example, if you set this field to `/bar`, then Vertex AI
        intermittently sends a GET request to the `/bar` path on the port of your
        container specified by the first value of this `ModelContainerSpec`'s
        ports field.
        If you don't specify this field, it defaults to the following value when
        you deploy this Model to an Endpoint:/v1/endpoints/ENDPOINT/deployedModels/DEPLOYED_MODEL:predict
        The placeholders in this value are replaced as follows:
        * ENDPOINT: The last segment (following `endpoints/`)of the
        Endpoint.name][] field of the Endpoint where this Model has been
        deployed. (Vertex AI makes this value available to your container code
        as the [`AIP_ENDPOINT_ID` environment
        variable](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#aip-variables).)
        * DEPLOYED_MODEL: DeployedModel.id of the `DeployedModel`.
        (Vertex AI makes this value available to your container code as the
        [`AIP_DEPLOYED_MODEL_ID` environment
        variable](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#aip-variables).)
        """
        return pulumi.get(self, "health_route")

    @health_route.setter
    def health_route(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "health_route", value)

    @_builtins.property
    @pulumi.getter(name="livenessProbe")
    def liveness_probe(self) -> Optional[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeArgs']]:
        """
        Probe describes a health check to be performed against a container to
        determine whether it is alive or ready to receive traffic.
        Structure is documented below.
        """
        return pulumi.get(self, "liveness_probe")

    @liveness_probe.setter
    def liveness_probe(self, value: Optional[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeArgs']]):
        pulumi.set(self, "liveness_probe", value)

    @_builtins.property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecPortArgs']]]]:
        """
        List of ports to expose from the container. Vertex AI sends any
        prediction requests that it receives to the first port on this list. Vertex
        AI also sends
        [liveness and health
        checks](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#liveness)
        to this port.
        If you do not specify this field, it defaults to following value:
        ```json
        [
        {
        "containerPort": 8080
        }
        ]
        ```
        Vertex AI does not use ports other than the first one listed. This field
        corresponds to the `ports` field of the Kubernetes Containers
        [v1 core
        API](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#container-v1-core).
        Structure is documented below.
        """
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecPortArgs']]]]):
        pulumi.set(self, "ports", value)

    @_builtins.property
    @pulumi.getter(name="predictRoute")
    def predict_route(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        HTTP path on the container to send prediction requests to. Vertex AI
        forwards requests sent using
        projects.locations.endpoints.predict to this
        path on the container's IP address and port. Vertex AI then returns the
        container's response in the API response.
        For example, if you set this field to `/foo`, then when Vertex AI
        receives a prediction request, it forwards the request body in a POST
        request to the `/foo` path on the port of your container specified by the
        first value of this `ModelContainerSpec`'s
        ports field.
        If you don't specify this field, it defaults to the following value when
        you deploy this Model to an Endpoint:/v1/endpoints/ENDPOINT/deployedModels/DEPLOYED_MODEL:predict
        The placeholders in this value are replaced as follows:
        * ENDPOINT: The last segment (following `endpoints/`)of the
        Endpoint.name][] field of the Endpoint where this Model has been
        deployed. (Vertex AI makes this value available to your container code
        as the [`AIP_ENDPOINT_ID` environment
        variable](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#aip-variables).)
        * DEPLOYED_MODEL: DeployedModel.id of the `DeployedModel`.
        (Vertex AI makes this value available to your container code
        as the [`AIP_DEPLOYED_MODEL_ID` environment
        variable](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#aip-variables).)
        """
        return pulumi.get(self, "predict_route")

    @predict_route.setter
    def predict_route(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "predict_route", value)

    @_builtins.property
    @pulumi.getter(name="sharedMemorySizeMb")
    def shared_memory_size_mb(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The amount of the VM memory to reserve as the shared memory for the model
        in megabytes.
        """
        return pulumi.get(self, "shared_memory_size_mb")

    @shared_memory_size_mb.setter
    def shared_memory_size_mb(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "shared_memory_size_mb", value)

    @_builtins.property
    @pulumi.getter(name="startupProbe")
    def startup_probe(self) -> Optional[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeArgs']]:
        """
        Probe describes a health check to be performed against a container to
        determine whether it is alive or ready to receive traffic.
        Structure is documented below.
        """
        return pulumi.get(self, "startup_probe")

    @startup_probe.setter
    def startup_probe(self, value: Optional[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeArgs']]):
        pulumi.set(self, "startup_probe", value)


if not MYPY:
    class AiEndpointWithModelGardenDeploymentModelConfigContainerSpecEnvArgsDict(TypedDict):
        name: pulumi.Input[_builtins.str]
        """
        Name of the environment variable. Must be a valid C identifier.
        """
        value: pulumi.Input[_builtins.str]
        """
        Variables that reference a $(VAR_NAME) are expanded
        using the previous defined environment variables in the container and
        any service environment variables. If a variable cannot be resolved,
        the reference in the input string will be unchanged. The $(VAR_NAME)
        syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped
        references will never be expanded, regardless of whether the variable
        exists or not.
        """
elif False:
    AiEndpointWithModelGardenDeploymentModelConfigContainerSpecEnvArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiEndpointWithModelGardenDeploymentModelConfigContainerSpecEnvArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[_builtins.str],
                 value: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] name: Name of the environment variable. Must be a valid C identifier.
        :param pulumi.Input[_builtins.str] value: Variables that reference a $(VAR_NAME) are expanded
               using the previous defined environment variables in the container and
               any service environment variables. If a variable cannot be resolved,
               the reference in the input string will be unchanged. The $(VAR_NAME)
               syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped
               references will never be expanded, regardless of whether the variable
               exists or not.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Name of the environment variable. Must be a valid C identifier.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Input[_builtins.str]:
        """
        Variables that reference a $(VAR_NAME) are expanded
        using the previous defined environment variables in the container and
        any service environment variables. If a variable cannot be resolved,
        the reference in the input string will be unchanged. The $(VAR_NAME)
        syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped
        references will never be expanded, regardless of whether the variable
        exists or not.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class AiEndpointWithModelGardenDeploymentModelConfigContainerSpecGrpcPortArgsDict(TypedDict):
        container_port: NotRequired[pulumi.Input[_builtins.int]]
        """
        The number of the port to expose on the pod's IP address.
        Must be a valid port number, between 1 and 65535 inclusive.
        """
elif False:
    AiEndpointWithModelGardenDeploymentModelConfigContainerSpecGrpcPortArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiEndpointWithModelGardenDeploymentModelConfigContainerSpecGrpcPortArgs:
    def __init__(__self__, *,
                 container_port: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.int] container_port: The number of the port to expose on the pod's IP address.
               Must be a valid port number, between 1 and 65535 inclusive.
        """
        if container_port is not None:
            pulumi.set(__self__, "container_port", container_port)

    @_builtins.property
    @pulumi.getter(name="containerPort")
    def container_port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The number of the port to expose on the pod's IP address.
        Must be a valid port number, between 1 and 65535 inclusive.
        """
        return pulumi.get(self, "container_port")

    @container_port.setter
    def container_port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "container_port", value)


if not MYPY:
    class AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeArgsDict(TypedDict):
        exec_: NotRequired[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeExecArgsDict']]
        """
        ExecAction specifies a command to execute.
        Structure is documented below.
        """
        failure_threshold: NotRequired[pulumi.Input[_builtins.int]]
        """
        Number of consecutive failures before the probe is considered failed.
        Defaults to 3. Minimum value is 1.
        Maps to Kubernetes probe argument 'failureThreshold'.
        """
        grpc: NotRequired[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeGrpcArgsDict']]
        """
        GrpcAction checks the health of a container using a gRPC service.
        Structure is documented below.
        """
        http_get: NotRequired[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeHttpGetArgsDict']]
        """
        HttpGetAction describes an action based on HTTP Get requests.
        Structure is documented below.
        """
        initial_delay_seconds: NotRequired[pulumi.Input[_builtins.int]]
        """
        Number of seconds to wait before starting the probe. Defaults to 0.
        Minimum value is 0.
        Maps to Kubernetes probe argument 'initialDelaySeconds'.
        """
        period_seconds: NotRequired[pulumi.Input[_builtins.int]]
        """
        How often (in seconds) to perform the probe. Default to 10 seconds.
        Minimum value is 1. Must be less than timeout_seconds.
        Maps to Kubernetes probe argument 'periodSeconds'.
        """
        success_threshold: NotRequired[pulumi.Input[_builtins.int]]
        """
        Number of consecutive successes before the probe is considered successful.
        Defaults to 1. Minimum value is 1.
        Maps to Kubernetes probe argument 'successThreshold'.
        """
        tcp_socket: NotRequired[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeTcpSocketArgsDict']]
        """
        TcpSocketAction probes the health of a container by opening a TCP socket
        connection.
        Structure is documented below.
        """
        timeout_seconds: NotRequired[pulumi.Input[_builtins.int]]
        """
        Number of seconds after which the probe times out. Defaults to 1 second.
        Minimum value is 1. Must be greater or equal to period_seconds.
        Maps to Kubernetes probe argument 'timeoutSeconds'.
        """
elif False:
    AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeArgs:
    def __init__(__self__, *,
                 exec_: Optional[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeExecArgs']] = None,
                 failure_threshold: Optional[pulumi.Input[_builtins.int]] = None,
                 grpc: Optional[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeGrpcArgs']] = None,
                 http_get: Optional[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeHttpGetArgs']] = None,
                 initial_delay_seconds: Optional[pulumi.Input[_builtins.int]] = None,
                 period_seconds: Optional[pulumi.Input[_builtins.int]] = None,
                 success_threshold: Optional[pulumi.Input[_builtins.int]] = None,
                 tcp_socket: Optional[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeTcpSocketArgs']] = None,
                 timeout_seconds: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeExecArgs'] exec_: ExecAction specifies a command to execute.
               Structure is documented below.
        :param pulumi.Input[_builtins.int] failure_threshold: Number of consecutive failures before the probe is considered failed.
               Defaults to 3. Minimum value is 1.
               Maps to Kubernetes probe argument 'failureThreshold'.
        :param pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeGrpcArgs'] grpc: GrpcAction checks the health of a container using a gRPC service.
               Structure is documented below.
        :param pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeHttpGetArgs'] http_get: HttpGetAction describes an action based on HTTP Get requests.
               Structure is documented below.
        :param pulumi.Input[_builtins.int] initial_delay_seconds: Number of seconds to wait before starting the probe. Defaults to 0.
               Minimum value is 0.
               Maps to Kubernetes probe argument 'initialDelaySeconds'.
        :param pulumi.Input[_builtins.int] period_seconds: How often (in seconds) to perform the probe. Default to 10 seconds.
               Minimum value is 1. Must be less than timeout_seconds.
               Maps to Kubernetes probe argument 'periodSeconds'.
        :param pulumi.Input[_builtins.int] success_threshold: Number of consecutive successes before the probe is considered successful.
               Defaults to 1. Minimum value is 1.
               Maps to Kubernetes probe argument 'successThreshold'.
        :param pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeTcpSocketArgs'] tcp_socket: TcpSocketAction probes the health of a container by opening a TCP socket
               connection.
               Structure is documented below.
        :param pulumi.Input[_builtins.int] timeout_seconds: Number of seconds after which the probe times out. Defaults to 1 second.
               Minimum value is 1. Must be greater or equal to period_seconds.
               Maps to Kubernetes probe argument 'timeoutSeconds'.
        """
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if grpc is not None:
            pulumi.set(__self__, "grpc", grpc)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @_builtins.property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeExecArgs']]:
        """
        ExecAction specifies a command to execute.
        Structure is documented below.
        """
        return pulumi.get(self, "exec_")

    @exec_.setter
    def exec_(self, value: Optional[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeExecArgs']]):
        pulumi.set(self, "exec_", value)

    @_builtins.property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Number of consecutive failures before the probe is considered failed.
        Defaults to 3. Minimum value is 1.
        Maps to Kubernetes probe argument 'failureThreshold'.
        """
        return pulumi.get(self, "failure_threshold")

    @failure_threshold.setter
    def failure_threshold(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "failure_threshold", value)

    @_builtins.property
    @pulumi.getter
    def grpc(self) -> Optional[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeGrpcArgs']]:
        """
        GrpcAction checks the health of a container using a gRPC service.
        Structure is documented below.
        """
        return pulumi.get(self, "grpc")

    @grpc.setter
    def grpc(self, value: Optional[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeGrpcArgs']]):
        pulumi.set(self, "grpc", value)

    @_builtins.property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeHttpGetArgs']]:
        """
        HttpGetAction describes an action based on HTTP Get requests.
        Structure is documented below.
        """
        return pulumi.get(self, "http_get")

    @http_get.setter
    def http_get(self, value: Optional[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeHttpGetArgs']]):
        pulumi.set(self, "http_get", value)

    @_builtins.property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Number of seconds to wait before starting the probe. Defaults to 0.
        Minimum value is 0.
        Maps to Kubernetes probe argument 'initialDelaySeconds'.
        """
        return pulumi.get(self, "initial_delay_seconds")

    @initial_delay_seconds.setter
    def initial_delay_seconds(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "initial_delay_seconds", value)

    @_builtins.property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        How often (in seconds) to perform the probe. Default to 10 seconds.
        Minimum value is 1. Must be less than timeout_seconds.
        Maps to Kubernetes probe argument 'periodSeconds'.
        """
        return pulumi.get(self, "period_seconds")

    @period_seconds.setter
    def period_seconds(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "period_seconds", value)

    @_builtins.property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Number of consecutive successes before the probe is considered successful.
        Defaults to 1. Minimum value is 1.
        Maps to Kubernetes probe argument 'successThreshold'.
        """
        return pulumi.get(self, "success_threshold")

    @success_threshold.setter
    def success_threshold(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "success_threshold", value)

    @_builtins.property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeTcpSocketArgs']]:
        """
        TcpSocketAction probes the health of a container by opening a TCP socket
        connection.
        Structure is documented below.
        """
        return pulumi.get(self, "tcp_socket")

    @tcp_socket.setter
    def tcp_socket(self, value: Optional[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeTcpSocketArgs']]):
        pulumi.set(self, "tcp_socket", value)

    @_builtins.property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Number of seconds after which the probe times out. Defaults to 1 second.
        Minimum value is 1. Must be greater or equal to period_seconds.
        Maps to Kubernetes probe argument 'timeoutSeconds'.
        """
        return pulumi.get(self, "timeout_seconds")

    @timeout_seconds.setter
    def timeout_seconds(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "timeout_seconds", value)


if not MYPY:
    class AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeExecArgsDict(TypedDict):
        commands: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Command is the command line to execute inside the container, the working
        directory for the command is root ('/') in the container's filesystem.
        The command is simply exec'd, it is not run inside a shell, so
        traditional shell instructions ('|', etc) won't work. To use a shell, you
        need to explicitly call out to that shell. Exit status of 0 is treated as
        live/healthy and non-zero is unhealthy.
        """
elif False:
    AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeExecArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeExecArgs:
    def __init__(__self__, *,
                 commands: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] commands: Command is the command line to execute inside the container, the working
               directory for the command is root ('/') in the container's filesystem.
               The command is simply exec'd, it is not run inside a shell, so
               traditional shell instructions ('|', etc) won't work. To use a shell, you
               need to explicitly call out to that shell. Exit status of 0 is treated as
               live/healthy and non-zero is unhealthy.
        """
        if commands is not None:
            pulumi.set(__self__, "commands", commands)

    @_builtins.property
    @pulumi.getter
    def commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Command is the command line to execute inside the container, the working
        directory for the command is root ('/') in the container's filesystem.
        The command is simply exec'd, it is not run inside a shell, so
        traditional shell instructions ('|', etc) won't work. To use a shell, you
        need to explicitly call out to that shell. Exit status of 0 is treated as
        live/healthy and non-zero is unhealthy.
        """
        return pulumi.get(self, "commands")

    @commands.setter
    def commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "commands", value)


if not MYPY:
    class AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeGrpcArgsDict(TypedDict):
        port: NotRequired[pulumi.Input[_builtins.int]]
        """
        Port number of the gRPC service. Number must be in the range 1 to 65535.
        """
        service: NotRequired[pulumi.Input[_builtins.str]]
        """
        Service is the name of the service to place in the gRPC
        HealthCheckRequest. See
        https://github.com/grpc/grpc/blob/master/doc/health-checking.md.
        If this is not specified, the default behavior is defined by gRPC.
        """
elif False:
    AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeGrpcArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeGrpcArgs:
    def __init__(__self__, *,
                 port: Optional[pulumi.Input[_builtins.int]] = None,
                 service: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.int] port: Port number of the gRPC service. Number must be in the range 1 to 65535.
        :param pulumi.Input[_builtins.str] service: Service is the name of the service to place in the gRPC
               HealthCheckRequest. See
               https://github.com/grpc/grpc/blob/master/doc/health-checking.md.
               If this is not specified, the default behavior is defined by gRPC.
        """
        if port is not None:
            pulumi.set(__self__, "port", port)
        if service is not None:
            pulumi.set(__self__, "service", service)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Port number of the gRPC service. Number must be in the range 1 to 65535.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Service is the name of the service to place in the gRPC
        HealthCheckRequest. See
        https://github.com/grpc/grpc/blob/master/doc/health-checking.md.
        If this is not specified, the default behavior is defined by gRPC.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service", value)


if not MYPY:
    class AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeHttpGetArgsDict(TypedDict):
        host: NotRequired[pulumi.Input[_builtins.str]]
        """
        Host name to connect to, defaults to the model serving container's IP.
        You probably want to set "Host" in httpHeaders instead.
        """
        http_headers: NotRequired[pulumi.Input[Sequence[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeHttpGetHttpHeaderArgsDict']]]]
        """
        Custom headers to set in the request. HTTP allows repeated headers.
        Structure is documented below.
        """
        path: NotRequired[pulumi.Input[_builtins.str]]
        """
        Path to access on the HTTP server.
        """
        port: NotRequired[pulumi.Input[_builtins.int]]
        """
        Number of the port to access on the container.
        Number must be in the range 1 to 65535.
        """
        scheme: NotRequired[pulumi.Input[_builtins.str]]
        """
        Scheme to use for connecting to the host.
        Defaults to HTTP. Acceptable values are "HTTP" or "HTTPS".
        """
elif False:
    AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeHttpGetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeHttpGetArgs:
    def __init__(__self__, *,
                 host: Optional[pulumi.Input[_builtins.str]] = None,
                 http_headers: Optional[pulumi.Input[Sequence[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeHttpGetHttpHeaderArgs']]]] = None,
                 path: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.int]] = None,
                 scheme: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] host: Host name to connect to, defaults to the model serving container's IP.
               You probably want to set "Host" in httpHeaders instead.
        :param pulumi.Input[Sequence[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeHttpGetHttpHeaderArgs']]] http_headers: Custom headers to set in the request. HTTP allows repeated headers.
               Structure is documented below.
        :param pulumi.Input[_builtins.str] path: Path to access on the HTTP server.
        :param pulumi.Input[_builtins.int] port: Number of the port to access on the container.
               Number must be in the range 1 to 65535.
        :param pulumi.Input[_builtins.str] scheme: Scheme to use for connecting to the host.
               Defaults to HTTP. Acceptable values are "HTTP" or "HTTPS".
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @_builtins.property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Host name to connect to, defaults to the model serving container's IP.
        You probably want to set "Host" in httpHeaders instead.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "host", value)

    @_builtins.property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeHttpGetHttpHeaderArgs']]]]:
        """
        Custom headers to set in the request. HTTP allows repeated headers.
        Structure is documented below.
        """
        return pulumi.get(self, "http_headers")

    @http_headers.setter
    def http_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeHttpGetHttpHeaderArgs']]]]):
        pulumi.set(self, "http_headers", value)

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Path to access on the HTTP server.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "path", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Number of the port to access on the container.
        Number must be in the range 1 to 65535.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter
    def scheme(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Scheme to use for connecting to the host.
        Defaults to HTTP. Acceptable values are "HTTP" or "HTTPS".
        """
        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "scheme", value)


if not MYPY:
    class AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeHttpGetHttpHeaderArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The header field name.
        This will be canonicalized upon output, so case-variant names will be
        understood as the same header.
        """
        value: NotRequired[pulumi.Input[_builtins.str]]
        """
        The header field value
        """
elif False:
    AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeHttpGetHttpHeaderArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeHttpGetHttpHeaderArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] name: The header field name.
               This will be canonicalized upon output, so case-variant names will be
               understood as the same header.
        :param pulumi.Input[_builtins.str] value: The header field value
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The header field name.
        This will be canonicalized upon output, so case-variant names will be
        understood as the same header.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The header field value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeTcpSocketArgsDict(TypedDict):
        host: NotRequired[pulumi.Input[_builtins.str]]
        """
        Optional: Host name to connect to, defaults to the model serving
        container's IP.
        """
        port: NotRequired[pulumi.Input[_builtins.int]]
        """
        Number of the port to access on the container.
        Number must be in the range 1 to 65535.
        """
elif False:
    AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeTcpSocketArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiEndpointWithModelGardenDeploymentModelConfigContainerSpecHealthProbeTcpSocketArgs:
    def __init__(__self__, *,
                 host: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] host: Optional: Host name to connect to, defaults to the model serving
               container's IP.
        :param pulumi.Input[_builtins.int] port: Number of the port to access on the container.
               Number must be in the range 1 to 65535.
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @_builtins.property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Optional: Host name to connect to, defaults to the model serving
        container's IP.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "host", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Number of the port to access on the container.
        Number must be in the range 1 to 65535.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "port", value)


if not MYPY:
    class AiEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeArgsDict(TypedDict):
        exec_: NotRequired[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeExecArgsDict']]
        """
        ExecAction specifies a command to execute.
        Structure is documented below.
        """
        failure_threshold: NotRequired[pulumi.Input[_builtins.int]]
        """
        Number of consecutive failures before the probe is considered failed.
        Defaults to 3. Minimum value is 1.
        Maps to Kubernetes probe argument 'failureThreshold'.
        """
        grpc: NotRequired[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeGrpcArgsDict']]
        """
        GrpcAction checks the health of a container using a gRPC service.
        Structure is documented below.
        """
        http_get: NotRequired[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeHttpGetArgsDict']]
        """
        HttpGetAction describes an action based on HTTP Get requests.
        Structure is documented below.
        """
        initial_delay_seconds: NotRequired[pulumi.Input[_builtins.int]]
        """
        Number of seconds to wait before starting the probe. Defaults to 0.
        Minimum value is 0.
        Maps to Kubernetes probe argument 'initialDelaySeconds'.
        """
        period_seconds: NotRequired[pulumi.Input[_builtins.int]]
        """
        How often (in seconds) to perform the probe. Default to 10 seconds.
        Minimum value is 1. Must be less than timeout_seconds.
        Maps to Kubernetes probe argument 'periodSeconds'.
        """
        success_threshold: NotRequired[pulumi.Input[_builtins.int]]
        """
        Number of consecutive successes before the probe is considered successful.
        Defaults to 1. Minimum value is 1.
        Maps to Kubernetes probe argument 'successThreshold'.
        """
        tcp_socket: NotRequired[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeTcpSocketArgsDict']]
        """
        TcpSocketAction probes the health of a container by opening a TCP socket
        connection.
        Structure is documented below.
        """
        timeout_seconds: NotRequired[pulumi.Input[_builtins.int]]
        """
        Number of seconds after which the probe times out. Defaults to 1 second.
        Minimum value is 1. Must be greater or equal to period_seconds.
        Maps to Kubernetes probe argument 'timeoutSeconds'.
        """
elif False:
    AiEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeArgs:
    def __init__(__self__, *,
                 exec_: Optional[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeExecArgs']] = None,
                 failure_threshold: Optional[pulumi.Input[_builtins.int]] = None,
                 grpc: Optional[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeGrpcArgs']] = None,
                 http_get: Optional[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeHttpGetArgs']] = None,
                 initial_delay_seconds: Optional[pulumi.Input[_builtins.int]] = None,
                 period_seconds: Optional[pulumi.Input[_builtins.int]] = None,
                 success_threshold: Optional[pulumi.Input[_builtins.int]] = None,
                 tcp_socket: Optional[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeTcpSocketArgs']] = None,
                 timeout_seconds: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeExecArgs'] exec_: ExecAction specifies a command to execute.
               Structure is documented below.
        :param pulumi.Input[_builtins.int] failure_threshold: Number of consecutive failures before the probe is considered failed.
               Defaults to 3. Minimum value is 1.
               Maps to Kubernetes probe argument 'failureThreshold'.
        :param pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeGrpcArgs'] grpc: GrpcAction checks the health of a container using a gRPC service.
               Structure is documented below.
        :param pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeHttpGetArgs'] http_get: HttpGetAction describes an action based on HTTP Get requests.
               Structure is documented below.
        :param pulumi.Input[_builtins.int] initial_delay_seconds: Number of seconds to wait before starting the probe. Defaults to 0.
               Minimum value is 0.
               Maps to Kubernetes probe argument 'initialDelaySeconds'.
        :param pulumi.Input[_builtins.int] period_seconds: How often (in seconds) to perform the probe. Default to 10 seconds.
               Minimum value is 1. Must be less than timeout_seconds.
               Maps to Kubernetes probe argument 'periodSeconds'.
        :param pulumi.Input[_builtins.int] success_threshold: Number of consecutive successes before the probe is considered successful.
               Defaults to 1. Minimum value is 1.
               Maps to Kubernetes probe argument 'successThreshold'.
        :param pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeTcpSocketArgs'] tcp_socket: TcpSocketAction probes the health of a container by opening a TCP socket
               connection.
               Structure is documented below.
        :param pulumi.Input[_builtins.int] timeout_seconds: Number of seconds after which the probe times out. Defaults to 1 second.
               Minimum value is 1. Must be greater or equal to period_seconds.
               Maps to Kubernetes probe argument 'timeoutSeconds'.
        """
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if grpc is not None:
            pulumi.set(__self__, "grpc", grpc)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @_builtins.property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeExecArgs']]:
        """
        ExecAction specifies a command to execute.
        Structure is documented below.
        """
        return pulumi.get(self, "exec_")

    @exec_.setter
    def exec_(self, value: Optional[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeExecArgs']]):
        pulumi.set(self, "exec_", value)

    @_builtins.property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Number of consecutive failures before the probe is considered failed.
        Defaults to 3. Minimum value is 1.
        Maps to Kubernetes probe argument 'failureThreshold'.
        """
        return pulumi.get(self, "failure_threshold")

    @failure_threshold.setter
    def failure_threshold(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "failure_threshold", value)

    @_builtins.property
    @pulumi.getter
    def grpc(self) -> Optional[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeGrpcArgs']]:
        """
        GrpcAction checks the health of a container using a gRPC service.
        Structure is documented below.
        """
        return pulumi.get(self, "grpc")

    @grpc.setter
    def grpc(self, value: Optional[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeGrpcArgs']]):
        pulumi.set(self, "grpc", value)

    @_builtins.property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeHttpGetArgs']]:
        """
        HttpGetAction describes an action based on HTTP Get requests.
        Structure is documented below.
        """
        return pulumi.get(self, "http_get")

    @http_get.setter
    def http_get(self, value: Optional[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeHttpGetArgs']]):
        pulumi.set(self, "http_get", value)

    @_builtins.property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Number of seconds to wait before starting the probe. Defaults to 0.
        Minimum value is 0.
        Maps to Kubernetes probe argument 'initialDelaySeconds'.
        """
        return pulumi.get(self, "initial_delay_seconds")

    @initial_delay_seconds.setter
    def initial_delay_seconds(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "initial_delay_seconds", value)

    @_builtins.property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        How often (in seconds) to perform the probe. Default to 10 seconds.
        Minimum value is 1. Must be less than timeout_seconds.
        Maps to Kubernetes probe argument 'periodSeconds'.
        """
        return pulumi.get(self, "period_seconds")

    @period_seconds.setter
    def period_seconds(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "period_seconds", value)

    @_builtins.property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Number of consecutive successes before the probe is considered successful.
        Defaults to 1. Minimum value is 1.
        Maps to Kubernetes probe argument 'successThreshold'.
        """
        return pulumi.get(self, "success_threshold")

    @success_threshold.setter
    def success_threshold(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "success_threshold", value)

    @_builtins.property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeTcpSocketArgs']]:
        """
        TcpSocketAction probes the health of a container by opening a TCP socket
        connection.
        Structure is documented below.
        """
        return pulumi.get(self, "tcp_socket")

    @tcp_socket.setter
    def tcp_socket(self, value: Optional[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeTcpSocketArgs']]):
        pulumi.set(self, "tcp_socket", value)

    @_builtins.property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Number of seconds after which the probe times out. Defaults to 1 second.
        Minimum value is 1. Must be greater or equal to period_seconds.
        Maps to Kubernetes probe argument 'timeoutSeconds'.
        """
        return pulumi.get(self, "timeout_seconds")

    @timeout_seconds.setter
    def timeout_seconds(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "timeout_seconds", value)


if not MYPY:
    class AiEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeExecArgsDict(TypedDict):
        commands: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Command is the command line to execute inside the container, the working
        directory for the command is root ('/') in the container's filesystem.
        The command is simply exec'd, it is not run inside a shell, so
        traditional shell instructions ('|', etc) won't work. To use a shell, you
        need to explicitly call out to that shell. Exit status of 0 is treated as
        live/healthy and non-zero is unhealthy.
        """
elif False:
    AiEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeExecArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeExecArgs:
    def __init__(__self__, *,
                 commands: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] commands: Command is the command line to execute inside the container, the working
               directory for the command is root ('/') in the container's filesystem.
               The command is simply exec'd, it is not run inside a shell, so
               traditional shell instructions ('|', etc) won't work. To use a shell, you
               need to explicitly call out to that shell. Exit status of 0 is treated as
               live/healthy and non-zero is unhealthy.
        """
        if commands is not None:
            pulumi.set(__self__, "commands", commands)

    @_builtins.property
    @pulumi.getter
    def commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Command is the command line to execute inside the container, the working
        directory for the command is root ('/') in the container's filesystem.
        The command is simply exec'd, it is not run inside a shell, so
        traditional shell instructions ('|', etc) won't work. To use a shell, you
        need to explicitly call out to that shell. Exit status of 0 is treated as
        live/healthy and non-zero is unhealthy.
        """
        return pulumi.get(self, "commands")

    @commands.setter
    def commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "commands", value)


if not MYPY:
    class AiEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeGrpcArgsDict(TypedDict):
        port: NotRequired[pulumi.Input[_builtins.int]]
        """
        Port number of the gRPC service. Number must be in the range 1 to 65535.
        """
        service: NotRequired[pulumi.Input[_builtins.str]]
        """
        Service is the name of the service to place in the gRPC
        HealthCheckRequest. See
        https://github.com/grpc/grpc/blob/master/doc/health-checking.md.
        If this is not specified, the default behavior is defined by gRPC.
        """
elif False:
    AiEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeGrpcArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeGrpcArgs:
    def __init__(__self__, *,
                 port: Optional[pulumi.Input[_builtins.int]] = None,
                 service: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.int] port: Port number of the gRPC service. Number must be in the range 1 to 65535.
        :param pulumi.Input[_builtins.str] service: Service is the name of the service to place in the gRPC
               HealthCheckRequest. See
               https://github.com/grpc/grpc/blob/master/doc/health-checking.md.
               If this is not specified, the default behavior is defined by gRPC.
        """
        if port is not None:
            pulumi.set(__self__, "port", port)
        if service is not None:
            pulumi.set(__self__, "service", service)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Port number of the gRPC service. Number must be in the range 1 to 65535.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Service is the name of the service to place in the gRPC
        HealthCheckRequest. See
        https://github.com/grpc/grpc/blob/master/doc/health-checking.md.
        If this is not specified, the default behavior is defined by gRPC.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service", value)


if not MYPY:
    class AiEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeHttpGetArgsDict(TypedDict):
        host: NotRequired[pulumi.Input[_builtins.str]]
        """
        Host name to connect to, defaults to the model serving container's IP.
        You probably want to set "Host" in httpHeaders instead.
        """
        http_headers: NotRequired[pulumi.Input[Sequence[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeHttpGetHttpHeaderArgsDict']]]]
        """
        Custom headers to set in the request. HTTP allows repeated headers.
        Structure is documented below.
        """
        path: NotRequired[pulumi.Input[_builtins.str]]
        """
        Path to access on the HTTP server.
        """
        port: NotRequired[pulumi.Input[_builtins.int]]
        """
        Number of the port to access on the container.
        Number must be in the range 1 to 65535.
        """
        scheme: NotRequired[pulumi.Input[_builtins.str]]
        """
        Scheme to use for connecting to the host.
        Defaults to HTTP. Acceptable values are "HTTP" or "HTTPS".
        """
elif False:
    AiEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeHttpGetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeHttpGetArgs:
    def __init__(__self__, *,
                 host: Optional[pulumi.Input[_builtins.str]] = None,
                 http_headers: Optional[pulumi.Input[Sequence[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeHttpGetHttpHeaderArgs']]]] = None,
                 path: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.int]] = None,
                 scheme: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] host: Host name to connect to, defaults to the model serving container's IP.
               You probably want to set "Host" in httpHeaders instead.
        :param pulumi.Input[Sequence[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeHttpGetHttpHeaderArgs']]] http_headers: Custom headers to set in the request. HTTP allows repeated headers.
               Structure is documented below.
        :param pulumi.Input[_builtins.str] path: Path to access on the HTTP server.
        :param pulumi.Input[_builtins.int] port: Number of the port to access on the container.
               Number must be in the range 1 to 65535.
        :param pulumi.Input[_builtins.str] scheme: Scheme to use for connecting to the host.
               Defaults to HTTP. Acceptable values are "HTTP" or "HTTPS".
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @_builtins.property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Host name to connect to, defaults to the model serving container's IP.
        You probably want to set "Host" in httpHeaders instead.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "host", value)

    @_builtins.property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeHttpGetHttpHeaderArgs']]]]:
        """
        Custom headers to set in the request. HTTP allows repeated headers.
        Structure is documented below.
        """
        return pulumi.get(self, "http_headers")

    @http_headers.setter
    def http_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeHttpGetHttpHeaderArgs']]]]):
        pulumi.set(self, "http_headers", value)

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Path to access on the HTTP server.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "path", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Number of the port to access on the container.
        Number must be in the range 1 to 65535.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter
    def scheme(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Scheme to use for connecting to the host.
        Defaults to HTTP. Acceptable values are "HTTP" or "HTTPS".
        """
        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "scheme", value)


if not MYPY:
    class AiEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeHttpGetHttpHeaderArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The header field name.
        This will be canonicalized upon output, so case-variant names will be
        understood as the same header.
        """
        value: NotRequired[pulumi.Input[_builtins.str]]
        """
        The header field value
        """
elif False:
    AiEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeHttpGetHttpHeaderArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeHttpGetHttpHeaderArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] name: The header field name.
               This will be canonicalized upon output, so case-variant names will be
               understood as the same header.
        :param pulumi.Input[_builtins.str] value: The header field value
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The header field name.
        This will be canonicalized upon output, so case-variant names will be
        understood as the same header.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The header field value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class AiEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeTcpSocketArgsDict(TypedDict):
        host: NotRequired[pulumi.Input[_builtins.str]]
        """
        Optional: Host name to connect to, defaults to the model serving
        container's IP.
        """
        port: NotRequired[pulumi.Input[_builtins.int]]
        """
        Number of the port to access on the container.
        Number must be in the range 1 to 65535.
        """
elif False:
    AiEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeTcpSocketArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiEndpointWithModelGardenDeploymentModelConfigContainerSpecLivenessProbeTcpSocketArgs:
    def __init__(__self__, *,
                 host: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] host: Optional: Host name to connect to, defaults to the model serving
               container's IP.
        :param pulumi.Input[_builtins.int] port: Number of the port to access on the container.
               Number must be in the range 1 to 65535.
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @_builtins.property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Optional: Host name to connect to, defaults to the model serving
        container's IP.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "host", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Number of the port to access on the container.
        Number must be in the range 1 to 65535.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "port", value)


if not MYPY:
    class AiEndpointWithModelGardenDeploymentModelConfigContainerSpecPortArgsDict(TypedDict):
        container_port: NotRequired[pulumi.Input[_builtins.int]]
        """
        The number of the port to expose on the pod's IP address.
        Must be a valid port number, between 1 and 65535 inclusive.
        """
elif False:
    AiEndpointWithModelGardenDeploymentModelConfigContainerSpecPortArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiEndpointWithModelGardenDeploymentModelConfigContainerSpecPortArgs:
    def __init__(__self__, *,
                 container_port: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.int] container_port: The number of the port to expose on the pod's IP address.
               Must be a valid port number, between 1 and 65535 inclusive.
        """
        if container_port is not None:
            pulumi.set(__self__, "container_port", container_port)

    @_builtins.property
    @pulumi.getter(name="containerPort")
    def container_port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The number of the port to expose on the pod's IP address.
        Must be a valid port number, between 1 and 65535 inclusive.
        """
        return pulumi.get(self, "container_port")

    @container_port.setter
    def container_port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "container_port", value)


if not MYPY:
    class AiEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeArgsDict(TypedDict):
        exec_: NotRequired[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeExecArgsDict']]
        """
        ExecAction specifies a command to execute.
        Structure is documented below.
        """
        failure_threshold: NotRequired[pulumi.Input[_builtins.int]]
        """
        Number of consecutive failures before the probe is considered failed.
        Defaults to 3. Minimum value is 1.
        Maps to Kubernetes probe argument 'failureThreshold'.
        """
        grpc: NotRequired[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeGrpcArgsDict']]
        """
        GrpcAction checks the health of a container using a gRPC service.
        Structure is documented below.
        """
        http_get: NotRequired[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeHttpGetArgsDict']]
        """
        HttpGetAction describes an action based on HTTP Get requests.
        Structure is documented below.
        """
        initial_delay_seconds: NotRequired[pulumi.Input[_builtins.int]]
        """
        Number of seconds to wait before starting the probe. Defaults to 0.
        Minimum value is 0.
        Maps to Kubernetes probe argument 'initialDelaySeconds'.
        """
        period_seconds: NotRequired[pulumi.Input[_builtins.int]]
        """
        How often (in seconds) to perform the probe. Default to 10 seconds.
        Minimum value is 1. Must be less than timeout_seconds.
        Maps to Kubernetes probe argument 'periodSeconds'.
        """
        success_threshold: NotRequired[pulumi.Input[_builtins.int]]
        """
        Number of consecutive successes before the probe is considered successful.
        Defaults to 1. Minimum value is 1.
        Maps to Kubernetes probe argument 'successThreshold'.
        """
        tcp_socket: NotRequired[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeTcpSocketArgsDict']]
        """
        TcpSocketAction probes the health of a container by opening a TCP socket
        connection.
        Structure is documented below.
        """
        timeout_seconds: NotRequired[pulumi.Input[_builtins.int]]
        """
        Number of seconds after which the probe times out. Defaults to 1 second.
        Minimum value is 1. Must be greater or equal to period_seconds.
        Maps to Kubernetes probe argument 'timeoutSeconds'.
        """
elif False:
    AiEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeArgs:
    def __init__(__self__, *,
                 exec_: Optional[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeExecArgs']] = None,
                 failure_threshold: Optional[pulumi.Input[_builtins.int]] = None,
                 grpc: Optional[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeGrpcArgs']] = None,
                 http_get: Optional[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeHttpGetArgs']] = None,
                 initial_delay_seconds: Optional[pulumi.Input[_builtins.int]] = None,
                 period_seconds: Optional[pulumi.Input[_builtins.int]] = None,
                 success_threshold: Optional[pulumi.Input[_builtins.int]] = None,
                 tcp_socket: Optional[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeTcpSocketArgs']] = None,
                 timeout_seconds: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeExecArgs'] exec_: ExecAction specifies a command to execute.
               Structure is documented below.
        :param pulumi.Input[_builtins.int] failure_threshold: Number of consecutive failures before the probe is considered failed.
               Defaults to 3. Minimum value is 1.
               Maps to Kubernetes probe argument 'failureThreshold'.
        :param pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeGrpcArgs'] grpc: GrpcAction checks the health of a container using a gRPC service.
               Structure is documented below.
        :param pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeHttpGetArgs'] http_get: HttpGetAction describes an action based on HTTP Get requests.
               Structure is documented below.
        :param pulumi.Input[_builtins.int] initial_delay_seconds: Number of seconds to wait before starting the probe. Defaults to 0.
               Minimum value is 0.
               Maps to Kubernetes probe argument 'initialDelaySeconds'.
        :param pulumi.Input[_builtins.int] period_seconds: How often (in seconds) to perform the probe. Default to 10 seconds.
               Minimum value is 1. Must be less than timeout_seconds.
               Maps to Kubernetes probe argument 'periodSeconds'.
        :param pulumi.Input[_builtins.int] success_threshold: Number of consecutive successes before the probe is considered successful.
               Defaults to 1. Minimum value is 1.
               Maps to Kubernetes probe argument 'successThreshold'.
        :param pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeTcpSocketArgs'] tcp_socket: TcpSocketAction probes the health of a container by opening a TCP socket
               connection.
               Structure is documented below.
        :param pulumi.Input[_builtins.int] timeout_seconds: Number of seconds after which the probe times out. Defaults to 1 second.
               Minimum value is 1. Must be greater or equal to period_seconds.
               Maps to Kubernetes probe argument 'timeoutSeconds'.
        """
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if grpc is not None:
            pulumi.set(__self__, "grpc", grpc)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @_builtins.property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeExecArgs']]:
        """
        ExecAction specifies a command to execute.
        Structure is documented below.
        """
        return pulumi.get(self, "exec_")

    @exec_.setter
    def exec_(self, value: Optional[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeExecArgs']]):
        pulumi.set(self, "exec_", value)

    @_builtins.property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Number of consecutive failures before the probe is considered failed.
        Defaults to 3. Minimum value is 1.
        Maps to Kubernetes probe argument 'failureThreshold'.
        """
        return pulumi.get(self, "failure_threshold")

    @failure_threshold.setter
    def failure_threshold(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "failure_threshold", value)

    @_builtins.property
    @pulumi.getter
    def grpc(self) -> Optional[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeGrpcArgs']]:
        """
        GrpcAction checks the health of a container using a gRPC service.
        Structure is documented below.
        """
        return pulumi.get(self, "grpc")

    @grpc.setter
    def grpc(self, value: Optional[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeGrpcArgs']]):
        pulumi.set(self, "grpc", value)

    @_builtins.property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeHttpGetArgs']]:
        """
        HttpGetAction describes an action based on HTTP Get requests.
        Structure is documented below.
        """
        return pulumi.get(self, "http_get")

    @http_get.setter
    def http_get(self, value: Optional[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeHttpGetArgs']]):
        pulumi.set(self, "http_get", value)

    @_builtins.property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Number of seconds to wait before starting the probe. Defaults to 0.
        Minimum value is 0.
        Maps to Kubernetes probe argument 'initialDelaySeconds'.
        """
        return pulumi.get(self, "initial_delay_seconds")

    @initial_delay_seconds.setter
    def initial_delay_seconds(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "initial_delay_seconds", value)

    @_builtins.property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        How often (in seconds) to perform the probe. Default to 10 seconds.
        Minimum value is 1. Must be less than timeout_seconds.
        Maps to Kubernetes probe argument 'periodSeconds'.
        """
        return pulumi.get(self, "period_seconds")

    @period_seconds.setter
    def period_seconds(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "period_seconds", value)

    @_builtins.property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Number of consecutive successes before the probe is considered successful.
        Defaults to 1. Minimum value is 1.
        Maps to Kubernetes probe argument 'successThreshold'.
        """
        return pulumi.get(self, "success_threshold")

    @success_threshold.setter
    def success_threshold(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "success_threshold", value)

    @_builtins.property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeTcpSocketArgs']]:
        """
        TcpSocketAction probes the health of a container by opening a TCP socket
        connection.
        Structure is documented below.
        """
        return pulumi.get(self, "tcp_socket")

    @tcp_socket.setter
    def tcp_socket(self, value: Optional[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeTcpSocketArgs']]):
        pulumi.set(self, "tcp_socket", value)

    @_builtins.property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Number of seconds after which the probe times out. Defaults to 1 second.
        Minimum value is 1. Must be greater or equal to period_seconds.
        Maps to Kubernetes probe argument 'timeoutSeconds'.
        """
        return pulumi.get(self, "timeout_seconds")

    @timeout_seconds.setter
    def timeout_seconds(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "timeout_seconds", value)


if not MYPY:
    class AiEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeExecArgsDict(TypedDict):
        commands: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Command is the command line to execute inside the container, the working
        directory for the command is root ('/') in the container's filesystem.
        The command is simply exec'd, it is not run inside a shell, so
        traditional shell instructions ('|', etc) won't work. To use a shell, you
        need to explicitly call out to that shell. Exit status of 0 is treated as
        live/healthy and non-zero is unhealthy.
        """
elif False:
    AiEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeExecArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeExecArgs:
    def __init__(__self__, *,
                 commands: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] commands: Command is the command line to execute inside the container, the working
               directory for the command is root ('/') in the container's filesystem.
               The command is simply exec'd, it is not run inside a shell, so
               traditional shell instructions ('|', etc) won't work. To use a shell, you
               need to explicitly call out to that shell. Exit status of 0 is treated as
               live/healthy and non-zero is unhealthy.
        """
        if commands is not None:
            pulumi.set(__self__, "commands", commands)

    @_builtins.property
    @pulumi.getter
    def commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Command is the command line to execute inside the container, the working
        directory for the command is root ('/') in the container's filesystem.
        The command is simply exec'd, it is not run inside a shell, so
        traditional shell instructions ('|', etc) won't work. To use a shell, you
        need to explicitly call out to that shell. Exit status of 0 is treated as
        live/healthy and non-zero is unhealthy.
        """
        return pulumi.get(self, "commands")

    @commands.setter
    def commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "commands", value)


if not MYPY:
    class AiEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeGrpcArgsDict(TypedDict):
        port: NotRequired[pulumi.Input[_builtins.int]]
        """
        Port number of the gRPC service. Number must be in the range 1 to 65535.
        """
        service: NotRequired[pulumi.Input[_builtins.str]]
        """
        Service is the name of the service to place in the gRPC
        HealthCheckRequest. See
        https://github.com/grpc/grpc/blob/master/doc/health-checking.md.
        If this is not specified, the default behavior is defined by gRPC.
        """
elif False:
    AiEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeGrpcArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeGrpcArgs:
    def __init__(__self__, *,
                 port: Optional[pulumi.Input[_builtins.int]] = None,
                 service: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.int] port: Port number of the gRPC service. Number must be in the range 1 to 65535.
        :param pulumi.Input[_builtins.str] service: Service is the name of the service to place in the gRPC
               HealthCheckRequest. See
               https://github.com/grpc/grpc/blob/master/doc/health-checking.md.
               If this is not specified, the default behavior is defined by gRPC.
        """
        if port is not None:
            pulumi.set(__self__, "port", port)
        if service is not None:
            pulumi.set(__self__, "service", service)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Port number of the gRPC service. Number must be in the range 1 to 65535.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Service is the name of the service to place in the gRPC
        HealthCheckRequest. See
        https://github.com/grpc/grpc/blob/master/doc/health-checking.md.
        If this is not specified, the default behavior is defined by gRPC.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service", value)


if not MYPY:
    class AiEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeHttpGetArgsDict(TypedDict):
        host: NotRequired[pulumi.Input[_builtins.str]]
        """
        Host name to connect to, defaults to the model serving container's IP.
        You probably want to set "Host" in httpHeaders instead.
        """
        http_headers: NotRequired[pulumi.Input[Sequence[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeHttpGetHttpHeaderArgsDict']]]]
        """
        Custom headers to set in the request. HTTP allows repeated headers.
        Structure is documented below.
        """
        path: NotRequired[pulumi.Input[_builtins.str]]
        """
        Path to access on the HTTP server.
        """
        port: NotRequired[pulumi.Input[_builtins.int]]
        """
        Number of the port to access on the container.
        Number must be in the range 1 to 65535.
        """
        scheme: NotRequired[pulumi.Input[_builtins.str]]
        """
        Scheme to use for connecting to the host.
        Defaults to HTTP. Acceptable values are "HTTP" or "HTTPS".
        """
elif False:
    AiEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeHttpGetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeHttpGetArgs:
    def __init__(__self__, *,
                 host: Optional[pulumi.Input[_builtins.str]] = None,
                 http_headers: Optional[pulumi.Input[Sequence[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeHttpGetHttpHeaderArgs']]]] = None,
                 path: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.int]] = None,
                 scheme: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] host: Host name to connect to, defaults to the model serving container's IP.
               You probably want to set "Host" in httpHeaders instead.
        :param pulumi.Input[Sequence[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeHttpGetHttpHeaderArgs']]] http_headers: Custom headers to set in the request. HTTP allows repeated headers.
               Structure is documented below.
        :param pulumi.Input[_builtins.str] path: Path to access on the HTTP server.
        :param pulumi.Input[_builtins.int] port: Number of the port to access on the container.
               Number must be in the range 1 to 65535.
        :param pulumi.Input[_builtins.str] scheme: Scheme to use for connecting to the host.
               Defaults to HTTP. Acceptable values are "HTTP" or "HTTPS".
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @_builtins.property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Host name to connect to, defaults to the model serving container's IP.
        You probably want to set "Host" in httpHeaders instead.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "host", value)

    @_builtins.property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeHttpGetHttpHeaderArgs']]]]:
        """
        Custom headers to set in the request. HTTP allows repeated headers.
        Structure is documented below.
        """
        return pulumi.get(self, "http_headers")

    @http_headers.setter
    def http_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AiEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeHttpGetHttpHeaderArgs']]]]):
        pulumi.set(self, "http_headers", value)

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Path to access on the HTTP server.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "path", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Number of the port to access on the container.
        Number must be in the range 1 to 65535.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "port", value)

    @_builtins.property
    @pulumi.getter
    def scheme(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Scheme to use for connecting to the host.
        Defaults to HTTP. Acceptable values are "HTTP" or "HTTPS".
        """
        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "scheme", value)


if not MYPY:
    class AiEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeHttpGetHttpHeaderArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The header field name.
        This will be canonicalized upon output, so case-variant names will be
        understood as the same header.
        """
        value: NotRequired[pulumi.Input[_builtins.str]]
        """
        The header field value
        """
elif False:
    AiEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeHttpGetHttpHeaderArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeHttpGetHttpHeaderArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] name: The header field name.
               This will be canonicalized upon output, so case-variant names will be
               understood as the same header.
        :param pulumi.Input[_builtins.str] value: The header field value
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The header field name.
        This will be canonicalized upon output, so case-variant names will be
        understood as the same header.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The header field value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class AiEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeTcpSocketArgsDict(TypedDict):
        host: NotRequired[pulumi.Input[_builtins.str]]
        """
        Optional: Host name to connect to, defaults to the model serving
        container's IP.
        """
        port: NotRequired[pulumi.Input[_builtins.int]]
        """
        Number of the port to access on the container.
        Number must be in the range 1 to 65535.
        """
elif False:
    AiEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeTcpSocketArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiEndpointWithModelGardenDeploymentModelConfigContainerSpecStartupProbeTcpSocketArgs:
    def __init__(__self__, *,
                 host: Optional[pulumi.Input[_builtins.str]] = None,
                 port: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] host: Optional: Host name to connect to, defaults to the model serving
               container's IP.
        :param pulumi.Input[_builtins.int] port: Number of the port to access on the container.
               Number must be in the range 1 to 65535.
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @_builtins.property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Optional: Host name to connect to, defaults to the model serving
        container's IP.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "host", value)

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Number of the port to access on the container.
        Number must be in the range 1 to 65535.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "port", value)


if not MYPY:
    class AiFeatureGroupBigQueryArgsDict(TypedDict):
        big_query_source: pulumi.Input['AiFeatureGroupBigQueryBigQuerySourceArgsDict']
        """
        The BigQuery source URI that points to either a BigQuery Table or View.
        Structure is documented below.
        """
        entity_id_columns: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Columns to construct entityId / row keys. If not provided defaults to entityId.
        """
elif False:
    AiFeatureGroupBigQueryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiFeatureGroupBigQueryArgs:
    def __init__(__self__, *,
                 big_query_source: pulumi.Input['AiFeatureGroupBigQueryBigQuerySourceArgs'],
                 entity_id_columns: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        :param pulumi.Input['AiFeatureGroupBigQueryBigQuerySourceArgs'] big_query_source: The BigQuery source URI that points to either a BigQuery Table or View.
               Structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] entity_id_columns: Columns to construct entityId / row keys. If not provided defaults to entityId.
        """
        pulumi.set(__self__, "big_query_source", big_query_source)
        if entity_id_columns is not None:
            pulumi.set(__self__, "entity_id_columns", entity_id_columns)

    @_builtins.property
    @pulumi.getter(name="bigQuerySource")
    def big_query_source(self) -> pulumi.Input['AiFeatureGroupBigQueryBigQuerySourceArgs']:
        """
        The BigQuery source URI that points to either a BigQuery Table or View.
        Structure is documented below.
        """
        return pulumi.get(self, "big_query_source")

    @big_query_source.setter
    def big_query_source(self, value: pulumi.Input['AiFeatureGroupBigQueryBigQuerySourceArgs']):
        pulumi.set(self, "big_query_source", value)

    @_builtins.property
    @pulumi.getter(name="entityIdColumns")
    def entity_id_columns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Columns to construct entityId / row keys. If not provided defaults to entityId.
        """
        return pulumi.get(self, "entity_id_columns")

    @entity_id_columns.setter
    def entity_id_columns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "entity_id_columns", value)


if not MYPY:
    class AiFeatureGroupBigQueryBigQuerySourceArgsDict(TypedDict):
        input_uri: pulumi.Input[_builtins.str]
        """
        BigQuery URI to a table, up to 2000 characters long. For example: `bq://projectId.bqDatasetId.bqTableId.`
        """
elif False:
    AiFeatureGroupBigQueryBigQuerySourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiFeatureGroupBigQueryBigQuerySourceArgs:
    def __init__(__self__, *,
                 input_uri: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] input_uri: BigQuery URI to a table, up to 2000 characters long. For example: `bq://projectId.bqDatasetId.bqTableId.`
        """
        pulumi.set(__self__, "input_uri", input_uri)

    @_builtins.property
    @pulumi.getter(name="inputUri")
    def input_uri(self) -> pulumi.Input[_builtins.str]:
        """
        BigQuery URI to a table, up to 2000 characters long. For example: `bq://projectId.bqDatasetId.bqTableId.`
        """
        return pulumi.get(self, "input_uri")

    @input_uri.setter
    def input_uri(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "input_uri", value)


if not MYPY:
    class AiFeatureGroupIamBindingConditionArgsDict(TypedDict):
        expression: pulumi.Input[_builtins.str]
        title: pulumi.Input[_builtins.str]
        description: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    AiFeatureGroupIamBindingConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiFeatureGroupIamBindingConditionArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[_builtins.str],
                 title: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "title", title)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @_builtins.property
    @pulumi.getter
    def expression(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "expression", value)

    @_builtins.property
    @pulumi.getter
    def title(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "title", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)


if not MYPY:
    class AiFeatureGroupIamMemberConditionArgsDict(TypedDict):
        expression: pulumi.Input[_builtins.str]
        title: pulumi.Input[_builtins.str]
        description: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    AiFeatureGroupIamMemberConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiFeatureGroupIamMemberConditionArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[_builtins.str],
                 title: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "title", title)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @_builtins.property
    @pulumi.getter
    def expression(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "expression", value)

    @_builtins.property
    @pulumi.getter
    def title(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "title", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)


if not MYPY:
    class AiFeatureOnlineStoreBigtableArgsDict(TypedDict):
        auto_scaling: pulumi.Input['AiFeatureOnlineStoreBigtableAutoScalingArgsDict']
        """
        Autoscaling config applied to Bigtable Instance.
        Structure is documented below.
        """
elif False:
    AiFeatureOnlineStoreBigtableArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiFeatureOnlineStoreBigtableArgs:
    def __init__(__self__, *,
                 auto_scaling: pulumi.Input['AiFeatureOnlineStoreBigtableAutoScalingArgs']):
        """
        :param pulumi.Input['AiFeatureOnlineStoreBigtableAutoScalingArgs'] auto_scaling: Autoscaling config applied to Bigtable Instance.
               Structure is documented below.
        """
        pulumi.set(__self__, "auto_scaling", auto_scaling)

    @_builtins.property
    @pulumi.getter(name="autoScaling")
    def auto_scaling(self) -> pulumi.Input['AiFeatureOnlineStoreBigtableAutoScalingArgs']:
        """
        Autoscaling config applied to Bigtable Instance.
        Structure is documented below.
        """
        return pulumi.get(self, "auto_scaling")

    @auto_scaling.setter
    def auto_scaling(self, value: pulumi.Input['AiFeatureOnlineStoreBigtableAutoScalingArgs']):
        pulumi.set(self, "auto_scaling", value)


if not MYPY:
    class AiFeatureOnlineStoreBigtableAutoScalingArgsDict(TypedDict):
        max_node_count: pulumi.Input[_builtins.int]
        """
        The maximum number of nodes to scale up to. Must be greater than or equal to minNodeCount, and less than or equal to 10 times of 'minNodeCount'.
        """
        min_node_count: pulumi.Input[_builtins.int]
        """
        The minimum number of nodes to scale down to. Must be greater than or equal to 1.
        """
        cpu_utilization_target: NotRequired[pulumi.Input[_builtins.int]]
        """
        A percentage of the cluster's CPU capacity. Can be from 10% to 80%. When a cluster's CPU utilization exceeds the target that you have set, Bigtable immediately adds nodes to the cluster. When CPU utilization is substantially lower than the target, Bigtable removes nodes. If not set will default to 50%.
        """
elif False:
    AiFeatureOnlineStoreBigtableAutoScalingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiFeatureOnlineStoreBigtableAutoScalingArgs:
    def __init__(__self__, *,
                 max_node_count: pulumi.Input[_builtins.int],
                 min_node_count: pulumi.Input[_builtins.int],
                 cpu_utilization_target: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.int] max_node_count: The maximum number of nodes to scale up to. Must be greater than or equal to minNodeCount, and less than or equal to 10 times of 'minNodeCount'.
        :param pulumi.Input[_builtins.int] min_node_count: The minimum number of nodes to scale down to. Must be greater than or equal to 1.
        :param pulumi.Input[_builtins.int] cpu_utilization_target: A percentage of the cluster's CPU capacity. Can be from 10% to 80%. When a cluster's CPU utilization exceeds the target that you have set, Bigtable immediately adds nodes to the cluster. When CPU utilization is substantially lower than the target, Bigtable removes nodes. If not set will default to 50%.
        """
        pulumi.set(__self__, "max_node_count", max_node_count)
        pulumi.set(__self__, "min_node_count", min_node_count)
        if cpu_utilization_target is not None:
            pulumi.set(__self__, "cpu_utilization_target", cpu_utilization_target)

    @_builtins.property
    @pulumi.getter(name="maxNodeCount")
    def max_node_count(self) -> pulumi.Input[_builtins.int]:
        """
        The maximum number of nodes to scale up to. Must be greater than or equal to minNodeCount, and less than or equal to 10 times of 'minNodeCount'.
        """
        return pulumi.get(self, "max_node_count")

    @max_node_count.setter
    def max_node_count(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "max_node_count", value)

    @_builtins.property
    @pulumi.getter(name="minNodeCount")
    def min_node_count(self) -> pulumi.Input[_builtins.int]:
        """
        The minimum number of nodes to scale down to. Must be greater than or equal to 1.
        """
        return pulumi.get(self, "min_node_count")

    @min_node_count.setter
    def min_node_count(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "min_node_count", value)

    @_builtins.property
    @pulumi.getter(name="cpuUtilizationTarget")
    def cpu_utilization_target(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        A percentage of the cluster's CPU capacity. Can be from 10% to 80%. When a cluster's CPU utilization exceeds the target that you have set, Bigtable immediately adds nodes to the cluster. When CPU utilization is substantially lower than the target, Bigtable removes nodes. If not set will default to 50%.
        """
        return pulumi.get(self, "cpu_utilization_target")

    @cpu_utilization_target.setter
    def cpu_utilization_target(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "cpu_utilization_target", value)


if not MYPY:
    class AiFeatureOnlineStoreDedicatedServingEndpointArgsDict(TypedDict):
        private_service_connect_config: NotRequired[pulumi.Input['AiFeatureOnlineStoreDedicatedServingEndpointPrivateServiceConnectConfigArgsDict']]
        """
        Private service connect config.
        Structure is documented below.
        """
        public_endpoint_domain_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        (Output)
        Domain name to use for this FeatureOnlineStore
        """
        service_attachment: NotRequired[pulumi.Input[_builtins.str]]
        """
        (Output)
        Name of the service attachment resource. Applicable only if private service connect is enabled and after FeatureViewSync is created.
        """
elif False:
    AiFeatureOnlineStoreDedicatedServingEndpointArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiFeatureOnlineStoreDedicatedServingEndpointArgs:
    def __init__(__self__, *,
                 private_service_connect_config: Optional[pulumi.Input['AiFeatureOnlineStoreDedicatedServingEndpointPrivateServiceConnectConfigArgs']] = None,
                 public_endpoint_domain_name: Optional[pulumi.Input[_builtins.str]] = None,
                 service_attachment: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input['AiFeatureOnlineStoreDedicatedServingEndpointPrivateServiceConnectConfigArgs'] private_service_connect_config: Private service connect config.
               Structure is documented below.
        :param pulumi.Input[_builtins.str] public_endpoint_domain_name: (Output)
               Domain name to use for this FeatureOnlineStore
        :param pulumi.Input[_builtins.str] service_attachment: (Output)
               Name of the service attachment resource. Applicable only if private service connect is enabled and after FeatureViewSync is created.
        """
        if private_service_connect_config is not None:
            pulumi.set(__self__, "private_service_connect_config", private_service_connect_config)
        if public_endpoint_domain_name is not None:
            pulumi.set(__self__, "public_endpoint_domain_name", public_endpoint_domain_name)
        if service_attachment is not None:
            pulumi.set(__self__, "service_attachment", service_attachment)

    @_builtins.property
    @pulumi.getter(name="privateServiceConnectConfig")
    def private_service_connect_config(self) -> Optional[pulumi.Input['AiFeatureOnlineStoreDedicatedServingEndpointPrivateServiceConnectConfigArgs']]:
        """
        Private service connect config.
        Structure is documented below.
        """
        return pulumi.get(self, "private_service_connect_config")

    @private_service_connect_config.setter
    def private_service_connect_config(self, value: Optional[pulumi.Input['AiFeatureOnlineStoreDedicatedServingEndpointPrivateServiceConnectConfigArgs']]):
        pulumi.set(self, "private_service_connect_config", value)

    @_builtins.property
    @pulumi.getter(name="publicEndpointDomainName")
    def public_endpoint_domain_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        (Output)
        Domain name to use for this FeatureOnlineStore
        """
        return pulumi.get(self, "public_endpoint_domain_name")

    @public_endpoint_domain_name.setter
    def public_endpoint_domain_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "public_endpoint_domain_name", value)

    @_builtins.property
    @pulumi.getter(name="serviceAttachment")
    def service_attachment(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        (Output)
        Name of the service attachment resource. Applicable only if private service connect is enabled and after FeatureViewSync is created.
        """
        return pulumi.get(self, "service_attachment")

    @service_attachment.setter
    def service_attachment(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_attachment", value)


if not MYPY:
    class AiFeatureOnlineStoreDedicatedServingEndpointPrivateServiceConnectConfigArgsDict(TypedDict):
        enable_private_service_connect: pulumi.Input[_builtins.bool]
        """
        If set to true, customers will use private service connection to send request. Otherwise, the connection will set to public endpoint.
        """
        project_allowlists: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        A list of Projects from which the forwarding rule will target the service attachment.
        """
elif False:
    AiFeatureOnlineStoreDedicatedServingEndpointPrivateServiceConnectConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiFeatureOnlineStoreDedicatedServingEndpointPrivateServiceConnectConfigArgs:
    def __init__(__self__, *,
                 enable_private_service_connect: pulumi.Input[_builtins.bool],
                 project_allowlists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        :param pulumi.Input[_builtins.bool] enable_private_service_connect: If set to true, customers will use private service connection to send request. Otherwise, the connection will set to public endpoint.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] project_allowlists: A list of Projects from which the forwarding rule will target the service attachment.
        """
        pulumi.set(__self__, "enable_private_service_connect", enable_private_service_connect)
        if project_allowlists is not None:
            pulumi.set(__self__, "project_allowlists", project_allowlists)

    @_builtins.property
    @pulumi.getter(name="enablePrivateServiceConnect")
    def enable_private_service_connect(self) -> pulumi.Input[_builtins.bool]:
        """
        If set to true, customers will use private service connection to send request. Otherwise, the connection will set to public endpoint.
        """
        return pulumi.get(self, "enable_private_service_connect")

    @enable_private_service_connect.setter
    def enable_private_service_connect(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "enable_private_service_connect", value)

    @_builtins.property
    @pulumi.getter(name="projectAllowlists")
    def project_allowlists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        A list of Projects from which the forwarding rule will target the service attachment.
        """
        return pulumi.get(self, "project_allowlists")

    @project_allowlists.setter
    def project_allowlists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "project_allowlists", value)


if not MYPY:
    class AiFeatureOnlineStoreEmbeddingManagementArgsDict(TypedDict):
        enabled: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Enable embedding management.
        """
elif False:
    AiFeatureOnlineStoreEmbeddingManagementArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiFeatureOnlineStoreEmbeddingManagementArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input[_builtins.bool] enabled: Enable embedding management.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enable embedding management.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enabled", value)


if not MYPY:
    class AiFeatureOnlineStoreFeatureviewBigQuerySourceArgsDict(TypedDict):
        entity_id_columns: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]
        """
        Columns to construct entityId / row keys. Start by supporting 1 only.
        """
        uri: pulumi.Input[_builtins.str]
        """
        The BigQuery view URI that will be materialized on each sync trigger based on FeatureView.SyncConfig.
        """
elif False:
    AiFeatureOnlineStoreFeatureviewBigQuerySourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiFeatureOnlineStoreFeatureviewBigQuerySourceArgs:
    def __init__(__self__, *,
                 entity_id_columns: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 uri: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] entity_id_columns: Columns to construct entityId / row keys. Start by supporting 1 only.
        :param pulumi.Input[_builtins.str] uri: The BigQuery view URI that will be materialized on each sync trigger based on FeatureView.SyncConfig.
        """
        pulumi.set(__self__, "entity_id_columns", entity_id_columns)
        pulumi.set(__self__, "uri", uri)

    @_builtins.property
    @pulumi.getter(name="entityIdColumns")
    def entity_id_columns(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        Columns to construct entityId / row keys. Start by supporting 1 only.
        """
        return pulumi.get(self, "entity_id_columns")

    @entity_id_columns.setter
    def entity_id_columns(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "entity_id_columns", value)

    @_builtins.property
    @pulumi.getter
    def uri(self) -> pulumi.Input[_builtins.str]:
        """
        The BigQuery view URI that will be materialized on each sync trigger based on FeatureView.SyncConfig.
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "uri", value)


if not MYPY:
    class AiFeatureOnlineStoreFeatureviewFeatureRegistrySourceArgsDict(TypedDict):
        feature_groups: pulumi.Input[Sequence[pulumi.Input['AiFeatureOnlineStoreFeatureviewFeatureRegistrySourceFeatureGroupArgsDict']]]
        """
        List of features that need to be synced to Online Store.
        Structure is documented below.
        """
        project_number: NotRequired[pulumi.Input[_builtins.str]]
        """
        The project number of the parent project of the feature Groups.
        """
elif False:
    AiFeatureOnlineStoreFeatureviewFeatureRegistrySourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiFeatureOnlineStoreFeatureviewFeatureRegistrySourceArgs:
    def __init__(__self__, *,
                 feature_groups: pulumi.Input[Sequence[pulumi.Input['AiFeatureOnlineStoreFeatureviewFeatureRegistrySourceFeatureGroupArgs']]],
                 project_number: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['AiFeatureOnlineStoreFeatureviewFeatureRegistrySourceFeatureGroupArgs']]] feature_groups: List of features that need to be synced to Online Store.
               Structure is documented below.
        :param pulumi.Input[_builtins.str] project_number: The project number of the parent project of the feature Groups.
        """
        pulumi.set(__self__, "feature_groups", feature_groups)
        if project_number is not None:
            pulumi.set(__self__, "project_number", project_number)

    @_builtins.property
    @pulumi.getter(name="featureGroups")
    def feature_groups(self) -> pulumi.Input[Sequence[pulumi.Input['AiFeatureOnlineStoreFeatureviewFeatureRegistrySourceFeatureGroupArgs']]]:
        """
        List of features that need to be synced to Online Store.
        Structure is documented below.
        """
        return pulumi.get(self, "feature_groups")

    @feature_groups.setter
    def feature_groups(self, value: pulumi.Input[Sequence[pulumi.Input['AiFeatureOnlineStoreFeatureviewFeatureRegistrySourceFeatureGroupArgs']]]):
        pulumi.set(self, "feature_groups", value)

    @_builtins.property
    @pulumi.getter(name="projectNumber")
    def project_number(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The project number of the parent project of the feature Groups.
        """
        return pulumi.get(self, "project_number")

    @project_number.setter
    def project_number(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "project_number", value)


if not MYPY:
    class AiFeatureOnlineStoreFeatureviewFeatureRegistrySourceFeatureGroupArgsDict(TypedDict):
        feature_group_id: pulumi.Input[_builtins.str]
        """
        Identifier of the feature group.
        """
        feature_ids: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]
        """
        Identifiers of features under the feature group.
        """
elif False:
    AiFeatureOnlineStoreFeatureviewFeatureRegistrySourceFeatureGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiFeatureOnlineStoreFeatureviewFeatureRegistrySourceFeatureGroupArgs:
    def __init__(__self__, *,
                 feature_group_id: pulumi.Input[_builtins.str],
                 feature_ids: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        """
        :param pulumi.Input[_builtins.str] feature_group_id: Identifier of the feature group.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] feature_ids: Identifiers of features under the feature group.
        """
        pulumi.set(__self__, "feature_group_id", feature_group_id)
        pulumi.set(__self__, "feature_ids", feature_ids)

    @_builtins.property
    @pulumi.getter(name="featureGroupId")
    def feature_group_id(self) -> pulumi.Input[_builtins.str]:
        """
        Identifier of the feature group.
        """
        return pulumi.get(self, "feature_group_id")

    @feature_group_id.setter
    def feature_group_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "feature_group_id", value)

    @_builtins.property
    @pulumi.getter(name="featureIds")
    def feature_ids(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        Identifiers of features under the feature group.
        """
        return pulumi.get(self, "feature_ids")

    @feature_ids.setter
    def feature_ids(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "feature_ids", value)


if not MYPY:
    class AiFeatureOnlineStoreFeatureviewIamBindingConditionArgsDict(TypedDict):
        expression: pulumi.Input[_builtins.str]
        title: pulumi.Input[_builtins.str]
        description: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    AiFeatureOnlineStoreFeatureviewIamBindingConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiFeatureOnlineStoreFeatureviewIamBindingConditionArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[_builtins.str],
                 title: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "title", title)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @_builtins.property
    @pulumi.getter
    def expression(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "expression", value)

    @_builtins.property
    @pulumi.getter
    def title(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "title", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)


if not MYPY:
    class AiFeatureOnlineStoreFeatureviewIamMemberConditionArgsDict(TypedDict):
        expression: pulumi.Input[_builtins.str]
        title: pulumi.Input[_builtins.str]
        description: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    AiFeatureOnlineStoreFeatureviewIamMemberConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiFeatureOnlineStoreFeatureviewIamMemberConditionArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[_builtins.str],
                 title: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "title", title)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @_builtins.property
    @pulumi.getter
    def expression(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "expression", value)

    @_builtins.property
    @pulumi.getter
    def title(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "title", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)


if not MYPY:
    class AiFeatureOnlineStoreFeatureviewSyncConfigArgsDict(TypedDict):
        cron: NotRequired[pulumi.Input[_builtins.str]]
        """
        Cron schedule (https://en.wikipedia.org/wiki/Cron) to launch scheduled runs.
        To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: "CRON_TZ=${IANA_TIME_ZONE}" or "TZ=${IANA_TIME_ZONE}".
        """
elif False:
    AiFeatureOnlineStoreFeatureviewSyncConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiFeatureOnlineStoreFeatureviewSyncConfigArgs:
    def __init__(__self__, *,
                 cron: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] cron: Cron schedule (https://en.wikipedia.org/wiki/Cron) to launch scheduled runs.
               To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: "CRON_TZ=${IANA_TIME_ZONE}" or "TZ=${IANA_TIME_ZONE}".
        """
        if cron is not None:
            pulumi.set(__self__, "cron", cron)

    @_builtins.property
    @pulumi.getter
    def cron(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Cron schedule (https://en.wikipedia.org/wiki/Cron) to launch scheduled runs.
        To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: "CRON_TZ=${IANA_TIME_ZONE}" or "TZ=${IANA_TIME_ZONE}".
        """
        return pulumi.get(self, "cron")

    @cron.setter
    def cron(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cron", value)


if not MYPY:
    class AiFeatureOnlineStoreFeatureviewVectorSearchConfigArgsDict(TypedDict):
        embedding_column: pulumi.Input[_builtins.str]
        """
        Column of embedding. This column contains the source data to create index for vector search.
        """
        brute_force_config: NotRequired[pulumi.Input['AiFeatureOnlineStoreFeatureviewVectorSearchConfigBruteForceConfigArgsDict']]
        """
        Configuration options for using brute force search, which simply implements the standard linear search in the database for each query. It is primarily meant for benchmarking and to generate the ground truth for approximate search.
        """
        crowding_column: NotRequired[pulumi.Input[_builtins.str]]
        """
        Column of crowding. This column contains crowding attribute which is a constraint on a neighbor list produced by nearest neighbor search requiring that no more than some value k' of the k neighbors returned have the same value of crowdingAttribute.
        """
        distance_measure_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        The distance measure used in nearest neighbor search.
        For details on allowed values, see the [API documentation](https://cloud.google.com/vertex-ai/docs/reference/rest/v1beta1/projects.locations.featureOnlineStores.featureViews#DistanceMeasureType).
        Possible values are: `SQUARED_L2_DISTANCE`, `COSINE_DISTANCE`, `DOT_PRODUCT_DISTANCE`.
        """
        embedding_dimension: NotRequired[pulumi.Input[_builtins.int]]
        """
        The number of dimensions of the input embedding.
        """
        filter_columns: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Columns of features that are used to filter vector search results.
        """
        tree_ah_config: NotRequired[pulumi.Input['AiFeatureOnlineStoreFeatureviewVectorSearchConfigTreeAhConfigArgsDict']]
        """
        Configuration options for the tree-AH algorithm (Shallow tree + Asymmetric Hashing). Please refer to this paper for more details: https://arxiv.org/abs/1908.10396
        Structure is documented below.
        """
elif False:
    AiFeatureOnlineStoreFeatureviewVectorSearchConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiFeatureOnlineStoreFeatureviewVectorSearchConfigArgs:
    def __init__(__self__, *,
                 embedding_column: pulumi.Input[_builtins.str],
                 brute_force_config: Optional[pulumi.Input['AiFeatureOnlineStoreFeatureviewVectorSearchConfigBruteForceConfigArgs']] = None,
                 crowding_column: Optional[pulumi.Input[_builtins.str]] = None,
                 distance_measure_type: Optional[pulumi.Input[_builtins.str]] = None,
                 embedding_dimension: Optional[pulumi.Input[_builtins.int]] = None,
                 filter_columns: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 tree_ah_config: Optional[pulumi.Input['AiFeatureOnlineStoreFeatureviewVectorSearchConfigTreeAhConfigArgs']] = None):
        """
        :param pulumi.Input[_builtins.str] embedding_column: Column of embedding. This column contains the source data to create index for vector search.
        :param pulumi.Input['AiFeatureOnlineStoreFeatureviewVectorSearchConfigBruteForceConfigArgs'] brute_force_config: Configuration options for using brute force search, which simply implements the standard linear search in the database for each query. It is primarily meant for benchmarking and to generate the ground truth for approximate search.
        :param pulumi.Input[_builtins.str] crowding_column: Column of crowding. This column contains crowding attribute which is a constraint on a neighbor list produced by nearest neighbor search requiring that no more than some value k' of the k neighbors returned have the same value of crowdingAttribute.
        :param pulumi.Input[_builtins.str] distance_measure_type: The distance measure used in nearest neighbor search.
               For details on allowed values, see the [API documentation](https://cloud.google.com/vertex-ai/docs/reference/rest/v1beta1/projects.locations.featureOnlineStores.featureViews#DistanceMeasureType).
               Possible values are: `SQUARED_L2_DISTANCE`, `COSINE_DISTANCE`, `DOT_PRODUCT_DISTANCE`.
        :param pulumi.Input[_builtins.int] embedding_dimension: The number of dimensions of the input embedding.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] filter_columns: Columns of features that are used to filter vector search results.
        :param pulumi.Input['AiFeatureOnlineStoreFeatureviewVectorSearchConfigTreeAhConfigArgs'] tree_ah_config: Configuration options for the tree-AH algorithm (Shallow tree + Asymmetric Hashing). Please refer to this paper for more details: https://arxiv.org/abs/1908.10396
               Structure is documented below.
        """
        pulumi.set(__self__, "embedding_column", embedding_column)
        if brute_force_config is not None:
            pulumi.set(__self__, "brute_force_config", brute_force_config)
        if crowding_column is not None:
            pulumi.set(__self__, "crowding_column", crowding_column)
        if distance_measure_type is not None:
            pulumi.set(__self__, "distance_measure_type", distance_measure_type)
        if embedding_dimension is not None:
            pulumi.set(__self__, "embedding_dimension", embedding_dimension)
        if filter_columns is not None:
            pulumi.set(__self__, "filter_columns", filter_columns)
        if tree_ah_config is not None:
            pulumi.set(__self__, "tree_ah_config", tree_ah_config)

    @_builtins.property
    @pulumi.getter(name="embeddingColumn")
    def embedding_column(self) -> pulumi.Input[_builtins.str]:
        """
        Column of embedding. This column contains the source data to create index for vector search.
        """
        return pulumi.get(self, "embedding_column")

    @embedding_column.setter
    def embedding_column(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "embedding_column", value)

    @_builtins.property
    @pulumi.getter(name="bruteForceConfig")
    def brute_force_config(self) -> Optional[pulumi.Input['AiFeatureOnlineStoreFeatureviewVectorSearchConfigBruteForceConfigArgs']]:
        """
        Configuration options for using brute force search, which simply implements the standard linear search in the database for each query. It is primarily meant for benchmarking and to generate the ground truth for approximate search.
        """
        return pulumi.get(self, "brute_force_config")

    @brute_force_config.setter
    def brute_force_config(self, value: Optional[pulumi.Input['AiFeatureOnlineStoreFeatureviewVectorSearchConfigBruteForceConfigArgs']]):
        pulumi.set(self, "brute_force_config", value)

    @_builtins.property
    @pulumi.getter(name="crowdingColumn")
    def crowding_column(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Column of crowding. This column contains crowding attribute which is a constraint on a neighbor list produced by nearest neighbor search requiring that no more than some value k' of the k neighbors returned have the same value of crowdingAttribute.
        """
        return pulumi.get(self, "crowding_column")

    @crowding_column.setter
    def crowding_column(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "crowding_column", value)

    @_builtins.property
    @pulumi.getter(name="distanceMeasureType")
    def distance_measure_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The distance measure used in nearest neighbor search.
        For details on allowed values, see the [API documentation](https://cloud.google.com/vertex-ai/docs/reference/rest/v1beta1/projects.locations.featureOnlineStores.featureViews#DistanceMeasureType).
        Possible values are: `SQUARED_L2_DISTANCE`, `COSINE_DISTANCE`, `DOT_PRODUCT_DISTANCE`.
        """
        return pulumi.get(self, "distance_measure_type")

    @distance_measure_type.setter
    def distance_measure_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "distance_measure_type", value)

    @_builtins.property
    @pulumi.getter(name="embeddingDimension")
    def embedding_dimension(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The number of dimensions of the input embedding.
        """
        return pulumi.get(self, "embedding_dimension")

    @embedding_dimension.setter
    def embedding_dimension(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "embedding_dimension", value)

    @_builtins.property
    @pulumi.getter(name="filterColumns")
    def filter_columns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Columns of features that are used to filter vector search results.
        """
        return pulumi.get(self, "filter_columns")

    @filter_columns.setter
    def filter_columns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "filter_columns", value)

    @_builtins.property
    @pulumi.getter(name="treeAhConfig")
    def tree_ah_config(self) -> Optional[pulumi.Input['AiFeatureOnlineStoreFeatureviewVectorSearchConfigTreeAhConfigArgs']]:
        """
        Configuration options for the tree-AH algorithm (Shallow tree + Asymmetric Hashing). Please refer to this paper for more details: https://arxiv.org/abs/1908.10396
        Structure is documented below.
        """
        return pulumi.get(self, "tree_ah_config")

    @tree_ah_config.setter
    def tree_ah_config(self, value: Optional[pulumi.Input['AiFeatureOnlineStoreFeatureviewVectorSearchConfigTreeAhConfigArgs']]):
        pulumi.set(self, "tree_ah_config", value)


if not MYPY:
    class AiFeatureOnlineStoreFeatureviewVectorSearchConfigBruteForceConfigArgsDict(TypedDict):
        pass
elif False:
    AiFeatureOnlineStoreFeatureviewVectorSearchConfigBruteForceConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiFeatureOnlineStoreFeatureviewVectorSearchConfigBruteForceConfigArgs:
    def __init__(__self__):
        pass


if not MYPY:
    class AiFeatureOnlineStoreFeatureviewVectorSearchConfigTreeAhConfigArgsDict(TypedDict):
        leaf_node_embedding_count: NotRequired[pulumi.Input[_builtins.str]]
        """
        Number of embeddings on each leaf node. The default value is 1000 if not set.
        """
elif False:
    AiFeatureOnlineStoreFeatureviewVectorSearchConfigTreeAhConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiFeatureOnlineStoreFeatureviewVectorSearchConfigTreeAhConfigArgs:
    def __init__(__self__, *,
                 leaf_node_embedding_count: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] leaf_node_embedding_count: Number of embeddings on each leaf node. The default value is 1000 if not set.
        """
        if leaf_node_embedding_count is not None:
            pulumi.set(__self__, "leaf_node_embedding_count", leaf_node_embedding_count)

    @_builtins.property
    @pulumi.getter(name="leafNodeEmbeddingCount")
    def leaf_node_embedding_count(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Number of embeddings on each leaf node. The default value is 1000 if not set.
        """
        return pulumi.get(self, "leaf_node_embedding_count")

    @leaf_node_embedding_count.setter
    def leaf_node_embedding_count(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "leaf_node_embedding_count", value)


if not MYPY:
    class AiFeatureOnlineStoreIamBindingConditionArgsDict(TypedDict):
        expression: pulumi.Input[_builtins.str]
        title: pulumi.Input[_builtins.str]
        description: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    AiFeatureOnlineStoreIamBindingConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiFeatureOnlineStoreIamBindingConditionArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[_builtins.str],
                 title: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "title", title)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @_builtins.property
    @pulumi.getter
    def expression(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "expression", value)

    @_builtins.property
    @pulumi.getter
    def title(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "title", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)


if not MYPY:
    class AiFeatureOnlineStoreIamMemberConditionArgsDict(TypedDict):
        expression: pulumi.Input[_builtins.str]
        title: pulumi.Input[_builtins.str]
        description: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    AiFeatureOnlineStoreIamMemberConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiFeatureOnlineStoreIamMemberConditionArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[_builtins.str],
                 title: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "title", title)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @_builtins.property
    @pulumi.getter
    def expression(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "expression", value)

    @_builtins.property
    @pulumi.getter
    def title(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "title", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)


if not MYPY:
    class AiFeatureOnlineStoreOptimizedArgsDict(TypedDict):
        pass
elif False:
    AiFeatureOnlineStoreOptimizedArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiFeatureOnlineStoreOptimizedArgs:
    def __init__(__self__):
        pass


if not MYPY:
    class AiFeatureStoreEncryptionSpecArgsDict(TypedDict):
        kms_key_name: pulumi.Input[_builtins.str]
        """
        The Cloud KMS resource identifier of the customer managed encryption key used to protect a resource. Has the form: projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key. The key needs to be in the same region as where the compute resource is created.
        """
elif False:
    AiFeatureStoreEncryptionSpecArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiFeatureStoreEncryptionSpecArgs:
    def __init__(__self__, *,
                 kms_key_name: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] kms_key_name: The Cloud KMS resource identifier of the customer managed encryption key used to protect a resource. Has the form: projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key. The key needs to be in the same region as where the compute resource is created.
        """
        pulumi.set(__self__, "kms_key_name", kms_key_name)

    @_builtins.property
    @pulumi.getter(name="kmsKeyName")
    def kms_key_name(self) -> pulumi.Input[_builtins.str]:
        """
        The Cloud KMS resource identifier of the customer managed encryption key used to protect a resource. Has the form: projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key. The key needs to be in the same region as where the compute resource is created.
        """
        return pulumi.get(self, "kms_key_name")

    @kms_key_name.setter
    def kms_key_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "kms_key_name", value)


if not MYPY:
    class AiFeatureStoreEntityTypeIamBindingConditionArgsDict(TypedDict):
        expression: pulumi.Input[_builtins.str]
        title: pulumi.Input[_builtins.str]
        description: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    AiFeatureStoreEntityTypeIamBindingConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiFeatureStoreEntityTypeIamBindingConditionArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[_builtins.str],
                 title: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "title", title)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @_builtins.property
    @pulumi.getter
    def expression(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "expression", value)

    @_builtins.property
    @pulumi.getter
    def title(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "title", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)


if not MYPY:
    class AiFeatureStoreEntityTypeIamMemberConditionArgsDict(TypedDict):
        expression: pulumi.Input[_builtins.str]
        title: pulumi.Input[_builtins.str]
        description: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    AiFeatureStoreEntityTypeIamMemberConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiFeatureStoreEntityTypeIamMemberConditionArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[_builtins.str],
                 title: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "title", title)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @_builtins.property
    @pulumi.getter
    def expression(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "expression", value)

    @_builtins.property
    @pulumi.getter
    def title(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "title", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)


if not MYPY:
    class AiFeatureStoreEntityTypeMonitoringConfigArgsDict(TypedDict):
        categorical_threshold_config: NotRequired[pulumi.Input['AiFeatureStoreEntityTypeMonitoringConfigCategoricalThresholdConfigArgsDict']]
        """
        Threshold for categorical features of anomaly detection. This is shared by all types of Featurestore Monitoring for categorical features (i.e. Features with type (Feature.ValueType) BOOL or STRING).
        Structure is documented below.
        """
        import_features_analysis: NotRequired[pulumi.Input['AiFeatureStoreEntityTypeMonitoringConfigImportFeaturesAnalysisArgsDict']]
        """
        The config for ImportFeatures Analysis Based Feature Monitoring.
        Structure is documented below.
        """
        numerical_threshold_config: NotRequired[pulumi.Input['AiFeatureStoreEntityTypeMonitoringConfigNumericalThresholdConfigArgsDict']]
        """
        Threshold for numerical features of anomaly detection. This is shared by all objectives of Featurestore Monitoring for numerical features (i.e. Features with type (Feature.ValueType) DOUBLE or INT64).
        Structure is documented below.
        """
        snapshot_analysis: NotRequired[pulumi.Input['AiFeatureStoreEntityTypeMonitoringConfigSnapshotAnalysisArgsDict']]
        """
        The config for Snapshot Analysis Based Feature Monitoring.
        Structure is documented below.
        """
elif False:
    AiFeatureStoreEntityTypeMonitoringConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiFeatureStoreEntityTypeMonitoringConfigArgs:
    def __init__(__self__, *,
                 categorical_threshold_config: Optional[pulumi.Input['AiFeatureStoreEntityTypeMonitoringConfigCategoricalThresholdConfigArgs']] = None,
                 import_features_analysis: Optional[pulumi.Input['AiFeatureStoreEntityTypeMonitoringConfigImportFeaturesAnalysisArgs']] = None,
                 numerical_threshold_config: Optional[pulumi.Input['AiFeatureStoreEntityTypeMonitoringConfigNumericalThresholdConfigArgs']] = None,
                 snapshot_analysis: Optional[pulumi.Input['AiFeatureStoreEntityTypeMonitoringConfigSnapshotAnalysisArgs']] = None):
        """
        :param pulumi.Input['AiFeatureStoreEntityTypeMonitoringConfigCategoricalThresholdConfigArgs'] categorical_threshold_config: Threshold for categorical features of anomaly detection. This is shared by all types of Featurestore Monitoring for categorical features (i.e. Features with type (Feature.ValueType) BOOL or STRING).
               Structure is documented below.
        :param pulumi.Input['AiFeatureStoreEntityTypeMonitoringConfigImportFeaturesAnalysisArgs'] import_features_analysis: The config for ImportFeatures Analysis Based Feature Monitoring.
               Structure is documented below.
        :param pulumi.Input['AiFeatureStoreEntityTypeMonitoringConfigNumericalThresholdConfigArgs'] numerical_threshold_config: Threshold for numerical features of anomaly detection. This is shared by all objectives of Featurestore Monitoring for numerical features (i.e. Features with type (Feature.ValueType) DOUBLE or INT64).
               Structure is documented below.
        :param pulumi.Input['AiFeatureStoreEntityTypeMonitoringConfigSnapshotAnalysisArgs'] snapshot_analysis: The config for Snapshot Analysis Based Feature Monitoring.
               Structure is documented below.
        """
        if categorical_threshold_config is not None:
            pulumi.set(__self__, "categorical_threshold_config", categorical_threshold_config)
        if import_features_analysis is not None:
            pulumi.set(__self__, "import_features_analysis", import_features_analysis)
        if numerical_threshold_config is not None:
            pulumi.set(__self__, "numerical_threshold_config", numerical_threshold_config)
        if snapshot_analysis is not None:
            pulumi.set(__self__, "snapshot_analysis", snapshot_analysis)

    @_builtins.property
    @pulumi.getter(name="categoricalThresholdConfig")
    def categorical_threshold_config(self) -> Optional[pulumi.Input['AiFeatureStoreEntityTypeMonitoringConfigCategoricalThresholdConfigArgs']]:
        """
        Threshold for categorical features of anomaly detection. This is shared by all types of Featurestore Monitoring for categorical features (i.e. Features with type (Feature.ValueType) BOOL or STRING).
        Structure is documented below.
        """
        return pulumi.get(self, "categorical_threshold_config")

    @categorical_threshold_config.setter
    def categorical_threshold_config(self, value: Optional[pulumi.Input['AiFeatureStoreEntityTypeMonitoringConfigCategoricalThresholdConfigArgs']]):
        pulumi.set(self, "categorical_threshold_config", value)

    @_builtins.property
    @pulumi.getter(name="importFeaturesAnalysis")
    def import_features_analysis(self) -> Optional[pulumi.Input['AiFeatureStoreEntityTypeMonitoringConfigImportFeaturesAnalysisArgs']]:
        """
        The config for ImportFeatures Analysis Based Feature Monitoring.
        Structure is documented below.
        """
        return pulumi.get(self, "import_features_analysis")

    @import_features_analysis.setter
    def import_features_analysis(self, value: Optional[pulumi.Input['AiFeatureStoreEntityTypeMonitoringConfigImportFeaturesAnalysisArgs']]):
        pulumi.set(self, "import_features_analysis", value)

    @_builtins.property
    @pulumi.getter(name="numericalThresholdConfig")
    def numerical_threshold_config(self) -> Optional[pulumi.Input['AiFeatureStoreEntityTypeMonitoringConfigNumericalThresholdConfigArgs']]:
        """
        Threshold for numerical features of anomaly detection. This is shared by all objectives of Featurestore Monitoring for numerical features (i.e. Features with type (Feature.ValueType) DOUBLE or INT64).
        Structure is documented below.
        """
        return pulumi.get(self, "numerical_threshold_config")

    @numerical_threshold_config.setter
    def numerical_threshold_config(self, value: Optional[pulumi.Input['AiFeatureStoreEntityTypeMonitoringConfigNumericalThresholdConfigArgs']]):
        pulumi.set(self, "numerical_threshold_config", value)

    @_builtins.property
    @pulumi.getter(name="snapshotAnalysis")
    def snapshot_analysis(self) -> Optional[pulumi.Input['AiFeatureStoreEntityTypeMonitoringConfigSnapshotAnalysisArgs']]:
        """
        The config for Snapshot Analysis Based Feature Monitoring.
        Structure is documented below.
        """
        return pulumi.get(self, "snapshot_analysis")

    @snapshot_analysis.setter
    def snapshot_analysis(self, value: Optional[pulumi.Input['AiFeatureStoreEntityTypeMonitoringConfigSnapshotAnalysisArgs']]):
        pulumi.set(self, "snapshot_analysis", value)


if not MYPY:
    class AiFeatureStoreEntityTypeMonitoringConfigCategoricalThresholdConfigArgsDict(TypedDict):
        value: pulumi.Input[_builtins.float]
        """
        Specify a threshold value that can trigger the alert. For categorical feature, the distribution distance is calculated by L-inifinity norm. Each feature must have a non-zero threshold if they need to be monitored. Otherwise no alert will be triggered for that feature. The default value is 0.3.
        """
elif False:
    AiFeatureStoreEntityTypeMonitoringConfigCategoricalThresholdConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiFeatureStoreEntityTypeMonitoringConfigCategoricalThresholdConfigArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[_builtins.float]):
        """
        :param pulumi.Input[_builtins.float] value: Specify a threshold value that can trigger the alert. For categorical feature, the distribution distance is calculated by L-inifinity norm. Each feature must have a non-zero threshold if they need to be monitored. Otherwise no alert will be triggered for that feature. The default value is 0.3.
        """
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Input[_builtins.float]:
        """
        Specify a threshold value that can trigger the alert. For categorical feature, the distribution distance is calculated by L-inifinity norm. Each feature must have a non-zero threshold if they need to be monitored. Otherwise no alert will be triggered for that feature. The default value is 0.3.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "value", value)


if not MYPY:
    class AiFeatureStoreEntityTypeMonitoringConfigImportFeaturesAnalysisArgsDict(TypedDict):
        anomaly_detection_baseline: NotRequired[pulumi.Input[_builtins.str]]
        """
        Defines the baseline to do anomaly detection for feature values imported by each [entityTypes.importFeatureValues][] operation. The value must be one of the values below:
        * LATEST_STATS: Choose the later one statistics generated by either most recent snapshot analysis or previous import features analysis. If non of them exists, skip anomaly detection and only generate a statistics.
        * MOST_RECENT_SNAPSHOT_STATS: Use the statistics generated by the most recent snapshot analysis if exists.
        * PREVIOUS_IMPORT_FEATURES_STATS: Use the statistics generated by the previous import features analysis if exists.
        """
        state: NotRequired[pulumi.Input[_builtins.str]]
        """
        Whether to enable / disable / inherite default hebavior for import features analysis. The value must be one of the values below:
        * DEFAULT: The default behavior of whether to enable the monitoring. EntityType-level config: disabled.
        * ENABLED: Explicitly enables import features analysis. EntityType-level config: by default enables import features analysis for all Features under it.
        * DISABLED: Explicitly disables import features analysis. EntityType-level config: by default disables import features analysis for all Features under it.
        """
elif False:
    AiFeatureStoreEntityTypeMonitoringConfigImportFeaturesAnalysisArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiFeatureStoreEntityTypeMonitoringConfigImportFeaturesAnalysisArgs:
    def __init__(__self__, *,
                 anomaly_detection_baseline: Optional[pulumi.Input[_builtins.str]] = None,
                 state: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] anomaly_detection_baseline: Defines the baseline to do anomaly detection for feature values imported by each [entityTypes.importFeatureValues][] operation. The value must be one of the values below:
               * LATEST_STATS: Choose the later one statistics generated by either most recent snapshot analysis or previous import features analysis. If non of them exists, skip anomaly detection and only generate a statistics.
               * MOST_RECENT_SNAPSHOT_STATS: Use the statistics generated by the most recent snapshot analysis if exists.
               * PREVIOUS_IMPORT_FEATURES_STATS: Use the statistics generated by the previous import features analysis if exists.
        :param pulumi.Input[_builtins.str] state: Whether to enable / disable / inherite default hebavior for import features analysis. The value must be one of the values below:
               * DEFAULT: The default behavior of whether to enable the monitoring. EntityType-level config: disabled.
               * ENABLED: Explicitly enables import features analysis. EntityType-level config: by default enables import features analysis for all Features under it.
               * DISABLED: Explicitly disables import features analysis. EntityType-level config: by default disables import features analysis for all Features under it.
        """
        if anomaly_detection_baseline is not None:
            pulumi.set(__self__, "anomaly_detection_baseline", anomaly_detection_baseline)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @_builtins.property
    @pulumi.getter(name="anomalyDetectionBaseline")
    def anomaly_detection_baseline(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Defines the baseline to do anomaly detection for feature values imported by each [entityTypes.importFeatureValues][] operation. The value must be one of the values below:
        * LATEST_STATS: Choose the later one statistics generated by either most recent snapshot analysis or previous import features analysis. If non of them exists, skip anomaly detection and only generate a statistics.
        * MOST_RECENT_SNAPSHOT_STATS: Use the statistics generated by the most recent snapshot analysis if exists.
        * PREVIOUS_IMPORT_FEATURES_STATS: Use the statistics generated by the previous import features analysis if exists.
        """
        return pulumi.get(self, "anomaly_detection_baseline")

    @anomaly_detection_baseline.setter
    def anomaly_detection_baseline(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "anomaly_detection_baseline", value)

    @_builtins.property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Whether to enable / disable / inherite default hebavior for import features analysis. The value must be one of the values below:
        * DEFAULT: The default behavior of whether to enable the monitoring. EntityType-level config: disabled.
        * ENABLED: Explicitly enables import features analysis. EntityType-level config: by default enables import features analysis for all Features under it.
        * DISABLED: Explicitly disables import features analysis. EntityType-level config: by default disables import features analysis for all Features under it.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "state", value)


if not MYPY:
    class AiFeatureStoreEntityTypeMonitoringConfigNumericalThresholdConfigArgsDict(TypedDict):
        value: pulumi.Input[_builtins.float]
        """
        Specify a threshold value that can trigger the alert. For numerical feature, the distribution distance is calculated by Jensen–Shannon divergence. Each feature must have a non-zero threshold if they need to be monitored. Otherwise no alert will be triggered for that feature. The default value is 0.3.
        """
elif False:
    AiFeatureStoreEntityTypeMonitoringConfigNumericalThresholdConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiFeatureStoreEntityTypeMonitoringConfigNumericalThresholdConfigArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[_builtins.float]):
        """
        :param pulumi.Input[_builtins.float] value: Specify a threshold value that can trigger the alert. For numerical feature, the distribution distance is calculated by Jensen–Shannon divergence. Each feature must have a non-zero threshold if they need to be monitored. Otherwise no alert will be triggered for that feature. The default value is 0.3.
        """
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Input[_builtins.float]:
        """
        Specify a threshold value that can trigger the alert. For numerical feature, the distribution distance is calculated by Jensen–Shannon divergence. Each feature must have a non-zero threshold if they need to be monitored. Otherwise no alert will be triggered for that feature. The default value is 0.3.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "value", value)


if not MYPY:
    class AiFeatureStoreEntityTypeMonitoringConfigSnapshotAnalysisArgsDict(TypedDict):
        disabled: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The monitoring schedule for snapshot analysis. For EntityType-level config: unset / disabled = true indicates disabled by default for Features under it; otherwise by default enable snapshot analysis monitoring with monitoringInterval for Features under it.
        """
        monitoring_interval: NotRequired[pulumi.Input[_builtins.str]]
        """
        Configuration of the snapshot analysis based monitoring pipeline running interval. The value is rolled up to full day.
        A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".

        > **Warning:** `monitoring_interval` is deprecated and will be removed in a future release.
        """
        monitoring_interval_days: NotRequired[pulumi.Input[_builtins.int]]
        """
        Configuration of the snapshot analysis based monitoring pipeline running interval. The value indicates number of days. The default value is 1.
        If both FeaturestoreMonitoringConfig.SnapshotAnalysis.monitoring_interval_days and [FeaturestoreMonitoringConfig.SnapshotAnalysis.monitoring_interval][] are set when creating/updating EntityTypes/Features, FeaturestoreMonitoringConfig.SnapshotAnalysis.monitoring_interval_days will be used.
        """
        staleness_days: NotRequired[pulumi.Input[_builtins.int]]
        """
        Customized export features time window for snapshot analysis. Unit is one day. The default value is 21 days. Minimum value is 1 day. Maximum value is 4000 days.
        """
elif False:
    AiFeatureStoreEntityTypeMonitoringConfigSnapshotAnalysisArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiFeatureStoreEntityTypeMonitoringConfigSnapshotAnalysisArgs:
    def __init__(__self__, *,
                 disabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 monitoring_interval: Optional[pulumi.Input[_builtins.str]] = None,
                 monitoring_interval_days: Optional[pulumi.Input[_builtins.int]] = None,
                 staleness_days: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.bool] disabled: The monitoring schedule for snapshot analysis. For EntityType-level config: unset / disabled = true indicates disabled by default for Features under it; otherwise by default enable snapshot analysis monitoring with monitoringInterval for Features under it.
        :param pulumi.Input[_builtins.str] monitoring_interval: Configuration of the snapshot analysis based monitoring pipeline running interval. The value is rolled up to full day.
               A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
               
               > **Warning:** `monitoring_interval` is deprecated and will be removed in a future release.
        :param pulumi.Input[_builtins.int] monitoring_interval_days: Configuration of the snapshot analysis based monitoring pipeline running interval. The value indicates number of days. The default value is 1.
               If both FeaturestoreMonitoringConfig.SnapshotAnalysis.monitoring_interval_days and [FeaturestoreMonitoringConfig.SnapshotAnalysis.monitoring_interval][] are set when creating/updating EntityTypes/Features, FeaturestoreMonitoringConfig.SnapshotAnalysis.monitoring_interval_days will be used.
        :param pulumi.Input[_builtins.int] staleness_days: Customized export features time window for snapshot analysis. Unit is one day. The default value is 21 days. Minimum value is 1 day. Maximum value is 4000 days.
        """
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if monitoring_interval is not None:
            warnings.warn("""`monitoring_interval` is deprecated and will be removed in a future release.""", DeprecationWarning)
            pulumi.log.warn("""monitoring_interval is deprecated: `monitoring_interval` is deprecated and will be removed in a future release.""")
        if monitoring_interval is not None:
            pulumi.set(__self__, "monitoring_interval", monitoring_interval)
        if monitoring_interval_days is not None:
            pulumi.set(__self__, "monitoring_interval_days", monitoring_interval_days)
        if staleness_days is not None:
            pulumi.set(__self__, "staleness_days", staleness_days)

    @_builtins.property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The monitoring schedule for snapshot analysis. For EntityType-level config: unset / disabled = true indicates disabled by default for Features under it; otherwise by default enable snapshot analysis monitoring with monitoringInterval for Features under it.
        """
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "disabled", value)

    @_builtins.property
    @pulumi.getter(name="monitoringInterval")
    @_utilities.deprecated("""`monitoring_interval` is deprecated and will be removed in a future release.""")
    def monitoring_interval(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Configuration of the snapshot analysis based monitoring pipeline running interval. The value is rolled up to full day.
        A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".

        > **Warning:** `monitoring_interval` is deprecated and will be removed in a future release.
        """
        return pulumi.get(self, "monitoring_interval")

    @monitoring_interval.setter
    def monitoring_interval(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "monitoring_interval", value)

    @_builtins.property
    @pulumi.getter(name="monitoringIntervalDays")
    def monitoring_interval_days(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Configuration of the snapshot analysis based monitoring pipeline running interval. The value indicates number of days. The default value is 1.
        If both FeaturestoreMonitoringConfig.SnapshotAnalysis.monitoring_interval_days and [FeaturestoreMonitoringConfig.SnapshotAnalysis.monitoring_interval][] are set when creating/updating EntityTypes/Features, FeaturestoreMonitoringConfig.SnapshotAnalysis.monitoring_interval_days will be used.
        """
        return pulumi.get(self, "monitoring_interval_days")

    @monitoring_interval_days.setter
    def monitoring_interval_days(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "monitoring_interval_days", value)

    @_builtins.property
    @pulumi.getter(name="stalenessDays")
    def staleness_days(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Customized export features time window for snapshot analysis. Unit is one day. The default value is 21 days. Minimum value is 1 day. Maximum value is 4000 days.
        """
        return pulumi.get(self, "staleness_days")

    @staleness_days.setter
    def staleness_days(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "staleness_days", value)


if not MYPY:
    class AiFeatureStoreIamBindingConditionArgsDict(TypedDict):
        expression: pulumi.Input[_builtins.str]
        title: pulumi.Input[_builtins.str]
        description: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    AiFeatureStoreIamBindingConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiFeatureStoreIamBindingConditionArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[_builtins.str],
                 title: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "title", title)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @_builtins.property
    @pulumi.getter
    def expression(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "expression", value)

    @_builtins.property
    @pulumi.getter
    def title(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "title", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)


if not MYPY:
    class AiFeatureStoreIamMemberConditionArgsDict(TypedDict):
        expression: pulumi.Input[_builtins.str]
        title: pulumi.Input[_builtins.str]
        description: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    AiFeatureStoreIamMemberConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiFeatureStoreIamMemberConditionArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[_builtins.str],
                 title: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "title", title)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @_builtins.property
    @pulumi.getter
    def expression(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "expression", value)

    @_builtins.property
    @pulumi.getter
    def title(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "title", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)


if not MYPY:
    class AiFeatureStoreOnlineServingConfigArgsDict(TypedDict):
        fixed_node_count: NotRequired[pulumi.Input[_builtins.int]]
        """
        The number of nodes for each cluster. The number of nodes will not scale automatically but can be scaled manually by providing different values when updating.
        """
        scaling: NotRequired[pulumi.Input['AiFeatureStoreOnlineServingConfigScalingArgsDict']]
        """
        Online serving scaling configuration. Only one of fixedNodeCount and scaling can be set. Setting one will reset the other.
        Structure is documented below.
        """
elif False:
    AiFeatureStoreOnlineServingConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiFeatureStoreOnlineServingConfigArgs:
    def __init__(__self__, *,
                 fixed_node_count: Optional[pulumi.Input[_builtins.int]] = None,
                 scaling: Optional[pulumi.Input['AiFeatureStoreOnlineServingConfigScalingArgs']] = None):
        """
        :param pulumi.Input[_builtins.int] fixed_node_count: The number of nodes for each cluster. The number of nodes will not scale automatically but can be scaled manually by providing different values when updating.
        :param pulumi.Input['AiFeatureStoreOnlineServingConfigScalingArgs'] scaling: Online serving scaling configuration. Only one of fixedNodeCount and scaling can be set. Setting one will reset the other.
               Structure is documented below.
        """
        if fixed_node_count is not None:
            pulumi.set(__self__, "fixed_node_count", fixed_node_count)
        if scaling is not None:
            pulumi.set(__self__, "scaling", scaling)

    @_builtins.property
    @pulumi.getter(name="fixedNodeCount")
    def fixed_node_count(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The number of nodes for each cluster. The number of nodes will not scale automatically but can be scaled manually by providing different values when updating.
        """
        return pulumi.get(self, "fixed_node_count")

    @fixed_node_count.setter
    def fixed_node_count(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "fixed_node_count", value)

    @_builtins.property
    @pulumi.getter
    def scaling(self) -> Optional[pulumi.Input['AiFeatureStoreOnlineServingConfigScalingArgs']]:
        """
        Online serving scaling configuration. Only one of fixedNodeCount and scaling can be set. Setting one will reset the other.
        Structure is documented below.
        """
        return pulumi.get(self, "scaling")

    @scaling.setter
    def scaling(self, value: Optional[pulumi.Input['AiFeatureStoreOnlineServingConfigScalingArgs']]):
        pulumi.set(self, "scaling", value)


if not MYPY:
    class AiFeatureStoreOnlineServingConfigScalingArgsDict(TypedDict):
        max_node_count: pulumi.Input[_builtins.int]
        """
        The maximum number of nodes to scale up to. Must be greater than minNodeCount, and less than or equal to 10 times of 'minNodeCount'.
        """
        min_node_count: pulumi.Input[_builtins.int]
        """
        The minimum number of nodes to scale down to. Must be greater than or equal to 1.
        """
elif False:
    AiFeatureStoreOnlineServingConfigScalingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiFeatureStoreOnlineServingConfigScalingArgs:
    def __init__(__self__, *,
                 max_node_count: pulumi.Input[_builtins.int],
                 min_node_count: pulumi.Input[_builtins.int]):
        """
        :param pulumi.Input[_builtins.int] max_node_count: The maximum number of nodes to scale up to. Must be greater than minNodeCount, and less than or equal to 10 times of 'minNodeCount'.
        :param pulumi.Input[_builtins.int] min_node_count: The minimum number of nodes to scale down to. Must be greater than or equal to 1.
        """
        pulumi.set(__self__, "max_node_count", max_node_count)
        pulumi.set(__self__, "min_node_count", min_node_count)

    @_builtins.property
    @pulumi.getter(name="maxNodeCount")
    def max_node_count(self) -> pulumi.Input[_builtins.int]:
        """
        The maximum number of nodes to scale up to. Must be greater than minNodeCount, and less than or equal to 10 times of 'minNodeCount'.
        """
        return pulumi.get(self, "max_node_count")

    @max_node_count.setter
    def max_node_count(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "max_node_count", value)

    @_builtins.property
    @pulumi.getter(name="minNodeCount")
    def min_node_count(self) -> pulumi.Input[_builtins.int]:
        """
        The minimum number of nodes to scale down to. Must be greater than or equal to 1.
        """
        return pulumi.get(self, "min_node_count")

    @min_node_count.setter
    def min_node_count(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "min_node_count", value)


if not MYPY:
    class AiIndexDeployedIndexArgsDict(TypedDict):
        deployed_index_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        (Output)
        The ID of the DeployedIndex in the above IndexEndpoint.
        """
        index_endpoint: NotRequired[pulumi.Input[_builtins.str]]
        """
        (Output)
        A resource name of the IndexEndpoint.
        """
elif False:
    AiIndexDeployedIndexArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiIndexDeployedIndexArgs:
    def __init__(__self__, *,
                 deployed_index_id: Optional[pulumi.Input[_builtins.str]] = None,
                 index_endpoint: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] deployed_index_id: (Output)
               The ID of the DeployedIndex in the above IndexEndpoint.
        :param pulumi.Input[_builtins.str] index_endpoint: (Output)
               A resource name of the IndexEndpoint.
        """
        if deployed_index_id is not None:
            pulumi.set(__self__, "deployed_index_id", deployed_index_id)
        if index_endpoint is not None:
            pulumi.set(__self__, "index_endpoint", index_endpoint)

    @_builtins.property
    @pulumi.getter(name="deployedIndexId")
    def deployed_index_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        (Output)
        The ID of the DeployedIndex in the above IndexEndpoint.
        """
        return pulumi.get(self, "deployed_index_id")

    @deployed_index_id.setter
    def deployed_index_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "deployed_index_id", value)

    @_builtins.property
    @pulumi.getter(name="indexEndpoint")
    def index_endpoint(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        (Output)
        A resource name of the IndexEndpoint.
        """
        return pulumi.get(self, "index_endpoint")

    @index_endpoint.setter
    def index_endpoint(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "index_endpoint", value)


if not MYPY:
    class AiIndexEndpointDeployedIndexAutomaticResourcesArgsDict(TypedDict):
        max_replica_count: NotRequired[pulumi.Input[_builtins.int]]
        """
        The maximum number of replicas this DeployedModel may be deployed on when the traffic against it increases. If maxReplicaCount is not set, the default value is minReplicaCount. The max allowed replica count is 1000.
        The maximum number of replicas this DeployedModel may be deployed on when the traffic against it increases. If the requested value is too large, the deployment will error, but if deployment succeeds then the ability to scale the model to that many replicas is guaranteed (barring service outages). If traffic against the DeployedModel increases beyond what its replicas at maximum may handle, a portion of the traffic will be dropped. If this value is not provided, a no upper bound for scaling under heavy traffic will be assume, though Vertex AI may be unable to scale beyond certain replica number.
        """
        min_replica_count: NotRequired[pulumi.Input[_builtins.int]]
        """
        The minimum number of replicas this DeployedModel will be always deployed on. If minReplicaCount is not set, the default value is 2 (we don't provide SLA when minReplicaCount=1).
        If traffic against it increases, it may dynamically be deployed onto more replicas up to [maxReplicaCount](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/AutomaticResources#FIELDS.max_replica_count), and as traffic decreases, some of these extra replicas may be freed. If the requested value is too large, the deployment will error.
        """
elif False:
    AiIndexEndpointDeployedIndexAutomaticResourcesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiIndexEndpointDeployedIndexAutomaticResourcesArgs:
    def __init__(__self__, *,
                 max_replica_count: Optional[pulumi.Input[_builtins.int]] = None,
                 min_replica_count: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.int] max_replica_count: The maximum number of replicas this DeployedModel may be deployed on when the traffic against it increases. If maxReplicaCount is not set, the default value is minReplicaCount. The max allowed replica count is 1000.
               The maximum number of replicas this DeployedModel may be deployed on when the traffic against it increases. If the requested value is too large, the deployment will error, but if deployment succeeds then the ability to scale the model to that many replicas is guaranteed (barring service outages). If traffic against the DeployedModel increases beyond what its replicas at maximum may handle, a portion of the traffic will be dropped. If this value is not provided, a no upper bound for scaling under heavy traffic will be assume, though Vertex AI may be unable to scale beyond certain replica number.
        :param pulumi.Input[_builtins.int] min_replica_count: The minimum number of replicas this DeployedModel will be always deployed on. If minReplicaCount is not set, the default value is 2 (we don't provide SLA when minReplicaCount=1).
               If traffic against it increases, it may dynamically be deployed onto more replicas up to [maxReplicaCount](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/AutomaticResources#FIELDS.max_replica_count), and as traffic decreases, some of these extra replicas may be freed. If the requested value is too large, the deployment will error.
        """
        if max_replica_count is not None:
            pulumi.set(__self__, "max_replica_count", max_replica_count)
        if min_replica_count is not None:
            pulumi.set(__self__, "min_replica_count", min_replica_count)

    @_builtins.property
    @pulumi.getter(name="maxReplicaCount")
    def max_replica_count(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The maximum number of replicas this DeployedModel may be deployed on when the traffic against it increases. If maxReplicaCount is not set, the default value is minReplicaCount. The max allowed replica count is 1000.
        The maximum number of replicas this DeployedModel may be deployed on when the traffic against it increases. If the requested value is too large, the deployment will error, but if deployment succeeds then the ability to scale the model to that many replicas is guaranteed (barring service outages). If traffic against the DeployedModel increases beyond what its replicas at maximum may handle, a portion of the traffic will be dropped. If this value is not provided, a no upper bound for scaling under heavy traffic will be assume, though Vertex AI may be unable to scale beyond certain replica number.
        """
        return pulumi.get(self, "max_replica_count")

    @max_replica_count.setter
    def max_replica_count(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "max_replica_count", value)

    @_builtins.property
    @pulumi.getter(name="minReplicaCount")
    def min_replica_count(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The minimum number of replicas this DeployedModel will be always deployed on. If minReplicaCount is not set, the default value is 2 (we don't provide SLA when minReplicaCount=1).
        If traffic against it increases, it may dynamically be deployed onto more replicas up to [maxReplicaCount](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/AutomaticResources#FIELDS.max_replica_count), and as traffic decreases, some of these extra replicas may be freed. If the requested value is too large, the deployment will error.
        """
        return pulumi.get(self, "min_replica_count")

    @min_replica_count.setter
    def min_replica_count(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "min_replica_count", value)


if not MYPY:
    class AiIndexEndpointDeployedIndexDedicatedResourcesArgsDict(TypedDict):
        machine_spec: pulumi.Input['AiIndexEndpointDeployedIndexDedicatedResourcesMachineSpecArgsDict']
        """
        The minimum number of replicas this DeployedModel will be always deployed on.
        Structure is documented below.
        """
        min_replica_count: pulumi.Input[_builtins.int]
        """
        The minimum number of machine replicas this DeployedModel will be always deployed on. This value must be greater than or equal to 1.
        """
        max_replica_count: NotRequired[pulumi.Input[_builtins.int]]
        """
        The maximum number of replicas this DeployedModel may be deployed on when the traffic against it increases. If maxReplicaCount is not set, the default value is minReplicaCount
        """
elif False:
    AiIndexEndpointDeployedIndexDedicatedResourcesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiIndexEndpointDeployedIndexDedicatedResourcesArgs:
    def __init__(__self__, *,
                 machine_spec: pulumi.Input['AiIndexEndpointDeployedIndexDedicatedResourcesMachineSpecArgs'],
                 min_replica_count: pulumi.Input[_builtins.int],
                 max_replica_count: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input['AiIndexEndpointDeployedIndexDedicatedResourcesMachineSpecArgs'] machine_spec: The minimum number of replicas this DeployedModel will be always deployed on.
               Structure is documented below.
        :param pulumi.Input[_builtins.int] min_replica_count: The minimum number of machine replicas this DeployedModel will be always deployed on. This value must be greater than or equal to 1.
        :param pulumi.Input[_builtins.int] max_replica_count: The maximum number of replicas this DeployedModel may be deployed on when the traffic against it increases. If maxReplicaCount is not set, the default value is minReplicaCount
        """
        pulumi.set(__self__, "machine_spec", machine_spec)
        pulumi.set(__self__, "min_replica_count", min_replica_count)
        if max_replica_count is not None:
            pulumi.set(__self__, "max_replica_count", max_replica_count)

    @_builtins.property
    @pulumi.getter(name="machineSpec")
    def machine_spec(self) -> pulumi.Input['AiIndexEndpointDeployedIndexDedicatedResourcesMachineSpecArgs']:
        """
        The minimum number of replicas this DeployedModel will be always deployed on.
        Structure is documented below.
        """
        return pulumi.get(self, "machine_spec")

    @machine_spec.setter
    def machine_spec(self, value: pulumi.Input['AiIndexEndpointDeployedIndexDedicatedResourcesMachineSpecArgs']):
        pulumi.set(self, "machine_spec", value)

    @_builtins.property
    @pulumi.getter(name="minReplicaCount")
    def min_replica_count(self) -> pulumi.Input[_builtins.int]:
        """
        The minimum number of machine replicas this DeployedModel will be always deployed on. This value must be greater than or equal to 1.
        """
        return pulumi.get(self, "min_replica_count")

    @min_replica_count.setter
    def min_replica_count(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "min_replica_count", value)

    @_builtins.property
    @pulumi.getter(name="maxReplicaCount")
    def max_replica_count(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The maximum number of replicas this DeployedModel may be deployed on when the traffic against it increases. If maxReplicaCount is not set, the default value is minReplicaCount
        """
        return pulumi.get(self, "max_replica_count")

    @max_replica_count.setter
    def max_replica_count(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "max_replica_count", value)


if not MYPY:
    class AiIndexEndpointDeployedIndexDedicatedResourcesMachineSpecArgsDict(TypedDict):
        machine_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        The type of the machine.
        See the [list of machine types supported for prediction](https://cloud.google.com/vertex-ai/docs/predictions/configure-compute#machine-types)
        See the [list of machine types supported for custom training](https://cloud.google.com/vertex-ai/docs/training/configure-compute#machine-types).
        For [DeployedModel](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.endpoints#DeployedModel) this field is optional, and the default value is n1-standard-2. For [BatchPredictionJob](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.batchPredictionJobs#BatchPredictionJob) or as part of [WorkerPoolSpec](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/CustomJobSpec#WorkerPoolSpec) this field is required.
        """
elif False:
    AiIndexEndpointDeployedIndexDedicatedResourcesMachineSpecArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiIndexEndpointDeployedIndexDedicatedResourcesMachineSpecArgs:
    def __init__(__self__, *,
                 machine_type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] machine_type: The type of the machine.
               See the [list of machine types supported for prediction](https://cloud.google.com/vertex-ai/docs/predictions/configure-compute#machine-types)
               See the [list of machine types supported for custom training](https://cloud.google.com/vertex-ai/docs/training/configure-compute#machine-types).
               For [DeployedModel](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.endpoints#DeployedModel) this field is optional, and the default value is n1-standard-2. For [BatchPredictionJob](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.batchPredictionJobs#BatchPredictionJob) or as part of [WorkerPoolSpec](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/CustomJobSpec#WorkerPoolSpec) this field is required.
        """
        if machine_type is not None:
            pulumi.set(__self__, "machine_type", machine_type)

    @_builtins.property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of the machine.
        See the [list of machine types supported for prediction](https://cloud.google.com/vertex-ai/docs/predictions/configure-compute#machine-types)
        See the [list of machine types supported for custom training](https://cloud.google.com/vertex-ai/docs/training/configure-compute#machine-types).
        For [DeployedModel](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.endpoints#DeployedModel) this field is optional, and the default value is n1-standard-2. For [BatchPredictionJob](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/projects.locations.batchPredictionJobs#BatchPredictionJob) or as part of [WorkerPoolSpec](https://cloud.google.com/vertex-ai/docs/reference/rest/v1/CustomJobSpec#WorkerPoolSpec) this field is required.
        """
        return pulumi.get(self, "machine_type")

    @machine_type.setter
    def machine_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "machine_type", value)


if not MYPY:
    class AiIndexEndpointDeployedIndexDeployedIndexAuthConfigArgsDict(TypedDict):
        auth_provider: NotRequired[pulumi.Input['AiIndexEndpointDeployedIndexDeployedIndexAuthConfigAuthProviderArgsDict']]
        """
        Defines the authentication provider that the DeployedIndex uses.
        Structure is documented below.
        """
elif False:
    AiIndexEndpointDeployedIndexDeployedIndexAuthConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiIndexEndpointDeployedIndexDeployedIndexAuthConfigArgs:
    def __init__(__self__, *,
                 auth_provider: Optional[pulumi.Input['AiIndexEndpointDeployedIndexDeployedIndexAuthConfigAuthProviderArgs']] = None):
        """
        :param pulumi.Input['AiIndexEndpointDeployedIndexDeployedIndexAuthConfigAuthProviderArgs'] auth_provider: Defines the authentication provider that the DeployedIndex uses.
               Structure is documented below.
        """
        if auth_provider is not None:
            pulumi.set(__self__, "auth_provider", auth_provider)

    @_builtins.property
    @pulumi.getter(name="authProvider")
    def auth_provider(self) -> Optional[pulumi.Input['AiIndexEndpointDeployedIndexDeployedIndexAuthConfigAuthProviderArgs']]:
        """
        Defines the authentication provider that the DeployedIndex uses.
        Structure is documented below.
        """
        return pulumi.get(self, "auth_provider")

    @auth_provider.setter
    def auth_provider(self, value: Optional[pulumi.Input['AiIndexEndpointDeployedIndexDeployedIndexAuthConfigAuthProviderArgs']]):
        pulumi.set(self, "auth_provider", value)


if not MYPY:
    class AiIndexEndpointDeployedIndexDeployedIndexAuthConfigAuthProviderArgsDict(TypedDict):
        allowed_issuers: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        A list of allowed JWT issuers. Each entry must be a valid Google service account, in the following format: service-account-name@project-id.iam.gserviceaccount.com
        """
        audiences: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        The list of JWT audiences. that are allowed to access. A JWT containing any of these audiences will be accepted.
        """
elif False:
    AiIndexEndpointDeployedIndexDeployedIndexAuthConfigAuthProviderArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiIndexEndpointDeployedIndexDeployedIndexAuthConfigAuthProviderArgs:
    def __init__(__self__, *,
                 allowed_issuers: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 audiences: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] allowed_issuers: A list of allowed JWT issuers. Each entry must be a valid Google service account, in the following format: service-account-name@project-id.iam.gserviceaccount.com
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] audiences: The list of JWT audiences. that are allowed to access. A JWT containing any of these audiences will be accepted.
        """
        if allowed_issuers is not None:
            pulumi.set(__self__, "allowed_issuers", allowed_issuers)
        if audiences is not None:
            pulumi.set(__self__, "audiences", audiences)

    @_builtins.property
    @pulumi.getter(name="allowedIssuers")
    def allowed_issuers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        A list of allowed JWT issuers. Each entry must be a valid Google service account, in the following format: service-account-name@project-id.iam.gserviceaccount.com
        """
        return pulumi.get(self, "allowed_issuers")

    @allowed_issuers.setter
    def allowed_issuers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "allowed_issuers", value)

    @_builtins.property
    @pulumi.getter
    def audiences(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The list of JWT audiences. that are allowed to access. A JWT containing any of these audiences will be accepted.
        """
        return pulumi.get(self, "audiences")

    @audiences.setter
    def audiences(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "audiences", value)


if not MYPY:
    class AiIndexEndpointDeployedIndexPrivateEndpointArgsDict(TypedDict):
        match_grpc_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        (Output)
        The ip address used to send match gRPC requests.
        """
        psc_automated_endpoints: NotRequired[pulumi.Input[Sequence[pulumi.Input['AiIndexEndpointDeployedIndexPrivateEndpointPscAutomatedEndpointArgsDict']]]]
        """
        (Output)
        PscAutomatedEndpoints is populated if private service connect is enabled if PscAutomatedConfig is set.
        Structure is documented below.
        """
        service_attachment: NotRequired[pulumi.Input[_builtins.str]]
        """
        (Output)
        The name of the service attachment resource. Populated if private service connect is enabled.
        """
elif False:
    AiIndexEndpointDeployedIndexPrivateEndpointArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiIndexEndpointDeployedIndexPrivateEndpointArgs:
    def __init__(__self__, *,
                 match_grpc_address: Optional[pulumi.Input[_builtins.str]] = None,
                 psc_automated_endpoints: Optional[pulumi.Input[Sequence[pulumi.Input['AiIndexEndpointDeployedIndexPrivateEndpointPscAutomatedEndpointArgs']]]] = None,
                 service_attachment: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] match_grpc_address: (Output)
               The ip address used to send match gRPC requests.
        :param pulumi.Input[Sequence[pulumi.Input['AiIndexEndpointDeployedIndexPrivateEndpointPscAutomatedEndpointArgs']]] psc_automated_endpoints: (Output)
               PscAutomatedEndpoints is populated if private service connect is enabled if PscAutomatedConfig is set.
               Structure is documented below.
        :param pulumi.Input[_builtins.str] service_attachment: (Output)
               The name of the service attachment resource. Populated if private service connect is enabled.
        """
        if match_grpc_address is not None:
            pulumi.set(__self__, "match_grpc_address", match_grpc_address)
        if psc_automated_endpoints is not None:
            pulumi.set(__self__, "psc_automated_endpoints", psc_automated_endpoints)
        if service_attachment is not None:
            pulumi.set(__self__, "service_attachment", service_attachment)

    @_builtins.property
    @pulumi.getter(name="matchGrpcAddress")
    def match_grpc_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        (Output)
        The ip address used to send match gRPC requests.
        """
        return pulumi.get(self, "match_grpc_address")

    @match_grpc_address.setter
    def match_grpc_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "match_grpc_address", value)

    @_builtins.property
    @pulumi.getter(name="pscAutomatedEndpoints")
    def psc_automated_endpoints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AiIndexEndpointDeployedIndexPrivateEndpointPscAutomatedEndpointArgs']]]]:
        """
        (Output)
        PscAutomatedEndpoints is populated if private service connect is enabled if PscAutomatedConfig is set.
        Structure is documented below.
        """
        return pulumi.get(self, "psc_automated_endpoints")

    @psc_automated_endpoints.setter
    def psc_automated_endpoints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AiIndexEndpointDeployedIndexPrivateEndpointPscAutomatedEndpointArgs']]]]):
        pulumi.set(self, "psc_automated_endpoints", value)

    @_builtins.property
    @pulumi.getter(name="serviceAttachment")
    def service_attachment(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        (Output)
        The name of the service attachment resource. Populated if private service connect is enabled.
        """
        return pulumi.get(self, "service_attachment")

    @service_attachment.setter
    def service_attachment(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_attachment", value)


if not MYPY:
    class AiIndexEndpointDeployedIndexPrivateEndpointPscAutomatedEndpointArgsDict(TypedDict):
        match_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        (Output)
        ip Address created by the automated forwarding rule.
        """
        network: NotRequired[pulumi.Input[_builtins.str]]
        """
        (Output)
        Corresponding network in pscAutomationConfigs.
        """
        project_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        (Output)
        Corresponding projectId in pscAutomationConfigs
        """
elif False:
    AiIndexEndpointDeployedIndexPrivateEndpointPscAutomatedEndpointArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiIndexEndpointDeployedIndexPrivateEndpointPscAutomatedEndpointArgs:
    def __init__(__self__, *,
                 match_address: Optional[pulumi.Input[_builtins.str]] = None,
                 network: Optional[pulumi.Input[_builtins.str]] = None,
                 project_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] match_address: (Output)
               ip Address created by the automated forwarding rule.
        :param pulumi.Input[_builtins.str] network: (Output)
               Corresponding network in pscAutomationConfigs.
        :param pulumi.Input[_builtins.str] project_id: (Output)
               Corresponding projectId in pscAutomationConfigs
        """
        if match_address is not None:
            pulumi.set(__self__, "match_address", match_address)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)

    @_builtins.property
    @pulumi.getter(name="matchAddress")
    def match_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        (Output)
        ip Address created by the automated forwarding rule.
        """
        return pulumi.get(self, "match_address")

    @match_address.setter
    def match_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "match_address", value)

    @_builtins.property
    @pulumi.getter
    def network(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        (Output)
        Corresponding network in pscAutomationConfigs.
        """
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network", value)

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        (Output)
        Corresponding projectId in pscAutomationConfigs
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "project_id", value)


if not MYPY:
    class AiIndexEndpointPrivateServiceConnectConfigArgsDict(TypedDict):
        enable_private_service_connect: pulumi.Input[_builtins.bool]
        """
        If set to true, the IndexEndpoint is created without private service access.
        """
        project_allowlists: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        A list of Projects from which the forwarding rule will target the service attachment.
        """
elif False:
    AiIndexEndpointPrivateServiceConnectConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiIndexEndpointPrivateServiceConnectConfigArgs:
    def __init__(__self__, *,
                 enable_private_service_connect: pulumi.Input[_builtins.bool],
                 project_allowlists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        :param pulumi.Input[_builtins.bool] enable_private_service_connect: If set to true, the IndexEndpoint is created without private service access.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] project_allowlists: A list of Projects from which the forwarding rule will target the service attachment.
        """
        pulumi.set(__self__, "enable_private_service_connect", enable_private_service_connect)
        if project_allowlists is not None:
            pulumi.set(__self__, "project_allowlists", project_allowlists)

    @_builtins.property
    @pulumi.getter(name="enablePrivateServiceConnect")
    def enable_private_service_connect(self) -> pulumi.Input[_builtins.bool]:
        """
        If set to true, the IndexEndpoint is created without private service access.
        """
        return pulumi.get(self, "enable_private_service_connect")

    @enable_private_service_connect.setter
    def enable_private_service_connect(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "enable_private_service_connect", value)

    @_builtins.property
    @pulumi.getter(name="projectAllowlists")
    def project_allowlists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        A list of Projects from which the forwarding rule will target the service attachment.
        """
        return pulumi.get(self, "project_allowlists")

    @project_allowlists.setter
    def project_allowlists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "project_allowlists", value)


if not MYPY:
    class AiIndexIndexStatArgsDict(TypedDict):
        shards_count: NotRequired[pulumi.Input[_builtins.int]]
        """
        (Output)
        The number of shards in the Index.
        """
        vectors_count: NotRequired[pulumi.Input[_builtins.str]]
        """
        (Output)
        The number of vectors in the Index.
        """
elif False:
    AiIndexIndexStatArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiIndexIndexStatArgs:
    def __init__(__self__, *,
                 shards_count: Optional[pulumi.Input[_builtins.int]] = None,
                 vectors_count: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.int] shards_count: (Output)
               The number of shards in the Index.
        :param pulumi.Input[_builtins.str] vectors_count: (Output)
               The number of vectors in the Index.
        """
        if shards_count is not None:
            pulumi.set(__self__, "shards_count", shards_count)
        if vectors_count is not None:
            pulumi.set(__self__, "vectors_count", vectors_count)

    @_builtins.property
    @pulumi.getter(name="shardsCount")
    def shards_count(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        (Output)
        The number of shards in the Index.
        """
        return pulumi.get(self, "shards_count")

    @shards_count.setter
    def shards_count(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "shards_count", value)

    @_builtins.property
    @pulumi.getter(name="vectorsCount")
    def vectors_count(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        (Output)
        The number of vectors in the Index.
        """
        return pulumi.get(self, "vectors_count")

    @vectors_count.setter
    def vectors_count(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vectors_count", value)


if not MYPY:
    class AiIndexMetadataArgsDict(TypedDict):
        config: NotRequired[pulumi.Input['AiIndexMetadataConfigArgsDict']]
        """
        The configuration of the Matching Engine Index.
        Structure is documented below.
        """
        contents_delta_uri: NotRequired[pulumi.Input[_builtins.str]]
        """
        Allows inserting, updating  or deleting the contents of the Matching Engine Index.
        The string must be a valid Cloud Storage directory path. If this
        field is set when calling IndexService.UpdateIndex, then no other
        Index field can be also updated as part of the same call.
        The expected structure and format of the files this URI points to is
        described at https://cloud.google.com/vertex-ai/docs/matching-engine/using-matching-engine#input-data-format
        """
        is_complete_overwrite: NotRequired[pulumi.Input[_builtins.bool]]
        """
        If this field is set together with contentsDeltaUri when calling IndexService.UpdateIndex,
        then existing content of the Index will be replaced by the data from the contentsDeltaUri.
        """
elif False:
    AiIndexMetadataArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiIndexMetadataArgs:
    def __init__(__self__, *,
                 config: Optional[pulumi.Input['AiIndexMetadataConfigArgs']] = None,
                 contents_delta_uri: Optional[pulumi.Input[_builtins.str]] = None,
                 is_complete_overwrite: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        :param pulumi.Input['AiIndexMetadataConfigArgs'] config: The configuration of the Matching Engine Index.
               Structure is documented below.
        :param pulumi.Input[_builtins.str] contents_delta_uri: Allows inserting, updating  or deleting the contents of the Matching Engine Index.
               The string must be a valid Cloud Storage directory path. If this
               field is set when calling IndexService.UpdateIndex, then no other
               Index field can be also updated as part of the same call.
               The expected structure and format of the files this URI points to is
               described at https://cloud.google.com/vertex-ai/docs/matching-engine/using-matching-engine#input-data-format
        :param pulumi.Input[_builtins.bool] is_complete_overwrite: If this field is set together with contentsDeltaUri when calling IndexService.UpdateIndex,
               then existing content of the Index will be replaced by the data from the contentsDeltaUri.
        """
        if config is not None:
            pulumi.set(__self__, "config", config)
        if contents_delta_uri is not None:
            pulumi.set(__self__, "contents_delta_uri", contents_delta_uri)
        if is_complete_overwrite is not None:
            pulumi.set(__self__, "is_complete_overwrite", is_complete_overwrite)

    @_builtins.property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input['AiIndexMetadataConfigArgs']]:
        """
        The configuration of the Matching Engine Index.
        Structure is documented below.
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input['AiIndexMetadataConfigArgs']]):
        pulumi.set(self, "config", value)

    @_builtins.property
    @pulumi.getter(name="contentsDeltaUri")
    def contents_delta_uri(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Allows inserting, updating  or deleting the contents of the Matching Engine Index.
        The string must be a valid Cloud Storage directory path. If this
        field is set when calling IndexService.UpdateIndex, then no other
        Index field can be also updated as part of the same call.
        The expected structure and format of the files this URI points to is
        described at https://cloud.google.com/vertex-ai/docs/matching-engine/using-matching-engine#input-data-format
        """
        return pulumi.get(self, "contents_delta_uri")

    @contents_delta_uri.setter
    def contents_delta_uri(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "contents_delta_uri", value)

    @_builtins.property
    @pulumi.getter(name="isCompleteOverwrite")
    def is_complete_overwrite(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If this field is set together with contentsDeltaUri when calling IndexService.UpdateIndex,
        then existing content of the Index will be replaced by the data from the contentsDeltaUri.
        """
        return pulumi.get(self, "is_complete_overwrite")

    @is_complete_overwrite.setter
    def is_complete_overwrite(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_complete_overwrite", value)


if not MYPY:
    class AiIndexMetadataConfigArgsDict(TypedDict):
        dimensions: pulumi.Input[_builtins.int]
        """
        The number of dimensions of the input vectors.
        """
        algorithm_config: NotRequired[pulumi.Input['AiIndexMetadataConfigAlgorithmConfigArgsDict']]
        """
        The configuration with regard to the algorithms used for efficient search.
        Structure is documented below.
        """
        approximate_neighbors_count: NotRequired[pulumi.Input[_builtins.int]]
        """
        The default number of neighbors to find via approximate search before exact reordering is
        performed. Exact reordering is a procedure where results returned by an
        approximate search algorithm are reordered via a more expensive distance computation.
        Required if tree-AH algorithm is used.
        """
        distance_measure_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        The distance measure used in nearest neighbor search. The value must be one of the followings:
        * SQUARED_L2_DISTANCE: Euclidean (L_2) Distance
        * L1_DISTANCE: Manhattan (L_1) Distance
        * COSINE_DISTANCE: Cosine Distance. Defined as 1 - cosine similarity.
        * DOT_PRODUCT_DISTANCE: Dot Product Distance. Defined as a negative of the dot product
        """
        feature_norm_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        Type of normalization to be carried out on each vector. The value must be one of the followings:
        * UNIT_L2_NORM: Unit L2 normalization type
        * NONE: No normalization type is specified.
        """
        shard_size: NotRequired[pulumi.Input[_builtins.str]]
        """
        Index data is split into equal parts to be processed. These are called "shards".
        The shard size must be specified when creating an index. The value must be one of the followings:
        * SHARD_SIZE_SMALL: Small (2GB)
        * SHARD_SIZE_MEDIUM: Medium (20GB)
        * SHARD_SIZE_LARGE: Large (50GB)
        """
elif False:
    AiIndexMetadataConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiIndexMetadataConfigArgs:
    def __init__(__self__, *,
                 dimensions: pulumi.Input[_builtins.int],
                 algorithm_config: Optional[pulumi.Input['AiIndexMetadataConfigAlgorithmConfigArgs']] = None,
                 approximate_neighbors_count: Optional[pulumi.Input[_builtins.int]] = None,
                 distance_measure_type: Optional[pulumi.Input[_builtins.str]] = None,
                 feature_norm_type: Optional[pulumi.Input[_builtins.str]] = None,
                 shard_size: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.int] dimensions: The number of dimensions of the input vectors.
        :param pulumi.Input['AiIndexMetadataConfigAlgorithmConfigArgs'] algorithm_config: The configuration with regard to the algorithms used for efficient search.
               Structure is documented below.
        :param pulumi.Input[_builtins.int] approximate_neighbors_count: The default number of neighbors to find via approximate search before exact reordering is
               performed. Exact reordering is a procedure where results returned by an
               approximate search algorithm are reordered via a more expensive distance computation.
               Required if tree-AH algorithm is used.
        :param pulumi.Input[_builtins.str] distance_measure_type: The distance measure used in nearest neighbor search. The value must be one of the followings:
               * SQUARED_L2_DISTANCE: Euclidean (L_2) Distance
               * L1_DISTANCE: Manhattan (L_1) Distance
               * COSINE_DISTANCE: Cosine Distance. Defined as 1 - cosine similarity.
               * DOT_PRODUCT_DISTANCE: Dot Product Distance. Defined as a negative of the dot product
        :param pulumi.Input[_builtins.str] feature_norm_type: Type of normalization to be carried out on each vector. The value must be one of the followings:
               * UNIT_L2_NORM: Unit L2 normalization type
               * NONE: No normalization type is specified.
        :param pulumi.Input[_builtins.str] shard_size: Index data is split into equal parts to be processed. These are called "shards".
               The shard size must be specified when creating an index. The value must be one of the followings:
               * SHARD_SIZE_SMALL: Small (2GB)
               * SHARD_SIZE_MEDIUM: Medium (20GB)
               * SHARD_SIZE_LARGE: Large (50GB)
        """
        pulumi.set(__self__, "dimensions", dimensions)
        if algorithm_config is not None:
            pulumi.set(__self__, "algorithm_config", algorithm_config)
        if approximate_neighbors_count is not None:
            pulumi.set(__self__, "approximate_neighbors_count", approximate_neighbors_count)
        if distance_measure_type is not None:
            pulumi.set(__self__, "distance_measure_type", distance_measure_type)
        if feature_norm_type is not None:
            pulumi.set(__self__, "feature_norm_type", feature_norm_type)
        if shard_size is not None:
            pulumi.set(__self__, "shard_size", shard_size)

    @_builtins.property
    @pulumi.getter
    def dimensions(self) -> pulumi.Input[_builtins.int]:
        """
        The number of dimensions of the input vectors.
        """
        return pulumi.get(self, "dimensions")

    @dimensions.setter
    def dimensions(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "dimensions", value)

    @_builtins.property
    @pulumi.getter(name="algorithmConfig")
    def algorithm_config(self) -> Optional[pulumi.Input['AiIndexMetadataConfigAlgorithmConfigArgs']]:
        """
        The configuration with regard to the algorithms used for efficient search.
        Structure is documented below.
        """
        return pulumi.get(self, "algorithm_config")

    @algorithm_config.setter
    def algorithm_config(self, value: Optional[pulumi.Input['AiIndexMetadataConfigAlgorithmConfigArgs']]):
        pulumi.set(self, "algorithm_config", value)

    @_builtins.property
    @pulumi.getter(name="approximateNeighborsCount")
    def approximate_neighbors_count(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The default number of neighbors to find via approximate search before exact reordering is
        performed. Exact reordering is a procedure where results returned by an
        approximate search algorithm are reordered via a more expensive distance computation.
        Required if tree-AH algorithm is used.
        """
        return pulumi.get(self, "approximate_neighbors_count")

    @approximate_neighbors_count.setter
    def approximate_neighbors_count(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "approximate_neighbors_count", value)

    @_builtins.property
    @pulumi.getter(name="distanceMeasureType")
    def distance_measure_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The distance measure used in nearest neighbor search. The value must be one of the followings:
        * SQUARED_L2_DISTANCE: Euclidean (L_2) Distance
        * L1_DISTANCE: Manhattan (L_1) Distance
        * COSINE_DISTANCE: Cosine Distance. Defined as 1 - cosine similarity.
        * DOT_PRODUCT_DISTANCE: Dot Product Distance. Defined as a negative of the dot product
        """
        return pulumi.get(self, "distance_measure_type")

    @distance_measure_type.setter
    def distance_measure_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "distance_measure_type", value)

    @_builtins.property
    @pulumi.getter(name="featureNormType")
    def feature_norm_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Type of normalization to be carried out on each vector. The value must be one of the followings:
        * UNIT_L2_NORM: Unit L2 normalization type
        * NONE: No normalization type is specified.
        """
        return pulumi.get(self, "feature_norm_type")

    @feature_norm_type.setter
    def feature_norm_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "feature_norm_type", value)

    @_builtins.property
    @pulumi.getter(name="shardSize")
    def shard_size(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Index data is split into equal parts to be processed. These are called "shards".
        The shard size must be specified when creating an index. The value must be one of the followings:
        * SHARD_SIZE_SMALL: Small (2GB)
        * SHARD_SIZE_MEDIUM: Medium (20GB)
        * SHARD_SIZE_LARGE: Large (50GB)
        """
        return pulumi.get(self, "shard_size")

    @shard_size.setter
    def shard_size(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "shard_size", value)


if not MYPY:
    class AiIndexMetadataConfigAlgorithmConfigArgsDict(TypedDict):
        brute_force_config: NotRequired[pulumi.Input['AiIndexMetadataConfigAlgorithmConfigBruteForceConfigArgsDict']]
        """
        Configuration options for using brute force search, which simply implements the
        standard linear search in the database for each query.
        """
        tree_ah_config: NotRequired[pulumi.Input['AiIndexMetadataConfigAlgorithmConfigTreeAhConfigArgsDict']]
        """
        Configuration options for using the tree-AH algorithm (Shallow tree + Asymmetric Hashing).
        Please refer to this paper for more details: https://arxiv.org/abs/1908.10396
        Structure is documented below.
        """
elif False:
    AiIndexMetadataConfigAlgorithmConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiIndexMetadataConfigAlgorithmConfigArgs:
    def __init__(__self__, *,
                 brute_force_config: Optional[pulumi.Input['AiIndexMetadataConfigAlgorithmConfigBruteForceConfigArgs']] = None,
                 tree_ah_config: Optional[pulumi.Input['AiIndexMetadataConfigAlgorithmConfigTreeAhConfigArgs']] = None):
        """
        :param pulumi.Input['AiIndexMetadataConfigAlgorithmConfigBruteForceConfigArgs'] brute_force_config: Configuration options for using brute force search, which simply implements the
               standard linear search in the database for each query.
        :param pulumi.Input['AiIndexMetadataConfigAlgorithmConfigTreeAhConfigArgs'] tree_ah_config: Configuration options for using the tree-AH algorithm (Shallow tree + Asymmetric Hashing).
               Please refer to this paper for more details: https://arxiv.org/abs/1908.10396
               Structure is documented below.
        """
        if brute_force_config is not None:
            pulumi.set(__self__, "brute_force_config", brute_force_config)
        if tree_ah_config is not None:
            pulumi.set(__self__, "tree_ah_config", tree_ah_config)

    @_builtins.property
    @pulumi.getter(name="bruteForceConfig")
    def brute_force_config(self) -> Optional[pulumi.Input['AiIndexMetadataConfigAlgorithmConfigBruteForceConfigArgs']]:
        """
        Configuration options for using brute force search, which simply implements the
        standard linear search in the database for each query.
        """
        return pulumi.get(self, "brute_force_config")

    @brute_force_config.setter
    def brute_force_config(self, value: Optional[pulumi.Input['AiIndexMetadataConfigAlgorithmConfigBruteForceConfigArgs']]):
        pulumi.set(self, "brute_force_config", value)

    @_builtins.property
    @pulumi.getter(name="treeAhConfig")
    def tree_ah_config(self) -> Optional[pulumi.Input['AiIndexMetadataConfigAlgorithmConfigTreeAhConfigArgs']]:
        """
        Configuration options for using the tree-AH algorithm (Shallow tree + Asymmetric Hashing).
        Please refer to this paper for more details: https://arxiv.org/abs/1908.10396
        Structure is documented below.
        """
        return pulumi.get(self, "tree_ah_config")

    @tree_ah_config.setter
    def tree_ah_config(self, value: Optional[pulumi.Input['AiIndexMetadataConfigAlgorithmConfigTreeAhConfigArgs']]):
        pulumi.set(self, "tree_ah_config", value)


if not MYPY:
    class AiIndexMetadataConfigAlgorithmConfigBruteForceConfigArgsDict(TypedDict):
        pass
elif False:
    AiIndexMetadataConfigAlgorithmConfigBruteForceConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiIndexMetadataConfigAlgorithmConfigBruteForceConfigArgs:
    def __init__(__self__):
        pass


if not MYPY:
    class AiIndexMetadataConfigAlgorithmConfigTreeAhConfigArgsDict(TypedDict):
        leaf_node_embedding_count: NotRequired[pulumi.Input[_builtins.int]]
        """
        Number of embeddings on each leaf node. The default value is 1000 if not set.
        """
        leaf_nodes_to_search_percent: NotRequired[pulumi.Input[_builtins.int]]
        """
        The default percentage of leaf nodes that any query may be searched. Must be in
        range 1-100, inclusive. The default value is 10 (means 10%) if not set.
        """
elif False:
    AiIndexMetadataConfigAlgorithmConfigTreeAhConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiIndexMetadataConfigAlgorithmConfigTreeAhConfigArgs:
    def __init__(__self__, *,
                 leaf_node_embedding_count: Optional[pulumi.Input[_builtins.int]] = None,
                 leaf_nodes_to_search_percent: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.int] leaf_node_embedding_count: Number of embeddings on each leaf node. The default value is 1000 if not set.
        :param pulumi.Input[_builtins.int] leaf_nodes_to_search_percent: The default percentage of leaf nodes that any query may be searched. Must be in
               range 1-100, inclusive. The default value is 10 (means 10%) if not set.
        """
        if leaf_node_embedding_count is not None:
            pulumi.set(__self__, "leaf_node_embedding_count", leaf_node_embedding_count)
        if leaf_nodes_to_search_percent is not None:
            pulumi.set(__self__, "leaf_nodes_to_search_percent", leaf_nodes_to_search_percent)

    @_builtins.property
    @pulumi.getter(name="leafNodeEmbeddingCount")
    def leaf_node_embedding_count(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Number of embeddings on each leaf node. The default value is 1000 if not set.
        """
        return pulumi.get(self, "leaf_node_embedding_count")

    @leaf_node_embedding_count.setter
    def leaf_node_embedding_count(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "leaf_node_embedding_count", value)

    @_builtins.property
    @pulumi.getter(name="leafNodesToSearchPercent")
    def leaf_nodes_to_search_percent(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The default percentage of leaf nodes that any query may be searched. Must be in
        range 1-100, inclusive. The default value is 10 (means 10%) if not set.
        """
        return pulumi.get(self, "leaf_nodes_to_search_percent")

    @leaf_nodes_to_search_percent.setter
    def leaf_nodes_to_search_percent(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "leaf_nodes_to_search_percent", value)


if not MYPY:
    class AiMetadataStoreEncryptionSpecArgsDict(TypedDict):
        kms_key_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        Required. The Cloud KMS resource identifier of the customer managed encryption key used to protect a resource.
        Has the form: projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key. The key needs to be in the same region as where the resource is created.
        """
elif False:
    AiMetadataStoreEncryptionSpecArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiMetadataStoreEncryptionSpecArgs:
    def __init__(__self__, *,
                 kms_key_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] kms_key_name: Required. The Cloud KMS resource identifier of the customer managed encryption key used to protect a resource.
               Has the form: projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key. The key needs to be in the same region as where the resource is created.
        """
        if kms_key_name is not None:
            pulumi.set(__self__, "kms_key_name", kms_key_name)

    @_builtins.property
    @pulumi.getter(name="kmsKeyName")
    def kms_key_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Required. The Cloud KMS resource identifier of the customer managed encryption key used to protect a resource.
        Has the form: projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key. The key needs to be in the same region as where the resource is created.
        """
        return pulumi.get(self, "kms_key_name")

    @kms_key_name.setter
    def kms_key_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "kms_key_name", value)


if not MYPY:
    class AiMetadataStoreStateArgsDict(TypedDict):
        disk_utilization_bytes: NotRequired[pulumi.Input[_builtins.str]]
        """
        (Output)
        The disk utilization of the MetadataStore in bytes.
        """
elif False:
    AiMetadataStoreStateArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiMetadataStoreStateArgs:
    def __init__(__self__, *,
                 disk_utilization_bytes: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] disk_utilization_bytes: (Output)
               The disk utilization of the MetadataStore in bytes.
        """
        if disk_utilization_bytes is not None:
            pulumi.set(__self__, "disk_utilization_bytes", disk_utilization_bytes)

    @_builtins.property
    @pulumi.getter(name="diskUtilizationBytes")
    def disk_utilization_bytes(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        (Output)
        The disk utilization of the MetadataStore in bytes.
        """
        return pulumi.get(self, "disk_utilization_bytes")

    @disk_utilization_bytes.setter
    def disk_utilization_bytes(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "disk_utilization_bytes", value)


if not MYPY:
    class AiTensorboardEncryptionSpecArgsDict(TypedDict):
        kms_key_name: pulumi.Input[_builtins.str]
        """
        The Cloud KMS resource identifier of the customer managed encryption key used to protect a resource.
        Has the form: projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key. The key needs to be in the same region as where the resource is created.
        """
elif False:
    AiTensorboardEncryptionSpecArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiTensorboardEncryptionSpecArgs:
    def __init__(__self__, *,
                 kms_key_name: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] kms_key_name: The Cloud KMS resource identifier of the customer managed encryption key used to protect a resource.
               Has the form: projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key. The key needs to be in the same region as where the resource is created.
        """
        pulumi.set(__self__, "kms_key_name", kms_key_name)

    @_builtins.property
    @pulumi.getter(name="kmsKeyName")
    def kms_key_name(self) -> pulumi.Input[_builtins.str]:
        """
        The Cloud KMS resource identifier of the customer managed encryption key used to protect a resource.
        Has the form: projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key. The key needs to be in the same region as where the resource is created.
        """
        return pulumi.get(self, "kms_key_name")

    @kms_key_name.setter
    def kms_key_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "kms_key_name", value)


