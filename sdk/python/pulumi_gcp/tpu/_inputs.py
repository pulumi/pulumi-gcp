# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'NodeNetworkEndpointArgs',
    'NodeSchedulingConfigArgs',
    'V2VmAcceleratorConfigArgs',
    'V2VmDataDiskArgs',
    'V2VmNetworkConfigArgs',
    'V2VmNetworkEndpointArgs',
    'V2VmNetworkEndpointAccessConfigArgs',
    'V2VmSchedulingConfigArgs',
    'V2VmServiceAccountArgs',
    'V2VmShieldedInstanceConfigArgs',
    'V2VmSymptomArgs',
]

@pulumi.input_type
class NodeNetworkEndpointArgs:
    def __init__(__self__, *,
                 ip_address: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] ip_address: (Output)
               The IP address of this network endpoint.
        :param pulumi.Input[int] port: (Output)
               The port of this network endpoint.
        """
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        The IP address of this network endpoint.
        """
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_address", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        (Output)
        The port of this network endpoint.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class NodeSchedulingConfigArgs:
    def __init__(__self__, *,
                 preemptible: pulumi.Input[bool]):
        """
        :param pulumi.Input[bool] preemptible: Defines whether the TPU instance is preemptible.
        """
        pulumi.set(__self__, "preemptible", preemptible)

    @property
    @pulumi.getter
    def preemptible(self) -> pulumi.Input[bool]:
        """
        Defines whether the TPU instance is preemptible.
        """
        return pulumi.get(self, "preemptible")

    @preemptible.setter
    def preemptible(self, value: pulumi.Input[bool]):
        pulumi.set(self, "preemptible", value)


@pulumi.input_type
class V2VmAcceleratorConfigArgs:
    def __init__(__self__, *,
                 topology: pulumi.Input[str],
                 type: pulumi.Input[str]):
        """
        :param pulumi.Input[str] topology: Topology of TPU in chips.
        :param pulumi.Input[str] type: Type of TPU.
               Possible values are: `V2`, `V3`, `V4`, `V5P`.
        """
        pulumi.set(__self__, "topology", topology)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def topology(self) -> pulumi.Input[str]:
        """
        Topology of TPU in chips.
        """
        return pulumi.get(self, "topology")

    @topology.setter
    def topology(self, value: pulumi.Input[str]):
        pulumi.set(self, "topology", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of TPU.
        Possible values are: `V2`, `V3`, `V4`, `V5P`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class V2VmDataDiskArgs:
    def __init__(__self__, *,
                 source_disk: pulumi.Input[str],
                 mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] source_disk: Specifies the full path to an existing disk. For example:
               "projects/my-project/zones/us-central1-c/disks/my-disk".
        :param pulumi.Input[str] mode: The mode in which to attach this disk. If not specified, the default is READ_WRITE
               mode. Only applicable to dataDisks.
               Default value is `READ_WRITE`.
               Possible values are: `READ_WRITE`, `READ_ONLY`.
        """
        pulumi.set(__self__, "source_disk", source_disk)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="sourceDisk")
    def source_disk(self) -> pulumi.Input[str]:
        """
        Specifies the full path to an existing disk. For example:
        "projects/my-project/zones/us-central1-c/disks/my-disk".
        """
        return pulumi.get(self, "source_disk")

    @source_disk.setter
    def source_disk(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_disk", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        The mode in which to attach this disk. If not specified, the default is READ_WRITE
        mode. Only applicable to dataDisks.
        Default value is `READ_WRITE`.
        Possible values are: `READ_WRITE`, `READ_ONLY`.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class V2VmNetworkConfigArgs:
    def __init__(__self__, *,
                 can_ip_forward: Optional[pulumi.Input[bool]] = None,
                 enable_external_ips: Optional[pulumi.Input[bool]] = None,
                 network: Optional[pulumi.Input[str]] = None,
                 subnetwork: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] can_ip_forward: Allows the TPU node to send and receive packets with non-matching destination or source
               IPs. This is required if you plan to use the TPU workers to forward routes.
        :param pulumi.Input[bool] enable_external_ips: Indicates that external IP addresses would be associated with the TPU workers. If set to
               false, the specified subnetwork or network should have Private Google Access enabled.
        :param pulumi.Input[str] network: The name of the network for the TPU node. It must be a preexisting Google Compute Engine
               network. If both network and subnetwork are specified, the given subnetwork must belong
               to the given network. If network is not specified, it will be looked up from the
               subnetwork if one is provided, or otherwise use "default".
        :param pulumi.Input[str] subnetwork: The name of the subnetwork for the TPU node. It must be a preexisting Google Compute
               Engine subnetwork. If both network and subnetwork are specified, the given subnetwork
               must belong to the given network. If subnetwork is not specified, the subnetwork with the
               same name as the network will be used.
        """
        if can_ip_forward is not None:
            pulumi.set(__self__, "can_ip_forward", can_ip_forward)
        if enable_external_ips is not None:
            pulumi.set(__self__, "enable_external_ips", enable_external_ips)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if subnetwork is not None:
            pulumi.set(__self__, "subnetwork", subnetwork)

    @property
    @pulumi.getter(name="canIpForward")
    def can_ip_forward(self) -> Optional[pulumi.Input[bool]]:
        """
        Allows the TPU node to send and receive packets with non-matching destination or source
        IPs. This is required if you plan to use the TPU workers to forward routes.
        """
        return pulumi.get(self, "can_ip_forward")

    @can_ip_forward.setter
    def can_ip_forward(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_ip_forward", value)

    @property
    @pulumi.getter(name="enableExternalIps")
    def enable_external_ips(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates that external IP addresses would be associated with the TPU workers. If set to
        false, the specified subnetwork or network should have Private Google Access enabled.
        """
        return pulumi.get(self, "enable_external_ips")

    @enable_external_ips.setter
    def enable_external_ips(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_external_ips", value)

    @property
    @pulumi.getter
    def network(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the network for the TPU node. It must be a preexisting Google Compute Engine
        network. If both network and subnetwork are specified, the given subnetwork must belong
        to the given network. If network is not specified, it will be looked up from the
        subnetwork if one is provided, or otherwise use "default".
        """
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter
    def subnetwork(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the subnetwork for the TPU node. It must be a preexisting Google Compute
        Engine subnetwork. If both network and subnetwork are specified, the given subnetwork
        must belong to the given network. If subnetwork is not specified, the subnetwork with the
        same name as the network will be used.
        """
        return pulumi.get(self, "subnetwork")

    @subnetwork.setter
    def subnetwork(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnetwork", value)


@pulumi.input_type
class V2VmNetworkEndpointArgs:
    def __init__(__self__, *,
                 access_configs: Optional[pulumi.Input[Sequence[pulumi.Input['V2VmNetworkEndpointAccessConfigArgs']]]] = None,
                 ip_address: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['V2VmNetworkEndpointAccessConfigArgs']]] access_configs: (Output)
               The access config for the TPU worker.
               Structure is documented below.
        :param pulumi.Input[str] ip_address: (Output)
               The internal IP address of this network endpoint.
        :param pulumi.Input[int] port: (Output)
               The port of this network endpoint.
        """
        if access_configs is not None:
            pulumi.set(__self__, "access_configs", access_configs)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter(name="accessConfigs")
    def access_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2VmNetworkEndpointAccessConfigArgs']]]]:
        """
        (Output)
        The access config for the TPU worker.
        Structure is documented below.
        """
        return pulumi.get(self, "access_configs")

    @access_configs.setter
    def access_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2VmNetworkEndpointAccessConfigArgs']]]]):
        pulumi.set(self, "access_configs", value)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        The internal IP address of this network endpoint.
        """
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_address", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        (Output)
        The port of this network endpoint.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class V2VmNetworkEndpointAccessConfigArgs:
    def __init__(__self__, *,
                 external_ip: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] external_ip: (Output)
               An external IP address associated with the TPU worker.
        """
        if external_ip is not None:
            pulumi.set(__self__, "external_ip", external_ip)

    @property
    @pulumi.getter(name="externalIp")
    def external_ip(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        An external IP address associated with the TPU worker.
        """
        return pulumi.get(self, "external_ip")

    @external_ip.setter
    def external_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_ip", value)


@pulumi.input_type
class V2VmSchedulingConfigArgs:
    def __init__(__self__, *,
                 preemptible: Optional[pulumi.Input[bool]] = None,
                 reserved: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] preemptible: Defines whether the node is preemptible.
        :param pulumi.Input[bool] reserved: Whether the node is created under a reservation.
        """
        if preemptible is not None:
            pulumi.set(__self__, "preemptible", preemptible)
        if reserved is not None:
            pulumi.set(__self__, "reserved", reserved)

    @property
    @pulumi.getter
    def preemptible(self) -> Optional[pulumi.Input[bool]]:
        """
        Defines whether the node is preemptible.
        """
        return pulumi.get(self, "preemptible")

    @preemptible.setter
    def preemptible(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "preemptible", value)

    @property
    @pulumi.getter
    def reserved(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the node is created under a reservation.
        """
        return pulumi.get(self, "reserved")

    @reserved.setter
    def reserved(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "reserved", value)


@pulumi.input_type
class V2VmServiceAccountArgs:
    def __init__(__self__, *,
                 email: Optional[pulumi.Input[str]] = None,
                 scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] email: Email address of the service account. If empty, default Compute service account will be used.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] scopes: The list of scopes to be made available for this service account. If empty, access to all
               Cloud APIs will be allowed.
        """
        if email is not None:
            pulumi.set(__self__, "email", email)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[str]]:
        """
        Email address of the service account. If empty, default Compute service account will be used.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter
    def scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The list of scopes to be made available for this service account. If empty, access to all
        Cloud APIs will be allowed.
        """
        return pulumi.get(self, "scopes")

    @scopes.setter
    def scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "scopes", value)


@pulumi.input_type
class V2VmShieldedInstanceConfigArgs:
    def __init__(__self__, *,
                 enable_secure_boot: pulumi.Input[bool]):
        """
        :param pulumi.Input[bool] enable_secure_boot: Defines whether the instance has Secure Boot enabled.
        """
        pulumi.set(__self__, "enable_secure_boot", enable_secure_boot)

    @property
    @pulumi.getter(name="enableSecureBoot")
    def enable_secure_boot(self) -> pulumi.Input[bool]:
        """
        Defines whether the instance has Secure Boot enabled.
        """
        return pulumi.get(self, "enable_secure_boot")

    @enable_secure_boot.setter
    def enable_secure_boot(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enable_secure_boot", value)


@pulumi.input_type
class V2VmSymptomArgs:
    def __init__(__self__, *,
                 create_time: Optional[pulumi.Input[str]] = None,
                 details: Optional[pulumi.Input[str]] = None,
                 symptom_type: Optional[pulumi.Input[str]] = None,
                 worker_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] create_time: (Output)
               Timestamp when the Symptom is created.
        :param pulumi.Input[str] details: (Output)
               Detailed information of the current Symptom.
        :param pulumi.Input[str] symptom_type: (Output)
               Type of the Symptom.
        :param pulumi.Input[str] worker_id: (Output)
               A string used to uniquely distinguish a worker within a TPU node.
        """
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if details is not None:
            pulumi.set(__self__, "details", details)
        if symptom_type is not None:
            pulumi.set(__self__, "symptom_type", symptom_type)
        if worker_id is not None:
            pulumi.set(__self__, "worker_id", worker_id)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        Timestamp when the Symptom is created.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter
    def details(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        Detailed information of the current Symptom.
        """
        return pulumi.get(self, "details")

    @details.setter
    def details(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "details", value)

    @property
    @pulumi.getter(name="symptomType")
    def symptom_type(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        Type of the Symptom.
        """
        return pulumi.get(self, "symptom_type")

    @symptom_type.setter
    def symptom_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "symptom_type", value)

    @property
    @pulumi.getter(name="workerId")
    def worker_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        A string used to uniquely distinguish a worker within a TPU node.
        """
        return pulumi.get(self, "worker_id")

    @worker_id.setter
    def worker_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "worker_id", value)


