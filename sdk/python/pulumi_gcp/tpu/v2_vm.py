# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['V2VmArgs', 'V2Vm']

@pulumi.input_type
class V2VmArgs:
    def __init__(__self__, *,
                 runtime_version: pulumi.Input[str],
                 accelerator_type: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 zone: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a V2Vm resource.
        :param pulumi.Input[str] runtime_version: Runtime version for the TPU.
               
               
               - - -
        :param pulumi.Input[str] accelerator_type: TPU accelerator type for the TPU. If not specified, this defaults to 'v2-8'.
        :param pulumi.Input[str] description: Text description of the TPU.
        :param pulumi.Input[str] name: The immutable name of the TPU.
        :param pulumi.Input[str] project: The ID of the project in which the resource belongs.
               If it is not provided, the provider project is used.
        :param pulumi.Input[str] zone: The GCP location for the TPU. If it is not provided, the provider zone is used.
        """
        V2VmArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            runtime_version=runtime_version,
            accelerator_type=accelerator_type,
            description=description,
            name=name,
            project=project,
            zone=zone,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             runtime_version: pulumi.Input[str],
             accelerator_type: Optional[pulumi.Input[str]] = None,
             description: Optional[pulumi.Input[str]] = None,
             name: Optional[pulumi.Input[str]] = None,
             project: Optional[pulumi.Input[str]] = None,
             zone: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("runtime_version", runtime_version)
        if accelerator_type is not None:
            _setter("accelerator_type", accelerator_type)
        if description is not None:
            _setter("description", description)
        if name is not None:
            _setter("name", name)
        if project is not None:
            _setter("project", project)
        if zone is not None:
            _setter("zone", zone)

    @property
    @pulumi.getter(name="runtimeVersion")
    def runtime_version(self) -> pulumi.Input[str]:
        """
        Runtime version for the TPU.


        - - -
        """
        return pulumi.get(self, "runtime_version")

    @runtime_version.setter
    def runtime_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "runtime_version", value)

    @property
    @pulumi.getter(name="acceleratorType")
    def accelerator_type(self) -> Optional[pulumi.Input[str]]:
        """
        TPU accelerator type for the TPU. If not specified, this defaults to 'v2-8'.
        """
        return pulumi.get(self, "accelerator_type")

    @accelerator_type.setter
    def accelerator_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "accelerator_type", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Text description of the TPU.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The immutable name of the TPU.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the project in which the resource belongs.
        If it is not provided, the provider project is used.
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[str]]:
        """
        The GCP location for the TPU. If it is not provided, the provider zone is used.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone", value)


@pulumi.input_type
class _V2VmState:
    def __init__(__self__, *,
                 accelerator_type: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 runtime_version: Optional[pulumi.Input[str]] = None,
                 zone: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering V2Vm resources.
        :param pulumi.Input[str] accelerator_type: TPU accelerator type for the TPU. If not specified, this defaults to 'v2-8'.
        :param pulumi.Input[str] description: Text description of the TPU.
        :param pulumi.Input[str] name: The immutable name of the TPU.
        :param pulumi.Input[str] project: The ID of the project in which the resource belongs.
               If it is not provided, the provider project is used.
        :param pulumi.Input[str] runtime_version: Runtime version for the TPU.
               
               
               - - -
        :param pulumi.Input[str] zone: The GCP location for the TPU. If it is not provided, the provider zone is used.
        """
        _V2VmState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            accelerator_type=accelerator_type,
            description=description,
            name=name,
            project=project,
            runtime_version=runtime_version,
            zone=zone,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             accelerator_type: Optional[pulumi.Input[str]] = None,
             description: Optional[pulumi.Input[str]] = None,
             name: Optional[pulumi.Input[str]] = None,
             project: Optional[pulumi.Input[str]] = None,
             runtime_version: Optional[pulumi.Input[str]] = None,
             zone: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if accelerator_type is not None:
            _setter("accelerator_type", accelerator_type)
        if description is not None:
            _setter("description", description)
        if name is not None:
            _setter("name", name)
        if project is not None:
            _setter("project", project)
        if runtime_version is not None:
            _setter("runtime_version", runtime_version)
        if zone is not None:
            _setter("zone", zone)

    @property
    @pulumi.getter(name="acceleratorType")
    def accelerator_type(self) -> Optional[pulumi.Input[str]]:
        """
        TPU accelerator type for the TPU. If not specified, this defaults to 'v2-8'.
        """
        return pulumi.get(self, "accelerator_type")

    @accelerator_type.setter
    def accelerator_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "accelerator_type", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Text description of the TPU.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The immutable name of the TPU.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the project in which the resource belongs.
        If it is not provided, the provider project is used.
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="runtimeVersion")
    def runtime_version(self) -> Optional[pulumi.Input[str]]:
        """
        Runtime version for the TPU.


        - - -
        """
        return pulumi.get(self, "runtime_version")

    @runtime_version.setter
    def runtime_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "runtime_version", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[str]]:
        """
        The GCP location for the TPU. If it is not provided, the provider zone is used.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone", value)


class V2Vm(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 accelerator_type: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 runtime_version: Optional[pulumi.Input[str]] = None,
                 zone: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## Example Usage
        ### Tpu V2 Vm Basic

        ```python
        import pulumi
        import pulumi_gcp as gcp

        available = gcp.tpu.get_v2_runtime_versions()
        tpu = gcp.tpu.V2Vm("tpu",
            zone="us-central1-c",
            runtime_version="tpu-vm-tf-2.13.0",
            opts=pulumi.ResourceOptions(provider=google_beta))
        ```
        ### Tpu V2 Vm Full

        ```python
        import pulumi
        import pulumi_gcp as gcp

        available_v2_runtime_versions = gcp.tpu.get_v2_runtime_versions()
        available_v2_accelerator_types = gcp.tpu.get_v2_accelerator_types()
        tpu = gcp.tpu.V2Vm("tpu",
            zone="us-central1-c",
            description="Text description of the TPU.",
            runtime_version="tpu-vm-tf-2.13.0",
            accelerator_type="v2-8",
            opts=pulumi.ResourceOptions(provider=google_beta))
        ```

        ## Import

        Vm can be imported using any of these accepted formats

        ```sh
         $ pulumi import gcp:tpu/v2Vm:V2Vm default projects/{{project}}/locations/{{zone}}/nodes/{{name}}
        ```

        ```sh
         $ pulumi import gcp:tpu/v2Vm:V2Vm default {{project}}/{{zone}}/{{name}}
        ```

        ```sh
         $ pulumi import gcp:tpu/v2Vm:V2Vm default {{zone}}/{{name}}
        ```

        ```sh
         $ pulumi import gcp:tpu/v2Vm:V2Vm default {{name}}
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] accelerator_type: TPU accelerator type for the TPU. If not specified, this defaults to 'v2-8'.
        :param pulumi.Input[str] description: Text description of the TPU.
        :param pulumi.Input[str] name: The immutable name of the TPU.
        :param pulumi.Input[str] project: The ID of the project in which the resource belongs.
               If it is not provided, the provider project is used.
        :param pulumi.Input[str] runtime_version: Runtime version for the TPU.
               
               
               - - -
        :param pulumi.Input[str] zone: The GCP location for the TPU. If it is not provided, the provider zone is used.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: V2VmArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage
        ### Tpu V2 Vm Basic

        ```python
        import pulumi
        import pulumi_gcp as gcp

        available = gcp.tpu.get_v2_runtime_versions()
        tpu = gcp.tpu.V2Vm("tpu",
            zone="us-central1-c",
            runtime_version="tpu-vm-tf-2.13.0",
            opts=pulumi.ResourceOptions(provider=google_beta))
        ```
        ### Tpu V2 Vm Full

        ```python
        import pulumi
        import pulumi_gcp as gcp

        available_v2_runtime_versions = gcp.tpu.get_v2_runtime_versions()
        available_v2_accelerator_types = gcp.tpu.get_v2_accelerator_types()
        tpu = gcp.tpu.V2Vm("tpu",
            zone="us-central1-c",
            description="Text description of the TPU.",
            runtime_version="tpu-vm-tf-2.13.0",
            accelerator_type="v2-8",
            opts=pulumi.ResourceOptions(provider=google_beta))
        ```

        ## Import

        Vm can be imported using any of these accepted formats

        ```sh
         $ pulumi import gcp:tpu/v2Vm:V2Vm default projects/{{project}}/locations/{{zone}}/nodes/{{name}}
        ```

        ```sh
         $ pulumi import gcp:tpu/v2Vm:V2Vm default {{project}}/{{zone}}/{{name}}
        ```

        ```sh
         $ pulumi import gcp:tpu/v2Vm:V2Vm default {{zone}}/{{name}}
        ```

        ```sh
         $ pulumi import gcp:tpu/v2Vm:V2Vm default {{name}}
        ```

        :param str resource_name: The name of the resource.
        :param V2VmArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(V2VmArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            V2VmArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 accelerator_type: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 runtime_version: Optional[pulumi.Input[str]] = None,
                 zone: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = V2VmArgs.__new__(V2VmArgs)

            __props__.__dict__["accelerator_type"] = accelerator_type
            __props__.__dict__["description"] = description
            __props__.__dict__["name"] = name
            __props__.__dict__["project"] = project
            if runtime_version is None and not opts.urn:
                raise TypeError("Missing required property 'runtime_version'")
            __props__.__dict__["runtime_version"] = runtime_version
            __props__.__dict__["zone"] = zone
        super(V2Vm, __self__).__init__(
            'gcp:tpu/v2Vm:V2Vm',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            accelerator_type: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            project: Optional[pulumi.Input[str]] = None,
            runtime_version: Optional[pulumi.Input[str]] = None,
            zone: Optional[pulumi.Input[str]] = None) -> 'V2Vm':
        """
        Get an existing V2Vm resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] accelerator_type: TPU accelerator type for the TPU. If not specified, this defaults to 'v2-8'.
        :param pulumi.Input[str] description: Text description of the TPU.
        :param pulumi.Input[str] name: The immutable name of the TPU.
        :param pulumi.Input[str] project: The ID of the project in which the resource belongs.
               If it is not provided, the provider project is used.
        :param pulumi.Input[str] runtime_version: Runtime version for the TPU.
               
               
               - - -
        :param pulumi.Input[str] zone: The GCP location for the TPU. If it is not provided, the provider zone is used.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _V2VmState.__new__(_V2VmState)

        __props__.__dict__["accelerator_type"] = accelerator_type
        __props__.__dict__["description"] = description
        __props__.__dict__["name"] = name
        __props__.__dict__["project"] = project
        __props__.__dict__["runtime_version"] = runtime_version
        __props__.__dict__["zone"] = zone
        return V2Vm(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="acceleratorType")
    def accelerator_type(self) -> pulumi.Output[Optional[str]]:
        """
        TPU accelerator type for the TPU. If not specified, this defaults to 'v2-8'.
        """
        return pulumi.get(self, "accelerator_type")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Text description of the TPU.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The immutable name of the TPU.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[str]:
        """
        The ID of the project in which the resource belongs.
        If it is not provided, the provider project is used.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="runtimeVersion")
    def runtime_version(self) -> pulumi.Output[str]:
        """
        Runtime version for the TPU.


        - - -
        """
        return pulumi.get(self, "runtime_version")

    @property
    @pulumi.getter
    def zone(self) -> pulumi.Output[str]:
        """
        The GCP location for the TPU. If it is not provided, the provider zone is used.
        """
        return pulumi.get(self, "zone")

