# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'TagKeyIamBindingCondition',
    'TagKeyIamMemberCondition',
    'TagValueIamBindingCondition',
    'TagValueIamMemberCondition',
    'GetTagKeysKeyResult',
    'GetTagValuesValueResult',
]

@pulumi.output_type
class TagKeyIamBindingCondition(dict):
    def __init__(__self__, *,
                 expression: _builtins.str,
                 title: _builtins.str,
                 description: Optional[_builtins.str] = None):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "title", title)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @_builtins.property
    @pulumi.getter
    def expression(self) -> _builtins.str:
        return pulumi.get(self, "expression")

    @_builtins.property
    @pulumi.getter
    def title(self) -> _builtins.str:
        return pulumi.get(self, "title")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "description")


@pulumi.output_type
class TagKeyIamMemberCondition(dict):
    def __init__(__self__, *,
                 expression: _builtins.str,
                 title: _builtins.str,
                 description: Optional[_builtins.str] = None):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "title", title)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @_builtins.property
    @pulumi.getter
    def expression(self) -> _builtins.str:
        return pulumi.get(self, "expression")

    @_builtins.property
    @pulumi.getter
    def title(self) -> _builtins.str:
        return pulumi.get(self, "title")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "description")


@pulumi.output_type
class TagValueIamBindingCondition(dict):
    def __init__(__self__, *,
                 expression: _builtins.str,
                 title: _builtins.str,
                 description: Optional[_builtins.str] = None):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "title", title)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @_builtins.property
    @pulumi.getter
    def expression(self) -> _builtins.str:
        return pulumi.get(self, "expression")

    @_builtins.property
    @pulumi.getter
    def title(self) -> _builtins.str:
        return pulumi.get(self, "title")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "description")


@pulumi.output_type
class TagValueIamMemberCondition(dict):
    def __init__(__self__, *,
                 expression: _builtins.str,
                 title: _builtins.str,
                 description: Optional[_builtins.str] = None):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "title", title)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @_builtins.property
    @pulumi.getter
    def expression(self) -> _builtins.str:
        return pulumi.get(self, "expression")

    @_builtins.property
    @pulumi.getter
    def title(self) -> _builtins.str:
        return pulumi.get(self, "title")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "description")


@pulumi.output_type
class GetTagKeysKeyResult(dict):
    def __init__(__self__, *,
                 create_time: _builtins.str,
                 description: _builtins.str,
                 name: _builtins.str,
                 namespaced_name: _builtins.str,
                 parent: _builtins.str,
                 purpose: _builtins.str,
                 purpose_data: Mapping[str, _builtins.str],
                 short_name: _builtins.str,
                 update_time: _builtins.str):
        """
        :param _builtins.str create_time: Creation time.
               A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
        :param _builtins.str description: User-assigned description of the TagKey.
        :param _builtins.str name: an identifier for the resource with format `tagKeys/{{name}}`
        :param _builtins.str namespaced_name: Namespaced name of the TagKey which is in the format `{parentNamespace}/{shortName}`.
        :param _builtins.str parent: The resource name of the parent organization or project. It can be in format `organizations/{org_id}` or `projects/{project_id_or_number}`.
        :param _builtins.str purpose: A purpose denotes that this Tag is intended for use in policies of a specific policy engine, and will involve that policy engine in management operations involving this Tag. A purpose does not grant a policy engine exclusive rights to the Tag, and it may be referenced by other policy engines.
        :param Mapping[str, _builtins.str] purpose_data: Purpose data corresponds to the policy system that the tag is intended for. See documentation for Purpose for formatting of this field.
        :param _builtins.str short_name: The user friendly name for a TagKey. The short name should be unique for TagKeys wihting the same tag namespace.
        :param _builtins.str update_time: Update time.
               A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
        """
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespaced_name", namespaced_name)
        pulumi.set(__self__, "parent", parent)
        pulumi.set(__self__, "purpose", purpose)
        pulumi.set(__self__, "purpose_data", purpose_data)
        pulumi.set(__self__, "short_name", short_name)
        pulumi.set(__self__, "update_time", update_time)

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> _builtins.str:
        """
        Creation time.
        A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
        """
        return pulumi.get(self, "create_time")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        User-assigned description of the TagKey.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        an identifier for the resource with format `tagKeys/{{name}}`
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="namespacedName")
    def namespaced_name(self) -> _builtins.str:
        """
        Namespaced name of the TagKey which is in the format `{parentNamespace}/{shortName}`.
        """
        return pulumi.get(self, "namespaced_name")

    @_builtins.property
    @pulumi.getter
    def parent(self) -> _builtins.str:
        """
        The resource name of the parent organization or project. It can be in format `organizations/{org_id}` or `projects/{project_id_or_number}`.
        """
        return pulumi.get(self, "parent")

    @_builtins.property
    @pulumi.getter
    def purpose(self) -> _builtins.str:
        """
        A purpose denotes that this Tag is intended for use in policies of a specific policy engine, and will involve that policy engine in management operations involving this Tag. A purpose does not grant a policy engine exclusive rights to the Tag, and it may be referenced by other policy engines.
        """
        return pulumi.get(self, "purpose")

    @_builtins.property
    @pulumi.getter(name="purposeData")
    def purpose_data(self) -> Mapping[str, _builtins.str]:
        """
        Purpose data corresponds to the policy system that the tag is intended for. See documentation for Purpose for formatting of this field.
        """
        return pulumi.get(self, "purpose_data")

    @_builtins.property
    @pulumi.getter(name="shortName")
    def short_name(self) -> _builtins.str:
        """
        The user friendly name for a TagKey. The short name should be unique for TagKeys wihting the same tag namespace.
        """
        return pulumi.get(self, "short_name")

    @_builtins.property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> _builtins.str:
        """
        Update time.
        A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
        """
        return pulumi.get(self, "update_time")


@pulumi.output_type
class GetTagValuesValueResult(dict):
    def __init__(__self__, *,
                 create_time: _builtins.str,
                 description: _builtins.str,
                 name: _builtins.str,
                 namespaced_name: _builtins.str,
                 parent: _builtins.str,
                 short_name: _builtins.str,
                 update_time: _builtins.str):
        """
        :param _builtins.str create_time: Creation time.
               A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
        :param _builtins.str description: User-assigned description of the TagValue.
        :param _builtins.str name: an identifier for the resource with format `tagValues/{{name}}`
        :param _builtins.str namespaced_name: Namespaced name of the TagValue.
        :param _builtins.str parent: The resource name of the parent tagKey in format `tagKey/{name}`.
        :param _builtins.str short_name: User-assigned short name for TagValue. The short name should be unique for TagValues within the same parent TagKey.
        :param _builtins.str update_time: Update time.
               A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
        """
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespaced_name", namespaced_name)
        pulumi.set(__self__, "parent", parent)
        pulumi.set(__self__, "short_name", short_name)
        pulumi.set(__self__, "update_time", update_time)

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> _builtins.str:
        """
        Creation time.
        A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
        """
        return pulumi.get(self, "create_time")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        User-assigned description of the TagValue.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        an identifier for the resource with format `tagValues/{{name}}`
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="namespacedName")
    def namespaced_name(self) -> _builtins.str:
        """
        Namespaced name of the TagValue.
        """
        return pulumi.get(self, "namespaced_name")

    @_builtins.property
    @pulumi.getter
    def parent(self) -> _builtins.str:
        """
        The resource name of the parent tagKey in format `tagKey/{name}`.
        """
        return pulumi.get(self, "parent")

    @_builtins.property
    @pulumi.getter(name="shortName")
    def short_name(self) -> _builtins.str:
        """
        User-assigned short name for TagValue. The short name should be unique for TagValues within the same parent TagKey.
        """
        return pulumi.get(self, "short_name")

    @_builtins.property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> _builtins.str:
        """
        Update time.
        A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
        """
        return pulumi.get(self, "update_time")


