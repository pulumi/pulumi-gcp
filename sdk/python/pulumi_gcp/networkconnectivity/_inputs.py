# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'HubRoutingVpcArgs',
    'ServiceConnectionPolicyPscConfigArgs',
    'ServiceConnectionPolicyPscConnectionArgs',
    'ServiceConnectionPolicyPscConnectionErrorArgs',
    'ServiceConnectionPolicyPscConnectionErrorInfoArgs',
    'SpokeLinkedInterconnectAttachmentsArgs',
    'SpokeLinkedRouterApplianceInstancesArgs',
    'SpokeLinkedRouterApplianceInstancesInstanceArgs',
    'SpokeLinkedVpcNetworkArgs',
    'SpokeLinkedVpnTunnelsArgs',
]

@pulumi.input_type
class HubRoutingVpcArgs:
    def __init__(__self__, *,
                 uri: Optional[pulumi.Input[str]] = None):
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)


@pulumi.input_type
class ServiceConnectionPolicyPscConfigArgs:
    def __init__(__self__, *,
                 subnetworks: pulumi.Input[Sequence[pulumi.Input[str]]],
                 limit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] subnetworks: IDs of the subnetworks or fully qualified identifiers for the subnetworks
        :param pulumi.Input[str] limit: Max number of PSC connections for this policy.
        """
        pulumi.set(__self__, "subnetworks", subnetworks)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)

    @property
    @pulumi.getter
    def subnetworks(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        IDs of the subnetworks or fully qualified identifiers for the subnetworks
        """
        return pulumi.get(self, "subnetworks")

    @subnetworks.setter
    def subnetworks(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "subnetworks", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[str]]:
        """
        Max number of PSC connections for this policy.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "limit", value)


@pulumi.input_type
class ServiceConnectionPolicyPscConnectionArgs:
    def __init__(__self__, *,
                 consumer_address: Optional[pulumi.Input[str]] = None,
                 consumer_forwarding_rule: Optional[pulumi.Input[str]] = None,
                 consumer_target_project: Optional[pulumi.Input[str]] = None,
                 error: Optional[pulumi.Input['ServiceConnectionPolicyPscConnectionErrorArgs']] = None,
                 error_info: Optional[pulumi.Input['ServiceConnectionPolicyPscConnectionErrorInfoArgs']] = None,
                 error_type: Optional[pulumi.Input[str]] = None,
                 gce_operation: Optional[pulumi.Input[str]] = None,
                 psc_connection_id: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] consumer_address: The resource reference of the consumer address.
        :param pulumi.Input[str] consumer_forwarding_rule: The resource reference of the PSC Forwarding Rule within the consumer VPC.
        :param pulumi.Input[str] consumer_target_project: The project where the PSC connection is created.
        :param pulumi.Input['ServiceConnectionPolicyPscConnectionErrorArgs'] error: The most recent error during operating this connection.
               Structure is documented below.
        :param pulumi.Input['ServiceConnectionPolicyPscConnectionErrorInfoArgs'] error_info: The error info for the latest error during operating this connection.
               Structure is documented below.
        :param pulumi.Input[str] error_type: The error type indicates whether the error is consumer facing, producer
               facing or system internal.
               Possible values are: `CONNECTION_ERROR_TYPE_UNSPECIFIED`, `ERROR_INTERNAL`, `ERROR_CONSUMER_SIDE`, `ERROR_PRODUCER_SIDE`.
        :param pulumi.Input[str] gce_operation: The last Compute Engine operation to setup PSC connection.
        :param pulumi.Input[str] psc_connection_id: The PSC connection id of the PSC forwarding rule.
        :param pulumi.Input[str] state: The state of the PSC connection.
               Possible values are: `STATE_UNSPECIFIED`, `ACTIVE`, `CREATING`, `DELETING`, `FAILED`.
        """
        if consumer_address is not None:
            pulumi.set(__self__, "consumer_address", consumer_address)
        if consumer_forwarding_rule is not None:
            pulumi.set(__self__, "consumer_forwarding_rule", consumer_forwarding_rule)
        if consumer_target_project is not None:
            pulumi.set(__self__, "consumer_target_project", consumer_target_project)
        if error is not None:
            pulumi.set(__self__, "error", error)
        if error_info is not None:
            pulumi.set(__self__, "error_info", error_info)
        if error_type is not None:
            pulumi.set(__self__, "error_type", error_type)
        if gce_operation is not None:
            pulumi.set(__self__, "gce_operation", gce_operation)
        if psc_connection_id is not None:
            pulumi.set(__self__, "psc_connection_id", psc_connection_id)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="consumerAddress")
    def consumer_address(self) -> Optional[pulumi.Input[str]]:
        """
        The resource reference of the consumer address.
        """
        return pulumi.get(self, "consumer_address")

    @consumer_address.setter
    def consumer_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consumer_address", value)

    @property
    @pulumi.getter(name="consumerForwardingRule")
    def consumer_forwarding_rule(self) -> Optional[pulumi.Input[str]]:
        """
        The resource reference of the PSC Forwarding Rule within the consumer VPC.
        """
        return pulumi.get(self, "consumer_forwarding_rule")

    @consumer_forwarding_rule.setter
    def consumer_forwarding_rule(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consumer_forwarding_rule", value)

    @property
    @pulumi.getter(name="consumerTargetProject")
    def consumer_target_project(self) -> Optional[pulumi.Input[str]]:
        """
        The project where the PSC connection is created.
        """
        return pulumi.get(self, "consumer_target_project")

    @consumer_target_project.setter
    def consumer_target_project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consumer_target_project", value)

    @property
    @pulumi.getter
    def error(self) -> Optional[pulumi.Input['ServiceConnectionPolicyPscConnectionErrorArgs']]:
        """
        The most recent error during operating this connection.
        Structure is documented below.
        """
        return pulumi.get(self, "error")

    @error.setter
    def error(self, value: Optional[pulumi.Input['ServiceConnectionPolicyPscConnectionErrorArgs']]):
        pulumi.set(self, "error", value)

    @property
    @pulumi.getter(name="errorInfo")
    def error_info(self) -> Optional[pulumi.Input['ServiceConnectionPolicyPscConnectionErrorInfoArgs']]:
        """
        The error info for the latest error during operating this connection.
        Structure is documented below.
        """
        return pulumi.get(self, "error_info")

    @error_info.setter
    def error_info(self, value: Optional[pulumi.Input['ServiceConnectionPolicyPscConnectionErrorInfoArgs']]):
        pulumi.set(self, "error_info", value)

    @property
    @pulumi.getter(name="errorType")
    def error_type(self) -> Optional[pulumi.Input[str]]:
        """
        The error type indicates whether the error is consumer facing, producer
        facing or system internal.
        Possible values are: `CONNECTION_ERROR_TYPE_UNSPECIFIED`, `ERROR_INTERNAL`, `ERROR_CONSUMER_SIDE`, `ERROR_PRODUCER_SIDE`.
        """
        return pulumi.get(self, "error_type")

    @error_type.setter
    def error_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "error_type", value)

    @property
    @pulumi.getter(name="gceOperation")
    def gce_operation(self) -> Optional[pulumi.Input[str]]:
        """
        The last Compute Engine operation to setup PSC connection.
        """
        return pulumi.get(self, "gce_operation")

    @gce_operation.setter
    def gce_operation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gce_operation", value)

    @property
    @pulumi.getter(name="pscConnectionId")
    def psc_connection_id(self) -> Optional[pulumi.Input[str]]:
        """
        The PSC connection id of the PSC forwarding rule.
        """
        return pulumi.get(self, "psc_connection_id")

    @psc_connection_id.setter
    def psc_connection_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "psc_connection_id", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        The state of the PSC connection.
        Possible values are: `STATE_UNSPECIFIED`, `ACTIVE`, `CREATING`, `DELETING`, `FAILED`.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)


@pulumi.input_type
class ServiceConnectionPolicyPscConnectionErrorArgs:
    def __init__(__self__, *,
                 code: Optional[pulumi.Input[int]] = None,
                 details: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, Any]]]]] = None,
                 message: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] code: The status code, which should be an enum value of [google.rpc.Code][].
        :param pulumi.Input[Sequence[pulumi.Input[Mapping[str, Any]]]] details: (Output)
               A list of messages that carry the error details.
        :param pulumi.Input[str] message: A developer-facing error message.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if details is not None:
            pulumi.set(__self__, "details", details)
        if message is not None:
            pulumi.set(__self__, "message", message)

    @property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[int]]:
        """
        The status code, which should be an enum value of [google.rpc.Code][].
        """
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "code", value)

    @property
    @pulumi.getter
    def details(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, Any]]]]]:
        """
        (Output)
        A list of messages that carry the error details.
        """
        return pulumi.get(self, "details")

    @details.setter
    def details(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, Any]]]]]):
        pulumi.set(self, "details", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        A developer-facing error message.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)


@pulumi.input_type
class ServiceConnectionPolicyPscConnectionErrorInfoArgs:
    def __init__(__self__, *,
                 domain: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 reason: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] domain: The logical grouping to which the "reason" belongs.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] metadata: Additional structured details about this error.
        :param pulumi.Input[str] reason: The reason of the error.
        """
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        The logical grouping to which the "reason" belongs.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Additional structured details about this error.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        """
        The reason of the error.
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)


@pulumi.input_type
class SpokeLinkedInterconnectAttachmentsArgs:
    def __init__(__self__, *,
                 site_to_site_data_transfer: pulumi.Input[bool],
                 uris: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[bool] site_to_site_data_transfer: A value that controls whether site-to-site data transfer is enabled for these resources. Note that data transfer is available only in supported locations.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] uris: The URIs of linked interconnect attachment resources
        """
        pulumi.set(__self__, "site_to_site_data_transfer", site_to_site_data_transfer)
        pulumi.set(__self__, "uris", uris)

    @property
    @pulumi.getter(name="siteToSiteDataTransfer")
    def site_to_site_data_transfer(self) -> pulumi.Input[bool]:
        """
        A value that controls whether site-to-site data transfer is enabled for these resources. Note that data transfer is available only in supported locations.
        """
        return pulumi.get(self, "site_to_site_data_transfer")

    @site_to_site_data_transfer.setter
    def site_to_site_data_transfer(self, value: pulumi.Input[bool]):
        pulumi.set(self, "site_to_site_data_transfer", value)

    @property
    @pulumi.getter
    def uris(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The URIs of linked interconnect attachment resources
        """
        return pulumi.get(self, "uris")

    @uris.setter
    def uris(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "uris", value)


@pulumi.input_type
class SpokeLinkedRouterApplianceInstancesArgs:
    def __init__(__self__, *,
                 instances: pulumi.Input[Sequence[pulumi.Input['SpokeLinkedRouterApplianceInstancesInstanceArgs']]],
                 site_to_site_data_transfer: pulumi.Input[bool]):
        """
        :param pulumi.Input[Sequence[pulumi.Input['SpokeLinkedRouterApplianceInstancesInstanceArgs']]] instances: The list of router appliance instances
        :param pulumi.Input[bool] site_to_site_data_transfer: A value that controls whether site-to-site data transfer is enabled for these resources. Note that data transfer is available only in supported locations.
        """
        pulumi.set(__self__, "instances", instances)
        pulumi.set(__self__, "site_to_site_data_transfer", site_to_site_data_transfer)

    @property
    @pulumi.getter
    def instances(self) -> pulumi.Input[Sequence[pulumi.Input['SpokeLinkedRouterApplianceInstancesInstanceArgs']]]:
        """
        The list of router appliance instances
        """
        return pulumi.get(self, "instances")

    @instances.setter
    def instances(self, value: pulumi.Input[Sequence[pulumi.Input['SpokeLinkedRouterApplianceInstancesInstanceArgs']]]):
        pulumi.set(self, "instances", value)

    @property
    @pulumi.getter(name="siteToSiteDataTransfer")
    def site_to_site_data_transfer(self) -> pulumi.Input[bool]:
        """
        A value that controls whether site-to-site data transfer is enabled for these resources. Note that data transfer is available only in supported locations.
        """
        return pulumi.get(self, "site_to_site_data_transfer")

    @site_to_site_data_transfer.setter
    def site_to_site_data_transfer(self, value: pulumi.Input[bool]):
        pulumi.set(self, "site_to_site_data_transfer", value)


@pulumi.input_type
class SpokeLinkedRouterApplianceInstancesInstanceArgs:
    def __init__(__self__, *,
                 ip_address: Optional[pulumi.Input[str]] = None,
                 virtual_machine: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] ip_address: The IP address on the VM to use for peering.
        :param pulumi.Input[str] virtual_machine: The URI of the virtual machine resource
               
               - - -
        """
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if virtual_machine is not None:
            pulumi.set(__self__, "virtual_machine", virtual_machine)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[str]]:
        """
        The IP address on the VM to use for peering.
        """
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_address", value)

    @property
    @pulumi.getter(name="virtualMachine")
    def virtual_machine(self) -> Optional[pulumi.Input[str]]:
        """
        The URI of the virtual machine resource

        - - -
        """
        return pulumi.get(self, "virtual_machine")

    @virtual_machine.setter
    def virtual_machine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "virtual_machine", value)


@pulumi.input_type
class SpokeLinkedVpcNetworkArgs:
    def __init__(__self__, *,
                 uri: pulumi.Input[str],
                 exclude_export_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] uri: The URI of the VPC network resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] exclude_export_ranges: IP ranges encompassing the subnets to be excluded from peering.
        """
        pulumi.set(__self__, "uri", uri)
        if exclude_export_ranges is not None:
            pulumi.set(__self__, "exclude_export_ranges", exclude_export_ranges)

    @property
    @pulumi.getter
    def uri(self) -> pulumi.Input[str]:
        """
        The URI of the VPC network resource.
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "uri", value)

    @property
    @pulumi.getter(name="excludeExportRanges")
    def exclude_export_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        IP ranges encompassing the subnets to be excluded from peering.
        """
        return pulumi.get(self, "exclude_export_ranges")

    @exclude_export_ranges.setter
    def exclude_export_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exclude_export_ranges", value)


@pulumi.input_type
class SpokeLinkedVpnTunnelsArgs:
    def __init__(__self__, *,
                 site_to_site_data_transfer: pulumi.Input[bool],
                 uris: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[bool] site_to_site_data_transfer: A value that controls whether site-to-site data transfer is enabled for these resources. Note that data transfer is available only in supported locations.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] uris: The URIs of linked VPN tunnel resources.
        """
        pulumi.set(__self__, "site_to_site_data_transfer", site_to_site_data_transfer)
        pulumi.set(__self__, "uris", uris)

    @property
    @pulumi.getter(name="siteToSiteDataTransfer")
    def site_to_site_data_transfer(self) -> pulumi.Input[bool]:
        """
        A value that controls whether site-to-site data transfer is enabled for these resources. Note that data transfer is available only in supported locations.
        """
        return pulumi.get(self, "site_to_site_data_transfer")

    @site_to_site_data_transfer.setter
    def site_to_site_data_transfer(self, value: pulumi.Input[bool]):
        pulumi.set(self, "site_to_site_data_transfer", value)

    @property
    @pulumi.getter
    def uris(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The URIs of linked VPN tunnel resources.
        """
        return pulumi.get(self, "uris")

    @uris.setter
    def uris(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "uris", value)


