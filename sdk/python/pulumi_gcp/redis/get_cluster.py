# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetClusterResult',
    'AwaitableGetClusterResult',
    'get_cluster',
    'get_cluster_output',
]

@pulumi.output_type
class GetClusterResult:
    """
    A collection of values returned by getCluster.
    """
    def __init__(__self__, allow_fewer_zones_deployment=None, authorization_mode=None, automated_backup_configs=None, backup_collection=None, create_time=None, cross_cluster_replication_configs=None, deletion_protection_enabled=None, discovery_endpoints=None, gcs_sources=None, id=None, kms_key=None, maintenance_policies=None, maintenance_schedules=None, managed_backup_sources=None, managed_server_cas=None, name=None, node_type=None, persistence_configs=None, precise_size_gb=None, project=None, psc_configs=None, psc_connections=None, psc_service_attachments=None, redis_configs=None, region=None, replica_count=None, shard_count=None, size_gb=None, state=None, state_infos=None, transit_encryption_mode=None, uid=None, zone_distribution_configs=None):
        if allow_fewer_zones_deployment and not isinstance(allow_fewer_zones_deployment, bool):
            raise TypeError("Expected argument 'allow_fewer_zones_deployment' to be a bool")
        pulumi.set(__self__, "allow_fewer_zones_deployment", allow_fewer_zones_deployment)
        if authorization_mode and not isinstance(authorization_mode, str):
            raise TypeError("Expected argument 'authorization_mode' to be a str")
        pulumi.set(__self__, "authorization_mode", authorization_mode)
        if automated_backup_configs and not isinstance(automated_backup_configs, list):
            raise TypeError("Expected argument 'automated_backup_configs' to be a list")
        pulumi.set(__self__, "automated_backup_configs", automated_backup_configs)
        if backup_collection and not isinstance(backup_collection, str):
            raise TypeError("Expected argument 'backup_collection' to be a str")
        pulumi.set(__self__, "backup_collection", backup_collection)
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if cross_cluster_replication_configs and not isinstance(cross_cluster_replication_configs, list):
            raise TypeError("Expected argument 'cross_cluster_replication_configs' to be a list")
        pulumi.set(__self__, "cross_cluster_replication_configs", cross_cluster_replication_configs)
        if deletion_protection_enabled and not isinstance(deletion_protection_enabled, bool):
            raise TypeError("Expected argument 'deletion_protection_enabled' to be a bool")
        pulumi.set(__self__, "deletion_protection_enabled", deletion_protection_enabled)
        if discovery_endpoints and not isinstance(discovery_endpoints, list):
            raise TypeError("Expected argument 'discovery_endpoints' to be a list")
        pulumi.set(__self__, "discovery_endpoints", discovery_endpoints)
        if gcs_sources and not isinstance(gcs_sources, list):
            raise TypeError("Expected argument 'gcs_sources' to be a list")
        pulumi.set(__self__, "gcs_sources", gcs_sources)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if kms_key and not isinstance(kms_key, str):
            raise TypeError("Expected argument 'kms_key' to be a str")
        pulumi.set(__self__, "kms_key", kms_key)
        if maintenance_policies and not isinstance(maintenance_policies, list):
            raise TypeError("Expected argument 'maintenance_policies' to be a list")
        pulumi.set(__self__, "maintenance_policies", maintenance_policies)
        if maintenance_schedules and not isinstance(maintenance_schedules, list):
            raise TypeError("Expected argument 'maintenance_schedules' to be a list")
        pulumi.set(__self__, "maintenance_schedules", maintenance_schedules)
        if managed_backup_sources and not isinstance(managed_backup_sources, list):
            raise TypeError("Expected argument 'managed_backup_sources' to be a list")
        pulumi.set(__self__, "managed_backup_sources", managed_backup_sources)
        if managed_server_cas and not isinstance(managed_server_cas, list):
            raise TypeError("Expected argument 'managed_server_cas' to be a list")
        pulumi.set(__self__, "managed_server_cas", managed_server_cas)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if node_type and not isinstance(node_type, str):
            raise TypeError("Expected argument 'node_type' to be a str")
        pulumi.set(__self__, "node_type", node_type)
        if persistence_configs and not isinstance(persistence_configs, list):
            raise TypeError("Expected argument 'persistence_configs' to be a list")
        pulumi.set(__self__, "persistence_configs", persistence_configs)
        if precise_size_gb and not isinstance(precise_size_gb, float):
            raise TypeError("Expected argument 'precise_size_gb' to be a float")
        pulumi.set(__self__, "precise_size_gb", precise_size_gb)
        if project and not isinstance(project, str):
            raise TypeError("Expected argument 'project' to be a str")
        pulumi.set(__self__, "project", project)
        if psc_configs and not isinstance(psc_configs, list):
            raise TypeError("Expected argument 'psc_configs' to be a list")
        pulumi.set(__self__, "psc_configs", psc_configs)
        if psc_connections and not isinstance(psc_connections, list):
            raise TypeError("Expected argument 'psc_connections' to be a list")
        pulumi.set(__self__, "psc_connections", psc_connections)
        if psc_service_attachments and not isinstance(psc_service_attachments, list):
            raise TypeError("Expected argument 'psc_service_attachments' to be a list")
        pulumi.set(__self__, "psc_service_attachments", psc_service_attachments)
        if redis_configs and not isinstance(redis_configs, dict):
            raise TypeError("Expected argument 'redis_configs' to be a dict")
        pulumi.set(__self__, "redis_configs", redis_configs)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if replica_count and not isinstance(replica_count, int):
            raise TypeError("Expected argument 'replica_count' to be a int")
        pulumi.set(__self__, "replica_count", replica_count)
        if shard_count and not isinstance(shard_count, int):
            raise TypeError("Expected argument 'shard_count' to be a int")
        pulumi.set(__self__, "shard_count", shard_count)
        if size_gb and not isinstance(size_gb, int):
            raise TypeError("Expected argument 'size_gb' to be a int")
        pulumi.set(__self__, "size_gb", size_gb)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if state_infos and not isinstance(state_infos, list):
            raise TypeError("Expected argument 'state_infos' to be a list")
        pulumi.set(__self__, "state_infos", state_infos)
        if transit_encryption_mode and not isinstance(transit_encryption_mode, str):
            raise TypeError("Expected argument 'transit_encryption_mode' to be a str")
        pulumi.set(__self__, "transit_encryption_mode", transit_encryption_mode)
        if uid and not isinstance(uid, str):
            raise TypeError("Expected argument 'uid' to be a str")
        pulumi.set(__self__, "uid", uid)
        if zone_distribution_configs and not isinstance(zone_distribution_configs, list):
            raise TypeError("Expected argument 'zone_distribution_configs' to be a list")
        pulumi.set(__self__, "zone_distribution_configs", zone_distribution_configs)

    @_builtins.property
    @pulumi.getter(name="allowFewerZonesDeployment")
    def allow_fewer_zones_deployment(self) -> _builtins.bool:
        return pulumi.get(self, "allow_fewer_zones_deployment")

    @_builtins.property
    @pulumi.getter(name="authorizationMode")
    def authorization_mode(self) -> _builtins.str:
        return pulumi.get(self, "authorization_mode")

    @_builtins.property
    @pulumi.getter(name="automatedBackupConfigs")
    def automated_backup_configs(self) -> Sequence['outputs.GetClusterAutomatedBackupConfigResult']:
        return pulumi.get(self, "automated_backup_configs")

    @_builtins.property
    @pulumi.getter(name="backupCollection")
    def backup_collection(self) -> _builtins.str:
        return pulumi.get(self, "backup_collection")

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> _builtins.str:
        return pulumi.get(self, "create_time")

    @_builtins.property
    @pulumi.getter(name="crossClusterReplicationConfigs")
    def cross_cluster_replication_configs(self) -> Sequence['outputs.GetClusterCrossClusterReplicationConfigResult']:
        return pulumi.get(self, "cross_cluster_replication_configs")

    @_builtins.property
    @pulumi.getter(name="deletionProtectionEnabled")
    def deletion_protection_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "deletion_protection_enabled")

    @_builtins.property
    @pulumi.getter(name="discoveryEndpoints")
    def discovery_endpoints(self) -> Sequence['outputs.GetClusterDiscoveryEndpointResult']:
        return pulumi.get(self, "discovery_endpoints")

    @_builtins.property
    @pulumi.getter(name="gcsSources")
    def gcs_sources(self) -> Sequence['outputs.GetClusterGcsSourceResult']:
        return pulumi.get(self, "gcs_sources")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="kmsKey")
    def kms_key(self) -> _builtins.str:
        return pulumi.get(self, "kms_key")

    @_builtins.property
    @pulumi.getter(name="maintenancePolicies")
    def maintenance_policies(self) -> Sequence['outputs.GetClusterMaintenancePolicyResult']:
        return pulumi.get(self, "maintenance_policies")

    @_builtins.property
    @pulumi.getter(name="maintenanceSchedules")
    def maintenance_schedules(self) -> Sequence['outputs.GetClusterMaintenanceScheduleResult']:
        return pulumi.get(self, "maintenance_schedules")

    @_builtins.property
    @pulumi.getter(name="managedBackupSources")
    def managed_backup_sources(self) -> Sequence['outputs.GetClusterManagedBackupSourceResult']:
        return pulumi.get(self, "managed_backup_sources")

    @_builtins.property
    @pulumi.getter(name="managedServerCas")
    def managed_server_cas(self) -> Sequence['outputs.GetClusterManagedServerCaResult']:
        return pulumi.get(self, "managed_server_cas")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nodeType")
    def node_type(self) -> _builtins.str:
        return pulumi.get(self, "node_type")

    @_builtins.property
    @pulumi.getter(name="persistenceConfigs")
    def persistence_configs(self) -> Sequence['outputs.GetClusterPersistenceConfigResult']:
        return pulumi.get(self, "persistence_configs")

    @_builtins.property
    @pulumi.getter(name="preciseSizeGb")
    def precise_size_gb(self) -> _builtins.float:
        return pulumi.get(self, "precise_size_gb")

    @_builtins.property
    @pulumi.getter
    def project(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "project")

    @_builtins.property
    @pulumi.getter(name="pscConfigs")
    def psc_configs(self) -> Sequence['outputs.GetClusterPscConfigResult']:
        return pulumi.get(self, "psc_configs")

    @_builtins.property
    @pulumi.getter(name="pscConnections")
    def psc_connections(self) -> Sequence['outputs.GetClusterPscConnectionResult']:
        return pulumi.get(self, "psc_connections")

    @_builtins.property
    @pulumi.getter(name="pscServiceAttachments")
    def psc_service_attachments(self) -> Sequence['outputs.GetClusterPscServiceAttachmentResult']:
        return pulumi.get(self, "psc_service_attachments")

    @_builtins.property
    @pulumi.getter(name="redisConfigs")
    def redis_configs(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "redis_configs")

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="replicaCount")
    def replica_count(self) -> _builtins.int:
        return pulumi.get(self, "replica_count")

    @_builtins.property
    @pulumi.getter(name="shardCount")
    def shard_count(self) -> _builtins.int:
        return pulumi.get(self, "shard_count")

    @_builtins.property
    @pulumi.getter(name="sizeGb")
    def size_gb(self) -> _builtins.int:
        return pulumi.get(self, "size_gb")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="stateInfos")
    def state_infos(self) -> Sequence['outputs.GetClusterStateInfoResult']:
        return pulumi.get(self, "state_infos")

    @_builtins.property
    @pulumi.getter(name="transitEncryptionMode")
    def transit_encryption_mode(self) -> _builtins.str:
        return pulumi.get(self, "transit_encryption_mode")

    @_builtins.property
    @pulumi.getter
    def uid(self) -> _builtins.str:
        return pulumi.get(self, "uid")

    @_builtins.property
    @pulumi.getter(name="zoneDistributionConfigs")
    def zone_distribution_configs(self) -> Sequence['outputs.GetClusterZoneDistributionConfigResult']:
        return pulumi.get(self, "zone_distribution_configs")


class AwaitableGetClusterResult(GetClusterResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetClusterResult(
            allow_fewer_zones_deployment=self.allow_fewer_zones_deployment,
            authorization_mode=self.authorization_mode,
            automated_backup_configs=self.automated_backup_configs,
            backup_collection=self.backup_collection,
            create_time=self.create_time,
            cross_cluster_replication_configs=self.cross_cluster_replication_configs,
            deletion_protection_enabled=self.deletion_protection_enabled,
            discovery_endpoints=self.discovery_endpoints,
            gcs_sources=self.gcs_sources,
            id=self.id,
            kms_key=self.kms_key,
            maintenance_policies=self.maintenance_policies,
            maintenance_schedules=self.maintenance_schedules,
            managed_backup_sources=self.managed_backup_sources,
            managed_server_cas=self.managed_server_cas,
            name=self.name,
            node_type=self.node_type,
            persistence_configs=self.persistence_configs,
            precise_size_gb=self.precise_size_gb,
            project=self.project,
            psc_configs=self.psc_configs,
            psc_connections=self.psc_connections,
            psc_service_attachments=self.psc_service_attachments,
            redis_configs=self.redis_configs,
            region=self.region,
            replica_count=self.replica_count,
            shard_count=self.shard_count,
            size_gb=self.size_gb,
            state=self.state,
            state_infos=self.state_infos,
            transit_encryption_mode=self.transit_encryption_mode,
            uid=self.uid,
            zone_distribution_configs=self.zone_distribution_configs)


def get_cluster(name: Optional[_builtins.str] = None,
                project: Optional[_builtins.str] = None,
                region: Optional[_builtins.str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetClusterResult:
    """
    Use this data source to get information about a Redis Cluster. For more details, see the [API documentation](https://cloud.google.com/memorystore/docs/cluster/reference/rest/v1/projects.locations.clusters).

    ## Example Usage

    ```python
    import pulumi
    import pulumi_gcp as gcp

    default = gcp.redis.get_cluster(name="my-redis-cluster",
        region="us-central1")
    ```


    :param _builtins.str name: The name of the Redis cluster.
    :param _builtins.str project: (optional)
           The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
    :param _builtins.str region: The region of the Redis cluster.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['project'] = project
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('gcp:redis/getCluster:getCluster', __args__, opts=opts, typ=GetClusterResult).value

    return AwaitableGetClusterResult(
        allow_fewer_zones_deployment=pulumi.get(__ret__, 'allow_fewer_zones_deployment'),
        authorization_mode=pulumi.get(__ret__, 'authorization_mode'),
        automated_backup_configs=pulumi.get(__ret__, 'automated_backup_configs'),
        backup_collection=pulumi.get(__ret__, 'backup_collection'),
        create_time=pulumi.get(__ret__, 'create_time'),
        cross_cluster_replication_configs=pulumi.get(__ret__, 'cross_cluster_replication_configs'),
        deletion_protection_enabled=pulumi.get(__ret__, 'deletion_protection_enabled'),
        discovery_endpoints=pulumi.get(__ret__, 'discovery_endpoints'),
        gcs_sources=pulumi.get(__ret__, 'gcs_sources'),
        id=pulumi.get(__ret__, 'id'),
        kms_key=pulumi.get(__ret__, 'kms_key'),
        maintenance_policies=pulumi.get(__ret__, 'maintenance_policies'),
        maintenance_schedules=pulumi.get(__ret__, 'maintenance_schedules'),
        managed_backup_sources=pulumi.get(__ret__, 'managed_backup_sources'),
        managed_server_cas=pulumi.get(__ret__, 'managed_server_cas'),
        name=pulumi.get(__ret__, 'name'),
        node_type=pulumi.get(__ret__, 'node_type'),
        persistence_configs=pulumi.get(__ret__, 'persistence_configs'),
        precise_size_gb=pulumi.get(__ret__, 'precise_size_gb'),
        project=pulumi.get(__ret__, 'project'),
        psc_configs=pulumi.get(__ret__, 'psc_configs'),
        psc_connections=pulumi.get(__ret__, 'psc_connections'),
        psc_service_attachments=pulumi.get(__ret__, 'psc_service_attachments'),
        redis_configs=pulumi.get(__ret__, 'redis_configs'),
        region=pulumi.get(__ret__, 'region'),
        replica_count=pulumi.get(__ret__, 'replica_count'),
        shard_count=pulumi.get(__ret__, 'shard_count'),
        size_gb=pulumi.get(__ret__, 'size_gb'),
        state=pulumi.get(__ret__, 'state'),
        state_infos=pulumi.get(__ret__, 'state_infos'),
        transit_encryption_mode=pulumi.get(__ret__, 'transit_encryption_mode'),
        uid=pulumi.get(__ret__, 'uid'),
        zone_distribution_configs=pulumi.get(__ret__, 'zone_distribution_configs'))
def get_cluster_output(name: Optional[pulumi.Input[_builtins.str]] = None,
                       project: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetClusterResult]:
    """
    Use this data source to get information about a Redis Cluster. For more details, see the [API documentation](https://cloud.google.com/memorystore/docs/cluster/reference/rest/v1/projects.locations.clusters).

    ## Example Usage

    ```python
    import pulumi
    import pulumi_gcp as gcp

    default = gcp.redis.get_cluster(name="my-redis-cluster",
        region="us-central1")
    ```


    :param _builtins.str name: The name of the Redis cluster.
    :param _builtins.str project: (optional)
           The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
    :param _builtins.str region: The region of the Redis cluster.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['project'] = project
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('gcp:redis/getCluster:getCluster', __args__, opts=opts, typ=GetClusterResult)
    return __ret__.apply(lambda __response__: GetClusterResult(
        allow_fewer_zones_deployment=pulumi.get(__response__, 'allow_fewer_zones_deployment'),
        authorization_mode=pulumi.get(__response__, 'authorization_mode'),
        automated_backup_configs=pulumi.get(__response__, 'automated_backup_configs'),
        backup_collection=pulumi.get(__response__, 'backup_collection'),
        create_time=pulumi.get(__response__, 'create_time'),
        cross_cluster_replication_configs=pulumi.get(__response__, 'cross_cluster_replication_configs'),
        deletion_protection_enabled=pulumi.get(__response__, 'deletion_protection_enabled'),
        discovery_endpoints=pulumi.get(__response__, 'discovery_endpoints'),
        gcs_sources=pulumi.get(__response__, 'gcs_sources'),
        id=pulumi.get(__response__, 'id'),
        kms_key=pulumi.get(__response__, 'kms_key'),
        maintenance_policies=pulumi.get(__response__, 'maintenance_policies'),
        maintenance_schedules=pulumi.get(__response__, 'maintenance_schedules'),
        managed_backup_sources=pulumi.get(__response__, 'managed_backup_sources'),
        managed_server_cas=pulumi.get(__response__, 'managed_server_cas'),
        name=pulumi.get(__response__, 'name'),
        node_type=pulumi.get(__response__, 'node_type'),
        persistence_configs=pulumi.get(__response__, 'persistence_configs'),
        precise_size_gb=pulumi.get(__response__, 'precise_size_gb'),
        project=pulumi.get(__response__, 'project'),
        psc_configs=pulumi.get(__response__, 'psc_configs'),
        psc_connections=pulumi.get(__response__, 'psc_connections'),
        psc_service_attachments=pulumi.get(__response__, 'psc_service_attachments'),
        redis_configs=pulumi.get(__response__, 'redis_configs'),
        region=pulumi.get(__response__, 'region'),
        replica_count=pulumi.get(__response__, 'replica_count'),
        shard_count=pulumi.get(__response__, 'shard_count'),
        size_gb=pulumi.get(__response__, 'size_gb'),
        state=pulumi.get(__response__, 'state'),
        state_infos=pulumi.get(__response__, 'state_infos'),
        transit_encryption_mode=pulumi.get(__response__, 'transit_encryption_mode'),
        uid=pulumi.get(__response__, 'uid'),
        zone_distribution_configs=pulumi.get(__response__, 'zone_distribution_configs')))
