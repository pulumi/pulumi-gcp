# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'RulesetMetadataArgs',
    'RulesetMetadataArgsDict',
    'RulesetSourceArgs',
    'RulesetSourceArgsDict',
    'RulesetSourceFileArgs',
    'RulesetSourceFileArgsDict',
]

MYPY = False

if not MYPY:
    class RulesetMetadataArgsDict(TypedDict):
        services: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Services that this ruleset has declarations for (e.g., "cloud.firestore"). There may be 0+ of these.
        """
elif False:
    RulesetMetadataArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RulesetMetadataArgs:
    def __init__(__self__, *,
                 services: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] services: Services that this ruleset has declarations for (e.g., "cloud.firestore"). There may be 0+ of these.
        """
        if services is not None:
            pulumi.set(__self__, "services", services)

    @_builtins.property
    @pulumi.getter
    def services(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Services that this ruleset has declarations for (e.g., "cloud.firestore"). There may be 0+ of these.
        """
        return pulumi.get(self, "services")

    @services.setter
    def services(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "services", value)


if not MYPY:
    class RulesetSourceArgsDict(TypedDict):
        files: pulumi.Input[Sequence[pulumi.Input['RulesetSourceFileArgsDict']]]
        """
        `File` set constituting the `Source` bundle.
        """
        language: NotRequired[pulumi.Input[_builtins.str]]
        """
        `Language` of the `Source` bundle. If unspecified, the language will default to `FIREBASE_RULES`. Possible values: LANGUAGE_UNSPECIFIED, FIREBASE_RULES, EVENT_FLOW_TRIGGERS

        - - -
        """
elif False:
    RulesetSourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RulesetSourceArgs:
    def __init__(__self__, *,
                 files: pulumi.Input[Sequence[pulumi.Input['RulesetSourceFileArgs']]],
                 language: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['RulesetSourceFileArgs']]] files: `File` set constituting the `Source` bundle.
        :param pulumi.Input[_builtins.str] language: `Language` of the `Source` bundle. If unspecified, the language will default to `FIREBASE_RULES`. Possible values: LANGUAGE_UNSPECIFIED, FIREBASE_RULES, EVENT_FLOW_TRIGGERS
               
               - - -
        """
        pulumi.set(__self__, "files", files)
        if language is not None:
            pulumi.set(__self__, "language", language)

    @_builtins.property
    @pulumi.getter
    def files(self) -> pulumi.Input[Sequence[pulumi.Input['RulesetSourceFileArgs']]]:
        """
        `File` set constituting the `Source` bundle.
        """
        return pulumi.get(self, "files")

    @files.setter
    def files(self, value: pulumi.Input[Sequence[pulumi.Input['RulesetSourceFileArgs']]]):
        pulumi.set(self, "files", value)

    @_builtins.property
    @pulumi.getter
    def language(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        `Language` of the `Source` bundle. If unspecified, the language will default to `FIREBASE_RULES`. Possible values: LANGUAGE_UNSPECIFIED, FIREBASE_RULES, EVENT_FLOW_TRIGGERS

        - - -
        """
        return pulumi.get(self, "language")

    @language.setter
    def language(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "language", value)


if not MYPY:
    class RulesetSourceFileArgsDict(TypedDict):
        content: pulumi.Input[_builtins.str]
        """
        Textual Content.
        """
        name: pulumi.Input[_builtins.str]
        """
        File name.
        """
        fingerprint: NotRequired[pulumi.Input[_builtins.str]]
        """
        Fingerprint (e.g. github sha) associated with the `File`.
        """
elif False:
    RulesetSourceFileArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RulesetSourceFileArgs:
    def __init__(__self__, *,
                 content: pulumi.Input[_builtins.str],
                 name: pulumi.Input[_builtins.str],
                 fingerprint: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] content: Textual Content.
        :param pulumi.Input[_builtins.str] name: File name.
        :param pulumi.Input[_builtins.str] fingerprint: Fingerprint (e.g. github sha) associated with the `File`.
        """
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "name", name)
        if fingerprint is not None:
            pulumi.set(__self__, "fingerprint", fingerprint)

    @_builtins.property
    @pulumi.getter
    def content(self) -> pulumi.Input[_builtins.str]:
        """
        Textual Content.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "content", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        File name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def fingerprint(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Fingerprint (e.g. github sha) associated with the `File`.
        """
        return pulumi.get(self, "fingerprint")

    @fingerprint.setter
    def fingerprint(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "fingerprint", value)


