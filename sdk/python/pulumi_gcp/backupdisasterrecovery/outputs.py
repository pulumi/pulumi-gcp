# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'ManagementServerManagementUri',
    'ManagementServerNetwork',
]

@pulumi.output_type
class ManagementServerManagementUri(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "webUi":
            suggest = "web_ui"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ManagementServerManagementUri. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ManagementServerManagementUri.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ManagementServerManagementUri.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api: Optional[str] = None,
                 web_ui: Optional[str] = None):
        """
        :param str api: (Output)
               The management console api endpoint.
        :param str web_ui: (Output)
               The management console webUi.
        """
        if api is not None:
            pulumi.set(__self__, "api", api)
        if web_ui is not None:
            pulumi.set(__self__, "web_ui", web_ui)

    @property
    @pulumi.getter
    def api(self) -> Optional[str]:
        """
        (Output)
        The management console api endpoint.
        """
        return pulumi.get(self, "api")

    @property
    @pulumi.getter(name="webUi")
    def web_ui(self) -> Optional[str]:
        """
        (Output)
        The management console webUi.
        """
        return pulumi.get(self, "web_ui")


@pulumi.output_type
class ManagementServerNetwork(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "peeringMode":
            suggest = "peering_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ManagementServerNetwork. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ManagementServerNetwork.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ManagementServerNetwork.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 network: str,
                 peering_mode: Optional[str] = None):
        """
        :param str network: Network with format `projects/{{project_id}}/global/networks/{{network_id}}`
        :param str peering_mode: Type of Network peeringMode
               Default value is `PRIVATE_SERVICE_ACCESS`.
               Possible values are: `PRIVATE_SERVICE_ACCESS`.
               
               - - -
        """
        pulumi.set(__self__, "network", network)
        if peering_mode is not None:
            pulumi.set(__self__, "peering_mode", peering_mode)

    @property
    @pulumi.getter
    def network(self) -> str:
        """
        Network with format `projects/{{project_id}}/global/networks/{{network_id}}`
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter(name="peeringMode")
    def peering_mode(self) -> Optional[str]:
        """
        Type of Network peeringMode
        Default value is `PRIVATE_SERVICE_ACCESS`.
        Possible values are: `PRIVATE_SERVICE_ACCESS`.

        - - -
        """
        return pulumi.get(self, "peering_mode")


