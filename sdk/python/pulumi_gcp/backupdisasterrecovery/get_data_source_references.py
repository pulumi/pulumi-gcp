# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetDataSourceReferencesResult',
    'AwaitableGetDataSourceReferencesResult',
    'get_data_source_references',
    'get_data_source_references_output',
]

@pulumi.output_type
class GetDataSourceReferencesResult:
    """
    A collection of values returned by getDataSourceReferences.
    """
    def __init__(__self__, data_source_references=None, id=None, location=None, project=None, resource_type=None):
        if data_source_references and not isinstance(data_source_references, list):
            raise TypeError("Expected argument 'data_source_references' to be a list")
        pulumi.set(__self__, "data_source_references", data_source_references)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if project and not isinstance(project, str):
            raise TypeError("Expected argument 'project' to be a str")
        pulumi.set(__self__, "project", project)
        if resource_type and not isinstance(resource_type, str):
            raise TypeError("Expected argument 'resource_type' to be a str")
        pulumi.set(__self__, "resource_type", resource_type)

    @_builtins.property
    @pulumi.getter(name="dataSourceReferences")
    def data_source_references(self) -> Sequence['outputs.GetDataSourceReferencesDataSourceReferenceResult']:
        return pulumi.get(self, "data_source_references")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def location(self) -> _builtins.str:
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter
    def project(self) -> _builtins.str:
        return pulumi.get(self, "project")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        return pulumi.get(self, "resource_type")


class AwaitableGetDataSourceReferencesResult(GetDataSourceReferencesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDataSourceReferencesResult(
            data_source_references=self.data_source_references,
            id=self.id,
            location=self.location,
            project=self.project,
            resource_type=self.resource_type)


def get_data_source_references(location: Optional[_builtins.str] = None,
                               project: Optional[_builtins.str] = None,
                               resource_type: Optional[_builtins.str] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDataSourceReferencesResult:
    """
    A list of Backup and DR data source references.


    :param _builtins.str project: - (Optional) The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
    :param _builtins.str resource_type: - (Required) The resource type to get the data source references for. Examples include, "sqladmin.googleapis.com/Instance" , "compute.googleapis.com/Instance" (right now this service not available for compute Instances , it will be added soon )
    """
    __args__ = dict()
    __args__['location'] = location
    __args__['project'] = project
    __args__['resourceType'] = resource_type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('gcp:backupdisasterrecovery/getDataSourceReferences:getDataSourceReferences', __args__, opts=opts, typ=GetDataSourceReferencesResult).value

    return AwaitableGetDataSourceReferencesResult(
        data_source_references=pulumi.get(__ret__, 'data_source_references'),
        id=pulumi.get(__ret__, 'id'),
        location=pulumi.get(__ret__, 'location'),
        project=pulumi.get(__ret__, 'project'),
        resource_type=pulumi.get(__ret__, 'resource_type'))
def get_data_source_references_output(location: Optional[pulumi.Input[_builtins.str]] = None,
                                      project: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                      resource_type: Optional[pulumi.Input[_builtins.str]] = None,
                                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDataSourceReferencesResult]:
    """
    A list of Backup and DR data source references.


    :param _builtins.str project: - (Optional) The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
    :param _builtins.str resource_type: - (Required) The resource type to get the data source references for. Examples include, "sqladmin.googleapis.com/Instance" , "compute.googleapis.com/Instance" (right now this service not available for compute Instances , it will be added soon )
    """
    __args__ = dict()
    __args__['location'] = location
    __args__['project'] = project
    __args__['resourceType'] = resource_type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('gcp:backupdisasterrecovery/getDataSourceReferences:getDataSourceReferences', __args__, opts=opts, typ=GetDataSourceReferencesResult)
    return __ret__.apply(lambda __response__: GetDataSourceReferencesResult(
        data_source_references=pulumi.get(__response__, 'data_source_references'),
        id=pulumi.get(__response__, 'id'),
        location=pulumi.get(__response__, 'location'),
        project=pulumi.get(__response__, 'project'),
        resource_type=pulumi.get(__response__, 'resource_type')))
