# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetDataSourceReferenceResult',
    'AwaitableGetDataSourceReferenceResult',
    'get_data_source_reference',
    'get_data_source_reference_output',
]

@pulumi.output_type
class GetDataSourceReferenceResult:
    """
    A collection of values returned by getDataSourceReference.
    """
    def __init__(__self__, backup_config_state=None, backup_count=None, data_source=None, data_source_reference_id=None, gcp_resource_name=None, id=None, last_backup_state=None, last_successful_backup_time=None, location=None, name=None, project=None, resource_type=None):
        if backup_config_state and not isinstance(backup_config_state, str):
            raise TypeError("Expected argument 'backup_config_state' to be a str")
        pulumi.set(__self__, "backup_config_state", backup_config_state)
        if backup_count and not isinstance(backup_count, int):
            raise TypeError("Expected argument 'backup_count' to be a int")
        pulumi.set(__self__, "backup_count", backup_count)
        if data_source and not isinstance(data_source, str):
            raise TypeError("Expected argument 'data_source' to be a str")
        pulumi.set(__self__, "data_source", data_source)
        if data_source_reference_id and not isinstance(data_source_reference_id, str):
            raise TypeError("Expected argument 'data_source_reference_id' to be a str")
        pulumi.set(__self__, "data_source_reference_id", data_source_reference_id)
        if gcp_resource_name and not isinstance(gcp_resource_name, str):
            raise TypeError("Expected argument 'gcp_resource_name' to be a str")
        pulumi.set(__self__, "gcp_resource_name", gcp_resource_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if last_backup_state and not isinstance(last_backup_state, str):
            raise TypeError("Expected argument 'last_backup_state' to be a str")
        pulumi.set(__self__, "last_backup_state", last_backup_state)
        if last_successful_backup_time and not isinstance(last_successful_backup_time, str):
            raise TypeError("Expected argument 'last_successful_backup_time' to be a str")
        pulumi.set(__self__, "last_successful_backup_time", last_successful_backup_time)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if project and not isinstance(project, str):
            raise TypeError("Expected argument 'project' to be a str")
        pulumi.set(__self__, "project", project)
        if resource_type and not isinstance(resource_type, str):
            raise TypeError("Expected argument 'resource_type' to be a str")
        pulumi.set(__self__, "resource_type", resource_type)

    @_builtins.property
    @pulumi.getter(name="backupConfigState")
    def backup_config_state(self) -> _builtins.str:
        return pulumi.get(self, "backup_config_state")

    @_builtins.property
    @pulumi.getter(name="backupCount")
    def backup_count(self) -> _builtins.int:
        return pulumi.get(self, "backup_count")

    @_builtins.property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> _builtins.str:
        return pulumi.get(self, "data_source")

    @_builtins.property
    @pulumi.getter(name="dataSourceReferenceId")
    def data_source_reference_id(self) -> _builtins.str:
        return pulumi.get(self, "data_source_reference_id")

    @_builtins.property
    @pulumi.getter(name="gcpResourceName")
    def gcp_resource_name(self) -> _builtins.str:
        return pulumi.get(self, "gcp_resource_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="lastBackupState")
    def last_backup_state(self) -> _builtins.str:
        return pulumi.get(self, "last_backup_state")

    @_builtins.property
    @pulumi.getter(name="lastSuccessfulBackupTime")
    def last_successful_backup_time(self) -> _builtins.str:
        return pulumi.get(self, "last_successful_backup_time")

    @_builtins.property
    @pulumi.getter
    def location(self) -> _builtins.str:
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def project(self) -> _builtins.str:
        return pulumi.get(self, "project")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        return pulumi.get(self, "resource_type")


class AwaitableGetDataSourceReferenceResult(GetDataSourceReferenceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDataSourceReferenceResult(
            backup_config_state=self.backup_config_state,
            backup_count=self.backup_count,
            data_source=self.data_source,
            data_source_reference_id=self.data_source_reference_id,
            gcp_resource_name=self.gcp_resource_name,
            id=self.id,
            last_backup_state=self.last_backup_state,
            last_successful_backup_time=self.last_successful_backup_time,
            location=self.location,
            name=self.name,
            project=self.project,
            resource_type=self.resource_type)


def get_data_source_reference(data_source_reference_id: Optional[_builtins.str] = None,
                              location: Optional[_builtins.str] = None,
                              project: Optional[_builtins.str] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDataSourceReferenceResult:
    """
    Get information about a specific Backup and DR data source reference.


    :param _builtins.str data_source_reference_id: - (Required) The id of the data source reference.
    :param _builtins.str project: - (Optional) The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
    """
    __args__ = dict()
    __args__['dataSourceReferenceId'] = data_source_reference_id
    __args__['location'] = location
    __args__['project'] = project
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('gcp:backupdisasterrecovery/getDataSourceReference:getDataSourceReference', __args__, opts=opts, typ=GetDataSourceReferenceResult).value

    return AwaitableGetDataSourceReferenceResult(
        backup_config_state=pulumi.get(__ret__, 'backup_config_state'),
        backup_count=pulumi.get(__ret__, 'backup_count'),
        data_source=pulumi.get(__ret__, 'data_source'),
        data_source_reference_id=pulumi.get(__ret__, 'data_source_reference_id'),
        gcp_resource_name=pulumi.get(__ret__, 'gcp_resource_name'),
        id=pulumi.get(__ret__, 'id'),
        last_backup_state=pulumi.get(__ret__, 'last_backup_state'),
        last_successful_backup_time=pulumi.get(__ret__, 'last_successful_backup_time'),
        location=pulumi.get(__ret__, 'location'),
        name=pulumi.get(__ret__, 'name'),
        project=pulumi.get(__ret__, 'project'),
        resource_type=pulumi.get(__ret__, 'resource_type'))
def get_data_source_reference_output(data_source_reference_id: Optional[pulumi.Input[_builtins.str]] = None,
                                     location: Optional[pulumi.Input[_builtins.str]] = None,
                                     project: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDataSourceReferenceResult]:
    """
    Get information about a specific Backup and DR data source reference.


    :param _builtins.str data_source_reference_id: - (Required) The id of the data source reference.
    :param _builtins.str project: - (Optional) The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
    """
    __args__ = dict()
    __args__['dataSourceReferenceId'] = data_source_reference_id
    __args__['location'] = location
    __args__['project'] = project
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('gcp:backupdisasterrecovery/getDataSourceReference:getDataSourceReference', __args__, opts=opts, typ=GetDataSourceReferenceResult)
    return __ret__.apply(lambda __response__: GetDataSourceReferenceResult(
        backup_config_state=pulumi.get(__response__, 'backup_config_state'),
        backup_count=pulumi.get(__response__, 'backup_count'),
        data_source=pulumi.get(__response__, 'data_source'),
        data_source_reference_id=pulumi.get(__response__, 'data_source_reference_id'),
        gcp_resource_name=pulumi.get(__response__, 'gcp_resource_name'),
        id=pulumi.get(__response__, 'id'),
        last_backup_state=pulumi.get(__response__, 'last_backup_state'),
        last_successful_backup_time=pulumi.get(__response__, 'last_successful_backup_time'),
        location=pulumi.get(__response__, 'location'),
        name=pulumi.get(__response__, 'name'),
        project=pulumi.get(__response__, 'project'),
        resource_type=pulumi.get(__response__, 'resource_type')))
