# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetBackupPlanResult',
    'AwaitableGetBackupPlanResult',
    'get_backup_plan',
    'get_backup_plan_output',
]

@pulumi.output_type
class GetBackupPlanResult:
    """
    A collection of values returned by getBackupPlan.
    """
    def __init__(__self__, backup_plan_id=None, backup_rules=None, backup_vault=None, backup_vault_service_account=None, create_time=None, description=None, id=None, location=None, name=None, project=None, resource_type=None, update_time=None):
        if backup_plan_id and not isinstance(backup_plan_id, str):
            raise TypeError("Expected argument 'backup_plan_id' to be a str")
        pulumi.set(__self__, "backup_plan_id", backup_plan_id)
        if backup_rules and not isinstance(backup_rules, list):
            raise TypeError("Expected argument 'backup_rules' to be a list")
        pulumi.set(__self__, "backup_rules", backup_rules)
        if backup_vault and not isinstance(backup_vault, str):
            raise TypeError("Expected argument 'backup_vault' to be a str")
        pulumi.set(__self__, "backup_vault", backup_vault)
        if backup_vault_service_account and not isinstance(backup_vault_service_account, str):
            raise TypeError("Expected argument 'backup_vault_service_account' to be a str")
        pulumi.set(__self__, "backup_vault_service_account", backup_vault_service_account)
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if project and not isinstance(project, str):
            raise TypeError("Expected argument 'project' to be a str")
        pulumi.set(__self__, "project", project)
        if resource_type and not isinstance(resource_type, str):
            raise TypeError("Expected argument 'resource_type' to be a str")
        pulumi.set(__self__, "resource_type", resource_type)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="backupPlanId")
    def backup_plan_id(self) -> str:
        return pulumi.get(self, "backup_plan_id")

    @property
    @pulumi.getter(name="backupRules")
    def backup_rules(self) -> Sequence['outputs.GetBackupPlanBackupRuleResult']:
        return pulumi.get(self, "backup_rules")

    @property
    @pulumi.getter(name="backupVault")
    def backup_vault(self) -> str:
        return pulumi.get(self, "backup_vault")

    @property
    @pulumi.getter(name="backupVaultServiceAccount")
    def backup_vault_service_account(self) -> str:
        return pulumi.get(self, "backup_vault_service_account")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def location(self) -> str:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        return pulumi.get(self, "update_time")


class AwaitableGetBackupPlanResult(GetBackupPlanResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBackupPlanResult(
            backup_plan_id=self.backup_plan_id,
            backup_rules=self.backup_rules,
            backup_vault=self.backup_vault,
            backup_vault_service_account=self.backup_vault_service_account,
            create_time=self.create_time,
            description=self.description,
            id=self.id,
            location=self.location,
            name=self.name,
            project=self.project,
            resource_type=self.resource_type,
            update_time=self.update_time)


def get_backup_plan(backup_plan_id: Optional[str] = None,
                    location: Optional[str] = None,
                    project: Optional[str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBackupPlanResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['backupPlanId'] = backup_plan_id
    __args__['location'] = location
    __args__['project'] = project
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('gcp:backupdisasterrecovery/getBackupPlan:getBackupPlan', __args__, opts=opts, typ=GetBackupPlanResult).value

    return AwaitableGetBackupPlanResult(
        backup_plan_id=pulumi.get(__ret__, 'backup_plan_id'),
        backup_rules=pulumi.get(__ret__, 'backup_rules'),
        backup_vault=pulumi.get(__ret__, 'backup_vault'),
        backup_vault_service_account=pulumi.get(__ret__, 'backup_vault_service_account'),
        create_time=pulumi.get(__ret__, 'create_time'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        location=pulumi.get(__ret__, 'location'),
        name=pulumi.get(__ret__, 'name'),
        project=pulumi.get(__ret__, 'project'),
        resource_type=pulumi.get(__ret__, 'resource_type'),
        update_time=pulumi.get(__ret__, 'update_time'))
def get_backup_plan_output(backup_plan_id: Optional[pulumi.Input[str]] = None,
                           location: Optional[pulumi.Input[str]] = None,
                           project: Optional[pulumi.Input[Optional[str]]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetBackupPlanResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['backupPlanId'] = backup_plan_id
    __args__['location'] = location
    __args__['project'] = project
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('gcp:backupdisasterrecovery/getBackupPlan:getBackupPlan', __args__, opts=opts, typ=GetBackupPlanResult)
    return __ret__.apply(lambda __response__: GetBackupPlanResult(
        backup_plan_id=pulumi.get(__response__, 'backup_plan_id'),
        backup_rules=pulumi.get(__response__, 'backup_rules'),
        backup_vault=pulumi.get(__response__, 'backup_vault'),
        backup_vault_service_account=pulumi.get(__response__, 'backup_vault_service_account'),
        create_time=pulumi.get(__response__, 'create_time'),
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        location=pulumi.get(__response__, 'location'),
        name=pulumi.get(__response__, 'name'),
        project=pulumi.get(__response__, 'project'),
        resource_type=pulumi.get(__response__, 'resource_type'),
        update_time=pulumi.get(__response__, 'update_time')))
