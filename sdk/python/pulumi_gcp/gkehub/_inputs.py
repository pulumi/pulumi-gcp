# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'FeatureIamBindingConditionArgs',
    'FeatureIamMemberConditionArgs',
    'FeatureMembershipConfigmanagementArgs',
    'FeatureMembershipConfigmanagementBinauthzArgs',
    'FeatureMembershipConfigmanagementConfigSyncArgs',
    'FeatureMembershipConfigmanagementConfigSyncGitArgs',
    'FeatureMembershipConfigmanagementConfigSyncOciArgs',
    'FeatureMembershipConfigmanagementHierarchyControllerArgs',
    'FeatureMembershipConfigmanagementPolicyControllerArgs',
    'FeatureMembershipConfigmanagementPolicyControllerMonitoringArgs',
    'FeatureMembershipMeshArgs',
    'FeatureResourceStateArgs',
    'FeatureSpecArgs',
    'FeatureSpecFleetobservabilityArgs',
    'FeatureSpecFleetobservabilityLoggingConfigArgs',
    'FeatureSpecFleetobservabilityLoggingConfigDefaultConfigArgs',
    'FeatureSpecFleetobservabilityLoggingConfigFleetScopeLogsConfigArgs',
    'FeatureSpecMulticlusteringressArgs',
    'FeatureStateArgs',
    'FeatureStateStateArgs',
    'MembershipAuthorityArgs',
    'MembershipBindingStateArgs',
    'MembershipEndpointArgs',
    'MembershipEndpointGkeClusterArgs',
    'MembershipIamBindingConditionArgs',
    'MembershipIamMemberConditionArgs',
    'MembershipRbacRoleBindingRoleArgs',
    'MembershipRbacRoleBindingStateArgs',
    'NamespaceStateArgs',
    'ScopeIamBindingConditionArgs',
    'ScopeIamMemberConditionArgs',
    'ScopeRbacRoleBindingRoleArgs',
    'ScopeRbacRoleBindingStateArgs',
    'ScopeStateArgs',
]

@pulumi.input_type
class FeatureIamBindingConditionArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 title: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None):
        FeatureIamBindingConditionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            expression=expression,
            title=title,
            description=description,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             expression: pulumi.Input[str],
             title: pulumi.Input[str],
             description: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("expression", expression)
        _setter("title", title)
        if description is not None:
            _setter("description", description)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)


@pulumi.input_type
class FeatureIamMemberConditionArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 title: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None):
        FeatureIamMemberConditionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            expression=expression,
            title=title,
            description=description,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             expression: pulumi.Input[str],
             title: pulumi.Input[str],
             description: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("expression", expression)
        _setter("title", title)
        if description is not None:
            _setter("description", description)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)


@pulumi.input_type
class FeatureMembershipConfigmanagementArgs:
    def __init__(__self__, *,
                 binauthz: Optional[pulumi.Input['FeatureMembershipConfigmanagementBinauthzArgs']] = None,
                 config_sync: Optional[pulumi.Input['FeatureMembershipConfigmanagementConfigSyncArgs']] = None,
                 hierarchy_controller: Optional[pulumi.Input['FeatureMembershipConfigmanagementHierarchyControllerArgs']] = None,
                 policy_controller: Optional[pulumi.Input['FeatureMembershipConfigmanagementPolicyControllerArgs']] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['FeatureMembershipConfigmanagementBinauthzArgs'] binauthz: Binauthz configuration for the cluster. Structure is documented below.
        :param pulumi.Input['FeatureMembershipConfigmanagementConfigSyncArgs'] config_sync: Config Sync configuration for the cluster. Structure is documented below.
        :param pulumi.Input['FeatureMembershipConfigmanagementHierarchyControllerArgs'] hierarchy_controller: Hierarchy Controller configuration for the cluster. Structure is documented below.
        :param pulumi.Input['FeatureMembershipConfigmanagementPolicyControllerArgs'] policy_controller: Policy Controller configuration for the cluster. Structure is documented below.
        :param pulumi.Input[str] version: Version of ACM installed.
        """
        FeatureMembershipConfigmanagementArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            binauthz=binauthz,
            config_sync=config_sync,
            hierarchy_controller=hierarchy_controller,
            policy_controller=policy_controller,
            version=version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             binauthz: Optional[pulumi.Input['FeatureMembershipConfigmanagementBinauthzArgs']] = None,
             config_sync: Optional[pulumi.Input['FeatureMembershipConfigmanagementConfigSyncArgs']] = None,
             hierarchy_controller: Optional[pulumi.Input['FeatureMembershipConfigmanagementHierarchyControllerArgs']] = None,
             policy_controller: Optional[pulumi.Input['FeatureMembershipConfigmanagementPolicyControllerArgs']] = None,
             version: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if binauthz is not None:
            _setter("binauthz", binauthz)
        if config_sync is not None:
            _setter("config_sync", config_sync)
        if hierarchy_controller is not None:
            _setter("hierarchy_controller", hierarchy_controller)
        if policy_controller is not None:
            _setter("policy_controller", policy_controller)
        if version is not None:
            _setter("version", version)

    @property
    @pulumi.getter
    def binauthz(self) -> Optional[pulumi.Input['FeatureMembershipConfigmanagementBinauthzArgs']]:
        """
        Binauthz configuration for the cluster. Structure is documented below.
        """
        return pulumi.get(self, "binauthz")

    @binauthz.setter
    def binauthz(self, value: Optional[pulumi.Input['FeatureMembershipConfigmanagementBinauthzArgs']]):
        pulumi.set(self, "binauthz", value)

    @property
    @pulumi.getter(name="configSync")
    def config_sync(self) -> Optional[pulumi.Input['FeatureMembershipConfigmanagementConfigSyncArgs']]:
        """
        Config Sync configuration for the cluster. Structure is documented below.
        """
        return pulumi.get(self, "config_sync")

    @config_sync.setter
    def config_sync(self, value: Optional[pulumi.Input['FeatureMembershipConfigmanagementConfigSyncArgs']]):
        pulumi.set(self, "config_sync", value)

    @property
    @pulumi.getter(name="hierarchyController")
    def hierarchy_controller(self) -> Optional[pulumi.Input['FeatureMembershipConfigmanagementHierarchyControllerArgs']]:
        """
        Hierarchy Controller configuration for the cluster. Structure is documented below.
        """
        return pulumi.get(self, "hierarchy_controller")

    @hierarchy_controller.setter
    def hierarchy_controller(self, value: Optional[pulumi.Input['FeatureMembershipConfigmanagementHierarchyControllerArgs']]):
        pulumi.set(self, "hierarchy_controller", value)

    @property
    @pulumi.getter(name="policyController")
    def policy_controller(self) -> Optional[pulumi.Input['FeatureMembershipConfigmanagementPolicyControllerArgs']]:
        """
        Policy Controller configuration for the cluster. Structure is documented below.
        """
        return pulumi.get(self, "policy_controller")

    @policy_controller.setter
    def policy_controller(self, value: Optional[pulumi.Input['FeatureMembershipConfigmanagementPolicyControllerArgs']]):
        pulumi.set(self, "policy_controller", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        Version of ACM installed.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class FeatureMembershipConfigmanagementBinauthzArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: Whether binauthz is enabled in this cluster.
        """
        FeatureMembershipConfigmanagementBinauthzArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if enabled is not None:
            _setter("enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether binauthz is enabled in this cluster.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class FeatureMembershipConfigmanagementConfigSyncArgs:
    def __init__(__self__, *,
                 git: Optional[pulumi.Input['FeatureMembershipConfigmanagementConfigSyncGitArgs']] = None,
                 oci: Optional[pulumi.Input['FeatureMembershipConfigmanagementConfigSyncOciArgs']] = None,
                 prevent_drift: Optional[pulumi.Input[bool]] = None,
                 source_format: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['FeatureMembershipConfigmanagementConfigSyncGitArgs'] git: (Optional) Structure is documented below.
        :param pulumi.Input['FeatureMembershipConfigmanagementConfigSyncOciArgs'] oci: (Optional) Supported from ACM versions 1.12.0 onwards. Structure is documented below.
               
               Use either `git` or `oci` config option.
        :param pulumi.Input[bool] prevent_drift: Supported from ACM versions 1.10.0 onwards. Set to true to enable the Config Sync admission webhook to prevent drifts. If set to "false", disables the Config Sync admission webhook and does not prevent drifts.
        :param pulumi.Input[str] source_format: Specifies whether the Config Sync Repo is in "hierarchical" or "unstructured" mode.
        """
        FeatureMembershipConfigmanagementConfigSyncArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            git=git,
            oci=oci,
            prevent_drift=prevent_drift,
            source_format=source_format,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             git: Optional[pulumi.Input['FeatureMembershipConfigmanagementConfigSyncGitArgs']] = None,
             oci: Optional[pulumi.Input['FeatureMembershipConfigmanagementConfigSyncOciArgs']] = None,
             prevent_drift: Optional[pulumi.Input[bool]] = None,
             source_format: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if git is not None:
            _setter("git", git)
        if oci is not None:
            _setter("oci", oci)
        if prevent_drift is not None:
            _setter("prevent_drift", prevent_drift)
        if source_format is not None:
            _setter("source_format", source_format)

    @property
    @pulumi.getter
    def git(self) -> Optional[pulumi.Input['FeatureMembershipConfigmanagementConfigSyncGitArgs']]:
        """
        (Optional) Structure is documented below.
        """
        return pulumi.get(self, "git")

    @git.setter
    def git(self, value: Optional[pulumi.Input['FeatureMembershipConfigmanagementConfigSyncGitArgs']]):
        pulumi.set(self, "git", value)

    @property
    @pulumi.getter
    def oci(self) -> Optional[pulumi.Input['FeatureMembershipConfigmanagementConfigSyncOciArgs']]:
        """
        (Optional) Supported from ACM versions 1.12.0 onwards. Structure is documented below.

        Use either `git` or `oci` config option.
        """
        return pulumi.get(self, "oci")

    @oci.setter
    def oci(self, value: Optional[pulumi.Input['FeatureMembershipConfigmanagementConfigSyncOciArgs']]):
        pulumi.set(self, "oci", value)

    @property
    @pulumi.getter(name="preventDrift")
    def prevent_drift(self) -> Optional[pulumi.Input[bool]]:
        """
        Supported from ACM versions 1.10.0 onwards. Set to true to enable the Config Sync admission webhook to prevent drifts. If set to "false", disables the Config Sync admission webhook and does not prevent drifts.
        """
        return pulumi.get(self, "prevent_drift")

    @prevent_drift.setter
    def prevent_drift(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "prevent_drift", value)

    @property
    @pulumi.getter(name="sourceFormat")
    def source_format(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies whether the Config Sync Repo is in "hierarchical" or "unstructured" mode.
        """
        return pulumi.get(self, "source_format")

    @source_format.setter
    def source_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_format", value)


@pulumi.input_type
class FeatureMembershipConfigmanagementConfigSyncGitArgs:
    def __init__(__self__, *,
                 gcp_service_account_email: Optional[pulumi.Input[str]] = None,
                 https_proxy: Optional[pulumi.Input[str]] = None,
                 policy_dir: Optional[pulumi.Input[str]] = None,
                 secret_type: Optional[pulumi.Input[str]] = None,
                 sync_branch: Optional[pulumi.Input[str]] = None,
                 sync_repo: Optional[pulumi.Input[str]] = None,
                 sync_rev: Optional[pulumi.Input[str]] = None,
                 sync_wait_secs: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] gcp_service_account_email: The GCP Service Account Email used for auth when secretType is gcpServiceAccount.
        :param pulumi.Input[str] https_proxy: URL for the HTTPS proxy to be used when communicating with the Git repo.
        :param pulumi.Input[str] policy_dir: The path within the Git repository that represents the top level of the repo to sync. Default: the root directory of the repository.
        :param pulumi.Input[str] secret_type: Type of secret configured for access to the Git repo.
        :param pulumi.Input[str] sync_branch: The branch of the repository to sync from. Default: master.
        :param pulumi.Input[str] sync_repo: The URL of the Git repository to use as the source of truth.
        :param pulumi.Input[str] sync_rev: Git revision (tag or hash) to check out. Default HEAD.
        :param pulumi.Input[str] sync_wait_secs: Period in seconds between consecutive syncs. Default: 15.
        """
        FeatureMembershipConfigmanagementConfigSyncGitArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            gcp_service_account_email=gcp_service_account_email,
            https_proxy=https_proxy,
            policy_dir=policy_dir,
            secret_type=secret_type,
            sync_branch=sync_branch,
            sync_repo=sync_repo,
            sync_rev=sync_rev,
            sync_wait_secs=sync_wait_secs,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             gcp_service_account_email: Optional[pulumi.Input[str]] = None,
             https_proxy: Optional[pulumi.Input[str]] = None,
             policy_dir: Optional[pulumi.Input[str]] = None,
             secret_type: Optional[pulumi.Input[str]] = None,
             sync_branch: Optional[pulumi.Input[str]] = None,
             sync_repo: Optional[pulumi.Input[str]] = None,
             sync_rev: Optional[pulumi.Input[str]] = None,
             sync_wait_secs: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if gcp_service_account_email is not None:
            _setter("gcp_service_account_email", gcp_service_account_email)
        if https_proxy is not None:
            _setter("https_proxy", https_proxy)
        if policy_dir is not None:
            _setter("policy_dir", policy_dir)
        if secret_type is not None:
            _setter("secret_type", secret_type)
        if sync_branch is not None:
            _setter("sync_branch", sync_branch)
        if sync_repo is not None:
            _setter("sync_repo", sync_repo)
        if sync_rev is not None:
            _setter("sync_rev", sync_rev)
        if sync_wait_secs is not None:
            _setter("sync_wait_secs", sync_wait_secs)

    @property
    @pulumi.getter(name="gcpServiceAccountEmail")
    def gcp_service_account_email(self) -> Optional[pulumi.Input[str]]:
        """
        The GCP Service Account Email used for auth when secretType is gcpServiceAccount.
        """
        return pulumi.get(self, "gcp_service_account_email")

    @gcp_service_account_email.setter
    def gcp_service_account_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gcp_service_account_email", value)

    @property
    @pulumi.getter(name="httpsProxy")
    def https_proxy(self) -> Optional[pulumi.Input[str]]:
        """
        URL for the HTTPS proxy to be used when communicating with the Git repo.
        """
        return pulumi.get(self, "https_proxy")

    @https_proxy.setter
    def https_proxy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "https_proxy", value)

    @property
    @pulumi.getter(name="policyDir")
    def policy_dir(self) -> Optional[pulumi.Input[str]]:
        """
        The path within the Git repository that represents the top level of the repo to sync. Default: the root directory of the repository.
        """
        return pulumi.get(self, "policy_dir")

    @policy_dir.setter
    def policy_dir(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_dir", value)

    @property
    @pulumi.getter(name="secretType")
    def secret_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of secret configured for access to the Git repo.
        """
        return pulumi.get(self, "secret_type")

    @secret_type.setter
    def secret_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_type", value)

    @property
    @pulumi.getter(name="syncBranch")
    def sync_branch(self) -> Optional[pulumi.Input[str]]:
        """
        The branch of the repository to sync from. Default: master.
        """
        return pulumi.get(self, "sync_branch")

    @sync_branch.setter
    def sync_branch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sync_branch", value)

    @property
    @pulumi.getter(name="syncRepo")
    def sync_repo(self) -> Optional[pulumi.Input[str]]:
        """
        The URL of the Git repository to use as the source of truth.
        """
        return pulumi.get(self, "sync_repo")

    @sync_repo.setter
    def sync_repo(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sync_repo", value)

    @property
    @pulumi.getter(name="syncRev")
    def sync_rev(self) -> Optional[pulumi.Input[str]]:
        """
        Git revision (tag or hash) to check out. Default HEAD.
        """
        return pulumi.get(self, "sync_rev")

    @sync_rev.setter
    def sync_rev(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sync_rev", value)

    @property
    @pulumi.getter(name="syncWaitSecs")
    def sync_wait_secs(self) -> Optional[pulumi.Input[str]]:
        """
        Period in seconds between consecutive syncs. Default: 15.
        """
        return pulumi.get(self, "sync_wait_secs")

    @sync_wait_secs.setter
    def sync_wait_secs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sync_wait_secs", value)


@pulumi.input_type
class FeatureMembershipConfigmanagementConfigSyncOciArgs:
    def __init__(__self__, *,
                 gcp_service_account_email: Optional[pulumi.Input[str]] = None,
                 policy_dir: Optional[pulumi.Input[str]] = None,
                 secret_type: Optional[pulumi.Input[str]] = None,
                 sync_repo: Optional[pulumi.Input[str]] = None,
                 sync_wait_secs: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] gcp_service_account_email: The GCP Service Account Email used for auth when secret_type is gcpserviceaccount.
        :param pulumi.Input[str] policy_dir: The absolute path of the directory that contains the local resources. Default: the root directory of the image.
        :param pulumi.Input[str] secret_type: Type of secret configured for access to the OCI Image. Must be one of gcenode, gcpserviceaccount or none.
        :param pulumi.Input[str] sync_repo: The OCI image repository URL for the package to sync from. e.g. LOCATION-docker.pkg.dev/PROJECT_ID/REPOSITORY_NAME/PACKAGE_NAME.
        :param pulumi.Input[str] sync_wait_secs: Period in seconds(int64 format) between consecutive syncs. Default: 15.
        """
        FeatureMembershipConfigmanagementConfigSyncOciArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            gcp_service_account_email=gcp_service_account_email,
            policy_dir=policy_dir,
            secret_type=secret_type,
            sync_repo=sync_repo,
            sync_wait_secs=sync_wait_secs,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             gcp_service_account_email: Optional[pulumi.Input[str]] = None,
             policy_dir: Optional[pulumi.Input[str]] = None,
             secret_type: Optional[pulumi.Input[str]] = None,
             sync_repo: Optional[pulumi.Input[str]] = None,
             sync_wait_secs: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if gcp_service_account_email is not None:
            _setter("gcp_service_account_email", gcp_service_account_email)
        if policy_dir is not None:
            _setter("policy_dir", policy_dir)
        if secret_type is not None:
            _setter("secret_type", secret_type)
        if sync_repo is not None:
            _setter("sync_repo", sync_repo)
        if sync_wait_secs is not None:
            _setter("sync_wait_secs", sync_wait_secs)

    @property
    @pulumi.getter(name="gcpServiceAccountEmail")
    def gcp_service_account_email(self) -> Optional[pulumi.Input[str]]:
        """
        The GCP Service Account Email used for auth when secret_type is gcpserviceaccount.
        """
        return pulumi.get(self, "gcp_service_account_email")

    @gcp_service_account_email.setter
    def gcp_service_account_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gcp_service_account_email", value)

    @property
    @pulumi.getter(name="policyDir")
    def policy_dir(self) -> Optional[pulumi.Input[str]]:
        """
        The absolute path of the directory that contains the local resources. Default: the root directory of the image.
        """
        return pulumi.get(self, "policy_dir")

    @policy_dir.setter
    def policy_dir(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_dir", value)

    @property
    @pulumi.getter(name="secretType")
    def secret_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of secret configured for access to the OCI Image. Must be one of gcenode, gcpserviceaccount or none.
        """
        return pulumi.get(self, "secret_type")

    @secret_type.setter
    def secret_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_type", value)

    @property
    @pulumi.getter(name="syncRepo")
    def sync_repo(self) -> Optional[pulumi.Input[str]]:
        """
        The OCI image repository URL for the package to sync from. e.g. LOCATION-docker.pkg.dev/PROJECT_ID/REPOSITORY_NAME/PACKAGE_NAME.
        """
        return pulumi.get(self, "sync_repo")

    @sync_repo.setter
    def sync_repo(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sync_repo", value)

    @property
    @pulumi.getter(name="syncWaitSecs")
    def sync_wait_secs(self) -> Optional[pulumi.Input[str]]:
        """
        Period in seconds(int64 format) between consecutive syncs. Default: 15.
        """
        return pulumi.get(self, "sync_wait_secs")

    @sync_wait_secs.setter
    def sync_wait_secs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sync_wait_secs", value)


@pulumi.input_type
class FeatureMembershipConfigmanagementHierarchyControllerArgs:
    def __init__(__self__, *,
                 enable_hierarchical_resource_quota: Optional[pulumi.Input[bool]] = None,
                 enable_pod_tree_labels: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enable_hierarchical_resource_quota: Whether hierarchical resource quota is enabled in this cluster.
        :param pulumi.Input[bool] enable_pod_tree_labels: Whether pod tree labels are enabled in this cluster.
        :param pulumi.Input[bool] enabled: Whether Hierarchy Controller is enabled in this cluster.
        """
        FeatureMembershipConfigmanagementHierarchyControllerArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enable_hierarchical_resource_quota=enable_hierarchical_resource_quota,
            enable_pod_tree_labels=enable_pod_tree_labels,
            enabled=enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enable_hierarchical_resource_quota: Optional[pulumi.Input[bool]] = None,
             enable_pod_tree_labels: Optional[pulumi.Input[bool]] = None,
             enabled: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if enable_hierarchical_resource_quota is not None:
            _setter("enable_hierarchical_resource_quota", enable_hierarchical_resource_quota)
        if enable_pod_tree_labels is not None:
            _setter("enable_pod_tree_labels", enable_pod_tree_labels)
        if enabled is not None:
            _setter("enabled", enabled)

    @property
    @pulumi.getter(name="enableHierarchicalResourceQuota")
    def enable_hierarchical_resource_quota(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether hierarchical resource quota is enabled in this cluster.
        """
        return pulumi.get(self, "enable_hierarchical_resource_quota")

    @enable_hierarchical_resource_quota.setter
    def enable_hierarchical_resource_quota(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_hierarchical_resource_quota", value)

    @property
    @pulumi.getter(name="enablePodTreeLabels")
    def enable_pod_tree_labels(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether pod tree labels are enabled in this cluster.
        """
        return pulumi.get(self, "enable_pod_tree_labels")

    @enable_pod_tree_labels.setter
    def enable_pod_tree_labels(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_pod_tree_labels", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether Hierarchy Controller is enabled in this cluster.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class FeatureMembershipConfigmanagementPolicyControllerArgs:
    def __init__(__self__, *,
                 audit_interval_seconds: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 exemptable_namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 log_denies_enabled: Optional[pulumi.Input[bool]] = None,
                 monitoring: Optional[pulumi.Input['FeatureMembershipConfigmanagementPolicyControllerMonitoringArgs']] = None,
                 mutation_enabled: Optional[pulumi.Input[bool]] = None,
                 referential_rules_enabled: Optional[pulumi.Input[bool]] = None,
                 template_library_installed: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] audit_interval_seconds: Sets the interval for Policy Controller Audit Scans (in seconds). When set to 0, this disables audit functionality altogether.
        :param pulumi.Input[bool] enabled: Enables the installation of Policy Controller. If false, the rest of PolicyController fields take no effect.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] exemptable_namespaces: The set of namespaces that are excluded from Policy Controller checks. Namespaces do not need to currently exist on the cluster.
        :param pulumi.Input[bool] log_denies_enabled: Logs all denies and dry run failures.
        :param pulumi.Input['FeatureMembershipConfigmanagementPolicyControllerMonitoringArgs'] monitoring: Specifies the backends Policy Controller should export metrics to. For example, to specify metrics should be exported to Cloud Monitoring and Prometheus, specify backends: [\\"cloudmonitoring\\", \\"prometheus\\"]. Default: [\\"cloudmonitoring\\", \\"prometheus\\"]
        :param pulumi.Input[bool] mutation_enabled: Enables mutation in policy controller. If true, mutation CRDs, webhook, and controller deployment will be deployed to the cluster.
        :param pulumi.Input[bool] referential_rules_enabled: Enables the ability to use Constraint Templates that reference to objects other than the object currently being evaluated.
        :param pulumi.Input[bool] template_library_installed: Installs the default template library along with Policy Controller.
        """
        FeatureMembershipConfigmanagementPolicyControllerArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            audit_interval_seconds=audit_interval_seconds,
            enabled=enabled,
            exemptable_namespaces=exemptable_namespaces,
            log_denies_enabled=log_denies_enabled,
            monitoring=monitoring,
            mutation_enabled=mutation_enabled,
            referential_rules_enabled=referential_rules_enabled,
            template_library_installed=template_library_installed,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             audit_interval_seconds: Optional[pulumi.Input[str]] = None,
             enabled: Optional[pulumi.Input[bool]] = None,
             exemptable_namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             log_denies_enabled: Optional[pulumi.Input[bool]] = None,
             monitoring: Optional[pulumi.Input['FeatureMembershipConfigmanagementPolicyControllerMonitoringArgs']] = None,
             mutation_enabled: Optional[pulumi.Input[bool]] = None,
             referential_rules_enabled: Optional[pulumi.Input[bool]] = None,
             template_library_installed: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if audit_interval_seconds is not None:
            _setter("audit_interval_seconds", audit_interval_seconds)
        if enabled is not None:
            _setter("enabled", enabled)
        if exemptable_namespaces is not None:
            _setter("exemptable_namespaces", exemptable_namespaces)
        if log_denies_enabled is not None:
            _setter("log_denies_enabled", log_denies_enabled)
        if monitoring is not None:
            _setter("monitoring", monitoring)
        if mutation_enabled is not None:
            _setter("mutation_enabled", mutation_enabled)
        if referential_rules_enabled is not None:
            _setter("referential_rules_enabled", referential_rules_enabled)
        if template_library_installed is not None:
            _setter("template_library_installed", template_library_installed)

    @property
    @pulumi.getter(name="auditIntervalSeconds")
    def audit_interval_seconds(self) -> Optional[pulumi.Input[str]]:
        """
        Sets the interval for Policy Controller Audit Scans (in seconds). When set to 0, this disables audit functionality altogether.
        """
        return pulumi.get(self, "audit_interval_seconds")

    @audit_interval_seconds.setter
    def audit_interval_seconds(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "audit_interval_seconds", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables the installation of Policy Controller. If false, the rest of PolicyController fields take no effect.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="exemptableNamespaces")
    def exemptable_namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The set of namespaces that are excluded from Policy Controller checks. Namespaces do not need to currently exist on the cluster.
        """
        return pulumi.get(self, "exemptable_namespaces")

    @exemptable_namespaces.setter
    def exemptable_namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exemptable_namespaces", value)

    @property
    @pulumi.getter(name="logDeniesEnabled")
    def log_denies_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Logs all denies and dry run failures.
        """
        return pulumi.get(self, "log_denies_enabled")

    @log_denies_enabled.setter
    def log_denies_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "log_denies_enabled", value)

    @property
    @pulumi.getter
    def monitoring(self) -> Optional[pulumi.Input['FeatureMembershipConfigmanagementPolicyControllerMonitoringArgs']]:
        """
        Specifies the backends Policy Controller should export metrics to. For example, to specify metrics should be exported to Cloud Monitoring and Prometheus, specify backends: [\\"cloudmonitoring\\", \\"prometheus\\"]. Default: [\\"cloudmonitoring\\", \\"prometheus\\"]
        """
        return pulumi.get(self, "monitoring")

    @monitoring.setter
    def monitoring(self, value: Optional[pulumi.Input['FeatureMembershipConfigmanagementPolicyControllerMonitoringArgs']]):
        pulumi.set(self, "monitoring", value)

    @property
    @pulumi.getter(name="mutationEnabled")
    def mutation_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables mutation in policy controller. If true, mutation CRDs, webhook, and controller deployment will be deployed to the cluster.
        """
        return pulumi.get(self, "mutation_enabled")

    @mutation_enabled.setter
    def mutation_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mutation_enabled", value)

    @property
    @pulumi.getter(name="referentialRulesEnabled")
    def referential_rules_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables the ability to use Constraint Templates that reference to objects other than the object currently being evaluated.
        """
        return pulumi.get(self, "referential_rules_enabled")

    @referential_rules_enabled.setter
    def referential_rules_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "referential_rules_enabled", value)

    @property
    @pulumi.getter(name="templateLibraryInstalled")
    def template_library_installed(self) -> Optional[pulumi.Input[bool]]:
        """
        Installs the default template library along with Policy Controller.
        """
        return pulumi.get(self, "template_library_installed")

    @template_library_installed.setter
    def template_library_installed(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "template_library_installed", value)


@pulumi.input_type
class FeatureMembershipConfigmanagementPolicyControllerMonitoringArgs:
    def __init__(__self__, *,
                 backends: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        FeatureMembershipConfigmanagementPolicyControllerMonitoringArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            backends=backends,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             backends: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if backends is not None:
            _setter("backends", backends)

    @property
    @pulumi.getter
    def backends(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "backends")

    @backends.setter
    def backends(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "backends", value)


@pulumi.input_type
class FeatureMembershipMeshArgs:
    def __init__(__self__, *,
                 control_plane: Optional[pulumi.Input[str]] = None,
                 management: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] management: Whether to automatically manage Service Mesh. Can either be `MANAGEMENT_AUTOMATIC` or `MANAGEMENT_MANUAL`.
        """
        FeatureMembershipMeshArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            control_plane=control_plane,
            management=management,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             control_plane: Optional[pulumi.Input[str]] = None,
             management: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if control_plane is not None:
            warnings.warn("""Deprecated in favor of the `management` field""", DeprecationWarning)
            pulumi.log.warn("""control_plane is deprecated: Deprecated in favor of the `management` field""")
        if control_plane is not None:
            _setter("control_plane", control_plane)
        if management is not None:
            _setter("management", management)

    @property
    @pulumi.getter(name="controlPlane")
    def control_plane(self) -> Optional[pulumi.Input[str]]:
        warnings.warn("""Deprecated in favor of the `management` field""", DeprecationWarning)
        pulumi.log.warn("""control_plane is deprecated: Deprecated in favor of the `management` field""")

        return pulumi.get(self, "control_plane")

    @control_plane.setter
    def control_plane(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "control_plane", value)

    @property
    @pulumi.getter
    def management(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to automatically manage Service Mesh. Can either be `MANAGEMENT_AUTOMATIC` or `MANAGEMENT_MANUAL`.
        """
        return pulumi.get(self, "management")

    @management.setter
    def management(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "management", value)


@pulumi.input_type
class FeatureResourceStateArgs:
    def __init__(__self__, *,
                 has_resources: Optional[pulumi.Input[bool]] = None,
                 state: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] has_resources: (Output)
               Whether this Feature has outstanding resources that need to be cleaned up before it can be disabled.
        :param pulumi.Input[str] state: (Output)
               Output only. The "running state" of the Feature in this Hub.
               Structure is documented below.
        """
        FeatureResourceStateArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            has_resources=has_resources,
            state=state,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             has_resources: Optional[pulumi.Input[bool]] = None,
             state: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if has_resources is not None:
            _setter("has_resources", has_resources)
        if state is not None:
            _setter("state", state)

    @property
    @pulumi.getter(name="hasResources")
    def has_resources(self) -> Optional[pulumi.Input[bool]]:
        """
        (Output)
        Whether this Feature has outstanding resources that need to be cleaned up before it can be disabled.
        """
        return pulumi.get(self, "has_resources")

    @has_resources.setter
    def has_resources(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "has_resources", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        Output only. The "running state" of the Feature in this Hub.
        Structure is documented below.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)


@pulumi.input_type
class FeatureSpecArgs:
    def __init__(__self__, *,
                 fleetobservability: Optional[pulumi.Input['FeatureSpecFleetobservabilityArgs']] = None,
                 multiclusteringress: Optional[pulumi.Input['FeatureSpecMulticlusteringressArgs']] = None):
        """
        :param pulumi.Input['FeatureSpecFleetobservabilityArgs'] fleetobservability: Fleet Observability feature spec.
               Structure is documented below.
        :param pulumi.Input['FeatureSpecMulticlusteringressArgs'] multiclusteringress: Multicluster Ingress-specific spec.
               Structure is documented below.
        """
        FeatureSpecArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            fleetobservability=fleetobservability,
            multiclusteringress=multiclusteringress,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             fleetobservability: Optional[pulumi.Input['FeatureSpecFleetobservabilityArgs']] = None,
             multiclusteringress: Optional[pulumi.Input['FeatureSpecMulticlusteringressArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if fleetobservability is not None:
            _setter("fleetobservability", fleetobservability)
        if multiclusteringress is not None:
            _setter("multiclusteringress", multiclusteringress)

    @property
    @pulumi.getter
    def fleetobservability(self) -> Optional[pulumi.Input['FeatureSpecFleetobservabilityArgs']]:
        """
        Fleet Observability feature spec.
        Structure is documented below.
        """
        return pulumi.get(self, "fleetobservability")

    @fleetobservability.setter
    def fleetobservability(self, value: Optional[pulumi.Input['FeatureSpecFleetobservabilityArgs']]):
        pulumi.set(self, "fleetobservability", value)

    @property
    @pulumi.getter
    def multiclusteringress(self) -> Optional[pulumi.Input['FeatureSpecMulticlusteringressArgs']]:
        """
        Multicluster Ingress-specific spec.
        Structure is documented below.
        """
        return pulumi.get(self, "multiclusteringress")

    @multiclusteringress.setter
    def multiclusteringress(self, value: Optional[pulumi.Input['FeatureSpecMulticlusteringressArgs']]):
        pulumi.set(self, "multiclusteringress", value)


@pulumi.input_type
class FeatureSpecFleetobservabilityArgs:
    def __init__(__self__, *,
                 logging_config: Optional[pulumi.Input['FeatureSpecFleetobservabilityLoggingConfigArgs']] = None):
        """
        :param pulumi.Input['FeatureSpecFleetobservabilityLoggingConfigArgs'] logging_config: Specified if fleet logging feature is enabled for the entire fleet. If UNSPECIFIED, fleet logging feature is disabled for the entire fleet.
               Structure is documented below.
        """
        FeatureSpecFleetobservabilityArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            logging_config=logging_config,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             logging_config: Optional[pulumi.Input['FeatureSpecFleetobservabilityLoggingConfigArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if logging_config is not None:
            _setter("logging_config", logging_config)

    @property
    @pulumi.getter(name="loggingConfig")
    def logging_config(self) -> Optional[pulumi.Input['FeatureSpecFleetobservabilityLoggingConfigArgs']]:
        """
        Specified if fleet logging feature is enabled for the entire fleet. If UNSPECIFIED, fleet logging feature is disabled for the entire fleet.
        Structure is documented below.
        """
        return pulumi.get(self, "logging_config")

    @logging_config.setter
    def logging_config(self, value: Optional[pulumi.Input['FeatureSpecFleetobservabilityLoggingConfigArgs']]):
        pulumi.set(self, "logging_config", value)


@pulumi.input_type
class FeatureSpecFleetobservabilityLoggingConfigArgs:
    def __init__(__self__, *,
                 default_config: Optional[pulumi.Input['FeatureSpecFleetobservabilityLoggingConfigDefaultConfigArgs']] = None,
                 fleet_scope_logs_config: Optional[pulumi.Input['FeatureSpecFleetobservabilityLoggingConfigFleetScopeLogsConfigArgs']] = None):
        """
        :param pulumi.Input['FeatureSpecFleetobservabilityLoggingConfigDefaultConfigArgs'] default_config: Specified if applying the default routing config to logs not specified in other configs.
               Structure is documented below.
        :param pulumi.Input['FeatureSpecFleetobservabilityLoggingConfigFleetScopeLogsConfigArgs'] fleet_scope_logs_config: Specified if applying the routing config to all logs for all fleet scopes.
               Structure is documented below.
        """
        FeatureSpecFleetobservabilityLoggingConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            default_config=default_config,
            fleet_scope_logs_config=fleet_scope_logs_config,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             default_config: Optional[pulumi.Input['FeatureSpecFleetobservabilityLoggingConfigDefaultConfigArgs']] = None,
             fleet_scope_logs_config: Optional[pulumi.Input['FeatureSpecFleetobservabilityLoggingConfigFleetScopeLogsConfigArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if default_config is not None:
            _setter("default_config", default_config)
        if fleet_scope_logs_config is not None:
            _setter("fleet_scope_logs_config", fleet_scope_logs_config)

    @property
    @pulumi.getter(name="defaultConfig")
    def default_config(self) -> Optional[pulumi.Input['FeatureSpecFleetobservabilityLoggingConfigDefaultConfigArgs']]:
        """
        Specified if applying the default routing config to logs not specified in other configs.
        Structure is documented below.
        """
        return pulumi.get(self, "default_config")

    @default_config.setter
    def default_config(self, value: Optional[pulumi.Input['FeatureSpecFleetobservabilityLoggingConfigDefaultConfigArgs']]):
        pulumi.set(self, "default_config", value)

    @property
    @pulumi.getter(name="fleetScopeLogsConfig")
    def fleet_scope_logs_config(self) -> Optional[pulumi.Input['FeatureSpecFleetobservabilityLoggingConfigFleetScopeLogsConfigArgs']]:
        """
        Specified if applying the routing config to all logs for all fleet scopes.
        Structure is documented below.
        """
        return pulumi.get(self, "fleet_scope_logs_config")

    @fleet_scope_logs_config.setter
    def fleet_scope_logs_config(self, value: Optional[pulumi.Input['FeatureSpecFleetobservabilityLoggingConfigFleetScopeLogsConfigArgs']]):
        pulumi.set(self, "fleet_scope_logs_config", value)


@pulumi.input_type
class FeatureSpecFleetobservabilityLoggingConfigDefaultConfigArgs:
    def __init__(__self__, *,
                 mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] mode: Specified if fleet logging feature is enabled.
               Possible values are: `MODE_UNSPECIFIED`, `COPY`, `MOVE`.
        """
        FeatureSpecFleetobservabilityLoggingConfigDefaultConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            mode=mode,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             mode: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if mode is not None:
            _setter("mode", mode)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Specified if fleet logging feature is enabled.
        Possible values are: `MODE_UNSPECIFIED`, `COPY`, `MOVE`.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class FeatureSpecFleetobservabilityLoggingConfigFleetScopeLogsConfigArgs:
    def __init__(__self__, *,
                 mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] mode: Specified if fleet logging feature is enabled.
               Possible values are: `MODE_UNSPECIFIED`, `COPY`, `MOVE`.
        """
        FeatureSpecFleetobservabilityLoggingConfigFleetScopeLogsConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            mode=mode,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             mode: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if mode is not None:
            _setter("mode", mode)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Specified if fleet logging feature is enabled.
        Possible values are: `MODE_UNSPECIFIED`, `COPY`, `MOVE`.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class FeatureSpecMulticlusteringressArgs:
    def __init__(__self__, *,
                 config_membership: pulumi.Input[str]):
        """
        :param pulumi.Input[str] config_membership: Fully-qualified Membership name which hosts the MultiClusterIngress CRD. Example: `projects/foo-proj/locations/global/memberships/bar`
        """
        FeatureSpecMulticlusteringressArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            config_membership=config_membership,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             config_membership: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("config_membership", config_membership)

    @property
    @pulumi.getter(name="configMembership")
    def config_membership(self) -> pulumi.Input[str]:
        """
        Fully-qualified Membership name which hosts the MultiClusterIngress CRD. Example: `projects/foo-proj/locations/global/memberships/bar`
        """
        return pulumi.get(self, "config_membership")

    @config_membership.setter
    def config_membership(self, value: pulumi.Input[str]):
        pulumi.set(self, "config_membership", value)


@pulumi.input_type
class FeatureStateArgs:
    def __init__(__self__, *,
                 states: Optional[pulumi.Input[Sequence[pulumi.Input['FeatureStateStateArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['FeatureStateStateArgs']]] states: (Output)
               Output only. The "running state" of the Feature in this Hub.
               Structure is documented below.
        """
        FeatureStateArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            states=states,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             states: Optional[pulumi.Input[Sequence[pulumi.Input['FeatureStateStateArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if states is not None:
            _setter("states", states)

    @property
    @pulumi.getter
    def states(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FeatureStateStateArgs']]]]:
        """
        (Output)
        Output only. The "running state" of the Feature in this Hub.
        Structure is documented below.
        """
        return pulumi.get(self, "states")

    @states.setter
    def states(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FeatureStateStateArgs']]]]):
        pulumi.set(self, "states", value)


@pulumi.input_type
class FeatureStateStateArgs:
    def __init__(__self__, *,
                 code: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 update_time: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] code: (Output)
               The high-level, machine-readable status of this Feature.
        :param pulumi.Input[str] description: (Output)
               A human-readable description of the current status.
        :param pulumi.Input[str] update_time: (Output)
               The time this status and any related Feature-specific details were updated. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z"
        """
        FeatureStateStateArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            code=code,
            description=description,
            update_time=update_time,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             code: Optional[pulumi.Input[str]] = None,
             description: Optional[pulumi.Input[str]] = None,
             update_time: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if code is not None:
            _setter("code", code)
        if description is not None:
            _setter("description", description)
        if update_time is not None:
            _setter("update_time", update_time)

    @property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        The high-level, machine-readable status of this Feature.
        """
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "code", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        A human-readable description of the current status.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        The time this status and any related Feature-specific details were updated. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z"
        """
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_time", value)


@pulumi.input_type
class MembershipAuthorityArgs:
    def __init__(__self__, *,
                 issuer: pulumi.Input[str]):
        MembershipAuthorityArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            issuer=issuer,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             issuer: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("issuer", issuer)

    @property
    @pulumi.getter
    def issuer(self) -> pulumi.Input[str]:
        return pulumi.get(self, "issuer")

    @issuer.setter
    def issuer(self, value: pulumi.Input[str]):
        pulumi.set(self, "issuer", value)


@pulumi.input_type
class MembershipBindingStateArgs:
    def __init__(__self__, *,
                 code: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] code: (Output)
               Code describes the state of a MembershipBinding resource.
        """
        MembershipBindingStateArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            code=code,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             code: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if code is not None:
            _setter("code", code)

    @property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        Code describes the state of a MembershipBinding resource.
        """
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "code", value)


@pulumi.input_type
class MembershipEndpointArgs:
    def __init__(__self__, *,
                 gke_cluster: Optional[pulumi.Input['MembershipEndpointGkeClusterArgs']] = None):
        """
        :param pulumi.Input['MembershipEndpointGkeClusterArgs'] gke_cluster: If this Membership is a Kubernetes API server hosted on GKE, this is a self link to its GCP resource.
               Structure is documented below.
        """
        MembershipEndpointArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            gke_cluster=gke_cluster,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             gke_cluster: Optional[pulumi.Input['MembershipEndpointGkeClusterArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if gke_cluster is not None:
            _setter("gke_cluster", gke_cluster)

    @property
    @pulumi.getter(name="gkeCluster")
    def gke_cluster(self) -> Optional[pulumi.Input['MembershipEndpointGkeClusterArgs']]:
        """
        If this Membership is a Kubernetes API server hosted on GKE, this is a self link to its GCP resource.
        Structure is documented below.
        """
        return pulumi.get(self, "gke_cluster")

    @gke_cluster.setter
    def gke_cluster(self, value: Optional[pulumi.Input['MembershipEndpointGkeClusterArgs']]):
        pulumi.set(self, "gke_cluster", value)


@pulumi.input_type
class MembershipEndpointGkeClusterArgs:
    def __init__(__self__, *,
                 resource_link: pulumi.Input[str]):
        MembershipEndpointGkeClusterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            resource_link=resource_link,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             resource_link: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("resource_link", resource_link)

    @property
    @pulumi.getter(name="resourceLink")
    def resource_link(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource_link")

    @resource_link.setter
    def resource_link(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_link", value)


@pulumi.input_type
class MembershipIamBindingConditionArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 title: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None):
        MembershipIamBindingConditionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            expression=expression,
            title=title,
            description=description,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             expression: pulumi.Input[str],
             title: pulumi.Input[str],
             description: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("expression", expression)
        _setter("title", title)
        if description is not None:
            _setter("description", description)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)


@pulumi.input_type
class MembershipIamMemberConditionArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 title: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None):
        MembershipIamMemberConditionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            expression=expression,
            title=title,
            description=description,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             expression: pulumi.Input[str],
             title: pulumi.Input[str],
             description: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("expression", expression)
        _setter("title", title)
        if description is not None:
            _setter("description", description)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)


@pulumi.input_type
class MembershipRbacRoleBindingRoleArgs:
    def __init__(__self__, *,
                 predefined_role: pulumi.Input[str]):
        """
        :param pulumi.Input[str] predefined_role: PredefinedRole is an ENUM representation of the default Kubernetes Roles
               Possible values are: `UNKNOWN`, `ADMIN`, `EDIT`, `VIEW`, `ANTHOS_SUPPORT`.
               
               - - -
        """
        MembershipRbacRoleBindingRoleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            predefined_role=predefined_role,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             predefined_role: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("predefined_role", predefined_role)

    @property
    @pulumi.getter(name="predefinedRole")
    def predefined_role(self) -> pulumi.Input[str]:
        """
        PredefinedRole is an ENUM representation of the default Kubernetes Roles
        Possible values are: `UNKNOWN`, `ADMIN`, `EDIT`, `VIEW`, `ANTHOS_SUPPORT`.

        - - -
        """
        return pulumi.get(self, "predefined_role")

    @predefined_role.setter
    def predefined_role(self, value: pulumi.Input[str]):
        pulumi.set(self, "predefined_role", value)


@pulumi.input_type
class MembershipRbacRoleBindingStateArgs:
    def __init__(__self__, *,
                 code: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] code: (Output)
               Code describes the state of a RBAC Role Binding resource.
        """
        MembershipRbacRoleBindingStateArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            code=code,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             code: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if code is not None:
            _setter("code", code)

    @property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        Code describes the state of a RBAC Role Binding resource.
        """
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "code", value)


@pulumi.input_type
class NamespaceStateArgs:
    def __init__(__self__, *,
                 code: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] code: (Output)
               Code describes the state of a Namespace resource.
        """
        NamespaceStateArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            code=code,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             code: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if code is not None:
            _setter("code", code)

    @property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        Code describes the state of a Namespace resource.
        """
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "code", value)


@pulumi.input_type
class ScopeIamBindingConditionArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 title: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None):
        ScopeIamBindingConditionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            expression=expression,
            title=title,
            description=description,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             expression: pulumi.Input[str],
             title: pulumi.Input[str],
             description: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("expression", expression)
        _setter("title", title)
        if description is not None:
            _setter("description", description)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)


@pulumi.input_type
class ScopeIamMemberConditionArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 title: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None):
        ScopeIamMemberConditionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            expression=expression,
            title=title,
            description=description,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             expression: pulumi.Input[str],
             title: pulumi.Input[str],
             description: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("expression", expression)
        _setter("title", title)
        if description is not None:
            _setter("description", description)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)


@pulumi.input_type
class ScopeRbacRoleBindingRoleArgs:
    def __init__(__self__, *,
                 predefined_role: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] predefined_role: PredefinedRole is an ENUM representation of the default Kubernetes Roles
               Possible values are: `UNKNOWN`, `ADMIN`, `EDIT`, `VIEW`.
               
               - - -
        """
        ScopeRbacRoleBindingRoleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            predefined_role=predefined_role,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             predefined_role: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if predefined_role is not None:
            _setter("predefined_role", predefined_role)

    @property
    @pulumi.getter(name="predefinedRole")
    def predefined_role(self) -> Optional[pulumi.Input[str]]:
        """
        PredefinedRole is an ENUM representation of the default Kubernetes Roles
        Possible values are: `UNKNOWN`, `ADMIN`, `EDIT`, `VIEW`.

        - - -
        """
        return pulumi.get(self, "predefined_role")

    @predefined_role.setter
    def predefined_role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "predefined_role", value)


@pulumi.input_type
class ScopeRbacRoleBindingStateArgs:
    def __init__(__self__, *,
                 code: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] code: (Output)
               Code describes the state of a RBAC Role Binding resource.
        """
        ScopeRbacRoleBindingStateArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            code=code,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             code: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if code is not None:
            _setter("code", code)

    @property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        Code describes the state of a RBAC Role Binding resource.
        """
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "code", value)


@pulumi.input_type
class ScopeStateArgs:
    def __init__(__self__, *,
                 code: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] code: (Output)
               Code describes the state of a Scope resource.
        """
        ScopeStateArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            code=code,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             code: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if code is not None:
            _setter("code", code)

    @property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        Code describes the state of a Scope resource.
        """
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "code", value)


