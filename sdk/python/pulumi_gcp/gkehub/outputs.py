# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'FeatureFleetDefaultMemberConfig',
    'FeatureFleetDefaultMemberConfigConfigmanagement',
    'FeatureFleetDefaultMemberConfigConfigmanagementConfigSync',
    'FeatureFleetDefaultMemberConfigConfigmanagementConfigSyncGit',
    'FeatureFleetDefaultMemberConfigConfigmanagementConfigSyncOci',
    'FeatureFleetDefaultMemberConfigMesh',
    'FeatureFleetDefaultMemberConfigPolicycontroller',
    'FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfig',
    'FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfig',
    'FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigContainerResources',
    'FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigContainerResourcesLimits',
    'FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigContainerResourcesRequests',
    'FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigPodToleration',
    'FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigMonitoring',
    'FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContent',
    'FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentBundle',
    'FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentTemplateLibrary',
    'FeatureIamBindingCondition',
    'FeatureIamMemberCondition',
    'FeatureMembershipConfigmanagement',
    'FeatureMembershipConfigmanagementBinauthz',
    'FeatureMembershipConfigmanagementConfigSync',
    'FeatureMembershipConfigmanagementConfigSyncGit',
    'FeatureMembershipConfigmanagementConfigSyncOci',
    'FeatureMembershipConfigmanagementHierarchyController',
    'FeatureMembershipConfigmanagementPolicyController',
    'FeatureMembershipConfigmanagementPolicyControllerMonitoring',
    'FeatureMembershipMesh',
    'FeatureResourceState',
    'FeatureSpec',
    'FeatureSpecFleetobservability',
    'FeatureSpecFleetobservabilityLoggingConfig',
    'FeatureSpecFleetobservabilityLoggingConfigDefaultConfig',
    'FeatureSpecFleetobservabilityLoggingConfigFleetScopeLogsConfig',
    'FeatureSpecMulticlusteringress',
    'FeatureState',
    'FeatureStateState',
    'FleetDefaultClusterConfig',
    'FleetDefaultClusterConfigBinaryAuthorizationConfig',
    'FleetDefaultClusterConfigBinaryAuthorizationConfigPolicyBinding',
    'FleetDefaultClusterConfigSecurityPostureConfig',
    'FleetState',
    'MembershipAuthority',
    'MembershipBindingState',
    'MembershipEndpoint',
    'MembershipEndpointGkeCluster',
    'MembershipIamBindingCondition',
    'MembershipIamMemberCondition',
    'MembershipRbacRoleBindingRole',
    'MembershipRbacRoleBindingState',
    'NamespaceState',
    'ScopeIamBindingCondition',
    'ScopeIamMemberCondition',
    'ScopeRbacRoleBindingRole',
    'ScopeRbacRoleBindingState',
    'ScopeState',
]

@pulumi.output_type
class FeatureFleetDefaultMemberConfig(dict):
    def __init__(__self__, *,
                 configmanagement: Optional['outputs.FeatureFleetDefaultMemberConfigConfigmanagement'] = None,
                 mesh: Optional['outputs.FeatureFleetDefaultMemberConfigMesh'] = None,
                 policycontroller: Optional['outputs.FeatureFleetDefaultMemberConfigPolicycontroller'] = None):
        """
        :param 'FeatureFleetDefaultMemberConfigConfigmanagementArgs' configmanagement: Config Management spec
               Structure is documented below.
        :param 'FeatureFleetDefaultMemberConfigMeshArgs' mesh: Service Mesh spec
               Structure is documented below.
        :param 'FeatureFleetDefaultMemberConfigPolicycontrollerArgs' policycontroller: Policy Controller spec
               Structure is documented below.
        """
        if configmanagement is not None:
            pulumi.set(__self__, "configmanagement", configmanagement)
        if mesh is not None:
            pulumi.set(__self__, "mesh", mesh)
        if policycontroller is not None:
            pulumi.set(__self__, "policycontroller", policycontroller)

    @property
    @pulumi.getter
    def configmanagement(self) -> Optional['outputs.FeatureFleetDefaultMemberConfigConfigmanagement']:
        """
        Config Management spec
        Structure is documented below.
        """
        return pulumi.get(self, "configmanagement")

    @property
    @pulumi.getter
    def mesh(self) -> Optional['outputs.FeatureFleetDefaultMemberConfigMesh']:
        """
        Service Mesh spec
        Structure is documented below.
        """
        return pulumi.get(self, "mesh")

    @property
    @pulumi.getter
    def policycontroller(self) -> Optional['outputs.FeatureFleetDefaultMemberConfigPolicycontroller']:
        """
        Policy Controller spec
        Structure is documented below.
        """
        return pulumi.get(self, "policycontroller")


@pulumi.output_type
class FeatureFleetDefaultMemberConfigConfigmanagement(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "configSync":
            suggest = "config_sync"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FeatureFleetDefaultMemberConfigConfigmanagement. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FeatureFleetDefaultMemberConfigConfigmanagement.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FeatureFleetDefaultMemberConfigConfigmanagement.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 config_sync: Optional['outputs.FeatureFleetDefaultMemberConfigConfigmanagementConfigSync'] = None):
        """
        :param 'FeatureFleetDefaultMemberConfigConfigmanagementConfigSyncArgs' config_sync: ConfigSync configuration for the cluster
               Structure is documented below.
        """
        if config_sync is not None:
            pulumi.set(__self__, "config_sync", config_sync)

    @property
    @pulumi.getter(name="configSync")
    def config_sync(self) -> Optional['outputs.FeatureFleetDefaultMemberConfigConfigmanagementConfigSync']:
        """
        ConfigSync configuration for the cluster
        Structure is documented below.
        """
        return pulumi.get(self, "config_sync")


@pulumi.output_type
class FeatureFleetDefaultMemberConfigConfigmanagementConfigSync(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceFormat":
            suggest = "source_format"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FeatureFleetDefaultMemberConfigConfigmanagementConfigSync. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FeatureFleetDefaultMemberConfigConfigmanagementConfigSync.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FeatureFleetDefaultMemberConfigConfigmanagementConfigSync.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 git: Optional['outputs.FeatureFleetDefaultMemberConfigConfigmanagementConfigSyncGit'] = None,
                 oci: Optional['outputs.FeatureFleetDefaultMemberConfigConfigmanagementConfigSyncOci'] = None,
                 source_format: Optional[str] = None):
        """
        :param 'FeatureFleetDefaultMemberConfigConfigmanagementConfigSyncGitArgs' git: Git repo configuration for the cluster
               Structure is documented below.
        :param 'FeatureFleetDefaultMemberConfigConfigmanagementConfigSyncOciArgs' oci: OCI repo configuration for the cluster
               Structure is documented below.
        :param str source_format: Specifies whether the Config Sync Repo is in hierarchical or unstructured mode
        """
        if git is not None:
            pulumi.set(__self__, "git", git)
        if oci is not None:
            pulumi.set(__self__, "oci", oci)
        if source_format is not None:
            pulumi.set(__self__, "source_format", source_format)

    @property
    @pulumi.getter
    def git(self) -> Optional['outputs.FeatureFleetDefaultMemberConfigConfigmanagementConfigSyncGit']:
        """
        Git repo configuration for the cluster
        Structure is documented below.
        """
        return pulumi.get(self, "git")

    @property
    @pulumi.getter
    def oci(self) -> Optional['outputs.FeatureFleetDefaultMemberConfigConfigmanagementConfigSyncOci']:
        """
        OCI repo configuration for the cluster
        Structure is documented below.
        """
        return pulumi.get(self, "oci")

    @property
    @pulumi.getter(name="sourceFormat")
    def source_format(self) -> Optional[str]:
        """
        Specifies whether the Config Sync Repo is in hierarchical or unstructured mode
        """
        return pulumi.get(self, "source_format")


@pulumi.output_type
class FeatureFleetDefaultMemberConfigConfigmanagementConfigSyncGit(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretType":
            suggest = "secret_type"
        elif key == "gcpServiceAccountEmail":
            suggest = "gcp_service_account_email"
        elif key == "httpsProxy":
            suggest = "https_proxy"
        elif key == "policyDir":
            suggest = "policy_dir"
        elif key == "syncBranch":
            suggest = "sync_branch"
        elif key == "syncRepo":
            suggest = "sync_repo"
        elif key == "syncRev":
            suggest = "sync_rev"
        elif key == "syncWaitSecs":
            suggest = "sync_wait_secs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FeatureFleetDefaultMemberConfigConfigmanagementConfigSyncGit. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FeatureFleetDefaultMemberConfigConfigmanagementConfigSyncGit.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FeatureFleetDefaultMemberConfigConfigmanagementConfigSyncGit.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 secret_type: str,
                 gcp_service_account_email: Optional[str] = None,
                 https_proxy: Optional[str] = None,
                 policy_dir: Optional[str] = None,
                 sync_branch: Optional[str] = None,
                 sync_repo: Optional[str] = None,
                 sync_rev: Optional[str] = None,
                 sync_wait_secs: Optional[str] = None):
        """
        :param str secret_type: Type of secret configured for access to the Git repo
        :param str gcp_service_account_email: The Google Cloud Service Account Email used for auth when secretType is gcpServiceAccount
        :param str https_proxy: URL for the HTTPS Proxy to be used when communicating with the Git repo
        :param str policy_dir: The path within the Git repository that represents the top level of the repo to sync
        :param str sync_branch: The branch of the repository to sync from. Default: master
        :param str sync_repo: The URL of the Git repository to use as the source of truth
        :param str sync_rev: Git revision (tag or hash) to check out. Default HEAD
        :param str sync_wait_secs: Period in seconds between consecutive syncs. Default: 15
        """
        pulumi.set(__self__, "secret_type", secret_type)
        if gcp_service_account_email is not None:
            pulumi.set(__self__, "gcp_service_account_email", gcp_service_account_email)
        if https_proxy is not None:
            pulumi.set(__self__, "https_proxy", https_proxy)
        if policy_dir is not None:
            pulumi.set(__self__, "policy_dir", policy_dir)
        if sync_branch is not None:
            pulumi.set(__self__, "sync_branch", sync_branch)
        if sync_repo is not None:
            pulumi.set(__self__, "sync_repo", sync_repo)
        if sync_rev is not None:
            pulumi.set(__self__, "sync_rev", sync_rev)
        if sync_wait_secs is not None:
            pulumi.set(__self__, "sync_wait_secs", sync_wait_secs)

    @property
    @pulumi.getter(name="secretType")
    def secret_type(self) -> str:
        """
        Type of secret configured for access to the Git repo
        """
        return pulumi.get(self, "secret_type")

    @property
    @pulumi.getter(name="gcpServiceAccountEmail")
    def gcp_service_account_email(self) -> Optional[str]:
        """
        The Google Cloud Service Account Email used for auth when secretType is gcpServiceAccount
        """
        return pulumi.get(self, "gcp_service_account_email")

    @property
    @pulumi.getter(name="httpsProxy")
    def https_proxy(self) -> Optional[str]:
        """
        URL for the HTTPS Proxy to be used when communicating with the Git repo
        """
        return pulumi.get(self, "https_proxy")

    @property
    @pulumi.getter(name="policyDir")
    def policy_dir(self) -> Optional[str]:
        """
        The path within the Git repository that represents the top level of the repo to sync
        """
        return pulumi.get(self, "policy_dir")

    @property
    @pulumi.getter(name="syncBranch")
    def sync_branch(self) -> Optional[str]:
        """
        The branch of the repository to sync from. Default: master
        """
        return pulumi.get(self, "sync_branch")

    @property
    @pulumi.getter(name="syncRepo")
    def sync_repo(self) -> Optional[str]:
        """
        The URL of the Git repository to use as the source of truth
        """
        return pulumi.get(self, "sync_repo")

    @property
    @pulumi.getter(name="syncRev")
    def sync_rev(self) -> Optional[str]:
        """
        Git revision (tag or hash) to check out. Default HEAD
        """
        return pulumi.get(self, "sync_rev")

    @property
    @pulumi.getter(name="syncWaitSecs")
    def sync_wait_secs(self) -> Optional[str]:
        """
        Period in seconds between consecutive syncs. Default: 15
        """
        return pulumi.get(self, "sync_wait_secs")


@pulumi.output_type
class FeatureFleetDefaultMemberConfigConfigmanagementConfigSyncOci(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretType":
            suggest = "secret_type"
        elif key == "gcpServiceAccountEmail":
            suggest = "gcp_service_account_email"
        elif key == "policyDir":
            suggest = "policy_dir"
        elif key == "syncRepo":
            suggest = "sync_repo"
        elif key == "syncWaitSecs":
            suggest = "sync_wait_secs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FeatureFleetDefaultMemberConfigConfigmanagementConfigSyncOci. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FeatureFleetDefaultMemberConfigConfigmanagementConfigSyncOci.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FeatureFleetDefaultMemberConfigConfigmanagementConfigSyncOci.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 secret_type: str,
                 gcp_service_account_email: Optional[str] = None,
                 policy_dir: Optional[str] = None,
                 sync_repo: Optional[str] = None,
                 sync_wait_secs: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param str secret_type: Type of secret configured for access to the Git repo
        :param str gcp_service_account_email: The Google Cloud Service Account Email used for auth when secretType is gcpServiceAccount
        :param str policy_dir: The absolute path of the directory that contains the local resources. Default: the root directory of the image
        :param str sync_repo: The OCI image repository URL for the package to sync from
        :param str sync_wait_secs: Period in seconds between consecutive syncs. Default: 15
        :param str version: Version of ACM installed
        """
        pulumi.set(__self__, "secret_type", secret_type)
        if gcp_service_account_email is not None:
            pulumi.set(__self__, "gcp_service_account_email", gcp_service_account_email)
        if policy_dir is not None:
            pulumi.set(__self__, "policy_dir", policy_dir)
        if sync_repo is not None:
            pulumi.set(__self__, "sync_repo", sync_repo)
        if sync_wait_secs is not None:
            pulumi.set(__self__, "sync_wait_secs", sync_wait_secs)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="secretType")
    def secret_type(self) -> str:
        """
        Type of secret configured for access to the Git repo
        """
        return pulumi.get(self, "secret_type")

    @property
    @pulumi.getter(name="gcpServiceAccountEmail")
    def gcp_service_account_email(self) -> Optional[str]:
        """
        The Google Cloud Service Account Email used for auth when secretType is gcpServiceAccount
        """
        return pulumi.get(self, "gcp_service_account_email")

    @property
    @pulumi.getter(name="policyDir")
    def policy_dir(self) -> Optional[str]:
        """
        The absolute path of the directory that contains the local resources. Default: the root directory of the image
        """
        return pulumi.get(self, "policy_dir")

    @property
    @pulumi.getter(name="syncRepo")
    def sync_repo(self) -> Optional[str]:
        """
        The OCI image repository URL for the package to sync from
        """
        return pulumi.get(self, "sync_repo")

    @property
    @pulumi.getter(name="syncWaitSecs")
    def sync_wait_secs(self) -> Optional[str]:
        """
        Period in seconds between consecutive syncs. Default: 15
        """
        return pulumi.get(self, "sync_wait_secs")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version of ACM installed
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class FeatureFleetDefaultMemberConfigMesh(dict):
    def __init__(__self__, *,
                 management: str):
        """
        :param str management: Whether to automatically manage Service Mesh
               Possible values are: `MANAGEMENT_UNSPECIFIED`, `MANAGEMENT_AUTOMATIC`, `MANAGEMENT_MANUAL`.
        """
        pulumi.set(__self__, "management", management)

    @property
    @pulumi.getter
    def management(self) -> str:
        """
        Whether to automatically manage Service Mesh
        Possible values are: `MANAGEMENT_UNSPECIFIED`, `MANAGEMENT_AUTOMATIC`, `MANAGEMENT_MANUAL`.
        """
        return pulumi.get(self, "management")


@pulumi.output_type
class FeatureFleetDefaultMemberConfigPolicycontroller(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "policyControllerHubConfig":
            suggest = "policy_controller_hub_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FeatureFleetDefaultMemberConfigPolicycontroller. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FeatureFleetDefaultMemberConfigPolicycontroller.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FeatureFleetDefaultMemberConfigPolicycontroller.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 policy_controller_hub_config: 'outputs.FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfig',
                 version: Optional[str] = None):
        """
        :param 'FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigArgs' policy_controller_hub_config: Configuration of Policy Controller
               Structure is documented below.
        :param str version: Configures the version of Policy Controller
        """
        pulumi.set(__self__, "policy_controller_hub_config", policy_controller_hub_config)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="policyControllerHubConfig")
    def policy_controller_hub_config(self) -> 'outputs.FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfig':
        """
        Configuration of Policy Controller
        Structure is documented below.
        """
        return pulumi.get(self, "policy_controller_hub_config")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Configures the version of Policy Controller
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "installSpec":
            suggest = "install_spec"
        elif key == "auditIntervalSeconds":
            suggest = "audit_interval_seconds"
        elif key == "constraintViolationLimit":
            suggest = "constraint_violation_limit"
        elif key == "deploymentConfigs":
            suggest = "deployment_configs"
        elif key == "exemptableNamespaces":
            suggest = "exemptable_namespaces"
        elif key == "logDeniesEnabled":
            suggest = "log_denies_enabled"
        elif key == "mutationEnabled":
            suggest = "mutation_enabled"
        elif key == "policyContent":
            suggest = "policy_content"
        elif key == "referentialRulesEnabled":
            suggest = "referential_rules_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 install_spec: str,
                 audit_interval_seconds: Optional[int] = None,
                 constraint_violation_limit: Optional[int] = None,
                 deployment_configs: Optional[Sequence['outputs.FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfig']] = None,
                 exemptable_namespaces: Optional[Sequence[str]] = None,
                 log_denies_enabled: Optional[bool] = None,
                 monitoring: Optional['outputs.FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigMonitoring'] = None,
                 mutation_enabled: Optional[bool] = None,
                 policy_content: Optional['outputs.FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContent'] = None,
                 referential_rules_enabled: Optional[bool] = None):
        """
        :param str install_spec: Configures the mode of the Policy Controller installation
               Possible values are: `INSTALL_SPEC_UNSPECIFIED`, `INSTALL_SPEC_NOT_INSTALLED`, `INSTALL_SPEC_ENABLED`, `INSTALL_SPEC_SUSPENDED`, `INSTALL_SPEC_DETACHED`.
        :param int audit_interval_seconds: Interval for Policy Controller Audit scans (in seconds). When set to 0, this disables audit functionality altogether.
        :param int constraint_violation_limit: The maximum number of audit violations to be stored in a constraint. If not set, the internal default of 20 will be used.
        :param Sequence['FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigArgs'] deployment_configs: Map of deployment configs to deployments ("admission", "audit", "mutation").
               Structure is documented below.
        :param Sequence[str] exemptable_namespaces: The set of namespaces that are excluded from Policy Controller checks. Namespaces do not need to currently exist on the cluster.
        :param bool log_denies_enabled: Logs all denies and dry run failures.
        :param 'FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigMonitoringArgs' monitoring: Monitoring specifies the configuration of monitoring Policy Controller.
               Structure is documented below.
        :param bool mutation_enabled: Enables the ability to mutate resources using Policy Controller.
        :param 'FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentArgs' policy_content: Specifies the desired policy content on the cluster.
               Structure is documented below.
        :param bool referential_rules_enabled: Enables the ability to use Constraint Templates that reference to objects other than the object currently being evaluated.
        """
        pulumi.set(__self__, "install_spec", install_spec)
        if audit_interval_seconds is not None:
            pulumi.set(__self__, "audit_interval_seconds", audit_interval_seconds)
        if constraint_violation_limit is not None:
            pulumi.set(__self__, "constraint_violation_limit", constraint_violation_limit)
        if deployment_configs is not None:
            pulumi.set(__self__, "deployment_configs", deployment_configs)
        if exemptable_namespaces is not None:
            pulumi.set(__self__, "exemptable_namespaces", exemptable_namespaces)
        if log_denies_enabled is not None:
            pulumi.set(__self__, "log_denies_enabled", log_denies_enabled)
        if monitoring is not None:
            pulumi.set(__self__, "monitoring", monitoring)
        if mutation_enabled is not None:
            pulumi.set(__self__, "mutation_enabled", mutation_enabled)
        if policy_content is not None:
            pulumi.set(__self__, "policy_content", policy_content)
        if referential_rules_enabled is not None:
            pulumi.set(__self__, "referential_rules_enabled", referential_rules_enabled)

    @property
    @pulumi.getter(name="installSpec")
    def install_spec(self) -> str:
        """
        Configures the mode of the Policy Controller installation
        Possible values are: `INSTALL_SPEC_UNSPECIFIED`, `INSTALL_SPEC_NOT_INSTALLED`, `INSTALL_SPEC_ENABLED`, `INSTALL_SPEC_SUSPENDED`, `INSTALL_SPEC_DETACHED`.
        """
        return pulumi.get(self, "install_spec")

    @property
    @pulumi.getter(name="auditIntervalSeconds")
    def audit_interval_seconds(self) -> Optional[int]:
        """
        Interval for Policy Controller Audit scans (in seconds). When set to 0, this disables audit functionality altogether.
        """
        return pulumi.get(self, "audit_interval_seconds")

    @property
    @pulumi.getter(name="constraintViolationLimit")
    def constraint_violation_limit(self) -> Optional[int]:
        """
        The maximum number of audit violations to be stored in a constraint. If not set, the internal default of 20 will be used.
        """
        return pulumi.get(self, "constraint_violation_limit")

    @property
    @pulumi.getter(name="deploymentConfigs")
    def deployment_configs(self) -> Optional[Sequence['outputs.FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfig']]:
        """
        Map of deployment configs to deployments ("admission", "audit", "mutation").
        Structure is documented below.
        """
        return pulumi.get(self, "deployment_configs")

    @property
    @pulumi.getter(name="exemptableNamespaces")
    def exemptable_namespaces(self) -> Optional[Sequence[str]]:
        """
        The set of namespaces that are excluded from Policy Controller checks. Namespaces do not need to currently exist on the cluster.
        """
        return pulumi.get(self, "exemptable_namespaces")

    @property
    @pulumi.getter(name="logDeniesEnabled")
    def log_denies_enabled(self) -> Optional[bool]:
        """
        Logs all denies and dry run failures.
        """
        return pulumi.get(self, "log_denies_enabled")

    @property
    @pulumi.getter
    def monitoring(self) -> Optional['outputs.FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigMonitoring']:
        """
        Monitoring specifies the configuration of monitoring Policy Controller.
        Structure is documented below.
        """
        return pulumi.get(self, "monitoring")

    @property
    @pulumi.getter(name="mutationEnabled")
    def mutation_enabled(self) -> Optional[bool]:
        """
        Enables the ability to mutate resources using Policy Controller.
        """
        return pulumi.get(self, "mutation_enabled")

    @property
    @pulumi.getter(name="policyContent")
    def policy_content(self) -> Optional['outputs.FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContent']:
        """
        Specifies the desired policy content on the cluster.
        Structure is documented below.
        """
        return pulumi.get(self, "policy_content")

    @property
    @pulumi.getter(name="referentialRulesEnabled")
    def referential_rules_enabled(self) -> Optional[bool]:
        """
        Enables the ability to use Constraint Templates that reference to objects other than the object currently being evaluated.
        """
        return pulumi.get(self, "referential_rules_enabled")


@pulumi.output_type
class FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "containerResources":
            suggest = "container_resources"
        elif key == "podAffinity":
            suggest = "pod_affinity"
        elif key == "podTolerations":
            suggest = "pod_tolerations"
        elif key == "replicaCount":
            suggest = "replica_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 component: str,
                 container_resources: Optional['outputs.FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigContainerResources'] = None,
                 pod_affinity: Optional[str] = None,
                 pod_tolerations: Optional[Sequence['outputs.FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigPodToleration']] = None,
                 replica_count: Optional[int] = None):
        """
        :param str component: The identifier for this object. Format specified above.
        :param 'FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigContainerResourcesArgs' container_resources: Container resource requirements.
               Structure is documented below.
        :param str pod_affinity: Pod affinity configuration.
               Possible values are: `AFFINITY_UNSPECIFIED`, `NO_AFFINITY`, `ANTI_AFFINITY`.
        :param Sequence['FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigPodTolerationArgs'] pod_tolerations: Pod tolerations of node taints.
               Structure is documented below.
        :param int replica_count: Pod replica count.
        """
        pulumi.set(__self__, "component", component)
        if container_resources is not None:
            pulumi.set(__self__, "container_resources", container_resources)
        if pod_affinity is not None:
            pulumi.set(__self__, "pod_affinity", pod_affinity)
        if pod_tolerations is not None:
            pulumi.set(__self__, "pod_tolerations", pod_tolerations)
        if replica_count is not None:
            pulumi.set(__self__, "replica_count", replica_count)

    @property
    @pulumi.getter
    def component(self) -> str:
        """
        The identifier for this object. Format specified above.
        """
        return pulumi.get(self, "component")

    @property
    @pulumi.getter(name="containerResources")
    def container_resources(self) -> Optional['outputs.FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigContainerResources']:
        """
        Container resource requirements.
        Structure is documented below.
        """
        return pulumi.get(self, "container_resources")

    @property
    @pulumi.getter(name="podAffinity")
    def pod_affinity(self) -> Optional[str]:
        """
        Pod affinity configuration.
        Possible values are: `AFFINITY_UNSPECIFIED`, `NO_AFFINITY`, `ANTI_AFFINITY`.
        """
        return pulumi.get(self, "pod_affinity")

    @property
    @pulumi.getter(name="podTolerations")
    def pod_tolerations(self) -> Optional[Sequence['outputs.FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigPodToleration']]:
        """
        Pod tolerations of node taints.
        Structure is documented below.
        """
        return pulumi.get(self, "pod_tolerations")

    @property
    @pulumi.getter(name="replicaCount")
    def replica_count(self) -> Optional[int]:
        """
        Pod replica count.
        """
        return pulumi.get(self, "replica_count")


@pulumi.output_type
class FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigContainerResources(dict):
    def __init__(__self__, *,
                 limits: Optional['outputs.FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigContainerResourcesLimits'] = None,
                 requests: Optional['outputs.FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigContainerResourcesRequests'] = None):
        """
        :param 'FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigContainerResourcesLimitsArgs' limits: Limits describes the maximum amount of compute resources allowed for use by the running container.
               Structure is documented below.
        :param 'FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigContainerResourcesRequestsArgs' requests: Requests describes the amount of compute resources reserved for the container by the kube-scheduler.
               Structure is documented below.
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigContainerResourcesLimits']:
        """
        Limits describes the maximum amount of compute resources allowed for use by the running container.
        Structure is documented below.
        """
        return pulumi.get(self, "limits")

    @property
    @pulumi.getter
    def requests(self) -> Optional['outputs.FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigContainerResourcesRequests']:
        """
        Requests describes the amount of compute resources reserved for the container by the kube-scheduler.
        Structure is documented below.
        """
        return pulumi.get(self, "requests")


@pulumi.output_type
class FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigContainerResourcesLimits(dict):
    def __init__(__self__, *,
                 cpu: Optional[str] = None,
                 memory: Optional[str] = None):
        """
        :param str cpu: CPU requirement expressed in Kubernetes resource units.
        :param str memory: Memory requirement expressed in Kubernetes resource units.
        """
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[str]:
        """
        CPU requirement expressed in Kubernetes resource units.
        """
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        """
        Memory requirement expressed in Kubernetes resource units.
        """
        return pulumi.get(self, "memory")


@pulumi.output_type
class FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigContainerResourcesRequests(dict):
    def __init__(__self__, *,
                 cpu: Optional[str] = None,
                 memory: Optional[str] = None):
        """
        :param str cpu: CPU requirement expressed in Kubernetes resource units.
        :param str memory: Memory requirement expressed in Kubernetes resource units.
        """
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[str]:
        """
        CPU requirement expressed in Kubernetes resource units.
        """
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter
    def memory(self) -> Optional[str]:
        """
        Memory requirement expressed in Kubernetes resource units.
        """
        return pulumi.get(self, "memory")


@pulumi.output_type
class FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigPodToleration(dict):
    def __init__(__self__, *,
                 effect: Optional[str] = None,
                 key: Optional[str] = None,
                 operator: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str effect: Matches a taint effect.
        :param str key: Matches a taint key (not necessarily unique).
        :param str operator: Matches a taint operator.
        :param str value: Matches a taint value.
        """
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[str]:
        """
        Matches a taint effect.
        """
        return pulumi.get(self, "effect")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        Matches a taint key (not necessarily unique).
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        Matches a taint operator.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Matches a taint value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigMonitoring(dict):
    def __init__(__self__, *,
                 backends: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] backends: Specifies the list of backends Policy Controller will export to. An empty list would effectively disable metrics export.
               Each value may be one of: `MONITORING_BACKEND_UNSPECIFIED`, `PROMETHEUS`, `CLOUD_MONITORING`.
        """
        if backends is not None:
            pulumi.set(__self__, "backends", backends)

    @property
    @pulumi.getter
    def backends(self) -> Optional[Sequence[str]]:
        """
        Specifies the list of backends Policy Controller will export to. An empty list would effectively disable metrics export.
        Each value may be one of: `MONITORING_BACKEND_UNSPECIFIED`, `PROMETHEUS`, `CLOUD_MONITORING`.
        """
        return pulumi.get(self, "backends")


@pulumi.output_type
class FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "templateLibrary":
            suggest = "template_library"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bundles: Optional[Sequence['outputs.FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentBundle']] = None,
                 template_library: Optional['outputs.FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentTemplateLibrary'] = None):
        """
        :param Sequence['FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentBundleArgs'] bundles: Configures which bundles to install and their corresponding install specs.
               Structure is documented below.
        :param 'FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentTemplateLibraryArgs' template_library: Configures the installation of the Template Library.
               Structure is documented below.
        """
        if bundles is not None:
            pulumi.set(__self__, "bundles", bundles)
        if template_library is not None:
            pulumi.set(__self__, "template_library", template_library)

    @property
    @pulumi.getter
    def bundles(self) -> Optional[Sequence['outputs.FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentBundle']]:
        """
        Configures which bundles to install and their corresponding install specs.
        Structure is documented below.
        """
        return pulumi.get(self, "bundles")

    @property
    @pulumi.getter(name="templateLibrary")
    def template_library(self) -> Optional['outputs.FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentTemplateLibrary']:
        """
        Configures the installation of the Template Library.
        Structure is documented below.
        """
        return pulumi.get(self, "template_library")


@pulumi.output_type
class FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentBundle(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exemptedNamespaces":
            suggest = "exempted_namespaces"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentBundle. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentBundle.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentBundle.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bundle: str,
                 exempted_namespaces: Optional[Sequence[str]] = None):
        """
        :param str bundle: The identifier for this object. Format specified above.
        :param Sequence[str] exempted_namespaces: The set of namespaces to be exempted from the bundle.
        """
        pulumi.set(__self__, "bundle", bundle)
        if exempted_namespaces is not None:
            pulumi.set(__self__, "exempted_namespaces", exempted_namespaces)

    @property
    @pulumi.getter
    def bundle(self) -> str:
        """
        The identifier for this object. Format specified above.
        """
        return pulumi.get(self, "bundle")

    @property
    @pulumi.getter(name="exemptedNamespaces")
    def exempted_namespaces(self) -> Optional[Sequence[str]]:
        """
        The set of namespaces to be exempted from the bundle.
        """
        return pulumi.get(self, "exempted_namespaces")


@pulumi.output_type
class FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentTemplateLibrary(dict):
    def __init__(__self__, *,
                 installation: Optional[str] = None):
        """
        :param str installation: Configures the manner in which the template library is installed on the cluster.
               Possible values are: `INSTALATION_UNSPECIFIED`, `NOT_INSTALLED`, `ALL`.
        """
        if installation is not None:
            pulumi.set(__self__, "installation", installation)

    @property
    @pulumi.getter
    def installation(self) -> Optional[str]:
        """
        Configures the manner in which the template library is installed on the cluster.
        Possible values are: `INSTALATION_UNSPECIFIED`, `NOT_INSTALLED`, `ALL`.
        """
        return pulumi.get(self, "installation")


@pulumi.output_type
class FeatureIamBindingCondition(dict):
    def __init__(__self__, *,
                 expression: str,
                 title: str,
                 description: Optional[str] = None):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "title", title)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def title(self) -> str:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")


@pulumi.output_type
class FeatureIamMemberCondition(dict):
    def __init__(__self__, *,
                 expression: str,
                 title: str,
                 description: Optional[str] = None):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "title", title)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def title(self) -> str:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")


@pulumi.output_type
class FeatureMembershipConfigmanagement(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "configSync":
            suggest = "config_sync"
        elif key == "hierarchyController":
            suggest = "hierarchy_controller"
        elif key == "policyController":
            suggest = "policy_controller"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FeatureMembershipConfigmanagement. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FeatureMembershipConfigmanagement.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FeatureMembershipConfigmanagement.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 binauthz: Optional['outputs.FeatureMembershipConfigmanagementBinauthz'] = None,
                 config_sync: Optional['outputs.FeatureMembershipConfigmanagementConfigSync'] = None,
                 hierarchy_controller: Optional['outputs.FeatureMembershipConfigmanagementHierarchyController'] = None,
                 policy_controller: Optional['outputs.FeatureMembershipConfigmanagementPolicyController'] = None,
                 version: Optional[str] = None):
        """
        :param 'FeatureMembershipConfigmanagementBinauthzArgs' binauthz: Binauthz configuration for the cluster. Structure is documented below.
        :param 'FeatureMembershipConfigmanagementConfigSyncArgs' config_sync: Config Sync configuration for the cluster. Structure is documented below.
        :param 'FeatureMembershipConfigmanagementHierarchyControllerArgs' hierarchy_controller: Hierarchy Controller configuration for the cluster. Structure is documented below.
        :param 'FeatureMembershipConfigmanagementPolicyControllerArgs' policy_controller: Policy Controller configuration for the cluster. Structure is documented below.
        :param str version: Version of ACM installed.
        """
        if binauthz is not None:
            pulumi.set(__self__, "binauthz", binauthz)
        if config_sync is not None:
            pulumi.set(__self__, "config_sync", config_sync)
        if hierarchy_controller is not None:
            pulumi.set(__self__, "hierarchy_controller", hierarchy_controller)
        if policy_controller is not None:
            pulumi.set(__self__, "policy_controller", policy_controller)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def binauthz(self) -> Optional['outputs.FeatureMembershipConfigmanagementBinauthz']:
        """
        Binauthz configuration for the cluster. Structure is documented below.
        """
        return pulumi.get(self, "binauthz")

    @property
    @pulumi.getter(name="configSync")
    def config_sync(self) -> Optional['outputs.FeatureMembershipConfigmanagementConfigSync']:
        """
        Config Sync configuration for the cluster. Structure is documented below.
        """
        return pulumi.get(self, "config_sync")

    @property
    @pulumi.getter(name="hierarchyController")
    def hierarchy_controller(self) -> Optional['outputs.FeatureMembershipConfigmanagementHierarchyController']:
        """
        Hierarchy Controller configuration for the cluster. Structure is documented below.
        """
        return pulumi.get(self, "hierarchy_controller")

    @property
    @pulumi.getter(name="policyController")
    def policy_controller(self) -> Optional['outputs.FeatureMembershipConfigmanagementPolicyController']:
        """
        Policy Controller configuration for the cluster. Structure is documented below.
        """
        return pulumi.get(self, "policy_controller")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version of ACM installed.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class FeatureMembershipConfigmanagementBinauthz(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: Whether binauthz is enabled in this cluster.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether binauthz is enabled in this cluster.
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class FeatureMembershipConfigmanagementConfigSync(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "metricsGcpServiceAccountEmail":
            suggest = "metrics_gcp_service_account_email"
        elif key == "preventDrift":
            suggest = "prevent_drift"
        elif key == "sourceFormat":
            suggest = "source_format"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FeatureMembershipConfigmanagementConfigSync. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FeatureMembershipConfigmanagementConfigSync.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FeatureMembershipConfigmanagementConfigSync.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 git: Optional['outputs.FeatureMembershipConfigmanagementConfigSyncGit'] = None,
                 metrics_gcp_service_account_email: Optional[str] = None,
                 oci: Optional['outputs.FeatureMembershipConfigmanagementConfigSyncOci'] = None,
                 prevent_drift: Optional[bool] = None,
                 source_format: Optional[str] = None):
        """
        :param 'FeatureMembershipConfigmanagementConfigSyncGitArgs' git: (Optional) Structure is documented below.
        :param 'FeatureMembershipConfigmanagementConfigSyncOciArgs' oci: (Optional) Supported from ACM versions 1.12.0 onwards. Structure is documented below.
               
               Use either `git` or `oci` config option.
        :param bool prevent_drift: Supported from ACM versions 1.10.0 onwards. Set to true to enable the Config Sync admission webhook to prevent drifts. If set to "false", disables the Config Sync admission webhook and does not prevent drifts.
        :param str source_format: Specifies whether the Config Sync Repo is in "hierarchical" or "unstructured" mode.
        """
        if git is not None:
            pulumi.set(__self__, "git", git)
        if metrics_gcp_service_account_email is not None:
            pulumi.set(__self__, "metrics_gcp_service_account_email", metrics_gcp_service_account_email)
        if oci is not None:
            pulumi.set(__self__, "oci", oci)
        if prevent_drift is not None:
            pulumi.set(__self__, "prevent_drift", prevent_drift)
        if source_format is not None:
            pulumi.set(__self__, "source_format", source_format)

    @property
    @pulumi.getter
    def git(self) -> Optional['outputs.FeatureMembershipConfigmanagementConfigSyncGit']:
        """
        (Optional) Structure is documented below.
        """
        return pulumi.get(self, "git")

    @property
    @pulumi.getter(name="metricsGcpServiceAccountEmail")
    def metrics_gcp_service_account_email(self) -> Optional[str]:
        return pulumi.get(self, "metrics_gcp_service_account_email")

    @property
    @pulumi.getter
    def oci(self) -> Optional['outputs.FeatureMembershipConfigmanagementConfigSyncOci']:
        """
        (Optional) Supported from ACM versions 1.12.0 onwards. Structure is documented below.

        Use either `git` or `oci` config option.
        """
        return pulumi.get(self, "oci")

    @property
    @pulumi.getter(name="preventDrift")
    def prevent_drift(self) -> Optional[bool]:
        """
        Supported from ACM versions 1.10.0 onwards. Set to true to enable the Config Sync admission webhook to prevent drifts. If set to "false", disables the Config Sync admission webhook and does not prevent drifts.
        """
        return pulumi.get(self, "prevent_drift")

    @property
    @pulumi.getter(name="sourceFormat")
    def source_format(self) -> Optional[str]:
        """
        Specifies whether the Config Sync Repo is in "hierarchical" or "unstructured" mode.
        """
        return pulumi.get(self, "source_format")


@pulumi.output_type
class FeatureMembershipConfigmanagementConfigSyncGit(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "gcpServiceAccountEmail":
            suggest = "gcp_service_account_email"
        elif key == "httpsProxy":
            suggest = "https_proxy"
        elif key == "policyDir":
            suggest = "policy_dir"
        elif key == "secretType":
            suggest = "secret_type"
        elif key == "syncBranch":
            suggest = "sync_branch"
        elif key == "syncRepo":
            suggest = "sync_repo"
        elif key == "syncRev":
            suggest = "sync_rev"
        elif key == "syncWaitSecs":
            suggest = "sync_wait_secs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FeatureMembershipConfigmanagementConfigSyncGit. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FeatureMembershipConfigmanagementConfigSyncGit.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FeatureMembershipConfigmanagementConfigSyncGit.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 gcp_service_account_email: Optional[str] = None,
                 https_proxy: Optional[str] = None,
                 policy_dir: Optional[str] = None,
                 secret_type: Optional[str] = None,
                 sync_branch: Optional[str] = None,
                 sync_repo: Optional[str] = None,
                 sync_rev: Optional[str] = None,
                 sync_wait_secs: Optional[str] = None):
        """
        :param str gcp_service_account_email: The GCP Service Account Email used for auth when secretType is gcpServiceAccount.
        :param str https_proxy: URL for the HTTPS proxy to be used when communicating with the Git repo.
        :param str policy_dir: The path within the Git repository that represents the top level of the repo to sync. Default: the root directory of the repository.
        :param str secret_type: Type of secret configured for access to the Git repo.
        :param str sync_branch: The branch of the repository to sync from. Default: master.
        :param str sync_repo: The URL of the Git repository to use as the source of truth.
        :param str sync_rev: Git revision (tag or hash) to check out. Default HEAD.
        :param str sync_wait_secs: Period in seconds between consecutive syncs. Default: 15.
        """
        if gcp_service_account_email is not None:
            pulumi.set(__self__, "gcp_service_account_email", gcp_service_account_email)
        if https_proxy is not None:
            pulumi.set(__self__, "https_proxy", https_proxy)
        if policy_dir is not None:
            pulumi.set(__self__, "policy_dir", policy_dir)
        if secret_type is not None:
            pulumi.set(__self__, "secret_type", secret_type)
        if sync_branch is not None:
            pulumi.set(__self__, "sync_branch", sync_branch)
        if sync_repo is not None:
            pulumi.set(__self__, "sync_repo", sync_repo)
        if sync_rev is not None:
            pulumi.set(__self__, "sync_rev", sync_rev)
        if sync_wait_secs is not None:
            pulumi.set(__self__, "sync_wait_secs", sync_wait_secs)

    @property
    @pulumi.getter(name="gcpServiceAccountEmail")
    def gcp_service_account_email(self) -> Optional[str]:
        """
        The GCP Service Account Email used for auth when secretType is gcpServiceAccount.
        """
        return pulumi.get(self, "gcp_service_account_email")

    @property
    @pulumi.getter(name="httpsProxy")
    def https_proxy(self) -> Optional[str]:
        """
        URL for the HTTPS proxy to be used when communicating with the Git repo.
        """
        return pulumi.get(self, "https_proxy")

    @property
    @pulumi.getter(name="policyDir")
    def policy_dir(self) -> Optional[str]:
        """
        The path within the Git repository that represents the top level of the repo to sync. Default: the root directory of the repository.
        """
        return pulumi.get(self, "policy_dir")

    @property
    @pulumi.getter(name="secretType")
    def secret_type(self) -> Optional[str]:
        """
        Type of secret configured for access to the Git repo.
        """
        return pulumi.get(self, "secret_type")

    @property
    @pulumi.getter(name="syncBranch")
    def sync_branch(self) -> Optional[str]:
        """
        The branch of the repository to sync from. Default: master.
        """
        return pulumi.get(self, "sync_branch")

    @property
    @pulumi.getter(name="syncRepo")
    def sync_repo(self) -> Optional[str]:
        """
        The URL of the Git repository to use as the source of truth.
        """
        return pulumi.get(self, "sync_repo")

    @property
    @pulumi.getter(name="syncRev")
    def sync_rev(self) -> Optional[str]:
        """
        Git revision (tag or hash) to check out. Default HEAD.
        """
        return pulumi.get(self, "sync_rev")

    @property
    @pulumi.getter(name="syncWaitSecs")
    def sync_wait_secs(self) -> Optional[str]:
        """
        Period in seconds between consecutive syncs. Default: 15.
        """
        return pulumi.get(self, "sync_wait_secs")


@pulumi.output_type
class FeatureMembershipConfigmanagementConfigSyncOci(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "gcpServiceAccountEmail":
            suggest = "gcp_service_account_email"
        elif key == "policyDir":
            suggest = "policy_dir"
        elif key == "secretType":
            suggest = "secret_type"
        elif key == "syncRepo":
            suggest = "sync_repo"
        elif key == "syncWaitSecs":
            suggest = "sync_wait_secs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FeatureMembershipConfigmanagementConfigSyncOci. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FeatureMembershipConfigmanagementConfigSyncOci.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FeatureMembershipConfigmanagementConfigSyncOci.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 gcp_service_account_email: Optional[str] = None,
                 policy_dir: Optional[str] = None,
                 secret_type: Optional[str] = None,
                 sync_repo: Optional[str] = None,
                 sync_wait_secs: Optional[str] = None):
        """
        :param str gcp_service_account_email: The GCP Service Account Email used for auth when secret_type is gcpserviceaccount.
        :param str policy_dir: The absolute path of the directory that contains the local resources. Default: the root directory of the image.
        :param str secret_type: Type of secret configured for access to the OCI Image. Must be one of gcenode, gcpserviceaccount or none.
        :param str sync_repo: The OCI image repository URL for the package to sync from. e.g. LOCATION-docker.pkg.dev/PROJECT_ID/REPOSITORY_NAME/PACKAGE_NAME.
        :param str sync_wait_secs: Period in seconds(int64 format) between consecutive syncs. Default: 15.
        """
        if gcp_service_account_email is not None:
            pulumi.set(__self__, "gcp_service_account_email", gcp_service_account_email)
        if policy_dir is not None:
            pulumi.set(__self__, "policy_dir", policy_dir)
        if secret_type is not None:
            pulumi.set(__self__, "secret_type", secret_type)
        if sync_repo is not None:
            pulumi.set(__self__, "sync_repo", sync_repo)
        if sync_wait_secs is not None:
            pulumi.set(__self__, "sync_wait_secs", sync_wait_secs)

    @property
    @pulumi.getter(name="gcpServiceAccountEmail")
    def gcp_service_account_email(self) -> Optional[str]:
        """
        The GCP Service Account Email used for auth when secret_type is gcpserviceaccount.
        """
        return pulumi.get(self, "gcp_service_account_email")

    @property
    @pulumi.getter(name="policyDir")
    def policy_dir(self) -> Optional[str]:
        """
        The absolute path of the directory that contains the local resources. Default: the root directory of the image.
        """
        return pulumi.get(self, "policy_dir")

    @property
    @pulumi.getter(name="secretType")
    def secret_type(self) -> Optional[str]:
        """
        Type of secret configured for access to the OCI Image. Must be one of gcenode, gcpserviceaccount or none.
        """
        return pulumi.get(self, "secret_type")

    @property
    @pulumi.getter(name="syncRepo")
    def sync_repo(self) -> Optional[str]:
        """
        The OCI image repository URL for the package to sync from. e.g. LOCATION-docker.pkg.dev/PROJECT_ID/REPOSITORY_NAME/PACKAGE_NAME.
        """
        return pulumi.get(self, "sync_repo")

    @property
    @pulumi.getter(name="syncWaitSecs")
    def sync_wait_secs(self) -> Optional[str]:
        """
        Period in seconds(int64 format) between consecutive syncs. Default: 15.
        """
        return pulumi.get(self, "sync_wait_secs")


@pulumi.output_type
class FeatureMembershipConfigmanagementHierarchyController(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableHierarchicalResourceQuota":
            suggest = "enable_hierarchical_resource_quota"
        elif key == "enablePodTreeLabels":
            suggest = "enable_pod_tree_labels"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FeatureMembershipConfigmanagementHierarchyController. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FeatureMembershipConfigmanagementHierarchyController.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FeatureMembershipConfigmanagementHierarchyController.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable_hierarchical_resource_quota: Optional[bool] = None,
                 enable_pod_tree_labels: Optional[bool] = None,
                 enabled: Optional[bool] = None):
        """
        :param bool enable_hierarchical_resource_quota: Whether hierarchical resource quota is enabled in this cluster.
        :param bool enable_pod_tree_labels: Whether pod tree labels are enabled in this cluster.
        :param bool enabled: Whether Hierarchy Controller is enabled in this cluster.
        """
        if enable_hierarchical_resource_quota is not None:
            pulumi.set(__self__, "enable_hierarchical_resource_quota", enable_hierarchical_resource_quota)
        if enable_pod_tree_labels is not None:
            pulumi.set(__self__, "enable_pod_tree_labels", enable_pod_tree_labels)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="enableHierarchicalResourceQuota")
    def enable_hierarchical_resource_quota(self) -> Optional[bool]:
        """
        Whether hierarchical resource quota is enabled in this cluster.
        """
        return pulumi.get(self, "enable_hierarchical_resource_quota")

    @property
    @pulumi.getter(name="enablePodTreeLabels")
    def enable_pod_tree_labels(self) -> Optional[bool]:
        """
        Whether pod tree labels are enabled in this cluster.
        """
        return pulumi.get(self, "enable_pod_tree_labels")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether Hierarchy Controller is enabled in this cluster.
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class FeatureMembershipConfigmanagementPolicyController(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "auditIntervalSeconds":
            suggest = "audit_interval_seconds"
        elif key == "exemptableNamespaces":
            suggest = "exemptable_namespaces"
        elif key == "logDeniesEnabled":
            suggest = "log_denies_enabled"
        elif key == "mutationEnabled":
            suggest = "mutation_enabled"
        elif key == "referentialRulesEnabled":
            suggest = "referential_rules_enabled"
        elif key == "templateLibraryInstalled":
            suggest = "template_library_installed"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FeatureMembershipConfigmanagementPolicyController. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FeatureMembershipConfigmanagementPolicyController.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FeatureMembershipConfigmanagementPolicyController.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 audit_interval_seconds: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 exemptable_namespaces: Optional[Sequence[str]] = None,
                 log_denies_enabled: Optional[bool] = None,
                 monitoring: Optional['outputs.FeatureMembershipConfigmanagementPolicyControllerMonitoring'] = None,
                 mutation_enabled: Optional[bool] = None,
                 referential_rules_enabled: Optional[bool] = None,
                 template_library_installed: Optional[bool] = None):
        """
        :param str audit_interval_seconds: Sets the interval for Policy Controller Audit Scans (in seconds). When set to 0, this disables audit functionality altogether.
        :param bool enabled: Enables the installation of Policy Controller. If false, the rest of PolicyController fields take no effect.
        :param Sequence[str] exemptable_namespaces: The set of namespaces that are excluded from Policy Controller checks. Namespaces do not need to currently exist on the cluster.
        :param bool log_denies_enabled: Logs all denies and dry run failures.
        :param 'FeatureMembershipConfigmanagementPolicyControllerMonitoringArgs' monitoring: Specifies the backends Policy Controller should export metrics to. For example, to specify metrics should be exported to Cloud Monitoring and Prometheus, specify backends: ["cloudmonitoring", "prometheus"]. Default: ["cloudmonitoring", "prometheus"]
        :param bool mutation_enabled: Enables mutation in policy controller. If true, mutation CRDs, webhook, and controller deployment will be deployed to the cluster.
        :param bool referential_rules_enabled: Enables the ability to use Constraint Templates that reference to objects other than the object currently being evaluated.
        :param bool template_library_installed: Installs the default template library along with Policy Controller.
        """
        if audit_interval_seconds is not None:
            pulumi.set(__self__, "audit_interval_seconds", audit_interval_seconds)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if exemptable_namespaces is not None:
            pulumi.set(__self__, "exemptable_namespaces", exemptable_namespaces)
        if log_denies_enabled is not None:
            pulumi.set(__self__, "log_denies_enabled", log_denies_enabled)
        if monitoring is not None:
            pulumi.set(__self__, "monitoring", monitoring)
        if mutation_enabled is not None:
            pulumi.set(__self__, "mutation_enabled", mutation_enabled)
        if referential_rules_enabled is not None:
            pulumi.set(__self__, "referential_rules_enabled", referential_rules_enabled)
        if template_library_installed is not None:
            pulumi.set(__self__, "template_library_installed", template_library_installed)

    @property
    @pulumi.getter(name="auditIntervalSeconds")
    def audit_interval_seconds(self) -> Optional[str]:
        """
        Sets the interval for Policy Controller Audit Scans (in seconds). When set to 0, this disables audit functionality altogether.
        """
        return pulumi.get(self, "audit_interval_seconds")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enables the installation of Policy Controller. If false, the rest of PolicyController fields take no effect.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="exemptableNamespaces")
    def exemptable_namespaces(self) -> Optional[Sequence[str]]:
        """
        The set of namespaces that are excluded from Policy Controller checks. Namespaces do not need to currently exist on the cluster.
        """
        return pulumi.get(self, "exemptable_namespaces")

    @property
    @pulumi.getter(name="logDeniesEnabled")
    def log_denies_enabled(self) -> Optional[bool]:
        """
        Logs all denies and dry run failures.
        """
        return pulumi.get(self, "log_denies_enabled")

    @property
    @pulumi.getter
    def monitoring(self) -> Optional['outputs.FeatureMembershipConfigmanagementPolicyControllerMonitoring']:
        """
        Specifies the backends Policy Controller should export metrics to. For example, to specify metrics should be exported to Cloud Monitoring and Prometheus, specify backends: ["cloudmonitoring", "prometheus"]. Default: ["cloudmonitoring", "prometheus"]
        """
        return pulumi.get(self, "monitoring")

    @property
    @pulumi.getter(name="mutationEnabled")
    def mutation_enabled(self) -> Optional[bool]:
        """
        Enables mutation in policy controller. If true, mutation CRDs, webhook, and controller deployment will be deployed to the cluster.
        """
        return pulumi.get(self, "mutation_enabled")

    @property
    @pulumi.getter(name="referentialRulesEnabled")
    def referential_rules_enabled(self) -> Optional[bool]:
        """
        Enables the ability to use Constraint Templates that reference to objects other than the object currently being evaluated.
        """
        return pulumi.get(self, "referential_rules_enabled")

    @property
    @pulumi.getter(name="templateLibraryInstalled")
    def template_library_installed(self) -> Optional[bool]:
        """
        Installs the default template library along with Policy Controller.
        """
        return pulumi.get(self, "template_library_installed")


@pulumi.output_type
class FeatureMembershipConfigmanagementPolicyControllerMonitoring(dict):
    def __init__(__self__, *,
                 backends: Optional[Sequence[str]] = None):
        if backends is not None:
            pulumi.set(__self__, "backends", backends)

    @property
    @pulumi.getter
    def backends(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "backends")


@pulumi.output_type
class FeatureMembershipMesh(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "controlPlane":
            suggest = "control_plane"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FeatureMembershipMesh. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FeatureMembershipMesh.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FeatureMembershipMesh.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 control_plane: Optional[str] = None,
                 management: Optional[str] = None):
        """
        :param str management: Whether to automatically manage Service Mesh. Can either be `MANAGEMENT_AUTOMATIC` or `MANAGEMENT_MANUAL`.
        """
        if control_plane is not None:
            pulumi.set(__self__, "control_plane", control_plane)
        if management is not None:
            pulumi.set(__self__, "management", management)

    @property
    @pulumi.getter(name="controlPlane")
    def control_plane(self) -> Optional[str]:
        warnings.warn("""Deprecated in favor of the `management` field""", DeprecationWarning)
        pulumi.log.warn("""control_plane is deprecated: Deprecated in favor of the `management` field""")

        return pulumi.get(self, "control_plane")

    @property
    @pulumi.getter
    def management(self) -> Optional[str]:
        """
        Whether to automatically manage Service Mesh. Can either be `MANAGEMENT_AUTOMATIC` or `MANAGEMENT_MANUAL`.
        """
        return pulumi.get(self, "management")


@pulumi.output_type
class FeatureResourceState(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hasResources":
            suggest = "has_resources"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FeatureResourceState. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FeatureResourceState.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FeatureResourceState.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 has_resources: Optional[bool] = None,
                 state: Optional[str] = None):
        """
        :param bool has_resources: (Output)
               Whether this Feature has outstanding resources that need to be cleaned up before it can be disabled.
        :param str state: (Output)
               Output only. The "running state" of the Feature in this Hub.
               Structure is documented below.
        """
        if has_resources is not None:
            pulumi.set(__self__, "has_resources", has_resources)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="hasResources")
    def has_resources(self) -> Optional[bool]:
        """
        (Output)
        Whether this Feature has outstanding resources that need to be cleaned up before it can be disabled.
        """
        return pulumi.get(self, "has_resources")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        """
        (Output)
        Output only. The "running state" of the Feature in this Hub.
        Structure is documented below.
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class FeatureSpec(dict):
    def __init__(__self__, *,
                 fleetobservability: Optional['outputs.FeatureSpecFleetobservability'] = None,
                 multiclusteringress: Optional['outputs.FeatureSpecMulticlusteringress'] = None):
        """
        :param 'FeatureSpecFleetobservabilityArgs' fleetobservability: Fleet Observability feature spec.
               Structure is documented below.
        :param 'FeatureSpecMulticlusteringressArgs' multiclusteringress: Multicluster Ingress-specific spec.
               Structure is documented below.
        """
        if fleetobservability is not None:
            pulumi.set(__self__, "fleetobservability", fleetobservability)
        if multiclusteringress is not None:
            pulumi.set(__self__, "multiclusteringress", multiclusteringress)

    @property
    @pulumi.getter
    def fleetobservability(self) -> Optional['outputs.FeatureSpecFleetobservability']:
        """
        Fleet Observability feature spec.
        Structure is documented below.
        """
        return pulumi.get(self, "fleetobservability")

    @property
    @pulumi.getter
    def multiclusteringress(self) -> Optional['outputs.FeatureSpecMulticlusteringress']:
        """
        Multicluster Ingress-specific spec.
        Structure is documented below.
        """
        return pulumi.get(self, "multiclusteringress")


@pulumi.output_type
class FeatureSpecFleetobservability(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "loggingConfig":
            suggest = "logging_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FeatureSpecFleetobservability. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FeatureSpecFleetobservability.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FeatureSpecFleetobservability.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 logging_config: Optional['outputs.FeatureSpecFleetobservabilityLoggingConfig'] = None):
        """
        :param 'FeatureSpecFleetobservabilityLoggingConfigArgs' logging_config: Specified if fleet logging feature is enabled for the entire fleet. If UNSPECIFIED, fleet logging feature is disabled for the entire fleet.
               Structure is documented below.
        """
        if logging_config is not None:
            pulumi.set(__self__, "logging_config", logging_config)

    @property
    @pulumi.getter(name="loggingConfig")
    def logging_config(self) -> Optional['outputs.FeatureSpecFleetobservabilityLoggingConfig']:
        """
        Specified if fleet logging feature is enabled for the entire fleet. If UNSPECIFIED, fleet logging feature is disabled for the entire fleet.
        Structure is documented below.
        """
        return pulumi.get(self, "logging_config")


@pulumi.output_type
class FeatureSpecFleetobservabilityLoggingConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultConfig":
            suggest = "default_config"
        elif key == "fleetScopeLogsConfig":
            suggest = "fleet_scope_logs_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FeatureSpecFleetobservabilityLoggingConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FeatureSpecFleetobservabilityLoggingConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FeatureSpecFleetobservabilityLoggingConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default_config: Optional['outputs.FeatureSpecFleetobservabilityLoggingConfigDefaultConfig'] = None,
                 fleet_scope_logs_config: Optional['outputs.FeatureSpecFleetobservabilityLoggingConfigFleetScopeLogsConfig'] = None):
        """
        :param 'FeatureSpecFleetobservabilityLoggingConfigDefaultConfigArgs' default_config: Specified if applying the default routing config to logs not specified in other configs.
               Structure is documented below.
        :param 'FeatureSpecFleetobservabilityLoggingConfigFleetScopeLogsConfigArgs' fleet_scope_logs_config: Specified if applying the routing config to all logs for all fleet scopes.
               Structure is documented below.
        """
        if default_config is not None:
            pulumi.set(__self__, "default_config", default_config)
        if fleet_scope_logs_config is not None:
            pulumi.set(__self__, "fleet_scope_logs_config", fleet_scope_logs_config)

    @property
    @pulumi.getter(name="defaultConfig")
    def default_config(self) -> Optional['outputs.FeatureSpecFleetobservabilityLoggingConfigDefaultConfig']:
        """
        Specified if applying the default routing config to logs not specified in other configs.
        Structure is documented below.
        """
        return pulumi.get(self, "default_config")

    @property
    @pulumi.getter(name="fleetScopeLogsConfig")
    def fleet_scope_logs_config(self) -> Optional['outputs.FeatureSpecFleetobservabilityLoggingConfigFleetScopeLogsConfig']:
        """
        Specified if applying the routing config to all logs for all fleet scopes.
        Structure is documented below.
        """
        return pulumi.get(self, "fleet_scope_logs_config")


@pulumi.output_type
class FeatureSpecFleetobservabilityLoggingConfigDefaultConfig(dict):
    def __init__(__self__, *,
                 mode: Optional[str] = None):
        """
        :param str mode: Specified if fleet logging feature is enabled.
               Possible values are: `MODE_UNSPECIFIED`, `COPY`, `MOVE`.
        """
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        """
        Specified if fleet logging feature is enabled.
        Possible values are: `MODE_UNSPECIFIED`, `COPY`, `MOVE`.
        """
        return pulumi.get(self, "mode")


@pulumi.output_type
class FeatureSpecFleetobservabilityLoggingConfigFleetScopeLogsConfig(dict):
    def __init__(__self__, *,
                 mode: Optional[str] = None):
        """
        :param str mode: Specified if fleet logging feature is enabled.
               Possible values are: `MODE_UNSPECIFIED`, `COPY`, `MOVE`.
        """
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        """
        Specified if fleet logging feature is enabled.
        Possible values are: `MODE_UNSPECIFIED`, `COPY`, `MOVE`.
        """
        return pulumi.get(self, "mode")


@pulumi.output_type
class FeatureSpecMulticlusteringress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "configMembership":
            suggest = "config_membership"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FeatureSpecMulticlusteringress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FeatureSpecMulticlusteringress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FeatureSpecMulticlusteringress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 config_membership: str):
        """
        :param str config_membership: Fully-qualified Membership name which hosts the MultiClusterIngress CRD. Example: `projects/foo-proj/locations/global/memberships/bar`
        """
        pulumi.set(__self__, "config_membership", config_membership)

    @property
    @pulumi.getter(name="configMembership")
    def config_membership(self) -> str:
        """
        Fully-qualified Membership name which hosts the MultiClusterIngress CRD. Example: `projects/foo-proj/locations/global/memberships/bar`
        """
        return pulumi.get(self, "config_membership")


@pulumi.output_type
class FeatureState(dict):
    def __init__(__self__, *,
                 states: Optional[Sequence['outputs.FeatureStateState']] = None):
        """
        :param Sequence['FeatureStateStateArgs'] states: (Output)
               Output only. The "running state" of the Feature in this Hub.
               Structure is documented below.
        """
        if states is not None:
            pulumi.set(__self__, "states", states)

    @property
    @pulumi.getter
    def states(self) -> Optional[Sequence['outputs.FeatureStateState']]:
        """
        (Output)
        Output only. The "running state" of the Feature in this Hub.
        Structure is documented below.
        """
        return pulumi.get(self, "states")


@pulumi.output_type
class FeatureStateState(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "updateTime":
            suggest = "update_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FeatureStateState. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FeatureStateState.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FeatureStateState.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 code: Optional[str] = None,
                 description: Optional[str] = None,
                 update_time: Optional[str] = None):
        """
        :param str code: (Output)
               The high-level, machine-readable status of this Feature.
        :param str description: (Output)
               A human-readable description of the current status.
        :param str update_time: (Output)
               The time this status and any related Feature-specific details were updated. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z"
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter
    def code(self) -> Optional[str]:
        """
        (Output)
        The high-level, machine-readable status of this Feature.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        (Output)
        A human-readable description of the current status.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[str]:
        """
        (Output)
        The time this status and any related Feature-specific details were updated. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z"
        """
        return pulumi.get(self, "update_time")


@pulumi.output_type
class FleetDefaultClusterConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "binaryAuthorizationConfig":
            suggest = "binary_authorization_config"
        elif key == "securityPostureConfig":
            suggest = "security_posture_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FleetDefaultClusterConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FleetDefaultClusterConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FleetDefaultClusterConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 binary_authorization_config: Optional['outputs.FleetDefaultClusterConfigBinaryAuthorizationConfig'] = None,
                 security_posture_config: Optional['outputs.FleetDefaultClusterConfigSecurityPostureConfig'] = None):
        """
        :param 'FleetDefaultClusterConfigBinaryAuthorizationConfigArgs' binary_authorization_config: Enable/Disable binary authorization features for the cluster.
               Structure is documented below.
        :param 'FleetDefaultClusterConfigSecurityPostureConfigArgs' security_posture_config: Enable/Disable Security Posture features for the cluster.
               Structure is documented below.
        """
        if binary_authorization_config is not None:
            pulumi.set(__self__, "binary_authorization_config", binary_authorization_config)
        if security_posture_config is not None:
            pulumi.set(__self__, "security_posture_config", security_posture_config)

    @property
    @pulumi.getter(name="binaryAuthorizationConfig")
    def binary_authorization_config(self) -> Optional['outputs.FleetDefaultClusterConfigBinaryAuthorizationConfig']:
        """
        Enable/Disable binary authorization features for the cluster.
        Structure is documented below.
        """
        return pulumi.get(self, "binary_authorization_config")

    @property
    @pulumi.getter(name="securityPostureConfig")
    def security_posture_config(self) -> Optional['outputs.FleetDefaultClusterConfigSecurityPostureConfig']:
        """
        Enable/Disable Security Posture features for the cluster.
        Structure is documented below.
        """
        return pulumi.get(self, "security_posture_config")


@pulumi.output_type
class FleetDefaultClusterConfigBinaryAuthorizationConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "evaluationMode":
            suggest = "evaluation_mode"
        elif key == "policyBindings":
            suggest = "policy_bindings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FleetDefaultClusterConfigBinaryAuthorizationConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FleetDefaultClusterConfigBinaryAuthorizationConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FleetDefaultClusterConfigBinaryAuthorizationConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 evaluation_mode: Optional[str] = None,
                 policy_bindings: Optional[Sequence['outputs.FleetDefaultClusterConfigBinaryAuthorizationConfigPolicyBinding']] = None):
        """
        :param str evaluation_mode: Mode of operation for binauthz policy evaluation.
               Possible values are: `DISABLED`, `POLICY_BINDINGS`.
        :param Sequence['FleetDefaultClusterConfigBinaryAuthorizationConfigPolicyBindingArgs'] policy_bindings: Binauthz policies that apply to this cluster.
               Structure is documented below.
        """
        if evaluation_mode is not None:
            pulumi.set(__self__, "evaluation_mode", evaluation_mode)
        if policy_bindings is not None:
            pulumi.set(__self__, "policy_bindings", policy_bindings)

    @property
    @pulumi.getter(name="evaluationMode")
    def evaluation_mode(self) -> Optional[str]:
        """
        Mode of operation for binauthz policy evaluation.
        Possible values are: `DISABLED`, `POLICY_BINDINGS`.
        """
        return pulumi.get(self, "evaluation_mode")

    @property
    @pulumi.getter(name="policyBindings")
    def policy_bindings(self) -> Optional[Sequence['outputs.FleetDefaultClusterConfigBinaryAuthorizationConfigPolicyBinding']]:
        """
        Binauthz policies that apply to this cluster.
        Structure is documented below.
        """
        return pulumi.get(self, "policy_bindings")


@pulumi.output_type
class FleetDefaultClusterConfigBinaryAuthorizationConfigPolicyBinding(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: The relative resource name of the binauthz platform policy to audit. GKE
               platform policies have the following format:
               `projects/{project_number}/platforms/gke/policies/{policy_id}`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The relative resource name of the binauthz platform policy to audit. GKE
        platform policies have the following format:
        `projects/{project_number}/platforms/gke/policies/{policy_id}`.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class FleetDefaultClusterConfigSecurityPostureConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vulnerabilityMode":
            suggest = "vulnerability_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FleetDefaultClusterConfigSecurityPostureConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FleetDefaultClusterConfigSecurityPostureConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FleetDefaultClusterConfigSecurityPostureConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mode: Optional[str] = None,
                 vulnerability_mode: Optional[str] = None):
        """
        :param str mode: Sets which mode to use for Security Posture features.
               Possible values are: `DISABLED`, `BASIC`.
        :param str vulnerability_mode: Sets which mode to use for vulnerability scanning.
               Possible values are: `VULNERABILITY_DISABLED`, `VULNERABILITY_BASIC`, `VULNERABILITY_ENTERPRISE`.
        """
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if vulnerability_mode is not None:
            pulumi.set(__self__, "vulnerability_mode", vulnerability_mode)

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        """
        Sets which mode to use for Security Posture features.
        Possible values are: `DISABLED`, `BASIC`.
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="vulnerabilityMode")
    def vulnerability_mode(self) -> Optional[str]:
        """
        Sets which mode to use for vulnerability scanning.
        Possible values are: `VULNERABILITY_DISABLED`, `VULNERABILITY_BASIC`, `VULNERABILITY_ENTERPRISE`.
        """
        return pulumi.get(self, "vulnerability_mode")


@pulumi.output_type
class FleetState(dict):
    def __init__(__self__, *,
                 code: Optional[str] = None):
        """
        :param str code: (Output)
               Describes the state of a Fleet resource.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)

    @property
    @pulumi.getter
    def code(self) -> Optional[str]:
        """
        (Output)
        Describes the state of a Fleet resource.
        """
        return pulumi.get(self, "code")


@pulumi.output_type
class MembershipAuthority(dict):
    def __init__(__self__, *,
                 issuer: str):
        pulumi.set(__self__, "issuer", issuer)

    @property
    @pulumi.getter
    def issuer(self) -> str:
        return pulumi.get(self, "issuer")


@pulumi.output_type
class MembershipBindingState(dict):
    def __init__(__self__, *,
                 code: Optional[str] = None):
        """
        :param str code: (Output)
               Code describes the state of a MembershipBinding resource.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)

    @property
    @pulumi.getter
    def code(self) -> Optional[str]:
        """
        (Output)
        Code describes the state of a MembershipBinding resource.
        """
        return pulumi.get(self, "code")


@pulumi.output_type
class MembershipEndpoint(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "gkeCluster":
            suggest = "gke_cluster"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MembershipEndpoint. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MembershipEndpoint.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MembershipEndpoint.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 gke_cluster: Optional['outputs.MembershipEndpointGkeCluster'] = None):
        """
        :param 'MembershipEndpointGkeClusterArgs' gke_cluster: If this Membership is a Kubernetes API server hosted on GKE, this is a self link to its GCP resource.
               Structure is documented below.
        """
        if gke_cluster is not None:
            pulumi.set(__self__, "gke_cluster", gke_cluster)

    @property
    @pulumi.getter(name="gkeCluster")
    def gke_cluster(self) -> Optional['outputs.MembershipEndpointGkeCluster']:
        """
        If this Membership is a Kubernetes API server hosted on GKE, this is a self link to its GCP resource.
        Structure is documented below.
        """
        return pulumi.get(self, "gke_cluster")


@pulumi.output_type
class MembershipEndpointGkeCluster(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceLink":
            suggest = "resource_link"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MembershipEndpointGkeCluster. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MembershipEndpointGkeCluster.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MembershipEndpointGkeCluster.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resource_link: str):
        pulumi.set(__self__, "resource_link", resource_link)

    @property
    @pulumi.getter(name="resourceLink")
    def resource_link(self) -> str:
        return pulumi.get(self, "resource_link")


@pulumi.output_type
class MembershipIamBindingCondition(dict):
    def __init__(__self__, *,
                 expression: str,
                 title: str,
                 description: Optional[str] = None):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "title", title)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def title(self) -> str:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")


@pulumi.output_type
class MembershipIamMemberCondition(dict):
    def __init__(__self__, *,
                 expression: str,
                 title: str,
                 description: Optional[str] = None):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "title", title)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def title(self) -> str:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")


@pulumi.output_type
class MembershipRbacRoleBindingRole(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "predefinedRole":
            suggest = "predefined_role"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MembershipRbacRoleBindingRole. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MembershipRbacRoleBindingRole.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MembershipRbacRoleBindingRole.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 predefined_role: str):
        """
        :param str predefined_role: PredefinedRole is an ENUM representation of the default Kubernetes Roles
               Possible values are: `UNKNOWN`, `ADMIN`, `EDIT`, `VIEW`, `ANTHOS_SUPPORT`.
               
               - - -
        """
        pulumi.set(__self__, "predefined_role", predefined_role)

    @property
    @pulumi.getter(name="predefinedRole")
    def predefined_role(self) -> str:
        """
        PredefinedRole is an ENUM representation of the default Kubernetes Roles
        Possible values are: `UNKNOWN`, `ADMIN`, `EDIT`, `VIEW`, `ANTHOS_SUPPORT`.

        - - -
        """
        return pulumi.get(self, "predefined_role")


@pulumi.output_type
class MembershipRbacRoleBindingState(dict):
    def __init__(__self__, *,
                 code: Optional[str] = None):
        """
        :param str code: (Output)
               Code describes the state of a RBAC Role Binding resource.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)

    @property
    @pulumi.getter
    def code(self) -> Optional[str]:
        """
        (Output)
        Code describes the state of a RBAC Role Binding resource.
        """
        return pulumi.get(self, "code")


@pulumi.output_type
class NamespaceState(dict):
    def __init__(__self__, *,
                 code: Optional[str] = None):
        """
        :param str code: (Output)
               Code describes the state of a Namespace resource.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)

    @property
    @pulumi.getter
    def code(self) -> Optional[str]:
        """
        (Output)
        Code describes the state of a Namespace resource.
        """
        return pulumi.get(self, "code")


@pulumi.output_type
class ScopeIamBindingCondition(dict):
    def __init__(__self__, *,
                 expression: str,
                 title: str,
                 description: Optional[str] = None):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "title", title)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def title(self) -> str:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")


@pulumi.output_type
class ScopeIamMemberCondition(dict):
    def __init__(__self__, *,
                 expression: str,
                 title: str,
                 description: Optional[str] = None):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "title", title)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def title(self) -> str:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")


@pulumi.output_type
class ScopeRbacRoleBindingRole(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "predefinedRole":
            suggest = "predefined_role"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScopeRbacRoleBindingRole. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScopeRbacRoleBindingRole.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScopeRbacRoleBindingRole.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 predefined_role: Optional[str] = None):
        """
        :param str predefined_role: PredefinedRole is an ENUM representation of the default Kubernetes Roles
               Possible values are: `UNKNOWN`, `ADMIN`, `EDIT`, `VIEW`.
               
               - - -
        """
        if predefined_role is not None:
            pulumi.set(__self__, "predefined_role", predefined_role)

    @property
    @pulumi.getter(name="predefinedRole")
    def predefined_role(self) -> Optional[str]:
        """
        PredefinedRole is an ENUM representation of the default Kubernetes Roles
        Possible values are: `UNKNOWN`, `ADMIN`, `EDIT`, `VIEW`.

        - - -
        """
        return pulumi.get(self, "predefined_role")


@pulumi.output_type
class ScopeRbacRoleBindingState(dict):
    def __init__(__self__, *,
                 code: Optional[str] = None):
        """
        :param str code: (Output)
               Code describes the state of a RBAC Role Binding resource.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)

    @property
    @pulumi.getter
    def code(self) -> Optional[str]:
        """
        (Output)
        Code describes the state of a RBAC Role Binding resource.
        """
        return pulumi.get(self, "code")


@pulumi.output_type
class ScopeState(dict):
    def __init__(__self__, *,
                 code: Optional[str] = None):
        """
        :param str code: (Output)
               Code describes the state of a Scope resource.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)

    @property
    @pulumi.getter
    def code(self) -> Optional[str]:
        """
        (Output)
        Code describes the state of a Scope resource.
        """
        return pulumi.get(self, "code")


