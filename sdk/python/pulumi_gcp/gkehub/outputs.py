# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'FeatureFleetDefaultMemberConfig',
    'FeatureFleetDefaultMemberConfigConfigmanagement',
    'FeatureFleetDefaultMemberConfigConfigmanagementConfigSync',
    'FeatureFleetDefaultMemberConfigConfigmanagementConfigSyncGit',
    'FeatureFleetDefaultMemberConfigConfigmanagementConfigSyncOci',
    'FeatureFleetDefaultMemberConfigMesh',
    'FeatureFleetDefaultMemberConfigPolicycontroller',
    'FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfig',
    'FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfig',
    'FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigContainerResources',
    'FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigContainerResourcesLimits',
    'FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigContainerResourcesRequests',
    'FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigPodToleration',
    'FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigMonitoring',
    'FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContent',
    'FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentBundle',
    'FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentTemplateLibrary',
    'FeatureIamBindingCondition',
    'FeatureIamMemberCondition',
    'FeatureMembershipConfigmanagement',
    'FeatureMembershipConfigmanagementBinauthz',
    'FeatureMembershipConfigmanagementConfigSync',
    'FeatureMembershipConfigmanagementConfigSyncDeploymentOverride',
    'FeatureMembershipConfigmanagementConfigSyncDeploymentOverrideContainer',
    'FeatureMembershipConfigmanagementConfigSyncGit',
    'FeatureMembershipConfigmanagementConfigSyncOci',
    'FeatureMembershipConfigmanagementHierarchyController',
    'FeatureMembershipConfigmanagementPolicyController',
    'FeatureMembershipConfigmanagementPolicyControllerMonitoring',
    'FeatureMembershipMesh',
    'FeatureMembershipPolicycontroller',
    'FeatureMembershipPolicycontrollerPolicyControllerHubConfig',
    'FeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfig',
    'FeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigContainerResources',
    'FeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigContainerResourcesLimits',
    'FeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigContainerResourcesRequests',
    'FeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigPodToleration',
    'FeatureMembershipPolicycontrollerPolicyControllerHubConfigMonitoring',
    'FeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContent',
    'FeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentBundle',
    'FeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentTemplateLibrary',
    'FeatureResourceState',
    'FeatureSpec',
    'FeatureSpecClusterupgrade',
    'FeatureSpecClusterupgradeGkeUpgradeOverride',
    'FeatureSpecClusterupgradeGkeUpgradeOverridePostConditions',
    'FeatureSpecClusterupgradeGkeUpgradeOverrideUpgrade',
    'FeatureSpecClusterupgradePostConditions',
    'FeatureSpecFleetobservability',
    'FeatureSpecFleetobservabilityLoggingConfig',
    'FeatureSpecFleetobservabilityLoggingConfigDefaultConfig',
    'FeatureSpecFleetobservabilityLoggingConfigFleetScopeLogsConfig',
    'FeatureSpecMulticlusteringress',
    'FeatureSpecRbacrolebindingactuation',
    'FeatureState',
    'FeatureStateState',
    'FleetDefaultClusterConfig',
    'FleetDefaultClusterConfigBinaryAuthorizationConfig',
    'FleetDefaultClusterConfigBinaryAuthorizationConfigPolicyBinding',
    'FleetDefaultClusterConfigSecurityPostureConfig',
    'FleetState',
    'MembershipAuthority',
    'MembershipBindingState',
    'MembershipEndpoint',
    'MembershipEndpointGkeCluster',
    'MembershipIamBindingCondition',
    'MembershipIamMemberCondition',
    'MembershipRbacRoleBindingRole',
    'MembershipRbacRoleBindingState',
    'NamespaceState',
    'ScopeIamBindingCondition',
    'ScopeIamMemberCondition',
    'ScopeRbacRoleBindingRole',
    'ScopeRbacRoleBindingState',
    'ScopeState',
    'GetFeatureFleetDefaultMemberConfigResult',
    'GetFeatureFleetDefaultMemberConfigConfigmanagementResult',
    'GetFeatureFleetDefaultMemberConfigConfigmanagementConfigSyncResult',
    'GetFeatureFleetDefaultMemberConfigConfigmanagementConfigSyncGitResult',
    'GetFeatureFleetDefaultMemberConfigConfigmanagementConfigSyncOciResult',
    'GetFeatureFleetDefaultMemberConfigMeshResult',
    'GetFeatureFleetDefaultMemberConfigPolicycontrollerResult',
    'GetFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigResult',
    'GetFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigResult',
    'GetFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigContainerResourceResult',
    'GetFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigContainerResourceLimitResult',
    'GetFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigContainerResourceRequestResult',
    'GetFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigPodTolerationResult',
    'GetFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigMonitoringResult',
    'GetFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentResult',
    'GetFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentBundleResult',
    'GetFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentTemplateLibraryResult',
    'GetFeatureResourceStateResult',
    'GetFeatureSpecResult',
    'GetFeatureSpecClusterupgradeResult',
    'GetFeatureSpecClusterupgradeGkeUpgradeOverrideResult',
    'GetFeatureSpecClusterupgradeGkeUpgradeOverridePostConditionResult',
    'GetFeatureSpecClusterupgradeGkeUpgradeOverrideUpgradeResult',
    'GetFeatureSpecClusterupgradePostConditionResult',
    'GetFeatureSpecFleetobservabilityResult',
    'GetFeatureSpecFleetobservabilityLoggingConfigResult',
    'GetFeatureSpecFleetobservabilityLoggingConfigDefaultConfigResult',
    'GetFeatureSpecFleetobservabilityLoggingConfigFleetScopeLogsConfigResult',
    'GetFeatureSpecMulticlusteringressResult',
    'GetFeatureSpecRbacrolebindingactuationResult',
    'GetFeatureStateResult',
    'GetFeatureStateStateResult',
    'GetMembershipAuthorityResult',
    'GetMembershipBindingStateResult',
    'GetMembershipEndpointResult',
    'GetMembershipEndpointGkeClusterResult',
]

@pulumi.output_type
class FeatureFleetDefaultMemberConfig(dict):
    def __init__(__self__, *,
                 configmanagement: Optional['outputs.FeatureFleetDefaultMemberConfigConfigmanagement'] = None,
                 mesh: Optional['outputs.FeatureFleetDefaultMemberConfigMesh'] = None,
                 policycontroller: Optional['outputs.FeatureFleetDefaultMemberConfigPolicycontroller'] = None):
        """
        :param 'FeatureFleetDefaultMemberConfigConfigmanagementArgs' configmanagement: Config Management spec
               Structure is documented below.
        :param 'FeatureFleetDefaultMemberConfigMeshArgs' mesh: Service Mesh spec
               Structure is documented below.
        :param 'FeatureFleetDefaultMemberConfigPolicycontrollerArgs' policycontroller: Policy Controller spec
               Structure is documented below.
        """
        if configmanagement is not None:
            pulumi.set(__self__, "configmanagement", configmanagement)
        if mesh is not None:
            pulumi.set(__self__, "mesh", mesh)
        if policycontroller is not None:
            pulumi.set(__self__, "policycontroller", policycontroller)

    @_builtins.property
    @pulumi.getter
    def configmanagement(self) -> Optional['outputs.FeatureFleetDefaultMemberConfigConfigmanagement']:
        """
        Config Management spec
        Structure is documented below.
        """
        return pulumi.get(self, "configmanagement")

    @_builtins.property
    @pulumi.getter
    def mesh(self) -> Optional['outputs.FeatureFleetDefaultMemberConfigMesh']:
        """
        Service Mesh spec
        Structure is documented below.
        """
        return pulumi.get(self, "mesh")

    @_builtins.property
    @pulumi.getter
    def policycontroller(self) -> Optional['outputs.FeatureFleetDefaultMemberConfigPolicycontroller']:
        """
        Policy Controller spec
        Structure is documented below.
        """
        return pulumi.get(self, "policycontroller")


@pulumi.output_type
class FeatureFleetDefaultMemberConfigConfigmanagement(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "configSync":
            suggest = "config_sync"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FeatureFleetDefaultMemberConfigConfigmanagement. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FeatureFleetDefaultMemberConfigConfigmanagement.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FeatureFleetDefaultMemberConfigConfigmanagement.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 config_sync: Optional['outputs.FeatureFleetDefaultMemberConfigConfigmanagementConfigSync'] = None,
                 management: Optional[_builtins.str] = None,
                 version: Optional[_builtins.str] = None):
        """
        :param 'FeatureFleetDefaultMemberConfigConfigmanagementConfigSyncArgs' config_sync: ConfigSync configuration for the cluster
               Structure is documented below.
        :param _builtins.str management: Set this field to MANAGEMENT_AUTOMATIC to enable Config Sync auto-upgrades, and set this field to MANAGEMENT_MANUAL or MANAGEMENT_UNSPECIFIED to disable Config Sync auto-upgrades.
               Possible values are: `MANAGEMENT_UNSPECIFIED`, `MANAGEMENT_AUTOMATIC`, `MANAGEMENT_MANUAL`.
        :param _builtins.str version: Version of Config Sync installed
        """
        if config_sync is not None:
            pulumi.set(__self__, "config_sync", config_sync)
        if management is not None:
            pulumi.set(__self__, "management", management)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="configSync")
    def config_sync(self) -> Optional['outputs.FeatureFleetDefaultMemberConfigConfigmanagementConfigSync']:
        """
        ConfigSync configuration for the cluster
        Structure is documented below.
        """
        return pulumi.get(self, "config_sync")

    @_builtins.property
    @pulumi.getter
    def management(self) -> Optional[_builtins.str]:
        """
        Set this field to MANAGEMENT_AUTOMATIC to enable Config Sync auto-upgrades, and set this field to MANAGEMENT_MANUAL or MANAGEMENT_UNSPECIFIED to disable Config Sync auto-upgrades.
        Possible values are: `MANAGEMENT_UNSPECIFIED`, `MANAGEMENT_AUTOMATIC`, `MANAGEMENT_MANUAL`.
        """
        return pulumi.get(self, "management")

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[_builtins.str]:
        """
        Version of Config Sync installed
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class FeatureFleetDefaultMemberConfigConfigmanagementConfigSync(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "metricsGcpServiceAccountEmail":
            suggest = "metrics_gcp_service_account_email"
        elif key == "preventDrift":
            suggest = "prevent_drift"
        elif key == "sourceFormat":
            suggest = "source_format"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FeatureFleetDefaultMemberConfigConfigmanagementConfigSync. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FeatureFleetDefaultMemberConfigConfigmanagementConfigSync.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FeatureFleetDefaultMemberConfigConfigmanagementConfigSync.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: Optional[_builtins.bool] = None,
                 git: Optional['outputs.FeatureFleetDefaultMemberConfigConfigmanagementConfigSyncGit'] = None,
                 metrics_gcp_service_account_email: Optional[_builtins.str] = None,
                 oci: Optional['outputs.FeatureFleetDefaultMemberConfigConfigmanagementConfigSyncOci'] = None,
                 prevent_drift: Optional[_builtins.bool] = None,
                 source_format: Optional[_builtins.str] = None):
        """
        :param _builtins.bool enabled: Enables the installation of ConfigSync. If set to true, ConfigSync resources will be created and the other ConfigSync fields will be applied if exist. If set to false, all other ConfigSync fields will be ignored, ConfigSync resources will be deleted. If omitted, ConfigSync resources will be managed depends on the presence of the git or oci field.
        :param 'FeatureFleetDefaultMemberConfigConfigmanagementConfigSyncGitArgs' git: Git repo configuration for the cluster
               Structure is documented below.
        :param _builtins.str metrics_gcp_service_account_email: The Email of the Google Cloud Service Account (GSA) used for exporting Config Sync metrics to Cloud Monitoring. The GSA should have the Monitoring Metric Writer(roles/monitoring.metricWriter) IAM role. The Kubernetes ServiceAccount `default` in the namespace `config-management-monitoring` should be bound to the GSA.
        :param 'FeatureFleetDefaultMemberConfigConfigmanagementConfigSyncOciArgs' oci: OCI repo configuration for the cluster
               Structure is documented below.
        :param _builtins.bool prevent_drift: Set to true to enable the Config Sync admission webhook to prevent drifts. If set to `false`, disables the Config Sync admission webhook and does not prevent drifts.
        :param _builtins.str source_format: Specifies whether the Config Sync Repo is in hierarchical or unstructured mode
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if git is not None:
            pulumi.set(__self__, "git", git)
        if metrics_gcp_service_account_email is not None:
            pulumi.set(__self__, "metrics_gcp_service_account_email", metrics_gcp_service_account_email)
        if oci is not None:
            pulumi.set(__self__, "oci", oci)
        if prevent_drift is not None:
            pulumi.set(__self__, "prevent_drift", prevent_drift)
        if source_format is not None:
            pulumi.set(__self__, "source_format", source_format)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[_builtins.bool]:
        """
        Enables the installation of ConfigSync. If set to true, ConfigSync resources will be created and the other ConfigSync fields will be applied if exist. If set to false, all other ConfigSync fields will be ignored, ConfigSync resources will be deleted. If omitted, ConfigSync resources will be managed depends on the presence of the git or oci field.
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter
    def git(self) -> Optional['outputs.FeatureFleetDefaultMemberConfigConfigmanagementConfigSyncGit']:
        """
        Git repo configuration for the cluster
        Structure is documented below.
        """
        return pulumi.get(self, "git")

    @_builtins.property
    @pulumi.getter(name="metricsGcpServiceAccountEmail")
    def metrics_gcp_service_account_email(self) -> Optional[_builtins.str]:
        """
        The Email of the Google Cloud Service Account (GSA) used for exporting Config Sync metrics to Cloud Monitoring. The GSA should have the Monitoring Metric Writer(roles/monitoring.metricWriter) IAM role. The Kubernetes ServiceAccount `default` in the namespace `config-management-monitoring` should be bound to the GSA.
        """
        return pulumi.get(self, "metrics_gcp_service_account_email")

    @_builtins.property
    @pulumi.getter
    def oci(self) -> Optional['outputs.FeatureFleetDefaultMemberConfigConfigmanagementConfigSyncOci']:
        """
        OCI repo configuration for the cluster
        Structure is documented below.
        """
        return pulumi.get(self, "oci")

    @_builtins.property
    @pulumi.getter(name="preventDrift")
    def prevent_drift(self) -> Optional[_builtins.bool]:
        """
        Set to true to enable the Config Sync admission webhook to prevent drifts. If set to `false`, disables the Config Sync admission webhook and does not prevent drifts.
        """
        return pulumi.get(self, "prevent_drift")

    @_builtins.property
    @pulumi.getter(name="sourceFormat")
    def source_format(self) -> Optional[_builtins.str]:
        """
        Specifies whether the Config Sync Repo is in hierarchical or unstructured mode
        """
        return pulumi.get(self, "source_format")


@pulumi.output_type
class FeatureFleetDefaultMemberConfigConfigmanagementConfigSyncGit(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretType":
            suggest = "secret_type"
        elif key == "gcpServiceAccountEmail":
            suggest = "gcp_service_account_email"
        elif key == "httpsProxy":
            suggest = "https_proxy"
        elif key == "policyDir":
            suggest = "policy_dir"
        elif key == "syncBranch":
            suggest = "sync_branch"
        elif key == "syncRepo":
            suggest = "sync_repo"
        elif key == "syncRev":
            suggest = "sync_rev"
        elif key == "syncWaitSecs":
            suggest = "sync_wait_secs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FeatureFleetDefaultMemberConfigConfigmanagementConfigSyncGit. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FeatureFleetDefaultMemberConfigConfigmanagementConfigSyncGit.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FeatureFleetDefaultMemberConfigConfigmanagementConfigSyncGit.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 secret_type: _builtins.str,
                 gcp_service_account_email: Optional[_builtins.str] = None,
                 https_proxy: Optional[_builtins.str] = None,
                 policy_dir: Optional[_builtins.str] = None,
                 sync_branch: Optional[_builtins.str] = None,
                 sync_repo: Optional[_builtins.str] = None,
                 sync_rev: Optional[_builtins.str] = None,
                 sync_wait_secs: Optional[_builtins.str] = None):
        """
        :param _builtins.str secret_type: Type of secret configured for access to the Git repo
        :param _builtins.str gcp_service_account_email: The Google Cloud Service Account Email used for auth when secretType is gcpServiceAccount
        :param _builtins.str https_proxy: URL for the HTTPS Proxy to be used when communicating with the Git repo
        :param _builtins.str policy_dir: The path within the Git repository that represents the top level of the repo to sync
        :param _builtins.str sync_branch: The branch of the repository to sync from. Default: master
        :param _builtins.str sync_repo: The URL of the Git repository to use as the source of truth
        :param _builtins.str sync_rev: Git revision (tag or hash) to check out. Default HEAD
        :param _builtins.str sync_wait_secs: Period in seconds between consecutive syncs. Default: 15
        """
        pulumi.set(__self__, "secret_type", secret_type)
        if gcp_service_account_email is not None:
            pulumi.set(__self__, "gcp_service_account_email", gcp_service_account_email)
        if https_proxy is not None:
            pulumi.set(__self__, "https_proxy", https_proxy)
        if policy_dir is not None:
            pulumi.set(__self__, "policy_dir", policy_dir)
        if sync_branch is not None:
            pulumi.set(__self__, "sync_branch", sync_branch)
        if sync_repo is not None:
            pulumi.set(__self__, "sync_repo", sync_repo)
        if sync_rev is not None:
            pulumi.set(__self__, "sync_rev", sync_rev)
        if sync_wait_secs is not None:
            pulumi.set(__self__, "sync_wait_secs", sync_wait_secs)

    @_builtins.property
    @pulumi.getter(name="secretType")
    def secret_type(self) -> _builtins.str:
        """
        Type of secret configured for access to the Git repo
        """
        return pulumi.get(self, "secret_type")

    @_builtins.property
    @pulumi.getter(name="gcpServiceAccountEmail")
    def gcp_service_account_email(self) -> Optional[_builtins.str]:
        """
        The Google Cloud Service Account Email used for auth when secretType is gcpServiceAccount
        """
        return pulumi.get(self, "gcp_service_account_email")

    @_builtins.property
    @pulumi.getter(name="httpsProxy")
    def https_proxy(self) -> Optional[_builtins.str]:
        """
        URL for the HTTPS Proxy to be used when communicating with the Git repo
        """
        return pulumi.get(self, "https_proxy")

    @_builtins.property
    @pulumi.getter(name="policyDir")
    def policy_dir(self) -> Optional[_builtins.str]:
        """
        The path within the Git repository that represents the top level of the repo to sync
        """
        return pulumi.get(self, "policy_dir")

    @_builtins.property
    @pulumi.getter(name="syncBranch")
    def sync_branch(self) -> Optional[_builtins.str]:
        """
        The branch of the repository to sync from. Default: master
        """
        return pulumi.get(self, "sync_branch")

    @_builtins.property
    @pulumi.getter(name="syncRepo")
    def sync_repo(self) -> Optional[_builtins.str]:
        """
        The URL of the Git repository to use as the source of truth
        """
        return pulumi.get(self, "sync_repo")

    @_builtins.property
    @pulumi.getter(name="syncRev")
    def sync_rev(self) -> Optional[_builtins.str]:
        """
        Git revision (tag or hash) to check out. Default HEAD
        """
        return pulumi.get(self, "sync_rev")

    @_builtins.property
    @pulumi.getter(name="syncWaitSecs")
    def sync_wait_secs(self) -> Optional[_builtins.str]:
        """
        Period in seconds between consecutive syncs. Default: 15
        """
        return pulumi.get(self, "sync_wait_secs")


@pulumi.output_type
class FeatureFleetDefaultMemberConfigConfigmanagementConfigSyncOci(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretType":
            suggest = "secret_type"
        elif key == "gcpServiceAccountEmail":
            suggest = "gcp_service_account_email"
        elif key == "policyDir":
            suggest = "policy_dir"
        elif key == "syncRepo":
            suggest = "sync_repo"
        elif key == "syncWaitSecs":
            suggest = "sync_wait_secs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FeatureFleetDefaultMemberConfigConfigmanagementConfigSyncOci. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FeatureFleetDefaultMemberConfigConfigmanagementConfigSyncOci.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FeatureFleetDefaultMemberConfigConfigmanagementConfigSyncOci.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 secret_type: _builtins.str,
                 gcp_service_account_email: Optional[_builtins.str] = None,
                 policy_dir: Optional[_builtins.str] = None,
                 sync_repo: Optional[_builtins.str] = None,
                 sync_wait_secs: Optional[_builtins.str] = None,
                 version: Optional[_builtins.str] = None):
        """
        :param _builtins.str secret_type: Type of secret configured for access to the Git repo
        :param _builtins.str gcp_service_account_email: The Google Cloud Service Account Email used for auth when secretType is gcpServiceAccount
        :param _builtins.str policy_dir: The absolute path of the directory that contains the local resources. Default: the root directory of the image
        :param _builtins.str sync_repo: The OCI image repository URL for the package to sync from
        :param _builtins.str sync_wait_secs: Period in seconds between consecutive syncs. Default: 15
        :param _builtins.str version: (Optional, Deprecated)
               Version of Config Sync installed
               
               > **Warning:** The `configmanagement.config_sync.oci.version` field is deprecated and will be removed in a future major release. Please use `configmanagement.version` field to specify the version of Config Sync installed instead.
        """
        pulumi.set(__self__, "secret_type", secret_type)
        if gcp_service_account_email is not None:
            pulumi.set(__self__, "gcp_service_account_email", gcp_service_account_email)
        if policy_dir is not None:
            pulumi.set(__self__, "policy_dir", policy_dir)
        if sync_repo is not None:
            pulumi.set(__self__, "sync_repo", sync_repo)
        if sync_wait_secs is not None:
            pulumi.set(__self__, "sync_wait_secs", sync_wait_secs)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="secretType")
    def secret_type(self) -> _builtins.str:
        """
        Type of secret configured for access to the Git repo
        """
        return pulumi.get(self, "secret_type")

    @_builtins.property
    @pulumi.getter(name="gcpServiceAccountEmail")
    def gcp_service_account_email(self) -> Optional[_builtins.str]:
        """
        The Google Cloud Service Account Email used for auth when secretType is gcpServiceAccount
        """
        return pulumi.get(self, "gcp_service_account_email")

    @_builtins.property
    @pulumi.getter(name="policyDir")
    def policy_dir(self) -> Optional[_builtins.str]:
        """
        The absolute path of the directory that contains the local resources. Default: the root directory of the image
        """
        return pulumi.get(self, "policy_dir")

    @_builtins.property
    @pulumi.getter(name="syncRepo")
    def sync_repo(self) -> Optional[_builtins.str]:
        """
        The OCI image repository URL for the package to sync from
        """
        return pulumi.get(self, "sync_repo")

    @_builtins.property
    @pulumi.getter(name="syncWaitSecs")
    def sync_wait_secs(self) -> Optional[_builtins.str]:
        """
        Period in seconds between consecutive syncs. Default: 15
        """
        return pulumi.get(self, "sync_wait_secs")

    @_builtins.property
    @pulumi.getter
    @_utilities.deprecated("""The `configmanagement.config_sync.oci.version` field is deprecated and will be removed in a future major release. Please use `configmanagement.version` field to specify the version of Config Sync installed instead.""")
    def version(self) -> Optional[_builtins.str]:
        """
        (Optional, Deprecated)
        Version of Config Sync installed

        > **Warning:** The `configmanagement.config_sync.oci.version` field is deprecated and will be removed in a future major release. Please use `configmanagement.version` field to specify the version of Config Sync installed instead.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class FeatureFleetDefaultMemberConfigMesh(dict):
    def __init__(__self__, *,
                 management: _builtins.str):
        """
        :param _builtins.str management: Whether to automatically manage Service Mesh
               Possible values are: `MANAGEMENT_UNSPECIFIED`, `MANAGEMENT_AUTOMATIC`, `MANAGEMENT_MANUAL`.
        """
        pulumi.set(__self__, "management", management)

    @_builtins.property
    @pulumi.getter
    def management(self) -> _builtins.str:
        """
        Whether to automatically manage Service Mesh
        Possible values are: `MANAGEMENT_UNSPECIFIED`, `MANAGEMENT_AUTOMATIC`, `MANAGEMENT_MANUAL`.
        """
        return pulumi.get(self, "management")


@pulumi.output_type
class FeatureFleetDefaultMemberConfigPolicycontroller(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "policyControllerHubConfig":
            suggest = "policy_controller_hub_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FeatureFleetDefaultMemberConfigPolicycontroller. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FeatureFleetDefaultMemberConfigPolicycontroller.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FeatureFleetDefaultMemberConfigPolicycontroller.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 policy_controller_hub_config: 'outputs.FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfig',
                 version: Optional[_builtins.str] = None):
        """
        :param 'FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigArgs' policy_controller_hub_config: Configuration of Policy Controller
               Structure is documented below.
        :param _builtins.str version: Configures the version of Policy Controller
        """
        pulumi.set(__self__, "policy_controller_hub_config", policy_controller_hub_config)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="policyControllerHubConfig")
    def policy_controller_hub_config(self) -> 'outputs.FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfig':
        """
        Configuration of Policy Controller
        Structure is documented below.
        """
        return pulumi.get(self, "policy_controller_hub_config")

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[_builtins.str]:
        """
        Configures the version of Policy Controller
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "installSpec":
            suggest = "install_spec"
        elif key == "auditIntervalSeconds":
            suggest = "audit_interval_seconds"
        elif key == "constraintViolationLimit":
            suggest = "constraint_violation_limit"
        elif key == "deploymentConfigs":
            suggest = "deployment_configs"
        elif key == "exemptableNamespaces":
            suggest = "exemptable_namespaces"
        elif key == "logDeniesEnabled":
            suggest = "log_denies_enabled"
        elif key == "mutationEnabled":
            suggest = "mutation_enabled"
        elif key == "policyContent":
            suggest = "policy_content"
        elif key == "referentialRulesEnabled":
            suggest = "referential_rules_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 install_spec: _builtins.str,
                 audit_interval_seconds: Optional[_builtins.int] = None,
                 constraint_violation_limit: Optional[_builtins.int] = None,
                 deployment_configs: Optional[Sequence['outputs.FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfig']] = None,
                 exemptable_namespaces: Optional[Sequence[_builtins.str]] = None,
                 log_denies_enabled: Optional[_builtins.bool] = None,
                 monitoring: Optional['outputs.FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigMonitoring'] = None,
                 mutation_enabled: Optional[_builtins.bool] = None,
                 policy_content: Optional['outputs.FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContent'] = None,
                 referential_rules_enabled: Optional[_builtins.bool] = None):
        """
        :param _builtins.str install_spec: Configures the mode of the Policy Controller installation
               Possible values are: `INSTALL_SPEC_UNSPECIFIED`, `INSTALL_SPEC_NOT_INSTALLED`, `INSTALL_SPEC_ENABLED`, `INSTALL_SPEC_SUSPENDED`, `INSTALL_SPEC_DETACHED`.
        :param _builtins.int audit_interval_seconds: Interval for Policy Controller Audit scans (in seconds). When set to 0, this disables audit functionality altogether.
        :param _builtins.int constraint_violation_limit: The maximum number of audit violations to be stored in a constraint. If not set, the internal default of 20 will be used.
        :param Sequence['FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigArgs'] deployment_configs: Map of deployment configs to deployments ("admission", "audit", "mutation").
               Structure is documented below.
        :param Sequence[_builtins.str] exemptable_namespaces: The set of namespaces that are excluded from Policy Controller checks. Namespaces do not need to currently exist on the cluster.
        :param _builtins.bool log_denies_enabled: Logs all denies and dry run failures.
        :param 'FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigMonitoringArgs' monitoring: Monitoring specifies the configuration of monitoring Policy Controller.
               Structure is documented below.
        :param _builtins.bool mutation_enabled: Enables the ability to mutate resources using Policy Controller.
        :param 'FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentArgs' policy_content: Specifies the desired policy content on the cluster.
               Structure is documented below.
        :param _builtins.bool referential_rules_enabled: Enables the ability to use Constraint Templates that reference to objects other than the object currently being evaluated.
        """
        pulumi.set(__self__, "install_spec", install_spec)
        if audit_interval_seconds is not None:
            pulumi.set(__self__, "audit_interval_seconds", audit_interval_seconds)
        if constraint_violation_limit is not None:
            pulumi.set(__self__, "constraint_violation_limit", constraint_violation_limit)
        if deployment_configs is not None:
            pulumi.set(__self__, "deployment_configs", deployment_configs)
        if exemptable_namespaces is not None:
            pulumi.set(__self__, "exemptable_namespaces", exemptable_namespaces)
        if log_denies_enabled is not None:
            pulumi.set(__self__, "log_denies_enabled", log_denies_enabled)
        if monitoring is not None:
            pulumi.set(__self__, "monitoring", monitoring)
        if mutation_enabled is not None:
            pulumi.set(__self__, "mutation_enabled", mutation_enabled)
        if policy_content is not None:
            pulumi.set(__self__, "policy_content", policy_content)
        if referential_rules_enabled is not None:
            pulumi.set(__self__, "referential_rules_enabled", referential_rules_enabled)

    @_builtins.property
    @pulumi.getter(name="installSpec")
    def install_spec(self) -> _builtins.str:
        """
        Configures the mode of the Policy Controller installation
        Possible values are: `INSTALL_SPEC_UNSPECIFIED`, `INSTALL_SPEC_NOT_INSTALLED`, `INSTALL_SPEC_ENABLED`, `INSTALL_SPEC_SUSPENDED`, `INSTALL_SPEC_DETACHED`.
        """
        return pulumi.get(self, "install_spec")

    @_builtins.property
    @pulumi.getter(name="auditIntervalSeconds")
    def audit_interval_seconds(self) -> Optional[_builtins.int]:
        """
        Interval for Policy Controller Audit scans (in seconds). When set to 0, this disables audit functionality altogether.
        """
        return pulumi.get(self, "audit_interval_seconds")

    @_builtins.property
    @pulumi.getter(name="constraintViolationLimit")
    def constraint_violation_limit(self) -> Optional[_builtins.int]:
        """
        The maximum number of audit violations to be stored in a constraint. If not set, the internal default of 20 will be used.
        """
        return pulumi.get(self, "constraint_violation_limit")

    @_builtins.property
    @pulumi.getter(name="deploymentConfigs")
    def deployment_configs(self) -> Optional[Sequence['outputs.FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfig']]:
        """
        Map of deployment configs to deployments ("admission", "audit", "mutation").
        Structure is documented below.
        """
        return pulumi.get(self, "deployment_configs")

    @_builtins.property
    @pulumi.getter(name="exemptableNamespaces")
    def exemptable_namespaces(self) -> Optional[Sequence[_builtins.str]]:
        """
        The set of namespaces that are excluded from Policy Controller checks. Namespaces do not need to currently exist on the cluster.
        """
        return pulumi.get(self, "exemptable_namespaces")

    @_builtins.property
    @pulumi.getter(name="logDeniesEnabled")
    def log_denies_enabled(self) -> Optional[_builtins.bool]:
        """
        Logs all denies and dry run failures.
        """
        return pulumi.get(self, "log_denies_enabled")

    @_builtins.property
    @pulumi.getter
    def monitoring(self) -> Optional['outputs.FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigMonitoring']:
        """
        Monitoring specifies the configuration of monitoring Policy Controller.
        Structure is documented below.
        """
        return pulumi.get(self, "monitoring")

    @_builtins.property
    @pulumi.getter(name="mutationEnabled")
    def mutation_enabled(self) -> Optional[_builtins.bool]:
        """
        Enables the ability to mutate resources using Policy Controller.
        """
        return pulumi.get(self, "mutation_enabled")

    @_builtins.property
    @pulumi.getter(name="policyContent")
    def policy_content(self) -> Optional['outputs.FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContent']:
        """
        Specifies the desired policy content on the cluster.
        Structure is documented below.
        """
        return pulumi.get(self, "policy_content")

    @_builtins.property
    @pulumi.getter(name="referentialRulesEnabled")
    def referential_rules_enabled(self) -> Optional[_builtins.bool]:
        """
        Enables the ability to use Constraint Templates that reference to objects other than the object currently being evaluated.
        """
        return pulumi.get(self, "referential_rules_enabled")


@pulumi.output_type
class FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "containerResources":
            suggest = "container_resources"
        elif key == "podAffinity":
            suggest = "pod_affinity"
        elif key == "podTolerations":
            suggest = "pod_tolerations"
        elif key == "replicaCount":
            suggest = "replica_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 component: _builtins.str,
                 container_resources: Optional['outputs.FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigContainerResources'] = None,
                 pod_affinity: Optional[_builtins.str] = None,
                 pod_tolerations: Optional[Sequence['outputs.FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigPodToleration']] = None,
                 replica_count: Optional[_builtins.int] = None):
        """
        :param _builtins.str component: The identifier for this object. Format specified above.
        :param 'FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigContainerResourcesArgs' container_resources: Container resource requirements.
               Structure is documented below.
        :param _builtins.str pod_affinity: Pod affinity configuration.
               Possible values are: `AFFINITY_UNSPECIFIED`, `NO_AFFINITY`, `ANTI_AFFINITY`.
        :param Sequence['FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigPodTolerationArgs'] pod_tolerations: Pod tolerations of node taints.
               Structure is documented below.
        :param _builtins.int replica_count: Pod replica count.
        """
        pulumi.set(__self__, "component", component)
        if container_resources is not None:
            pulumi.set(__self__, "container_resources", container_resources)
        if pod_affinity is not None:
            pulumi.set(__self__, "pod_affinity", pod_affinity)
        if pod_tolerations is not None:
            pulumi.set(__self__, "pod_tolerations", pod_tolerations)
        if replica_count is not None:
            pulumi.set(__self__, "replica_count", replica_count)

    @_builtins.property
    @pulumi.getter
    def component(self) -> _builtins.str:
        """
        The identifier for this object. Format specified above.
        """
        return pulumi.get(self, "component")

    @_builtins.property
    @pulumi.getter(name="containerResources")
    def container_resources(self) -> Optional['outputs.FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigContainerResources']:
        """
        Container resource requirements.
        Structure is documented below.
        """
        return pulumi.get(self, "container_resources")

    @_builtins.property
    @pulumi.getter(name="podAffinity")
    def pod_affinity(self) -> Optional[_builtins.str]:
        """
        Pod affinity configuration.
        Possible values are: `AFFINITY_UNSPECIFIED`, `NO_AFFINITY`, `ANTI_AFFINITY`.
        """
        return pulumi.get(self, "pod_affinity")

    @_builtins.property
    @pulumi.getter(name="podTolerations")
    def pod_tolerations(self) -> Optional[Sequence['outputs.FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigPodToleration']]:
        """
        Pod tolerations of node taints.
        Structure is documented below.
        """
        return pulumi.get(self, "pod_tolerations")

    @_builtins.property
    @pulumi.getter(name="replicaCount")
    def replica_count(self) -> Optional[_builtins.int]:
        """
        Pod replica count.
        """
        return pulumi.get(self, "replica_count")


@pulumi.output_type
class FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigContainerResources(dict):
    def __init__(__self__, *,
                 limits: Optional['outputs.FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigContainerResourcesLimits'] = None,
                 requests: Optional['outputs.FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigContainerResourcesRequests'] = None):
        """
        :param 'FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigContainerResourcesLimitsArgs' limits: Limits describes the maximum amount of compute resources allowed for use by the running container.
               Structure is documented below.
        :param 'FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigContainerResourcesRequestsArgs' requests: Requests describes the amount of compute resources reserved for the container by the kube-scheduler.
               Structure is documented below.
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @_builtins.property
    @pulumi.getter
    def limits(self) -> Optional['outputs.FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigContainerResourcesLimits']:
        """
        Limits describes the maximum amount of compute resources allowed for use by the running container.
        Structure is documented below.
        """
        return pulumi.get(self, "limits")

    @_builtins.property
    @pulumi.getter
    def requests(self) -> Optional['outputs.FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigContainerResourcesRequests']:
        """
        Requests describes the amount of compute resources reserved for the container by the kube-scheduler.
        Structure is documented below.
        """
        return pulumi.get(self, "requests")


@pulumi.output_type
class FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigContainerResourcesLimits(dict):
    def __init__(__self__, *,
                 cpu: Optional[_builtins.str] = None,
                 memory: Optional[_builtins.str] = None):
        """
        :param _builtins.str cpu: CPU requirement expressed in Kubernetes resource units.
        :param _builtins.str memory: Memory requirement expressed in Kubernetes resource units.
        """
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @_builtins.property
    @pulumi.getter
    def cpu(self) -> Optional[_builtins.str]:
        """
        CPU requirement expressed in Kubernetes resource units.
        """
        return pulumi.get(self, "cpu")

    @_builtins.property
    @pulumi.getter
    def memory(self) -> Optional[_builtins.str]:
        """
        Memory requirement expressed in Kubernetes resource units.
        """
        return pulumi.get(self, "memory")


@pulumi.output_type
class FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigContainerResourcesRequests(dict):
    def __init__(__self__, *,
                 cpu: Optional[_builtins.str] = None,
                 memory: Optional[_builtins.str] = None):
        """
        :param _builtins.str cpu: CPU requirement expressed in Kubernetes resource units.
        :param _builtins.str memory: Memory requirement expressed in Kubernetes resource units.
        """
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @_builtins.property
    @pulumi.getter
    def cpu(self) -> Optional[_builtins.str]:
        """
        CPU requirement expressed in Kubernetes resource units.
        """
        return pulumi.get(self, "cpu")

    @_builtins.property
    @pulumi.getter
    def memory(self) -> Optional[_builtins.str]:
        """
        Memory requirement expressed in Kubernetes resource units.
        """
        return pulumi.get(self, "memory")


@pulumi.output_type
class FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigPodToleration(dict):
    def __init__(__self__, *,
                 effect: Optional[_builtins.str] = None,
                 key: Optional[_builtins.str] = None,
                 operator: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str effect: Matches a taint effect.
        :param _builtins.str key: Matches a taint key (not necessarily unique).
        :param _builtins.str operator: Matches a taint operator.
        :param _builtins.str value: Matches a taint value.
        """
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def effect(self) -> Optional[_builtins.str]:
        """
        Matches a taint effect.
        """
        return pulumi.get(self, "effect")

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        """
        Matches a taint key (not necessarily unique).
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def operator(self) -> Optional[_builtins.str]:
        """
        Matches a taint operator.
        """
        return pulumi.get(self, "operator")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        Matches a taint value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigMonitoring(dict):
    def __init__(__self__, *,
                 backends: Optional[Sequence[_builtins.str]] = None):
        """
        :param Sequence[_builtins.str] backends: Specifies the list of backends Policy Controller will export to. An empty list would effectively disable metrics export.
               Each value may be one of: `MONITORING_BACKEND_UNSPECIFIED`, `PROMETHEUS`, `CLOUD_MONITORING`.
        """
        if backends is not None:
            pulumi.set(__self__, "backends", backends)

    @_builtins.property
    @pulumi.getter
    def backends(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the list of backends Policy Controller will export to. An empty list would effectively disable metrics export.
        Each value may be one of: `MONITORING_BACKEND_UNSPECIFIED`, `PROMETHEUS`, `CLOUD_MONITORING`.
        """
        return pulumi.get(self, "backends")


@pulumi.output_type
class FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "templateLibrary":
            suggest = "template_library"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bundles: Optional[Sequence['outputs.FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentBundle']] = None,
                 template_library: Optional['outputs.FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentTemplateLibrary'] = None):
        """
        :param Sequence['FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentBundleArgs'] bundles: Configures which bundles to install and their corresponding install specs.
               Structure is documented below.
        :param 'FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentTemplateLibraryArgs' template_library: Configures the installation of the Template Library.
               Structure is documented below.
        """
        if bundles is not None:
            pulumi.set(__self__, "bundles", bundles)
        if template_library is not None:
            pulumi.set(__self__, "template_library", template_library)

    @_builtins.property
    @pulumi.getter
    def bundles(self) -> Optional[Sequence['outputs.FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentBundle']]:
        """
        Configures which bundles to install and their corresponding install specs.
        Structure is documented below.
        """
        return pulumi.get(self, "bundles")

    @_builtins.property
    @pulumi.getter(name="templateLibrary")
    def template_library(self) -> Optional['outputs.FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentTemplateLibrary']:
        """
        Configures the installation of the Template Library.
        Structure is documented below.
        """
        return pulumi.get(self, "template_library")


@pulumi.output_type
class FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentBundle(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exemptedNamespaces":
            suggest = "exempted_namespaces"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentBundle. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentBundle.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentBundle.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bundle: _builtins.str,
                 exempted_namespaces: Optional[Sequence[_builtins.str]] = None):
        """
        :param _builtins.str bundle: The identifier for this object. Format specified above.
        :param Sequence[_builtins.str] exempted_namespaces: The set of namespaces to be exempted from the bundle.
        """
        pulumi.set(__self__, "bundle", bundle)
        if exempted_namespaces is not None:
            pulumi.set(__self__, "exempted_namespaces", exempted_namespaces)

    @_builtins.property
    @pulumi.getter
    def bundle(self) -> _builtins.str:
        """
        The identifier for this object. Format specified above.
        """
        return pulumi.get(self, "bundle")

    @_builtins.property
    @pulumi.getter(name="exemptedNamespaces")
    def exempted_namespaces(self) -> Optional[Sequence[_builtins.str]]:
        """
        The set of namespaces to be exempted from the bundle.
        """
        return pulumi.get(self, "exempted_namespaces")


@pulumi.output_type
class FeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentTemplateLibrary(dict):
    def __init__(__self__, *,
                 installation: Optional[_builtins.str] = None):
        """
        :param _builtins.str installation: Configures the manner in which the template library is installed on the cluster.
               Possible values are: `INSTALLATION_UNSPECIFIED`, `NOT_INSTALLED`, `ALL`.
        """
        if installation is not None:
            pulumi.set(__self__, "installation", installation)

    @_builtins.property
    @pulumi.getter
    def installation(self) -> Optional[_builtins.str]:
        """
        Configures the manner in which the template library is installed on the cluster.
        Possible values are: `INSTALLATION_UNSPECIFIED`, `NOT_INSTALLED`, `ALL`.
        """
        return pulumi.get(self, "installation")


@pulumi.output_type
class FeatureIamBindingCondition(dict):
    def __init__(__self__, *,
                 expression: _builtins.str,
                 title: _builtins.str,
                 description: Optional[_builtins.str] = None):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "title", title)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @_builtins.property
    @pulumi.getter
    def expression(self) -> _builtins.str:
        return pulumi.get(self, "expression")

    @_builtins.property
    @pulumi.getter
    def title(self) -> _builtins.str:
        return pulumi.get(self, "title")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "description")


@pulumi.output_type
class FeatureIamMemberCondition(dict):
    def __init__(__self__, *,
                 expression: _builtins.str,
                 title: _builtins.str,
                 description: Optional[_builtins.str] = None):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "title", title)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @_builtins.property
    @pulumi.getter
    def expression(self) -> _builtins.str:
        return pulumi.get(self, "expression")

    @_builtins.property
    @pulumi.getter
    def title(self) -> _builtins.str:
        return pulumi.get(self, "title")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "description")


@pulumi.output_type
class FeatureMembershipConfigmanagement(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "configSync":
            suggest = "config_sync"
        elif key == "hierarchyController":
            suggest = "hierarchy_controller"
        elif key == "policyController":
            suggest = "policy_controller"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FeatureMembershipConfigmanagement. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FeatureMembershipConfigmanagement.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FeatureMembershipConfigmanagement.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 binauthz: Optional['outputs.FeatureMembershipConfigmanagementBinauthz'] = None,
                 config_sync: Optional['outputs.FeatureMembershipConfigmanagementConfigSync'] = None,
                 hierarchy_controller: Optional['outputs.FeatureMembershipConfigmanagementHierarchyController'] = None,
                 management: Optional[_builtins.str] = None,
                 policy_controller: Optional['outputs.FeatureMembershipConfigmanagementPolicyController'] = None,
                 version: Optional[_builtins.str] = None):
        """
        :param 'FeatureMembershipConfigmanagementBinauthzArgs' binauthz: (Optional, Deprecated)
               Binauthz configuration for the cluster. Structure is documented below.
               This field will be ignored and should not be set.
        :param 'FeatureMembershipConfigmanagementConfigSyncArgs' config_sync: Config Sync configuration for the cluster. Structure is documented below.
        :param 'FeatureMembershipConfigmanagementHierarchyControllerArgs' hierarchy_controller: Hierarchy Controller configuration for the cluster. Structure is documented below.
               Configuring Hierarchy Controller through the configmanagement feature is no longer recommended.
               Use open source Kubernetes [Hierarchical Namespace Controller (HNC)](https://github.com/kubernetes-sigs/hierarchical-namespaces) instead.
               Follow the [instructions](https://cloud.google.com/kubernetes-engine/enterprise/config-sync/docs/how-to/migrate-hierarchy-controller)
               to migrate from Hierarchy Controller to HNC.
        :param _builtins.str management: Set this field to MANAGEMENT_AUTOMATIC to enable Config Sync auto-upgrades, and set this field to MANAGEMENT_MANUAL or MANAGEMENT_UNSPECIFIED to disable Config Sync auto-upgrades.
        :param 'FeatureMembershipConfigmanagementPolicyControllerArgs' policy_controller: Policy Controller configuration for the cluster. Structure is documented below.
               Configuring Policy Controller through the configmanagement feature is no longer recommended.
               Use the policycontroller feature instead.
        :param _builtins.str version: Version of Config Sync installed.
        """
        if binauthz is not None:
            pulumi.set(__self__, "binauthz", binauthz)
        if config_sync is not None:
            pulumi.set(__self__, "config_sync", config_sync)
        if hierarchy_controller is not None:
            pulumi.set(__self__, "hierarchy_controller", hierarchy_controller)
        if management is not None:
            pulumi.set(__self__, "management", management)
        if policy_controller is not None:
            pulumi.set(__self__, "policy_controller", policy_controller)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def binauthz(self) -> Optional['outputs.FeatureMembershipConfigmanagementBinauthz']:
        """
        (Optional, Deprecated)
        Binauthz configuration for the cluster. Structure is documented below.
        This field will be ignored and should not be set.
        """
        return pulumi.get(self, "binauthz")

    @_builtins.property
    @pulumi.getter(name="configSync")
    def config_sync(self) -> Optional['outputs.FeatureMembershipConfigmanagementConfigSync']:
        """
        Config Sync configuration for the cluster. Structure is documented below.
        """
        return pulumi.get(self, "config_sync")

    @_builtins.property
    @pulumi.getter(name="hierarchyController")
    def hierarchy_controller(self) -> Optional['outputs.FeatureMembershipConfigmanagementHierarchyController']:
        """
        Hierarchy Controller configuration for the cluster. Structure is documented below.
        Configuring Hierarchy Controller through the configmanagement feature is no longer recommended.
        Use open source Kubernetes [Hierarchical Namespace Controller (HNC)](https://github.com/kubernetes-sigs/hierarchical-namespaces) instead.
        Follow the [instructions](https://cloud.google.com/kubernetes-engine/enterprise/config-sync/docs/how-to/migrate-hierarchy-controller)
        to migrate from Hierarchy Controller to HNC.
        """
        return pulumi.get(self, "hierarchy_controller")

    @_builtins.property
    @pulumi.getter
    def management(self) -> Optional[_builtins.str]:
        """
        Set this field to MANAGEMENT_AUTOMATIC to enable Config Sync auto-upgrades, and set this field to MANAGEMENT_MANUAL or MANAGEMENT_UNSPECIFIED to disable Config Sync auto-upgrades.
        """
        return pulumi.get(self, "management")

    @_builtins.property
    @pulumi.getter(name="policyController")
    def policy_controller(self) -> Optional['outputs.FeatureMembershipConfigmanagementPolicyController']:
        """
        Policy Controller configuration for the cluster. Structure is documented below.
        Configuring Policy Controller through the configmanagement feature is no longer recommended.
        Use the policycontroller feature instead.
        """
        return pulumi.get(self, "policy_controller")

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[_builtins.str]:
        """
        Version of Config Sync installed.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class FeatureMembershipConfigmanagementBinauthz(dict):
    def __init__(__self__, *,
                 enabled: Optional[_builtins.bool] = None):
        """
        :param _builtins.bool enabled: Whether binauthz is enabled in this cluster.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[_builtins.bool]:
        """
        Whether binauthz is enabled in this cluster.
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class FeatureMembershipConfigmanagementConfigSync(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deploymentOverrides":
            suggest = "deployment_overrides"
        elif key == "metricsGcpServiceAccountEmail":
            suggest = "metrics_gcp_service_account_email"
        elif key == "preventDrift":
            suggest = "prevent_drift"
        elif key == "sourceFormat":
            suggest = "source_format"
        elif key == "stopSyncing":
            suggest = "stop_syncing"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FeatureMembershipConfigmanagementConfigSync. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FeatureMembershipConfigmanagementConfigSync.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FeatureMembershipConfigmanagementConfigSync.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 deployment_overrides: Optional[Sequence['outputs.FeatureMembershipConfigmanagementConfigSyncDeploymentOverride']] = None,
                 enabled: Optional[_builtins.bool] = None,
                 git: Optional['outputs.FeatureMembershipConfigmanagementConfigSyncGit'] = None,
                 metrics_gcp_service_account_email: Optional[_builtins.str] = None,
                 oci: Optional['outputs.FeatureMembershipConfigmanagementConfigSyncOci'] = None,
                 prevent_drift: Optional[_builtins.bool] = None,
                 source_format: Optional[_builtins.str] = None,
                 stop_syncing: Optional[_builtins.bool] = None):
        """
        :param Sequence['FeatureMembershipConfigmanagementConfigSyncDeploymentOverrideArgs'] deployment_overrides: The override configurations for the Config Sync Deployments. Structure is documented below. The field is only available on Config Sync version 1.20.1 or later.
        :param _builtins.bool enabled: Enables the installation of ConfigSync. If set to true, ConfigSync resources will be created and the other ConfigSync fields will be applied if exist. If set to false, all other ConfigSync fields will be ignored, ConfigSync resources will be deleted. If omitted, ConfigSync resources will be managed depends on the presence of the git or oci field.
        :param 'FeatureMembershipConfigmanagementConfigSyncGitArgs' git: (Optional) Structure is documented below.
        :param _builtins.str metrics_gcp_service_account_email: Deprecated: If Workload Identity Federation for GKE is enabled, Google Cloud Service Account is no longer needed for exporting Config Sync metrics: https://cloud.google.com/kubernetes-engine/enterprise/config-sync/docs/how-to/monitor-config-sync-cloud-monitoring#custom-monitoring.
        :param 'FeatureMembershipConfigmanagementConfigSyncOciArgs' oci: (Optional) Supported from Config Sync versions 1.12.0 onwards. Structure is documented below.
               
               Use either `git` or `oci` config option.
        :param _builtins.bool prevent_drift: Supported from Config Sync versions 1.10.0 onwards. Set to `true` to enable the Config Sync admission webhook to prevent drifts. If set to `false`, disables the Config Sync admission webhook and does not prevent drifts.
        :param _builtins.str source_format: Specifies whether the Config Sync Repo is in "hierarchical" or "unstructured" mode.
        :param _builtins.bool stop_syncing: Set to `true` to stop syncing configurations for a single cluster. This field is only available on clusters using Config Sync [auto-upgrades](http://cloud/kubernetes-engine/enterprise/config-sync/docs/how-to/upgrade-config-sync#auto-upgrade-config) or on Config Sync version 1.20.0 or later. Defaults: `false`.
        """
        if deployment_overrides is not None:
            pulumi.set(__self__, "deployment_overrides", deployment_overrides)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if git is not None:
            pulumi.set(__self__, "git", git)
        if metrics_gcp_service_account_email is not None:
            pulumi.set(__self__, "metrics_gcp_service_account_email", metrics_gcp_service_account_email)
        if oci is not None:
            pulumi.set(__self__, "oci", oci)
        if prevent_drift is not None:
            pulumi.set(__self__, "prevent_drift", prevent_drift)
        if source_format is not None:
            pulumi.set(__self__, "source_format", source_format)
        if stop_syncing is not None:
            pulumi.set(__self__, "stop_syncing", stop_syncing)

    @_builtins.property
    @pulumi.getter(name="deploymentOverrides")
    def deployment_overrides(self) -> Optional[Sequence['outputs.FeatureMembershipConfigmanagementConfigSyncDeploymentOverride']]:
        """
        The override configurations for the Config Sync Deployments. Structure is documented below. The field is only available on Config Sync version 1.20.1 or later.
        """
        return pulumi.get(self, "deployment_overrides")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[_builtins.bool]:
        """
        Enables the installation of ConfigSync. If set to true, ConfigSync resources will be created and the other ConfigSync fields will be applied if exist. If set to false, all other ConfigSync fields will be ignored, ConfigSync resources will be deleted. If omitted, ConfigSync resources will be managed depends on the presence of the git or oci field.
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter
    def git(self) -> Optional['outputs.FeatureMembershipConfigmanagementConfigSyncGit']:
        """
        (Optional) Structure is documented below.
        """
        return pulumi.get(self, "git")

    @_builtins.property
    @pulumi.getter(name="metricsGcpServiceAccountEmail")
    def metrics_gcp_service_account_email(self) -> Optional[_builtins.str]:
        """
        Deprecated: If Workload Identity Federation for GKE is enabled, Google Cloud Service Account is no longer needed for exporting Config Sync metrics: https://cloud.google.com/kubernetes-engine/enterprise/config-sync/docs/how-to/monitor-config-sync-cloud-monitoring#custom-monitoring.
        """
        return pulumi.get(self, "metrics_gcp_service_account_email")

    @_builtins.property
    @pulumi.getter
    def oci(self) -> Optional['outputs.FeatureMembershipConfigmanagementConfigSyncOci']:
        """
        (Optional) Supported from Config Sync versions 1.12.0 onwards. Structure is documented below.

        Use either `git` or `oci` config option.
        """
        return pulumi.get(self, "oci")

    @_builtins.property
    @pulumi.getter(name="preventDrift")
    def prevent_drift(self) -> Optional[_builtins.bool]:
        """
        Supported from Config Sync versions 1.10.0 onwards. Set to `true` to enable the Config Sync admission webhook to prevent drifts. If set to `false`, disables the Config Sync admission webhook and does not prevent drifts.
        """
        return pulumi.get(self, "prevent_drift")

    @_builtins.property
    @pulumi.getter(name="sourceFormat")
    def source_format(self) -> Optional[_builtins.str]:
        """
        Specifies whether the Config Sync Repo is in "hierarchical" or "unstructured" mode.
        """
        return pulumi.get(self, "source_format")

    @_builtins.property
    @pulumi.getter(name="stopSyncing")
    def stop_syncing(self) -> Optional[_builtins.bool]:
        """
        Set to `true` to stop syncing configurations for a single cluster. This field is only available on clusters using Config Sync [auto-upgrades](http://cloud/kubernetes-engine/enterprise/config-sync/docs/how-to/upgrade-config-sync#auto-upgrade-config) or on Config Sync version 1.20.0 or later. Defaults: `false`.
        """
        return pulumi.get(self, "stop_syncing")


@pulumi.output_type
class FeatureMembershipConfigmanagementConfigSyncDeploymentOverride(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deploymentName":
            suggest = "deployment_name"
        elif key == "deploymentNamespace":
            suggest = "deployment_namespace"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FeatureMembershipConfigmanagementConfigSyncDeploymentOverride. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FeatureMembershipConfigmanagementConfigSyncDeploymentOverride.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FeatureMembershipConfigmanagementConfigSyncDeploymentOverride.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 containers: Optional[Sequence['outputs.FeatureMembershipConfigmanagementConfigSyncDeploymentOverrideContainer']] = None,
                 deployment_name: Optional[_builtins.str] = None,
                 deployment_namespace: Optional[_builtins.str] = None):
        """
        :param Sequence['FeatureMembershipConfigmanagementConfigSyncDeploymentOverrideContainerArgs'] containers: The override configurations for the containers in the Deployment. Structure is documented below.
        :param _builtins.str deployment_name: The name of the Deployment.
        :param _builtins.str deployment_namespace: The namespace of the Deployment.
        """
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if deployment_name is not None:
            pulumi.set(__self__, "deployment_name", deployment_name)
        if deployment_namespace is not None:
            pulumi.set(__self__, "deployment_namespace", deployment_namespace)

    @_builtins.property
    @pulumi.getter
    def containers(self) -> Optional[Sequence['outputs.FeatureMembershipConfigmanagementConfigSyncDeploymentOverrideContainer']]:
        """
        The override configurations for the containers in the Deployment. Structure is documented below.
        """
        return pulumi.get(self, "containers")

    @_builtins.property
    @pulumi.getter(name="deploymentName")
    def deployment_name(self) -> Optional[_builtins.str]:
        """
        The name of the Deployment.
        """
        return pulumi.get(self, "deployment_name")

    @_builtins.property
    @pulumi.getter(name="deploymentNamespace")
    def deployment_namespace(self) -> Optional[_builtins.str]:
        """
        The namespace of the Deployment.
        """
        return pulumi.get(self, "deployment_namespace")


@pulumi.output_type
class FeatureMembershipConfigmanagementConfigSyncDeploymentOverrideContainer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "containerName":
            suggest = "container_name"
        elif key == "cpuLimit":
            suggest = "cpu_limit"
        elif key == "cpuRequest":
            suggest = "cpu_request"
        elif key == "memoryLimit":
            suggest = "memory_limit"
        elif key == "memoryRequest":
            suggest = "memory_request"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FeatureMembershipConfigmanagementConfigSyncDeploymentOverrideContainer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FeatureMembershipConfigmanagementConfigSyncDeploymentOverrideContainer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FeatureMembershipConfigmanagementConfigSyncDeploymentOverrideContainer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 container_name: Optional[_builtins.str] = None,
                 cpu_limit: Optional[_builtins.str] = None,
                 cpu_request: Optional[_builtins.str] = None,
                 memory_limit: Optional[_builtins.str] = None,
                 memory_request: Optional[_builtins.str] = None):
        """
        :param _builtins.str container_name: The name of the container.
        :param _builtins.str cpu_limit: The CPU limit of the container.
        :param _builtins.str cpu_request: The CPU request of the container.
        :param _builtins.str memory_limit: The memory limit of the container.
        :param _builtins.str memory_request: The memory request of the container.
        """
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if cpu_limit is not None:
            pulumi.set(__self__, "cpu_limit", cpu_limit)
        if cpu_request is not None:
            pulumi.set(__self__, "cpu_request", cpu_request)
        if memory_limit is not None:
            pulumi.set(__self__, "memory_limit", memory_limit)
        if memory_request is not None:
            pulumi.set(__self__, "memory_request", memory_request)

    @_builtins.property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[_builtins.str]:
        """
        The name of the container.
        """
        return pulumi.get(self, "container_name")

    @_builtins.property
    @pulumi.getter(name="cpuLimit")
    def cpu_limit(self) -> Optional[_builtins.str]:
        """
        The CPU limit of the container.
        """
        return pulumi.get(self, "cpu_limit")

    @_builtins.property
    @pulumi.getter(name="cpuRequest")
    def cpu_request(self) -> Optional[_builtins.str]:
        """
        The CPU request of the container.
        """
        return pulumi.get(self, "cpu_request")

    @_builtins.property
    @pulumi.getter(name="memoryLimit")
    def memory_limit(self) -> Optional[_builtins.str]:
        """
        The memory limit of the container.
        """
        return pulumi.get(self, "memory_limit")

    @_builtins.property
    @pulumi.getter(name="memoryRequest")
    def memory_request(self) -> Optional[_builtins.str]:
        """
        The memory request of the container.
        """
        return pulumi.get(self, "memory_request")


@pulumi.output_type
class FeatureMembershipConfigmanagementConfigSyncGit(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "gcpServiceAccountEmail":
            suggest = "gcp_service_account_email"
        elif key == "httpsProxy":
            suggest = "https_proxy"
        elif key == "policyDir":
            suggest = "policy_dir"
        elif key == "secretType":
            suggest = "secret_type"
        elif key == "syncBranch":
            suggest = "sync_branch"
        elif key == "syncRepo":
            suggest = "sync_repo"
        elif key == "syncRev":
            suggest = "sync_rev"
        elif key == "syncWaitSecs":
            suggest = "sync_wait_secs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FeatureMembershipConfigmanagementConfigSyncGit. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FeatureMembershipConfigmanagementConfigSyncGit.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FeatureMembershipConfigmanagementConfigSyncGit.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 gcp_service_account_email: Optional[_builtins.str] = None,
                 https_proxy: Optional[_builtins.str] = None,
                 policy_dir: Optional[_builtins.str] = None,
                 secret_type: Optional[_builtins.str] = None,
                 sync_branch: Optional[_builtins.str] = None,
                 sync_repo: Optional[_builtins.str] = None,
                 sync_rev: Optional[_builtins.str] = None,
                 sync_wait_secs: Optional[_builtins.str] = None):
        """
        :param _builtins.str gcp_service_account_email: The GCP Service Account Email used for auth when secretType is gcpServiceAccount.
        :param _builtins.str https_proxy: URL for the HTTPS proxy to be used when communicating with the Git repo.
        :param _builtins.str policy_dir: The path within the Git repository that represents the top level of the repo to sync. Default: the root directory of the repository.
        :param _builtins.str secret_type: Type of secret configured for access to the Git repo.
        :param _builtins.str sync_branch: The branch of the repository to sync from. Default: master.
        :param _builtins.str sync_repo: The URL of the Git repository to use as the source of truth.
        :param _builtins.str sync_rev: Git revision (tag or hash) to check out. Default HEAD.
        :param _builtins.str sync_wait_secs: Period in seconds between consecutive syncs. Default: 15.
        """
        if gcp_service_account_email is not None:
            pulumi.set(__self__, "gcp_service_account_email", gcp_service_account_email)
        if https_proxy is not None:
            pulumi.set(__self__, "https_proxy", https_proxy)
        if policy_dir is not None:
            pulumi.set(__self__, "policy_dir", policy_dir)
        if secret_type is not None:
            pulumi.set(__self__, "secret_type", secret_type)
        if sync_branch is not None:
            pulumi.set(__self__, "sync_branch", sync_branch)
        if sync_repo is not None:
            pulumi.set(__self__, "sync_repo", sync_repo)
        if sync_rev is not None:
            pulumi.set(__self__, "sync_rev", sync_rev)
        if sync_wait_secs is not None:
            pulumi.set(__self__, "sync_wait_secs", sync_wait_secs)

    @_builtins.property
    @pulumi.getter(name="gcpServiceAccountEmail")
    def gcp_service_account_email(self) -> Optional[_builtins.str]:
        """
        The GCP Service Account Email used for auth when secretType is gcpServiceAccount.
        """
        return pulumi.get(self, "gcp_service_account_email")

    @_builtins.property
    @pulumi.getter(name="httpsProxy")
    def https_proxy(self) -> Optional[_builtins.str]:
        """
        URL for the HTTPS proxy to be used when communicating with the Git repo.
        """
        return pulumi.get(self, "https_proxy")

    @_builtins.property
    @pulumi.getter(name="policyDir")
    def policy_dir(self) -> Optional[_builtins.str]:
        """
        The path within the Git repository that represents the top level of the repo to sync. Default: the root directory of the repository.
        """
        return pulumi.get(self, "policy_dir")

    @_builtins.property
    @pulumi.getter(name="secretType")
    def secret_type(self) -> Optional[_builtins.str]:
        """
        Type of secret configured for access to the Git repo.
        """
        return pulumi.get(self, "secret_type")

    @_builtins.property
    @pulumi.getter(name="syncBranch")
    def sync_branch(self) -> Optional[_builtins.str]:
        """
        The branch of the repository to sync from. Default: master.
        """
        return pulumi.get(self, "sync_branch")

    @_builtins.property
    @pulumi.getter(name="syncRepo")
    def sync_repo(self) -> Optional[_builtins.str]:
        """
        The URL of the Git repository to use as the source of truth.
        """
        return pulumi.get(self, "sync_repo")

    @_builtins.property
    @pulumi.getter(name="syncRev")
    def sync_rev(self) -> Optional[_builtins.str]:
        """
        Git revision (tag or hash) to check out. Default HEAD.
        """
        return pulumi.get(self, "sync_rev")

    @_builtins.property
    @pulumi.getter(name="syncWaitSecs")
    def sync_wait_secs(self) -> Optional[_builtins.str]:
        """
        Period in seconds between consecutive syncs. Default: 15.
        """
        return pulumi.get(self, "sync_wait_secs")


@pulumi.output_type
class FeatureMembershipConfigmanagementConfigSyncOci(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "gcpServiceAccountEmail":
            suggest = "gcp_service_account_email"
        elif key == "policyDir":
            suggest = "policy_dir"
        elif key == "secretType":
            suggest = "secret_type"
        elif key == "syncRepo":
            suggest = "sync_repo"
        elif key == "syncWaitSecs":
            suggest = "sync_wait_secs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FeatureMembershipConfigmanagementConfigSyncOci. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FeatureMembershipConfigmanagementConfigSyncOci.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FeatureMembershipConfigmanagementConfigSyncOci.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 gcp_service_account_email: Optional[_builtins.str] = None,
                 policy_dir: Optional[_builtins.str] = None,
                 secret_type: Optional[_builtins.str] = None,
                 sync_repo: Optional[_builtins.str] = None,
                 sync_wait_secs: Optional[_builtins.str] = None):
        """
        :param _builtins.str gcp_service_account_email: The GCP Service Account Email used for auth when secret_type is gcpserviceaccount.
        :param _builtins.str policy_dir: The absolute path of the directory that contains the local resources. Default: the root directory of the image.
        :param _builtins.str secret_type: Type of secret configured for access to the OCI Image. Must be one of gcenode, gcpserviceaccount or none.
        :param _builtins.str sync_repo: The OCI image repository URL for the package to sync from. e.g. LOCATION-docker.pkg.dev/PROJECT_ID/REPOSITORY_NAME/PACKAGE_NAME.
        :param _builtins.str sync_wait_secs: Period in seconds(int64 format) between consecutive syncs. Default: 15.
        """
        if gcp_service_account_email is not None:
            pulumi.set(__self__, "gcp_service_account_email", gcp_service_account_email)
        if policy_dir is not None:
            pulumi.set(__self__, "policy_dir", policy_dir)
        if secret_type is not None:
            pulumi.set(__self__, "secret_type", secret_type)
        if sync_repo is not None:
            pulumi.set(__self__, "sync_repo", sync_repo)
        if sync_wait_secs is not None:
            pulumi.set(__self__, "sync_wait_secs", sync_wait_secs)

    @_builtins.property
    @pulumi.getter(name="gcpServiceAccountEmail")
    def gcp_service_account_email(self) -> Optional[_builtins.str]:
        """
        The GCP Service Account Email used for auth when secret_type is gcpserviceaccount.
        """
        return pulumi.get(self, "gcp_service_account_email")

    @_builtins.property
    @pulumi.getter(name="policyDir")
    def policy_dir(self) -> Optional[_builtins.str]:
        """
        The absolute path of the directory that contains the local resources. Default: the root directory of the image.
        """
        return pulumi.get(self, "policy_dir")

    @_builtins.property
    @pulumi.getter(name="secretType")
    def secret_type(self) -> Optional[_builtins.str]:
        """
        Type of secret configured for access to the OCI Image. Must be one of gcenode, gcpserviceaccount or none.
        """
        return pulumi.get(self, "secret_type")

    @_builtins.property
    @pulumi.getter(name="syncRepo")
    def sync_repo(self) -> Optional[_builtins.str]:
        """
        The OCI image repository URL for the package to sync from. e.g. LOCATION-docker.pkg.dev/PROJECT_ID/REPOSITORY_NAME/PACKAGE_NAME.
        """
        return pulumi.get(self, "sync_repo")

    @_builtins.property
    @pulumi.getter(name="syncWaitSecs")
    def sync_wait_secs(self) -> Optional[_builtins.str]:
        """
        Period in seconds(int64 format) between consecutive syncs. Default: 15.
        """
        return pulumi.get(self, "sync_wait_secs")


@pulumi.output_type
class FeatureMembershipConfigmanagementHierarchyController(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableHierarchicalResourceQuota":
            suggest = "enable_hierarchical_resource_quota"
        elif key == "enablePodTreeLabels":
            suggest = "enable_pod_tree_labels"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FeatureMembershipConfigmanagementHierarchyController. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FeatureMembershipConfigmanagementHierarchyController.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FeatureMembershipConfigmanagementHierarchyController.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable_hierarchical_resource_quota: Optional[_builtins.bool] = None,
                 enable_pod_tree_labels: Optional[_builtins.bool] = None,
                 enabled: Optional[_builtins.bool] = None):
        """
        :param _builtins.bool enable_hierarchical_resource_quota: Whether hierarchical resource quota is enabled in this cluster.
        :param _builtins.bool enable_pod_tree_labels: Whether pod tree labels are enabled in this cluster.
        :param _builtins.bool enabled: Whether Hierarchy Controller is enabled in this cluster.
        """
        if enable_hierarchical_resource_quota is not None:
            pulumi.set(__self__, "enable_hierarchical_resource_quota", enable_hierarchical_resource_quota)
        if enable_pod_tree_labels is not None:
            pulumi.set(__self__, "enable_pod_tree_labels", enable_pod_tree_labels)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @_builtins.property
    @pulumi.getter(name="enableHierarchicalResourceQuota")
    def enable_hierarchical_resource_quota(self) -> Optional[_builtins.bool]:
        """
        Whether hierarchical resource quota is enabled in this cluster.
        """
        return pulumi.get(self, "enable_hierarchical_resource_quota")

    @_builtins.property
    @pulumi.getter(name="enablePodTreeLabels")
    def enable_pod_tree_labels(self) -> Optional[_builtins.bool]:
        """
        Whether pod tree labels are enabled in this cluster.
        """
        return pulumi.get(self, "enable_pod_tree_labels")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[_builtins.bool]:
        """
        Whether Hierarchy Controller is enabled in this cluster.
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class FeatureMembershipConfigmanagementPolicyController(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "auditIntervalSeconds":
            suggest = "audit_interval_seconds"
        elif key == "exemptableNamespaces":
            suggest = "exemptable_namespaces"
        elif key == "logDeniesEnabled":
            suggest = "log_denies_enabled"
        elif key == "mutationEnabled":
            suggest = "mutation_enabled"
        elif key == "referentialRulesEnabled":
            suggest = "referential_rules_enabled"
        elif key == "templateLibraryInstalled":
            suggest = "template_library_installed"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FeatureMembershipConfigmanagementPolicyController. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FeatureMembershipConfigmanagementPolicyController.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FeatureMembershipConfigmanagementPolicyController.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 audit_interval_seconds: Optional[_builtins.str] = None,
                 enabled: Optional[_builtins.bool] = None,
                 exemptable_namespaces: Optional[Sequence[_builtins.str]] = None,
                 log_denies_enabled: Optional[_builtins.bool] = None,
                 monitoring: Optional['outputs.FeatureMembershipConfigmanagementPolicyControllerMonitoring'] = None,
                 mutation_enabled: Optional[_builtins.bool] = None,
                 referential_rules_enabled: Optional[_builtins.bool] = None,
                 template_library_installed: Optional[_builtins.bool] = None):
        """
        :param _builtins.str audit_interval_seconds: Sets the interval for Policy Controller Audit Scans (in seconds). When set to 0, this disables audit functionality altogether.
        :param _builtins.bool enabled: Enables the installation of Policy Controller. If false, the rest of PolicyController fields take no effect.
        :param Sequence[_builtins.str] exemptable_namespaces: The set of namespaces that are excluded from Policy Controller checks. Namespaces do not need to currently exist on the cluster.
        :param _builtins.bool log_denies_enabled: Logs all denies and dry run failures.
        :param 'FeatureMembershipConfigmanagementPolicyControllerMonitoringArgs' monitoring: Specifies the backends Policy Controller should export metrics to. For example, to specify metrics should be exported to Cloud Monitoring and Prometheus, specify backends: ["cloudmonitoring", "prometheus"]. Default: ["cloudmonitoring", "prometheus"]
        :param _builtins.bool mutation_enabled: Enables mutation in policy controller. If true, mutation CRDs, webhook, and controller deployment will be deployed to the cluster.
        :param _builtins.bool referential_rules_enabled: Enables the ability to use Constraint Templates that reference to objects other than the object currently being evaluated.
        :param _builtins.bool template_library_installed: Installs the default template library along with Policy Controller.
        """
        if audit_interval_seconds is not None:
            pulumi.set(__self__, "audit_interval_seconds", audit_interval_seconds)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if exemptable_namespaces is not None:
            pulumi.set(__self__, "exemptable_namespaces", exemptable_namespaces)
        if log_denies_enabled is not None:
            pulumi.set(__self__, "log_denies_enabled", log_denies_enabled)
        if monitoring is not None:
            pulumi.set(__self__, "monitoring", monitoring)
        if mutation_enabled is not None:
            pulumi.set(__self__, "mutation_enabled", mutation_enabled)
        if referential_rules_enabled is not None:
            pulumi.set(__self__, "referential_rules_enabled", referential_rules_enabled)
        if template_library_installed is not None:
            pulumi.set(__self__, "template_library_installed", template_library_installed)

    @_builtins.property
    @pulumi.getter(name="auditIntervalSeconds")
    def audit_interval_seconds(self) -> Optional[_builtins.str]:
        """
        Sets the interval for Policy Controller Audit Scans (in seconds). When set to 0, this disables audit functionality altogether.
        """
        return pulumi.get(self, "audit_interval_seconds")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[_builtins.bool]:
        """
        Enables the installation of Policy Controller. If false, the rest of PolicyController fields take no effect.
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter(name="exemptableNamespaces")
    def exemptable_namespaces(self) -> Optional[Sequence[_builtins.str]]:
        """
        The set of namespaces that are excluded from Policy Controller checks. Namespaces do not need to currently exist on the cluster.
        """
        return pulumi.get(self, "exemptable_namespaces")

    @_builtins.property
    @pulumi.getter(name="logDeniesEnabled")
    def log_denies_enabled(self) -> Optional[_builtins.bool]:
        """
        Logs all denies and dry run failures.
        """
        return pulumi.get(self, "log_denies_enabled")

    @_builtins.property
    @pulumi.getter
    def monitoring(self) -> Optional['outputs.FeatureMembershipConfigmanagementPolicyControllerMonitoring']:
        """
        Specifies the backends Policy Controller should export metrics to. For example, to specify metrics should be exported to Cloud Monitoring and Prometheus, specify backends: ["cloudmonitoring", "prometheus"]. Default: ["cloudmonitoring", "prometheus"]
        """
        return pulumi.get(self, "monitoring")

    @_builtins.property
    @pulumi.getter(name="mutationEnabled")
    def mutation_enabled(self) -> Optional[_builtins.bool]:
        """
        Enables mutation in policy controller. If true, mutation CRDs, webhook, and controller deployment will be deployed to the cluster.
        """
        return pulumi.get(self, "mutation_enabled")

    @_builtins.property
    @pulumi.getter(name="referentialRulesEnabled")
    def referential_rules_enabled(self) -> Optional[_builtins.bool]:
        """
        Enables the ability to use Constraint Templates that reference to objects other than the object currently being evaluated.
        """
        return pulumi.get(self, "referential_rules_enabled")

    @_builtins.property
    @pulumi.getter(name="templateLibraryInstalled")
    def template_library_installed(self) -> Optional[_builtins.bool]:
        """
        Installs the default template library along with Policy Controller.
        """
        return pulumi.get(self, "template_library_installed")


@pulumi.output_type
class FeatureMembershipConfigmanagementPolicyControllerMonitoring(dict):
    def __init__(__self__, *,
                 backends: Optional[Sequence[_builtins.str]] = None):
        """
        :param Sequence[_builtins.str] backends: Specifies the list of backends Policy Controller will export to. Must be one of `CLOUD_MONITORING` or `PROMETHEUS`. Defaults to [`CLOUD_MONITORING`, `PROMETHEUS`]. Specifying an empty value `[]` disables metrics export.
        """
        if backends is not None:
            pulumi.set(__self__, "backends", backends)

    @_builtins.property
    @pulumi.getter
    def backends(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the list of backends Policy Controller will export to. Must be one of `CLOUD_MONITORING` or `PROMETHEUS`. Defaults to [`CLOUD_MONITORING`, `PROMETHEUS`]. Specifying an empty value `[]` disables metrics export.
        """
        return pulumi.get(self, "backends")


@pulumi.output_type
class FeatureMembershipMesh(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "controlPlane":
            suggest = "control_plane"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FeatureMembershipMesh. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FeatureMembershipMesh.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FeatureMembershipMesh.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 control_plane: Optional[_builtins.str] = None,
                 management: Optional[_builtins.str] = None):
        """
        :param _builtins.str control_plane: **DEPRECATED** Whether to automatically manage Service Mesh control planes. Possible values: CONTROL_PLANE_MANAGEMENT_UNSPECIFIED, AUTOMATIC, MANUAL
        :param _builtins.str management: Whether to automatically manage Service Mesh. Can either be `MANAGEMENT_AUTOMATIC` or `MANAGEMENT_MANUAL`.
        """
        if control_plane is not None:
            pulumi.set(__self__, "control_plane", control_plane)
        if management is not None:
            pulumi.set(__self__, "management", management)

    @_builtins.property
    @pulumi.getter(name="controlPlane")
    @_utilities.deprecated("""Deprecated in favor of the `management` field""")
    def control_plane(self) -> Optional[_builtins.str]:
        """
        **DEPRECATED** Whether to automatically manage Service Mesh control planes. Possible values: CONTROL_PLANE_MANAGEMENT_UNSPECIFIED, AUTOMATIC, MANUAL
        """
        return pulumi.get(self, "control_plane")

    @_builtins.property
    @pulumi.getter
    def management(self) -> Optional[_builtins.str]:
        """
        Whether to automatically manage Service Mesh. Can either be `MANAGEMENT_AUTOMATIC` or `MANAGEMENT_MANUAL`.
        """
        return pulumi.get(self, "management")


@pulumi.output_type
class FeatureMembershipPolicycontroller(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "policyControllerHubConfig":
            suggest = "policy_controller_hub_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FeatureMembershipPolicycontroller. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FeatureMembershipPolicycontroller.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FeatureMembershipPolicycontroller.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 policy_controller_hub_config: 'outputs.FeatureMembershipPolicycontrollerPolicyControllerHubConfig',
                 version: Optional[_builtins.str] = None):
        """
        :param 'FeatureMembershipPolicycontrollerPolicyControllerHubConfigArgs' policy_controller_hub_config: Policy Controller configuration for the cluster. Structure is documented below.
        :param _builtins.str version: Version of Policy Controller to install. Defaults to the latest version.
        """
        pulumi.set(__self__, "policy_controller_hub_config", policy_controller_hub_config)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="policyControllerHubConfig")
    def policy_controller_hub_config(self) -> 'outputs.FeatureMembershipPolicycontrollerPolicyControllerHubConfig':
        """
        Policy Controller configuration for the cluster. Structure is documented below.
        """
        return pulumi.get(self, "policy_controller_hub_config")

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[_builtins.str]:
        """
        Version of Policy Controller to install. Defaults to the latest version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class FeatureMembershipPolicycontrollerPolicyControllerHubConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "auditIntervalSeconds":
            suggest = "audit_interval_seconds"
        elif key == "constraintViolationLimit":
            suggest = "constraint_violation_limit"
        elif key == "deploymentConfigs":
            suggest = "deployment_configs"
        elif key == "exemptableNamespaces":
            suggest = "exemptable_namespaces"
        elif key == "installSpec":
            suggest = "install_spec"
        elif key == "logDeniesEnabled":
            suggest = "log_denies_enabled"
        elif key == "mutationEnabled":
            suggest = "mutation_enabled"
        elif key == "policyContent":
            suggest = "policy_content"
        elif key == "referentialRulesEnabled":
            suggest = "referential_rules_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FeatureMembershipPolicycontrollerPolicyControllerHubConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FeatureMembershipPolicycontrollerPolicyControllerHubConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FeatureMembershipPolicycontrollerPolicyControllerHubConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 audit_interval_seconds: Optional[_builtins.int] = None,
                 constraint_violation_limit: Optional[_builtins.int] = None,
                 deployment_configs: Optional[Sequence['outputs.FeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfig']] = None,
                 exemptable_namespaces: Optional[Sequence[_builtins.str]] = None,
                 install_spec: Optional[_builtins.str] = None,
                 log_denies_enabled: Optional[_builtins.bool] = None,
                 monitoring: Optional['outputs.FeatureMembershipPolicycontrollerPolicyControllerHubConfigMonitoring'] = None,
                 mutation_enabled: Optional[_builtins.bool] = None,
                 policy_content: Optional['outputs.FeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContent'] = None,
                 referential_rules_enabled: Optional[_builtins.bool] = None):
        """
        :param _builtins.int audit_interval_seconds: Sets the interval for Policy Controller Audit Scans (in seconds). When set to 0, this disables audit functionality altogether.
        :param _builtins.int constraint_violation_limit: The maximum number of audit violations to be stored in a constraint. If not set, the  default of 20 will be used.
        :param Sequence['FeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigArgs'] deployment_configs: Map of deployment configs to deployments ("admission", "audit", "mutation").
        :param Sequence[_builtins.str] exemptable_namespaces: The set of namespaces that are excluded from Policy Controller checks. Namespaces do not need to currently exist on the cluster.
        :param _builtins.str install_spec: Configures the mode of the Policy Controller installation. Must be one of `INSTALL_SPEC_NOT_INSTALLED`, `INSTALL_SPEC_ENABLED`, `INSTALL_SPEC_SUSPENDED` or `INSTALL_SPEC_DETACHED`.
        :param _builtins.bool log_denies_enabled: Logs all denies and dry run failures.
        :param 'FeatureMembershipPolicycontrollerPolicyControllerHubConfigMonitoringArgs' monitoring: Specifies the backends Policy Controller should export metrics to. Structure is documented below.
        :param _builtins.bool mutation_enabled: Enables mutation in policy controller. If true, mutation CRDs, webhook, and controller deployment will be deployed to the cluster.
        :param 'FeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentArgs' policy_content: Specifies the desired policy content on the cluster. Structure is documented below.
        :param _builtins.bool referential_rules_enabled: Enables the ability to use Constraint Templates that reference to objects other than the object currently being evaluated.
        """
        if audit_interval_seconds is not None:
            pulumi.set(__self__, "audit_interval_seconds", audit_interval_seconds)
        if constraint_violation_limit is not None:
            pulumi.set(__self__, "constraint_violation_limit", constraint_violation_limit)
        if deployment_configs is not None:
            pulumi.set(__self__, "deployment_configs", deployment_configs)
        if exemptable_namespaces is not None:
            pulumi.set(__self__, "exemptable_namespaces", exemptable_namespaces)
        if install_spec is not None:
            pulumi.set(__self__, "install_spec", install_spec)
        if log_denies_enabled is not None:
            pulumi.set(__self__, "log_denies_enabled", log_denies_enabled)
        if monitoring is not None:
            pulumi.set(__self__, "monitoring", monitoring)
        if mutation_enabled is not None:
            pulumi.set(__self__, "mutation_enabled", mutation_enabled)
        if policy_content is not None:
            pulumi.set(__self__, "policy_content", policy_content)
        if referential_rules_enabled is not None:
            pulumi.set(__self__, "referential_rules_enabled", referential_rules_enabled)

    @_builtins.property
    @pulumi.getter(name="auditIntervalSeconds")
    def audit_interval_seconds(self) -> Optional[_builtins.int]:
        """
        Sets the interval for Policy Controller Audit Scans (in seconds). When set to 0, this disables audit functionality altogether.
        """
        return pulumi.get(self, "audit_interval_seconds")

    @_builtins.property
    @pulumi.getter(name="constraintViolationLimit")
    def constraint_violation_limit(self) -> Optional[_builtins.int]:
        """
        The maximum number of audit violations to be stored in a constraint. If not set, the  default of 20 will be used.
        """
        return pulumi.get(self, "constraint_violation_limit")

    @_builtins.property
    @pulumi.getter(name="deploymentConfigs")
    def deployment_configs(self) -> Optional[Sequence['outputs.FeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfig']]:
        """
        Map of deployment configs to deployments ("admission", "audit", "mutation").
        """
        return pulumi.get(self, "deployment_configs")

    @_builtins.property
    @pulumi.getter(name="exemptableNamespaces")
    def exemptable_namespaces(self) -> Optional[Sequence[_builtins.str]]:
        """
        The set of namespaces that are excluded from Policy Controller checks. Namespaces do not need to currently exist on the cluster.
        """
        return pulumi.get(self, "exemptable_namespaces")

    @_builtins.property
    @pulumi.getter(name="installSpec")
    def install_spec(self) -> Optional[_builtins.str]:
        """
        Configures the mode of the Policy Controller installation. Must be one of `INSTALL_SPEC_NOT_INSTALLED`, `INSTALL_SPEC_ENABLED`, `INSTALL_SPEC_SUSPENDED` or `INSTALL_SPEC_DETACHED`.
        """
        return pulumi.get(self, "install_spec")

    @_builtins.property
    @pulumi.getter(name="logDeniesEnabled")
    def log_denies_enabled(self) -> Optional[_builtins.bool]:
        """
        Logs all denies and dry run failures.
        """
        return pulumi.get(self, "log_denies_enabled")

    @_builtins.property
    @pulumi.getter
    def monitoring(self) -> Optional['outputs.FeatureMembershipPolicycontrollerPolicyControllerHubConfigMonitoring']:
        """
        Specifies the backends Policy Controller should export metrics to. Structure is documented below.
        """
        return pulumi.get(self, "monitoring")

    @_builtins.property
    @pulumi.getter(name="mutationEnabled")
    def mutation_enabled(self) -> Optional[_builtins.bool]:
        """
        Enables mutation in policy controller. If true, mutation CRDs, webhook, and controller deployment will be deployed to the cluster.
        """
        return pulumi.get(self, "mutation_enabled")

    @_builtins.property
    @pulumi.getter(name="policyContent")
    def policy_content(self) -> Optional['outputs.FeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContent']:
        """
        Specifies the desired policy content on the cluster. Structure is documented below.
        """
        return pulumi.get(self, "policy_content")

    @_builtins.property
    @pulumi.getter(name="referentialRulesEnabled")
    def referential_rules_enabled(self) -> Optional[_builtins.bool]:
        """
        Enables the ability to use Constraint Templates that reference to objects other than the object currently being evaluated.
        """
        return pulumi.get(self, "referential_rules_enabled")


@pulumi.output_type
class FeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "componentName":
            suggest = "component_name"
        elif key == "containerResources":
            suggest = "container_resources"
        elif key == "podAffinity":
            suggest = "pod_affinity"
        elif key == "podTolerations":
            suggest = "pod_tolerations"
        elif key == "replicaCount":
            suggest = "replica_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 component_name: _builtins.str,
                 container_resources: Optional['outputs.FeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigContainerResources'] = None,
                 pod_affinity: Optional[_builtins.str] = None,
                 pod_tolerations: Optional[Sequence['outputs.FeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigPodToleration']] = None,
                 replica_count: Optional[_builtins.int] = None):
        """
        :param _builtins.str component_name: The name of the component. One of `admission` `audit` or `mutation`
        :param 'FeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigContainerResourcesArgs' container_resources: Container resource requirements.
        :param _builtins.str pod_affinity: Pod affinity configuration. Possible values: AFFINITY_UNSPECIFIED, NO_AFFINITY, ANTI_AFFINITY
        :param Sequence['FeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigPodTolerationArgs'] pod_tolerations: Pod tolerations of node taints.
        :param _builtins.int replica_count: Pod replica count.
        """
        pulumi.set(__self__, "component_name", component_name)
        if container_resources is not None:
            pulumi.set(__self__, "container_resources", container_resources)
        if pod_affinity is not None:
            pulumi.set(__self__, "pod_affinity", pod_affinity)
        if pod_tolerations is not None:
            pulumi.set(__self__, "pod_tolerations", pod_tolerations)
        if replica_count is not None:
            pulumi.set(__self__, "replica_count", replica_count)

    @_builtins.property
    @pulumi.getter(name="componentName")
    def component_name(self) -> _builtins.str:
        """
        The name of the component. One of `admission` `audit` or `mutation`
        """
        return pulumi.get(self, "component_name")

    @_builtins.property
    @pulumi.getter(name="containerResources")
    def container_resources(self) -> Optional['outputs.FeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigContainerResources']:
        """
        Container resource requirements.
        """
        return pulumi.get(self, "container_resources")

    @_builtins.property
    @pulumi.getter(name="podAffinity")
    def pod_affinity(self) -> Optional[_builtins.str]:
        """
        Pod affinity configuration. Possible values: AFFINITY_UNSPECIFIED, NO_AFFINITY, ANTI_AFFINITY
        """
        return pulumi.get(self, "pod_affinity")

    @_builtins.property
    @pulumi.getter(name="podTolerations")
    def pod_tolerations(self) -> Optional[Sequence['outputs.FeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigPodToleration']]:
        """
        Pod tolerations of node taints.
        """
        return pulumi.get(self, "pod_tolerations")

    @_builtins.property
    @pulumi.getter(name="replicaCount")
    def replica_count(self) -> Optional[_builtins.int]:
        """
        Pod replica count.
        """
        return pulumi.get(self, "replica_count")


@pulumi.output_type
class FeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigContainerResources(dict):
    def __init__(__self__, *,
                 limits: Optional['outputs.FeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigContainerResourcesLimits'] = None,
                 requests: Optional['outputs.FeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigContainerResourcesRequests'] = None):
        """
        :param 'FeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigContainerResourcesLimitsArgs' limits: Limits describes the maximum amount of compute resources allowed for use by the running container.
        :param 'FeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigContainerResourcesRequestsArgs' requests: Requests describes the amount of compute resources reserved for the container by the kube-scheduler.
        """
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)

    @_builtins.property
    @pulumi.getter
    def limits(self) -> Optional['outputs.FeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigContainerResourcesLimits']:
        """
        Limits describes the maximum amount of compute resources allowed for use by the running container.
        """
        return pulumi.get(self, "limits")

    @_builtins.property
    @pulumi.getter
    def requests(self) -> Optional['outputs.FeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigContainerResourcesRequests']:
        """
        Requests describes the amount of compute resources reserved for the container by the kube-scheduler.
        """
        return pulumi.get(self, "requests")


@pulumi.output_type
class FeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigContainerResourcesLimits(dict):
    def __init__(__self__, *,
                 cpu: Optional[_builtins.str] = None,
                 memory: Optional[_builtins.str] = None):
        """
        :param _builtins.str cpu: CPU requirement expressed in Kubernetes resource units.
        :param _builtins.str memory: Memory requirement expressed in Kubernetes resource units.
        """
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @_builtins.property
    @pulumi.getter
    def cpu(self) -> Optional[_builtins.str]:
        """
        CPU requirement expressed in Kubernetes resource units.
        """
        return pulumi.get(self, "cpu")

    @_builtins.property
    @pulumi.getter
    def memory(self) -> Optional[_builtins.str]:
        """
        Memory requirement expressed in Kubernetes resource units.
        """
        return pulumi.get(self, "memory")


@pulumi.output_type
class FeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigContainerResourcesRequests(dict):
    def __init__(__self__, *,
                 cpu: Optional[_builtins.str] = None,
                 memory: Optional[_builtins.str] = None):
        """
        :param _builtins.str cpu: CPU requirement expressed in Kubernetes resource units.
        :param _builtins.str memory: Memory requirement expressed in Kubernetes resource units.
        """
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @_builtins.property
    @pulumi.getter
    def cpu(self) -> Optional[_builtins.str]:
        """
        CPU requirement expressed in Kubernetes resource units.
        """
        return pulumi.get(self, "cpu")

    @_builtins.property
    @pulumi.getter
    def memory(self) -> Optional[_builtins.str]:
        """
        Memory requirement expressed in Kubernetes resource units.
        """
        return pulumi.get(self, "memory")


@pulumi.output_type
class FeatureMembershipPolicycontrollerPolicyControllerHubConfigDeploymentConfigPodToleration(dict):
    def __init__(__self__, *,
                 effect: Optional[_builtins.str] = None,
                 key: Optional[_builtins.str] = None,
                 operator: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str effect: Matches a taint effect.
        :param _builtins.str key: Matches a taint key (not necessarily unique).
        :param _builtins.str operator: Matches a taint operator.
        :param _builtins.str value: Matches a taint value.
        """
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def effect(self) -> Optional[_builtins.str]:
        """
        Matches a taint effect.
        """
        return pulumi.get(self, "effect")

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        """
        Matches a taint key (not necessarily unique).
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def operator(self) -> Optional[_builtins.str]:
        """
        Matches a taint operator.
        """
        return pulumi.get(self, "operator")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        Matches a taint value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class FeatureMembershipPolicycontrollerPolicyControllerHubConfigMonitoring(dict):
    def __init__(__self__, *,
                 backends: Optional[Sequence[_builtins.str]] = None):
        """
        :param Sequence[_builtins.str] backends: Specifies the list of backends Policy Controller will export to. Must be one of `CLOUD_MONITORING` or `PROMETHEUS`. Defaults to [`CLOUD_MONITORING`, `PROMETHEUS`]. Specifying an empty value `[]` disables metrics export.
        """
        if backends is not None:
            pulumi.set(__self__, "backends", backends)

    @_builtins.property
    @pulumi.getter
    def backends(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the list of backends Policy Controller will export to. Must be one of `CLOUD_MONITORING` or `PROMETHEUS`. Defaults to [`CLOUD_MONITORING`, `PROMETHEUS`]. Specifying an empty value `[]` disables metrics export.
        """
        return pulumi.get(self, "backends")


@pulumi.output_type
class FeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "templateLibrary":
            suggest = "template_library"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bundles: Optional[Sequence['outputs.FeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentBundle']] = None,
                 template_library: Optional['outputs.FeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentTemplateLibrary'] = None):
        """
        :param Sequence['FeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentBundleArgs'] bundles: map of bundle name to BundleInstallSpec. The bundle name maps to the `bundleName` key in the `policycontroller.gke.io/constraintData` annotation on a constraint.
        :param 'FeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentTemplateLibraryArgs' template_library: Configures the installation of the Template Library. Structure is documented below.
        """
        if bundles is not None:
            pulumi.set(__self__, "bundles", bundles)
        if template_library is not None:
            pulumi.set(__self__, "template_library", template_library)

    @_builtins.property
    @pulumi.getter
    def bundles(self) -> Optional[Sequence['outputs.FeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentBundle']]:
        """
        map of bundle name to BundleInstallSpec. The bundle name maps to the `bundleName` key in the `policycontroller.gke.io/constraintData` annotation on a constraint.
        """
        return pulumi.get(self, "bundles")

    @_builtins.property
    @pulumi.getter(name="templateLibrary")
    def template_library(self) -> Optional['outputs.FeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentTemplateLibrary']:
        """
        Configures the installation of the Template Library. Structure is documented below.
        """
        return pulumi.get(self, "template_library")


@pulumi.output_type
class FeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentBundle(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bundleName":
            suggest = "bundle_name"
        elif key == "exemptedNamespaces":
            suggest = "exempted_namespaces"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentBundle. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentBundle.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentBundle.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bundle_name: _builtins.str,
                 exempted_namespaces: Optional[Sequence[_builtins.str]] = None):
        """
        :param _builtins.str bundle_name: The name of the bundle.
        :param Sequence[_builtins.str] exempted_namespaces: The set of namespaces to be exempted from the bundle.
        """
        pulumi.set(__self__, "bundle_name", bundle_name)
        if exempted_namespaces is not None:
            pulumi.set(__self__, "exempted_namespaces", exempted_namespaces)

    @_builtins.property
    @pulumi.getter(name="bundleName")
    def bundle_name(self) -> _builtins.str:
        """
        The name of the bundle.
        """
        return pulumi.get(self, "bundle_name")

    @_builtins.property
    @pulumi.getter(name="exemptedNamespaces")
    def exempted_namespaces(self) -> Optional[Sequence[_builtins.str]]:
        """
        The set of namespaces to be exempted from the bundle.
        """
        return pulumi.get(self, "exempted_namespaces")


@pulumi.output_type
class FeatureMembershipPolicycontrollerPolicyControllerHubConfigPolicyContentTemplateLibrary(dict):
    def __init__(__self__, *,
                 installation: Optional[_builtins.str] = None):
        """
        :param _builtins.str installation: Configures the manner in which the template library is installed on the cluster. Must be one of `ALL`, `NOT_INSTALLED` or `INSTALLATION_UNSPECIFIED`. Defaults to `ALL`.
        """
        if installation is not None:
            pulumi.set(__self__, "installation", installation)

    @_builtins.property
    @pulumi.getter
    def installation(self) -> Optional[_builtins.str]:
        """
        Configures the manner in which the template library is installed on the cluster. Must be one of `ALL`, `NOT_INSTALLED` or `INSTALLATION_UNSPECIFIED`. Defaults to `ALL`.
        """
        return pulumi.get(self, "installation")


@pulumi.output_type
class FeatureResourceState(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hasResources":
            suggest = "has_resources"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FeatureResourceState. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FeatureResourceState.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FeatureResourceState.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 has_resources: Optional[_builtins.bool] = None,
                 state: Optional[_builtins.str] = None):
        """
        :param _builtins.bool has_resources: (Output)
               Whether this Feature has outstanding resources that need to be cleaned up before it can be disabled.
        :param _builtins.str state: (Output)
               Output only. The "running state" of the Feature in this Hub.
               Structure is documented below.
        """
        if has_resources is not None:
            pulumi.set(__self__, "has_resources", has_resources)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @_builtins.property
    @pulumi.getter(name="hasResources")
    def has_resources(self) -> Optional[_builtins.bool]:
        """
        (Output)
        Whether this Feature has outstanding resources that need to be cleaned up before it can be disabled.
        """
        return pulumi.get(self, "has_resources")

    @_builtins.property
    @pulumi.getter
    def state(self) -> Optional[_builtins.str]:
        """
        (Output)
        Output only. The "running state" of the Feature in this Hub.
        Structure is documented below.
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class FeatureSpec(dict):
    def __init__(__self__, *,
                 clusterupgrade: Optional['outputs.FeatureSpecClusterupgrade'] = None,
                 fleetobservability: Optional['outputs.FeatureSpecFleetobservability'] = None,
                 multiclusteringress: Optional['outputs.FeatureSpecMulticlusteringress'] = None,
                 rbacrolebindingactuation: Optional['outputs.FeatureSpecRbacrolebindingactuation'] = None):
        """
        :param 'FeatureSpecClusterupgradeArgs' clusterupgrade: Clusterupgrade feature spec.
               Structure is documented below.
        :param 'FeatureSpecFleetobservabilityArgs' fleetobservability: Fleet Observability feature spec.
               Structure is documented below.
        :param 'FeatureSpecMulticlusteringressArgs' multiclusteringress: Multicluster Ingress-specific spec.
               Structure is documented below.
        :param 'FeatureSpecRbacrolebindingactuationArgs' rbacrolebindingactuation: RBACRolebinding Actuation feature spec.
               Structure is documented below.
        """
        if clusterupgrade is not None:
            pulumi.set(__self__, "clusterupgrade", clusterupgrade)
        if fleetobservability is not None:
            pulumi.set(__self__, "fleetobservability", fleetobservability)
        if multiclusteringress is not None:
            pulumi.set(__self__, "multiclusteringress", multiclusteringress)
        if rbacrolebindingactuation is not None:
            pulumi.set(__self__, "rbacrolebindingactuation", rbacrolebindingactuation)

    @_builtins.property
    @pulumi.getter
    def clusterupgrade(self) -> Optional['outputs.FeatureSpecClusterupgrade']:
        """
        Clusterupgrade feature spec.
        Structure is documented below.
        """
        return pulumi.get(self, "clusterupgrade")

    @_builtins.property
    @pulumi.getter
    def fleetobservability(self) -> Optional['outputs.FeatureSpecFleetobservability']:
        """
        Fleet Observability feature spec.
        Structure is documented below.
        """
        return pulumi.get(self, "fleetobservability")

    @_builtins.property
    @pulumi.getter
    def multiclusteringress(self) -> Optional['outputs.FeatureSpecMulticlusteringress']:
        """
        Multicluster Ingress-specific spec.
        Structure is documented below.
        """
        return pulumi.get(self, "multiclusteringress")

    @_builtins.property
    @pulumi.getter
    def rbacrolebindingactuation(self) -> Optional['outputs.FeatureSpecRbacrolebindingactuation']:
        """
        RBACRolebinding Actuation feature spec.
        Structure is documented below.
        """
        return pulumi.get(self, "rbacrolebindingactuation")


@pulumi.output_type
class FeatureSpecClusterupgrade(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "upstreamFleets":
            suggest = "upstream_fleets"
        elif key == "gkeUpgradeOverrides":
            suggest = "gke_upgrade_overrides"
        elif key == "postConditions":
            suggest = "post_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FeatureSpecClusterupgrade. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FeatureSpecClusterupgrade.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FeatureSpecClusterupgrade.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 upstream_fleets: Sequence[_builtins.str],
                 gke_upgrade_overrides: Optional[Sequence['outputs.FeatureSpecClusterupgradeGkeUpgradeOverride']] = None,
                 post_conditions: Optional['outputs.FeatureSpecClusterupgradePostConditions'] = None):
        """
        :param Sequence[_builtins.str] upstream_fleets: Specified if other fleet should be considered as a source of upgrades. Currently, at most one upstream fleet is allowed. The fleet name should be either fleet project number or id.
        :param Sequence['FeatureSpecClusterupgradeGkeUpgradeOverrideArgs'] gke_upgrade_overrides: Configuration overrides for individual upgrades.
               Structure is documented below.
        :param 'FeatureSpecClusterupgradePostConditionsArgs' post_conditions: Post conditions to override for the specified upgrade.
               Structure is documented below.
        """
        pulumi.set(__self__, "upstream_fleets", upstream_fleets)
        if gke_upgrade_overrides is not None:
            pulumi.set(__self__, "gke_upgrade_overrides", gke_upgrade_overrides)
        if post_conditions is not None:
            pulumi.set(__self__, "post_conditions", post_conditions)

    @_builtins.property
    @pulumi.getter(name="upstreamFleets")
    def upstream_fleets(self) -> Sequence[_builtins.str]:
        """
        Specified if other fleet should be considered as a source of upgrades. Currently, at most one upstream fleet is allowed. The fleet name should be either fleet project number or id.
        """
        return pulumi.get(self, "upstream_fleets")

    @_builtins.property
    @pulumi.getter(name="gkeUpgradeOverrides")
    def gke_upgrade_overrides(self) -> Optional[Sequence['outputs.FeatureSpecClusterupgradeGkeUpgradeOverride']]:
        """
        Configuration overrides for individual upgrades.
        Structure is documented below.
        """
        return pulumi.get(self, "gke_upgrade_overrides")

    @_builtins.property
    @pulumi.getter(name="postConditions")
    def post_conditions(self) -> Optional['outputs.FeatureSpecClusterupgradePostConditions']:
        """
        Post conditions to override for the specified upgrade.
        Structure is documented below.
        """
        return pulumi.get(self, "post_conditions")


@pulumi.output_type
class FeatureSpecClusterupgradeGkeUpgradeOverride(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "postConditions":
            suggest = "post_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FeatureSpecClusterupgradeGkeUpgradeOverride. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FeatureSpecClusterupgradeGkeUpgradeOverride.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FeatureSpecClusterupgradeGkeUpgradeOverride.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 post_conditions: 'outputs.FeatureSpecClusterupgradeGkeUpgradeOverridePostConditions',
                 upgrade: 'outputs.FeatureSpecClusterupgradeGkeUpgradeOverrideUpgrade'):
        """
        :param 'FeatureSpecClusterupgradeGkeUpgradeOverridePostConditionsArgs' post_conditions: Post conditions to override for the specified upgrade.
               Structure is documented below.
        :param 'FeatureSpecClusterupgradeGkeUpgradeOverrideUpgradeArgs' upgrade: Which upgrade to override.
               Structure is documented below.
        """
        pulumi.set(__self__, "post_conditions", post_conditions)
        pulumi.set(__self__, "upgrade", upgrade)

    @_builtins.property
    @pulumi.getter(name="postConditions")
    def post_conditions(self) -> 'outputs.FeatureSpecClusterupgradeGkeUpgradeOverridePostConditions':
        """
        Post conditions to override for the specified upgrade.
        Structure is documented below.
        """
        return pulumi.get(self, "post_conditions")

    @_builtins.property
    @pulumi.getter
    def upgrade(self) -> 'outputs.FeatureSpecClusterupgradeGkeUpgradeOverrideUpgrade':
        """
        Which upgrade to override.
        Structure is documented below.
        """
        return pulumi.get(self, "upgrade")


@pulumi.output_type
class FeatureSpecClusterupgradeGkeUpgradeOverridePostConditions(dict):
    def __init__(__self__, *,
                 soaking: _builtins.str):
        """
        :param _builtins.str soaking: Amount of time to "soak" after a rollout has been finished before marking it COMPLETE. Cannot exceed 30 days.
        """
        pulumi.set(__self__, "soaking", soaking)

    @_builtins.property
    @pulumi.getter
    def soaking(self) -> _builtins.str:
        """
        Amount of time to "soak" after a rollout has been finished before marking it COMPLETE. Cannot exceed 30 days.
        """
        return pulumi.get(self, "soaking")


@pulumi.output_type
class FeatureSpecClusterupgradeGkeUpgradeOverrideUpgrade(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 version: _builtins.str):
        """
        :param _builtins.str name: Name of the upgrade, e.g., "k8s_control_plane". It should be a valid upgrade name. It must not exceet 99 characters.
        :param _builtins.str version: Version of the upgrade, e.g., "1.22.1-gke.100". It should be a valid version. It must not exceet 99 characters.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Name of the upgrade, e.g., "k8s_control_plane". It should be a valid upgrade name. It must not exceet 99 characters.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        Version of the upgrade, e.g., "1.22.1-gke.100". It should be a valid version. It must not exceet 99 characters.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class FeatureSpecClusterupgradePostConditions(dict):
    def __init__(__self__, *,
                 soaking: _builtins.str):
        """
        :param _builtins.str soaking: Amount of time to "soak" after a rollout has been finished before marking it COMPLETE. Cannot exceed 30 days.
        """
        pulumi.set(__self__, "soaking", soaking)

    @_builtins.property
    @pulumi.getter
    def soaking(self) -> _builtins.str:
        """
        Amount of time to "soak" after a rollout has been finished before marking it COMPLETE. Cannot exceed 30 days.
        """
        return pulumi.get(self, "soaking")


@pulumi.output_type
class FeatureSpecFleetobservability(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "loggingConfig":
            suggest = "logging_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FeatureSpecFleetobservability. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FeatureSpecFleetobservability.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FeatureSpecFleetobservability.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 logging_config: Optional['outputs.FeatureSpecFleetobservabilityLoggingConfig'] = None):
        """
        :param 'FeatureSpecFleetobservabilityLoggingConfigArgs' logging_config: Specified if fleet logging feature is enabled for the entire fleet. If UNSPECIFIED, fleet logging feature is disabled for the entire fleet.
               Structure is documented below.
        """
        if logging_config is not None:
            pulumi.set(__self__, "logging_config", logging_config)

    @_builtins.property
    @pulumi.getter(name="loggingConfig")
    def logging_config(self) -> Optional['outputs.FeatureSpecFleetobservabilityLoggingConfig']:
        """
        Specified if fleet logging feature is enabled for the entire fleet. If UNSPECIFIED, fleet logging feature is disabled for the entire fleet.
        Structure is documented below.
        """
        return pulumi.get(self, "logging_config")


@pulumi.output_type
class FeatureSpecFleetobservabilityLoggingConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultConfig":
            suggest = "default_config"
        elif key == "fleetScopeLogsConfig":
            suggest = "fleet_scope_logs_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FeatureSpecFleetobservabilityLoggingConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FeatureSpecFleetobservabilityLoggingConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FeatureSpecFleetobservabilityLoggingConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default_config: Optional['outputs.FeatureSpecFleetobservabilityLoggingConfigDefaultConfig'] = None,
                 fleet_scope_logs_config: Optional['outputs.FeatureSpecFleetobservabilityLoggingConfigFleetScopeLogsConfig'] = None):
        """
        :param 'FeatureSpecFleetobservabilityLoggingConfigDefaultConfigArgs' default_config: Specified if applying the default routing config to logs not specified in other configs.
               Structure is documented below.
        :param 'FeatureSpecFleetobservabilityLoggingConfigFleetScopeLogsConfigArgs' fleet_scope_logs_config: Specified if applying the routing config to all logs for all fleet scopes.
               Structure is documented below.
        """
        if default_config is not None:
            pulumi.set(__self__, "default_config", default_config)
        if fleet_scope_logs_config is not None:
            pulumi.set(__self__, "fleet_scope_logs_config", fleet_scope_logs_config)

    @_builtins.property
    @pulumi.getter(name="defaultConfig")
    def default_config(self) -> Optional['outputs.FeatureSpecFleetobservabilityLoggingConfigDefaultConfig']:
        """
        Specified if applying the default routing config to logs not specified in other configs.
        Structure is documented below.
        """
        return pulumi.get(self, "default_config")

    @_builtins.property
    @pulumi.getter(name="fleetScopeLogsConfig")
    def fleet_scope_logs_config(self) -> Optional['outputs.FeatureSpecFleetobservabilityLoggingConfigFleetScopeLogsConfig']:
        """
        Specified if applying the routing config to all logs for all fleet scopes.
        Structure is documented below.
        """
        return pulumi.get(self, "fleet_scope_logs_config")


@pulumi.output_type
class FeatureSpecFleetobservabilityLoggingConfigDefaultConfig(dict):
    def __init__(__self__, *,
                 mode: Optional[_builtins.str] = None):
        """
        :param _builtins.str mode: Specified if fleet logging feature is enabled.
               Possible values are: `MODE_UNSPECIFIED`, `COPY`, `MOVE`.
        """
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @_builtins.property
    @pulumi.getter
    def mode(self) -> Optional[_builtins.str]:
        """
        Specified if fleet logging feature is enabled.
        Possible values are: `MODE_UNSPECIFIED`, `COPY`, `MOVE`.
        """
        return pulumi.get(self, "mode")


@pulumi.output_type
class FeatureSpecFleetobservabilityLoggingConfigFleetScopeLogsConfig(dict):
    def __init__(__self__, *,
                 mode: Optional[_builtins.str] = None):
        """
        :param _builtins.str mode: Specified if fleet logging feature is enabled.
               Possible values are: `MODE_UNSPECIFIED`, `COPY`, `MOVE`.
        """
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @_builtins.property
    @pulumi.getter
    def mode(self) -> Optional[_builtins.str]:
        """
        Specified if fleet logging feature is enabled.
        Possible values are: `MODE_UNSPECIFIED`, `COPY`, `MOVE`.
        """
        return pulumi.get(self, "mode")


@pulumi.output_type
class FeatureSpecMulticlusteringress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "configMembership":
            suggest = "config_membership"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FeatureSpecMulticlusteringress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FeatureSpecMulticlusteringress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FeatureSpecMulticlusteringress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 config_membership: _builtins.str):
        """
        :param _builtins.str config_membership: Fully-qualified Membership name which hosts the MultiClusterIngress CRD. Example: `projects/foo-proj/locations/global/memberships/bar`
        """
        pulumi.set(__self__, "config_membership", config_membership)

    @_builtins.property
    @pulumi.getter(name="configMembership")
    def config_membership(self) -> _builtins.str:
        """
        Fully-qualified Membership name which hosts the MultiClusterIngress CRD. Example: `projects/foo-proj/locations/global/memberships/bar`
        """
        return pulumi.get(self, "config_membership")


@pulumi.output_type
class FeatureSpecRbacrolebindingactuation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowedCustomRoles":
            suggest = "allowed_custom_roles"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FeatureSpecRbacrolebindingactuation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FeatureSpecRbacrolebindingactuation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FeatureSpecRbacrolebindingactuation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allowed_custom_roles: Optional[Sequence[_builtins.str]] = None):
        """
        :param Sequence[_builtins.str] allowed_custom_roles: The list of allowed custom roles (ClusterRoles). If a custom role is not part of this list, it cannot be used in a fleet scope RBACRoleBinding. If a custom role in this list is in use, it cannot be removed from the list until the scope RBACRolebindings using it are deleted.
        """
        if allowed_custom_roles is not None:
            pulumi.set(__self__, "allowed_custom_roles", allowed_custom_roles)

    @_builtins.property
    @pulumi.getter(name="allowedCustomRoles")
    def allowed_custom_roles(self) -> Optional[Sequence[_builtins.str]]:
        """
        The list of allowed custom roles (ClusterRoles). If a custom role is not part of this list, it cannot be used in a fleet scope RBACRoleBinding. If a custom role in this list is in use, it cannot be removed from the list until the scope RBACRolebindings using it are deleted.
        """
        return pulumi.get(self, "allowed_custom_roles")


@pulumi.output_type
class FeatureState(dict):
    def __init__(__self__, *,
                 states: Optional[Sequence['outputs.FeatureStateState']] = None):
        """
        :param Sequence['FeatureStateStateArgs'] states: (Output)
               Output only. The "running state" of the Feature in this Hub.
               Structure is documented below.
        """
        if states is not None:
            pulumi.set(__self__, "states", states)

    @_builtins.property
    @pulumi.getter
    def states(self) -> Optional[Sequence['outputs.FeatureStateState']]:
        """
        (Output)
        Output only. The "running state" of the Feature in this Hub.
        Structure is documented below.
        """
        return pulumi.get(self, "states")


@pulumi.output_type
class FeatureStateState(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "updateTime":
            suggest = "update_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FeatureStateState. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FeatureStateState.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FeatureStateState.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 code: Optional[_builtins.str] = None,
                 description: Optional[_builtins.str] = None,
                 update_time: Optional[_builtins.str] = None):
        """
        :param _builtins.str code: (Output)
               The high-level, machine-readable status of this Feature.
        :param _builtins.str description: (Output)
               A human-readable description of the current status.
        :param _builtins.str update_time: (Output)
               The time this status and any related Feature-specific details were updated. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z"
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)

    @_builtins.property
    @pulumi.getter
    def code(self) -> Optional[_builtins.str]:
        """
        (Output)
        The high-level, machine-readable status of this Feature.
        """
        return pulumi.get(self, "code")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        (Output)
        A human-readable description of the current status.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[_builtins.str]:
        """
        (Output)
        The time this status and any related Feature-specific details were updated. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z"
        """
        return pulumi.get(self, "update_time")


@pulumi.output_type
class FleetDefaultClusterConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "binaryAuthorizationConfig":
            suggest = "binary_authorization_config"
        elif key == "securityPostureConfig":
            suggest = "security_posture_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FleetDefaultClusterConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FleetDefaultClusterConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FleetDefaultClusterConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 binary_authorization_config: Optional['outputs.FleetDefaultClusterConfigBinaryAuthorizationConfig'] = None,
                 security_posture_config: Optional['outputs.FleetDefaultClusterConfigSecurityPostureConfig'] = None):
        """
        :param 'FleetDefaultClusterConfigBinaryAuthorizationConfigArgs' binary_authorization_config: Enable/Disable binary authorization features for the cluster.
               Structure is documented below.
        :param 'FleetDefaultClusterConfigSecurityPostureConfigArgs' security_posture_config: Enable/Disable Security Posture features for the cluster.
               Structure is documented below.
        """
        if binary_authorization_config is not None:
            pulumi.set(__self__, "binary_authorization_config", binary_authorization_config)
        if security_posture_config is not None:
            pulumi.set(__self__, "security_posture_config", security_posture_config)

    @_builtins.property
    @pulumi.getter(name="binaryAuthorizationConfig")
    def binary_authorization_config(self) -> Optional['outputs.FleetDefaultClusterConfigBinaryAuthorizationConfig']:
        """
        Enable/Disable binary authorization features for the cluster.
        Structure is documented below.
        """
        return pulumi.get(self, "binary_authorization_config")

    @_builtins.property
    @pulumi.getter(name="securityPostureConfig")
    def security_posture_config(self) -> Optional['outputs.FleetDefaultClusterConfigSecurityPostureConfig']:
        """
        Enable/Disable Security Posture features for the cluster.
        Structure is documented below.
        """
        return pulumi.get(self, "security_posture_config")


@pulumi.output_type
class FleetDefaultClusterConfigBinaryAuthorizationConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "evaluationMode":
            suggest = "evaluation_mode"
        elif key == "policyBindings":
            suggest = "policy_bindings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FleetDefaultClusterConfigBinaryAuthorizationConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FleetDefaultClusterConfigBinaryAuthorizationConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FleetDefaultClusterConfigBinaryAuthorizationConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 evaluation_mode: Optional[_builtins.str] = None,
                 policy_bindings: Optional[Sequence['outputs.FleetDefaultClusterConfigBinaryAuthorizationConfigPolicyBinding']] = None):
        """
        :param _builtins.str evaluation_mode: Mode of operation for binauthz policy evaluation.
               Possible values are: `DISABLED`, `POLICY_BINDINGS`.
        :param Sequence['FleetDefaultClusterConfigBinaryAuthorizationConfigPolicyBindingArgs'] policy_bindings: Binauthz policies that apply to this cluster.
               Structure is documented below.
        """
        if evaluation_mode is not None:
            pulumi.set(__self__, "evaluation_mode", evaluation_mode)
        if policy_bindings is not None:
            pulumi.set(__self__, "policy_bindings", policy_bindings)

    @_builtins.property
    @pulumi.getter(name="evaluationMode")
    def evaluation_mode(self) -> Optional[_builtins.str]:
        """
        Mode of operation for binauthz policy evaluation.
        Possible values are: `DISABLED`, `POLICY_BINDINGS`.
        """
        return pulumi.get(self, "evaluation_mode")

    @_builtins.property
    @pulumi.getter(name="policyBindings")
    def policy_bindings(self) -> Optional[Sequence['outputs.FleetDefaultClusterConfigBinaryAuthorizationConfigPolicyBinding']]:
        """
        Binauthz policies that apply to this cluster.
        Structure is documented below.
        """
        return pulumi.get(self, "policy_bindings")


@pulumi.output_type
class FleetDefaultClusterConfigBinaryAuthorizationConfigPolicyBinding(dict):
    def __init__(__self__, *,
                 name: Optional[_builtins.str] = None):
        """
        :param _builtins.str name: The relative resource name of the binauthz platform policy to audit. GKE
               platform policies have the following format:
               `projects/{project_number}/platforms/gke/policies/{policy_id}`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The relative resource name of the binauthz platform policy to audit. GKE
        platform policies have the following format:
        `projects/{project_number}/platforms/gke/policies/{policy_id}`.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class FleetDefaultClusterConfigSecurityPostureConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vulnerabilityMode":
            suggest = "vulnerability_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FleetDefaultClusterConfigSecurityPostureConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FleetDefaultClusterConfigSecurityPostureConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FleetDefaultClusterConfigSecurityPostureConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mode: Optional[_builtins.str] = None,
                 vulnerability_mode: Optional[_builtins.str] = None):
        """
        :param _builtins.str mode: Sets which mode to use for Security Posture features.
               Possible values are: `DISABLED`, `BASIC`, `ENTERPRISE`.
        :param _builtins.str vulnerability_mode: Sets which mode to use for vulnerability scanning.
               Possible values are: `VULNERABILITY_DISABLED`, `VULNERABILITY_BASIC`, `VULNERABILITY_ENTERPRISE`.
        """
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if vulnerability_mode is not None:
            pulumi.set(__self__, "vulnerability_mode", vulnerability_mode)

    @_builtins.property
    @pulumi.getter
    def mode(self) -> Optional[_builtins.str]:
        """
        Sets which mode to use for Security Posture features.
        Possible values are: `DISABLED`, `BASIC`, `ENTERPRISE`.
        """
        return pulumi.get(self, "mode")

    @_builtins.property
    @pulumi.getter(name="vulnerabilityMode")
    def vulnerability_mode(self) -> Optional[_builtins.str]:
        """
        Sets which mode to use for vulnerability scanning.
        Possible values are: `VULNERABILITY_DISABLED`, `VULNERABILITY_BASIC`, `VULNERABILITY_ENTERPRISE`.
        """
        return pulumi.get(self, "vulnerability_mode")


@pulumi.output_type
class FleetState(dict):
    def __init__(__self__, *,
                 code: Optional[_builtins.str] = None):
        """
        :param _builtins.str code: (Output)
               Describes the state of a Fleet resource.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)

    @_builtins.property
    @pulumi.getter
    def code(self) -> Optional[_builtins.str]:
        """
        (Output)
        Describes the state of a Fleet resource.
        """
        return pulumi.get(self, "code")


@pulumi.output_type
class MembershipAuthority(dict):
    def __init__(__self__, *,
                 issuer: _builtins.str):
        pulumi.set(__self__, "issuer", issuer)

    @_builtins.property
    @pulumi.getter
    def issuer(self) -> _builtins.str:
        return pulumi.get(self, "issuer")


@pulumi.output_type
class MembershipBindingState(dict):
    def __init__(__self__, *,
                 code: Optional[_builtins.str] = None):
        """
        :param _builtins.str code: (Output)
               Code describes the state of a MembershipBinding resource.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)

    @_builtins.property
    @pulumi.getter
    def code(self) -> Optional[_builtins.str]:
        """
        (Output)
        Code describes the state of a MembershipBinding resource.
        """
        return pulumi.get(self, "code")


@pulumi.output_type
class MembershipEndpoint(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "gkeCluster":
            suggest = "gke_cluster"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MembershipEndpoint. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MembershipEndpoint.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MembershipEndpoint.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 gke_cluster: Optional['outputs.MembershipEndpointGkeCluster'] = None):
        """
        :param 'MembershipEndpointGkeClusterArgs' gke_cluster: If this Membership is a Kubernetes API server hosted on GKE, this is a self link to its GCP resource.
               Structure is documented below.
        """
        if gke_cluster is not None:
            pulumi.set(__self__, "gke_cluster", gke_cluster)

    @_builtins.property
    @pulumi.getter(name="gkeCluster")
    def gke_cluster(self) -> Optional['outputs.MembershipEndpointGkeCluster']:
        """
        If this Membership is a Kubernetes API server hosted on GKE, this is a self link to its GCP resource.
        Structure is documented below.
        """
        return pulumi.get(self, "gke_cluster")


@pulumi.output_type
class MembershipEndpointGkeCluster(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceLink":
            suggest = "resource_link"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MembershipEndpointGkeCluster. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MembershipEndpointGkeCluster.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MembershipEndpointGkeCluster.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resource_link: _builtins.str):
        pulumi.set(__self__, "resource_link", resource_link)

    @_builtins.property
    @pulumi.getter(name="resourceLink")
    def resource_link(self) -> _builtins.str:
        return pulumi.get(self, "resource_link")


@pulumi.output_type
class MembershipIamBindingCondition(dict):
    def __init__(__self__, *,
                 expression: _builtins.str,
                 title: _builtins.str,
                 description: Optional[_builtins.str] = None):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "title", title)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @_builtins.property
    @pulumi.getter
    def expression(self) -> _builtins.str:
        return pulumi.get(self, "expression")

    @_builtins.property
    @pulumi.getter
    def title(self) -> _builtins.str:
        return pulumi.get(self, "title")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "description")


@pulumi.output_type
class MembershipIamMemberCondition(dict):
    def __init__(__self__, *,
                 expression: _builtins.str,
                 title: _builtins.str,
                 description: Optional[_builtins.str] = None):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "title", title)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @_builtins.property
    @pulumi.getter
    def expression(self) -> _builtins.str:
        return pulumi.get(self, "expression")

    @_builtins.property
    @pulumi.getter
    def title(self) -> _builtins.str:
        return pulumi.get(self, "title")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "description")


@pulumi.output_type
class MembershipRbacRoleBindingRole(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "predefinedRole":
            suggest = "predefined_role"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MembershipRbacRoleBindingRole. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MembershipRbacRoleBindingRole.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MembershipRbacRoleBindingRole.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 predefined_role: _builtins.str):
        """
        :param _builtins.str predefined_role: PredefinedRole is an ENUM representation of the default Kubernetes Roles
               Possible values are: `UNKNOWN`, `ADMIN`, `EDIT`, `VIEW`, `ANTHOS_SUPPORT`.
        """
        pulumi.set(__self__, "predefined_role", predefined_role)

    @_builtins.property
    @pulumi.getter(name="predefinedRole")
    def predefined_role(self) -> _builtins.str:
        """
        PredefinedRole is an ENUM representation of the default Kubernetes Roles
        Possible values are: `UNKNOWN`, `ADMIN`, `EDIT`, `VIEW`, `ANTHOS_SUPPORT`.
        """
        return pulumi.get(self, "predefined_role")


@pulumi.output_type
class MembershipRbacRoleBindingState(dict):
    def __init__(__self__, *,
                 code: Optional[_builtins.str] = None):
        """
        :param _builtins.str code: (Output)
               Code describes the state of a RBAC Role Binding resource.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)

    @_builtins.property
    @pulumi.getter
    def code(self) -> Optional[_builtins.str]:
        """
        (Output)
        Code describes the state of a RBAC Role Binding resource.
        """
        return pulumi.get(self, "code")


@pulumi.output_type
class NamespaceState(dict):
    def __init__(__self__, *,
                 code: Optional[_builtins.str] = None):
        """
        :param _builtins.str code: (Output)
               Code describes the state of a Namespace resource.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)

    @_builtins.property
    @pulumi.getter
    def code(self) -> Optional[_builtins.str]:
        """
        (Output)
        Code describes the state of a Namespace resource.
        """
        return pulumi.get(self, "code")


@pulumi.output_type
class ScopeIamBindingCondition(dict):
    def __init__(__self__, *,
                 expression: _builtins.str,
                 title: _builtins.str,
                 description: Optional[_builtins.str] = None):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "title", title)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @_builtins.property
    @pulumi.getter
    def expression(self) -> _builtins.str:
        return pulumi.get(self, "expression")

    @_builtins.property
    @pulumi.getter
    def title(self) -> _builtins.str:
        return pulumi.get(self, "title")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "description")


@pulumi.output_type
class ScopeIamMemberCondition(dict):
    def __init__(__self__, *,
                 expression: _builtins.str,
                 title: _builtins.str,
                 description: Optional[_builtins.str] = None):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "title", title)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @_builtins.property
    @pulumi.getter
    def expression(self) -> _builtins.str:
        return pulumi.get(self, "expression")

    @_builtins.property
    @pulumi.getter
    def title(self) -> _builtins.str:
        return pulumi.get(self, "title")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "description")


@pulumi.output_type
class ScopeRbacRoleBindingRole(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customRole":
            suggest = "custom_role"
        elif key == "predefinedRole":
            suggest = "predefined_role"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScopeRbacRoleBindingRole. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScopeRbacRoleBindingRole.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScopeRbacRoleBindingRole.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_role: Optional[_builtins.str] = None,
                 predefined_role: Optional[_builtins.str] = None):
        """
        :param _builtins.str custom_role: CustomRole is the custom Kubernetes ClusterRole to be used. The custom role format must be allowlisted in the rbacrolebindingactuation feature and RFC 1123 compliant.
        :param _builtins.str predefined_role: PredefinedRole is an ENUM representation of the default Kubernetes Roles
               Possible values are: `UNKNOWN`, `ADMIN`, `EDIT`, `VIEW`.
        """
        if custom_role is not None:
            pulumi.set(__self__, "custom_role", custom_role)
        if predefined_role is not None:
            pulumi.set(__self__, "predefined_role", predefined_role)

    @_builtins.property
    @pulumi.getter(name="customRole")
    def custom_role(self) -> Optional[_builtins.str]:
        """
        CustomRole is the custom Kubernetes ClusterRole to be used. The custom role format must be allowlisted in the rbacrolebindingactuation feature and RFC 1123 compliant.
        """
        return pulumi.get(self, "custom_role")

    @_builtins.property
    @pulumi.getter(name="predefinedRole")
    def predefined_role(self) -> Optional[_builtins.str]:
        """
        PredefinedRole is an ENUM representation of the default Kubernetes Roles
        Possible values are: `UNKNOWN`, `ADMIN`, `EDIT`, `VIEW`.
        """
        return pulumi.get(self, "predefined_role")


@pulumi.output_type
class ScopeRbacRoleBindingState(dict):
    def __init__(__self__, *,
                 code: Optional[_builtins.str] = None):
        """
        :param _builtins.str code: (Output)
               Code describes the state of a RBAC Role Binding resource.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)

    @_builtins.property
    @pulumi.getter
    def code(self) -> Optional[_builtins.str]:
        """
        (Output)
        Code describes the state of a RBAC Role Binding resource.
        """
        return pulumi.get(self, "code")


@pulumi.output_type
class ScopeState(dict):
    def __init__(__self__, *,
                 code: Optional[_builtins.str] = None):
        """
        :param _builtins.str code: (Output)
               Code describes the state of a Scope resource.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)

    @_builtins.property
    @pulumi.getter
    def code(self) -> Optional[_builtins.str]:
        """
        (Output)
        Code describes the state of a Scope resource.
        """
        return pulumi.get(self, "code")


@pulumi.output_type
class GetFeatureFleetDefaultMemberConfigResult(dict):
    def __init__(__self__, *,
                 configmanagements: Sequence['outputs.GetFeatureFleetDefaultMemberConfigConfigmanagementResult'],
                 meshes: Sequence['outputs.GetFeatureFleetDefaultMemberConfigMeshResult'],
                 policycontrollers: Sequence['outputs.GetFeatureFleetDefaultMemberConfigPolicycontrollerResult']):
        """
        :param Sequence['GetFeatureFleetDefaultMemberConfigConfigmanagementArgs'] configmanagements: Config Management spec
        :param Sequence['GetFeatureFleetDefaultMemberConfigMeshArgs'] meshes: Service Mesh spec
        :param Sequence['GetFeatureFleetDefaultMemberConfigPolicycontrollerArgs'] policycontrollers: Policy Controller spec
        """
        pulumi.set(__self__, "configmanagements", configmanagements)
        pulumi.set(__self__, "meshes", meshes)
        pulumi.set(__self__, "policycontrollers", policycontrollers)

    @_builtins.property
    @pulumi.getter
    def configmanagements(self) -> Sequence['outputs.GetFeatureFleetDefaultMemberConfigConfigmanagementResult']:
        """
        Config Management spec
        """
        return pulumi.get(self, "configmanagements")

    @_builtins.property
    @pulumi.getter
    def meshes(self) -> Sequence['outputs.GetFeatureFleetDefaultMemberConfigMeshResult']:
        """
        Service Mesh spec
        """
        return pulumi.get(self, "meshes")

    @_builtins.property
    @pulumi.getter
    def policycontrollers(self) -> Sequence['outputs.GetFeatureFleetDefaultMemberConfigPolicycontrollerResult']:
        """
        Policy Controller spec
        """
        return pulumi.get(self, "policycontrollers")


@pulumi.output_type
class GetFeatureFleetDefaultMemberConfigConfigmanagementResult(dict):
    def __init__(__self__, *,
                 config_syncs: Sequence['outputs.GetFeatureFleetDefaultMemberConfigConfigmanagementConfigSyncResult'],
                 management: _builtins.str,
                 version: _builtins.str):
        """
        :param Sequence['GetFeatureFleetDefaultMemberConfigConfigmanagementConfigSyncArgs'] config_syncs: ConfigSync configuration for the cluster
        :param _builtins.str management: Set this field to MANAGEMENT_AUTOMATIC to enable Config Sync auto-upgrades, and set this field to MANAGEMENT_MANUAL or MANAGEMENT_UNSPECIFIED to disable Config Sync auto-upgrades. Possible values: ["MANAGEMENT_UNSPECIFIED", "MANAGEMENT_AUTOMATIC", "MANAGEMENT_MANUAL"]
        :param _builtins.str version: Version of Config Sync installed
        """
        pulumi.set(__self__, "config_syncs", config_syncs)
        pulumi.set(__self__, "management", management)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="configSyncs")
    def config_syncs(self) -> Sequence['outputs.GetFeatureFleetDefaultMemberConfigConfigmanagementConfigSyncResult']:
        """
        ConfigSync configuration for the cluster
        """
        return pulumi.get(self, "config_syncs")

    @_builtins.property
    @pulumi.getter
    def management(self) -> _builtins.str:
        """
        Set this field to MANAGEMENT_AUTOMATIC to enable Config Sync auto-upgrades, and set this field to MANAGEMENT_MANUAL or MANAGEMENT_UNSPECIFIED to disable Config Sync auto-upgrades. Possible values: ["MANAGEMENT_UNSPECIFIED", "MANAGEMENT_AUTOMATIC", "MANAGEMENT_MANUAL"]
        """
        return pulumi.get(self, "management")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        Version of Config Sync installed
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetFeatureFleetDefaultMemberConfigConfigmanagementConfigSyncResult(dict):
    def __init__(__self__, *,
                 enabled: _builtins.bool,
                 gits: Sequence['outputs.GetFeatureFleetDefaultMemberConfigConfigmanagementConfigSyncGitResult'],
                 metrics_gcp_service_account_email: _builtins.str,
                 ocis: Sequence['outputs.GetFeatureFleetDefaultMemberConfigConfigmanagementConfigSyncOciResult'],
                 prevent_drift: _builtins.bool,
                 source_format: _builtins.str):
        """
        :param _builtins.bool enabled: Enables the installation of ConfigSync. If set to true, ConfigSync resources will be created and the other ConfigSync fields will be applied if exist. If set to false, all other ConfigSync fields will be ignored, ConfigSync resources will be deleted. If omitted, ConfigSync resources will be managed depends on the presence of the git or oci field.
        :param Sequence['GetFeatureFleetDefaultMemberConfigConfigmanagementConfigSyncGitArgs'] gits: Git repo configuration for the cluster
        :param _builtins.str metrics_gcp_service_account_email: The Email of the Google Cloud Service Account (GSA) used for exporting Config Sync metrics to Cloud Monitoring. The GSA should have the Monitoring Metric Writer(roles/monitoring.metricWriter) IAM role. The Kubernetes ServiceAccount 'default' in the namespace 'config-management-monitoring' should be bound to the GSA.
        :param Sequence['GetFeatureFleetDefaultMemberConfigConfigmanagementConfigSyncOciArgs'] ocis: OCI repo configuration for the cluster
        :param _builtins.bool prevent_drift: Set to true to enable the Config Sync admission webhook to prevent drifts. If set to 'false', disables the Config Sync admission webhook and does not prevent drifts.
        :param _builtins.str source_format: Specifies whether the Config Sync Repo is in hierarchical or unstructured mode
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "gits", gits)
        pulumi.set(__self__, "metrics_gcp_service_account_email", metrics_gcp_service_account_email)
        pulumi.set(__self__, "ocis", ocis)
        pulumi.set(__self__, "prevent_drift", prevent_drift)
        pulumi.set(__self__, "source_format", source_format)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> _builtins.bool:
        """
        Enables the installation of ConfigSync. If set to true, ConfigSync resources will be created and the other ConfigSync fields will be applied if exist. If set to false, all other ConfigSync fields will be ignored, ConfigSync resources will be deleted. If omitted, ConfigSync resources will be managed depends on the presence of the git or oci field.
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter
    def gits(self) -> Sequence['outputs.GetFeatureFleetDefaultMemberConfigConfigmanagementConfigSyncGitResult']:
        """
        Git repo configuration for the cluster
        """
        return pulumi.get(self, "gits")

    @_builtins.property
    @pulumi.getter(name="metricsGcpServiceAccountEmail")
    def metrics_gcp_service_account_email(self) -> _builtins.str:
        """
        The Email of the Google Cloud Service Account (GSA) used for exporting Config Sync metrics to Cloud Monitoring. The GSA should have the Monitoring Metric Writer(roles/monitoring.metricWriter) IAM role. The Kubernetes ServiceAccount 'default' in the namespace 'config-management-monitoring' should be bound to the GSA.
        """
        return pulumi.get(self, "metrics_gcp_service_account_email")

    @_builtins.property
    @pulumi.getter
    def ocis(self) -> Sequence['outputs.GetFeatureFleetDefaultMemberConfigConfigmanagementConfigSyncOciResult']:
        """
        OCI repo configuration for the cluster
        """
        return pulumi.get(self, "ocis")

    @_builtins.property
    @pulumi.getter(name="preventDrift")
    def prevent_drift(self) -> _builtins.bool:
        """
        Set to true to enable the Config Sync admission webhook to prevent drifts. If set to 'false', disables the Config Sync admission webhook and does not prevent drifts.
        """
        return pulumi.get(self, "prevent_drift")

    @_builtins.property
    @pulumi.getter(name="sourceFormat")
    def source_format(self) -> _builtins.str:
        """
        Specifies whether the Config Sync Repo is in hierarchical or unstructured mode
        """
        return pulumi.get(self, "source_format")


@pulumi.output_type
class GetFeatureFleetDefaultMemberConfigConfigmanagementConfigSyncGitResult(dict):
    def __init__(__self__, *,
                 gcp_service_account_email: _builtins.str,
                 https_proxy: _builtins.str,
                 policy_dir: _builtins.str,
                 secret_type: _builtins.str,
                 sync_branch: _builtins.str,
                 sync_repo: _builtins.str,
                 sync_rev: _builtins.str,
                 sync_wait_secs: _builtins.str):
        """
        :param _builtins.str gcp_service_account_email: The Google Cloud Service Account Email used for auth when secretType is gcpServiceAccount
        :param _builtins.str https_proxy: URL for the HTTPS Proxy to be used when communicating with the Git repo
        :param _builtins.str policy_dir: The path within the Git repository that represents the top level of the repo to sync
        :param _builtins.str secret_type: Type of secret configured for access to the Git repo
        :param _builtins.str sync_branch: The branch of the repository to sync from. Default: master
        :param _builtins.str sync_repo: The URL of the Git repository to use as the source of truth
        :param _builtins.str sync_rev: Git revision (tag or hash) to check out. Default HEAD
        :param _builtins.str sync_wait_secs: Period in seconds between consecutive syncs. Default: 15
        """
        pulumi.set(__self__, "gcp_service_account_email", gcp_service_account_email)
        pulumi.set(__self__, "https_proxy", https_proxy)
        pulumi.set(__self__, "policy_dir", policy_dir)
        pulumi.set(__self__, "secret_type", secret_type)
        pulumi.set(__self__, "sync_branch", sync_branch)
        pulumi.set(__self__, "sync_repo", sync_repo)
        pulumi.set(__self__, "sync_rev", sync_rev)
        pulumi.set(__self__, "sync_wait_secs", sync_wait_secs)

    @_builtins.property
    @pulumi.getter(name="gcpServiceAccountEmail")
    def gcp_service_account_email(self) -> _builtins.str:
        """
        The Google Cloud Service Account Email used for auth when secretType is gcpServiceAccount
        """
        return pulumi.get(self, "gcp_service_account_email")

    @_builtins.property
    @pulumi.getter(name="httpsProxy")
    def https_proxy(self) -> _builtins.str:
        """
        URL for the HTTPS Proxy to be used when communicating with the Git repo
        """
        return pulumi.get(self, "https_proxy")

    @_builtins.property
    @pulumi.getter(name="policyDir")
    def policy_dir(self) -> _builtins.str:
        """
        The path within the Git repository that represents the top level of the repo to sync
        """
        return pulumi.get(self, "policy_dir")

    @_builtins.property
    @pulumi.getter(name="secretType")
    def secret_type(self) -> _builtins.str:
        """
        Type of secret configured for access to the Git repo
        """
        return pulumi.get(self, "secret_type")

    @_builtins.property
    @pulumi.getter(name="syncBranch")
    def sync_branch(self) -> _builtins.str:
        """
        The branch of the repository to sync from. Default: master
        """
        return pulumi.get(self, "sync_branch")

    @_builtins.property
    @pulumi.getter(name="syncRepo")
    def sync_repo(self) -> _builtins.str:
        """
        The URL of the Git repository to use as the source of truth
        """
        return pulumi.get(self, "sync_repo")

    @_builtins.property
    @pulumi.getter(name="syncRev")
    def sync_rev(self) -> _builtins.str:
        """
        Git revision (tag or hash) to check out. Default HEAD
        """
        return pulumi.get(self, "sync_rev")

    @_builtins.property
    @pulumi.getter(name="syncWaitSecs")
    def sync_wait_secs(self) -> _builtins.str:
        """
        Period in seconds between consecutive syncs. Default: 15
        """
        return pulumi.get(self, "sync_wait_secs")


@pulumi.output_type
class GetFeatureFleetDefaultMemberConfigConfigmanagementConfigSyncOciResult(dict):
    def __init__(__self__, *,
                 gcp_service_account_email: _builtins.str,
                 policy_dir: _builtins.str,
                 secret_type: _builtins.str,
                 sync_repo: _builtins.str,
                 sync_wait_secs: _builtins.str,
                 version: _builtins.str):
        """
        :param _builtins.str gcp_service_account_email: The Google Cloud Service Account Email used for auth when secretType is gcpServiceAccount
        :param _builtins.str policy_dir: The absolute path of the directory that contains the local resources. Default: the root directory of the image
        :param _builtins.str secret_type: Type of secret configured for access to the Git repo
        :param _builtins.str sync_repo: The OCI image repository URL for the package to sync from
        :param _builtins.str sync_wait_secs: Period in seconds between consecutive syncs. Default: 15
        :param _builtins.str version: Version of Config Sync installed
        """
        pulumi.set(__self__, "gcp_service_account_email", gcp_service_account_email)
        pulumi.set(__self__, "policy_dir", policy_dir)
        pulumi.set(__self__, "secret_type", secret_type)
        pulumi.set(__self__, "sync_repo", sync_repo)
        pulumi.set(__self__, "sync_wait_secs", sync_wait_secs)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="gcpServiceAccountEmail")
    def gcp_service_account_email(self) -> _builtins.str:
        """
        The Google Cloud Service Account Email used for auth when secretType is gcpServiceAccount
        """
        return pulumi.get(self, "gcp_service_account_email")

    @_builtins.property
    @pulumi.getter(name="policyDir")
    def policy_dir(self) -> _builtins.str:
        """
        The absolute path of the directory that contains the local resources. Default: the root directory of the image
        """
        return pulumi.get(self, "policy_dir")

    @_builtins.property
    @pulumi.getter(name="secretType")
    def secret_type(self) -> _builtins.str:
        """
        Type of secret configured for access to the Git repo
        """
        return pulumi.get(self, "secret_type")

    @_builtins.property
    @pulumi.getter(name="syncRepo")
    def sync_repo(self) -> _builtins.str:
        """
        The OCI image repository URL for the package to sync from
        """
        return pulumi.get(self, "sync_repo")

    @_builtins.property
    @pulumi.getter(name="syncWaitSecs")
    def sync_wait_secs(self) -> _builtins.str:
        """
        Period in seconds between consecutive syncs. Default: 15
        """
        return pulumi.get(self, "sync_wait_secs")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        Version of Config Sync installed
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetFeatureFleetDefaultMemberConfigMeshResult(dict):
    def __init__(__self__, *,
                 management: _builtins.str):
        """
        :param _builtins.str management: Whether to automatically manage Service Mesh Possible values: ["MANAGEMENT_UNSPECIFIED", "MANAGEMENT_AUTOMATIC", "MANAGEMENT_MANUAL"]
        """
        pulumi.set(__self__, "management", management)

    @_builtins.property
    @pulumi.getter
    def management(self) -> _builtins.str:
        """
        Whether to automatically manage Service Mesh Possible values: ["MANAGEMENT_UNSPECIFIED", "MANAGEMENT_AUTOMATIC", "MANAGEMENT_MANUAL"]
        """
        return pulumi.get(self, "management")


@pulumi.output_type
class GetFeatureFleetDefaultMemberConfigPolicycontrollerResult(dict):
    def __init__(__self__, *,
                 policy_controller_hub_configs: Sequence['outputs.GetFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigResult'],
                 version: _builtins.str):
        """
        :param Sequence['GetFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigArgs'] policy_controller_hub_configs: Configuration of Policy Controller
        :param _builtins.str version: Configures the version of Policy Controller
        """
        pulumi.set(__self__, "policy_controller_hub_configs", policy_controller_hub_configs)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="policyControllerHubConfigs")
    def policy_controller_hub_configs(self) -> Sequence['outputs.GetFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigResult']:
        """
        Configuration of Policy Controller
        """
        return pulumi.get(self, "policy_controller_hub_configs")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        Configures the version of Policy Controller
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigResult(dict):
    def __init__(__self__, *,
                 audit_interval_seconds: _builtins.int,
                 constraint_violation_limit: _builtins.int,
                 deployment_configs: Sequence['outputs.GetFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigResult'],
                 exemptable_namespaces: Sequence[_builtins.str],
                 install_spec: _builtins.str,
                 log_denies_enabled: _builtins.bool,
                 monitorings: Sequence['outputs.GetFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigMonitoringResult'],
                 mutation_enabled: _builtins.bool,
                 policy_contents: Sequence['outputs.GetFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentResult'],
                 referential_rules_enabled: _builtins.bool):
        """
        :param _builtins.int audit_interval_seconds: Interval for Policy Controller Audit scans (in seconds). When set to 0, this disables audit functionality altogether.
        :param _builtins.int constraint_violation_limit: The maximum number of audit violations to be stored in a constraint. If not set, the internal default of 20 will be used.
        :param Sequence['GetFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigArgs'] deployment_configs: Map of deployment configs to deployments ("admission", "audit", "mutation").
        :param Sequence[_builtins.str] exemptable_namespaces: The set of namespaces that are excluded from Policy Controller checks. Namespaces do not need to currently exist on the cluster.
        :param _builtins.str install_spec: Configures the mode of the Policy Controller installation Possible values: ["INSTALL_SPEC_UNSPECIFIED", "INSTALL_SPEC_NOT_INSTALLED", "INSTALL_SPEC_ENABLED", "INSTALL_SPEC_SUSPENDED", "INSTALL_SPEC_DETACHED"]
        :param _builtins.bool log_denies_enabled: Logs all denies and dry run failures.
        :param Sequence['GetFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigMonitoringArgs'] monitorings: Monitoring specifies the configuration of monitoring Policy Controller.
        :param _builtins.bool mutation_enabled: Enables the ability to mutate resources using Policy Controller.
        :param Sequence['GetFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentArgs'] policy_contents: Specifies the desired policy content on the cluster.
        :param _builtins.bool referential_rules_enabled: Enables the ability to use Constraint Templates that reference to objects other than the object currently being evaluated.
        """
        pulumi.set(__self__, "audit_interval_seconds", audit_interval_seconds)
        pulumi.set(__self__, "constraint_violation_limit", constraint_violation_limit)
        pulumi.set(__self__, "deployment_configs", deployment_configs)
        pulumi.set(__self__, "exemptable_namespaces", exemptable_namespaces)
        pulumi.set(__self__, "install_spec", install_spec)
        pulumi.set(__self__, "log_denies_enabled", log_denies_enabled)
        pulumi.set(__self__, "monitorings", monitorings)
        pulumi.set(__self__, "mutation_enabled", mutation_enabled)
        pulumi.set(__self__, "policy_contents", policy_contents)
        pulumi.set(__self__, "referential_rules_enabled", referential_rules_enabled)

    @_builtins.property
    @pulumi.getter(name="auditIntervalSeconds")
    def audit_interval_seconds(self) -> _builtins.int:
        """
        Interval for Policy Controller Audit scans (in seconds). When set to 0, this disables audit functionality altogether.
        """
        return pulumi.get(self, "audit_interval_seconds")

    @_builtins.property
    @pulumi.getter(name="constraintViolationLimit")
    def constraint_violation_limit(self) -> _builtins.int:
        """
        The maximum number of audit violations to be stored in a constraint. If not set, the internal default of 20 will be used.
        """
        return pulumi.get(self, "constraint_violation_limit")

    @_builtins.property
    @pulumi.getter(name="deploymentConfigs")
    def deployment_configs(self) -> Sequence['outputs.GetFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigResult']:
        """
        Map of deployment configs to deployments ("admission", "audit", "mutation").
        """
        return pulumi.get(self, "deployment_configs")

    @_builtins.property
    @pulumi.getter(name="exemptableNamespaces")
    def exemptable_namespaces(self) -> Sequence[_builtins.str]:
        """
        The set of namespaces that are excluded from Policy Controller checks. Namespaces do not need to currently exist on the cluster.
        """
        return pulumi.get(self, "exemptable_namespaces")

    @_builtins.property
    @pulumi.getter(name="installSpec")
    def install_spec(self) -> _builtins.str:
        """
        Configures the mode of the Policy Controller installation Possible values: ["INSTALL_SPEC_UNSPECIFIED", "INSTALL_SPEC_NOT_INSTALLED", "INSTALL_SPEC_ENABLED", "INSTALL_SPEC_SUSPENDED", "INSTALL_SPEC_DETACHED"]
        """
        return pulumi.get(self, "install_spec")

    @_builtins.property
    @pulumi.getter(name="logDeniesEnabled")
    def log_denies_enabled(self) -> _builtins.bool:
        """
        Logs all denies and dry run failures.
        """
        return pulumi.get(self, "log_denies_enabled")

    @_builtins.property
    @pulumi.getter
    def monitorings(self) -> Sequence['outputs.GetFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigMonitoringResult']:
        """
        Monitoring specifies the configuration of monitoring Policy Controller.
        """
        return pulumi.get(self, "monitorings")

    @_builtins.property
    @pulumi.getter(name="mutationEnabled")
    def mutation_enabled(self) -> _builtins.bool:
        """
        Enables the ability to mutate resources using Policy Controller.
        """
        return pulumi.get(self, "mutation_enabled")

    @_builtins.property
    @pulumi.getter(name="policyContents")
    def policy_contents(self) -> Sequence['outputs.GetFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentResult']:
        """
        Specifies the desired policy content on the cluster.
        """
        return pulumi.get(self, "policy_contents")

    @_builtins.property
    @pulumi.getter(name="referentialRulesEnabled")
    def referential_rules_enabled(self) -> _builtins.bool:
        """
        Enables the ability to use Constraint Templates that reference to objects other than the object currently being evaluated.
        """
        return pulumi.get(self, "referential_rules_enabled")


@pulumi.output_type
class GetFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigResult(dict):
    def __init__(__self__, *,
                 component: _builtins.str,
                 container_resources: Sequence['outputs.GetFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigContainerResourceResult'],
                 pod_affinity: _builtins.str,
                 pod_tolerations: Sequence['outputs.GetFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigPodTolerationResult'],
                 replica_count: _builtins.int):
        """
        :param Sequence['GetFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigContainerResourceArgs'] container_resources: Container resource requirements.
        :param _builtins.str pod_affinity: Pod affinity configuration. Possible values: ["AFFINITY_UNSPECIFIED", "NO_AFFINITY", "ANTI_AFFINITY"]
        :param Sequence['GetFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigPodTolerationArgs'] pod_tolerations: Pod tolerations of node taints.
        :param _builtins.int replica_count: Pod replica count.
        """
        pulumi.set(__self__, "component", component)
        pulumi.set(__self__, "container_resources", container_resources)
        pulumi.set(__self__, "pod_affinity", pod_affinity)
        pulumi.set(__self__, "pod_tolerations", pod_tolerations)
        pulumi.set(__self__, "replica_count", replica_count)

    @_builtins.property
    @pulumi.getter
    def component(self) -> _builtins.str:
        return pulumi.get(self, "component")

    @_builtins.property
    @pulumi.getter(name="containerResources")
    def container_resources(self) -> Sequence['outputs.GetFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigContainerResourceResult']:
        """
        Container resource requirements.
        """
        return pulumi.get(self, "container_resources")

    @_builtins.property
    @pulumi.getter(name="podAffinity")
    def pod_affinity(self) -> _builtins.str:
        """
        Pod affinity configuration. Possible values: ["AFFINITY_UNSPECIFIED", "NO_AFFINITY", "ANTI_AFFINITY"]
        """
        return pulumi.get(self, "pod_affinity")

    @_builtins.property
    @pulumi.getter(name="podTolerations")
    def pod_tolerations(self) -> Sequence['outputs.GetFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigPodTolerationResult']:
        """
        Pod tolerations of node taints.
        """
        return pulumi.get(self, "pod_tolerations")

    @_builtins.property
    @pulumi.getter(name="replicaCount")
    def replica_count(self) -> _builtins.int:
        """
        Pod replica count.
        """
        return pulumi.get(self, "replica_count")


@pulumi.output_type
class GetFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigContainerResourceResult(dict):
    def __init__(__self__, *,
                 limits: Sequence['outputs.GetFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigContainerResourceLimitResult'],
                 requests: Sequence['outputs.GetFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigContainerResourceRequestResult']):
        """
        :param Sequence['GetFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigContainerResourceLimitArgs'] limits: Limits describes the maximum amount of compute resources allowed for use by the running container.
        :param Sequence['GetFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigContainerResourceRequestArgs'] requests: Requests describes the amount of compute resources reserved for the container by the kube-scheduler.
        """
        pulumi.set(__self__, "limits", limits)
        pulumi.set(__self__, "requests", requests)

    @_builtins.property
    @pulumi.getter
    def limits(self) -> Sequence['outputs.GetFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigContainerResourceLimitResult']:
        """
        Limits describes the maximum amount of compute resources allowed for use by the running container.
        """
        return pulumi.get(self, "limits")

    @_builtins.property
    @pulumi.getter
    def requests(self) -> Sequence['outputs.GetFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigContainerResourceRequestResult']:
        """
        Requests describes the amount of compute resources reserved for the container by the kube-scheduler.
        """
        return pulumi.get(self, "requests")


@pulumi.output_type
class GetFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigContainerResourceLimitResult(dict):
    def __init__(__self__, *,
                 cpu: _builtins.str,
                 memory: _builtins.str):
        """
        :param _builtins.str cpu: CPU requirement expressed in Kubernetes resource units.
        :param _builtins.str memory: Memory requirement expressed in Kubernetes resource units.
        """
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "memory", memory)

    @_builtins.property
    @pulumi.getter
    def cpu(self) -> _builtins.str:
        """
        CPU requirement expressed in Kubernetes resource units.
        """
        return pulumi.get(self, "cpu")

    @_builtins.property
    @pulumi.getter
    def memory(self) -> _builtins.str:
        """
        Memory requirement expressed in Kubernetes resource units.
        """
        return pulumi.get(self, "memory")


@pulumi.output_type
class GetFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigContainerResourceRequestResult(dict):
    def __init__(__self__, *,
                 cpu: _builtins.str,
                 memory: _builtins.str):
        """
        :param _builtins.str cpu: CPU requirement expressed in Kubernetes resource units.
        :param _builtins.str memory: Memory requirement expressed in Kubernetes resource units.
        """
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "memory", memory)

    @_builtins.property
    @pulumi.getter
    def cpu(self) -> _builtins.str:
        """
        CPU requirement expressed in Kubernetes resource units.
        """
        return pulumi.get(self, "cpu")

    @_builtins.property
    @pulumi.getter
    def memory(self) -> _builtins.str:
        """
        Memory requirement expressed in Kubernetes resource units.
        """
        return pulumi.get(self, "memory")


@pulumi.output_type
class GetFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigDeploymentConfigPodTolerationResult(dict):
    def __init__(__self__, *,
                 effect: _builtins.str,
                 key: _builtins.str,
                 operator: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str effect: Matches a taint effect.
        :param _builtins.str key: Matches a taint key (not necessarily unique).
        :param _builtins.str operator: Matches a taint operator.
        :param _builtins.str value: Matches a taint value.
        """
        pulumi.set(__self__, "effect", effect)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def effect(self) -> _builtins.str:
        """
        Matches a taint effect.
        """
        return pulumi.get(self, "effect")

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Matches a taint key (not necessarily unique).
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def operator(self) -> _builtins.str:
        """
        Matches a taint operator.
        """
        return pulumi.get(self, "operator")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Matches a taint value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigMonitoringResult(dict):
    def __init__(__self__, *,
                 backends: Sequence[_builtins.str]):
        """
        :param Sequence[_builtins.str] backends: Specifies the list of backends Policy Controller will export to. An empty list would effectively disable metrics export. Possible values: ["MONITORING_BACKEND_UNSPECIFIED", "PROMETHEUS", "CLOUD_MONITORING"]
        """
        pulumi.set(__self__, "backends", backends)

    @_builtins.property
    @pulumi.getter
    def backends(self) -> Sequence[_builtins.str]:
        """
        Specifies the list of backends Policy Controller will export to. An empty list would effectively disable metrics export. Possible values: ["MONITORING_BACKEND_UNSPECIFIED", "PROMETHEUS", "CLOUD_MONITORING"]
        """
        return pulumi.get(self, "backends")


@pulumi.output_type
class GetFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentResult(dict):
    def __init__(__self__, *,
                 bundles: Sequence['outputs.GetFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentBundleResult'],
                 template_libraries: Sequence['outputs.GetFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentTemplateLibraryResult']):
        """
        :param Sequence['GetFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentBundleArgs'] bundles: Configures which bundles to install and their corresponding install specs.
        :param Sequence['GetFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentTemplateLibraryArgs'] template_libraries: Configures the installation of the Template Library.
        """
        pulumi.set(__self__, "bundles", bundles)
        pulumi.set(__self__, "template_libraries", template_libraries)

    @_builtins.property
    @pulumi.getter
    def bundles(self) -> Sequence['outputs.GetFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentBundleResult']:
        """
        Configures which bundles to install and their corresponding install specs.
        """
        return pulumi.get(self, "bundles")

    @_builtins.property
    @pulumi.getter(name="templateLibraries")
    def template_libraries(self) -> Sequence['outputs.GetFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentTemplateLibraryResult']:
        """
        Configures the installation of the Template Library.
        """
        return pulumi.get(self, "template_libraries")


@pulumi.output_type
class GetFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentBundleResult(dict):
    def __init__(__self__, *,
                 bundle: _builtins.str,
                 exempted_namespaces: Sequence[_builtins.str]):
        """
        :param Sequence[_builtins.str] exempted_namespaces: The set of namespaces to be exempted from the bundle.
        """
        pulumi.set(__self__, "bundle", bundle)
        pulumi.set(__self__, "exempted_namespaces", exempted_namespaces)

    @_builtins.property
    @pulumi.getter
    def bundle(self) -> _builtins.str:
        return pulumi.get(self, "bundle")

    @_builtins.property
    @pulumi.getter(name="exemptedNamespaces")
    def exempted_namespaces(self) -> Sequence[_builtins.str]:
        """
        The set of namespaces to be exempted from the bundle.
        """
        return pulumi.get(self, "exempted_namespaces")


@pulumi.output_type
class GetFeatureFleetDefaultMemberConfigPolicycontrollerPolicyControllerHubConfigPolicyContentTemplateLibraryResult(dict):
    def __init__(__self__, *,
                 installation: _builtins.str):
        """
        :param _builtins.str installation: Configures the manner in which the template library is installed on the cluster. Possible values: ["INSTALLATION_UNSPECIFIED", "NOT_INSTALLED", "ALL"]
        """
        pulumi.set(__self__, "installation", installation)

    @_builtins.property
    @pulumi.getter
    def installation(self) -> _builtins.str:
        """
        Configures the manner in which the template library is installed on the cluster. Possible values: ["INSTALLATION_UNSPECIFIED", "NOT_INSTALLED", "ALL"]
        """
        return pulumi.get(self, "installation")


@pulumi.output_type
class GetFeatureResourceStateResult(dict):
    def __init__(__self__, *,
                 has_resources: _builtins.bool,
                 state: _builtins.str):
        """
        :param _builtins.bool has_resources: Whether this Feature has outstanding resources that need to be cleaned up before it can be disabled.
        :param _builtins.str state: The current state of the Feature resource in the Hub API.
        """
        pulumi.set(__self__, "has_resources", has_resources)
        pulumi.set(__self__, "state", state)

    @_builtins.property
    @pulumi.getter(name="hasResources")
    def has_resources(self) -> _builtins.bool:
        """
        Whether this Feature has outstanding resources that need to be cleaned up before it can be disabled.
        """
        return pulumi.get(self, "has_resources")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The current state of the Feature resource in the Hub API.
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class GetFeatureSpecResult(dict):
    def __init__(__self__, *,
                 clusterupgrades: Sequence['outputs.GetFeatureSpecClusterupgradeResult'],
                 fleetobservabilities: Sequence['outputs.GetFeatureSpecFleetobservabilityResult'],
                 multiclusteringresses: Sequence['outputs.GetFeatureSpecMulticlusteringressResult'],
                 rbacrolebindingactuations: Sequence['outputs.GetFeatureSpecRbacrolebindingactuationResult']):
        """
        :param Sequence['GetFeatureSpecClusterupgradeArgs'] clusterupgrades: Clusterupgrade feature spec.
        :param Sequence['GetFeatureSpecFleetobservabilityArgs'] fleetobservabilities: Fleet Observability feature spec.
        :param Sequence['GetFeatureSpecMulticlusteringressArgs'] multiclusteringresses: Multicluster Ingress-specific spec.
        :param Sequence['GetFeatureSpecRbacrolebindingactuationArgs'] rbacrolebindingactuations: RBACRolebinding Actuation feature spec.
        """
        pulumi.set(__self__, "clusterupgrades", clusterupgrades)
        pulumi.set(__self__, "fleetobservabilities", fleetobservabilities)
        pulumi.set(__self__, "multiclusteringresses", multiclusteringresses)
        pulumi.set(__self__, "rbacrolebindingactuations", rbacrolebindingactuations)

    @_builtins.property
    @pulumi.getter
    def clusterupgrades(self) -> Sequence['outputs.GetFeatureSpecClusterupgradeResult']:
        """
        Clusterupgrade feature spec.
        """
        return pulumi.get(self, "clusterupgrades")

    @_builtins.property
    @pulumi.getter
    def fleetobservabilities(self) -> Sequence['outputs.GetFeatureSpecFleetobservabilityResult']:
        """
        Fleet Observability feature spec.
        """
        return pulumi.get(self, "fleetobservabilities")

    @_builtins.property
    @pulumi.getter
    def multiclusteringresses(self) -> Sequence['outputs.GetFeatureSpecMulticlusteringressResult']:
        """
        Multicluster Ingress-specific spec.
        """
        return pulumi.get(self, "multiclusteringresses")

    @_builtins.property
    @pulumi.getter
    def rbacrolebindingactuations(self) -> Sequence['outputs.GetFeatureSpecRbacrolebindingactuationResult']:
        """
        RBACRolebinding Actuation feature spec.
        """
        return pulumi.get(self, "rbacrolebindingactuations")


@pulumi.output_type
class GetFeatureSpecClusterupgradeResult(dict):
    def __init__(__self__, *,
                 gke_upgrade_overrides: Sequence['outputs.GetFeatureSpecClusterupgradeGkeUpgradeOverrideResult'],
                 post_conditions: Sequence['outputs.GetFeatureSpecClusterupgradePostConditionResult'],
                 upstream_fleets: Sequence[_builtins.str]):
        """
        :param Sequence['GetFeatureSpecClusterupgradeGkeUpgradeOverrideArgs'] gke_upgrade_overrides: Configuration overrides for individual upgrades.
        :param Sequence['GetFeatureSpecClusterupgradePostConditionArgs'] post_conditions: Post conditions to override for the specified upgrade.
        :param Sequence[_builtins.str] upstream_fleets: Specified if other fleet should be considered as a source of upgrades. Currently, at most one upstream fleet is allowed. The fleet name should be either fleet project number or id.
        """
        pulumi.set(__self__, "gke_upgrade_overrides", gke_upgrade_overrides)
        pulumi.set(__self__, "post_conditions", post_conditions)
        pulumi.set(__self__, "upstream_fleets", upstream_fleets)

    @_builtins.property
    @pulumi.getter(name="gkeUpgradeOverrides")
    def gke_upgrade_overrides(self) -> Sequence['outputs.GetFeatureSpecClusterupgradeGkeUpgradeOverrideResult']:
        """
        Configuration overrides for individual upgrades.
        """
        return pulumi.get(self, "gke_upgrade_overrides")

    @_builtins.property
    @pulumi.getter(name="postConditions")
    def post_conditions(self) -> Sequence['outputs.GetFeatureSpecClusterupgradePostConditionResult']:
        """
        Post conditions to override for the specified upgrade.
        """
        return pulumi.get(self, "post_conditions")

    @_builtins.property
    @pulumi.getter(name="upstreamFleets")
    def upstream_fleets(self) -> Sequence[_builtins.str]:
        """
        Specified if other fleet should be considered as a source of upgrades. Currently, at most one upstream fleet is allowed. The fleet name should be either fleet project number or id.
        """
        return pulumi.get(self, "upstream_fleets")


@pulumi.output_type
class GetFeatureSpecClusterupgradeGkeUpgradeOverrideResult(dict):
    def __init__(__self__, *,
                 post_conditions: Sequence['outputs.GetFeatureSpecClusterupgradeGkeUpgradeOverridePostConditionResult'],
                 upgrades: Sequence['outputs.GetFeatureSpecClusterupgradeGkeUpgradeOverrideUpgradeResult']):
        """
        :param Sequence['GetFeatureSpecClusterupgradeGkeUpgradeOverridePostConditionArgs'] post_conditions: Post conditions to override for the specified upgrade.
        :param Sequence['GetFeatureSpecClusterupgradeGkeUpgradeOverrideUpgradeArgs'] upgrades: Which upgrade to override.
        """
        pulumi.set(__self__, "post_conditions", post_conditions)
        pulumi.set(__self__, "upgrades", upgrades)

    @_builtins.property
    @pulumi.getter(name="postConditions")
    def post_conditions(self) -> Sequence['outputs.GetFeatureSpecClusterupgradeGkeUpgradeOverridePostConditionResult']:
        """
        Post conditions to override for the specified upgrade.
        """
        return pulumi.get(self, "post_conditions")

    @_builtins.property
    @pulumi.getter
    def upgrades(self) -> Sequence['outputs.GetFeatureSpecClusterupgradeGkeUpgradeOverrideUpgradeResult']:
        """
        Which upgrade to override.
        """
        return pulumi.get(self, "upgrades")


@pulumi.output_type
class GetFeatureSpecClusterupgradeGkeUpgradeOverridePostConditionResult(dict):
    def __init__(__self__, *,
                 soaking: _builtins.str):
        """
        :param _builtins.str soaking: Amount of time to "soak" after a rollout has been finished before marking it COMPLETE. Cannot exceed 30 days.
        """
        pulumi.set(__self__, "soaking", soaking)

    @_builtins.property
    @pulumi.getter
    def soaking(self) -> _builtins.str:
        """
        Amount of time to "soak" after a rollout has been finished before marking it COMPLETE. Cannot exceed 30 days.
        """
        return pulumi.get(self, "soaking")


@pulumi.output_type
class GetFeatureSpecClusterupgradeGkeUpgradeOverrideUpgradeResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 version: _builtins.str):
        """
        :param _builtins.str name: The name of the feature you want to know the status of.
        :param _builtins.str version: Version of the upgrade, e.g., "1.22.1-gke.100". It should be a valid version. It must not exceet 99 characters.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the feature you want to know the status of.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        Version of the upgrade, e.g., "1.22.1-gke.100". It should be a valid version. It must not exceet 99 characters.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetFeatureSpecClusterupgradePostConditionResult(dict):
    def __init__(__self__, *,
                 soaking: _builtins.str):
        """
        :param _builtins.str soaking: Amount of time to "soak" after a rollout has been finished before marking it COMPLETE. Cannot exceed 30 days.
        """
        pulumi.set(__self__, "soaking", soaking)

    @_builtins.property
    @pulumi.getter
    def soaking(self) -> _builtins.str:
        """
        Amount of time to "soak" after a rollout has been finished before marking it COMPLETE. Cannot exceed 30 days.
        """
        return pulumi.get(self, "soaking")


@pulumi.output_type
class GetFeatureSpecFleetobservabilityResult(dict):
    def __init__(__self__, *,
                 logging_configs: Sequence['outputs.GetFeatureSpecFleetobservabilityLoggingConfigResult']):
        """
        :param Sequence['GetFeatureSpecFleetobservabilityLoggingConfigArgs'] logging_configs: Specified if fleet logging feature is enabled for the entire fleet. If UNSPECIFIED, fleet logging feature is disabled for the entire fleet.
        """
        pulumi.set(__self__, "logging_configs", logging_configs)

    @_builtins.property
    @pulumi.getter(name="loggingConfigs")
    def logging_configs(self) -> Sequence['outputs.GetFeatureSpecFleetobservabilityLoggingConfigResult']:
        """
        Specified if fleet logging feature is enabled for the entire fleet. If UNSPECIFIED, fleet logging feature is disabled for the entire fleet.
        """
        return pulumi.get(self, "logging_configs")


@pulumi.output_type
class GetFeatureSpecFleetobservabilityLoggingConfigResult(dict):
    def __init__(__self__, *,
                 default_configs: Sequence['outputs.GetFeatureSpecFleetobservabilityLoggingConfigDefaultConfigResult'],
                 fleet_scope_logs_configs: Sequence['outputs.GetFeatureSpecFleetobservabilityLoggingConfigFleetScopeLogsConfigResult']):
        """
        :param Sequence['GetFeatureSpecFleetobservabilityLoggingConfigDefaultConfigArgs'] default_configs: Specified if applying the default routing config to logs not specified in other configs.
        :param Sequence['GetFeatureSpecFleetobservabilityLoggingConfigFleetScopeLogsConfigArgs'] fleet_scope_logs_configs: Specified if applying the routing config to all logs for all fleet scopes.
        """
        pulumi.set(__self__, "default_configs", default_configs)
        pulumi.set(__self__, "fleet_scope_logs_configs", fleet_scope_logs_configs)

    @_builtins.property
    @pulumi.getter(name="defaultConfigs")
    def default_configs(self) -> Sequence['outputs.GetFeatureSpecFleetobservabilityLoggingConfigDefaultConfigResult']:
        """
        Specified if applying the default routing config to logs not specified in other configs.
        """
        return pulumi.get(self, "default_configs")

    @_builtins.property
    @pulumi.getter(name="fleetScopeLogsConfigs")
    def fleet_scope_logs_configs(self) -> Sequence['outputs.GetFeatureSpecFleetobservabilityLoggingConfigFleetScopeLogsConfigResult']:
        """
        Specified if applying the routing config to all logs for all fleet scopes.
        """
        return pulumi.get(self, "fleet_scope_logs_configs")


@pulumi.output_type
class GetFeatureSpecFleetobservabilityLoggingConfigDefaultConfigResult(dict):
    def __init__(__self__, *,
                 mode: _builtins.str):
        """
        :param _builtins.str mode: Specified if fleet logging feature is enabled. Possible values: ["MODE_UNSPECIFIED", "COPY", "MOVE"]
        """
        pulumi.set(__self__, "mode", mode)

    @_builtins.property
    @pulumi.getter
    def mode(self) -> _builtins.str:
        """
        Specified if fleet logging feature is enabled. Possible values: ["MODE_UNSPECIFIED", "COPY", "MOVE"]
        """
        return pulumi.get(self, "mode")


@pulumi.output_type
class GetFeatureSpecFleetobservabilityLoggingConfigFleetScopeLogsConfigResult(dict):
    def __init__(__self__, *,
                 mode: _builtins.str):
        """
        :param _builtins.str mode: Specified if fleet logging feature is enabled. Possible values: ["MODE_UNSPECIFIED", "COPY", "MOVE"]
        """
        pulumi.set(__self__, "mode", mode)

    @_builtins.property
    @pulumi.getter
    def mode(self) -> _builtins.str:
        """
        Specified if fleet logging feature is enabled. Possible values: ["MODE_UNSPECIFIED", "COPY", "MOVE"]
        """
        return pulumi.get(self, "mode")


@pulumi.output_type
class GetFeatureSpecMulticlusteringressResult(dict):
    def __init__(__self__, *,
                 config_membership: _builtins.str):
        """
        :param _builtins.str config_membership: Fully-qualified Membership name which hosts the MultiClusterIngress CRD. Example: 'projects/foo-proj/locations/global/memberships/bar'
        """
        pulumi.set(__self__, "config_membership", config_membership)

    @_builtins.property
    @pulumi.getter(name="configMembership")
    def config_membership(self) -> _builtins.str:
        """
        Fully-qualified Membership name which hosts the MultiClusterIngress CRD. Example: 'projects/foo-proj/locations/global/memberships/bar'
        """
        return pulumi.get(self, "config_membership")


@pulumi.output_type
class GetFeatureSpecRbacrolebindingactuationResult(dict):
    def __init__(__self__, *,
                 allowed_custom_roles: Sequence[_builtins.str]):
        """
        :param Sequence[_builtins.str] allowed_custom_roles: The list of allowed custom roles (ClusterRoles). If a custom role is not part of this list, it cannot be used in a fleet scope RBACRoleBinding. If a custom role in this list is in use, it cannot be removed from the list until the scope RBACRolebindings using it are deleted.
        """
        pulumi.set(__self__, "allowed_custom_roles", allowed_custom_roles)

    @_builtins.property
    @pulumi.getter(name="allowedCustomRoles")
    def allowed_custom_roles(self) -> Sequence[_builtins.str]:
        """
        The list of allowed custom roles (ClusterRoles). If a custom role is not part of this list, it cannot be used in a fleet scope RBACRoleBinding. If a custom role in this list is in use, it cannot be removed from the list until the scope RBACRolebindings using it are deleted.
        """
        return pulumi.get(self, "allowed_custom_roles")


@pulumi.output_type
class GetFeatureStateResult(dict):
    def __init__(__self__, *,
                 states: Sequence['outputs.GetFeatureStateStateResult']):
        """
        :param Sequence['GetFeatureStateStateArgs'] states: Output only. The "running state" of the Feature in this Hub.
        """
        pulumi.set(__self__, "states", states)

    @_builtins.property
    @pulumi.getter
    def states(self) -> Sequence['outputs.GetFeatureStateStateResult']:
        """
        Output only. The "running state" of the Feature in this Hub.
        """
        return pulumi.get(self, "states")


@pulumi.output_type
class GetFeatureStateStateResult(dict):
    def __init__(__self__, *,
                 code: _builtins.str,
                 description: _builtins.str,
                 update_time: _builtins.str):
        """
        :param _builtins.str code: The high-level, machine-readable status of this Feature.
        :param _builtins.str description: A human-readable description of the current status.
        :param _builtins.str update_time: The time this status and any related Feature-specific details were updated. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z"
        """
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "update_time", update_time)

    @_builtins.property
    @pulumi.getter
    def code(self) -> _builtins.str:
        """
        The high-level, machine-readable status of this Feature.
        """
        return pulumi.get(self, "code")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        A human-readable description of the current status.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> _builtins.str:
        """
        The time this status and any related Feature-specific details were updated. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z"
        """
        return pulumi.get(self, "update_time")


@pulumi.output_type
class GetMembershipAuthorityResult(dict):
    def __init__(__self__, *,
                 issuer: _builtins.str):
        pulumi.set(__self__, "issuer", issuer)

    @_builtins.property
    @pulumi.getter
    def issuer(self) -> _builtins.str:
        return pulumi.get(self, "issuer")


@pulumi.output_type
class GetMembershipBindingStateResult(dict):
    def __init__(__self__, *,
                 code: _builtins.str):
        """
        :param _builtins.str code: Code describes the state of a MembershipBinding resource.
        """
        pulumi.set(__self__, "code", code)

    @_builtins.property
    @pulumi.getter
    def code(self) -> _builtins.str:
        """
        Code describes the state of a MembershipBinding resource.
        """
        return pulumi.get(self, "code")


@pulumi.output_type
class GetMembershipEndpointResult(dict):
    def __init__(__self__, *,
                 gke_clusters: Sequence['outputs.GetMembershipEndpointGkeClusterResult']):
        """
        :param Sequence['GetMembershipEndpointGkeClusterArgs'] gke_clusters: If this Membership is a Kubernetes API server hosted on GKE, this is a self link to its GCP resource.
        """
        pulumi.set(__self__, "gke_clusters", gke_clusters)

    @_builtins.property
    @pulumi.getter(name="gkeClusters")
    def gke_clusters(self) -> Sequence['outputs.GetMembershipEndpointGkeClusterResult']:
        """
        If this Membership is a Kubernetes API server hosted on GKE, this is a self link to its GCP resource.
        """
        return pulumi.get(self, "gke_clusters")


@pulumi.output_type
class GetMembershipEndpointGkeClusterResult(dict):
    def __init__(__self__, *,
                 resource_link: _builtins.str):
        pulumi.set(__self__, "resource_link", resource_link)

    @_builtins.property
    @pulumi.getter(name="resourceLink")
    def resource_link(self) -> _builtins.str:
        return pulumi.get(self, "resource_link")


