# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'TemplateFilterConfigArgs',
    'TemplateFilterConfigArgsDict',
    'TemplateFilterConfigMaliciousUriFilterSettingsArgs',
    'TemplateFilterConfigMaliciousUriFilterSettingsArgsDict',
    'TemplateFilterConfigPiAndJailbreakFilterSettingsArgs',
    'TemplateFilterConfigPiAndJailbreakFilterSettingsArgsDict',
    'TemplateFilterConfigRaiSettingsArgs',
    'TemplateFilterConfigRaiSettingsArgsDict',
    'TemplateFilterConfigRaiSettingsRaiFilterArgs',
    'TemplateFilterConfigRaiSettingsRaiFilterArgsDict',
    'TemplateFilterConfigSdpSettingsArgs',
    'TemplateFilterConfigSdpSettingsArgsDict',
    'TemplateFilterConfigSdpSettingsAdvancedConfigArgs',
    'TemplateFilterConfigSdpSettingsAdvancedConfigArgsDict',
    'TemplateFilterConfigSdpSettingsBasicConfigArgs',
    'TemplateFilterConfigSdpSettingsBasicConfigArgsDict',
    'TemplateTemplateMetadataArgs',
    'TemplateTemplateMetadataArgsDict',
    'TemplateTemplateMetadataMultiLanguageDetectionArgs',
    'TemplateTemplateMetadataMultiLanguageDetectionArgsDict',
]

MYPY = False

if not MYPY:
    class TemplateFilterConfigArgsDict(TypedDict):
        malicious_uri_filter_settings: NotRequired[pulumi.Input['TemplateFilterConfigMaliciousUriFilterSettingsArgsDict']]
        """
        Malicious URI filter settings.
        Structure is documented below.
        """
        pi_and_jailbreak_filter_settings: NotRequired[pulumi.Input['TemplateFilterConfigPiAndJailbreakFilterSettingsArgsDict']]
        """
        Prompt injection and Jailbreak Filter settings.
        Structure is documented below.
        """
        rai_settings: NotRequired[pulumi.Input['TemplateFilterConfigRaiSettingsArgsDict']]
        """
        Responsible AI Filter settings.
        Structure is documented below.
        """
        sdp_settings: NotRequired[pulumi.Input['TemplateFilterConfigSdpSettingsArgsDict']]
        """
        Sensitive Data Protection settings.
        Structure is documented below.
        """
elif False:
    TemplateFilterConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TemplateFilterConfigArgs:
    def __init__(__self__, *,
                 malicious_uri_filter_settings: Optional[pulumi.Input['TemplateFilterConfigMaliciousUriFilterSettingsArgs']] = None,
                 pi_and_jailbreak_filter_settings: Optional[pulumi.Input['TemplateFilterConfigPiAndJailbreakFilterSettingsArgs']] = None,
                 rai_settings: Optional[pulumi.Input['TemplateFilterConfigRaiSettingsArgs']] = None,
                 sdp_settings: Optional[pulumi.Input['TemplateFilterConfigSdpSettingsArgs']] = None):
        """
        :param pulumi.Input['TemplateFilterConfigMaliciousUriFilterSettingsArgs'] malicious_uri_filter_settings: Malicious URI filter settings.
               Structure is documented below.
        :param pulumi.Input['TemplateFilterConfigPiAndJailbreakFilterSettingsArgs'] pi_and_jailbreak_filter_settings: Prompt injection and Jailbreak Filter settings.
               Structure is documented below.
        :param pulumi.Input['TemplateFilterConfigRaiSettingsArgs'] rai_settings: Responsible AI Filter settings.
               Structure is documented below.
        :param pulumi.Input['TemplateFilterConfigSdpSettingsArgs'] sdp_settings: Sensitive Data Protection settings.
               Structure is documented below.
        """
        if malicious_uri_filter_settings is not None:
            pulumi.set(__self__, "malicious_uri_filter_settings", malicious_uri_filter_settings)
        if pi_and_jailbreak_filter_settings is not None:
            pulumi.set(__self__, "pi_and_jailbreak_filter_settings", pi_and_jailbreak_filter_settings)
        if rai_settings is not None:
            pulumi.set(__self__, "rai_settings", rai_settings)
        if sdp_settings is not None:
            pulumi.set(__self__, "sdp_settings", sdp_settings)

    @property
    @pulumi.getter(name="maliciousUriFilterSettings")
    def malicious_uri_filter_settings(self) -> Optional[pulumi.Input['TemplateFilterConfigMaliciousUriFilterSettingsArgs']]:
        """
        Malicious URI filter settings.
        Structure is documented below.
        """
        return pulumi.get(self, "malicious_uri_filter_settings")

    @malicious_uri_filter_settings.setter
    def malicious_uri_filter_settings(self, value: Optional[pulumi.Input['TemplateFilterConfigMaliciousUriFilterSettingsArgs']]):
        pulumi.set(self, "malicious_uri_filter_settings", value)

    @property
    @pulumi.getter(name="piAndJailbreakFilterSettings")
    def pi_and_jailbreak_filter_settings(self) -> Optional[pulumi.Input['TemplateFilterConfigPiAndJailbreakFilterSettingsArgs']]:
        """
        Prompt injection and Jailbreak Filter settings.
        Structure is documented below.
        """
        return pulumi.get(self, "pi_and_jailbreak_filter_settings")

    @pi_and_jailbreak_filter_settings.setter
    def pi_and_jailbreak_filter_settings(self, value: Optional[pulumi.Input['TemplateFilterConfigPiAndJailbreakFilterSettingsArgs']]):
        pulumi.set(self, "pi_and_jailbreak_filter_settings", value)

    @property
    @pulumi.getter(name="raiSettings")
    def rai_settings(self) -> Optional[pulumi.Input['TemplateFilterConfigRaiSettingsArgs']]:
        """
        Responsible AI Filter settings.
        Structure is documented below.
        """
        return pulumi.get(self, "rai_settings")

    @rai_settings.setter
    def rai_settings(self, value: Optional[pulumi.Input['TemplateFilterConfigRaiSettingsArgs']]):
        pulumi.set(self, "rai_settings", value)

    @property
    @pulumi.getter(name="sdpSettings")
    def sdp_settings(self) -> Optional[pulumi.Input['TemplateFilterConfigSdpSettingsArgs']]:
        """
        Sensitive Data Protection settings.
        Structure is documented below.
        """
        return pulumi.get(self, "sdp_settings")

    @sdp_settings.setter
    def sdp_settings(self, value: Optional[pulumi.Input['TemplateFilterConfigSdpSettingsArgs']]):
        pulumi.set(self, "sdp_settings", value)


if not MYPY:
    class TemplateFilterConfigMaliciousUriFilterSettingsArgsDict(TypedDict):
        filter_enforcement: NotRequired[pulumi.Input[builtins.str]]
        """
        Tells whether the Malicious URI filter is enabled or disabled.
        Possible values:
        ENABLED
        DISABLED
        """
elif False:
    TemplateFilterConfigMaliciousUriFilterSettingsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TemplateFilterConfigMaliciousUriFilterSettingsArgs:
    def __init__(__self__, *,
                 filter_enforcement: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] filter_enforcement: Tells whether the Malicious URI filter is enabled or disabled.
               Possible values:
               ENABLED
               DISABLED
        """
        if filter_enforcement is not None:
            pulumi.set(__self__, "filter_enforcement", filter_enforcement)

    @property
    @pulumi.getter(name="filterEnforcement")
    def filter_enforcement(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Tells whether the Malicious URI filter is enabled or disabled.
        Possible values:
        ENABLED
        DISABLED
        """
        return pulumi.get(self, "filter_enforcement")

    @filter_enforcement.setter
    def filter_enforcement(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "filter_enforcement", value)


if not MYPY:
    class TemplateFilterConfigPiAndJailbreakFilterSettingsArgsDict(TypedDict):
        confidence_level: NotRequired[pulumi.Input[builtins.str]]
        """
        Possible values:
        LOW_AND_ABOVE
        MEDIUM_AND_ABOVE
        HIGH
        """
        filter_enforcement: NotRequired[pulumi.Input[builtins.str]]
        """
        Tells whether Prompt injection and Jailbreak filter is enabled or
        disabled.
        Possible values:
        ENABLED
        DISABLED
        """
elif False:
    TemplateFilterConfigPiAndJailbreakFilterSettingsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TemplateFilterConfigPiAndJailbreakFilterSettingsArgs:
    def __init__(__self__, *,
                 confidence_level: Optional[pulumi.Input[builtins.str]] = None,
                 filter_enforcement: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] confidence_level: Possible values:
               LOW_AND_ABOVE
               MEDIUM_AND_ABOVE
               HIGH
        :param pulumi.Input[builtins.str] filter_enforcement: Tells whether Prompt injection and Jailbreak filter is enabled or
               disabled.
               Possible values:
               ENABLED
               DISABLED
        """
        if confidence_level is not None:
            pulumi.set(__self__, "confidence_level", confidence_level)
        if filter_enforcement is not None:
            pulumi.set(__self__, "filter_enforcement", filter_enforcement)

    @property
    @pulumi.getter(name="confidenceLevel")
    def confidence_level(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Possible values:
        LOW_AND_ABOVE
        MEDIUM_AND_ABOVE
        HIGH
        """
        return pulumi.get(self, "confidence_level")

    @confidence_level.setter
    def confidence_level(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "confidence_level", value)

    @property
    @pulumi.getter(name="filterEnforcement")
    def filter_enforcement(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Tells whether Prompt injection and Jailbreak filter is enabled or
        disabled.
        Possible values:
        ENABLED
        DISABLED
        """
        return pulumi.get(self, "filter_enforcement")

    @filter_enforcement.setter
    def filter_enforcement(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "filter_enforcement", value)


if not MYPY:
    class TemplateFilterConfigRaiSettingsArgsDict(TypedDict):
        rai_filters: pulumi.Input[Sequence[pulumi.Input['TemplateFilterConfigRaiSettingsRaiFilterArgsDict']]]
        """
        List of Responsible AI filters enabled for template.
        Structure is documented below.
        """
elif False:
    TemplateFilterConfigRaiSettingsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TemplateFilterConfigRaiSettingsArgs:
    def __init__(__self__, *,
                 rai_filters: pulumi.Input[Sequence[pulumi.Input['TemplateFilterConfigRaiSettingsRaiFilterArgs']]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input['TemplateFilterConfigRaiSettingsRaiFilterArgs']]] rai_filters: List of Responsible AI filters enabled for template.
               Structure is documented below.
        """
        pulumi.set(__self__, "rai_filters", rai_filters)

    @property
    @pulumi.getter(name="raiFilters")
    def rai_filters(self) -> pulumi.Input[Sequence[pulumi.Input['TemplateFilterConfigRaiSettingsRaiFilterArgs']]]:
        """
        List of Responsible AI filters enabled for template.
        Structure is documented below.
        """
        return pulumi.get(self, "rai_filters")

    @rai_filters.setter
    def rai_filters(self, value: pulumi.Input[Sequence[pulumi.Input['TemplateFilterConfigRaiSettingsRaiFilterArgs']]]):
        pulumi.set(self, "rai_filters", value)


if not MYPY:
    class TemplateFilterConfigRaiSettingsRaiFilterArgsDict(TypedDict):
        filter_type: pulumi.Input[builtins.str]
        """
        Possible values:
        SEXUALLY_EXPLICIT
        HATE_SPEECH
        HARASSMENT
        DANGEROUS
        """
        confidence_level: NotRequired[pulumi.Input[builtins.str]]
        """
        Possible values:
        LOW_AND_ABOVE
        MEDIUM_AND_ABOVE
        HIGH
        """
elif False:
    TemplateFilterConfigRaiSettingsRaiFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TemplateFilterConfigRaiSettingsRaiFilterArgs:
    def __init__(__self__, *,
                 filter_type: pulumi.Input[builtins.str],
                 confidence_level: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] filter_type: Possible values:
               SEXUALLY_EXPLICIT
               HATE_SPEECH
               HARASSMENT
               DANGEROUS
        :param pulumi.Input[builtins.str] confidence_level: Possible values:
               LOW_AND_ABOVE
               MEDIUM_AND_ABOVE
               HIGH
        """
        pulumi.set(__self__, "filter_type", filter_type)
        if confidence_level is not None:
            pulumi.set(__self__, "confidence_level", confidence_level)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> pulumi.Input[builtins.str]:
        """
        Possible values:
        SEXUALLY_EXPLICIT
        HATE_SPEECH
        HARASSMENT
        DANGEROUS
        """
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter(name="confidenceLevel")
    def confidence_level(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Possible values:
        LOW_AND_ABOVE
        MEDIUM_AND_ABOVE
        HIGH
        """
        return pulumi.get(self, "confidence_level")

    @confidence_level.setter
    def confidence_level(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "confidence_level", value)


if not MYPY:
    class TemplateFilterConfigSdpSettingsArgsDict(TypedDict):
        advanced_config: NotRequired[pulumi.Input['TemplateFilterConfigSdpSettingsAdvancedConfigArgsDict']]
        """
        Sensitive Data Protection Advanced configuration.
        Structure is documented below.
        """
        basic_config: NotRequired[pulumi.Input['TemplateFilterConfigSdpSettingsBasicConfigArgsDict']]
        """
        Sensitive Data Protection basic configuration.
        Structure is documented below.
        """
elif False:
    TemplateFilterConfigSdpSettingsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TemplateFilterConfigSdpSettingsArgs:
    def __init__(__self__, *,
                 advanced_config: Optional[pulumi.Input['TemplateFilterConfigSdpSettingsAdvancedConfigArgs']] = None,
                 basic_config: Optional[pulumi.Input['TemplateFilterConfigSdpSettingsBasicConfigArgs']] = None):
        """
        :param pulumi.Input['TemplateFilterConfigSdpSettingsAdvancedConfigArgs'] advanced_config: Sensitive Data Protection Advanced configuration.
               Structure is documented below.
        :param pulumi.Input['TemplateFilterConfigSdpSettingsBasicConfigArgs'] basic_config: Sensitive Data Protection basic configuration.
               Structure is documented below.
        """
        if advanced_config is not None:
            pulumi.set(__self__, "advanced_config", advanced_config)
        if basic_config is not None:
            pulumi.set(__self__, "basic_config", basic_config)

    @property
    @pulumi.getter(name="advancedConfig")
    def advanced_config(self) -> Optional[pulumi.Input['TemplateFilterConfigSdpSettingsAdvancedConfigArgs']]:
        """
        Sensitive Data Protection Advanced configuration.
        Structure is documented below.
        """
        return pulumi.get(self, "advanced_config")

    @advanced_config.setter
    def advanced_config(self, value: Optional[pulumi.Input['TemplateFilterConfigSdpSettingsAdvancedConfigArgs']]):
        pulumi.set(self, "advanced_config", value)

    @property
    @pulumi.getter(name="basicConfig")
    def basic_config(self) -> Optional[pulumi.Input['TemplateFilterConfigSdpSettingsBasicConfigArgs']]:
        """
        Sensitive Data Protection basic configuration.
        Structure is documented below.
        """
        return pulumi.get(self, "basic_config")

    @basic_config.setter
    def basic_config(self, value: Optional[pulumi.Input['TemplateFilterConfigSdpSettingsBasicConfigArgs']]):
        pulumi.set(self, "basic_config", value)


if not MYPY:
    class TemplateFilterConfigSdpSettingsAdvancedConfigArgsDict(TypedDict):
        deidentify_template: NotRequired[pulumi.Input[builtins.str]]
        """
        Optional Sensitive Data Protection Deidentify template resource name.
        If provided then DeidentifyContent action is performed during Sanitization
        using this template and inspect template. The De-identified data will
        be returned in SdpDeidentifyResult.
        Note that all info-types present in the deidentify template must be present
        in inspect template.
        e.g.
        `projects/{project}/locations/{location}/deidentifyTemplates/{deidentify_template}`
        """
        inspect_template: NotRequired[pulumi.Input[builtins.str]]
        """
        Sensitive Data Protection inspect template resource name
        If only inspect template is provided (de-identify template not provided),
        then Sensitive Data Protection InspectContent action is performed during
        Sanitization. All Sensitive Data Protection findings identified during
        inspection will be returned as SdpFinding in SdpInsepctionResult.
        e.g:-
        `projects/{project}/locations/{location}/inspectTemplates/{inspect_template}`
        """
elif False:
    TemplateFilterConfigSdpSettingsAdvancedConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TemplateFilterConfigSdpSettingsAdvancedConfigArgs:
    def __init__(__self__, *,
                 deidentify_template: Optional[pulumi.Input[builtins.str]] = None,
                 inspect_template: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] deidentify_template: Optional Sensitive Data Protection Deidentify template resource name.
               If provided then DeidentifyContent action is performed during Sanitization
               using this template and inspect template. The De-identified data will
               be returned in SdpDeidentifyResult.
               Note that all info-types present in the deidentify template must be present
               in inspect template.
               e.g.
               `projects/{project}/locations/{location}/deidentifyTemplates/{deidentify_template}`
        :param pulumi.Input[builtins.str] inspect_template: Sensitive Data Protection inspect template resource name
               If only inspect template is provided (de-identify template not provided),
               then Sensitive Data Protection InspectContent action is performed during
               Sanitization. All Sensitive Data Protection findings identified during
               inspection will be returned as SdpFinding in SdpInsepctionResult.
               e.g:-
               `projects/{project}/locations/{location}/inspectTemplates/{inspect_template}`
        """
        if deidentify_template is not None:
            pulumi.set(__self__, "deidentify_template", deidentify_template)
        if inspect_template is not None:
            pulumi.set(__self__, "inspect_template", inspect_template)

    @property
    @pulumi.getter(name="deidentifyTemplate")
    def deidentify_template(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Optional Sensitive Data Protection Deidentify template resource name.
        If provided then DeidentifyContent action is performed during Sanitization
        using this template and inspect template. The De-identified data will
        be returned in SdpDeidentifyResult.
        Note that all info-types present in the deidentify template must be present
        in inspect template.
        e.g.
        `projects/{project}/locations/{location}/deidentifyTemplates/{deidentify_template}`
        """
        return pulumi.get(self, "deidentify_template")

    @deidentify_template.setter
    def deidentify_template(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "deidentify_template", value)

    @property
    @pulumi.getter(name="inspectTemplate")
    def inspect_template(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Sensitive Data Protection inspect template resource name
        If only inspect template is provided (de-identify template not provided),
        then Sensitive Data Protection InspectContent action is performed during
        Sanitization. All Sensitive Data Protection findings identified during
        inspection will be returned as SdpFinding in SdpInsepctionResult.
        e.g:-
        `projects/{project}/locations/{location}/inspectTemplates/{inspect_template}`
        """
        return pulumi.get(self, "inspect_template")

    @inspect_template.setter
    def inspect_template(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "inspect_template", value)


if not MYPY:
    class TemplateFilterConfigSdpSettingsBasicConfigArgsDict(TypedDict):
        filter_enforcement: NotRequired[pulumi.Input[builtins.str]]
        """
        Tells whether the Sensitive Data Protection basic config is enabled or
        disabled.
        Possible values:
        ENABLED
        DISABLED
        """
elif False:
    TemplateFilterConfigSdpSettingsBasicConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TemplateFilterConfigSdpSettingsBasicConfigArgs:
    def __init__(__self__, *,
                 filter_enforcement: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] filter_enforcement: Tells whether the Sensitive Data Protection basic config is enabled or
               disabled.
               Possible values:
               ENABLED
               DISABLED
        """
        if filter_enforcement is not None:
            pulumi.set(__self__, "filter_enforcement", filter_enforcement)

    @property
    @pulumi.getter(name="filterEnforcement")
    def filter_enforcement(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Tells whether the Sensitive Data Protection basic config is enabled or
        disabled.
        Possible values:
        ENABLED
        DISABLED
        """
        return pulumi.get(self, "filter_enforcement")

    @filter_enforcement.setter
    def filter_enforcement(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "filter_enforcement", value)


if not MYPY:
    class TemplateTemplateMetadataArgsDict(TypedDict):
        custom_llm_response_safety_error_code: NotRequired[pulumi.Input[builtins.int]]
        """
        Indicates the custom error code set by the user to be returned to the end
        user if the LLM response trips Model Armor filters.
        """
        custom_llm_response_safety_error_message: NotRequired[pulumi.Input[builtins.str]]
        """
        Indicates the custom error message set by the user to be returned to the
        end user if the LLM response trips Model Armor filters.
        """
        custom_prompt_safety_error_code: NotRequired[pulumi.Input[builtins.int]]
        """
        Indicates the custom error code set by the user to be returned to the end
        user by the service extension if the prompt trips Model Armor filters.
        """
        custom_prompt_safety_error_message: NotRequired[pulumi.Input[builtins.str]]
        """
        Indicates the custom error message set by the user to be returned to the
        end user if the prompt trips Model Armor filters.
        """
        enforcement_type: NotRequired[pulumi.Input[builtins.str]]
        """
        Possible values:
        INSPECT_ONLY
        INSPECT_AND_BLOCK
        """
        ignore_partial_invocation_failures: NotRequired[pulumi.Input[builtins.bool]]
        """
        If true, partial detector failures should be ignored.
        """
        log_sanitize_operations: NotRequired[pulumi.Input[builtins.bool]]
        """
        If true, log sanitize operations.
        """
        log_template_operations: NotRequired[pulumi.Input[builtins.bool]]
        """
        If true, log template crud operations.
        """
        multi_language_detection: NotRequired[pulumi.Input['TemplateTemplateMetadataMultiLanguageDetectionArgsDict']]
        """
        Metadata to enable multi language detection via template.
        Structure is documented below.
        """
elif False:
    TemplateTemplateMetadataArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TemplateTemplateMetadataArgs:
    def __init__(__self__, *,
                 custom_llm_response_safety_error_code: Optional[pulumi.Input[builtins.int]] = None,
                 custom_llm_response_safety_error_message: Optional[pulumi.Input[builtins.str]] = None,
                 custom_prompt_safety_error_code: Optional[pulumi.Input[builtins.int]] = None,
                 custom_prompt_safety_error_message: Optional[pulumi.Input[builtins.str]] = None,
                 enforcement_type: Optional[pulumi.Input[builtins.str]] = None,
                 ignore_partial_invocation_failures: Optional[pulumi.Input[builtins.bool]] = None,
                 log_sanitize_operations: Optional[pulumi.Input[builtins.bool]] = None,
                 log_template_operations: Optional[pulumi.Input[builtins.bool]] = None,
                 multi_language_detection: Optional[pulumi.Input['TemplateTemplateMetadataMultiLanguageDetectionArgs']] = None):
        """
        :param pulumi.Input[builtins.int] custom_llm_response_safety_error_code: Indicates the custom error code set by the user to be returned to the end
               user if the LLM response trips Model Armor filters.
        :param pulumi.Input[builtins.str] custom_llm_response_safety_error_message: Indicates the custom error message set by the user to be returned to the
               end user if the LLM response trips Model Armor filters.
        :param pulumi.Input[builtins.int] custom_prompt_safety_error_code: Indicates the custom error code set by the user to be returned to the end
               user by the service extension if the prompt trips Model Armor filters.
        :param pulumi.Input[builtins.str] custom_prompt_safety_error_message: Indicates the custom error message set by the user to be returned to the
               end user if the prompt trips Model Armor filters.
        :param pulumi.Input[builtins.str] enforcement_type: Possible values:
               INSPECT_ONLY
               INSPECT_AND_BLOCK
        :param pulumi.Input[builtins.bool] ignore_partial_invocation_failures: If true, partial detector failures should be ignored.
        :param pulumi.Input[builtins.bool] log_sanitize_operations: If true, log sanitize operations.
        :param pulumi.Input[builtins.bool] log_template_operations: If true, log template crud operations.
        :param pulumi.Input['TemplateTemplateMetadataMultiLanguageDetectionArgs'] multi_language_detection: Metadata to enable multi language detection via template.
               Structure is documented below.
        """
        if custom_llm_response_safety_error_code is not None:
            pulumi.set(__self__, "custom_llm_response_safety_error_code", custom_llm_response_safety_error_code)
        if custom_llm_response_safety_error_message is not None:
            pulumi.set(__self__, "custom_llm_response_safety_error_message", custom_llm_response_safety_error_message)
        if custom_prompt_safety_error_code is not None:
            pulumi.set(__self__, "custom_prompt_safety_error_code", custom_prompt_safety_error_code)
        if custom_prompt_safety_error_message is not None:
            pulumi.set(__self__, "custom_prompt_safety_error_message", custom_prompt_safety_error_message)
        if enforcement_type is not None:
            pulumi.set(__self__, "enforcement_type", enforcement_type)
        if ignore_partial_invocation_failures is not None:
            pulumi.set(__self__, "ignore_partial_invocation_failures", ignore_partial_invocation_failures)
        if log_sanitize_operations is not None:
            pulumi.set(__self__, "log_sanitize_operations", log_sanitize_operations)
        if log_template_operations is not None:
            pulumi.set(__self__, "log_template_operations", log_template_operations)
        if multi_language_detection is not None:
            pulumi.set(__self__, "multi_language_detection", multi_language_detection)

    @property
    @pulumi.getter(name="customLlmResponseSafetyErrorCode")
    def custom_llm_response_safety_error_code(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Indicates the custom error code set by the user to be returned to the end
        user if the LLM response trips Model Armor filters.
        """
        return pulumi.get(self, "custom_llm_response_safety_error_code")

    @custom_llm_response_safety_error_code.setter
    def custom_llm_response_safety_error_code(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "custom_llm_response_safety_error_code", value)

    @property
    @pulumi.getter(name="customLlmResponseSafetyErrorMessage")
    def custom_llm_response_safety_error_message(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Indicates the custom error message set by the user to be returned to the
        end user if the LLM response trips Model Armor filters.
        """
        return pulumi.get(self, "custom_llm_response_safety_error_message")

    @custom_llm_response_safety_error_message.setter
    def custom_llm_response_safety_error_message(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "custom_llm_response_safety_error_message", value)

    @property
    @pulumi.getter(name="customPromptSafetyErrorCode")
    def custom_prompt_safety_error_code(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Indicates the custom error code set by the user to be returned to the end
        user by the service extension if the prompt trips Model Armor filters.
        """
        return pulumi.get(self, "custom_prompt_safety_error_code")

    @custom_prompt_safety_error_code.setter
    def custom_prompt_safety_error_code(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "custom_prompt_safety_error_code", value)

    @property
    @pulumi.getter(name="customPromptSafetyErrorMessage")
    def custom_prompt_safety_error_message(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Indicates the custom error message set by the user to be returned to the
        end user if the prompt trips Model Armor filters.
        """
        return pulumi.get(self, "custom_prompt_safety_error_message")

    @custom_prompt_safety_error_message.setter
    def custom_prompt_safety_error_message(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "custom_prompt_safety_error_message", value)

    @property
    @pulumi.getter(name="enforcementType")
    def enforcement_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Possible values:
        INSPECT_ONLY
        INSPECT_AND_BLOCK
        """
        return pulumi.get(self, "enforcement_type")

    @enforcement_type.setter
    def enforcement_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "enforcement_type", value)

    @property
    @pulumi.getter(name="ignorePartialInvocationFailures")
    def ignore_partial_invocation_failures(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        If true, partial detector failures should be ignored.
        """
        return pulumi.get(self, "ignore_partial_invocation_failures")

    @ignore_partial_invocation_failures.setter
    def ignore_partial_invocation_failures(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "ignore_partial_invocation_failures", value)

    @property
    @pulumi.getter(name="logSanitizeOperations")
    def log_sanitize_operations(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        If true, log sanitize operations.
        """
        return pulumi.get(self, "log_sanitize_operations")

    @log_sanitize_operations.setter
    def log_sanitize_operations(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "log_sanitize_operations", value)

    @property
    @pulumi.getter(name="logTemplateOperations")
    def log_template_operations(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        If true, log template crud operations.
        """
        return pulumi.get(self, "log_template_operations")

    @log_template_operations.setter
    def log_template_operations(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "log_template_operations", value)

    @property
    @pulumi.getter(name="multiLanguageDetection")
    def multi_language_detection(self) -> Optional[pulumi.Input['TemplateTemplateMetadataMultiLanguageDetectionArgs']]:
        """
        Metadata to enable multi language detection via template.
        Structure is documented below.
        """
        return pulumi.get(self, "multi_language_detection")

    @multi_language_detection.setter
    def multi_language_detection(self, value: Optional[pulumi.Input['TemplateTemplateMetadataMultiLanguageDetectionArgs']]):
        pulumi.set(self, "multi_language_detection", value)


if not MYPY:
    class TemplateTemplateMetadataMultiLanguageDetectionArgsDict(TypedDict):
        enable_multi_language_detection: pulumi.Input[builtins.bool]
        """
        If true, multi language detection will be enabled.
        """
elif False:
    TemplateTemplateMetadataMultiLanguageDetectionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TemplateTemplateMetadataMultiLanguageDetectionArgs:
    def __init__(__self__, *,
                 enable_multi_language_detection: pulumi.Input[builtins.bool]):
        """
        :param pulumi.Input[builtins.bool] enable_multi_language_detection: If true, multi language detection will be enabled.
        """
        pulumi.set(__self__, "enable_multi_language_detection", enable_multi_language_detection)

    @property
    @pulumi.getter(name="enableMultiLanguageDetection")
    def enable_multi_language_detection(self) -> pulumi.Input[builtins.bool]:
        """
        If true, multi language detection will be enabled.
        """
        return pulumi.get(self, "enable_multi_language_detection")

    @enable_multi_language_detection.setter
    def enable_multi_language_detection(self, value: pulumi.Input[builtins.bool]):
        pulumi.set(self, "enable_multi_language_detection", value)


