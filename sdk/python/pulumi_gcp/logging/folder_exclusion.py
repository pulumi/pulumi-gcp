# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities

class FolderExclusion(pulumi.CustomResource):
    """
    Manages a folder-level logging exclusion. For more information see
    [the official documentation](https://cloud.google.com/logging/docs/) and
    [Excluding Logs](https://cloud.google.com/logging/docs/exclusions).
    
    Note that you must have the "Logs Configuration Writer" IAM role (`roles/logging.configWriter`)
    granted to the credentials used with Terraform.
    """
    def __init__(__self__, __name__, __opts__=None, description=None, disabled=None, filter=None, folder=None, name=None):
        """Create a FolderExclusion resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if description and not isinstance(description, basestring):
            raise TypeError('Expected property description to be a basestring')
        __self__.description = description
        """
        A human-readable description.
        """
        __props__['description'] = description

        if disabled and not isinstance(disabled, bool):
            raise TypeError('Expected property disabled to be a bool')
        __self__.disabled = disabled
        """
        Whether this exclusion rule should be disabled or not. This defaults to
        false.
        """
        __props__['disabled'] = disabled

        if not filter:
            raise TypeError('Missing required property filter')
        elif not isinstance(filter, basestring):
            raise TypeError('Expected property filter to be a basestring')
        __self__.filter = filter
        """
        The filter to apply when excluding logs. Only log entries that match the filter are excluded.
        See [Advanced Log Filters](https://cloud.google.com/logging/docs/view/advanced-filters) for information on how to
        write a filter.
        """
        __props__['filter'] = filter

        if not folder:
            raise TypeError('Missing required property folder')
        elif not isinstance(folder, basestring):
            raise TypeError('Expected property folder to be a basestring')
        __self__.folder = folder
        """
        The folder to be exported to the sink. Note that either [FOLDER_ID] or "folders/[FOLDER_ID]" is
        accepted.
        """
        __props__['folder'] = folder

        if name and not isinstance(name, basestring):
            raise TypeError('Expected property name to be a basestring')
        __self__.name = name
        """
        The name of the logging exclusion.
        """
        __props__['name'] = name

        super(FolderExclusion, __self__).__init__(
            'gcp:logging/folderExclusion:FolderExclusion',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'description' in outs:
            self.description = outs['description']
        if 'disabled' in outs:
            self.disabled = outs['disabled']
        if 'filter' in outs:
            self.filter = outs['filter']
        if 'folder' in outs:
            self.folder = outs['folder']
        if 'name' in outs:
            self.name = outs['name']
