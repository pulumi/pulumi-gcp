# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ClusterArgs', 'Cluster']

@pulumi.input_type
class ClusterArgs:
    def __init__(__self__, *,
                 cluster_id: pulumi.Input[str],
                 location: pulumi.Input[str],
                 automated_backup_policy: Optional[pulumi.Input['ClusterAutomatedBackupPolicyArgs']] = None,
                 continuous_backup_config: Optional[pulumi.Input['ClusterContinuousBackupConfigArgs']] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 encryption_config: Optional[pulumi.Input['ClusterEncryptionConfigArgs']] = None,
                 initial_user: Optional[pulumi.Input['ClusterInitialUserArgs']] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 network: Optional[pulumi.Input[str]] = None,
                 network_config: Optional[pulumi.Input['ClusterNetworkConfigArgs']] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 restore_backup_source: Optional[pulumi.Input['ClusterRestoreBackupSourceArgs']] = None,
                 restore_continuous_backup_source: Optional[pulumi.Input['ClusterRestoreContinuousBackupSourceArgs']] = None):
        """
        The set of arguments for constructing a Cluster resource.
        :param pulumi.Input[str] cluster_id: The ID of the alloydb cluster.
        :param pulumi.Input[str] location: The location where the alloydb cluster should reside.
               
               
               - - -
        :param pulumi.Input['ClusterAutomatedBackupPolicyArgs'] automated_backup_policy: The automated backup policy for this cluster. AutomatedBackupPolicy is disabled by default.
               Structure is documented below.
        :param pulumi.Input['ClusterContinuousBackupConfigArgs'] continuous_backup_config: The continuous backup config for this cluster.
               If no policy is provided then the default policy will be used. The default policy takes one backup a day and retains backups for 14 days.
               Structure is documented below.
        :param pulumi.Input[str] display_name: User-settable and human-readable display name for the Cluster.
        :param pulumi.Input['ClusterEncryptionConfigArgs'] encryption_config: EncryptionConfig describes the encryption config of a cluster or a backup that is encrypted with a CMEK (customer-managed encryption key).
               Structure is documented below.
        :param pulumi.Input['ClusterInitialUserArgs'] initial_user: Initial user to setup during cluster creation.
               Structure is documented below.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: User-defined labels for the alloydb cluster.
        :param pulumi.Input[str] network: (Optional, Deprecated)
               The relative resource name of the VPC network on which the instance can be accessed. It is specified in the following form:
               "projects/{projectNumber}/global/networks/{network_id}".
               
               > **Warning:** `network` is deprecated and will be removed in a future major release. Instead, use `network_config` to define the network configuration.
        :param pulumi.Input['ClusterNetworkConfigArgs'] network_config: Metadata related to network configuration.
               Structure is documented below.
        :param pulumi.Input[str] project: The ID of the project in which the resource belongs.
               If it is not provided, the provider project is used.
        :param pulumi.Input['ClusterRestoreBackupSourceArgs'] restore_backup_source: The source when restoring from a backup. Conflicts with 'restore_continuous_backup_source', both can't be set together.
               Structure is documented below.
        :param pulumi.Input['ClusterRestoreContinuousBackupSourceArgs'] restore_continuous_backup_source: The source when restoring via point in time recovery (PITR). Conflicts with 'restore_backup_source', both can't be set together.
               Structure is documented below.
        """
        ClusterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cluster_id=cluster_id,
            location=location,
            automated_backup_policy=automated_backup_policy,
            continuous_backup_config=continuous_backup_config,
            display_name=display_name,
            encryption_config=encryption_config,
            initial_user=initial_user,
            labels=labels,
            network=network,
            network_config=network_config,
            project=project,
            restore_backup_source=restore_backup_source,
            restore_continuous_backup_source=restore_continuous_backup_source,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cluster_id: pulumi.Input[str],
             location: pulumi.Input[str],
             automated_backup_policy: Optional[pulumi.Input['ClusterAutomatedBackupPolicyArgs']] = None,
             continuous_backup_config: Optional[pulumi.Input['ClusterContinuousBackupConfigArgs']] = None,
             display_name: Optional[pulumi.Input[str]] = None,
             encryption_config: Optional[pulumi.Input['ClusterEncryptionConfigArgs']] = None,
             initial_user: Optional[pulumi.Input['ClusterInitialUserArgs']] = None,
             labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             network: Optional[pulumi.Input[str]] = None,
             network_config: Optional[pulumi.Input['ClusterNetworkConfigArgs']] = None,
             project: Optional[pulumi.Input[str]] = None,
             restore_backup_source: Optional[pulumi.Input['ClusterRestoreBackupSourceArgs']] = None,
             restore_continuous_backup_source: Optional[pulumi.Input['ClusterRestoreContinuousBackupSourceArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("cluster_id", cluster_id)
        _setter("location", location)
        if automated_backup_policy is not None:
            _setter("automated_backup_policy", automated_backup_policy)
        if continuous_backup_config is not None:
            _setter("continuous_backup_config", continuous_backup_config)
        if display_name is not None:
            _setter("display_name", display_name)
        if encryption_config is not None:
            _setter("encryption_config", encryption_config)
        if initial_user is not None:
            _setter("initial_user", initial_user)
        if labels is not None:
            _setter("labels", labels)
        if network is not None:
            warnings.warn("""`network` is deprecated and will be removed in a future major release. Instead, use `network_config` to define the network configuration.""", DeprecationWarning)
            pulumi.log.warn("""network is deprecated: `network` is deprecated and will be removed in a future major release. Instead, use `network_config` to define the network configuration.""")
        if network is not None:
            _setter("network", network)
        if network_config is not None:
            _setter("network_config", network_config)
        if project is not None:
            _setter("project", project)
        if restore_backup_source is not None:
            _setter("restore_backup_source", restore_backup_source)
        if restore_continuous_backup_source is not None:
            _setter("restore_continuous_backup_source", restore_continuous_backup_source)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[str]:
        """
        The ID of the alloydb cluster.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input[str]:
        """
        The location where the alloydb cluster should reside.


        - - -
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[str]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="automatedBackupPolicy")
    def automated_backup_policy(self) -> Optional[pulumi.Input['ClusterAutomatedBackupPolicyArgs']]:
        """
        The automated backup policy for this cluster. AutomatedBackupPolicy is disabled by default.
        Structure is documented below.
        """
        return pulumi.get(self, "automated_backup_policy")

    @automated_backup_policy.setter
    def automated_backup_policy(self, value: Optional[pulumi.Input['ClusterAutomatedBackupPolicyArgs']]):
        pulumi.set(self, "automated_backup_policy", value)

    @property
    @pulumi.getter(name="continuousBackupConfig")
    def continuous_backup_config(self) -> Optional[pulumi.Input['ClusterContinuousBackupConfigArgs']]:
        """
        The continuous backup config for this cluster.
        If no policy is provided then the default policy will be used. The default policy takes one backup a day and retains backups for 14 days.
        Structure is documented below.
        """
        return pulumi.get(self, "continuous_backup_config")

    @continuous_backup_config.setter
    def continuous_backup_config(self, value: Optional[pulumi.Input['ClusterContinuousBackupConfigArgs']]):
        pulumi.set(self, "continuous_backup_config", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        User-settable and human-readable display name for the Cluster.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="encryptionConfig")
    def encryption_config(self) -> Optional[pulumi.Input['ClusterEncryptionConfigArgs']]:
        """
        EncryptionConfig describes the encryption config of a cluster or a backup that is encrypted with a CMEK (customer-managed encryption key).
        Structure is documented below.
        """
        return pulumi.get(self, "encryption_config")

    @encryption_config.setter
    def encryption_config(self, value: Optional[pulumi.Input['ClusterEncryptionConfigArgs']]):
        pulumi.set(self, "encryption_config", value)

    @property
    @pulumi.getter(name="initialUser")
    def initial_user(self) -> Optional[pulumi.Input['ClusterInitialUserArgs']]:
        """
        Initial user to setup during cluster creation.
        Structure is documented below.
        """
        return pulumi.get(self, "initial_user")

    @initial_user.setter
    def initial_user(self, value: Optional[pulumi.Input['ClusterInitialUserArgs']]):
        pulumi.set(self, "initial_user", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        User-defined labels for the alloydb cluster.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def network(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional, Deprecated)
        The relative resource name of the VPC network on which the instance can be accessed. It is specified in the following form:
        "projects/{projectNumber}/global/networks/{network_id}".

        > **Warning:** `network` is deprecated and will be removed in a future major release. Instead, use `network_config` to define the network configuration.
        """
        warnings.warn("""`network` is deprecated and will be removed in a future major release. Instead, use `network_config` to define the network configuration.""", DeprecationWarning)
        pulumi.log.warn("""network is deprecated: `network` is deprecated and will be removed in a future major release. Instead, use `network_config` to define the network configuration.""")

        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter(name="networkConfig")
    def network_config(self) -> Optional[pulumi.Input['ClusterNetworkConfigArgs']]:
        """
        Metadata related to network configuration.
        Structure is documented below.
        """
        return pulumi.get(self, "network_config")

    @network_config.setter
    def network_config(self, value: Optional[pulumi.Input['ClusterNetworkConfigArgs']]):
        pulumi.set(self, "network_config", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the project in which the resource belongs.
        If it is not provided, the provider project is used.
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="restoreBackupSource")
    def restore_backup_source(self) -> Optional[pulumi.Input['ClusterRestoreBackupSourceArgs']]:
        """
        The source when restoring from a backup. Conflicts with 'restore_continuous_backup_source', both can't be set together.
        Structure is documented below.
        """
        return pulumi.get(self, "restore_backup_source")

    @restore_backup_source.setter
    def restore_backup_source(self, value: Optional[pulumi.Input['ClusterRestoreBackupSourceArgs']]):
        pulumi.set(self, "restore_backup_source", value)

    @property
    @pulumi.getter(name="restoreContinuousBackupSource")
    def restore_continuous_backup_source(self) -> Optional[pulumi.Input['ClusterRestoreContinuousBackupSourceArgs']]:
        """
        The source when restoring via point in time recovery (PITR). Conflicts with 'restore_backup_source', both can't be set together.
        Structure is documented below.
        """
        return pulumi.get(self, "restore_continuous_backup_source")

    @restore_continuous_backup_source.setter
    def restore_continuous_backup_source(self, value: Optional[pulumi.Input['ClusterRestoreContinuousBackupSourceArgs']]):
        pulumi.set(self, "restore_continuous_backup_source", value)


@pulumi.input_type
class _ClusterState:
    def __init__(__self__, *,
                 automated_backup_policy: Optional[pulumi.Input['ClusterAutomatedBackupPolicyArgs']] = None,
                 backup_sources: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterBackupSourceArgs']]]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 continuous_backup_config: Optional[pulumi.Input['ClusterContinuousBackupConfigArgs']] = None,
                 continuous_backup_infos: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterContinuousBackupInfoArgs']]]] = None,
                 database_version: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 encryption_config: Optional[pulumi.Input['ClusterEncryptionConfigArgs']] = None,
                 encryption_infos: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterEncryptionInfoArgs']]]] = None,
                 initial_user: Optional[pulumi.Input['ClusterInitialUserArgs']] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 migration_sources: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterMigrationSourceArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network: Optional[pulumi.Input[str]] = None,
                 network_config: Optional[pulumi.Input['ClusterNetworkConfigArgs']] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 restore_backup_source: Optional[pulumi.Input['ClusterRestoreBackupSourceArgs']] = None,
                 restore_continuous_backup_source: Optional[pulumi.Input['ClusterRestoreContinuousBackupSourceArgs']] = None,
                 uid: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Cluster resources.
        :param pulumi.Input['ClusterAutomatedBackupPolicyArgs'] automated_backup_policy: The automated backup policy for this cluster. AutomatedBackupPolicy is disabled by default.
               Structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterBackupSourceArgs']]] backup_sources: Cluster created from backup.
               Structure is documented below.
        :param pulumi.Input[str] cluster_id: The ID of the alloydb cluster.
        :param pulumi.Input['ClusterContinuousBackupConfigArgs'] continuous_backup_config: The continuous backup config for this cluster.
               If no policy is provided then the default policy will be used. The default policy takes one backup a day and retains backups for 14 days.
               Structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterContinuousBackupInfoArgs']]] continuous_backup_infos: ContinuousBackupInfo describes the continuous backup properties of a cluster.
               Structure is documented below.
        :param pulumi.Input[str] database_version: The database engine major version. This is an output-only field and it's populated at the Cluster creation time. This field cannot be changed after cluster creation.
        :param pulumi.Input[str] display_name: User-settable and human-readable display name for the Cluster.
        :param pulumi.Input['ClusterEncryptionConfigArgs'] encryption_config: EncryptionConfig describes the encryption config of a cluster or a backup that is encrypted with a CMEK (customer-managed encryption key).
               Structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterEncryptionInfoArgs']]] encryption_infos: (Output)
               Output only. The encryption information for the WALs and backups required for ContinuousBackup.
               Structure is documented below.
        :param pulumi.Input['ClusterInitialUserArgs'] initial_user: Initial user to setup during cluster creation.
               Structure is documented below.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: User-defined labels for the alloydb cluster.
        :param pulumi.Input[str] location: The location where the alloydb cluster should reside.
               
               
               - - -
        :param pulumi.Input[Sequence[pulumi.Input['ClusterMigrationSourceArgs']]] migration_sources: Cluster created via DMS migration.
               Structure is documented below.
        :param pulumi.Input[str] name: The name of the cluster resource.
        :param pulumi.Input[str] network: (Optional, Deprecated)
               The relative resource name of the VPC network on which the instance can be accessed. It is specified in the following form:
               "projects/{projectNumber}/global/networks/{network_id}".
               
               > **Warning:** `network` is deprecated and will be removed in a future major release. Instead, use `network_config` to define the network configuration.
        :param pulumi.Input['ClusterNetworkConfigArgs'] network_config: Metadata related to network configuration.
               Structure is documented below.
        :param pulumi.Input[str] project: The ID of the project in which the resource belongs.
               If it is not provided, the provider project is used.
        :param pulumi.Input['ClusterRestoreBackupSourceArgs'] restore_backup_source: The source when restoring from a backup. Conflicts with 'restore_continuous_backup_source', both can't be set together.
               Structure is documented below.
        :param pulumi.Input['ClusterRestoreContinuousBackupSourceArgs'] restore_continuous_backup_source: The source when restoring via point in time recovery (PITR). Conflicts with 'restore_backup_source', both can't be set together.
               Structure is documented below.
        :param pulumi.Input[str] uid: The system-generated UID of the resource.
        """
        _ClusterState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            automated_backup_policy=automated_backup_policy,
            backup_sources=backup_sources,
            cluster_id=cluster_id,
            continuous_backup_config=continuous_backup_config,
            continuous_backup_infos=continuous_backup_infos,
            database_version=database_version,
            display_name=display_name,
            encryption_config=encryption_config,
            encryption_infos=encryption_infos,
            initial_user=initial_user,
            labels=labels,
            location=location,
            migration_sources=migration_sources,
            name=name,
            network=network,
            network_config=network_config,
            project=project,
            restore_backup_source=restore_backup_source,
            restore_continuous_backup_source=restore_continuous_backup_source,
            uid=uid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             automated_backup_policy: Optional[pulumi.Input['ClusterAutomatedBackupPolicyArgs']] = None,
             backup_sources: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterBackupSourceArgs']]]] = None,
             cluster_id: Optional[pulumi.Input[str]] = None,
             continuous_backup_config: Optional[pulumi.Input['ClusterContinuousBackupConfigArgs']] = None,
             continuous_backup_infos: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterContinuousBackupInfoArgs']]]] = None,
             database_version: Optional[pulumi.Input[str]] = None,
             display_name: Optional[pulumi.Input[str]] = None,
             encryption_config: Optional[pulumi.Input['ClusterEncryptionConfigArgs']] = None,
             encryption_infos: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterEncryptionInfoArgs']]]] = None,
             initial_user: Optional[pulumi.Input['ClusterInitialUserArgs']] = None,
             labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             location: Optional[pulumi.Input[str]] = None,
             migration_sources: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterMigrationSourceArgs']]]] = None,
             name: Optional[pulumi.Input[str]] = None,
             network: Optional[pulumi.Input[str]] = None,
             network_config: Optional[pulumi.Input['ClusterNetworkConfigArgs']] = None,
             project: Optional[pulumi.Input[str]] = None,
             restore_backup_source: Optional[pulumi.Input['ClusterRestoreBackupSourceArgs']] = None,
             restore_continuous_backup_source: Optional[pulumi.Input['ClusterRestoreContinuousBackupSourceArgs']] = None,
             uid: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if automated_backup_policy is not None:
            _setter("automated_backup_policy", automated_backup_policy)
        if backup_sources is not None:
            _setter("backup_sources", backup_sources)
        if cluster_id is not None:
            _setter("cluster_id", cluster_id)
        if continuous_backup_config is not None:
            _setter("continuous_backup_config", continuous_backup_config)
        if continuous_backup_infos is not None:
            _setter("continuous_backup_infos", continuous_backup_infos)
        if database_version is not None:
            _setter("database_version", database_version)
        if display_name is not None:
            _setter("display_name", display_name)
        if encryption_config is not None:
            _setter("encryption_config", encryption_config)
        if encryption_infos is not None:
            _setter("encryption_infos", encryption_infos)
        if initial_user is not None:
            _setter("initial_user", initial_user)
        if labels is not None:
            _setter("labels", labels)
        if location is not None:
            _setter("location", location)
        if migration_sources is not None:
            _setter("migration_sources", migration_sources)
        if name is not None:
            _setter("name", name)
        if network is not None:
            warnings.warn("""`network` is deprecated and will be removed in a future major release. Instead, use `network_config` to define the network configuration.""", DeprecationWarning)
            pulumi.log.warn("""network is deprecated: `network` is deprecated and will be removed in a future major release. Instead, use `network_config` to define the network configuration.""")
        if network is not None:
            _setter("network", network)
        if network_config is not None:
            _setter("network_config", network_config)
        if project is not None:
            _setter("project", project)
        if restore_backup_source is not None:
            _setter("restore_backup_source", restore_backup_source)
        if restore_continuous_backup_source is not None:
            _setter("restore_continuous_backup_source", restore_continuous_backup_source)
        if uid is not None:
            _setter("uid", uid)

    @property
    @pulumi.getter(name="automatedBackupPolicy")
    def automated_backup_policy(self) -> Optional[pulumi.Input['ClusterAutomatedBackupPolicyArgs']]:
        """
        The automated backup policy for this cluster. AutomatedBackupPolicy is disabled by default.
        Structure is documented below.
        """
        return pulumi.get(self, "automated_backup_policy")

    @automated_backup_policy.setter
    def automated_backup_policy(self, value: Optional[pulumi.Input['ClusterAutomatedBackupPolicyArgs']]):
        pulumi.set(self, "automated_backup_policy", value)

    @property
    @pulumi.getter(name="backupSources")
    def backup_sources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterBackupSourceArgs']]]]:
        """
        Cluster created from backup.
        Structure is documented below.
        """
        return pulumi.get(self, "backup_sources")

    @backup_sources.setter
    def backup_sources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterBackupSourceArgs']]]]):
        pulumi.set(self, "backup_sources", value)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the alloydb cluster.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="continuousBackupConfig")
    def continuous_backup_config(self) -> Optional[pulumi.Input['ClusterContinuousBackupConfigArgs']]:
        """
        The continuous backup config for this cluster.
        If no policy is provided then the default policy will be used. The default policy takes one backup a day and retains backups for 14 days.
        Structure is documented below.
        """
        return pulumi.get(self, "continuous_backup_config")

    @continuous_backup_config.setter
    def continuous_backup_config(self, value: Optional[pulumi.Input['ClusterContinuousBackupConfigArgs']]):
        pulumi.set(self, "continuous_backup_config", value)

    @property
    @pulumi.getter(name="continuousBackupInfos")
    def continuous_backup_infos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterContinuousBackupInfoArgs']]]]:
        """
        ContinuousBackupInfo describes the continuous backup properties of a cluster.
        Structure is documented below.
        """
        return pulumi.get(self, "continuous_backup_infos")

    @continuous_backup_infos.setter
    def continuous_backup_infos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterContinuousBackupInfoArgs']]]]):
        pulumi.set(self, "continuous_backup_infos", value)

    @property
    @pulumi.getter(name="databaseVersion")
    def database_version(self) -> Optional[pulumi.Input[str]]:
        """
        The database engine major version. This is an output-only field and it's populated at the Cluster creation time. This field cannot be changed after cluster creation.
        """
        return pulumi.get(self, "database_version")

    @database_version.setter
    def database_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_version", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        User-settable and human-readable display name for the Cluster.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="encryptionConfig")
    def encryption_config(self) -> Optional[pulumi.Input['ClusterEncryptionConfigArgs']]:
        """
        EncryptionConfig describes the encryption config of a cluster or a backup that is encrypted with a CMEK (customer-managed encryption key).
        Structure is documented below.
        """
        return pulumi.get(self, "encryption_config")

    @encryption_config.setter
    def encryption_config(self, value: Optional[pulumi.Input['ClusterEncryptionConfigArgs']]):
        pulumi.set(self, "encryption_config", value)

    @property
    @pulumi.getter(name="encryptionInfos")
    def encryption_infos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterEncryptionInfoArgs']]]]:
        """
        (Output)
        Output only. The encryption information for the WALs and backups required for ContinuousBackup.
        Structure is documented below.
        """
        return pulumi.get(self, "encryption_infos")

    @encryption_infos.setter
    def encryption_infos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterEncryptionInfoArgs']]]]):
        pulumi.set(self, "encryption_infos", value)

    @property
    @pulumi.getter(name="initialUser")
    def initial_user(self) -> Optional[pulumi.Input['ClusterInitialUserArgs']]:
        """
        Initial user to setup during cluster creation.
        Structure is documented below.
        """
        return pulumi.get(self, "initial_user")

    @initial_user.setter
    def initial_user(self, value: Optional[pulumi.Input['ClusterInitialUserArgs']]):
        pulumi.set(self, "initial_user", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        User-defined labels for the alloydb cluster.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        The location where the alloydb cluster should reside.


        - - -
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="migrationSources")
    def migration_sources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterMigrationSourceArgs']]]]:
        """
        Cluster created via DMS migration.
        Structure is documented below.
        """
        return pulumi.get(self, "migration_sources")

    @migration_sources.setter
    def migration_sources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterMigrationSourceArgs']]]]):
        pulumi.set(self, "migration_sources", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the cluster resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def network(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional, Deprecated)
        The relative resource name of the VPC network on which the instance can be accessed. It is specified in the following form:
        "projects/{projectNumber}/global/networks/{network_id}".

        > **Warning:** `network` is deprecated and will be removed in a future major release. Instead, use `network_config` to define the network configuration.
        """
        warnings.warn("""`network` is deprecated and will be removed in a future major release. Instead, use `network_config` to define the network configuration.""", DeprecationWarning)
        pulumi.log.warn("""network is deprecated: `network` is deprecated and will be removed in a future major release. Instead, use `network_config` to define the network configuration.""")

        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter(name="networkConfig")
    def network_config(self) -> Optional[pulumi.Input['ClusterNetworkConfigArgs']]:
        """
        Metadata related to network configuration.
        Structure is documented below.
        """
        return pulumi.get(self, "network_config")

    @network_config.setter
    def network_config(self, value: Optional[pulumi.Input['ClusterNetworkConfigArgs']]):
        pulumi.set(self, "network_config", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the project in which the resource belongs.
        If it is not provided, the provider project is used.
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="restoreBackupSource")
    def restore_backup_source(self) -> Optional[pulumi.Input['ClusterRestoreBackupSourceArgs']]:
        """
        The source when restoring from a backup. Conflicts with 'restore_continuous_backup_source', both can't be set together.
        Structure is documented below.
        """
        return pulumi.get(self, "restore_backup_source")

    @restore_backup_source.setter
    def restore_backup_source(self, value: Optional[pulumi.Input['ClusterRestoreBackupSourceArgs']]):
        pulumi.set(self, "restore_backup_source", value)

    @property
    @pulumi.getter(name="restoreContinuousBackupSource")
    def restore_continuous_backup_source(self) -> Optional[pulumi.Input['ClusterRestoreContinuousBackupSourceArgs']]:
        """
        The source when restoring via point in time recovery (PITR). Conflicts with 'restore_backup_source', both can't be set together.
        Structure is documented below.
        """
        return pulumi.get(self, "restore_continuous_backup_source")

    @restore_continuous_backup_source.setter
    def restore_continuous_backup_source(self, value: Optional[pulumi.Input['ClusterRestoreContinuousBackupSourceArgs']]):
        pulumi.set(self, "restore_continuous_backup_source", value)

    @property
    @pulumi.getter
    def uid(self) -> Optional[pulumi.Input[str]]:
        """
        The system-generated UID of the resource.
        """
        return pulumi.get(self, "uid")

    @uid.setter
    def uid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uid", value)


class Cluster(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 automated_backup_policy: Optional[pulumi.Input[pulumi.InputType['ClusterAutomatedBackupPolicyArgs']]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 continuous_backup_config: Optional[pulumi.Input[pulumi.InputType['ClusterContinuousBackupConfigArgs']]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 encryption_config: Optional[pulumi.Input[pulumi.InputType['ClusterEncryptionConfigArgs']]] = None,
                 initial_user: Optional[pulumi.Input[pulumi.InputType['ClusterInitialUserArgs']]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 network: Optional[pulumi.Input[str]] = None,
                 network_config: Optional[pulumi.Input[pulumi.InputType['ClusterNetworkConfigArgs']]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 restore_backup_source: Optional[pulumi.Input[pulumi.InputType['ClusterRestoreBackupSourceArgs']]] = None,
                 restore_continuous_backup_source: Optional[pulumi.Input[pulumi.InputType['ClusterRestoreContinuousBackupSourceArgs']]] = None,
                 __props__=None):
        """
        A managed alloydb cluster.

        To get more information about Cluster, see:

        * [API documentation](https://cloud.google.com/alloydb/docs/reference/rest/v1/projects.locations.clusters/create)
        * How-to Guides
            * [AlloyDB](https://cloud.google.com/alloydb/docs/)

        > **Warning:** All arguments including the following potentially sensitive
        values will be stored in the raw state as plain text: `initial_user.password`.
        Read more about sensitive data in state.

        ## Example Usage
        ### Alloydb Cluster Basic

        ```python
        import pulumi
        import pulumi_gcp as gcp

        default_network = gcp.compute.Network("defaultNetwork")
        default_cluster = gcp.alloydb.Cluster("defaultCluster",
            cluster_id="alloydb-cluster",
            location="us-central1",
            network=default_network.id)
        project = gcp.organizations.get_project()
        ```
        ### Alloydb Cluster Full

        ```python
        import pulumi
        import pulumi_gcp as gcp

        default = gcp.compute.Network("default")
        full = gcp.alloydb.Cluster("full",
            cluster_id="alloydb-cluster-full",
            location="us-central1",
            network=default.id,
            initial_user=gcp.alloydb.ClusterInitialUserArgs(
                user="alloydb-cluster-full",
                password="alloydb-cluster-full",
            ),
            continuous_backup_config=gcp.alloydb.ClusterContinuousBackupConfigArgs(
                enabled=True,
                recovery_window_days=14,
            ),
            automated_backup_policy=gcp.alloydb.ClusterAutomatedBackupPolicyArgs(
                location="us-central1",
                backup_window="1800s",
                enabled=True,
                weekly_schedule=gcp.alloydb.ClusterAutomatedBackupPolicyWeeklyScheduleArgs(
                    days_of_weeks=["MONDAY"],
                    start_times=[gcp.alloydb.ClusterAutomatedBackupPolicyWeeklyScheduleStartTimeArgs(
                        hours=23,
                        minutes=0,
                        seconds=0,
                        nanos=0,
                    )],
                ),
                quantity_based_retention=gcp.alloydb.ClusterAutomatedBackupPolicyQuantityBasedRetentionArgs(
                    count=1,
                ),
                labels={
                    "test": "alloydb-cluster-full",
                },
            ),
            labels={
                "test": "alloydb-cluster-full",
            })
        project = gcp.organizations.get_project()
        ```
        ### Alloydb Cluster Restore

        ```python
        import pulumi
        import pulumi_gcp as gcp

        default = gcp.compute.get_network(name="alloydb-network")
        source_cluster = gcp.alloydb.Cluster("sourceCluster",
            cluster_id="alloydb-source-cluster",
            location="us-central1",
            network=default.id,
            initial_user=gcp.alloydb.ClusterInitialUserArgs(
                password="alloydb-source-cluster",
            ))
        private_ip_alloc = gcp.compute.GlobalAddress("privateIpAlloc",
            address_type="INTERNAL",
            purpose="VPC_PEERING",
            prefix_length=16,
            network=default.id)
        vpc_connection = gcp.servicenetworking.Connection("vpcConnection",
            network=default.id,
            service="servicenetworking.googleapis.com",
            reserved_peering_ranges=[private_ip_alloc.name])
        source_instance = gcp.alloydb.Instance("sourceInstance",
            cluster=source_cluster.name,
            instance_id="alloydb-instance",
            instance_type="PRIMARY",
            machine_config=gcp.alloydb.InstanceMachineConfigArgs(
                cpu_count=2,
            ),
            opts=pulumi.ResourceOptions(depends_on=[vpc_connection]))
        source_backup = gcp.alloydb.Backup("sourceBackup",
            backup_id="alloydb-backup",
            location="us-central1",
            cluster_name=source_cluster.name,
            opts=pulumi.ResourceOptions(depends_on=[source_instance]))
        restored_from_backup = gcp.alloydb.Cluster("restoredFromBackup",
            cluster_id="alloydb-backup-restored",
            location="us-central1",
            network=default.id,
            restore_backup_source=gcp.alloydb.ClusterRestoreBackupSourceArgs(
                backup_name=source_backup.name,
            ))
        restored_via_pitr = gcp.alloydb.Cluster("restoredViaPitr",
            cluster_id="alloydb-pitr-restored",
            location="us-central1",
            network=default.id,
            restore_continuous_backup_source=gcp.alloydb.ClusterRestoreContinuousBackupSourceArgs(
                cluster=source_cluster.name,
                point_in_time="2023-08-03T19:19:00.094Z",
            ))
        project = gcp.organizations.get_project()
        ```

        ## Import

        Cluster can be imported using any of these accepted formats

        ```sh
         $ pulumi import gcp:alloydb/cluster:Cluster default projects/{{project}}/locations/{{location}}/clusters/{{cluster_id}}
        ```

        ```sh
         $ pulumi import gcp:alloydb/cluster:Cluster default {{project}}/{{location}}/{{cluster_id}}
        ```

        ```sh
         $ pulumi import gcp:alloydb/cluster:Cluster default {{location}}/{{cluster_id}}
        ```

        ```sh
         $ pulumi import gcp:alloydb/cluster:Cluster default {{cluster_id}}
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['ClusterAutomatedBackupPolicyArgs']] automated_backup_policy: The automated backup policy for this cluster. AutomatedBackupPolicy is disabled by default.
               Structure is documented below.
        :param pulumi.Input[str] cluster_id: The ID of the alloydb cluster.
        :param pulumi.Input[pulumi.InputType['ClusterContinuousBackupConfigArgs']] continuous_backup_config: The continuous backup config for this cluster.
               If no policy is provided then the default policy will be used. The default policy takes one backup a day and retains backups for 14 days.
               Structure is documented below.
        :param pulumi.Input[str] display_name: User-settable and human-readable display name for the Cluster.
        :param pulumi.Input[pulumi.InputType['ClusterEncryptionConfigArgs']] encryption_config: EncryptionConfig describes the encryption config of a cluster or a backup that is encrypted with a CMEK (customer-managed encryption key).
               Structure is documented below.
        :param pulumi.Input[pulumi.InputType['ClusterInitialUserArgs']] initial_user: Initial user to setup during cluster creation.
               Structure is documented below.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: User-defined labels for the alloydb cluster.
        :param pulumi.Input[str] location: The location where the alloydb cluster should reside.
               
               
               - - -
        :param pulumi.Input[str] network: (Optional, Deprecated)
               The relative resource name of the VPC network on which the instance can be accessed. It is specified in the following form:
               "projects/{projectNumber}/global/networks/{network_id}".
               
               > **Warning:** `network` is deprecated and will be removed in a future major release. Instead, use `network_config` to define the network configuration.
        :param pulumi.Input[pulumi.InputType['ClusterNetworkConfigArgs']] network_config: Metadata related to network configuration.
               Structure is documented below.
        :param pulumi.Input[str] project: The ID of the project in which the resource belongs.
               If it is not provided, the provider project is used.
        :param pulumi.Input[pulumi.InputType['ClusterRestoreBackupSourceArgs']] restore_backup_source: The source when restoring from a backup. Conflicts with 'restore_continuous_backup_source', both can't be set together.
               Structure is documented below.
        :param pulumi.Input[pulumi.InputType['ClusterRestoreContinuousBackupSourceArgs']] restore_continuous_backup_source: The source when restoring via point in time recovery (PITR). Conflicts with 'restore_backup_source', both can't be set together.
               Structure is documented below.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ClusterArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        A managed alloydb cluster.

        To get more information about Cluster, see:

        * [API documentation](https://cloud.google.com/alloydb/docs/reference/rest/v1/projects.locations.clusters/create)
        * How-to Guides
            * [AlloyDB](https://cloud.google.com/alloydb/docs/)

        > **Warning:** All arguments including the following potentially sensitive
        values will be stored in the raw state as plain text: `initial_user.password`.
        Read more about sensitive data in state.

        ## Example Usage
        ### Alloydb Cluster Basic

        ```python
        import pulumi
        import pulumi_gcp as gcp

        default_network = gcp.compute.Network("defaultNetwork")
        default_cluster = gcp.alloydb.Cluster("defaultCluster",
            cluster_id="alloydb-cluster",
            location="us-central1",
            network=default_network.id)
        project = gcp.organizations.get_project()
        ```
        ### Alloydb Cluster Full

        ```python
        import pulumi
        import pulumi_gcp as gcp

        default = gcp.compute.Network("default")
        full = gcp.alloydb.Cluster("full",
            cluster_id="alloydb-cluster-full",
            location="us-central1",
            network=default.id,
            initial_user=gcp.alloydb.ClusterInitialUserArgs(
                user="alloydb-cluster-full",
                password="alloydb-cluster-full",
            ),
            continuous_backup_config=gcp.alloydb.ClusterContinuousBackupConfigArgs(
                enabled=True,
                recovery_window_days=14,
            ),
            automated_backup_policy=gcp.alloydb.ClusterAutomatedBackupPolicyArgs(
                location="us-central1",
                backup_window="1800s",
                enabled=True,
                weekly_schedule=gcp.alloydb.ClusterAutomatedBackupPolicyWeeklyScheduleArgs(
                    days_of_weeks=["MONDAY"],
                    start_times=[gcp.alloydb.ClusterAutomatedBackupPolicyWeeklyScheduleStartTimeArgs(
                        hours=23,
                        minutes=0,
                        seconds=0,
                        nanos=0,
                    )],
                ),
                quantity_based_retention=gcp.alloydb.ClusterAutomatedBackupPolicyQuantityBasedRetentionArgs(
                    count=1,
                ),
                labels={
                    "test": "alloydb-cluster-full",
                },
            ),
            labels={
                "test": "alloydb-cluster-full",
            })
        project = gcp.organizations.get_project()
        ```
        ### Alloydb Cluster Restore

        ```python
        import pulumi
        import pulumi_gcp as gcp

        default = gcp.compute.get_network(name="alloydb-network")
        source_cluster = gcp.alloydb.Cluster("sourceCluster",
            cluster_id="alloydb-source-cluster",
            location="us-central1",
            network=default.id,
            initial_user=gcp.alloydb.ClusterInitialUserArgs(
                password="alloydb-source-cluster",
            ))
        private_ip_alloc = gcp.compute.GlobalAddress("privateIpAlloc",
            address_type="INTERNAL",
            purpose="VPC_PEERING",
            prefix_length=16,
            network=default.id)
        vpc_connection = gcp.servicenetworking.Connection("vpcConnection",
            network=default.id,
            service="servicenetworking.googleapis.com",
            reserved_peering_ranges=[private_ip_alloc.name])
        source_instance = gcp.alloydb.Instance("sourceInstance",
            cluster=source_cluster.name,
            instance_id="alloydb-instance",
            instance_type="PRIMARY",
            machine_config=gcp.alloydb.InstanceMachineConfigArgs(
                cpu_count=2,
            ),
            opts=pulumi.ResourceOptions(depends_on=[vpc_connection]))
        source_backup = gcp.alloydb.Backup("sourceBackup",
            backup_id="alloydb-backup",
            location="us-central1",
            cluster_name=source_cluster.name,
            opts=pulumi.ResourceOptions(depends_on=[source_instance]))
        restored_from_backup = gcp.alloydb.Cluster("restoredFromBackup",
            cluster_id="alloydb-backup-restored",
            location="us-central1",
            network=default.id,
            restore_backup_source=gcp.alloydb.ClusterRestoreBackupSourceArgs(
                backup_name=source_backup.name,
            ))
        restored_via_pitr = gcp.alloydb.Cluster("restoredViaPitr",
            cluster_id="alloydb-pitr-restored",
            location="us-central1",
            network=default.id,
            restore_continuous_backup_source=gcp.alloydb.ClusterRestoreContinuousBackupSourceArgs(
                cluster=source_cluster.name,
                point_in_time="2023-08-03T19:19:00.094Z",
            ))
        project = gcp.organizations.get_project()
        ```

        ## Import

        Cluster can be imported using any of these accepted formats

        ```sh
         $ pulumi import gcp:alloydb/cluster:Cluster default projects/{{project}}/locations/{{location}}/clusters/{{cluster_id}}
        ```

        ```sh
         $ pulumi import gcp:alloydb/cluster:Cluster default {{project}}/{{location}}/{{cluster_id}}
        ```

        ```sh
         $ pulumi import gcp:alloydb/cluster:Cluster default {{location}}/{{cluster_id}}
        ```

        ```sh
         $ pulumi import gcp:alloydb/cluster:Cluster default {{cluster_id}}
        ```

        :param str resource_name: The name of the resource.
        :param ClusterArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ClusterArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            ClusterArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 automated_backup_policy: Optional[pulumi.Input[pulumi.InputType['ClusterAutomatedBackupPolicyArgs']]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 continuous_backup_config: Optional[pulumi.Input[pulumi.InputType['ClusterContinuousBackupConfigArgs']]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 encryption_config: Optional[pulumi.Input[pulumi.InputType['ClusterEncryptionConfigArgs']]] = None,
                 initial_user: Optional[pulumi.Input[pulumi.InputType['ClusterInitialUserArgs']]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 network: Optional[pulumi.Input[str]] = None,
                 network_config: Optional[pulumi.Input[pulumi.InputType['ClusterNetworkConfigArgs']]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 restore_backup_source: Optional[pulumi.Input[pulumi.InputType['ClusterRestoreBackupSourceArgs']]] = None,
                 restore_continuous_backup_source: Optional[pulumi.Input[pulumi.InputType['ClusterRestoreContinuousBackupSourceArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ClusterArgs.__new__(ClusterArgs)

            if automated_backup_policy is not None and not isinstance(automated_backup_policy, ClusterAutomatedBackupPolicyArgs):
                automated_backup_policy = automated_backup_policy or {}
                def _setter(key, value):
                    automated_backup_policy[key] = value
                ClusterAutomatedBackupPolicyArgs._configure(_setter, **automated_backup_policy)
            __props__.__dict__["automated_backup_policy"] = automated_backup_policy
            if cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_id'")
            __props__.__dict__["cluster_id"] = cluster_id
            if continuous_backup_config is not None and not isinstance(continuous_backup_config, ClusterContinuousBackupConfigArgs):
                continuous_backup_config = continuous_backup_config or {}
                def _setter(key, value):
                    continuous_backup_config[key] = value
                ClusterContinuousBackupConfigArgs._configure(_setter, **continuous_backup_config)
            __props__.__dict__["continuous_backup_config"] = continuous_backup_config
            __props__.__dict__["display_name"] = display_name
            if encryption_config is not None and not isinstance(encryption_config, ClusterEncryptionConfigArgs):
                encryption_config = encryption_config or {}
                def _setter(key, value):
                    encryption_config[key] = value
                ClusterEncryptionConfigArgs._configure(_setter, **encryption_config)
            __props__.__dict__["encryption_config"] = encryption_config
            if initial_user is not None and not isinstance(initial_user, ClusterInitialUserArgs):
                initial_user = initial_user or {}
                def _setter(key, value):
                    initial_user[key] = value
                ClusterInitialUserArgs._configure(_setter, **initial_user)
            __props__.__dict__["initial_user"] = initial_user
            __props__.__dict__["labels"] = labels
            if location is None and not opts.urn:
                raise TypeError("Missing required property 'location'")
            __props__.__dict__["location"] = location
            __props__.__dict__["network"] = network
            if network_config is not None and not isinstance(network_config, ClusterNetworkConfigArgs):
                network_config = network_config or {}
                def _setter(key, value):
                    network_config[key] = value
                ClusterNetworkConfigArgs._configure(_setter, **network_config)
            __props__.__dict__["network_config"] = network_config
            __props__.__dict__["project"] = project
            if restore_backup_source is not None and not isinstance(restore_backup_source, ClusterRestoreBackupSourceArgs):
                restore_backup_source = restore_backup_source or {}
                def _setter(key, value):
                    restore_backup_source[key] = value
                ClusterRestoreBackupSourceArgs._configure(_setter, **restore_backup_source)
            __props__.__dict__["restore_backup_source"] = restore_backup_source
            if restore_continuous_backup_source is not None and not isinstance(restore_continuous_backup_source, ClusterRestoreContinuousBackupSourceArgs):
                restore_continuous_backup_source = restore_continuous_backup_source or {}
                def _setter(key, value):
                    restore_continuous_backup_source[key] = value
                ClusterRestoreContinuousBackupSourceArgs._configure(_setter, **restore_continuous_backup_source)
            __props__.__dict__["restore_continuous_backup_source"] = restore_continuous_backup_source
            __props__.__dict__["backup_sources"] = None
            __props__.__dict__["continuous_backup_infos"] = None
            __props__.__dict__["database_version"] = None
            __props__.__dict__["encryption_infos"] = None
            __props__.__dict__["migration_sources"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["uid"] = None
        super(Cluster, __self__).__init__(
            'gcp:alloydb/cluster:Cluster',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            automated_backup_policy: Optional[pulumi.Input[pulumi.InputType['ClusterAutomatedBackupPolicyArgs']]] = None,
            backup_sources: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterBackupSourceArgs']]]]] = None,
            cluster_id: Optional[pulumi.Input[str]] = None,
            continuous_backup_config: Optional[pulumi.Input[pulumi.InputType['ClusterContinuousBackupConfigArgs']]] = None,
            continuous_backup_infos: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterContinuousBackupInfoArgs']]]]] = None,
            database_version: Optional[pulumi.Input[str]] = None,
            display_name: Optional[pulumi.Input[str]] = None,
            encryption_config: Optional[pulumi.Input[pulumi.InputType['ClusterEncryptionConfigArgs']]] = None,
            encryption_infos: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterEncryptionInfoArgs']]]]] = None,
            initial_user: Optional[pulumi.Input[pulumi.InputType['ClusterInitialUserArgs']]] = None,
            labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            location: Optional[pulumi.Input[str]] = None,
            migration_sources: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterMigrationSourceArgs']]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            network: Optional[pulumi.Input[str]] = None,
            network_config: Optional[pulumi.Input[pulumi.InputType['ClusterNetworkConfigArgs']]] = None,
            project: Optional[pulumi.Input[str]] = None,
            restore_backup_source: Optional[pulumi.Input[pulumi.InputType['ClusterRestoreBackupSourceArgs']]] = None,
            restore_continuous_backup_source: Optional[pulumi.Input[pulumi.InputType['ClusterRestoreContinuousBackupSourceArgs']]] = None,
            uid: Optional[pulumi.Input[str]] = None) -> 'Cluster':
        """
        Get an existing Cluster resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['ClusterAutomatedBackupPolicyArgs']] automated_backup_policy: The automated backup policy for this cluster. AutomatedBackupPolicy is disabled by default.
               Structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterBackupSourceArgs']]]] backup_sources: Cluster created from backup.
               Structure is documented below.
        :param pulumi.Input[str] cluster_id: The ID of the alloydb cluster.
        :param pulumi.Input[pulumi.InputType['ClusterContinuousBackupConfigArgs']] continuous_backup_config: The continuous backup config for this cluster.
               If no policy is provided then the default policy will be used. The default policy takes one backup a day and retains backups for 14 days.
               Structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterContinuousBackupInfoArgs']]]] continuous_backup_infos: ContinuousBackupInfo describes the continuous backup properties of a cluster.
               Structure is documented below.
        :param pulumi.Input[str] database_version: The database engine major version. This is an output-only field and it's populated at the Cluster creation time. This field cannot be changed after cluster creation.
        :param pulumi.Input[str] display_name: User-settable and human-readable display name for the Cluster.
        :param pulumi.Input[pulumi.InputType['ClusterEncryptionConfigArgs']] encryption_config: EncryptionConfig describes the encryption config of a cluster or a backup that is encrypted with a CMEK (customer-managed encryption key).
               Structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterEncryptionInfoArgs']]]] encryption_infos: (Output)
               Output only. The encryption information for the WALs and backups required for ContinuousBackup.
               Structure is documented below.
        :param pulumi.Input[pulumi.InputType['ClusterInitialUserArgs']] initial_user: Initial user to setup during cluster creation.
               Structure is documented below.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: User-defined labels for the alloydb cluster.
        :param pulumi.Input[str] location: The location where the alloydb cluster should reside.
               
               
               - - -
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterMigrationSourceArgs']]]] migration_sources: Cluster created via DMS migration.
               Structure is documented below.
        :param pulumi.Input[str] name: The name of the cluster resource.
        :param pulumi.Input[str] network: (Optional, Deprecated)
               The relative resource name of the VPC network on which the instance can be accessed. It is specified in the following form:
               "projects/{projectNumber}/global/networks/{network_id}".
               
               > **Warning:** `network` is deprecated and will be removed in a future major release. Instead, use `network_config` to define the network configuration.
        :param pulumi.Input[pulumi.InputType['ClusterNetworkConfigArgs']] network_config: Metadata related to network configuration.
               Structure is documented below.
        :param pulumi.Input[str] project: The ID of the project in which the resource belongs.
               If it is not provided, the provider project is used.
        :param pulumi.Input[pulumi.InputType['ClusterRestoreBackupSourceArgs']] restore_backup_source: The source when restoring from a backup. Conflicts with 'restore_continuous_backup_source', both can't be set together.
               Structure is documented below.
        :param pulumi.Input[pulumi.InputType['ClusterRestoreContinuousBackupSourceArgs']] restore_continuous_backup_source: The source when restoring via point in time recovery (PITR). Conflicts with 'restore_backup_source', both can't be set together.
               Structure is documented below.
        :param pulumi.Input[str] uid: The system-generated UID of the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ClusterState.__new__(_ClusterState)

        __props__.__dict__["automated_backup_policy"] = automated_backup_policy
        __props__.__dict__["backup_sources"] = backup_sources
        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["continuous_backup_config"] = continuous_backup_config
        __props__.__dict__["continuous_backup_infos"] = continuous_backup_infos
        __props__.__dict__["database_version"] = database_version
        __props__.__dict__["display_name"] = display_name
        __props__.__dict__["encryption_config"] = encryption_config
        __props__.__dict__["encryption_infos"] = encryption_infos
        __props__.__dict__["initial_user"] = initial_user
        __props__.__dict__["labels"] = labels
        __props__.__dict__["location"] = location
        __props__.__dict__["migration_sources"] = migration_sources
        __props__.__dict__["name"] = name
        __props__.__dict__["network"] = network
        __props__.__dict__["network_config"] = network_config
        __props__.__dict__["project"] = project
        __props__.__dict__["restore_backup_source"] = restore_backup_source
        __props__.__dict__["restore_continuous_backup_source"] = restore_continuous_backup_source
        __props__.__dict__["uid"] = uid
        return Cluster(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="automatedBackupPolicy")
    def automated_backup_policy(self) -> pulumi.Output['outputs.ClusterAutomatedBackupPolicy']:
        """
        The automated backup policy for this cluster. AutomatedBackupPolicy is disabled by default.
        Structure is documented below.
        """
        return pulumi.get(self, "automated_backup_policy")

    @property
    @pulumi.getter(name="backupSources")
    def backup_sources(self) -> pulumi.Output[Sequence['outputs.ClusterBackupSource']]:
        """
        Cluster created from backup.
        Structure is documented below.
        """
        return pulumi.get(self, "backup_sources")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[str]:
        """
        The ID of the alloydb cluster.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="continuousBackupConfig")
    def continuous_backup_config(self) -> pulumi.Output['outputs.ClusterContinuousBackupConfig']:
        """
        The continuous backup config for this cluster.
        If no policy is provided then the default policy will be used. The default policy takes one backup a day and retains backups for 14 days.
        Structure is documented below.
        """
        return pulumi.get(self, "continuous_backup_config")

    @property
    @pulumi.getter(name="continuousBackupInfos")
    def continuous_backup_infos(self) -> pulumi.Output[Sequence['outputs.ClusterContinuousBackupInfo']]:
        """
        ContinuousBackupInfo describes the continuous backup properties of a cluster.
        Structure is documented below.
        """
        return pulumi.get(self, "continuous_backup_infos")

    @property
    @pulumi.getter(name="databaseVersion")
    def database_version(self) -> pulumi.Output[str]:
        """
        The database engine major version. This is an output-only field and it's populated at the Cluster creation time. This field cannot be changed after cluster creation.
        """
        return pulumi.get(self, "database_version")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[Optional[str]]:
        """
        User-settable and human-readable display name for the Cluster.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="encryptionConfig")
    def encryption_config(self) -> pulumi.Output[Optional['outputs.ClusterEncryptionConfig']]:
        """
        EncryptionConfig describes the encryption config of a cluster or a backup that is encrypted with a CMEK (customer-managed encryption key).
        Structure is documented below.
        """
        return pulumi.get(self, "encryption_config")

    @property
    @pulumi.getter(name="encryptionInfos")
    def encryption_infos(self) -> pulumi.Output[Sequence['outputs.ClusterEncryptionInfo']]:
        """
        (Output)
        Output only. The encryption information for the WALs and backups required for ContinuousBackup.
        Structure is documented below.
        """
        return pulumi.get(self, "encryption_infos")

    @property
    @pulumi.getter(name="initialUser")
    def initial_user(self) -> pulumi.Output[Optional['outputs.ClusterInitialUser']]:
        """
        Initial user to setup during cluster creation.
        Structure is documented below.
        """
        return pulumi.get(self, "initial_user")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        User-defined labels for the alloydb cluster.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        """
        The location where the alloydb cluster should reside.


        - - -
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="migrationSources")
    def migration_sources(self) -> pulumi.Output[Sequence['outputs.ClusterMigrationSource']]:
        """
        Cluster created via DMS migration.
        Structure is documented below.
        """
        return pulumi.get(self, "migration_sources")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the cluster resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def network(self) -> pulumi.Output[str]:
        """
        (Optional, Deprecated)
        The relative resource name of the VPC network on which the instance can be accessed. It is specified in the following form:
        "projects/{projectNumber}/global/networks/{network_id}".

        > **Warning:** `network` is deprecated and will be removed in a future major release. Instead, use `network_config` to define the network configuration.
        """
        warnings.warn("""`network` is deprecated and will be removed in a future major release. Instead, use `network_config` to define the network configuration.""", DeprecationWarning)
        pulumi.log.warn("""network is deprecated: `network` is deprecated and will be removed in a future major release. Instead, use `network_config` to define the network configuration.""")

        return pulumi.get(self, "network")

    @property
    @pulumi.getter(name="networkConfig")
    def network_config(self) -> pulumi.Output['outputs.ClusterNetworkConfig']:
        """
        Metadata related to network configuration.
        Structure is documented below.
        """
        return pulumi.get(self, "network_config")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[str]:
        """
        The ID of the project in which the resource belongs.
        If it is not provided, the provider project is used.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="restoreBackupSource")
    def restore_backup_source(self) -> pulumi.Output[Optional['outputs.ClusterRestoreBackupSource']]:
        """
        The source when restoring from a backup. Conflicts with 'restore_continuous_backup_source', both can't be set together.
        Structure is documented below.
        """
        return pulumi.get(self, "restore_backup_source")

    @property
    @pulumi.getter(name="restoreContinuousBackupSource")
    def restore_continuous_backup_source(self) -> pulumi.Output[Optional['outputs.ClusterRestoreContinuousBackupSource']]:
        """
        The source when restoring via point in time recovery (PITR). Conflicts with 'restore_backup_source', both can't be set together.
        Structure is documented below.
        """
        return pulumi.get(self, "restore_continuous_backup_source")

    @property
    @pulumi.getter
    def uid(self) -> pulumi.Output[str]:
        """
        The system-generated UID of the resource.
        """
        return pulumi.get(self, "uid")

