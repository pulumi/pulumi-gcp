# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetInstanceResult',
    'AwaitableGetInstanceResult',
    'get_instance',
    'get_instance_output',
]

@pulumi.output_type
class GetInstanceResult:
    """
    A collection of values returned by getInstance.
    """
    def __init__(__self__, annotations=None, availability_type=None, client_connection_configs=None, cluster=None, cluster_id=None, create_time=None, database_flags=None, display_name=None, effective_annotations=None, effective_labels=None, gce_zone=None, id=None, instance_id=None, instance_type=None, ip_address=None, labels=None, location=None, machine_configs=None, name=None, network_configs=None, observability_configs=None, outbound_public_ip_addresses=None, project=None, psc_instance_configs=None, public_ip_address=None, pulumi_labels=None, query_insights_configs=None, read_pool_configs=None, reconciling=None, state=None, uid=None, update_time=None):
        if annotations and not isinstance(annotations, dict):
            raise TypeError("Expected argument 'annotations' to be a dict")
        pulumi.set(__self__, "annotations", annotations)
        if availability_type and not isinstance(availability_type, str):
            raise TypeError("Expected argument 'availability_type' to be a str")
        pulumi.set(__self__, "availability_type", availability_type)
        if client_connection_configs and not isinstance(client_connection_configs, list):
            raise TypeError("Expected argument 'client_connection_configs' to be a list")
        pulumi.set(__self__, "client_connection_configs", client_connection_configs)
        if cluster and not isinstance(cluster, str):
            raise TypeError("Expected argument 'cluster' to be a str")
        pulumi.set(__self__, "cluster", cluster)
        if cluster_id and not isinstance(cluster_id, str):
            raise TypeError("Expected argument 'cluster_id' to be a str")
        pulumi.set(__self__, "cluster_id", cluster_id)
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if database_flags and not isinstance(database_flags, dict):
            raise TypeError("Expected argument 'database_flags' to be a dict")
        pulumi.set(__self__, "database_flags", database_flags)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if effective_annotations and not isinstance(effective_annotations, dict):
            raise TypeError("Expected argument 'effective_annotations' to be a dict")
        pulumi.set(__self__, "effective_annotations", effective_annotations)
        if effective_labels and not isinstance(effective_labels, dict):
            raise TypeError("Expected argument 'effective_labels' to be a dict")
        pulumi.set(__self__, "effective_labels", effective_labels)
        if gce_zone and not isinstance(gce_zone, str):
            raise TypeError("Expected argument 'gce_zone' to be a str")
        pulumi.set(__self__, "gce_zone", gce_zone)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if instance_type and not isinstance(instance_type, str):
            raise TypeError("Expected argument 'instance_type' to be a str")
        pulumi.set(__self__, "instance_type", instance_type)
        if ip_address and not isinstance(ip_address, str):
            raise TypeError("Expected argument 'ip_address' to be a str")
        pulumi.set(__self__, "ip_address", ip_address)
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        pulumi.set(__self__, "labels", labels)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if machine_configs and not isinstance(machine_configs, list):
            raise TypeError("Expected argument 'machine_configs' to be a list")
        pulumi.set(__self__, "machine_configs", machine_configs)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if network_configs and not isinstance(network_configs, list):
            raise TypeError("Expected argument 'network_configs' to be a list")
        pulumi.set(__self__, "network_configs", network_configs)
        if observability_configs and not isinstance(observability_configs, list):
            raise TypeError("Expected argument 'observability_configs' to be a list")
        pulumi.set(__self__, "observability_configs", observability_configs)
        if outbound_public_ip_addresses and not isinstance(outbound_public_ip_addresses, list):
            raise TypeError("Expected argument 'outbound_public_ip_addresses' to be a list")
        pulumi.set(__self__, "outbound_public_ip_addresses", outbound_public_ip_addresses)
        if project and not isinstance(project, str):
            raise TypeError("Expected argument 'project' to be a str")
        pulumi.set(__self__, "project", project)
        if psc_instance_configs and not isinstance(psc_instance_configs, list):
            raise TypeError("Expected argument 'psc_instance_configs' to be a list")
        pulumi.set(__self__, "psc_instance_configs", psc_instance_configs)
        if public_ip_address and not isinstance(public_ip_address, str):
            raise TypeError("Expected argument 'public_ip_address' to be a str")
        pulumi.set(__self__, "public_ip_address", public_ip_address)
        if pulumi_labels and not isinstance(pulumi_labels, dict):
            raise TypeError("Expected argument 'pulumi_labels' to be a dict")
        pulumi.set(__self__, "pulumi_labels", pulumi_labels)
        if query_insights_configs and not isinstance(query_insights_configs, list):
            raise TypeError("Expected argument 'query_insights_configs' to be a list")
        pulumi.set(__self__, "query_insights_configs", query_insights_configs)
        if read_pool_configs and not isinstance(read_pool_configs, list):
            raise TypeError("Expected argument 'read_pool_configs' to be a list")
        pulumi.set(__self__, "read_pool_configs", read_pool_configs)
        if reconciling and not isinstance(reconciling, bool):
            raise TypeError("Expected argument 'reconciling' to be a bool")
        pulumi.set(__self__, "reconciling", reconciling)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if uid and not isinstance(uid, str):
            raise TypeError("Expected argument 'uid' to be a str")
        pulumi.set(__self__, "uid", uid)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter
    def annotations(self) -> Mapping[str, str]:
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter(name="availabilityType")
    def availability_type(self) -> str:
        return pulumi.get(self, "availability_type")

    @property
    @pulumi.getter(name="clientConnectionConfigs")
    def client_connection_configs(self) -> Sequence['outputs.GetInstanceClientConnectionConfigResult']:
        return pulumi.get(self, "client_connection_configs")

    @property
    @pulumi.getter
    def cluster(self) -> str:
        return pulumi.get(self, "cluster")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="databaseFlags")
    def database_flags(self) -> Mapping[str, str]:
        return pulumi.get(self, "database_flags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="effectiveAnnotations")
    def effective_annotations(self) -> Mapping[str, str]:
        return pulumi.get(self, "effective_annotations")

    @property
    @pulumi.getter(name="effectiveLabels")
    def effective_labels(self) -> Mapping[str, str]:
        return pulumi.get(self, "effective_labels")

    @property
    @pulumi.getter(name="gceZone")
    def gce_zone(self) -> str:
        return pulumi.get(self, "gce_zone")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> str:
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> str:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="machineConfigs")
    def machine_configs(self) -> Sequence['outputs.GetInstanceMachineConfigResult']:
        return pulumi.get(self, "machine_configs")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkConfigs")
    def network_configs(self) -> Sequence['outputs.GetInstanceNetworkConfigResult']:
        return pulumi.get(self, "network_configs")

    @property
    @pulumi.getter(name="observabilityConfigs")
    def observability_configs(self) -> Sequence['outputs.GetInstanceObservabilityConfigResult']:
        return pulumi.get(self, "observability_configs")

    @property
    @pulumi.getter(name="outboundPublicIpAddresses")
    def outbound_public_ip_addresses(self) -> Sequence[str]:
        return pulumi.get(self, "outbound_public_ip_addresses")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="pscInstanceConfigs")
    def psc_instance_configs(self) -> Sequence['outputs.GetInstancePscInstanceConfigResult']:
        return pulumi.get(self, "psc_instance_configs")

    @property
    @pulumi.getter(name="publicIpAddress")
    def public_ip_address(self) -> str:
        return pulumi.get(self, "public_ip_address")

    @property
    @pulumi.getter(name="pulumiLabels")
    def pulumi_labels(self) -> Mapping[str, str]:
        return pulumi.get(self, "pulumi_labels")

    @property
    @pulumi.getter(name="queryInsightsConfigs")
    def query_insights_configs(self) -> Sequence['outputs.GetInstanceQueryInsightsConfigResult']:
        return pulumi.get(self, "query_insights_configs")

    @property
    @pulumi.getter(name="readPoolConfigs")
    def read_pool_configs(self) -> Sequence['outputs.GetInstanceReadPoolConfigResult']:
        return pulumi.get(self, "read_pool_configs")

    @property
    @pulumi.getter
    def reconciling(self) -> bool:
        return pulumi.get(self, "reconciling")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def uid(self) -> str:
        return pulumi.get(self, "uid")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        return pulumi.get(self, "update_time")


class AwaitableGetInstanceResult(GetInstanceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetInstanceResult(
            annotations=self.annotations,
            availability_type=self.availability_type,
            client_connection_configs=self.client_connection_configs,
            cluster=self.cluster,
            cluster_id=self.cluster_id,
            create_time=self.create_time,
            database_flags=self.database_flags,
            display_name=self.display_name,
            effective_annotations=self.effective_annotations,
            effective_labels=self.effective_labels,
            gce_zone=self.gce_zone,
            id=self.id,
            instance_id=self.instance_id,
            instance_type=self.instance_type,
            ip_address=self.ip_address,
            labels=self.labels,
            location=self.location,
            machine_configs=self.machine_configs,
            name=self.name,
            network_configs=self.network_configs,
            observability_configs=self.observability_configs,
            outbound_public_ip_addresses=self.outbound_public_ip_addresses,
            project=self.project,
            psc_instance_configs=self.psc_instance_configs,
            public_ip_address=self.public_ip_address,
            pulumi_labels=self.pulumi_labels,
            query_insights_configs=self.query_insights_configs,
            read_pool_configs=self.read_pool_configs,
            reconciling=self.reconciling,
            state=self.state,
            uid=self.uid,
            update_time=self.update_time)


def get_instance(cluster_id: Optional[str] = None,
                 instance_id: Optional[str] = None,
                 location: Optional[str] = None,
                 project: Optional[str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetInstanceResult:
    """
    Use this data source to get information about the available instance. For more details refer the [API docs](https://cloud.google.com/alloydb/docs/reference/rest/v1/projects.locations.clusters.instances).

    ## Example Usage

    ```python
    import pulumi
    import pulumi_gcp as gcp

    qa = gcp.alloydb.get_instance()
    ```


    :param str cluster_id: The ID of the alloydb cluster that the instance belongs to.
           'alloydb_cluster_id'
    :param str instance_id: The ID of the alloydb instance.
           'alloydb_instance_id'
    :param str location: (optional)
           The canonical id of the location.If it is not provided, the provider project is used. For example: us-east1.
    :param str project: (optional)
           The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
    """
    __args__ = dict()
    __args__['clusterId'] = cluster_id
    __args__['instanceId'] = instance_id
    __args__['location'] = location
    __args__['project'] = project
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('gcp:alloydb/getInstance:getInstance', __args__, opts=opts, typ=GetInstanceResult).value

    return AwaitableGetInstanceResult(
        annotations=pulumi.get(__ret__, 'annotations'),
        availability_type=pulumi.get(__ret__, 'availability_type'),
        client_connection_configs=pulumi.get(__ret__, 'client_connection_configs'),
        cluster=pulumi.get(__ret__, 'cluster'),
        cluster_id=pulumi.get(__ret__, 'cluster_id'),
        create_time=pulumi.get(__ret__, 'create_time'),
        database_flags=pulumi.get(__ret__, 'database_flags'),
        display_name=pulumi.get(__ret__, 'display_name'),
        effective_annotations=pulumi.get(__ret__, 'effective_annotations'),
        effective_labels=pulumi.get(__ret__, 'effective_labels'),
        gce_zone=pulumi.get(__ret__, 'gce_zone'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        instance_type=pulumi.get(__ret__, 'instance_type'),
        ip_address=pulumi.get(__ret__, 'ip_address'),
        labels=pulumi.get(__ret__, 'labels'),
        location=pulumi.get(__ret__, 'location'),
        machine_configs=pulumi.get(__ret__, 'machine_configs'),
        name=pulumi.get(__ret__, 'name'),
        network_configs=pulumi.get(__ret__, 'network_configs'),
        observability_configs=pulumi.get(__ret__, 'observability_configs'),
        outbound_public_ip_addresses=pulumi.get(__ret__, 'outbound_public_ip_addresses'),
        project=pulumi.get(__ret__, 'project'),
        psc_instance_configs=pulumi.get(__ret__, 'psc_instance_configs'),
        public_ip_address=pulumi.get(__ret__, 'public_ip_address'),
        pulumi_labels=pulumi.get(__ret__, 'pulumi_labels'),
        query_insights_configs=pulumi.get(__ret__, 'query_insights_configs'),
        read_pool_configs=pulumi.get(__ret__, 'read_pool_configs'),
        reconciling=pulumi.get(__ret__, 'reconciling'),
        state=pulumi.get(__ret__, 'state'),
        uid=pulumi.get(__ret__, 'uid'),
        update_time=pulumi.get(__ret__, 'update_time'))
def get_instance_output(cluster_id: Optional[pulumi.Input[str]] = None,
                        instance_id: Optional[pulumi.Input[str]] = None,
                        location: Optional[pulumi.Input[Optional[str]]] = None,
                        project: Optional[pulumi.Input[Optional[str]]] = None,
                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetInstanceResult]:
    """
    Use this data source to get information about the available instance. For more details refer the [API docs](https://cloud.google.com/alloydb/docs/reference/rest/v1/projects.locations.clusters.instances).

    ## Example Usage

    ```python
    import pulumi
    import pulumi_gcp as gcp

    qa = gcp.alloydb.get_instance()
    ```


    :param str cluster_id: The ID of the alloydb cluster that the instance belongs to.
           'alloydb_cluster_id'
    :param str instance_id: The ID of the alloydb instance.
           'alloydb_instance_id'
    :param str location: (optional)
           The canonical id of the location.If it is not provided, the provider project is used. For example: us-east1.
    :param str project: (optional)
           The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
    """
    __args__ = dict()
    __args__['clusterId'] = cluster_id
    __args__['instanceId'] = instance_id
    __args__['location'] = location
    __args__['project'] = project
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('gcp:alloydb/getInstance:getInstance', __args__, opts=opts, typ=GetInstanceResult)
    return __ret__.apply(lambda __response__: GetInstanceResult(
        annotations=pulumi.get(__response__, 'annotations'),
        availability_type=pulumi.get(__response__, 'availability_type'),
        client_connection_configs=pulumi.get(__response__, 'client_connection_configs'),
        cluster=pulumi.get(__response__, 'cluster'),
        cluster_id=pulumi.get(__response__, 'cluster_id'),
        create_time=pulumi.get(__response__, 'create_time'),
        database_flags=pulumi.get(__response__, 'database_flags'),
        display_name=pulumi.get(__response__, 'display_name'),
        effective_annotations=pulumi.get(__response__, 'effective_annotations'),
        effective_labels=pulumi.get(__response__, 'effective_labels'),
        gce_zone=pulumi.get(__response__, 'gce_zone'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        instance_type=pulumi.get(__response__, 'instance_type'),
        ip_address=pulumi.get(__response__, 'ip_address'),
        labels=pulumi.get(__response__, 'labels'),
        location=pulumi.get(__response__, 'location'),
        machine_configs=pulumi.get(__response__, 'machine_configs'),
        name=pulumi.get(__response__, 'name'),
        network_configs=pulumi.get(__response__, 'network_configs'),
        observability_configs=pulumi.get(__response__, 'observability_configs'),
        outbound_public_ip_addresses=pulumi.get(__response__, 'outbound_public_ip_addresses'),
        project=pulumi.get(__response__, 'project'),
        psc_instance_configs=pulumi.get(__response__, 'psc_instance_configs'),
        public_ip_address=pulumi.get(__response__, 'public_ip_address'),
        pulumi_labels=pulumi.get(__response__, 'pulumi_labels'),
        query_insights_configs=pulumi.get(__response__, 'query_insights_configs'),
        read_pool_configs=pulumi.get(__response__, 'read_pool_configs'),
        reconciling=pulumi.get(__response__, 'reconciling'),
        state=pulumi.get(__response__, 'state'),
        uid=pulumi.get(__response__, 'uid'),
        update_time=pulumi.get(__response__, 'update_time')))
