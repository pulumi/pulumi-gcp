# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetClusterResult',
    'AwaitableGetClusterResult',
    'get_cluster',
    'get_cluster_output',
]

@pulumi.output_type
class GetClusterResult:
    """
    A collection of values returned by getCluster.
    """
    def __init__(__self__, annotations=None, automated_backup_policies=None, backup_sources=None, cluster_id=None, cluster_type=None, continuous_backup_configs=None, continuous_backup_infos=None, database_version=None, deletion_policy=None, display_name=None, effective_annotations=None, effective_labels=None, encryption_configs=None, encryption_infos=None, etag=None, id=None, initial_users=None, labels=None, location=None, maintenance_update_policies=None, migration_sources=None, name=None, network_configs=None, project=None, psc_configs=None, pulumi_labels=None, reconciling=None, restore_backup_sources=None, restore_continuous_backup_sources=None, secondary_configs=None, skip_await_major_version_upgrade=None, state=None, subscription_type=None, trial_metadatas=None, uid=None):
        if annotations and not isinstance(annotations, dict):
            raise TypeError("Expected argument 'annotations' to be a dict")
        pulumi.set(__self__, "annotations", annotations)
        if automated_backup_policies and not isinstance(automated_backup_policies, list):
            raise TypeError("Expected argument 'automated_backup_policies' to be a list")
        pulumi.set(__self__, "automated_backup_policies", automated_backup_policies)
        if backup_sources and not isinstance(backup_sources, list):
            raise TypeError("Expected argument 'backup_sources' to be a list")
        pulumi.set(__self__, "backup_sources", backup_sources)
        if cluster_id and not isinstance(cluster_id, str):
            raise TypeError("Expected argument 'cluster_id' to be a str")
        pulumi.set(__self__, "cluster_id", cluster_id)
        if cluster_type and not isinstance(cluster_type, str):
            raise TypeError("Expected argument 'cluster_type' to be a str")
        pulumi.set(__self__, "cluster_type", cluster_type)
        if continuous_backup_configs and not isinstance(continuous_backup_configs, list):
            raise TypeError("Expected argument 'continuous_backup_configs' to be a list")
        pulumi.set(__self__, "continuous_backup_configs", continuous_backup_configs)
        if continuous_backup_infos and not isinstance(continuous_backup_infos, list):
            raise TypeError("Expected argument 'continuous_backup_infos' to be a list")
        pulumi.set(__self__, "continuous_backup_infos", continuous_backup_infos)
        if database_version and not isinstance(database_version, str):
            raise TypeError("Expected argument 'database_version' to be a str")
        pulumi.set(__self__, "database_version", database_version)
        if deletion_policy and not isinstance(deletion_policy, str):
            raise TypeError("Expected argument 'deletion_policy' to be a str")
        pulumi.set(__self__, "deletion_policy", deletion_policy)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if effective_annotations and not isinstance(effective_annotations, dict):
            raise TypeError("Expected argument 'effective_annotations' to be a dict")
        pulumi.set(__self__, "effective_annotations", effective_annotations)
        if effective_labels and not isinstance(effective_labels, dict):
            raise TypeError("Expected argument 'effective_labels' to be a dict")
        pulumi.set(__self__, "effective_labels", effective_labels)
        if encryption_configs and not isinstance(encryption_configs, list):
            raise TypeError("Expected argument 'encryption_configs' to be a list")
        pulumi.set(__self__, "encryption_configs", encryption_configs)
        if encryption_infos and not isinstance(encryption_infos, list):
            raise TypeError("Expected argument 'encryption_infos' to be a list")
        pulumi.set(__self__, "encryption_infos", encryption_infos)
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        pulumi.set(__self__, "etag", etag)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if initial_users and not isinstance(initial_users, list):
            raise TypeError("Expected argument 'initial_users' to be a list")
        pulumi.set(__self__, "initial_users", initial_users)
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        pulumi.set(__self__, "labels", labels)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if maintenance_update_policies and not isinstance(maintenance_update_policies, list):
            raise TypeError("Expected argument 'maintenance_update_policies' to be a list")
        pulumi.set(__self__, "maintenance_update_policies", maintenance_update_policies)
        if migration_sources and not isinstance(migration_sources, list):
            raise TypeError("Expected argument 'migration_sources' to be a list")
        pulumi.set(__self__, "migration_sources", migration_sources)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if network_configs and not isinstance(network_configs, list):
            raise TypeError("Expected argument 'network_configs' to be a list")
        pulumi.set(__self__, "network_configs", network_configs)
        if project and not isinstance(project, str):
            raise TypeError("Expected argument 'project' to be a str")
        pulumi.set(__self__, "project", project)
        if psc_configs and not isinstance(psc_configs, list):
            raise TypeError("Expected argument 'psc_configs' to be a list")
        pulumi.set(__self__, "psc_configs", psc_configs)
        if pulumi_labels and not isinstance(pulumi_labels, dict):
            raise TypeError("Expected argument 'pulumi_labels' to be a dict")
        pulumi.set(__self__, "pulumi_labels", pulumi_labels)
        if reconciling and not isinstance(reconciling, bool):
            raise TypeError("Expected argument 'reconciling' to be a bool")
        pulumi.set(__self__, "reconciling", reconciling)
        if restore_backup_sources and not isinstance(restore_backup_sources, list):
            raise TypeError("Expected argument 'restore_backup_sources' to be a list")
        pulumi.set(__self__, "restore_backup_sources", restore_backup_sources)
        if restore_continuous_backup_sources and not isinstance(restore_continuous_backup_sources, list):
            raise TypeError("Expected argument 'restore_continuous_backup_sources' to be a list")
        pulumi.set(__self__, "restore_continuous_backup_sources", restore_continuous_backup_sources)
        if secondary_configs and not isinstance(secondary_configs, list):
            raise TypeError("Expected argument 'secondary_configs' to be a list")
        pulumi.set(__self__, "secondary_configs", secondary_configs)
        if skip_await_major_version_upgrade and not isinstance(skip_await_major_version_upgrade, bool):
            raise TypeError("Expected argument 'skip_await_major_version_upgrade' to be a bool")
        pulumi.set(__self__, "skip_await_major_version_upgrade", skip_await_major_version_upgrade)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if subscription_type and not isinstance(subscription_type, str):
            raise TypeError("Expected argument 'subscription_type' to be a str")
        pulumi.set(__self__, "subscription_type", subscription_type)
        if trial_metadatas and not isinstance(trial_metadatas, list):
            raise TypeError("Expected argument 'trial_metadatas' to be a list")
        pulumi.set(__self__, "trial_metadatas", trial_metadatas)
        if uid and not isinstance(uid, str):
            raise TypeError("Expected argument 'uid' to be a str")
        pulumi.set(__self__, "uid", uid)

    @property
    @pulumi.getter
    def annotations(self) -> Mapping[str, str]:
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter(name="automatedBackupPolicies")
    def automated_backup_policies(self) -> Sequence['outputs.GetClusterAutomatedBackupPolicyResult']:
        return pulumi.get(self, "automated_backup_policies")

    @property
    @pulumi.getter(name="backupSources")
    def backup_sources(self) -> Sequence['outputs.GetClusterBackupSourceResult']:
        return pulumi.get(self, "backup_sources")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> str:
        return pulumi.get(self, "cluster_type")

    @property
    @pulumi.getter(name="continuousBackupConfigs")
    def continuous_backup_configs(self) -> Sequence['outputs.GetClusterContinuousBackupConfigResult']:
        return pulumi.get(self, "continuous_backup_configs")

    @property
    @pulumi.getter(name="continuousBackupInfos")
    def continuous_backup_infos(self) -> Sequence['outputs.GetClusterContinuousBackupInfoResult']:
        return pulumi.get(self, "continuous_backup_infos")

    @property
    @pulumi.getter(name="databaseVersion")
    def database_version(self) -> str:
        return pulumi.get(self, "database_version")

    @property
    @pulumi.getter(name="deletionPolicy")
    def deletion_policy(self) -> str:
        return pulumi.get(self, "deletion_policy")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="effectiveAnnotations")
    def effective_annotations(self) -> Mapping[str, str]:
        return pulumi.get(self, "effective_annotations")

    @property
    @pulumi.getter(name="effectiveLabels")
    def effective_labels(self) -> Mapping[str, str]:
        return pulumi.get(self, "effective_labels")

    @property
    @pulumi.getter(name="encryptionConfigs")
    def encryption_configs(self) -> Sequence['outputs.GetClusterEncryptionConfigResult']:
        return pulumi.get(self, "encryption_configs")

    @property
    @pulumi.getter(name="encryptionInfos")
    def encryption_infos(self) -> Sequence['outputs.GetClusterEncryptionInfoResult']:
        return pulumi.get(self, "encryption_infos")

    @property
    @pulumi.getter
    def etag(self) -> str:
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="initialUsers")
    def initial_users(self) -> Sequence['outputs.GetClusterInitialUserResult']:
        return pulumi.get(self, "initial_users")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="maintenanceUpdatePolicies")
    def maintenance_update_policies(self) -> Sequence['outputs.GetClusterMaintenanceUpdatePolicyResult']:
        return pulumi.get(self, "maintenance_update_policies")

    @property
    @pulumi.getter(name="migrationSources")
    def migration_sources(self) -> Sequence['outputs.GetClusterMigrationSourceResult']:
        return pulumi.get(self, "migration_sources")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkConfigs")
    def network_configs(self) -> Sequence['outputs.GetClusterNetworkConfigResult']:
        return pulumi.get(self, "network_configs")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="pscConfigs")
    def psc_configs(self) -> Sequence['outputs.GetClusterPscConfigResult']:
        return pulumi.get(self, "psc_configs")

    @property
    @pulumi.getter(name="pulumiLabels")
    def pulumi_labels(self) -> Mapping[str, str]:
        return pulumi.get(self, "pulumi_labels")

    @property
    @pulumi.getter
    def reconciling(self) -> bool:
        return pulumi.get(self, "reconciling")

    @property
    @pulumi.getter(name="restoreBackupSources")
    def restore_backup_sources(self) -> Sequence['outputs.GetClusterRestoreBackupSourceResult']:
        return pulumi.get(self, "restore_backup_sources")

    @property
    @pulumi.getter(name="restoreContinuousBackupSources")
    def restore_continuous_backup_sources(self) -> Sequence['outputs.GetClusterRestoreContinuousBackupSourceResult']:
        return pulumi.get(self, "restore_continuous_backup_sources")

    @property
    @pulumi.getter(name="secondaryConfigs")
    def secondary_configs(self) -> Sequence['outputs.GetClusterSecondaryConfigResult']:
        return pulumi.get(self, "secondary_configs")

    @property
    @pulumi.getter(name="skipAwaitMajorVersionUpgrade")
    def skip_await_major_version_upgrade(self) -> bool:
        return pulumi.get(self, "skip_await_major_version_upgrade")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subscriptionType")
    def subscription_type(self) -> str:
        return pulumi.get(self, "subscription_type")

    @property
    @pulumi.getter(name="trialMetadatas")
    def trial_metadatas(self) -> Sequence['outputs.GetClusterTrialMetadataResult']:
        return pulumi.get(self, "trial_metadatas")

    @property
    @pulumi.getter
    def uid(self) -> str:
        return pulumi.get(self, "uid")


class AwaitableGetClusterResult(GetClusterResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetClusterResult(
            annotations=self.annotations,
            automated_backup_policies=self.automated_backup_policies,
            backup_sources=self.backup_sources,
            cluster_id=self.cluster_id,
            cluster_type=self.cluster_type,
            continuous_backup_configs=self.continuous_backup_configs,
            continuous_backup_infos=self.continuous_backup_infos,
            database_version=self.database_version,
            deletion_policy=self.deletion_policy,
            display_name=self.display_name,
            effective_annotations=self.effective_annotations,
            effective_labels=self.effective_labels,
            encryption_configs=self.encryption_configs,
            encryption_infos=self.encryption_infos,
            etag=self.etag,
            id=self.id,
            initial_users=self.initial_users,
            labels=self.labels,
            location=self.location,
            maintenance_update_policies=self.maintenance_update_policies,
            migration_sources=self.migration_sources,
            name=self.name,
            network_configs=self.network_configs,
            project=self.project,
            psc_configs=self.psc_configs,
            pulumi_labels=self.pulumi_labels,
            reconciling=self.reconciling,
            restore_backup_sources=self.restore_backup_sources,
            restore_continuous_backup_sources=self.restore_continuous_backup_sources,
            secondary_configs=self.secondary_configs,
            skip_await_major_version_upgrade=self.skip_await_major_version_upgrade,
            state=self.state,
            subscription_type=self.subscription_type,
            trial_metadatas=self.trial_metadatas,
            uid=self.uid)


def get_cluster(cluster_id: Optional[str] = None,
                location: Optional[str] = None,
                project: Optional[str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetClusterResult:
    """
    Use this data source to get information about the available cluster. For more details refer the [API docs](https://cloud.google.com/alloydb/docs/reference/rest/v1/projects.locations.clusters).

    ## Example Usage

    ```python
    import pulumi
    import pulumi_gcp as gcp

    qa = gcp.alloydb.get_cluster()
    ```


    :param str cluster_id: The ID of the alloydb cluster that the instance belongs to.
           'alloydb_cluster_id'
    :param str location: (optional)
           The canonical id of the location.If it is not provided, the provider project is used. For example: us-east1.
    :param str project: (optional)
           The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
    """
    __args__ = dict()
    __args__['clusterId'] = cluster_id
    __args__['location'] = location
    __args__['project'] = project
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('gcp:alloydb/getCluster:getCluster', __args__, opts=opts, typ=GetClusterResult).value

    return AwaitableGetClusterResult(
        annotations=pulumi.get(__ret__, 'annotations'),
        automated_backup_policies=pulumi.get(__ret__, 'automated_backup_policies'),
        backup_sources=pulumi.get(__ret__, 'backup_sources'),
        cluster_id=pulumi.get(__ret__, 'cluster_id'),
        cluster_type=pulumi.get(__ret__, 'cluster_type'),
        continuous_backup_configs=pulumi.get(__ret__, 'continuous_backup_configs'),
        continuous_backup_infos=pulumi.get(__ret__, 'continuous_backup_infos'),
        database_version=pulumi.get(__ret__, 'database_version'),
        deletion_policy=pulumi.get(__ret__, 'deletion_policy'),
        display_name=pulumi.get(__ret__, 'display_name'),
        effective_annotations=pulumi.get(__ret__, 'effective_annotations'),
        effective_labels=pulumi.get(__ret__, 'effective_labels'),
        encryption_configs=pulumi.get(__ret__, 'encryption_configs'),
        encryption_infos=pulumi.get(__ret__, 'encryption_infos'),
        etag=pulumi.get(__ret__, 'etag'),
        id=pulumi.get(__ret__, 'id'),
        initial_users=pulumi.get(__ret__, 'initial_users'),
        labels=pulumi.get(__ret__, 'labels'),
        location=pulumi.get(__ret__, 'location'),
        maintenance_update_policies=pulumi.get(__ret__, 'maintenance_update_policies'),
        migration_sources=pulumi.get(__ret__, 'migration_sources'),
        name=pulumi.get(__ret__, 'name'),
        network_configs=pulumi.get(__ret__, 'network_configs'),
        project=pulumi.get(__ret__, 'project'),
        psc_configs=pulumi.get(__ret__, 'psc_configs'),
        pulumi_labels=pulumi.get(__ret__, 'pulumi_labels'),
        reconciling=pulumi.get(__ret__, 'reconciling'),
        restore_backup_sources=pulumi.get(__ret__, 'restore_backup_sources'),
        restore_continuous_backup_sources=pulumi.get(__ret__, 'restore_continuous_backup_sources'),
        secondary_configs=pulumi.get(__ret__, 'secondary_configs'),
        skip_await_major_version_upgrade=pulumi.get(__ret__, 'skip_await_major_version_upgrade'),
        state=pulumi.get(__ret__, 'state'),
        subscription_type=pulumi.get(__ret__, 'subscription_type'),
        trial_metadatas=pulumi.get(__ret__, 'trial_metadatas'),
        uid=pulumi.get(__ret__, 'uid'))
def get_cluster_output(cluster_id: Optional[pulumi.Input[str]] = None,
                       location: Optional[pulumi.Input[Optional[str]]] = None,
                       project: Optional[pulumi.Input[Optional[str]]] = None,
                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetClusterResult]:
    """
    Use this data source to get information about the available cluster. For more details refer the [API docs](https://cloud.google.com/alloydb/docs/reference/rest/v1/projects.locations.clusters).

    ## Example Usage

    ```python
    import pulumi
    import pulumi_gcp as gcp

    qa = gcp.alloydb.get_cluster()
    ```


    :param str cluster_id: The ID of the alloydb cluster that the instance belongs to.
           'alloydb_cluster_id'
    :param str location: (optional)
           The canonical id of the location.If it is not provided, the provider project is used. For example: us-east1.
    :param str project: (optional)
           The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
    """
    __args__ = dict()
    __args__['clusterId'] = cluster_id
    __args__['location'] = location
    __args__['project'] = project
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('gcp:alloydb/getCluster:getCluster', __args__, opts=opts, typ=GetClusterResult)
    return __ret__.apply(lambda __response__: GetClusterResult(
        annotations=pulumi.get(__response__, 'annotations'),
        automated_backup_policies=pulumi.get(__response__, 'automated_backup_policies'),
        backup_sources=pulumi.get(__response__, 'backup_sources'),
        cluster_id=pulumi.get(__response__, 'cluster_id'),
        cluster_type=pulumi.get(__response__, 'cluster_type'),
        continuous_backup_configs=pulumi.get(__response__, 'continuous_backup_configs'),
        continuous_backup_infos=pulumi.get(__response__, 'continuous_backup_infos'),
        database_version=pulumi.get(__response__, 'database_version'),
        deletion_policy=pulumi.get(__response__, 'deletion_policy'),
        display_name=pulumi.get(__response__, 'display_name'),
        effective_annotations=pulumi.get(__response__, 'effective_annotations'),
        effective_labels=pulumi.get(__response__, 'effective_labels'),
        encryption_configs=pulumi.get(__response__, 'encryption_configs'),
        encryption_infos=pulumi.get(__response__, 'encryption_infos'),
        etag=pulumi.get(__response__, 'etag'),
        id=pulumi.get(__response__, 'id'),
        initial_users=pulumi.get(__response__, 'initial_users'),
        labels=pulumi.get(__response__, 'labels'),
        location=pulumi.get(__response__, 'location'),
        maintenance_update_policies=pulumi.get(__response__, 'maintenance_update_policies'),
        migration_sources=pulumi.get(__response__, 'migration_sources'),
        name=pulumi.get(__response__, 'name'),
        network_configs=pulumi.get(__response__, 'network_configs'),
        project=pulumi.get(__response__, 'project'),
        psc_configs=pulumi.get(__response__, 'psc_configs'),
        pulumi_labels=pulumi.get(__response__, 'pulumi_labels'),
        reconciling=pulumi.get(__response__, 'reconciling'),
        restore_backup_sources=pulumi.get(__response__, 'restore_backup_sources'),
        restore_continuous_backup_sources=pulumi.get(__response__, 'restore_continuous_backup_sources'),
        secondary_configs=pulumi.get(__response__, 'secondary_configs'),
        skip_await_major_version_upgrade=pulumi.get(__response__, 'skip_await_major_version_upgrade'),
        state=pulumi.get(__response__, 'state'),
        subscription_type=pulumi.get(__response__, 'subscription_type'),
        trial_metadatas=pulumi.get(__response__, 'trial_metadatas'),
        uid=pulumi.get(__response__, 'uid')))
