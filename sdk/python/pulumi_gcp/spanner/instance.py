# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from .. import utilities, tables

class Instance(pulumi.CustomResource):
    config: pulumi.Output[str]
    """
    The name of the instance's configuration (similar but not
    quite the same as a region) which defines defines the geographic placement and
    replication of your databases in this instance. It determines where your data
    is stored. Values are typically of the form `regional-europe-west1` , `us-central` etc.
    In order to obtain a valid list please consult the
    [Configuration section of the docs](https://cloud.google.com/spanner/docs/instances).
    """
    display_name: pulumi.Output[str]
    """
    The descriptive name for this instance as it appears
    in UIs. Can be updated, however should be kept globally unique to avoid confusion.
    """
    labels: pulumi.Output[dict]
    """
    A mapping (key/value pairs) of labels to assign to the instance.
    """
    name: pulumi.Output[str]
    """
    The unique name (ID) of the instance. If the name is left
    blank, Terraform will randomly generate one when the instance is first
    created.
    """
    num_nodes: pulumi.Output[int]
    """
    The number of nodes allocated to this instance.
    Defaults to `1`. This can be updated after creation.
    """
    project: pulumi.Output[str]
    """
    The ID of the project in which the resource belongs. If it
    is not provided, the provider project is used.
    """
    state: pulumi.Output[str]
    """
    The current state of the instance.
    """
    def __init__(__self__, resource_name, opts=None, config=None, display_name=None, labels=None, name=None, num_nodes=None, project=None, __name__=None, __opts__=None):
        """
        Creates and manages a Google Spanner Instance. For more information, see the [official documentation](https://cloud.google.com/spanner/), or the [JSON API](https://cloud.google.com/spanner/docs/reference/rest/v1/projects.instances).
        
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] config: The name of the instance's configuration (similar but not
               quite the same as a region) which defines defines the geographic placement and
               replication of your databases in this instance. It determines where your data
               is stored. Values are typically of the form `regional-europe-west1` , `us-central` etc.
               In order to obtain a valid list please consult the
               [Configuration section of the docs](https://cloud.google.com/spanner/docs/instances).
        :param pulumi.Input[str] display_name: The descriptive name for this instance as it appears
               in UIs. Can be updated, however should be kept globally unique to avoid confusion.
        :param pulumi.Input[dict] labels: A mapping (key/value pairs) of labels to assign to the instance.
        :param pulumi.Input[str] name: The unique name (ID) of the instance. If the name is left
               blank, Terraform will randomly generate one when the instance is first
               created.
        :param pulumi.Input[int] num_nodes: The number of nodes allocated to this instance.
               Defaults to `1`. This can be updated after creation.
        :param pulumi.Input[str] project: The ID of the project in which the resource belongs. If it
               is not provided, the provider project is used.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if not resource_name:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(resource_name, str):
            raise TypeError('Expected resource name to be a string')
        if opts and not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if config is None:
            raise TypeError('Missing required property config')
        __props__['config'] = config

        if display_name is None:
            raise TypeError('Missing required property display_name')
        __props__['display_name'] = display_name

        __props__['labels'] = labels

        __props__['name'] = name

        __props__['num_nodes'] = num_nodes

        __props__['project'] = project

        __props__['state'] = None

        super(Instance, __self__).__init__(
            'gcp:spanner/instance:Instance',
            resource_name,
            __props__,
            opts)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

