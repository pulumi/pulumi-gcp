# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime

class Instance(pulumi.CustomResource):
    """
    Creates and manages a Google Spanner Instance. For more information, see the [official documentation](https://cloud.google.com/spanner/), or the [JSON API](https://cloud.google.com/spanner/docs/reference/rest/v1/projects.instances).
    """
    def __init__(__self__, __name__, __opts__=None, config=None, display_name=None, labels=None, name=None, num_nodes=None, project=None):
        """Create a Instance resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if not config:
            raise TypeError('Missing required property config')
        elif not isinstance(config, basestring):
            raise TypeError('Expected property config to be a basestring')
        __self__.config = config
        """
        The name of the instance's configuration (similar but not
        quite the same as a region) which defines defines the geographic placement and
        replication of your databases in this instance. It determines where your data
        is stored. Values are typically of the form `regional-europe-west1` , `us-central` etc.
        In order to obtain a valid list please consult the
        [Configuration section of the docs](https://cloud.google.com/spanner/docs/instances).
        """
        __props__['config'] = config

        if not display_name:
            raise TypeError('Missing required property display_name')
        elif not isinstance(display_name, basestring):
            raise TypeError('Expected property display_name to be a basestring')
        __self__.display_name = display_name
        """
        The descriptive name for this instance as it appears
        in UIs. Can be updated, however should be kept globally unique to avoid confusion.
        """
        __props__['displayName'] = display_name

        if labels and not isinstance(labels, dict):
            raise TypeError('Expected property labels to be a dict')
        __self__.labels = labels
        """
        A mapping (key/value pairs) of labels to assign to the instance.
        """
        __props__['labels'] = labels

        if name and not isinstance(name, basestring):
            raise TypeError('Expected property name to be a basestring')
        __self__.name = name
        """
        The unique name (ID) of the instance. If the name is left
        blank, Terraform will randomly generate one when the instance is first
        created.
        """
        __props__['name'] = name

        if num_nodes and not isinstance(num_nodes, int):
            raise TypeError('Expected property num_nodes to be a int')
        __self__.num_nodes = num_nodes
        """
        The number of nodes allocated to this instance.
        Defaults to `1`. This can be updated after creation.
        """
        __props__['numNodes'] = num_nodes

        if project and not isinstance(project, basestring):
            raise TypeError('Expected property project to be a basestring')
        __self__.project = project
        """
        The ID of the project in which the resource belongs. If it
        is not provided, the provider project is used.
        """
        __props__['project'] = project

        __self__.state = pulumi.runtime.UNKNOWN
        """
        The current state of the instance.
        """

        super(Instance, __self__).__init__(
            'gcp:spanner/instance:Instance',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'config' in outs:
            self.config = outs['config']
        if 'displayName' in outs:
            self.display_name = outs['displayName']
        if 'labels' in outs:
            self.labels = outs['labels']
        if 'name' in outs:
            self.name = outs['name']
        if 'numNodes' in outs:
            self.num_nodes = outs['numNodes']
        if 'project' in outs:
            self.project = outs['project']
        if 'state' in outs:
            self.state = outs['state']
