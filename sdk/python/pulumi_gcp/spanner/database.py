# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from .. import utilities, tables

class Database(pulumi.CustomResource):
    ddls: pulumi.Output[list]
    """
    An optional list of DDL statements to run inside the newly created
    database. Statements can create tables, indexes, etc. These statements execute atomically
    with the creation of the database: if there is an error in any statement, the database
    is not created.
    """
    instance: pulumi.Output[str]
    """
    The name of the instance that will serve the new database.
    """
    name: pulumi.Output[str]
    """
    The name of the database.
    """
    project: pulumi.Output[str]
    """
    The ID of the project in which to look for the `instance` specified. If it
    is not provided, the provider project is used.
    """
    state: pulumi.Output[str]
    """
    The current state of the database.
    """
    def __init__(__self__, resource_name, opts=None, ddls=None, instance=None, name=None, project=None, __name__=None, __opts__=None):
        """
        Creates a Google Spanner Database within a Spanner Instance. For more information, see the [official documentation](https://cloud.google.com/spanner/), or the [JSON API](https://cloud.google.com/spanner/docs/reference/rest/v1/projects.instances.databases).
        
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[list] ddls: An optional list of DDL statements to run inside the newly created
               database. Statements can create tables, indexes, etc. These statements execute atomically
               with the creation of the database: if there is an error in any statement, the database
               is not created.
        :param pulumi.Input[str] instance: The name of the instance that will serve the new database.
        :param pulumi.Input[str] name: The name of the database.
        :param pulumi.Input[str] project: The ID of the project in which to look for the `instance` specified. If it
               is not provided, the provider project is used.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if not resource_name:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(resource_name, str):
            raise TypeError('Expected resource name to be a string')
        if opts and not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        __props__['ddls'] = ddls

        if instance is None:
            raise TypeError('Missing required property instance')
        __props__['instance'] = instance

        __props__['name'] = name

        __props__['project'] = project

        __props__['state'] = None

        super(Database, __self__).__init__(
            'gcp:spanner/database:Database',
            resource_name,
            __props__,
            opts)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

