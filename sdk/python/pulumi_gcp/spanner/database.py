# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime

class Database(pulumi.CustomResource):
    """
    Creates a Google Spanner Database within a Spanner Instance. For more information, see the [official documentation](https://cloud.google.com/spanner/), or the [JSON API](https://cloud.google.com/spanner/docs/reference/rest/v1/projects.instances.databases).
    """
    def __init__(__self__, __name__, __opts__=None, ddls=None, instance=None, name=None, project=None):
        """Create a Database resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if ddls and not isinstance(ddls, list):
            raise TypeError('Expected property ddls to be a list')
        __self__.ddls = ddls
        """
        An optional list of DDL statements to run inside the newly created
        database. Statements can create tables, indexes, etc. These statements execute atomically
        with the creation of the database: if there is an error in any statement, the database
        is not created.
        """
        __props__['ddls'] = ddls

        if not instance:
            raise TypeError('Missing required property instance')
        elif not isinstance(instance, basestring):
            raise TypeError('Expected property instance to be a basestring')
        __self__.instance = instance
        """
        The name of the instance that will serve the new database.
        """
        __props__['instance'] = instance

        if name and not isinstance(name, basestring):
            raise TypeError('Expected property name to be a basestring')
        __self__.name = name
        """
        The name of the database.
        """
        __props__['name'] = name

        if project and not isinstance(project, basestring):
            raise TypeError('Expected property project to be a basestring')
        __self__.project = project
        """
        The ID of the project in which to look for the `instance` specified. If it
        is not provided, the provider project is used.
        """
        __props__['project'] = project

        __self__.state = pulumi.runtime.UNKNOWN
        """
        The current state of the database.
        """

        super(Database, __self__).__init__(
            'gcp:spanner/database:Database',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'ddls' in outs:
            self.ddls = outs['ddls']
        if 'instance' in outs:
            self.instance = outs['instance']
        if 'name' in outs:
            self.name = outs['name']
        if 'project' in outs:
            self.project = outs['project']
        if 'state' in outs:
            self.state = outs['state']
