# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

# Export this package's modules as members:
from .database import *
from .database_iam_binding import *
from .database_iam_member import *
from .database_iam_policy import *
from .get_instance import *
from .instance import *
from .instance_iam_binding import *
from .instance_iam_member import *
from .instance_iam_policy import *
from ._inputs import *
from . import outputs

def _register_module():
    import pulumi
    from .. import _utilities


    class Module(pulumi.runtime.ResourceModule):
        _version = _utilities.get_semver_version()

        def version(self):
            return Module._version

        def construct(self, name: str, typ: str, urn: str) -> pulumi.Resource:
            if typ == "gcp:spanner/database:Database":
                return Database(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "gcp:spanner/databaseIAMBinding:DatabaseIAMBinding":
                return DatabaseIAMBinding(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "gcp:spanner/databaseIAMMember:DatabaseIAMMember":
                return DatabaseIAMMember(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "gcp:spanner/databaseIAMPolicy:DatabaseIAMPolicy":
                return DatabaseIAMPolicy(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "gcp:spanner/instance:Instance":
                return Instance(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "gcp:spanner/instanceIAMBinding:InstanceIAMBinding":
                return InstanceIAMBinding(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "gcp:spanner/instanceIAMMember:InstanceIAMMember":
                return InstanceIAMMember(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "gcp:spanner/instanceIAMPolicy:InstanceIAMPolicy":
                return InstanceIAMPolicy(name, pulumi.ResourceOptions(urn=urn))
            else:
                raise Exception(f"unknown resource type {typ}")


    _module_instance = Module()
    pulumi.runtime.register_resource_module("gcp", "spanner/database", _module_instance)
    pulumi.runtime.register_resource_module("gcp", "spanner/databaseIAMBinding", _module_instance)
    pulumi.runtime.register_resource_module("gcp", "spanner/databaseIAMMember", _module_instance)
    pulumi.runtime.register_resource_module("gcp", "spanner/databaseIAMPolicy", _module_instance)
    pulumi.runtime.register_resource_module("gcp", "spanner/instance", _module_instance)
    pulumi.runtime.register_resource_module("gcp", "spanner/instanceIAMBinding", _module_instance)
    pulumi.runtime.register_resource_module("gcp", "spanner/instanceIAMMember", _module_instance)
    pulumi.runtime.register_resource_module("gcp", "spanner/instanceIAMPolicy", _module_instance)

_register_module()
