# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['KeyHandleArgs', 'KeyHandle']

@pulumi.input_type
class KeyHandleArgs:
    def __init__(__self__, *,
                 location: pulumi.Input[str],
                 resource_type_selector: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a KeyHandle resource.
        :param pulumi.Input[str] location: The location for the KeyHandle.
               A full list of valid locations can be found by running `gcloud kms locations list`.
               
               
               - - -
        :param pulumi.Input[str] resource_type_selector: Selector of the resource type where we want to protect resources.
               For example, `storage.googleapis.com/Bucket OR compute.googleapis.com/*`
        :param pulumi.Input[str] name: The resource name for the KeyHandle.
        :param pulumi.Input[str] project: The ID of the project in which the resource belongs.
               If it is not provided, the provider project is used.
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "resource_type_selector", resource_type_selector)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if project is not None:
            pulumi.set(__self__, "project", project)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input[str]:
        """
        The location for the KeyHandle.
        A full list of valid locations can be found by running `gcloud kms locations list`.


        - - -
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[str]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="resourceTypeSelector")
    def resource_type_selector(self) -> pulumi.Input[str]:
        """
        Selector of the resource type where we want to protect resources.
        For example, `storage.googleapis.com/Bucket OR compute.googleapis.com/*`
        """
        return pulumi.get(self, "resource_type_selector")

    @resource_type_selector.setter
    def resource_type_selector(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_type_selector", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The resource name for the KeyHandle.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the project in which the resource belongs.
        If it is not provided, the provider project is used.
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)


@pulumi.input_type
class _KeyHandleState:
    def __init__(__self__, *,
                 kms_key: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 resource_type_selector: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering KeyHandle resources.
        :param pulumi.Input[str] kms_key: A reference to a Cloud KMS CryptoKey that can be used for CMEK in the requested
               product/project/location, for example
               `projects/1/locations/us-east1/keyRings/foo/cryptoKeys/bar-ffffff`
        :param pulumi.Input[str] location: The location for the KeyHandle.
               A full list of valid locations can be found by running `gcloud kms locations list`.
               
               
               - - -
        :param pulumi.Input[str] name: The resource name for the KeyHandle.
        :param pulumi.Input[str] project: The ID of the project in which the resource belongs.
               If it is not provided, the provider project is used.
        :param pulumi.Input[str] resource_type_selector: Selector of the resource type where we want to protect resources.
               For example, `storage.googleapis.com/Bucket OR compute.googleapis.com/*`
        """
        if kms_key is not None:
            pulumi.set(__self__, "kms_key", kms_key)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if resource_type_selector is not None:
            pulumi.set(__self__, "resource_type_selector", resource_type_selector)

    @property
    @pulumi.getter(name="kmsKey")
    def kms_key(self) -> Optional[pulumi.Input[str]]:
        """
        A reference to a Cloud KMS CryptoKey that can be used for CMEK in the requested
        product/project/location, for example
        `projects/1/locations/us-east1/keyRings/foo/cryptoKeys/bar-ffffff`
        """
        return pulumi.get(self, "kms_key")

    @kms_key.setter
    def kms_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        The location for the KeyHandle.
        A full list of valid locations can be found by running `gcloud kms locations list`.


        - - -
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The resource name for the KeyHandle.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the project in which the resource belongs.
        If it is not provided, the provider project is used.
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="resourceTypeSelector")
    def resource_type_selector(self) -> Optional[pulumi.Input[str]]:
        """
        Selector of the resource type where we want to protect resources.
        For example, `storage.googleapis.com/Bucket OR compute.googleapis.com/*`
        """
        return pulumi.get(self, "resource_type_selector")

    @resource_type_selector.setter
    def resource_type_selector(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_type_selector", value)


class KeyHandle(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 resource_type_selector: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## Example Usage

        ### Kms Key Handle Basic

        ```python
        import pulumi
        import pulumi_gcp as gcp
        import pulumi_time as time

        # Create Folder in GCP Organization
        autokms_folder = gcp.organizations.Folder("autokms_folder",
            display_name="folder-example",
            parent="organizations/123456789")
        # Create the key project
        key_project = gcp.organizations.Project("key_project",
            project_id="key-proj",
            name="key-proj",
            folder_id=autokms_folder.folder_id,
            billing_account="000000-0000000-0000000-000000",
            opts=pulumi.ResourceOptions(depends_on=[autokms_folder]))
        # Create the resource project
        resource_project = gcp.organizations.Project("resource_project",
            project_id="resources",
            name="resources",
            folder_id=autokms_folder.folder_id,
            billing_account="000000-0000000-0000000-000000",
            opts=pulumi.ResourceOptions(depends_on=[autokms_folder]))
        # Enable the Cloud KMS API
        kms_api_service = gcp.projects.Service("kms_api_service",
            service="cloudkms.googleapis.com",
            project=key_project.project_id,
            disable_on_destroy=False,
            disable_dependent_services=True,
            opts=pulumi.ResourceOptions(depends_on=[key_project]))
        # Wait delay after enabling APIs
        wait_enable_service_api = time.index.Sleep("wait_enable_service_api", create_duration=30s,
        opts=pulumi.ResourceOptions(depends_on=[kms_api_service]))
        #Create KMS Service Agent
        kms_service_agent = gcp.projects.ServiceIdentity("kms_service_agent",
            service="cloudkms.googleapis.com",
            project=key_project.number,
            opts=pulumi.ResourceOptions(depends_on=[wait_enable_service_api]))
        # Wait delay after creating service agent.
        wait_service_agent = time.index.Sleep("wait_service_agent", create_duration=10s,
        opts=pulumi.ResourceOptions(depends_on=[kms_service_agent]))
        #Grant the KMS Service Agent the Cloud KMS Admin role
        autokey_project_admin = gcp.projects.IAMMember("autokey_project_admin",
            project=key_project.project_id,
            role="roles/cloudkms.admin",
            member=key_project.number.apply(lambda number: f"serviceAccount:service-{number}@gcp-sa-cloudkms.iam.gserviceaccount.com"),
            opts=pulumi.ResourceOptions(depends_on=[wait_service_agent]))
        # Wait delay after granting IAM permissions
        wait_srv_acc_permissions = time.index.Sleep("wait_srv_acc_permissions", create_duration=10s,
        opts=pulumi.ResourceOptions(depends_on=[autokey_project_admin]))
        autokey_config = gcp.kms.AutokeyConfig("autokey_config",
            folder=autokms_folder.folder_id,
            key_project=key_project.project_id.apply(lambda project_id: f"projects/{project_id}"),
            opts=pulumi.ResourceOptions(depends_on=[wait_srv_acc_permissions]))
        # Wait delay for autokey config to take effect
        wait_autokey_config = time.index.Sleep("wait_autokey_config", create_duration=10s,
        opts=pulumi.ResourceOptions(depends_on=[autokey_config]))
        example_keyhandle = gcp.kms.KeyHandle("example-keyhandle",
            project=resource_project.project_id,
            name="example-key-handle",
            location="global",
            resource_type_selector="storage.googleapis.com/Bucket",
            opts=pulumi.ResourceOptions(depends_on=[wait_autokey_config]))
        ```

        ## Import

        KeyHandle can be imported using any of these accepted formats:

        * `projects/{{project}}/locations/{{location}}/keyHandles/{{name}}`

        * `{{project}}/{{location}}/{{name}}`

        * `{{location}}/{{name}}`

        When using the `pulumi import` command, KeyHandle can be imported using one of the formats above. For example:

        ```sh
        $ pulumi import gcp:kms/keyHandle:KeyHandle default projects/{{project}}/locations/{{location}}/keyHandles/{{name}}
        ```

        ```sh
        $ pulumi import gcp:kms/keyHandle:KeyHandle default {{project}}/{{location}}/{{name}}
        ```

        ```sh
        $ pulumi import gcp:kms/keyHandle:KeyHandle default {{location}}/{{name}}
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] location: The location for the KeyHandle.
               A full list of valid locations can be found by running `gcloud kms locations list`.
               
               
               - - -
        :param pulumi.Input[str] name: The resource name for the KeyHandle.
        :param pulumi.Input[str] project: The ID of the project in which the resource belongs.
               If it is not provided, the provider project is used.
        :param pulumi.Input[str] resource_type_selector: Selector of the resource type where we want to protect resources.
               For example, `storage.googleapis.com/Bucket OR compute.googleapis.com/*`
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: KeyHandleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ### Kms Key Handle Basic

        ```python
        import pulumi
        import pulumi_gcp as gcp
        import pulumi_time as time

        # Create Folder in GCP Organization
        autokms_folder = gcp.organizations.Folder("autokms_folder",
            display_name="folder-example",
            parent="organizations/123456789")
        # Create the key project
        key_project = gcp.organizations.Project("key_project",
            project_id="key-proj",
            name="key-proj",
            folder_id=autokms_folder.folder_id,
            billing_account="000000-0000000-0000000-000000",
            opts=pulumi.ResourceOptions(depends_on=[autokms_folder]))
        # Create the resource project
        resource_project = gcp.organizations.Project("resource_project",
            project_id="resources",
            name="resources",
            folder_id=autokms_folder.folder_id,
            billing_account="000000-0000000-0000000-000000",
            opts=pulumi.ResourceOptions(depends_on=[autokms_folder]))
        # Enable the Cloud KMS API
        kms_api_service = gcp.projects.Service("kms_api_service",
            service="cloudkms.googleapis.com",
            project=key_project.project_id,
            disable_on_destroy=False,
            disable_dependent_services=True,
            opts=pulumi.ResourceOptions(depends_on=[key_project]))
        # Wait delay after enabling APIs
        wait_enable_service_api = time.index.Sleep("wait_enable_service_api", create_duration=30s,
        opts=pulumi.ResourceOptions(depends_on=[kms_api_service]))
        #Create KMS Service Agent
        kms_service_agent = gcp.projects.ServiceIdentity("kms_service_agent",
            service="cloudkms.googleapis.com",
            project=key_project.number,
            opts=pulumi.ResourceOptions(depends_on=[wait_enable_service_api]))
        # Wait delay after creating service agent.
        wait_service_agent = time.index.Sleep("wait_service_agent", create_duration=10s,
        opts=pulumi.ResourceOptions(depends_on=[kms_service_agent]))
        #Grant the KMS Service Agent the Cloud KMS Admin role
        autokey_project_admin = gcp.projects.IAMMember("autokey_project_admin",
            project=key_project.project_id,
            role="roles/cloudkms.admin",
            member=key_project.number.apply(lambda number: f"serviceAccount:service-{number}@gcp-sa-cloudkms.iam.gserviceaccount.com"),
            opts=pulumi.ResourceOptions(depends_on=[wait_service_agent]))
        # Wait delay after granting IAM permissions
        wait_srv_acc_permissions = time.index.Sleep("wait_srv_acc_permissions", create_duration=10s,
        opts=pulumi.ResourceOptions(depends_on=[autokey_project_admin]))
        autokey_config = gcp.kms.AutokeyConfig("autokey_config",
            folder=autokms_folder.folder_id,
            key_project=key_project.project_id.apply(lambda project_id: f"projects/{project_id}"),
            opts=pulumi.ResourceOptions(depends_on=[wait_srv_acc_permissions]))
        # Wait delay for autokey config to take effect
        wait_autokey_config = time.index.Sleep("wait_autokey_config", create_duration=10s,
        opts=pulumi.ResourceOptions(depends_on=[autokey_config]))
        example_keyhandle = gcp.kms.KeyHandle("example-keyhandle",
            project=resource_project.project_id,
            name="example-key-handle",
            location="global",
            resource_type_selector="storage.googleapis.com/Bucket",
            opts=pulumi.ResourceOptions(depends_on=[wait_autokey_config]))
        ```

        ## Import

        KeyHandle can be imported using any of these accepted formats:

        * `projects/{{project}}/locations/{{location}}/keyHandles/{{name}}`

        * `{{project}}/{{location}}/{{name}}`

        * `{{location}}/{{name}}`

        When using the `pulumi import` command, KeyHandle can be imported using one of the formats above. For example:

        ```sh
        $ pulumi import gcp:kms/keyHandle:KeyHandle default projects/{{project}}/locations/{{location}}/keyHandles/{{name}}
        ```

        ```sh
        $ pulumi import gcp:kms/keyHandle:KeyHandle default {{project}}/{{location}}/{{name}}
        ```

        ```sh
        $ pulumi import gcp:kms/keyHandle:KeyHandle default {{location}}/{{name}}
        ```

        :param str resource_name: The name of the resource.
        :param KeyHandleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(KeyHandleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 resource_type_selector: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = KeyHandleArgs.__new__(KeyHandleArgs)

            if location is None and not opts.urn:
                raise TypeError("Missing required property 'location'")
            __props__.__dict__["location"] = location
            __props__.__dict__["name"] = name
            __props__.__dict__["project"] = project
            if resource_type_selector is None and not opts.urn:
                raise TypeError("Missing required property 'resource_type_selector'")
            __props__.__dict__["resource_type_selector"] = resource_type_selector
            __props__.__dict__["kms_key"] = None
        super(KeyHandle, __self__).__init__(
            'gcp:kms/keyHandle:KeyHandle',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            kms_key: Optional[pulumi.Input[str]] = None,
            location: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            project: Optional[pulumi.Input[str]] = None,
            resource_type_selector: Optional[pulumi.Input[str]] = None) -> 'KeyHandle':
        """
        Get an existing KeyHandle resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] kms_key: A reference to a Cloud KMS CryptoKey that can be used for CMEK in the requested
               product/project/location, for example
               `projects/1/locations/us-east1/keyRings/foo/cryptoKeys/bar-ffffff`
        :param pulumi.Input[str] location: The location for the KeyHandle.
               A full list of valid locations can be found by running `gcloud kms locations list`.
               
               
               - - -
        :param pulumi.Input[str] name: The resource name for the KeyHandle.
        :param pulumi.Input[str] project: The ID of the project in which the resource belongs.
               If it is not provided, the provider project is used.
        :param pulumi.Input[str] resource_type_selector: Selector of the resource type where we want to protect resources.
               For example, `storage.googleapis.com/Bucket OR compute.googleapis.com/*`
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _KeyHandleState.__new__(_KeyHandleState)

        __props__.__dict__["kms_key"] = kms_key
        __props__.__dict__["location"] = location
        __props__.__dict__["name"] = name
        __props__.__dict__["project"] = project
        __props__.__dict__["resource_type_selector"] = resource_type_selector
        return KeyHandle(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="kmsKey")
    def kms_key(self) -> pulumi.Output[str]:
        """
        A reference to a Cloud KMS CryptoKey that can be used for CMEK in the requested
        product/project/location, for example
        `projects/1/locations/us-east1/keyRings/foo/cryptoKeys/bar-ffffff`
        """
        return pulumi.get(self, "kms_key")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        """
        The location for the KeyHandle.
        A full list of valid locations can be found by running `gcloud kms locations list`.


        - - -
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The resource name for the KeyHandle.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[str]:
        """
        The ID of the project in which the resource belongs.
        If it is not provided, the provider project is used.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="resourceTypeSelector")
    def resource_type_selector(self) -> pulumi.Output[str]:
        """
        Selector of the resource type where we want to protect resources.
        For example, `storage.googleapis.com/Bucket OR compute.googleapis.com/*`
        """
        return pulumi.get(self, "resource_type_selector")

