# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['StoragePoolArgs', 'StoragePool']

@pulumi.input_type
class StoragePoolArgs:
    def __init__(__self__, *,
                 capacity_gib: pulumi.Input[str],
                 location: pulumi.Input[str],
                 network: pulumi.Input[str],
                 service_level: pulumi.Input[str],
                 active_directory: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 kms_config: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 ldap_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a StoragePool resource.
        :param pulumi.Input[str] capacity_gib: Capacity of the storage pool (in GiB).
        :param pulumi.Input[str] location: Name of the location. Usually a region name, expect for some STANDARD service level pools which require a zone name.
        :param pulumi.Input[str] network: VPC network name with format: `projects/{{project}}/global/networks/{{network}}`
        :param pulumi.Input[str] service_level: Service level of the storage pool.
               Possible values are: `PREMIUM`, `EXTREME`, `STANDARD`.
        :param pulumi.Input[str] active_directory: Specifies the Active Directory policy to be used. Format: `projects/{{project}}/locations/{{location}}/activeDirectories/{{name}}`.
               The policy needs to be in the same location as the storage pool.
        :param pulumi.Input[str] description: An optional description of this resource.
        :param pulumi.Input[str] kms_config: Specifies the CMEK policy to be used for volume encryption. Format: `projects/{{project}}/locations/{{location}}/kmsConfigs/{{name}}`.
               The policy needs to be in the same location as the storage pool.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Labels as key value pairs. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`.
               
               **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
               Please refer to the field `effective_labels` for all of the labels present on the resource.
        :param pulumi.Input[bool] ldap_enabled: When enabled, the volumes uses Active Directory as LDAP name service for UID/GID lookups. Required to enable extended group support for NFSv3,
               using security identifiers for NFSv4.1 or principal names for kerberized NFSv4.1.
        :param pulumi.Input[str] name: The resource name of the storage pool. Needs to be unique per location.
               
               
               - - -
        :param pulumi.Input[str] project: The ID of the project in which the resource belongs.
               If it is not provided, the provider project is used.
        """
        pulumi.set(__self__, "capacity_gib", capacity_gib)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "network", network)
        pulumi.set(__self__, "service_level", service_level)
        if active_directory is not None:
            pulumi.set(__self__, "active_directory", active_directory)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if kms_config is not None:
            pulumi.set(__self__, "kms_config", kms_config)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if ldap_enabled is not None:
            pulumi.set(__self__, "ldap_enabled", ldap_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if project is not None:
            pulumi.set(__self__, "project", project)

    @property
    @pulumi.getter(name="capacityGib")
    def capacity_gib(self) -> pulumi.Input[str]:
        """
        Capacity of the storage pool (in GiB).
        """
        return pulumi.get(self, "capacity_gib")

    @capacity_gib.setter
    def capacity_gib(self, value: pulumi.Input[str]):
        pulumi.set(self, "capacity_gib", value)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input[str]:
        """
        Name of the location. Usually a region name, expect for some STANDARD service level pools which require a zone name.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[str]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def network(self) -> pulumi.Input[str]:
        """
        VPC network name with format: `projects/{{project}}/global/networks/{{network}}`
        """
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: pulumi.Input[str]):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter(name="serviceLevel")
    def service_level(self) -> pulumi.Input[str]:
        """
        Service level of the storage pool.
        Possible values are: `PREMIUM`, `EXTREME`, `STANDARD`.
        """
        return pulumi.get(self, "service_level")

    @service_level.setter
    def service_level(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_level", value)

    @property
    @pulumi.getter(name="activeDirectory")
    def active_directory(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the Active Directory policy to be used. Format: `projects/{{project}}/locations/{{location}}/activeDirectories/{{name}}`.
        The policy needs to be in the same location as the storage pool.
        """
        return pulumi.get(self, "active_directory")

    @active_directory.setter
    def active_directory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "active_directory", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        An optional description of this resource.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="kmsConfig")
    def kms_config(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the CMEK policy to be used for volume encryption. Format: `projects/{{project}}/locations/{{location}}/kmsConfigs/{{name}}`.
        The policy needs to be in the same location as the storage pool.
        """
        return pulumi.get(self, "kms_config")

    @kms_config.setter
    def kms_config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_config", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Labels as key value pairs. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`.

        **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        Please refer to the field `effective_labels` for all of the labels present on the resource.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="ldapEnabled")
    def ldap_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        When enabled, the volumes uses Active Directory as LDAP name service for UID/GID lookups. Required to enable extended group support for NFSv3,
        using security identifiers for NFSv4.1 or principal names for kerberized NFSv4.1.
        """
        return pulumi.get(self, "ldap_enabled")

    @ldap_enabled.setter
    def ldap_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ldap_enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The resource name of the storage pool. Needs to be unique per location.


        - - -
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the project in which the resource belongs.
        If it is not provided, the provider project is used.
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)


@pulumi.input_type
class _StoragePoolState:
    def __init__(__self__, *,
                 active_directory: Optional[pulumi.Input[str]] = None,
                 capacity_gib: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 effective_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 encryption_type: Optional[pulumi.Input[str]] = None,
                 kms_config: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 ldap_enabled: Optional[pulumi.Input[bool]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 pulumi_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 service_level: Optional[pulumi.Input[str]] = None,
                 volume_capacity_gib: Optional[pulumi.Input[str]] = None,
                 volume_count: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering StoragePool resources.
        :param pulumi.Input[str] active_directory: Specifies the Active Directory policy to be used. Format: `projects/{{project}}/locations/{{location}}/activeDirectories/{{name}}`.
               The policy needs to be in the same location as the storage pool.
        :param pulumi.Input[str] capacity_gib: Capacity of the storage pool (in GiB).
        :param pulumi.Input[str] description: An optional description of this resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] effective_labels: All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        :param pulumi.Input[str] encryption_type: Reports if volumes in the pool are encrypted using a Google-managed encryption key or CMEK.
        :param pulumi.Input[str] kms_config: Specifies the CMEK policy to be used for volume encryption. Format: `projects/{{project}}/locations/{{location}}/kmsConfigs/{{name}}`.
               The policy needs to be in the same location as the storage pool.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Labels as key value pairs. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`.
               
               **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
               Please refer to the field `effective_labels` for all of the labels present on the resource.
        :param pulumi.Input[bool] ldap_enabled: When enabled, the volumes uses Active Directory as LDAP name service for UID/GID lookups. Required to enable extended group support for NFSv3,
               using security identifiers for NFSv4.1 or principal names for kerberized NFSv4.1.
        :param pulumi.Input[str] location: Name of the location. Usually a region name, expect for some STANDARD service level pools which require a zone name.
        :param pulumi.Input[str] name: The resource name of the storage pool. Needs to be unique per location.
               
               
               - - -
        :param pulumi.Input[str] network: VPC network name with format: `projects/{{project}}/global/networks/{{network}}`
        :param pulumi.Input[str] project: The ID of the project in which the resource belongs.
               If it is not provided, the provider project is used.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] pulumi_labels: The combination of labels configured directly on the resource
               and default labels configured on the provider.
        :param pulumi.Input[str] service_level: Service level of the storage pool.
               Possible values are: `PREMIUM`, `EXTREME`, `STANDARD`.
        :param pulumi.Input[str] volume_capacity_gib: Size allocated to volumes in the storage pool (in GiB).
        :param pulumi.Input[int] volume_count: Number of volume in the storage pool.
        """
        if active_directory is not None:
            pulumi.set(__self__, "active_directory", active_directory)
        if capacity_gib is not None:
            pulumi.set(__self__, "capacity_gib", capacity_gib)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if effective_labels is not None:
            pulumi.set(__self__, "effective_labels", effective_labels)
        if encryption_type is not None:
            pulumi.set(__self__, "encryption_type", encryption_type)
        if kms_config is not None:
            pulumi.set(__self__, "kms_config", kms_config)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if ldap_enabled is not None:
            pulumi.set(__self__, "ldap_enabled", ldap_enabled)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if pulumi_labels is not None:
            pulumi.set(__self__, "pulumi_labels", pulumi_labels)
        if service_level is not None:
            pulumi.set(__self__, "service_level", service_level)
        if volume_capacity_gib is not None:
            pulumi.set(__self__, "volume_capacity_gib", volume_capacity_gib)
        if volume_count is not None:
            pulumi.set(__self__, "volume_count", volume_count)

    @property
    @pulumi.getter(name="activeDirectory")
    def active_directory(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the Active Directory policy to be used. Format: `projects/{{project}}/locations/{{location}}/activeDirectories/{{name}}`.
        The policy needs to be in the same location as the storage pool.
        """
        return pulumi.get(self, "active_directory")

    @active_directory.setter
    def active_directory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "active_directory", value)

    @property
    @pulumi.getter(name="capacityGib")
    def capacity_gib(self) -> Optional[pulumi.Input[str]]:
        """
        Capacity of the storage pool (in GiB).
        """
        return pulumi.get(self, "capacity_gib")

    @capacity_gib.setter
    def capacity_gib(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capacity_gib", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        An optional description of this resource.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="effectiveLabels")
    def effective_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        """
        return pulumi.get(self, "effective_labels")

    @effective_labels.setter
    def effective_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "effective_labels", value)

    @property
    @pulumi.getter(name="encryptionType")
    def encryption_type(self) -> Optional[pulumi.Input[str]]:
        """
        Reports if volumes in the pool are encrypted using a Google-managed encryption key or CMEK.
        """
        return pulumi.get(self, "encryption_type")

    @encryption_type.setter
    def encryption_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encryption_type", value)

    @property
    @pulumi.getter(name="kmsConfig")
    def kms_config(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the CMEK policy to be used for volume encryption. Format: `projects/{{project}}/locations/{{location}}/kmsConfigs/{{name}}`.
        The policy needs to be in the same location as the storage pool.
        """
        return pulumi.get(self, "kms_config")

    @kms_config.setter
    def kms_config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_config", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Labels as key value pairs. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`.

        **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        Please refer to the field `effective_labels` for all of the labels present on the resource.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="ldapEnabled")
    def ldap_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        When enabled, the volumes uses Active Directory as LDAP name service for UID/GID lookups. Required to enable extended group support for NFSv3,
        using security identifiers for NFSv4.1 or principal names for kerberized NFSv4.1.
        """
        return pulumi.get(self, "ldap_enabled")

    @ldap_enabled.setter
    def ldap_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ldap_enabled", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the location. Usually a region name, expect for some STANDARD service level pools which require a zone name.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The resource name of the storage pool. Needs to be unique per location.


        - - -
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def network(self) -> Optional[pulumi.Input[str]]:
        """
        VPC network name with format: `projects/{{project}}/global/networks/{{network}}`
        """
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the project in which the resource belongs.
        If it is not provided, the provider project is used.
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="pulumiLabels")
    def pulumi_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The combination of labels configured directly on the resource
        and default labels configured on the provider.
        """
        return pulumi.get(self, "pulumi_labels")

    @pulumi_labels.setter
    def pulumi_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "pulumi_labels", value)

    @property
    @pulumi.getter(name="serviceLevel")
    def service_level(self) -> Optional[pulumi.Input[str]]:
        """
        Service level of the storage pool.
        Possible values are: `PREMIUM`, `EXTREME`, `STANDARD`.
        """
        return pulumi.get(self, "service_level")

    @service_level.setter
    def service_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_level", value)

    @property
    @pulumi.getter(name="volumeCapacityGib")
    def volume_capacity_gib(self) -> Optional[pulumi.Input[str]]:
        """
        Size allocated to volumes in the storage pool (in GiB).
        """
        return pulumi.get(self, "volume_capacity_gib")

    @volume_capacity_gib.setter
    def volume_capacity_gib(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volume_capacity_gib", value)

    @property
    @pulumi.getter(name="volumeCount")
    def volume_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of volume in the storage pool.
        """
        return pulumi.get(self, "volume_count")

    @volume_count.setter
    def volume_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "volume_count", value)


class StoragePool(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 active_directory: Optional[pulumi.Input[str]] = None,
                 capacity_gib: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 kms_config: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 ldap_enabled: Optional[pulumi.Input[bool]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 service_level: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Storage pools act as containers for volumes. All volumes in a storage pool share the following information:
        * Location
        * Service level
        * Virtual Private Cloud (VPC) network
        * Active Directory policy
        * LDAP use for NFS volumes, if applicable
        * Customer-managed encryption key (CMEK) policy

        The capacity of the pool can be split up and assigned to volumes within the pool. Storage pools are a billable component of NetApp Volumes. Billing is based on the location, service level, and capacity allocated to a pool independent of consumption at the volume level.

        To get more information about storagePool, see:

        * [API documentation](https://cloud.google.com/netapp/volumes/docs/reference/rest/v1/projects.locations.storagePools)
        * How-to Guides
            * [QUICKSTART_TITLE](https://cloud.google.com/netapp/volumes/docs/get-started/quickstarts/create-storage-pool)

        ## Example Usage
        ### Storage Pool Create

        ```python
        import pulumi
        import pulumi_gcp as gcp

        peering_network = gcp.compute.Network("peeringNetwork")
        # Create an IP address
        private_ip_alloc = gcp.compute.GlobalAddress("privateIpAlloc",
            purpose="VPC_PEERING",
            address_type="INTERNAL",
            prefix_length=16,
            network=peering_network.id)
        # Create a private connection
        default = gcp.servicenetworking.Connection("default",
            network=peering_network.id,
            service="netapp.servicenetworking.goog",
            reserved_peering_ranges=[private_ip_alloc.name])
        test_pool = gcp.netapp.StoragePool("testPool",
            location="us-central1",
            service_level="PREMIUM",
            capacity_gib="2048",
            network=peering_network.id)
        ```

        ## Import

        storagePool can be imported using any of these accepted formats* `projects/{{project}}/locations/{{location}}/storagePools/{{name}}` * `{{project}}/{{location}}/{{name}}` * `{{location}}/{{name}}` In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import storagePool using one of the formats above. For exampletf import {

         id = "projects/{{project}}/locations/{{location}}/storagePools/{{name}}"

         to = google_netapp_storage_pool.default }

        ```sh
         $ pulumi import gcp:netapp/storagePool:StoragePool When using the [`terraform import` command](https://developer.hashicorp.com/terraform/cli/commands/import), storagePool can be imported using one of the formats above. For example
        ```

        ```sh
         $ pulumi import gcp:netapp/storagePool:StoragePool default projects/{{project}}/locations/{{location}}/storagePools/{{name}}
        ```

        ```sh
         $ pulumi import gcp:netapp/storagePool:StoragePool default {{project}}/{{location}}/{{name}}
        ```

        ```sh
         $ pulumi import gcp:netapp/storagePool:StoragePool default {{location}}/{{name}}
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] active_directory: Specifies the Active Directory policy to be used. Format: `projects/{{project}}/locations/{{location}}/activeDirectories/{{name}}`.
               The policy needs to be in the same location as the storage pool.
        :param pulumi.Input[str] capacity_gib: Capacity of the storage pool (in GiB).
        :param pulumi.Input[str] description: An optional description of this resource.
        :param pulumi.Input[str] kms_config: Specifies the CMEK policy to be used for volume encryption. Format: `projects/{{project}}/locations/{{location}}/kmsConfigs/{{name}}`.
               The policy needs to be in the same location as the storage pool.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Labels as key value pairs. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`.
               
               **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
               Please refer to the field `effective_labels` for all of the labels present on the resource.
        :param pulumi.Input[bool] ldap_enabled: When enabled, the volumes uses Active Directory as LDAP name service for UID/GID lookups. Required to enable extended group support for NFSv3,
               using security identifiers for NFSv4.1 or principal names for kerberized NFSv4.1.
        :param pulumi.Input[str] location: Name of the location. Usually a region name, expect for some STANDARD service level pools which require a zone name.
        :param pulumi.Input[str] name: The resource name of the storage pool. Needs to be unique per location.
               
               
               - - -
        :param pulumi.Input[str] network: VPC network name with format: `projects/{{project}}/global/networks/{{network}}`
        :param pulumi.Input[str] project: The ID of the project in which the resource belongs.
               If it is not provided, the provider project is used.
        :param pulumi.Input[str] service_level: Service level of the storage pool.
               Possible values are: `PREMIUM`, `EXTREME`, `STANDARD`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: StoragePoolArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Storage pools act as containers for volumes. All volumes in a storage pool share the following information:
        * Location
        * Service level
        * Virtual Private Cloud (VPC) network
        * Active Directory policy
        * LDAP use for NFS volumes, if applicable
        * Customer-managed encryption key (CMEK) policy

        The capacity of the pool can be split up and assigned to volumes within the pool. Storage pools are a billable component of NetApp Volumes. Billing is based on the location, service level, and capacity allocated to a pool independent of consumption at the volume level.

        To get more information about storagePool, see:

        * [API documentation](https://cloud.google.com/netapp/volumes/docs/reference/rest/v1/projects.locations.storagePools)
        * How-to Guides
            * [QUICKSTART_TITLE](https://cloud.google.com/netapp/volumes/docs/get-started/quickstarts/create-storage-pool)

        ## Example Usage
        ### Storage Pool Create

        ```python
        import pulumi
        import pulumi_gcp as gcp

        peering_network = gcp.compute.Network("peeringNetwork")
        # Create an IP address
        private_ip_alloc = gcp.compute.GlobalAddress("privateIpAlloc",
            purpose="VPC_PEERING",
            address_type="INTERNAL",
            prefix_length=16,
            network=peering_network.id)
        # Create a private connection
        default = gcp.servicenetworking.Connection("default",
            network=peering_network.id,
            service="netapp.servicenetworking.goog",
            reserved_peering_ranges=[private_ip_alloc.name])
        test_pool = gcp.netapp.StoragePool("testPool",
            location="us-central1",
            service_level="PREMIUM",
            capacity_gib="2048",
            network=peering_network.id)
        ```

        ## Import

        storagePool can be imported using any of these accepted formats* `projects/{{project}}/locations/{{location}}/storagePools/{{name}}` * `{{project}}/{{location}}/{{name}}` * `{{location}}/{{name}}` In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import storagePool using one of the formats above. For exampletf import {

         id = "projects/{{project}}/locations/{{location}}/storagePools/{{name}}"

         to = google_netapp_storage_pool.default }

        ```sh
         $ pulumi import gcp:netapp/storagePool:StoragePool When using the [`terraform import` command](https://developer.hashicorp.com/terraform/cli/commands/import), storagePool can be imported using one of the formats above. For example
        ```

        ```sh
         $ pulumi import gcp:netapp/storagePool:StoragePool default projects/{{project}}/locations/{{location}}/storagePools/{{name}}
        ```

        ```sh
         $ pulumi import gcp:netapp/storagePool:StoragePool default {{project}}/{{location}}/{{name}}
        ```

        ```sh
         $ pulumi import gcp:netapp/storagePool:StoragePool default {{location}}/{{name}}
        ```

        :param str resource_name: The name of the resource.
        :param StoragePoolArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(StoragePoolArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 active_directory: Optional[pulumi.Input[str]] = None,
                 capacity_gib: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 kms_config: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 ldap_enabled: Optional[pulumi.Input[bool]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 service_level: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = StoragePoolArgs.__new__(StoragePoolArgs)

            __props__.__dict__["active_directory"] = active_directory
            if capacity_gib is None and not opts.urn:
                raise TypeError("Missing required property 'capacity_gib'")
            __props__.__dict__["capacity_gib"] = capacity_gib
            __props__.__dict__["description"] = description
            __props__.__dict__["kms_config"] = kms_config
            __props__.__dict__["labels"] = labels
            __props__.__dict__["ldap_enabled"] = ldap_enabled
            if location is None and not opts.urn:
                raise TypeError("Missing required property 'location'")
            __props__.__dict__["location"] = location
            __props__.__dict__["name"] = name
            if network is None and not opts.urn:
                raise TypeError("Missing required property 'network'")
            __props__.__dict__["network"] = network
            __props__.__dict__["project"] = project
            if service_level is None and not opts.urn:
                raise TypeError("Missing required property 'service_level'")
            __props__.__dict__["service_level"] = service_level
            __props__.__dict__["effective_labels"] = None
            __props__.__dict__["encryption_type"] = None
            __props__.__dict__["pulumi_labels"] = None
            __props__.__dict__["volume_capacity_gib"] = None
            __props__.__dict__["volume_count"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["effectiveLabels", "pulumiLabels"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(StoragePool, __self__).__init__(
            'gcp:netapp/storagePool:StoragePool',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            active_directory: Optional[pulumi.Input[str]] = None,
            capacity_gib: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            effective_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            encryption_type: Optional[pulumi.Input[str]] = None,
            kms_config: Optional[pulumi.Input[str]] = None,
            labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            ldap_enabled: Optional[pulumi.Input[bool]] = None,
            location: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            network: Optional[pulumi.Input[str]] = None,
            project: Optional[pulumi.Input[str]] = None,
            pulumi_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            service_level: Optional[pulumi.Input[str]] = None,
            volume_capacity_gib: Optional[pulumi.Input[str]] = None,
            volume_count: Optional[pulumi.Input[int]] = None) -> 'StoragePool':
        """
        Get an existing StoragePool resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] active_directory: Specifies the Active Directory policy to be used. Format: `projects/{{project}}/locations/{{location}}/activeDirectories/{{name}}`.
               The policy needs to be in the same location as the storage pool.
        :param pulumi.Input[str] capacity_gib: Capacity of the storage pool (in GiB).
        :param pulumi.Input[str] description: An optional description of this resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] effective_labels: All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        :param pulumi.Input[str] encryption_type: Reports if volumes in the pool are encrypted using a Google-managed encryption key or CMEK.
        :param pulumi.Input[str] kms_config: Specifies the CMEK policy to be used for volume encryption. Format: `projects/{{project}}/locations/{{location}}/kmsConfigs/{{name}}`.
               The policy needs to be in the same location as the storage pool.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Labels as key value pairs. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`.
               
               **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
               Please refer to the field `effective_labels` for all of the labels present on the resource.
        :param pulumi.Input[bool] ldap_enabled: When enabled, the volumes uses Active Directory as LDAP name service for UID/GID lookups. Required to enable extended group support for NFSv3,
               using security identifiers for NFSv4.1 or principal names for kerberized NFSv4.1.
        :param pulumi.Input[str] location: Name of the location. Usually a region name, expect for some STANDARD service level pools which require a zone name.
        :param pulumi.Input[str] name: The resource name of the storage pool. Needs to be unique per location.
               
               
               - - -
        :param pulumi.Input[str] network: VPC network name with format: `projects/{{project}}/global/networks/{{network}}`
        :param pulumi.Input[str] project: The ID of the project in which the resource belongs.
               If it is not provided, the provider project is used.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] pulumi_labels: The combination of labels configured directly on the resource
               and default labels configured on the provider.
        :param pulumi.Input[str] service_level: Service level of the storage pool.
               Possible values are: `PREMIUM`, `EXTREME`, `STANDARD`.
        :param pulumi.Input[str] volume_capacity_gib: Size allocated to volumes in the storage pool (in GiB).
        :param pulumi.Input[int] volume_count: Number of volume in the storage pool.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _StoragePoolState.__new__(_StoragePoolState)

        __props__.__dict__["active_directory"] = active_directory
        __props__.__dict__["capacity_gib"] = capacity_gib
        __props__.__dict__["description"] = description
        __props__.__dict__["effective_labels"] = effective_labels
        __props__.__dict__["encryption_type"] = encryption_type
        __props__.__dict__["kms_config"] = kms_config
        __props__.__dict__["labels"] = labels
        __props__.__dict__["ldap_enabled"] = ldap_enabled
        __props__.__dict__["location"] = location
        __props__.__dict__["name"] = name
        __props__.__dict__["network"] = network
        __props__.__dict__["project"] = project
        __props__.__dict__["pulumi_labels"] = pulumi_labels
        __props__.__dict__["service_level"] = service_level
        __props__.__dict__["volume_capacity_gib"] = volume_capacity_gib
        __props__.__dict__["volume_count"] = volume_count
        return StoragePool(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="activeDirectory")
    def active_directory(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the Active Directory policy to be used. Format: `projects/{{project}}/locations/{{location}}/activeDirectories/{{name}}`.
        The policy needs to be in the same location as the storage pool.
        """
        return pulumi.get(self, "active_directory")

    @property
    @pulumi.getter(name="capacityGib")
    def capacity_gib(self) -> pulumi.Output[str]:
        """
        Capacity of the storage pool (in GiB).
        """
        return pulumi.get(self, "capacity_gib")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        An optional description of this resource.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="effectiveLabels")
    def effective_labels(self) -> pulumi.Output[Mapping[str, str]]:
        """
        All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        """
        return pulumi.get(self, "effective_labels")

    @property
    @pulumi.getter(name="encryptionType")
    def encryption_type(self) -> pulumi.Output[str]:
        """
        Reports if volumes in the pool are encrypted using a Google-managed encryption key or CMEK.
        """
        return pulumi.get(self, "encryption_type")

    @property
    @pulumi.getter(name="kmsConfig")
    def kms_config(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the CMEK policy to be used for volume encryption. Format: `projects/{{project}}/locations/{{location}}/kmsConfigs/{{name}}`.
        The policy needs to be in the same location as the storage pool.
        """
        return pulumi.get(self, "kms_config")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Labels as key value pairs. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`.

        **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        Please refer to the field `effective_labels` for all of the labels present on the resource.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="ldapEnabled")
    def ldap_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        When enabled, the volumes uses Active Directory as LDAP name service for UID/GID lookups. Required to enable extended group support for NFSv3,
        using security identifiers for NFSv4.1 or principal names for kerberized NFSv4.1.
        """
        return pulumi.get(self, "ldap_enabled")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        """
        Name of the location. Usually a region name, expect for some STANDARD service level pools which require a zone name.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The resource name of the storage pool. Needs to be unique per location.


        - - -
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def network(self) -> pulumi.Output[str]:
        """
        VPC network name with format: `projects/{{project}}/global/networks/{{network}}`
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[str]:
        """
        The ID of the project in which the resource belongs.
        If it is not provided, the provider project is used.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="pulumiLabels")
    def pulumi_labels(self) -> pulumi.Output[Mapping[str, str]]:
        """
        The combination of labels configured directly on the resource
        and default labels configured on the provider.
        """
        return pulumi.get(self, "pulumi_labels")

    @property
    @pulumi.getter(name="serviceLevel")
    def service_level(self) -> pulumi.Output[str]:
        """
        Service level of the storage pool.
        Possible values are: `PREMIUM`, `EXTREME`, `STANDARD`.
        """
        return pulumi.get(self, "service_level")

    @property
    @pulumi.getter(name="volumeCapacityGib")
    def volume_capacity_gib(self) -> pulumi.Output[str]:
        """
        Size allocated to volumes in the storage pool (in GiB).
        """
        return pulumi.get(self, "volume_capacity_gib")

    @property
    @pulumi.getter(name="volumeCount")
    def volume_count(self) -> pulumi.Output[int]:
        """
        Number of volume in the storage pool.
        """
        return pulumi.get(self, "volume_count")

