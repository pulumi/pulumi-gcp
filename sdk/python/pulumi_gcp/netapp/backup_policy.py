# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['BackupPolicyArgs', 'BackupPolicy']

@pulumi.input_type
class BackupPolicyArgs:
    def __init__(__self__, *,
                 daily_backup_limit: pulumi.Input[int],
                 location: pulumi.Input[str],
                 monthly_backup_limit: pulumi.Input[int],
                 weekly_backup_limit: pulumi.Input[int],
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a BackupPolicy resource.
        :param pulumi.Input[int] daily_backup_limit: Number of daily backups to keep. Note that the minimum daily backup limit is 2.
        :param pulumi.Input[str] location: Name of the region for the policy to apply to.
        :param pulumi.Input[int] monthly_backup_limit: Number of monthly backups to keep. Note that the sum of daily, weekly and monthly backups should be greater than 1.
        :param pulumi.Input[int] weekly_backup_limit: Number of weekly backups to keep. Note that the sum of daily, weekly and monthly backups should be greater than 1.
        :param pulumi.Input[str] description: An optional description of this resource.
        :param pulumi.Input[bool] enabled: If enabled, make backups automatically according to the schedules.
               This will be applied to all volumes that have this policy attached and enforced on volume level.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Labels as key value pairs. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`.
               
               **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
               Please refer to the field `effective_labels` for all of the labels present on the resource.
        :param pulumi.Input[str] name: The name of the backup policy. Needs to be unique per location.
               
               
               - - -
        :param pulumi.Input[str] project: The ID of the project in which the resource belongs.
               If it is not provided, the provider project is used.
        """
        pulumi.set(__self__, "daily_backup_limit", daily_backup_limit)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "monthly_backup_limit", monthly_backup_limit)
        pulumi.set(__self__, "weekly_backup_limit", weekly_backup_limit)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if project is not None:
            pulumi.set(__self__, "project", project)

    @property
    @pulumi.getter(name="dailyBackupLimit")
    def daily_backup_limit(self) -> pulumi.Input[int]:
        """
        Number of daily backups to keep. Note that the minimum daily backup limit is 2.
        """
        return pulumi.get(self, "daily_backup_limit")

    @daily_backup_limit.setter
    def daily_backup_limit(self, value: pulumi.Input[int]):
        pulumi.set(self, "daily_backup_limit", value)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input[str]:
        """
        Name of the region for the policy to apply to.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[str]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="monthlyBackupLimit")
    def monthly_backup_limit(self) -> pulumi.Input[int]:
        """
        Number of monthly backups to keep. Note that the sum of daily, weekly and monthly backups should be greater than 1.
        """
        return pulumi.get(self, "monthly_backup_limit")

    @monthly_backup_limit.setter
    def monthly_backup_limit(self, value: pulumi.Input[int]):
        pulumi.set(self, "monthly_backup_limit", value)

    @property
    @pulumi.getter(name="weeklyBackupLimit")
    def weekly_backup_limit(self) -> pulumi.Input[int]:
        """
        Number of weekly backups to keep. Note that the sum of daily, weekly and monthly backups should be greater than 1.
        """
        return pulumi.get(self, "weekly_backup_limit")

    @weekly_backup_limit.setter
    def weekly_backup_limit(self, value: pulumi.Input[int]):
        pulumi.set(self, "weekly_backup_limit", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        An optional description of this resource.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        If enabled, make backups automatically according to the schedules.
        This will be applied to all volumes that have this policy attached and enforced on volume level.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Labels as key value pairs. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`.

        **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        Please refer to the field `effective_labels` for all of the labels present on the resource.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the backup policy. Needs to be unique per location.


        - - -
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the project in which the resource belongs.
        If it is not provided, the provider project is used.
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)


@pulumi.input_type
class _BackupPolicyState:
    def __init__(__self__, *,
                 assigned_volume_count: Optional[pulumi.Input[int]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 daily_backup_limit: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 effective_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 monthly_backup_limit: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 pulumi_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 weekly_backup_limit: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering BackupPolicy resources.
        :param pulumi.Input[int] assigned_volume_count: The total number of volumes assigned by this backup policy.
        :param pulumi.Input[str] create_time: Create time of the backup policy. A timestamp in RFC3339 UTC "Zulu" format. Examples: "2023-06-22T09:13:01.617Z".
        :param pulumi.Input[int] daily_backup_limit: Number of daily backups to keep. Note that the minimum daily backup limit is 2.
        :param pulumi.Input[str] description: An optional description of this resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] effective_labels: All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        :param pulumi.Input[bool] enabled: If enabled, make backups automatically according to the schedules.
               This will be applied to all volumes that have this policy attached and enforced on volume level.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Labels as key value pairs. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`.
               
               **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
               Please refer to the field `effective_labels` for all of the labels present on the resource.
        :param pulumi.Input[str] location: Name of the region for the policy to apply to.
        :param pulumi.Input[int] monthly_backup_limit: Number of monthly backups to keep. Note that the sum of daily, weekly and monthly backups should be greater than 1.
        :param pulumi.Input[str] name: The name of the backup policy. Needs to be unique per location.
               
               
               - - -
        :param pulumi.Input[str] project: The ID of the project in which the resource belongs.
               If it is not provided, the provider project is used.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] pulumi_labels: The combination of labels configured directly on the resource
               and default labels configured on the provider.
        :param pulumi.Input[str] state: The state of the backup policy.
        :param pulumi.Input[int] weekly_backup_limit: Number of weekly backups to keep. Note that the sum of daily, weekly and monthly backups should be greater than 1.
        """
        if assigned_volume_count is not None:
            pulumi.set(__self__, "assigned_volume_count", assigned_volume_count)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if daily_backup_limit is not None:
            pulumi.set(__self__, "daily_backup_limit", daily_backup_limit)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if effective_labels is not None:
            pulumi.set(__self__, "effective_labels", effective_labels)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if monthly_backup_limit is not None:
            pulumi.set(__self__, "monthly_backup_limit", monthly_backup_limit)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if pulumi_labels is not None:
            pulumi.set(__self__, "pulumi_labels", pulumi_labels)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if weekly_backup_limit is not None:
            pulumi.set(__self__, "weekly_backup_limit", weekly_backup_limit)

    @property
    @pulumi.getter(name="assignedVolumeCount")
    def assigned_volume_count(self) -> Optional[pulumi.Input[int]]:
        """
        The total number of volumes assigned by this backup policy.
        """
        return pulumi.get(self, "assigned_volume_count")

    @assigned_volume_count.setter
    def assigned_volume_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "assigned_volume_count", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        Create time of the backup policy. A timestamp in RFC3339 UTC "Zulu" format. Examples: "2023-06-22T09:13:01.617Z".
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="dailyBackupLimit")
    def daily_backup_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Number of daily backups to keep. Note that the minimum daily backup limit is 2.
        """
        return pulumi.get(self, "daily_backup_limit")

    @daily_backup_limit.setter
    def daily_backup_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "daily_backup_limit", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        An optional description of this resource.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="effectiveLabels")
    def effective_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        """
        return pulumi.get(self, "effective_labels")

    @effective_labels.setter
    def effective_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "effective_labels", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        If enabled, make backups automatically according to the schedules.
        This will be applied to all volumes that have this policy attached and enforced on volume level.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Labels as key value pairs. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`.

        **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        Please refer to the field `effective_labels` for all of the labels present on the resource.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the region for the policy to apply to.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="monthlyBackupLimit")
    def monthly_backup_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Number of monthly backups to keep. Note that the sum of daily, weekly and monthly backups should be greater than 1.
        """
        return pulumi.get(self, "monthly_backup_limit")

    @monthly_backup_limit.setter
    def monthly_backup_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "monthly_backup_limit", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the backup policy. Needs to be unique per location.


        - - -
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the project in which the resource belongs.
        If it is not provided, the provider project is used.
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="pulumiLabels")
    def pulumi_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The combination of labels configured directly on the resource
        and default labels configured on the provider.
        """
        return pulumi.get(self, "pulumi_labels")

    @pulumi_labels.setter
    def pulumi_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "pulumi_labels", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        The state of the backup policy.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="weeklyBackupLimit")
    def weekly_backup_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Number of weekly backups to keep. Note that the sum of daily, weekly and monthly backups should be greater than 1.
        """
        return pulumi.get(self, "weekly_backup_limit")

    @weekly_backup_limit.setter
    def weekly_backup_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weekly_backup_limit", value)


class BackupPolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 daily_backup_limit: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 monthly_backup_limit: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 weekly_backup_limit: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        A backup policy is used to schedule backups at regular daily, weekly, or monthly intervals.
        Backup policies allow you to attach a backup schedule to a volume.
        The policy defines how many backups to retain at daily, weekly, or monthly intervals.

        To get more information about backupPolicy, see:

        * [API documentation](https://cloud.google.com/netapp/volumes/docs/reference/rest/v1/projects.locations.backupPolicies)
        * How-to Guides
            * [Documentation](https://cloud.google.com/netapp/volumes/docs/protect-data/about-volume-backups#about_backup_policies)

        ## Example Usage
        ### Netapp Backup Policy Full

        ```python
        import pulumi
        import pulumi_gcp as gcp

        test_backup_policy_full = gcp.netapp.BackupPolicy("testBackupPolicyFull",
            daily_backup_limit=2,
            description="TF test backup schedule",
            enabled=True,
            labels={
                "foo": "bar",
            },
            location="us-central1",
            monthly_backup_limit=1,
            weekly_backup_limit=1)
        ```

        ## Import

        backupPolicy can be imported using any of these accepted formats:

         * `projects/{{project}}/locations/{{location}}/backupPolicies/{{name}}`

         * `{{project}}/{{location}}/{{name}}`

         * `{{location}}/{{name}}`

         When using the `pulumi import` command, backupPolicy can be imported using one of the formats above. For example:

        ```sh
        $ pulumi import gcp:netapp/backupPolicy:BackupPolicy default projects/{{project}}/locations/{{location}}/backupPolicies/{{name}}
        ```

        ```sh
        $ pulumi import gcp:netapp/backupPolicy:BackupPolicy default {{project}}/{{location}}/{{name}}
        ```

        ```sh
        $ pulumi import gcp:netapp/backupPolicy:BackupPolicy default {{location}}/{{name}}
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] daily_backup_limit: Number of daily backups to keep. Note that the minimum daily backup limit is 2.
        :param pulumi.Input[str] description: An optional description of this resource.
        :param pulumi.Input[bool] enabled: If enabled, make backups automatically according to the schedules.
               This will be applied to all volumes that have this policy attached and enforced on volume level.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Labels as key value pairs. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`.
               
               **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
               Please refer to the field `effective_labels` for all of the labels present on the resource.
        :param pulumi.Input[str] location: Name of the region for the policy to apply to.
        :param pulumi.Input[int] monthly_backup_limit: Number of monthly backups to keep. Note that the sum of daily, weekly and monthly backups should be greater than 1.
        :param pulumi.Input[str] name: The name of the backup policy. Needs to be unique per location.
               
               
               - - -
        :param pulumi.Input[str] project: The ID of the project in which the resource belongs.
               If it is not provided, the provider project is used.
        :param pulumi.Input[int] weekly_backup_limit: Number of weekly backups to keep. Note that the sum of daily, weekly and monthly backups should be greater than 1.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BackupPolicyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        A backup policy is used to schedule backups at regular daily, weekly, or monthly intervals.
        Backup policies allow you to attach a backup schedule to a volume.
        The policy defines how many backups to retain at daily, weekly, or monthly intervals.

        To get more information about backupPolicy, see:

        * [API documentation](https://cloud.google.com/netapp/volumes/docs/reference/rest/v1/projects.locations.backupPolicies)
        * How-to Guides
            * [Documentation](https://cloud.google.com/netapp/volumes/docs/protect-data/about-volume-backups#about_backup_policies)

        ## Example Usage
        ### Netapp Backup Policy Full

        ```python
        import pulumi
        import pulumi_gcp as gcp

        test_backup_policy_full = gcp.netapp.BackupPolicy("testBackupPolicyFull",
            daily_backup_limit=2,
            description="TF test backup schedule",
            enabled=True,
            labels={
                "foo": "bar",
            },
            location="us-central1",
            monthly_backup_limit=1,
            weekly_backup_limit=1)
        ```

        ## Import

        backupPolicy can be imported using any of these accepted formats:

         * `projects/{{project}}/locations/{{location}}/backupPolicies/{{name}}`

         * `{{project}}/{{location}}/{{name}}`

         * `{{location}}/{{name}}`

         When using the `pulumi import` command, backupPolicy can be imported using one of the formats above. For example:

        ```sh
        $ pulumi import gcp:netapp/backupPolicy:BackupPolicy default projects/{{project}}/locations/{{location}}/backupPolicies/{{name}}
        ```

        ```sh
        $ pulumi import gcp:netapp/backupPolicy:BackupPolicy default {{project}}/{{location}}/{{name}}
        ```

        ```sh
        $ pulumi import gcp:netapp/backupPolicy:BackupPolicy default {{location}}/{{name}}
        ```

        :param str resource_name: The name of the resource.
        :param BackupPolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BackupPolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 daily_backup_limit: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 monthly_backup_limit: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 weekly_backup_limit: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BackupPolicyArgs.__new__(BackupPolicyArgs)

            if daily_backup_limit is None and not opts.urn:
                raise TypeError("Missing required property 'daily_backup_limit'")
            __props__.__dict__["daily_backup_limit"] = daily_backup_limit
            __props__.__dict__["description"] = description
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["labels"] = labels
            if location is None and not opts.urn:
                raise TypeError("Missing required property 'location'")
            __props__.__dict__["location"] = location
            if monthly_backup_limit is None and not opts.urn:
                raise TypeError("Missing required property 'monthly_backup_limit'")
            __props__.__dict__["monthly_backup_limit"] = monthly_backup_limit
            __props__.__dict__["name"] = name
            __props__.__dict__["project"] = project
            if weekly_backup_limit is None and not opts.urn:
                raise TypeError("Missing required property 'weekly_backup_limit'")
            __props__.__dict__["weekly_backup_limit"] = weekly_backup_limit
            __props__.__dict__["assigned_volume_count"] = None
            __props__.__dict__["create_time"] = None
            __props__.__dict__["effective_labels"] = None
            __props__.__dict__["pulumi_labels"] = None
            __props__.__dict__["state"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["effectiveLabels", "pulumiLabels"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(BackupPolicy, __self__).__init__(
            'gcp:netapp/backupPolicy:BackupPolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            assigned_volume_count: Optional[pulumi.Input[int]] = None,
            create_time: Optional[pulumi.Input[str]] = None,
            daily_backup_limit: Optional[pulumi.Input[int]] = None,
            description: Optional[pulumi.Input[str]] = None,
            effective_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            enabled: Optional[pulumi.Input[bool]] = None,
            labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            location: Optional[pulumi.Input[str]] = None,
            monthly_backup_limit: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            project: Optional[pulumi.Input[str]] = None,
            pulumi_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            state: Optional[pulumi.Input[str]] = None,
            weekly_backup_limit: Optional[pulumi.Input[int]] = None) -> 'BackupPolicy':
        """
        Get an existing BackupPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] assigned_volume_count: The total number of volumes assigned by this backup policy.
        :param pulumi.Input[str] create_time: Create time of the backup policy. A timestamp in RFC3339 UTC "Zulu" format. Examples: "2023-06-22T09:13:01.617Z".
        :param pulumi.Input[int] daily_backup_limit: Number of daily backups to keep. Note that the minimum daily backup limit is 2.
        :param pulumi.Input[str] description: An optional description of this resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] effective_labels: All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        :param pulumi.Input[bool] enabled: If enabled, make backups automatically according to the schedules.
               This will be applied to all volumes that have this policy attached and enforced on volume level.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Labels as key value pairs. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`.
               
               **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
               Please refer to the field `effective_labels` for all of the labels present on the resource.
        :param pulumi.Input[str] location: Name of the region for the policy to apply to.
        :param pulumi.Input[int] monthly_backup_limit: Number of monthly backups to keep. Note that the sum of daily, weekly and monthly backups should be greater than 1.
        :param pulumi.Input[str] name: The name of the backup policy. Needs to be unique per location.
               
               
               - - -
        :param pulumi.Input[str] project: The ID of the project in which the resource belongs.
               If it is not provided, the provider project is used.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] pulumi_labels: The combination of labels configured directly on the resource
               and default labels configured on the provider.
        :param pulumi.Input[str] state: The state of the backup policy.
        :param pulumi.Input[int] weekly_backup_limit: Number of weekly backups to keep. Note that the sum of daily, weekly and monthly backups should be greater than 1.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BackupPolicyState.__new__(_BackupPolicyState)

        __props__.__dict__["assigned_volume_count"] = assigned_volume_count
        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["daily_backup_limit"] = daily_backup_limit
        __props__.__dict__["description"] = description
        __props__.__dict__["effective_labels"] = effective_labels
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["labels"] = labels
        __props__.__dict__["location"] = location
        __props__.__dict__["monthly_backup_limit"] = monthly_backup_limit
        __props__.__dict__["name"] = name
        __props__.__dict__["project"] = project
        __props__.__dict__["pulumi_labels"] = pulumi_labels
        __props__.__dict__["state"] = state
        __props__.__dict__["weekly_backup_limit"] = weekly_backup_limit
        return BackupPolicy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="assignedVolumeCount")
    def assigned_volume_count(self) -> pulumi.Output[int]:
        """
        The total number of volumes assigned by this backup policy.
        """
        return pulumi.get(self, "assigned_volume_count")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        Create time of the backup policy. A timestamp in RFC3339 UTC "Zulu" format. Examples: "2023-06-22T09:13:01.617Z".
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="dailyBackupLimit")
    def daily_backup_limit(self) -> pulumi.Output[int]:
        """
        Number of daily backups to keep. Note that the minimum daily backup limit is 2.
        """
        return pulumi.get(self, "daily_backup_limit")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        An optional description of this resource.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="effectiveLabels")
    def effective_labels(self) -> pulumi.Output[Mapping[str, str]]:
        """
        All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        """
        return pulumi.get(self, "effective_labels")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        If enabled, make backups automatically according to the schedules.
        This will be applied to all volumes that have this policy attached and enforced on volume level.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Labels as key value pairs. Example: `{ "owner": "Bob", "department": "finance", "purpose": "testing" }`.

        **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        Please refer to the field `effective_labels` for all of the labels present on the resource.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        """
        Name of the region for the policy to apply to.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="monthlyBackupLimit")
    def monthly_backup_limit(self) -> pulumi.Output[int]:
        """
        Number of monthly backups to keep. Note that the sum of daily, weekly and monthly backups should be greater than 1.
        """
        return pulumi.get(self, "monthly_backup_limit")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the backup policy. Needs to be unique per location.


        - - -
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[str]:
        """
        The ID of the project in which the resource belongs.
        If it is not provided, the provider project is used.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="pulumiLabels")
    def pulumi_labels(self) -> pulumi.Output[Mapping[str, str]]:
        """
        The combination of labels configured directly on the resource
        and default labels configured on the provider.
        """
        return pulumi.get(self, "pulumi_labels")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        """
        The state of the backup policy.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="weeklyBackupLimit")
    def weekly_backup_limit(self) -> pulumi.Output[int]:
        """
        Number of weekly backups to keep. Note that the sum of daily, weekly and monthly backups should be greater than 1.
        """
        return pulumi.get(self, "weekly_backup_limit")

