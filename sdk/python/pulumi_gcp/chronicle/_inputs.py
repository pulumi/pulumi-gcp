# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'WatchlistEntityCountArgs',
    'WatchlistEntityCountArgsDict',
    'WatchlistEntityPopulationMechanismArgs',
    'WatchlistEntityPopulationMechanismArgsDict',
    'WatchlistEntityPopulationMechanismManualArgs',
    'WatchlistEntityPopulationMechanismManualArgsDict',
    'WatchlistWatchlistUserPreferencesArgs',
    'WatchlistWatchlistUserPreferencesArgsDict',
]

MYPY = False

if not MYPY:
    class WatchlistEntityCountArgsDict(TypedDict):
        asset: NotRequired[pulumi.Input[int]]
        """
        (Output)
        Output only. Count of asset type entities in the watchlist.
        """
        user: NotRequired[pulumi.Input[int]]
        """
        (Output)
        Output only. Count of user type entities in the watchlist.
        """
elif False:
    WatchlistEntityCountArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WatchlistEntityCountArgs:
    def __init__(__self__, *,
                 asset: Optional[pulumi.Input[int]] = None,
                 user: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] asset: (Output)
               Output only. Count of asset type entities in the watchlist.
        :param pulumi.Input[int] user: (Output)
               Output only. Count of user type entities in the watchlist.
        """
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def asset(self) -> Optional[pulumi.Input[int]]:
        """
        (Output)
        Output only. Count of asset type entities in the watchlist.
        """
        return pulumi.get(self, "asset")

    @asset.setter
    def asset(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "asset", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[int]]:
        """
        (Output)
        Output only. Count of user type entities in the watchlist.
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "user", value)


if not MYPY:
    class WatchlistEntityPopulationMechanismArgsDict(TypedDict):
        manual: NotRequired[pulumi.Input['WatchlistEntityPopulationMechanismManualArgsDict']]
        """
        Entities are added manually.

        - - -
        """
elif False:
    WatchlistEntityPopulationMechanismArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WatchlistEntityPopulationMechanismArgs:
    def __init__(__self__, *,
                 manual: Optional[pulumi.Input['WatchlistEntityPopulationMechanismManualArgs']] = None):
        """
        :param pulumi.Input['WatchlistEntityPopulationMechanismManualArgs'] manual: Entities are added manually.
               
               - - -
        """
        if manual is not None:
            pulumi.set(__self__, "manual", manual)

    @property
    @pulumi.getter
    def manual(self) -> Optional[pulumi.Input['WatchlistEntityPopulationMechanismManualArgs']]:
        """
        Entities are added manually.

        - - -
        """
        return pulumi.get(self, "manual")

    @manual.setter
    def manual(self, value: Optional[pulumi.Input['WatchlistEntityPopulationMechanismManualArgs']]):
        pulumi.set(self, "manual", value)


if not MYPY:
    class WatchlistEntityPopulationMechanismManualArgsDict(TypedDict):
        pass
elif False:
    WatchlistEntityPopulationMechanismManualArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WatchlistEntityPopulationMechanismManualArgs:
    def __init__(__self__):
        pass


if not MYPY:
    class WatchlistWatchlistUserPreferencesArgsDict(TypedDict):
        pinned: NotRequired[pulumi.Input[bool]]
        """
        Optional. Whether the watchlist is pinned on the dashboard.
        """
elif False:
    WatchlistWatchlistUserPreferencesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WatchlistWatchlistUserPreferencesArgs:
    def __init__(__self__, *,
                 pinned: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] pinned: Optional. Whether the watchlist is pinned on the dashboard.
        """
        if pinned is not None:
            pulumi.set(__self__, "pinned", pinned)

    @property
    @pulumi.getter
    def pinned(self) -> Optional[pulumi.Input[bool]]:
        """
        Optional. Whether the watchlist is pinned on the dashboard.
        """
        return pulumi.get(self, "pinned")

    @pinned.setter
    def pinned(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "pinned", value)


