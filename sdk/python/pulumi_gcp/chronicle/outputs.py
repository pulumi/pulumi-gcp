# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'WatchlistEntityCount',
    'WatchlistEntityPopulationMechanism',
    'WatchlistEntityPopulationMechanismManual',
    'WatchlistWatchlistUserPreferences',
]

@pulumi.output_type
class WatchlistEntityCount(dict):
    def __init__(__self__, *,
                 asset: Optional[int] = None,
                 user: Optional[int] = None):
        """
        :param int asset: (Output)
               Output only. Count of asset type entities in the watchlist.
        :param int user: (Output)
               Output only. Count of user type entities in the watchlist.
        """
        if asset is not None:
            pulumi.set(__self__, "asset", asset)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def asset(self) -> Optional[int]:
        """
        (Output)
        Output only. Count of asset type entities in the watchlist.
        """
        return pulumi.get(self, "asset")

    @property
    @pulumi.getter
    def user(self) -> Optional[int]:
        """
        (Output)
        Output only. Count of user type entities in the watchlist.
        """
        return pulumi.get(self, "user")


@pulumi.output_type
class WatchlistEntityPopulationMechanism(dict):
    def __init__(__self__, *,
                 manual: Optional['outputs.WatchlistEntityPopulationMechanismManual'] = None):
        """
        :param 'WatchlistEntityPopulationMechanismManualArgs' manual: Entities are added manually.
               
               - - -
        """
        if manual is not None:
            pulumi.set(__self__, "manual", manual)

    @property
    @pulumi.getter
    def manual(self) -> Optional['outputs.WatchlistEntityPopulationMechanismManual']:
        """
        Entities are added manually.

        - - -
        """
        return pulumi.get(self, "manual")


@pulumi.output_type
class WatchlistEntityPopulationMechanismManual(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class WatchlistWatchlistUserPreferences(dict):
    def __init__(__self__, *,
                 pinned: Optional[bool] = None):
        """
        :param bool pinned: Optional. Whether the watchlist is pinned on the dashboard.
        """
        if pinned is not None:
            pulumi.set(__self__, "pinned", pinned)

    @property
    @pulumi.getter
    def pinned(self) -> Optional[bool]:
        """
        Optional. Whether the watchlist is pinned on the dashboard.
        """
        return pulumi.get(self, "pinned")


