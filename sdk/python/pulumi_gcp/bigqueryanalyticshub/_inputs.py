# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'DataExchangeIamBindingConditionArgs',
    'DataExchangeIamBindingConditionArgsDict',
    'DataExchangeIamMemberConditionArgs',
    'DataExchangeIamMemberConditionArgsDict',
    'DataExchangeSharingEnvironmentConfigArgs',
    'DataExchangeSharingEnvironmentConfigArgsDict',
    'DataExchangeSharingEnvironmentConfigDcrExchangeConfigArgs',
    'DataExchangeSharingEnvironmentConfigDcrExchangeConfigArgsDict',
    'DataExchangeSharingEnvironmentConfigDefaultExchangeConfigArgs',
    'DataExchangeSharingEnvironmentConfigDefaultExchangeConfigArgsDict',
    'ListingBigqueryDatasetArgs',
    'ListingBigqueryDatasetArgsDict',
    'ListingBigqueryDatasetSelectedResourceArgs',
    'ListingBigqueryDatasetSelectedResourceArgsDict',
    'ListingDataProviderArgs',
    'ListingDataProviderArgsDict',
    'ListingIamBindingConditionArgs',
    'ListingIamBindingConditionArgsDict',
    'ListingIamMemberConditionArgs',
    'ListingIamMemberConditionArgsDict',
    'ListingPublisherArgs',
    'ListingPublisherArgsDict',
    'ListingRestrictedExportConfigArgs',
    'ListingRestrictedExportConfigArgsDict',
    'ListingSubscriptionDestinationDatasetArgs',
    'ListingSubscriptionDestinationDatasetArgsDict',
    'ListingSubscriptionDestinationDatasetDatasetReferenceArgs',
    'ListingSubscriptionDestinationDatasetDatasetReferenceArgsDict',
    'ListingSubscriptionLinkedDatasetMapArgs',
    'ListingSubscriptionLinkedDatasetMapArgsDict',
    'ListingSubscriptionLinkedResourceArgs',
    'ListingSubscriptionLinkedResourceArgsDict',
]

MYPY = False

if not MYPY:
    class DataExchangeIamBindingConditionArgsDict(TypedDict):
        expression: pulumi.Input[str]
        title: pulumi.Input[str]
        description: NotRequired[pulumi.Input[str]]
elif False:
    DataExchangeIamBindingConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataExchangeIamBindingConditionArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 title: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "title", title)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)


if not MYPY:
    class DataExchangeIamMemberConditionArgsDict(TypedDict):
        expression: pulumi.Input[str]
        title: pulumi.Input[str]
        description: NotRequired[pulumi.Input[str]]
elif False:
    DataExchangeIamMemberConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataExchangeIamMemberConditionArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 title: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "title", title)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)


if not MYPY:
    class DataExchangeSharingEnvironmentConfigArgsDict(TypedDict):
        dcr_exchange_config: NotRequired[pulumi.Input['DataExchangeSharingEnvironmentConfigDcrExchangeConfigArgsDict']]
        """
        Data Clean Room (DCR), used for privacy-safe and secured data sharing.
        """
        default_exchange_config: NotRequired[pulumi.Input['DataExchangeSharingEnvironmentConfigDefaultExchangeConfigArgsDict']]
        """
        Default Analytics Hub data exchange, used for secured data sharing.
        """
elif False:
    DataExchangeSharingEnvironmentConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataExchangeSharingEnvironmentConfigArgs:
    def __init__(__self__, *,
                 dcr_exchange_config: Optional[pulumi.Input['DataExchangeSharingEnvironmentConfigDcrExchangeConfigArgs']] = None,
                 default_exchange_config: Optional[pulumi.Input['DataExchangeSharingEnvironmentConfigDefaultExchangeConfigArgs']] = None):
        """
        :param pulumi.Input['DataExchangeSharingEnvironmentConfigDcrExchangeConfigArgs'] dcr_exchange_config: Data Clean Room (DCR), used for privacy-safe and secured data sharing.
        :param pulumi.Input['DataExchangeSharingEnvironmentConfigDefaultExchangeConfigArgs'] default_exchange_config: Default Analytics Hub data exchange, used for secured data sharing.
        """
        if dcr_exchange_config is not None:
            pulumi.set(__self__, "dcr_exchange_config", dcr_exchange_config)
        if default_exchange_config is not None:
            pulumi.set(__self__, "default_exchange_config", default_exchange_config)

    @property
    @pulumi.getter(name="dcrExchangeConfig")
    def dcr_exchange_config(self) -> Optional[pulumi.Input['DataExchangeSharingEnvironmentConfigDcrExchangeConfigArgs']]:
        """
        Data Clean Room (DCR), used for privacy-safe and secured data sharing.
        """
        return pulumi.get(self, "dcr_exchange_config")

    @dcr_exchange_config.setter
    def dcr_exchange_config(self, value: Optional[pulumi.Input['DataExchangeSharingEnvironmentConfigDcrExchangeConfigArgs']]):
        pulumi.set(self, "dcr_exchange_config", value)

    @property
    @pulumi.getter(name="defaultExchangeConfig")
    def default_exchange_config(self) -> Optional[pulumi.Input['DataExchangeSharingEnvironmentConfigDefaultExchangeConfigArgs']]:
        """
        Default Analytics Hub data exchange, used for secured data sharing.
        """
        return pulumi.get(self, "default_exchange_config")

    @default_exchange_config.setter
    def default_exchange_config(self, value: Optional[pulumi.Input['DataExchangeSharingEnvironmentConfigDefaultExchangeConfigArgs']]):
        pulumi.set(self, "default_exchange_config", value)


if not MYPY:
    class DataExchangeSharingEnvironmentConfigDcrExchangeConfigArgsDict(TypedDict):
        pass
elif False:
    DataExchangeSharingEnvironmentConfigDcrExchangeConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataExchangeSharingEnvironmentConfigDcrExchangeConfigArgs:
    def __init__(__self__):
        pass


if not MYPY:
    class DataExchangeSharingEnvironmentConfigDefaultExchangeConfigArgsDict(TypedDict):
        pass
elif False:
    DataExchangeSharingEnvironmentConfigDefaultExchangeConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataExchangeSharingEnvironmentConfigDefaultExchangeConfigArgs:
    def __init__(__self__):
        pass


if not MYPY:
    class ListingBigqueryDatasetArgsDict(TypedDict):
        dataset: pulumi.Input[str]
        """
        Resource name of the dataset source for this listing. e.g. projects/myproject/datasets/123
        """
        selected_resources: NotRequired[pulumi.Input[Sequence[pulumi.Input['ListingBigqueryDatasetSelectedResourceArgsDict']]]]
        """
        Resource in this dataset that is selectively shared. This field is required for data clean room exchanges.
        Structure is documented below.
        """
elif False:
    ListingBigqueryDatasetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ListingBigqueryDatasetArgs:
    def __init__(__self__, *,
                 dataset: pulumi.Input[str],
                 selected_resources: Optional[pulumi.Input[Sequence[pulumi.Input['ListingBigqueryDatasetSelectedResourceArgs']]]] = None):
        """
        :param pulumi.Input[str] dataset: Resource name of the dataset source for this listing. e.g. projects/myproject/datasets/123
        :param pulumi.Input[Sequence[pulumi.Input['ListingBigqueryDatasetSelectedResourceArgs']]] selected_resources: Resource in this dataset that is selectively shared. This field is required for data clean room exchanges.
               Structure is documented below.
        """
        pulumi.set(__self__, "dataset", dataset)
        if selected_resources is not None:
            pulumi.set(__self__, "selected_resources", selected_resources)

    @property
    @pulumi.getter
    def dataset(self) -> pulumi.Input[str]:
        """
        Resource name of the dataset source for this listing. e.g. projects/myproject/datasets/123
        """
        return pulumi.get(self, "dataset")

    @dataset.setter
    def dataset(self, value: pulumi.Input[str]):
        pulumi.set(self, "dataset", value)

    @property
    @pulumi.getter(name="selectedResources")
    def selected_resources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ListingBigqueryDatasetSelectedResourceArgs']]]]:
        """
        Resource in this dataset that is selectively shared. This field is required for data clean room exchanges.
        Structure is documented below.
        """
        return pulumi.get(self, "selected_resources")

    @selected_resources.setter
    def selected_resources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ListingBigqueryDatasetSelectedResourceArgs']]]]):
        pulumi.set(self, "selected_resources", value)


if not MYPY:
    class ListingBigqueryDatasetSelectedResourceArgsDict(TypedDict):
        table: NotRequired[pulumi.Input[str]]
        """
        Format: For table: projects/{projectId}/datasets/{datasetId}/tables/{tableId} Example:"projects/test_project/datasets/test_dataset/tables/test_table"

        - - -
        """
elif False:
    ListingBigqueryDatasetSelectedResourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ListingBigqueryDatasetSelectedResourceArgs:
    def __init__(__self__, *,
                 table: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] table: Format: For table: projects/{projectId}/datasets/{datasetId}/tables/{tableId} Example:"projects/test_project/datasets/test_dataset/tables/test_table"
               
               - - -
        """
        if table is not None:
            pulumi.set(__self__, "table", table)

    @property
    @pulumi.getter
    def table(self) -> Optional[pulumi.Input[str]]:
        """
        Format: For table: projects/{projectId}/datasets/{datasetId}/tables/{tableId} Example:"projects/test_project/datasets/test_dataset/tables/test_table"

        - - -
        """
        return pulumi.get(self, "table")

    @table.setter
    def table(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "table", value)


if not MYPY:
    class ListingDataProviderArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        Name of the data provider.
        """
        primary_contact: NotRequired[pulumi.Input[str]]
        """
        Email or URL of the data provider.
        """
elif False:
    ListingDataProviderArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ListingDataProviderArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 primary_contact: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Name of the data provider.
        :param pulumi.Input[str] primary_contact: Email or URL of the data provider.
        """
        pulumi.set(__self__, "name", name)
        if primary_contact is not None:
            pulumi.set(__self__, "primary_contact", primary_contact)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the data provider.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="primaryContact")
    def primary_contact(self) -> Optional[pulumi.Input[str]]:
        """
        Email or URL of the data provider.
        """
        return pulumi.get(self, "primary_contact")

    @primary_contact.setter
    def primary_contact(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_contact", value)


if not MYPY:
    class ListingIamBindingConditionArgsDict(TypedDict):
        expression: pulumi.Input[str]
        title: pulumi.Input[str]
        description: NotRequired[pulumi.Input[str]]
elif False:
    ListingIamBindingConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ListingIamBindingConditionArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 title: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "title", title)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)


if not MYPY:
    class ListingIamMemberConditionArgsDict(TypedDict):
        expression: pulumi.Input[str]
        title: pulumi.Input[str]
        description: NotRequired[pulumi.Input[str]]
elif False:
    ListingIamMemberConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ListingIamMemberConditionArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 title: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "title", title)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)


if not MYPY:
    class ListingPublisherArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        Name of the listing publisher.
        """
        primary_contact: NotRequired[pulumi.Input[str]]
        """
        Email or URL of the listing publisher.
        """
elif False:
    ListingPublisherArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ListingPublisherArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 primary_contact: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Name of the listing publisher.
        :param pulumi.Input[str] primary_contact: Email or URL of the listing publisher.
        """
        pulumi.set(__self__, "name", name)
        if primary_contact is not None:
            pulumi.set(__self__, "primary_contact", primary_contact)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the listing publisher.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="primaryContact")
    def primary_contact(self) -> Optional[pulumi.Input[str]]:
        """
        Email or URL of the listing publisher.
        """
        return pulumi.get(self, "primary_contact")

    @primary_contact.setter
    def primary_contact(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_contact", value)


if not MYPY:
    class ListingRestrictedExportConfigArgsDict(TypedDict):
        enabled: NotRequired[pulumi.Input[bool]]
        """
        If true, enable restricted export.
        """
        restrict_direct_table_access: NotRequired[pulumi.Input[bool]]
        """
        (Output)
        If true, restrict direct table access(read api/tabledata.list) on linked table.
        """
        restrict_query_result: NotRequired[pulumi.Input[bool]]
        """
        If true, restrict export of query result derived from restricted linked dataset table.
        """
elif False:
    ListingRestrictedExportConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ListingRestrictedExportConfigArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 restrict_direct_table_access: Optional[pulumi.Input[bool]] = None,
                 restrict_query_result: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: If true, enable restricted export.
        :param pulumi.Input[bool] restrict_direct_table_access: (Output)
               If true, restrict direct table access(read api/tabledata.list) on linked table.
        :param pulumi.Input[bool] restrict_query_result: If true, restrict export of query result derived from restricted linked dataset table.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if restrict_direct_table_access is not None:
            pulumi.set(__self__, "restrict_direct_table_access", restrict_direct_table_access)
        if restrict_query_result is not None:
            pulumi.set(__self__, "restrict_query_result", restrict_query_result)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, enable restricted export.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="restrictDirectTableAccess")
    def restrict_direct_table_access(self) -> Optional[pulumi.Input[bool]]:
        """
        (Output)
        If true, restrict direct table access(read api/tabledata.list) on linked table.
        """
        return pulumi.get(self, "restrict_direct_table_access")

    @restrict_direct_table_access.setter
    def restrict_direct_table_access(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "restrict_direct_table_access", value)

    @property
    @pulumi.getter(name="restrictQueryResult")
    def restrict_query_result(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, restrict export of query result derived from restricted linked dataset table.
        """
        return pulumi.get(self, "restrict_query_result")

    @restrict_query_result.setter
    def restrict_query_result(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "restrict_query_result", value)


if not MYPY:
    class ListingSubscriptionDestinationDatasetArgsDict(TypedDict):
        dataset_reference: pulumi.Input['ListingSubscriptionDestinationDatasetDatasetReferenceArgsDict']
        """
        A reference that identifies the destination dataset.
        Structure is documented below.
        """
        location: pulumi.Input[str]
        """
        The geographic location where the dataset should reside.
        See https://cloud.google.com/bigquery/docs/locations for supported locations.
        """
        description: NotRequired[pulumi.Input[str]]
        """
        A user-friendly description of the dataset.
        """
        friendly_name: NotRequired[pulumi.Input[str]]
        """
        A descriptive name for the dataset.
        """
        labels: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        The labels associated with this dataset. You can use these to
        organize and group your datasets.
        """
elif False:
    ListingSubscriptionDestinationDatasetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ListingSubscriptionDestinationDatasetArgs:
    def __init__(__self__, *,
                 dataset_reference: pulumi.Input['ListingSubscriptionDestinationDatasetDatasetReferenceArgs'],
                 location: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 friendly_name: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input['ListingSubscriptionDestinationDatasetDatasetReferenceArgs'] dataset_reference: A reference that identifies the destination dataset.
               Structure is documented below.
        :param pulumi.Input[str] location: The geographic location where the dataset should reside.
               See https://cloud.google.com/bigquery/docs/locations for supported locations.
        :param pulumi.Input[str] description: A user-friendly description of the dataset.
        :param pulumi.Input[str] friendly_name: A descriptive name for the dataset.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: The labels associated with this dataset. You can use these to
               organize and group your datasets.
        """
        pulumi.set(__self__, "dataset_reference", dataset_reference)
        pulumi.set(__self__, "location", location)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if friendly_name is not None:
            pulumi.set(__self__, "friendly_name", friendly_name)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter(name="datasetReference")
    def dataset_reference(self) -> pulumi.Input['ListingSubscriptionDestinationDatasetDatasetReferenceArgs']:
        """
        A reference that identifies the destination dataset.
        Structure is documented below.
        """
        return pulumi.get(self, "dataset_reference")

    @dataset_reference.setter
    def dataset_reference(self, value: pulumi.Input['ListingSubscriptionDestinationDatasetDatasetReferenceArgs']):
        pulumi.set(self, "dataset_reference", value)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input[str]:
        """
        The geographic location where the dataset should reside.
        See https://cloud.google.com/bigquery/docs/locations for supported locations.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[str]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A user-friendly description of the dataset.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="friendlyName")
    def friendly_name(self) -> Optional[pulumi.Input[str]]:
        """
        A descriptive name for the dataset.
        """
        return pulumi.get(self, "friendly_name")

    @friendly_name.setter
    def friendly_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "friendly_name", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The labels associated with this dataset. You can use these to
        organize and group your datasets.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)


if not MYPY:
    class ListingSubscriptionDestinationDatasetDatasetReferenceArgsDict(TypedDict):
        dataset_id: pulumi.Input[str]
        """
        A unique ID for this dataset, without the project name. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 1,024 characters.
        """
        project_id: pulumi.Input[str]
        """
        The ID of the project containing this dataset.

        - - -
        """
elif False:
    ListingSubscriptionDestinationDatasetDatasetReferenceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ListingSubscriptionDestinationDatasetDatasetReferenceArgs:
    def __init__(__self__, *,
                 dataset_id: pulumi.Input[str],
                 project_id: pulumi.Input[str]):
        """
        :param pulumi.Input[str] dataset_id: A unique ID for this dataset, without the project name. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 1,024 characters.
        :param pulumi.Input[str] project_id: The ID of the project containing this dataset.
               
               - - -
        """
        pulumi.set(__self__, "dataset_id", dataset_id)
        pulumi.set(__self__, "project_id", project_id)

    @property
    @pulumi.getter(name="datasetId")
    def dataset_id(self) -> pulumi.Input[str]:
        """
        A unique ID for this dataset, without the project name. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 1,024 characters.
        """
        return pulumi.get(self, "dataset_id")

    @dataset_id.setter
    def dataset_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "dataset_id", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[str]:
        """
        The ID of the project containing this dataset.

        - - -
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "project_id", value)


if not MYPY:
    class ListingSubscriptionLinkedDatasetMapArgsDict(TypedDict):
        resource_name: pulumi.Input[str]
        """
        (Required) The identifier for this object. Format specified above.
        """
        linked_dataset: NotRequired[pulumi.Input[str]]
        """
        (Output)
        Output only. Name of the linked dataset, e.g. projects/subscriberproject/datasets/linkedDataset
        """
        listing: NotRequired[pulumi.Input[str]]
        """
        (Output)
        Output only. Listing for which linked resource is created.
        """
elif False:
    ListingSubscriptionLinkedDatasetMapArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ListingSubscriptionLinkedDatasetMapArgs:
    def __init__(__self__, *,
                 resource_name: pulumi.Input[str],
                 linked_dataset: Optional[pulumi.Input[str]] = None,
                 listing: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] resource_name: (Required) The identifier for this object. Format specified above.
        :param pulumi.Input[str] linked_dataset: (Output)
               Output only. Name of the linked dataset, e.g. projects/subscriberproject/datasets/linkedDataset
        :param pulumi.Input[str] listing: (Output)
               Output only. Listing for which linked resource is created.
        """
        pulumi.set(__self__, "resource_name", resource_name)
        if linked_dataset is not None:
            pulumi.set(__self__, "linked_dataset", linked_dataset)
        if listing is not None:
            pulumi.set(__self__, "listing", listing)

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> pulumi.Input[str]:
        """
        (Required) The identifier for this object. Format specified above.
        """
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_name", value)

    @property
    @pulumi.getter(name="linkedDataset")
    def linked_dataset(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        Output only. Name of the linked dataset, e.g. projects/subscriberproject/datasets/linkedDataset
        """
        return pulumi.get(self, "linked_dataset")

    @linked_dataset.setter
    def linked_dataset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "linked_dataset", value)

    @property
    @pulumi.getter
    def listing(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        Output only. Listing for which linked resource is created.
        """
        return pulumi.get(self, "listing")

    @listing.setter
    def listing(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "listing", value)


if not MYPY:
    class ListingSubscriptionLinkedResourceArgsDict(TypedDict):
        linked_dataset: NotRequired[pulumi.Input[str]]
        """
        (Output)
        Output only. Name of the linked dataset, e.g. projects/subscriberproject/datasets/linkedDataset
        """
        listing: NotRequired[pulumi.Input[str]]
        """
        (Output)
        Output only. Listing for which linked resource is created.
        """
elif False:
    ListingSubscriptionLinkedResourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ListingSubscriptionLinkedResourceArgs:
    def __init__(__self__, *,
                 linked_dataset: Optional[pulumi.Input[str]] = None,
                 listing: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] linked_dataset: (Output)
               Output only. Name of the linked dataset, e.g. projects/subscriberproject/datasets/linkedDataset
        :param pulumi.Input[str] listing: (Output)
               Output only. Listing for which linked resource is created.
        """
        if linked_dataset is not None:
            pulumi.set(__self__, "linked_dataset", linked_dataset)
        if listing is not None:
            pulumi.set(__self__, "listing", listing)

    @property
    @pulumi.getter(name="linkedDataset")
    def linked_dataset(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        Output only. Name of the linked dataset, e.g. projects/subscriberproject/datasets/linkedDataset
        """
        return pulumi.get(self, "linked_dataset")

    @linked_dataset.setter
    def linked_dataset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "linked_dataset", value)

    @property
    @pulumi.getter
    def listing(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        Output only. Listing for which linked resource is created.
        """
        return pulumi.get(self, "listing")

    @listing.setter
    def listing(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "listing", value)


