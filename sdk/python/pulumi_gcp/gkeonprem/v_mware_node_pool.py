# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['VMwareNodePoolArgs', 'VMwareNodePool']

@pulumi.input_type
class VMwareNodePoolArgs:
    def __init__(__self__, *,
                 config: pulumi.Input['VMwareNodePoolConfigArgs'],
                 location: pulumi.Input[str],
                 vmware_cluster: pulumi.Input[str],
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_pool_autoscaling: Optional[pulumi.Input['VMwareNodePoolNodePoolAutoscalingArgs']] = None,
                 project: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a VMwareNodePool resource.
        :param pulumi.Input['VMwareNodePoolConfigArgs'] config: The node configuration of the node pool.
               Structure is documented below.
        :param pulumi.Input[str] location: The location of the resource.
        :param pulumi.Input[str] vmware_cluster: The cluster this node pool belongs to.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] annotations: Annotations on the node Pool.
               This field has the same restrictions as Kubernetes annotations.
               The total size of all keys and values combined is limited to 256k.
               Key can have 2 segments: prefix (optional) and name (required),
               separated by a slash (/).
               Prefix must be a DNS subdomain.
               Name must be 63 characters or less, begin and end with alphanumerics,
               with dashes (-), underscores (_), dots (.), and alphanumerics between.
        :param pulumi.Input[str] display_name: The display name for the node pool.
        :param pulumi.Input[str] name: The vmware node pool name.
        :param pulumi.Input['VMwareNodePoolNodePoolAutoscalingArgs'] node_pool_autoscaling: Node Pool autoscaling config for the node pool.
               Structure is documented below.
        :param pulumi.Input[str] project: The ID of the project in which the resource belongs.
               If it is not provided, the provider project is used.
        """
        VMwareNodePoolArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            config=config,
            location=location,
            vmware_cluster=vmware_cluster,
            annotations=annotations,
            display_name=display_name,
            name=name,
            node_pool_autoscaling=node_pool_autoscaling,
            project=project,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             config: pulumi.Input['VMwareNodePoolConfigArgs'],
             location: pulumi.Input[str],
             vmware_cluster: pulumi.Input[str],
             annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             display_name: Optional[pulumi.Input[str]] = None,
             name: Optional[pulumi.Input[str]] = None,
             node_pool_autoscaling: Optional[pulumi.Input['VMwareNodePoolNodePoolAutoscalingArgs']] = None,
             project: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("config", config)
        _setter("location", location)
        _setter("vmware_cluster", vmware_cluster)
        if annotations is not None:
            _setter("annotations", annotations)
        if display_name is not None:
            _setter("display_name", display_name)
        if name is not None:
            _setter("name", name)
        if node_pool_autoscaling is not None:
            _setter("node_pool_autoscaling", node_pool_autoscaling)
        if project is not None:
            _setter("project", project)

    @property
    @pulumi.getter
    def config(self) -> pulumi.Input['VMwareNodePoolConfigArgs']:
        """
        The node configuration of the node pool.
        Structure is documented below.
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: pulumi.Input['VMwareNodePoolConfigArgs']):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input[str]:
        """
        The location of the resource.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[str]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="vmwareCluster")
    def vmware_cluster(self) -> pulumi.Input[str]:
        """
        The cluster this node pool belongs to.
        """
        return pulumi.get(self, "vmware_cluster")

    @vmware_cluster.setter
    def vmware_cluster(self, value: pulumi.Input[str]):
        pulumi.set(self, "vmware_cluster", value)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Annotations on the node Pool.
        This field has the same restrictions as Kubernetes annotations.
        The total size of all keys and values combined is limited to 256k.
        Key can have 2 segments: prefix (optional) and name (required),
        separated by a slash (/).
        Prefix must be a DNS subdomain.
        Name must be 63 characters or less, begin and end with alphanumerics,
        with dashes (-), underscores (_), dots (.), and alphanumerics between.
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        The display name for the node pool.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The vmware node pool name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nodePoolAutoscaling")
    def node_pool_autoscaling(self) -> Optional[pulumi.Input['VMwareNodePoolNodePoolAutoscalingArgs']]:
        """
        Node Pool autoscaling config for the node pool.
        Structure is documented below.
        """
        return pulumi.get(self, "node_pool_autoscaling")

    @node_pool_autoscaling.setter
    def node_pool_autoscaling(self, value: Optional[pulumi.Input['VMwareNodePoolNodePoolAutoscalingArgs']]):
        pulumi.set(self, "node_pool_autoscaling", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the project in which the resource belongs.
        If it is not provided, the provider project is used.
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)


@pulumi.input_type
class _VMwareNodePoolState:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 config: Optional[pulumi.Input['VMwareNodePoolConfigArgs']] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 delete_time: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 etag: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_pool_autoscaling: Optional[pulumi.Input['VMwareNodePoolNodePoolAutoscalingArgs']] = None,
                 on_prem_version: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 reconciling: Optional[pulumi.Input[bool]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 statuses: Optional[pulumi.Input[Sequence[pulumi.Input['VMwareNodePoolStatusArgs']]]] = None,
                 uid: Optional[pulumi.Input[str]] = None,
                 update_time: Optional[pulumi.Input[str]] = None,
                 vmware_cluster: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering VMwareNodePool resources.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] annotations: Annotations on the node Pool.
               This field has the same restrictions as Kubernetes annotations.
               The total size of all keys and values combined is limited to 256k.
               Key can have 2 segments: prefix (optional) and name (required),
               separated by a slash (/).
               Prefix must be a DNS subdomain.
               Name must be 63 characters or less, begin and end with alphanumerics,
               with dashes (-), underscores (_), dots (.), and alphanumerics between.
        :param pulumi.Input['VMwareNodePoolConfigArgs'] config: The node configuration of the node pool.
               Structure is documented below.
        :param pulumi.Input[str] create_time: The time the cluster was created, in RFC3339 text format.
        :param pulumi.Input[str] delete_time: The time the cluster was deleted, in RFC3339 text format.
        :param pulumi.Input[str] display_name: The display name for the node pool.
        :param pulumi.Input[str] etag: This checksum is computed by the server based on the value of other
               fields, and may be sent on update and delete requests to ensure the
               client has an up-to-date value before proceeding.
               Allows clients to perform consistent read-modify-writes
               through optimistic concurrency control.
        :param pulumi.Input[str] location: The location of the resource.
        :param pulumi.Input[str] name: The vmware node pool name.
        :param pulumi.Input['VMwareNodePoolNodePoolAutoscalingArgs'] node_pool_autoscaling: Node Pool autoscaling config for the node pool.
               Structure is documented below.
        :param pulumi.Input[str] on_prem_version: Anthos version for the node pool. Defaults to the user cluster version.
        :param pulumi.Input[str] project: The ID of the project in which the resource belongs.
               If it is not provided, the provider project is used.
        :param pulumi.Input[bool] reconciling: If set, there are currently changes in flight to the node pool.
        :param pulumi.Input[str] state: (Output)
               The lifecycle state of the condition.
        :param pulumi.Input[Sequence[pulumi.Input['VMwareNodePoolStatusArgs']]] statuses: ResourceStatus representing detailed cluster state.
               Structure is documented below.
        :param pulumi.Input[str] uid: The unique identifier of the node pool.
        :param pulumi.Input[str] update_time: The time the cluster was last updated, in RFC3339 text format.
        :param pulumi.Input[str] vmware_cluster: The cluster this node pool belongs to.
        """
        _VMwareNodePoolState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            annotations=annotations,
            config=config,
            create_time=create_time,
            delete_time=delete_time,
            display_name=display_name,
            etag=etag,
            location=location,
            name=name,
            node_pool_autoscaling=node_pool_autoscaling,
            on_prem_version=on_prem_version,
            project=project,
            reconciling=reconciling,
            state=state,
            statuses=statuses,
            uid=uid,
            update_time=update_time,
            vmware_cluster=vmware_cluster,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             config: Optional[pulumi.Input['VMwareNodePoolConfigArgs']] = None,
             create_time: Optional[pulumi.Input[str]] = None,
             delete_time: Optional[pulumi.Input[str]] = None,
             display_name: Optional[pulumi.Input[str]] = None,
             etag: Optional[pulumi.Input[str]] = None,
             location: Optional[pulumi.Input[str]] = None,
             name: Optional[pulumi.Input[str]] = None,
             node_pool_autoscaling: Optional[pulumi.Input['VMwareNodePoolNodePoolAutoscalingArgs']] = None,
             on_prem_version: Optional[pulumi.Input[str]] = None,
             project: Optional[pulumi.Input[str]] = None,
             reconciling: Optional[pulumi.Input[bool]] = None,
             state: Optional[pulumi.Input[str]] = None,
             statuses: Optional[pulumi.Input[Sequence[pulumi.Input['VMwareNodePoolStatusArgs']]]] = None,
             uid: Optional[pulumi.Input[str]] = None,
             update_time: Optional[pulumi.Input[str]] = None,
             vmware_cluster: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if annotations is not None:
            _setter("annotations", annotations)
        if config is not None:
            _setter("config", config)
        if create_time is not None:
            _setter("create_time", create_time)
        if delete_time is not None:
            _setter("delete_time", delete_time)
        if display_name is not None:
            _setter("display_name", display_name)
        if etag is not None:
            _setter("etag", etag)
        if location is not None:
            _setter("location", location)
        if name is not None:
            _setter("name", name)
        if node_pool_autoscaling is not None:
            _setter("node_pool_autoscaling", node_pool_autoscaling)
        if on_prem_version is not None:
            _setter("on_prem_version", on_prem_version)
        if project is not None:
            _setter("project", project)
        if reconciling is not None:
            _setter("reconciling", reconciling)
        if state is not None:
            _setter("state", state)
        if statuses is not None:
            _setter("statuses", statuses)
        if uid is not None:
            _setter("uid", uid)
        if update_time is not None:
            _setter("update_time", update_time)
        if vmware_cluster is not None:
            _setter("vmware_cluster", vmware_cluster)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Annotations on the node Pool.
        This field has the same restrictions as Kubernetes annotations.
        The total size of all keys and values combined is limited to 256k.
        Key can have 2 segments: prefix (optional) and name (required),
        separated by a slash (/).
        Prefix must be a DNS subdomain.
        Name must be 63 characters or less, begin and end with alphanumerics,
        with dashes (-), underscores (_), dots (.), and alphanumerics between.
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input['VMwareNodePoolConfigArgs']]:
        """
        The node configuration of the node pool.
        Structure is documented below.
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input['VMwareNodePoolConfigArgs']]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        The time the cluster was created, in RFC3339 text format.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="deleteTime")
    def delete_time(self) -> Optional[pulumi.Input[str]]:
        """
        The time the cluster was deleted, in RFC3339 text format.
        """
        return pulumi.get(self, "delete_time")

    @delete_time.setter
    def delete_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delete_time", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        The display name for the node pool.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def etag(self) -> Optional[pulumi.Input[str]]:
        """
        This checksum is computed by the server based on the value of other
        fields, and may be sent on update and delete requests to ensure the
        client has an up-to-date value before proceeding.
        Allows clients to perform consistent read-modify-writes
        through optimistic concurrency control.
        """
        return pulumi.get(self, "etag")

    @etag.setter
    def etag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "etag", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        The location of the resource.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The vmware node pool name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nodePoolAutoscaling")
    def node_pool_autoscaling(self) -> Optional[pulumi.Input['VMwareNodePoolNodePoolAutoscalingArgs']]:
        """
        Node Pool autoscaling config for the node pool.
        Structure is documented below.
        """
        return pulumi.get(self, "node_pool_autoscaling")

    @node_pool_autoscaling.setter
    def node_pool_autoscaling(self, value: Optional[pulumi.Input['VMwareNodePoolNodePoolAutoscalingArgs']]):
        pulumi.set(self, "node_pool_autoscaling", value)

    @property
    @pulumi.getter(name="onPremVersion")
    def on_prem_version(self) -> Optional[pulumi.Input[str]]:
        """
        Anthos version for the node pool. Defaults to the user cluster version.
        """
        return pulumi.get(self, "on_prem_version")

    @on_prem_version.setter
    def on_prem_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "on_prem_version", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the project in which the resource belongs.
        If it is not provided, the provider project is used.
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def reconciling(self) -> Optional[pulumi.Input[bool]]:
        """
        If set, there are currently changes in flight to the node pool.
        """
        return pulumi.get(self, "reconciling")

    @reconciling.setter
    def reconciling(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "reconciling", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        The lifecycle state of the condition.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter
    def statuses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VMwareNodePoolStatusArgs']]]]:
        """
        ResourceStatus representing detailed cluster state.
        Structure is documented below.
        """
        return pulumi.get(self, "statuses")

    @statuses.setter
    def statuses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VMwareNodePoolStatusArgs']]]]):
        pulumi.set(self, "statuses", value)

    @property
    @pulumi.getter
    def uid(self) -> Optional[pulumi.Input[str]]:
        """
        The unique identifier of the node pool.
        """
        return pulumi.get(self, "uid")

    @uid.setter
    def uid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uid", value)

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[str]]:
        """
        The time the cluster was last updated, in RFC3339 text format.
        """
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_time", value)

    @property
    @pulumi.getter(name="vmwareCluster")
    def vmware_cluster(self) -> Optional[pulumi.Input[str]]:
        """
        The cluster this node pool belongs to.
        """
        return pulumi.get(self, "vmware_cluster")

    @vmware_cluster.setter
    def vmware_cluster(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vmware_cluster", value)


class VMwareNodePool(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 config: Optional[pulumi.Input[pulumi.InputType['VMwareNodePoolConfigArgs']]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_pool_autoscaling: Optional[pulumi.Input[pulumi.InputType['VMwareNodePoolNodePoolAutoscalingArgs']]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 vmware_cluster: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## Example Usage
        ### Gkeonprem Vmware Node Pool Basic

        ```python
        import pulumi
        import pulumi_gcp as gcp

        default_basic = gcp.gkeonprem.VMwareCluster("default-basic",
            location="us-west1",
            admin_cluster_membership="projects/870316890899/locations/global/memberships/gkeonprem-terraform-test",
            description="test cluster",
            on_prem_version="1.13.1-gke.35",
            network_config=gcp.gkeonprem.VMwareClusterNetworkConfigArgs(
                service_address_cidr_blocks=["10.96.0.0/12"],
                pod_address_cidr_blocks=["192.168.0.0/16"],
                dhcp_ip_config=gcp.gkeonprem.VMwareClusterNetworkConfigDhcpIpConfigArgs(
                    enabled=True,
                ),
            ),
            control_plane_node=gcp.gkeonprem.VMwareClusterControlPlaneNodeArgs(
                cpus=4,
                memory=8192,
                replicas=1,
            ),
            load_balancer=gcp.gkeonprem.VMwareClusterLoadBalancerArgs(
                vip_config=gcp.gkeonprem.VMwareClusterLoadBalancerVipConfigArgs(
                    control_plane_vip="10.251.133.5",
                    ingress_vip="10.251.135.19",
                ),
                metal_lb_config=gcp.gkeonprem.VMwareClusterLoadBalancerMetalLbConfigArgs(
                    address_pools=[
                        gcp.gkeonprem.VMwareClusterLoadBalancerMetalLbConfigAddressPoolArgs(
                            pool="ingress-ip",
                            manual_assign=True,
                            addresses=["10.251.135.19"],
                        ),
                        gcp.gkeonprem.VMwareClusterLoadBalancerMetalLbConfigAddressPoolArgs(
                            pool="lb-test-ip",
                            manual_assign=True,
                            addresses=["10.251.135.19"],
                        ),
                    ],
                ),
            ),
            opts=pulumi.ResourceOptions(provider=google_beta))
        nodepool_basic = gcp.gkeonprem.VMwareNodePool("nodepool-basic",
            location="us-west1",
            vmware_cluster=default_basic.name,
            config=gcp.gkeonprem.VMwareNodePoolConfigArgs(
                replicas=3,
                image_type="ubuntu_containerd",
                enable_load_balancer=True,
            ),
            opts=pulumi.ResourceOptions(provider=google_beta))
        ```
        ### Gkeonprem Vmware Node Pool Full

        ```python
        import pulumi
        import pulumi_gcp as gcp

        default_full = gcp.gkeonprem.VMwareCluster("default-full",
            location="us-west1",
            admin_cluster_membership="projects/870316890899/locations/global/memberships/gkeonprem-terraform-test",
            description="test cluster",
            on_prem_version="1.13.1-gke.35",
            network_config=gcp.gkeonprem.VMwareClusterNetworkConfigArgs(
                service_address_cidr_blocks=["10.96.0.0/12"],
                pod_address_cidr_blocks=["192.168.0.0/16"],
                dhcp_ip_config=gcp.gkeonprem.VMwareClusterNetworkConfigDhcpIpConfigArgs(
                    enabled=True,
                ),
            ),
            control_plane_node=gcp.gkeonprem.VMwareClusterControlPlaneNodeArgs(
                cpus=4,
                memory=8192,
                replicas=1,
            ),
            load_balancer=gcp.gkeonprem.VMwareClusterLoadBalancerArgs(
                vip_config=gcp.gkeonprem.VMwareClusterLoadBalancerVipConfigArgs(
                    control_plane_vip="10.251.133.5",
                    ingress_vip="10.251.135.19",
                ),
                metal_lb_config=gcp.gkeonprem.VMwareClusterLoadBalancerMetalLbConfigArgs(
                    address_pools=[
                        gcp.gkeonprem.VMwareClusterLoadBalancerMetalLbConfigAddressPoolArgs(
                            pool="ingress-ip",
                            manual_assign=True,
                            addresses=["10.251.135.19"],
                        ),
                        gcp.gkeonprem.VMwareClusterLoadBalancerMetalLbConfigAddressPoolArgs(
                            pool="lb-test-ip",
                            manual_assign=True,
                            addresses=["10.251.135.19"],
                        ),
                    ],
                ),
            ),
            opts=pulumi.ResourceOptions(provider=google_beta))
        nodepool_full = gcp.gkeonprem.VMwareNodePool("nodepool-full",
            location="us-west1",
            vmware_cluster=default_full.name,
            annotations={},
            config=gcp.gkeonprem.VMwareNodePoolConfigArgs(
                cpus=4,
                memory_mb=8196,
                replicas=3,
                image_type="ubuntu_containerd",
                image="image",
                boot_disk_size_gb=10,
                taints=[
                    gcp.gkeonprem.VMwareNodePoolConfigTaintArgs(
                        key="key",
                        value="value",
                    ),
                    gcp.gkeonprem.VMwareNodePoolConfigTaintArgs(
                        key="key",
                        value="value",
                        effect="NO_SCHEDULE",
                    ),
                ],
                labels={},
                enable_load_balancer=True,
            ),
            node_pool_autoscaling=gcp.gkeonprem.VMwareNodePoolNodePoolAutoscalingArgs(
                min_replicas=1,
                max_replicas=5,
            ),
            opts=pulumi.ResourceOptions(provider=google_beta))
        ```

        ## Import

        VmwareNodePool can be imported using any of these accepted formats

        ```sh
         $ pulumi import gcp:gkeonprem/vMwareNodePool:VMwareNodePool default projects/{{project}}/locations/{{location}}/vmwareClusters/{{vmware_cluster}}/vmwareNodePools/{{name}}
        ```

        ```sh
         $ pulumi import gcp:gkeonprem/vMwareNodePool:VMwareNodePool default {{project}}/{{location}}/{{vmware_cluster}}/{{name}}
        ```

        ```sh
         $ pulumi import gcp:gkeonprem/vMwareNodePool:VMwareNodePool default {{location}}/{{vmware_cluster}}/{{name}}
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] annotations: Annotations on the node Pool.
               This field has the same restrictions as Kubernetes annotations.
               The total size of all keys and values combined is limited to 256k.
               Key can have 2 segments: prefix (optional) and name (required),
               separated by a slash (/).
               Prefix must be a DNS subdomain.
               Name must be 63 characters or less, begin and end with alphanumerics,
               with dashes (-), underscores (_), dots (.), and alphanumerics between.
        :param pulumi.Input[pulumi.InputType['VMwareNodePoolConfigArgs']] config: The node configuration of the node pool.
               Structure is documented below.
        :param pulumi.Input[str] display_name: The display name for the node pool.
        :param pulumi.Input[str] location: The location of the resource.
        :param pulumi.Input[str] name: The vmware node pool name.
        :param pulumi.Input[pulumi.InputType['VMwareNodePoolNodePoolAutoscalingArgs']] node_pool_autoscaling: Node Pool autoscaling config for the node pool.
               Structure is documented below.
        :param pulumi.Input[str] project: The ID of the project in which the resource belongs.
               If it is not provided, the provider project is used.
        :param pulumi.Input[str] vmware_cluster: The cluster this node pool belongs to.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VMwareNodePoolArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage
        ### Gkeonprem Vmware Node Pool Basic

        ```python
        import pulumi
        import pulumi_gcp as gcp

        default_basic = gcp.gkeonprem.VMwareCluster("default-basic",
            location="us-west1",
            admin_cluster_membership="projects/870316890899/locations/global/memberships/gkeonprem-terraform-test",
            description="test cluster",
            on_prem_version="1.13.1-gke.35",
            network_config=gcp.gkeonprem.VMwareClusterNetworkConfigArgs(
                service_address_cidr_blocks=["10.96.0.0/12"],
                pod_address_cidr_blocks=["192.168.0.0/16"],
                dhcp_ip_config=gcp.gkeonprem.VMwareClusterNetworkConfigDhcpIpConfigArgs(
                    enabled=True,
                ),
            ),
            control_plane_node=gcp.gkeonprem.VMwareClusterControlPlaneNodeArgs(
                cpus=4,
                memory=8192,
                replicas=1,
            ),
            load_balancer=gcp.gkeonprem.VMwareClusterLoadBalancerArgs(
                vip_config=gcp.gkeonprem.VMwareClusterLoadBalancerVipConfigArgs(
                    control_plane_vip="10.251.133.5",
                    ingress_vip="10.251.135.19",
                ),
                metal_lb_config=gcp.gkeonprem.VMwareClusterLoadBalancerMetalLbConfigArgs(
                    address_pools=[
                        gcp.gkeonprem.VMwareClusterLoadBalancerMetalLbConfigAddressPoolArgs(
                            pool="ingress-ip",
                            manual_assign=True,
                            addresses=["10.251.135.19"],
                        ),
                        gcp.gkeonprem.VMwareClusterLoadBalancerMetalLbConfigAddressPoolArgs(
                            pool="lb-test-ip",
                            manual_assign=True,
                            addresses=["10.251.135.19"],
                        ),
                    ],
                ),
            ),
            opts=pulumi.ResourceOptions(provider=google_beta))
        nodepool_basic = gcp.gkeonprem.VMwareNodePool("nodepool-basic",
            location="us-west1",
            vmware_cluster=default_basic.name,
            config=gcp.gkeonprem.VMwareNodePoolConfigArgs(
                replicas=3,
                image_type="ubuntu_containerd",
                enable_load_balancer=True,
            ),
            opts=pulumi.ResourceOptions(provider=google_beta))
        ```
        ### Gkeonprem Vmware Node Pool Full

        ```python
        import pulumi
        import pulumi_gcp as gcp

        default_full = gcp.gkeonprem.VMwareCluster("default-full",
            location="us-west1",
            admin_cluster_membership="projects/870316890899/locations/global/memberships/gkeonprem-terraform-test",
            description="test cluster",
            on_prem_version="1.13.1-gke.35",
            network_config=gcp.gkeonprem.VMwareClusterNetworkConfigArgs(
                service_address_cidr_blocks=["10.96.0.0/12"],
                pod_address_cidr_blocks=["192.168.0.0/16"],
                dhcp_ip_config=gcp.gkeonprem.VMwareClusterNetworkConfigDhcpIpConfigArgs(
                    enabled=True,
                ),
            ),
            control_plane_node=gcp.gkeonprem.VMwareClusterControlPlaneNodeArgs(
                cpus=4,
                memory=8192,
                replicas=1,
            ),
            load_balancer=gcp.gkeonprem.VMwareClusterLoadBalancerArgs(
                vip_config=gcp.gkeonprem.VMwareClusterLoadBalancerVipConfigArgs(
                    control_plane_vip="10.251.133.5",
                    ingress_vip="10.251.135.19",
                ),
                metal_lb_config=gcp.gkeonprem.VMwareClusterLoadBalancerMetalLbConfigArgs(
                    address_pools=[
                        gcp.gkeonprem.VMwareClusterLoadBalancerMetalLbConfigAddressPoolArgs(
                            pool="ingress-ip",
                            manual_assign=True,
                            addresses=["10.251.135.19"],
                        ),
                        gcp.gkeonprem.VMwareClusterLoadBalancerMetalLbConfigAddressPoolArgs(
                            pool="lb-test-ip",
                            manual_assign=True,
                            addresses=["10.251.135.19"],
                        ),
                    ],
                ),
            ),
            opts=pulumi.ResourceOptions(provider=google_beta))
        nodepool_full = gcp.gkeonprem.VMwareNodePool("nodepool-full",
            location="us-west1",
            vmware_cluster=default_full.name,
            annotations={},
            config=gcp.gkeonprem.VMwareNodePoolConfigArgs(
                cpus=4,
                memory_mb=8196,
                replicas=3,
                image_type="ubuntu_containerd",
                image="image",
                boot_disk_size_gb=10,
                taints=[
                    gcp.gkeonprem.VMwareNodePoolConfigTaintArgs(
                        key="key",
                        value="value",
                    ),
                    gcp.gkeonprem.VMwareNodePoolConfigTaintArgs(
                        key="key",
                        value="value",
                        effect="NO_SCHEDULE",
                    ),
                ],
                labels={},
                enable_load_balancer=True,
            ),
            node_pool_autoscaling=gcp.gkeonprem.VMwareNodePoolNodePoolAutoscalingArgs(
                min_replicas=1,
                max_replicas=5,
            ),
            opts=pulumi.ResourceOptions(provider=google_beta))
        ```

        ## Import

        VmwareNodePool can be imported using any of these accepted formats

        ```sh
         $ pulumi import gcp:gkeonprem/vMwareNodePool:VMwareNodePool default projects/{{project}}/locations/{{location}}/vmwareClusters/{{vmware_cluster}}/vmwareNodePools/{{name}}
        ```

        ```sh
         $ pulumi import gcp:gkeonprem/vMwareNodePool:VMwareNodePool default {{project}}/{{location}}/{{vmware_cluster}}/{{name}}
        ```

        ```sh
         $ pulumi import gcp:gkeonprem/vMwareNodePool:VMwareNodePool default {{location}}/{{vmware_cluster}}/{{name}}
        ```

        :param str resource_name: The name of the resource.
        :param VMwareNodePoolArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VMwareNodePoolArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            VMwareNodePoolArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 config: Optional[pulumi.Input[pulumi.InputType['VMwareNodePoolConfigArgs']]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_pool_autoscaling: Optional[pulumi.Input[pulumi.InputType['VMwareNodePoolNodePoolAutoscalingArgs']]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 vmware_cluster: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VMwareNodePoolArgs.__new__(VMwareNodePoolArgs)

            __props__.__dict__["annotations"] = annotations
            if config is not None and not isinstance(config, VMwareNodePoolConfigArgs):
                config = config or {}
                def _setter(key, value):
                    config[key] = value
                VMwareNodePoolConfigArgs._configure(_setter, **config)
            if config is None and not opts.urn:
                raise TypeError("Missing required property 'config'")
            __props__.__dict__["config"] = config
            __props__.__dict__["display_name"] = display_name
            if location is None and not opts.urn:
                raise TypeError("Missing required property 'location'")
            __props__.__dict__["location"] = location
            __props__.__dict__["name"] = name
            if node_pool_autoscaling is not None and not isinstance(node_pool_autoscaling, VMwareNodePoolNodePoolAutoscalingArgs):
                node_pool_autoscaling = node_pool_autoscaling or {}
                def _setter(key, value):
                    node_pool_autoscaling[key] = value
                VMwareNodePoolNodePoolAutoscalingArgs._configure(_setter, **node_pool_autoscaling)
            __props__.__dict__["node_pool_autoscaling"] = node_pool_autoscaling
            __props__.__dict__["project"] = project
            if vmware_cluster is None and not opts.urn:
                raise TypeError("Missing required property 'vmware_cluster'")
            __props__.__dict__["vmware_cluster"] = vmware_cluster
            __props__.__dict__["create_time"] = None
            __props__.__dict__["delete_time"] = None
            __props__.__dict__["etag"] = None
            __props__.__dict__["on_prem_version"] = None
            __props__.__dict__["reconciling"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["statuses"] = None
            __props__.__dict__["uid"] = None
            __props__.__dict__["update_time"] = None
        super(VMwareNodePool, __self__).__init__(
            'gcp:gkeonprem/vMwareNodePool:VMwareNodePool',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            config: Optional[pulumi.Input[pulumi.InputType['VMwareNodePoolConfigArgs']]] = None,
            create_time: Optional[pulumi.Input[str]] = None,
            delete_time: Optional[pulumi.Input[str]] = None,
            display_name: Optional[pulumi.Input[str]] = None,
            etag: Optional[pulumi.Input[str]] = None,
            location: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            node_pool_autoscaling: Optional[pulumi.Input[pulumi.InputType['VMwareNodePoolNodePoolAutoscalingArgs']]] = None,
            on_prem_version: Optional[pulumi.Input[str]] = None,
            project: Optional[pulumi.Input[str]] = None,
            reconciling: Optional[pulumi.Input[bool]] = None,
            state: Optional[pulumi.Input[str]] = None,
            statuses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VMwareNodePoolStatusArgs']]]]] = None,
            uid: Optional[pulumi.Input[str]] = None,
            update_time: Optional[pulumi.Input[str]] = None,
            vmware_cluster: Optional[pulumi.Input[str]] = None) -> 'VMwareNodePool':
        """
        Get an existing VMwareNodePool resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] annotations: Annotations on the node Pool.
               This field has the same restrictions as Kubernetes annotations.
               The total size of all keys and values combined is limited to 256k.
               Key can have 2 segments: prefix (optional) and name (required),
               separated by a slash (/).
               Prefix must be a DNS subdomain.
               Name must be 63 characters or less, begin and end with alphanumerics,
               with dashes (-), underscores (_), dots (.), and alphanumerics between.
        :param pulumi.Input[pulumi.InputType['VMwareNodePoolConfigArgs']] config: The node configuration of the node pool.
               Structure is documented below.
        :param pulumi.Input[str] create_time: The time the cluster was created, in RFC3339 text format.
        :param pulumi.Input[str] delete_time: The time the cluster was deleted, in RFC3339 text format.
        :param pulumi.Input[str] display_name: The display name for the node pool.
        :param pulumi.Input[str] etag: This checksum is computed by the server based on the value of other
               fields, and may be sent on update and delete requests to ensure the
               client has an up-to-date value before proceeding.
               Allows clients to perform consistent read-modify-writes
               through optimistic concurrency control.
        :param pulumi.Input[str] location: The location of the resource.
        :param pulumi.Input[str] name: The vmware node pool name.
        :param pulumi.Input[pulumi.InputType['VMwareNodePoolNodePoolAutoscalingArgs']] node_pool_autoscaling: Node Pool autoscaling config for the node pool.
               Structure is documented below.
        :param pulumi.Input[str] on_prem_version: Anthos version for the node pool. Defaults to the user cluster version.
        :param pulumi.Input[str] project: The ID of the project in which the resource belongs.
               If it is not provided, the provider project is used.
        :param pulumi.Input[bool] reconciling: If set, there are currently changes in flight to the node pool.
        :param pulumi.Input[str] state: (Output)
               The lifecycle state of the condition.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VMwareNodePoolStatusArgs']]]] statuses: ResourceStatus representing detailed cluster state.
               Structure is documented below.
        :param pulumi.Input[str] uid: The unique identifier of the node pool.
        :param pulumi.Input[str] update_time: The time the cluster was last updated, in RFC3339 text format.
        :param pulumi.Input[str] vmware_cluster: The cluster this node pool belongs to.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VMwareNodePoolState.__new__(_VMwareNodePoolState)

        __props__.__dict__["annotations"] = annotations
        __props__.__dict__["config"] = config
        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["delete_time"] = delete_time
        __props__.__dict__["display_name"] = display_name
        __props__.__dict__["etag"] = etag
        __props__.__dict__["location"] = location
        __props__.__dict__["name"] = name
        __props__.__dict__["node_pool_autoscaling"] = node_pool_autoscaling
        __props__.__dict__["on_prem_version"] = on_prem_version
        __props__.__dict__["project"] = project
        __props__.__dict__["reconciling"] = reconciling
        __props__.__dict__["state"] = state
        __props__.__dict__["statuses"] = statuses
        __props__.__dict__["uid"] = uid
        __props__.__dict__["update_time"] = update_time
        __props__.__dict__["vmware_cluster"] = vmware_cluster
        return VMwareNodePool(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def annotations(self) -> pulumi.Output[Mapping[str, str]]:
        """
        Annotations on the node Pool.
        This field has the same restrictions as Kubernetes annotations.
        The total size of all keys and values combined is limited to 256k.
        Key can have 2 segments: prefix (optional) and name (required),
        separated by a slash (/).
        Prefix must be a DNS subdomain.
        Name must be 63 characters or less, begin and end with alphanumerics,
        with dashes (-), underscores (_), dots (.), and alphanumerics between.
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def config(self) -> pulumi.Output['outputs.VMwareNodePoolConfig']:
        """
        The node configuration of the node pool.
        Structure is documented below.
        """
        return pulumi.get(self, "config")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        The time the cluster was created, in RFC3339 text format.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="deleteTime")
    def delete_time(self) -> pulumi.Output[str]:
        """
        The time the cluster was deleted, in RFC3339 text format.
        """
        return pulumi.get(self, "delete_time")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[Optional[str]]:
        """
        The display name for the node pool.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def etag(self) -> pulumi.Output[str]:
        """
        This checksum is computed by the server based on the value of other
        fields, and may be sent on update and delete requests to ensure the
        client has an up-to-date value before proceeding.
        Allows clients to perform consistent read-modify-writes
        through optimistic concurrency control.
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        """
        The location of the resource.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The vmware node pool name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodePoolAutoscaling")
    def node_pool_autoscaling(self) -> pulumi.Output[Optional['outputs.VMwareNodePoolNodePoolAutoscaling']]:
        """
        Node Pool autoscaling config for the node pool.
        Structure is documented below.
        """
        return pulumi.get(self, "node_pool_autoscaling")

    @property
    @pulumi.getter(name="onPremVersion")
    def on_prem_version(self) -> pulumi.Output[str]:
        """
        Anthos version for the node pool. Defaults to the user cluster version.
        """
        return pulumi.get(self, "on_prem_version")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[str]:
        """
        The ID of the project in which the resource belongs.
        If it is not provided, the provider project is used.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def reconciling(self) -> pulumi.Output[bool]:
        """
        If set, there are currently changes in flight to the node pool.
        """
        return pulumi.get(self, "reconciling")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        """
        (Output)
        The lifecycle state of the condition.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def statuses(self) -> pulumi.Output[Sequence['outputs.VMwareNodePoolStatus']]:
        """
        ResourceStatus representing detailed cluster state.
        Structure is documented below.
        """
        return pulumi.get(self, "statuses")

    @property
    @pulumi.getter
    def uid(self) -> pulumi.Output[str]:
        """
        The unique identifier of the node pool.
        """
        return pulumi.get(self, "uid")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[str]:
        """
        The time the cluster was last updated, in RFC3339 text format.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="vmwareCluster")
    def vmware_cluster(self) -> pulumi.Output[str]:
        """
        The cluster this node pool belongs to.
        """
        return pulumi.get(self, "vmware_cluster")

