# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['V2PolicyOrchestratorForFolderArgs', 'V2PolicyOrchestratorForFolder']

@pulumi.input_type
class V2PolicyOrchestratorForFolderArgs:
    def __init__(__self__, *,
                 action: pulumi.Input[builtins.str],
                 folder_id: pulumi.Input[builtins.str],
                 orchestrated_resource: pulumi.Input['V2PolicyOrchestratorForFolderOrchestratedResourceArgs'],
                 policy_orchestrator_id: pulumi.Input[builtins.str],
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 orchestration_scope: Optional[pulumi.Input['V2PolicyOrchestratorForFolderOrchestrationScopeArgs']] = None,
                 state: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a V2PolicyOrchestratorForFolder resource.
        :param pulumi.Input[builtins.str] action: Action to be done by the orchestrator in
               `projects/{project_id}/zones/{zone_id}` locations defined by the
               `orchestration_scope`. Allowed values:
               - `UPSERT` - Orchestrator will create or update target resources.
               - `DELETE` - Orchestrator will delete target resources, if they exist
        :param pulumi.Input[builtins.str] folder_id: The parent resource name in the form of `folders/{folder_id}/locations/global`.
        :param pulumi.Input['V2PolicyOrchestratorForFolderOrchestratedResourceArgs'] orchestrated_resource: Represents a resource that is being orchestrated by the policy orchestrator.
               Structure is documented below.
        :param pulumi.Input[builtins.str] policy_orchestrator_id: The logical identifier of the policy orchestrator, with the following
               restrictions:
               * Must contain only lowercase letters, numbers, and hyphens.
               * Must start with a letter.
               * Must be between 1-63 characters.
               * Must end with a number or a letter.
               * Must be unique within the parent.
        :param pulumi.Input[builtins.str] description: Freeform text describing the purpose of the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] labels: Labels as key value pairs **Note**: This field is non-authoritative, and will only manage the labels present in your
               configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
        :param pulumi.Input['V2PolicyOrchestratorForFolderOrchestrationScopeArgs'] orchestration_scope: Defines a set of selectors which drive which resources are in scope of policy orchestration.
        :param pulumi.Input[builtins.str] state: (Output)
               State of the iteration.
               Possible values:
               PROCESSING
               COMPLETED
               FAILED
               CANCELLED
               UNKNOWN
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "folder_id", folder_id)
        pulumi.set(__self__, "orchestrated_resource", orchestrated_resource)
        pulumi.set(__self__, "policy_orchestrator_id", policy_orchestrator_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if orchestration_scope is not None:
            pulumi.set(__self__, "orchestration_scope", orchestration_scope)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input[builtins.str]:
        """
        Action to be done by the orchestrator in
        `projects/{project_id}/zones/{zone_id}` locations defined by the
        `orchestration_scope`. Allowed values:
        - `UPSERT` - Orchestrator will create or update target resources.
        - `DELETE` - Orchestrator will delete target resources, if they exist
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="folderId")
    def folder_id(self) -> pulumi.Input[builtins.str]:
        """
        The parent resource name in the form of `folders/{folder_id}/locations/global`.
        """
        return pulumi.get(self, "folder_id")

    @folder_id.setter
    def folder_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "folder_id", value)

    @property
    @pulumi.getter(name="orchestratedResource")
    def orchestrated_resource(self) -> pulumi.Input['V2PolicyOrchestratorForFolderOrchestratedResourceArgs']:
        """
        Represents a resource that is being orchestrated by the policy orchestrator.
        Structure is documented below.
        """
        return pulumi.get(self, "orchestrated_resource")

    @orchestrated_resource.setter
    def orchestrated_resource(self, value: pulumi.Input['V2PolicyOrchestratorForFolderOrchestratedResourceArgs']):
        pulumi.set(self, "orchestrated_resource", value)

    @property
    @pulumi.getter(name="policyOrchestratorId")
    def policy_orchestrator_id(self) -> pulumi.Input[builtins.str]:
        """
        The logical identifier of the policy orchestrator, with the following
        restrictions:
        * Must contain only lowercase letters, numbers, and hyphens.
        * Must start with a letter.
        * Must be between 1-63 characters.
        * Must end with a number or a letter.
        * Must be unique within the parent.
        """
        return pulumi.get(self, "policy_orchestrator_id")

    @policy_orchestrator_id.setter
    def policy_orchestrator_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "policy_orchestrator_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Freeform text describing the purpose of the resource.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        Labels as key value pairs **Note**: This field is non-authoritative, and will only manage the labels present in your
        configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="orchestrationScope")
    def orchestration_scope(self) -> Optional[pulumi.Input['V2PolicyOrchestratorForFolderOrchestrationScopeArgs']]:
        """
        Defines a set of selectors which drive which resources are in scope of policy orchestration.
        """
        return pulumi.get(self, "orchestration_scope")

    @orchestration_scope.setter
    def orchestration_scope(self, value: Optional[pulumi.Input['V2PolicyOrchestratorForFolderOrchestrationScopeArgs']]):
        pulumi.set(self, "orchestration_scope", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (Output)
        State of the iteration.
        Possible values:
        PROCESSING
        COMPLETED
        FAILED
        CANCELLED
        UNKNOWN
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "state", value)


@pulumi.input_type
class _V2PolicyOrchestratorForFolderState:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[builtins.str]] = None,
                 create_time: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 effective_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 etag: Optional[pulumi.Input[builtins.str]] = None,
                 folder_id: Optional[pulumi.Input[builtins.str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 orchestrated_resource: Optional[pulumi.Input['V2PolicyOrchestratorForFolderOrchestratedResourceArgs']] = None,
                 orchestration_scope: Optional[pulumi.Input['V2PolicyOrchestratorForFolderOrchestrationScopeArgs']] = None,
                 orchestration_states: Optional[pulumi.Input[Sequence[pulumi.Input['V2PolicyOrchestratorForFolderOrchestrationStateArgs']]]] = None,
                 policy_orchestrator_id: Optional[pulumi.Input[builtins.str]] = None,
                 pulumi_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 reconciling: Optional[pulumi.Input[builtins.bool]] = None,
                 state: Optional[pulumi.Input[builtins.str]] = None,
                 update_time: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering V2PolicyOrchestratorForFolder resources.
        :param pulumi.Input[builtins.str] action: Action to be done by the orchestrator in
               `projects/{project_id}/zones/{zone_id}` locations defined by the
               `orchestration_scope`. Allowed values:
               - `UPSERT` - Orchestrator will create or update target resources.
               - `DELETE` - Orchestrator will delete target resources, if they exist
        :param pulumi.Input[builtins.str] create_time: Timestamp when the policy orchestrator resource was created.
        :param pulumi.Input[builtins.str] description: Freeform text describing the purpose of the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] effective_labels: All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        :param pulumi.Input[builtins.str] etag: This checksum is computed by the server based on the value of other
               fields, and may be sent on update and delete requests to ensure the
               client has an up-to-date value before proceeding.
        :param pulumi.Input[builtins.str] folder_id: The parent resource name in the form of `folders/{folder_id}/locations/global`.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] labels: Labels as key value pairs **Note**: This field is non-authoritative, and will only manage the labels present in your
               configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
        :param pulumi.Input[builtins.str] name: Identifier. In form of
               * `organizations/{organization_id}/locations/global/policyOrchestrators/{orchestrator_id}`
               * `folders/{folder_id}/locations/global/policyOrchestrators/{orchestrator_id}`
               * `projects/{project_id_or_number}/locations/global/policyOrchestrators/{orchestrator_id}`
        :param pulumi.Input['V2PolicyOrchestratorForFolderOrchestratedResourceArgs'] orchestrated_resource: Represents a resource that is being orchestrated by the policy orchestrator.
               Structure is documented below.
        :param pulumi.Input['V2PolicyOrchestratorForFolderOrchestrationScopeArgs'] orchestration_scope: Defines a set of selectors which drive which resources are in scope of policy orchestration.
        :param pulumi.Input[Sequence[pulumi.Input['V2PolicyOrchestratorForFolderOrchestrationStateArgs']]] orchestration_states: Describes the state of the orchestration process.
               Structure is documented below.
        :param pulumi.Input[builtins.str] policy_orchestrator_id: The logical identifier of the policy orchestrator, with the following
               restrictions:
               * Must contain only lowercase letters, numbers, and hyphens.
               * Must start with a letter.
               * Must be between 1-63 characters.
               * Must end with a number or a letter.
               * Must be unique within the parent.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] pulumi_labels: The combination of labels configured directly on the resource
               and default labels configured on the provider.
        :param pulumi.Input[builtins.bool] reconciling: Set to true, if the there are ongoing changes being applied by the
               orchestrator.
        :param pulumi.Input[builtins.str] state: (Output)
               State of the iteration.
               Possible values:
               PROCESSING
               COMPLETED
               FAILED
               CANCELLED
               UNKNOWN
        :param pulumi.Input[builtins.str] update_time: Timestamp when the policy orchestrator resource was last modified.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if effective_labels is not None:
            pulumi.set(__self__, "effective_labels", effective_labels)
        if etag is not None:
            pulumi.set(__self__, "etag", etag)
        if folder_id is not None:
            pulumi.set(__self__, "folder_id", folder_id)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if orchestrated_resource is not None:
            pulumi.set(__self__, "orchestrated_resource", orchestrated_resource)
        if orchestration_scope is not None:
            pulumi.set(__self__, "orchestration_scope", orchestration_scope)
        if orchestration_states is not None:
            pulumi.set(__self__, "orchestration_states", orchestration_states)
        if policy_orchestrator_id is not None:
            pulumi.set(__self__, "policy_orchestrator_id", policy_orchestrator_id)
        if pulumi_labels is not None:
            pulumi.set(__self__, "pulumi_labels", pulumi_labels)
        if reconciling is not None:
            pulumi.set(__self__, "reconciling", reconciling)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Action to be done by the orchestrator in
        `projects/{project_id}/zones/{zone_id}` locations defined by the
        `orchestration_scope`. Allowed values:
        - `UPSERT` - Orchestrator will create or update target resources.
        - `DELETE` - Orchestrator will delete target resources, if they exist
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Timestamp when the policy orchestrator resource was created.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Freeform text describing the purpose of the resource.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="effectiveLabels")
    def effective_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        """
        return pulumi.get(self, "effective_labels")

    @effective_labels.setter
    def effective_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "effective_labels", value)

    @property
    @pulumi.getter
    def etag(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        This checksum is computed by the server based on the value of other
        fields, and may be sent on update and delete requests to ensure the
        client has an up-to-date value before proceeding.
        """
        return pulumi.get(self, "etag")

    @etag.setter
    def etag(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "etag", value)

    @property
    @pulumi.getter(name="folderId")
    def folder_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The parent resource name in the form of `folders/{folder_id}/locations/global`.
        """
        return pulumi.get(self, "folder_id")

    @folder_id.setter
    def folder_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "folder_id", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        Labels as key value pairs **Note**: This field is non-authoritative, and will only manage the labels present in your
        configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Identifier. In form of
        * `organizations/{organization_id}/locations/global/policyOrchestrators/{orchestrator_id}`
        * `folders/{folder_id}/locations/global/policyOrchestrators/{orchestrator_id}`
        * `projects/{project_id_or_number}/locations/global/policyOrchestrators/{orchestrator_id}`
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="orchestratedResource")
    def orchestrated_resource(self) -> Optional[pulumi.Input['V2PolicyOrchestratorForFolderOrchestratedResourceArgs']]:
        """
        Represents a resource that is being orchestrated by the policy orchestrator.
        Structure is documented below.
        """
        return pulumi.get(self, "orchestrated_resource")

    @orchestrated_resource.setter
    def orchestrated_resource(self, value: Optional[pulumi.Input['V2PolicyOrchestratorForFolderOrchestratedResourceArgs']]):
        pulumi.set(self, "orchestrated_resource", value)

    @property
    @pulumi.getter(name="orchestrationScope")
    def orchestration_scope(self) -> Optional[pulumi.Input['V2PolicyOrchestratorForFolderOrchestrationScopeArgs']]:
        """
        Defines a set of selectors which drive which resources are in scope of policy orchestration.
        """
        return pulumi.get(self, "orchestration_scope")

    @orchestration_scope.setter
    def orchestration_scope(self, value: Optional[pulumi.Input['V2PolicyOrchestratorForFolderOrchestrationScopeArgs']]):
        pulumi.set(self, "orchestration_scope", value)

    @property
    @pulumi.getter(name="orchestrationStates")
    def orchestration_states(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2PolicyOrchestratorForFolderOrchestrationStateArgs']]]]:
        """
        Describes the state of the orchestration process.
        Structure is documented below.
        """
        return pulumi.get(self, "orchestration_states")

    @orchestration_states.setter
    def orchestration_states(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2PolicyOrchestratorForFolderOrchestrationStateArgs']]]]):
        pulumi.set(self, "orchestration_states", value)

    @property
    @pulumi.getter(name="policyOrchestratorId")
    def policy_orchestrator_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The logical identifier of the policy orchestrator, with the following
        restrictions:
        * Must contain only lowercase letters, numbers, and hyphens.
        * Must start with a letter.
        * Must be between 1-63 characters.
        * Must end with a number or a letter.
        * Must be unique within the parent.
        """
        return pulumi.get(self, "policy_orchestrator_id")

    @policy_orchestrator_id.setter
    def policy_orchestrator_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "policy_orchestrator_id", value)

    @property
    @pulumi.getter(name="pulumiLabels")
    def pulumi_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        The combination of labels configured directly on the resource
        and default labels configured on the provider.
        """
        return pulumi.get(self, "pulumi_labels")

    @pulumi_labels.setter
    def pulumi_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "pulumi_labels", value)

    @property
    @pulumi.getter
    def reconciling(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Set to true, if the there are ongoing changes being applied by the
        orchestrator.
        """
        return pulumi.get(self, "reconciling")

    @reconciling.setter
    def reconciling(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "reconciling", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (Output)
        State of the iteration.
        Possible values:
        PROCESSING
        COMPLETED
        FAILED
        CANCELLED
        UNKNOWN
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Timestamp when the policy orchestrator resource was last modified.
        """
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "update_time", value)


class V2PolicyOrchestratorForFolder(pulumi.CustomResource):

    pulumi_type = "gcp:osconfig/v2PolicyOrchestratorForFolder:V2PolicyOrchestratorForFolder"

    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 folder_id: Optional[pulumi.Input[builtins.str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 orchestrated_resource: Optional[pulumi.Input[Union['V2PolicyOrchestratorForFolderOrchestratedResourceArgs', 'V2PolicyOrchestratorForFolderOrchestratedResourceArgsDict']]] = None,
                 orchestration_scope: Optional[pulumi.Input[Union['V2PolicyOrchestratorForFolderOrchestrationScopeArgs', 'V2PolicyOrchestratorForFolderOrchestrationScopeArgsDict']]] = None,
                 policy_orchestrator_id: Optional[pulumi.Input[builtins.str]] = None,
                 state: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        PolicyOrchestrator helps managing project+zone level policy resources (e.g.
        OS Policy Assignments), by providing tools to create, update and delete them
        across projects and locations, at scale.

        ## Example Usage

        ### Osconfigv2 Policy Orchestrator For Folder Basic

        ```python
        import pulumi
        import pulumi_gcp as gcp
        import pulumi_time as time

        my_folder = gcp.organizations.Folder("my_folder",
            display_name="po-folder",
            parent="organizations/123456789",
            deletion_protection=False)
        osconfig_sa = gcp.folder.ServiceIdentity("osconfig_sa",
            folder=my_folder.folder_id,
            service="osconfig.googleapis.com")
        ripple_sa = gcp.folder.ServiceIdentity("ripple_sa",
            folder=my_folder.folder_id,
            service="progressiverollout.googleapis.com")
        wait30_sec = time.index.Sleep("wait_30_sec", create_duration=30s,
        opts = pulumi.ResourceOptions(depends_on=[
                osconfig_sa,
                ripple_sa,
            ]))
        iam_osconfig_service_agent = gcp.folder.IAMMember("iam_osconfig_service_agent",
            folder=my_folder.folder_id,
            role="roles/osconfig.serviceAgent",
            member=osconfig_sa.member,
            opts = pulumi.ResourceOptions(depends_on=[wait30_sec]))
        iam_osconfig_rollout_service_agent = gcp.folder.IAMMember("iam_osconfig_rollout_service_agent",
            folder=my_folder.folder_id,
            role="roles/osconfig.rolloutServiceAgent",
            member=my_folder.folder_id.apply(lambda folder_id: f"serviceAccount:service-folder-{folder_id}@gcp-sa-osconfig-rollout.iam.gserviceaccount.com"),
            opts = pulumi.ResourceOptions(depends_on=[iam_osconfig_service_agent]))
        iam_progressiverollout_service_agent = gcp.folder.IAMMember("iam_progressiverollout_service_agent",
            folder=my_folder.folder_id,
            role="roles/progressiverollout.serviceAgent",
            member=ripple_sa.member,
            opts = pulumi.ResourceOptions(depends_on=[iam_osconfig_rollout_service_agent]))
        wait3_min = time.index.Sleep("wait_3_min", create_duration=180s,
        opts = pulumi.ResourceOptions(depends_on=[iam_progressiverollout_service_agent]))
        policy_orchestrator_for_folder = gcp.osconfig.V2PolicyOrchestratorForFolder("policy_orchestrator_for_folder",
            policy_orchestrator_id="po-folder",
            folder_id=my_folder.folder_id,
            state="ACTIVE",
            action="UPSERT",
            orchestrated_resource={
                "id": "test-orchestrated-resource-folder",
                "os_policy_assignment_v1_payload": {
                    "os_policies": [{
                        "id": "test-os-policy-folder",
                        "mode": "VALIDATION",
                        "resource_groups": [{
                            "resources": [{
                                "id": "resource-tf",
                                "file": {
                                    "content": "file-content-tf",
                                    "path": "file-path-tf-1",
                                    "state": "PRESENT",
                                },
                            }],
                        }],
                    }],
                    "instance_filter": {
                        "inventories": [{
                            "os_short_name": "windows-10",
                        }],
                    },
                    "rollout": {
                        "disruption_budget": {
                            "percent": 100,
                        },
                        "min_wait_duration": "60s",
                    },
                },
            },
            labels={
                "state": "active",
            },
            orchestration_scope={
                "selectors": [{
                    "location_selector": {
                        "included_locations": [""],
                    },
                }],
            },
            opts = pulumi.ResourceOptions(depends_on=[wait3_min]))
        ```

        ## Import

        PolicyOrchestratorForFolder can be imported using any of these accepted formats:

        * `folders/{{folder_id}}/locations/global/policyOrchestrators/{{policy_orchestrator_id}}`

        * `{{folder_id}}/{{policy_orchestrator_id}}`

        When using the `pulumi import` command, PolicyOrchestratorForFolder can be imported using one of the formats above. For example:

        ```sh
        $ pulumi import gcp:osconfig/v2PolicyOrchestratorForFolder:V2PolicyOrchestratorForFolder default folders/{{folder_id}}/locations/global/policyOrchestrators/{{policy_orchestrator_id}}
        ```

        ```sh
        $ pulumi import gcp:osconfig/v2PolicyOrchestratorForFolder:V2PolicyOrchestratorForFolder default {{folder_id}}/{{policy_orchestrator_id}}
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] action: Action to be done by the orchestrator in
               `projects/{project_id}/zones/{zone_id}` locations defined by the
               `orchestration_scope`. Allowed values:
               - `UPSERT` - Orchestrator will create or update target resources.
               - `DELETE` - Orchestrator will delete target resources, if they exist
        :param pulumi.Input[builtins.str] description: Freeform text describing the purpose of the resource.
        :param pulumi.Input[builtins.str] folder_id: The parent resource name in the form of `folders/{folder_id}/locations/global`.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] labels: Labels as key value pairs **Note**: This field is non-authoritative, and will only manage the labels present in your
               configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
        :param pulumi.Input[Union['V2PolicyOrchestratorForFolderOrchestratedResourceArgs', 'V2PolicyOrchestratorForFolderOrchestratedResourceArgsDict']] orchestrated_resource: Represents a resource that is being orchestrated by the policy orchestrator.
               Structure is documented below.
        :param pulumi.Input[Union['V2PolicyOrchestratorForFolderOrchestrationScopeArgs', 'V2PolicyOrchestratorForFolderOrchestrationScopeArgsDict']] orchestration_scope: Defines a set of selectors which drive which resources are in scope of policy orchestration.
        :param pulumi.Input[builtins.str] policy_orchestrator_id: The logical identifier of the policy orchestrator, with the following
               restrictions:
               * Must contain only lowercase letters, numbers, and hyphens.
               * Must start with a letter.
               * Must be between 1-63 characters.
               * Must end with a number or a letter.
               * Must be unique within the parent.
        :param pulumi.Input[builtins.str] state: (Output)
               State of the iteration.
               Possible values:
               PROCESSING
               COMPLETED
               FAILED
               CANCELLED
               UNKNOWN
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: V2PolicyOrchestratorForFolderArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        PolicyOrchestrator helps managing project+zone level policy resources (e.g.
        OS Policy Assignments), by providing tools to create, update and delete them
        across projects and locations, at scale.

        ## Example Usage

        ### Osconfigv2 Policy Orchestrator For Folder Basic

        ```python
        import pulumi
        import pulumi_gcp as gcp
        import pulumi_time as time

        my_folder = gcp.organizations.Folder("my_folder",
            display_name="po-folder",
            parent="organizations/123456789",
            deletion_protection=False)
        osconfig_sa = gcp.folder.ServiceIdentity("osconfig_sa",
            folder=my_folder.folder_id,
            service="osconfig.googleapis.com")
        ripple_sa = gcp.folder.ServiceIdentity("ripple_sa",
            folder=my_folder.folder_id,
            service="progressiverollout.googleapis.com")
        wait30_sec = time.index.Sleep("wait_30_sec", create_duration=30s,
        opts = pulumi.ResourceOptions(depends_on=[
                osconfig_sa,
                ripple_sa,
            ]))
        iam_osconfig_service_agent = gcp.folder.IAMMember("iam_osconfig_service_agent",
            folder=my_folder.folder_id,
            role="roles/osconfig.serviceAgent",
            member=osconfig_sa.member,
            opts = pulumi.ResourceOptions(depends_on=[wait30_sec]))
        iam_osconfig_rollout_service_agent = gcp.folder.IAMMember("iam_osconfig_rollout_service_agent",
            folder=my_folder.folder_id,
            role="roles/osconfig.rolloutServiceAgent",
            member=my_folder.folder_id.apply(lambda folder_id: f"serviceAccount:service-folder-{folder_id}@gcp-sa-osconfig-rollout.iam.gserviceaccount.com"),
            opts = pulumi.ResourceOptions(depends_on=[iam_osconfig_service_agent]))
        iam_progressiverollout_service_agent = gcp.folder.IAMMember("iam_progressiverollout_service_agent",
            folder=my_folder.folder_id,
            role="roles/progressiverollout.serviceAgent",
            member=ripple_sa.member,
            opts = pulumi.ResourceOptions(depends_on=[iam_osconfig_rollout_service_agent]))
        wait3_min = time.index.Sleep("wait_3_min", create_duration=180s,
        opts = pulumi.ResourceOptions(depends_on=[iam_progressiverollout_service_agent]))
        policy_orchestrator_for_folder = gcp.osconfig.V2PolicyOrchestratorForFolder("policy_orchestrator_for_folder",
            policy_orchestrator_id="po-folder",
            folder_id=my_folder.folder_id,
            state="ACTIVE",
            action="UPSERT",
            orchestrated_resource={
                "id": "test-orchestrated-resource-folder",
                "os_policy_assignment_v1_payload": {
                    "os_policies": [{
                        "id": "test-os-policy-folder",
                        "mode": "VALIDATION",
                        "resource_groups": [{
                            "resources": [{
                                "id": "resource-tf",
                                "file": {
                                    "content": "file-content-tf",
                                    "path": "file-path-tf-1",
                                    "state": "PRESENT",
                                },
                            }],
                        }],
                    }],
                    "instance_filter": {
                        "inventories": [{
                            "os_short_name": "windows-10",
                        }],
                    },
                    "rollout": {
                        "disruption_budget": {
                            "percent": 100,
                        },
                        "min_wait_duration": "60s",
                    },
                },
            },
            labels={
                "state": "active",
            },
            orchestration_scope={
                "selectors": [{
                    "location_selector": {
                        "included_locations": [""],
                    },
                }],
            },
            opts = pulumi.ResourceOptions(depends_on=[wait3_min]))
        ```

        ## Import

        PolicyOrchestratorForFolder can be imported using any of these accepted formats:

        * `folders/{{folder_id}}/locations/global/policyOrchestrators/{{policy_orchestrator_id}}`

        * `{{folder_id}}/{{policy_orchestrator_id}}`

        When using the `pulumi import` command, PolicyOrchestratorForFolder can be imported using one of the formats above. For example:

        ```sh
        $ pulumi import gcp:osconfig/v2PolicyOrchestratorForFolder:V2PolicyOrchestratorForFolder default folders/{{folder_id}}/locations/global/policyOrchestrators/{{policy_orchestrator_id}}
        ```

        ```sh
        $ pulumi import gcp:osconfig/v2PolicyOrchestratorForFolder:V2PolicyOrchestratorForFolder default {{folder_id}}/{{policy_orchestrator_id}}
        ```

        :param str resource_name: The name of the resource.
        :param V2PolicyOrchestratorForFolderArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(V2PolicyOrchestratorForFolderArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 folder_id: Optional[pulumi.Input[builtins.str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 orchestrated_resource: Optional[pulumi.Input[Union['V2PolicyOrchestratorForFolderOrchestratedResourceArgs', 'V2PolicyOrchestratorForFolderOrchestratedResourceArgsDict']]] = None,
                 orchestration_scope: Optional[pulumi.Input[Union['V2PolicyOrchestratorForFolderOrchestrationScopeArgs', 'V2PolicyOrchestratorForFolderOrchestrationScopeArgsDict']]] = None,
                 policy_orchestrator_id: Optional[pulumi.Input[builtins.str]] = None,
                 state: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = V2PolicyOrchestratorForFolderArgs.__new__(V2PolicyOrchestratorForFolderArgs)

            if action is None and not opts.urn:
                raise TypeError("Missing required property 'action'")
            __props__.__dict__["action"] = action
            __props__.__dict__["description"] = description
            if folder_id is None and not opts.urn:
                raise TypeError("Missing required property 'folder_id'")
            __props__.__dict__["folder_id"] = folder_id
            __props__.__dict__["labels"] = labels
            if orchestrated_resource is None and not opts.urn:
                raise TypeError("Missing required property 'orchestrated_resource'")
            __props__.__dict__["orchestrated_resource"] = orchestrated_resource
            __props__.__dict__["orchestration_scope"] = orchestration_scope
            if policy_orchestrator_id is None and not opts.urn:
                raise TypeError("Missing required property 'policy_orchestrator_id'")
            __props__.__dict__["policy_orchestrator_id"] = policy_orchestrator_id
            __props__.__dict__["state"] = state
            __props__.__dict__["create_time"] = None
            __props__.__dict__["effective_labels"] = None
            __props__.__dict__["etag"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["orchestration_states"] = None
            __props__.__dict__["pulumi_labels"] = None
            __props__.__dict__["reconciling"] = None
            __props__.__dict__["update_time"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["effectiveLabels", "pulumiLabels"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(V2PolicyOrchestratorForFolder, __self__).__init__(
            'gcp:osconfig/v2PolicyOrchestratorForFolder:V2PolicyOrchestratorForFolder',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            action: Optional[pulumi.Input[builtins.str]] = None,
            create_time: Optional[pulumi.Input[builtins.str]] = None,
            description: Optional[pulumi.Input[builtins.str]] = None,
            effective_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
            etag: Optional[pulumi.Input[builtins.str]] = None,
            folder_id: Optional[pulumi.Input[builtins.str]] = None,
            labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
            name: Optional[pulumi.Input[builtins.str]] = None,
            orchestrated_resource: Optional[pulumi.Input[Union['V2PolicyOrchestratorForFolderOrchestratedResourceArgs', 'V2PolicyOrchestratorForFolderOrchestratedResourceArgsDict']]] = None,
            orchestration_scope: Optional[pulumi.Input[Union['V2PolicyOrchestratorForFolderOrchestrationScopeArgs', 'V2PolicyOrchestratorForFolderOrchestrationScopeArgsDict']]] = None,
            orchestration_states: Optional[pulumi.Input[Sequence[pulumi.Input[Union['V2PolicyOrchestratorForFolderOrchestrationStateArgs', 'V2PolicyOrchestratorForFolderOrchestrationStateArgsDict']]]]] = None,
            policy_orchestrator_id: Optional[pulumi.Input[builtins.str]] = None,
            pulumi_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
            reconciling: Optional[pulumi.Input[builtins.bool]] = None,
            state: Optional[pulumi.Input[builtins.str]] = None,
            update_time: Optional[pulumi.Input[builtins.str]] = None) -> 'V2PolicyOrchestratorForFolder':
        """
        Get an existing V2PolicyOrchestratorForFolder resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] action: Action to be done by the orchestrator in
               `projects/{project_id}/zones/{zone_id}` locations defined by the
               `orchestration_scope`. Allowed values:
               - `UPSERT` - Orchestrator will create or update target resources.
               - `DELETE` - Orchestrator will delete target resources, if they exist
        :param pulumi.Input[builtins.str] create_time: Timestamp when the policy orchestrator resource was created.
        :param pulumi.Input[builtins.str] description: Freeform text describing the purpose of the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] effective_labels: All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        :param pulumi.Input[builtins.str] etag: This checksum is computed by the server based on the value of other
               fields, and may be sent on update and delete requests to ensure the
               client has an up-to-date value before proceeding.
        :param pulumi.Input[builtins.str] folder_id: The parent resource name in the form of `folders/{folder_id}/locations/global`.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] labels: Labels as key value pairs **Note**: This field is non-authoritative, and will only manage the labels present in your
               configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
        :param pulumi.Input[builtins.str] name: Identifier. In form of
               * `organizations/{organization_id}/locations/global/policyOrchestrators/{orchestrator_id}`
               * `folders/{folder_id}/locations/global/policyOrchestrators/{orchestrator_id}`
               * `projects/{project_id_or_number}/locations/global/policyOrchestrators/{orchestrator_id}`
        :param pulumi.Input[Union['V2PolicyOrchestratorForFolderOrchestratedResourceArgs', 'V2PolicyOrchestratorForFolderOrchestratedResourceArgsDict']] orchestrated_resource: Represents a resource that is being orchestrated by the policy orchestrator.
               Structure is documented below.
        :param pulumi.Input[Union['V2PolicyOrchestratorForFolderOrchestrationScopeArgs', 'V2PolicyOrchestratorForFolderOrchestrationScopeArgsDict']] orchestration_scope: Defines a set of selectors which drive which resources are in scope of policy orchestration.
        :param pulumi.Input[Sequence[pulumi.Input[Union['V2PolicyOrchestratorForFolderOrchestrationStateArgs', 'V2PolicyOrchestratorForFolderOrchestrationStateArgsDict']]]] orchestration_states: Describes the state of the orchestration process.
               Structure is documented below.
        :param pulumi.Input[builtins.str] policy_orchestrator_id: The logical identifier of the policy orchestrator, with the following
               restrictions:
               * Must contain only lowercase letters, numbers, and hyphens.
               * Must start with a letter.
               * Must be between 1-63 characters.
               * Must end with a number or a letter.
               * Must be unique within the parent.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] pulumi_labels: The combination of labels configured directly on the resource
               and default labels configured on the provider.
        :param pulumi.Input[builtins.bool] reconciling: Set to true, if the there are ongoing changes being applied by the
               orchestrator.
        :param pulumi.Input[builtins.str] state: (Output)
               State of the iteration.
               Possible values:
               PROCESSING
               COMPLETED
               FAILED
               CANCELLED
               UNKNOWN
        :param pulumi.Input[builtins.str] update_time: Timestamp when the policy orchestrator resource was last modified.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _V2PolicyOrchestratorForFolderState.__new__(_V2PolicyOrchestratorForFolderState)

        __props__.__dict__["action"] = action
        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["description"] = description
        __props__.__dict__["effective_labels"] = effective_labels
        __props__.__dict__["etag"] = etag
        __props__.__dict__["folder_id"] = folder_id
        __props__.__dict__["labels"] = labels
        __props__.__dict__["name"] = name
        __props__.__dict__["orchestrated_resource"] = orchestrated_resource
        __props__.__dict__["orchestration_scope"] = orchestration_scope
        __props__.__dict__["orchestration_states"] = orchestration_states
        __props__.__dict__["policy_orchestrator_id"] = policy_orchestrator_id
        __props__.__dict__["pulumi_labels"] = pulumi_labels
        __props__.__dict__["reconciling"] = reconciling
        __props__.__dict__["state"] = state
        __props__.__dict__["update_time"] = update_time
        return V2PolicyOrchestratorForFolder(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Output[builtins.str]:
        """
        Action to be done by the orchestrator in
        `projects/{project_id}/zones/{zone_id}` locations defined by the
        `orchestration_scope`. Allowed values:
        - `UPSERT` - Orchestrator will create or update target resources.
        - `DELETE` - Orchestrator will delete target resources, if they exist
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[builtins.str]:
        """
        Timestamp when the policy orchestrator resource was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Freeform text describing the purpose of the resource.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="effectiveLabels")
    def effective_labels(self) -> pulumi.Output[Mapping[str, builtins.str]]:
        """
        All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        """
        return pulumi.get(self, "effective_labels")

    @property
    @pulumi.getter
    def etag(self) -> pulumi.Output[builtins.str]:
        """
        This checksum is computed by the server based on the value of other
        fields, and may be sent on update and delete requests to ensure the
        client has an up-to-date value before proceeding.
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter(name="folderId")
    def folder_id(self) -> pulumi.Output[builtins.str]:
        """
        The parent resource name in the form of `folders/{folder_id}/locations/global`.
        """
        return pulumi.get(self, "folder_id")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Optional[Mapping[str, builtins.str]]]:
        """
        Labels as key value pairs **Note**: This field is non-authoritative, and will only manage the labels present in your
        configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        """
        Identifier. In form of
        * `organizations/{organization_id}/locations/global/policyOrchestrators/{orchestrator_id}`
        * `folders/{folder_id}/locations/global/policyOrchestrators/{orchestrator_id}`
        * `projects/{project_id_or_number}/locations/global/policyOrchestrators/{orchestrator_id}`
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="orchestratedResource")
    def orchestrated_resource(self) -> pulumi.Output['outputs.V2PolicyOrchestratorForFolderOrchestratedResource']:
        """
        Represents a resource that is being orchestrated by the policy orchestrator.
        Structure is documented below.
        """
        return pulumi.get(self, "orchestrated_resource")

    @property
    @pulumi.getter(name="orchestrationScope")
    def orchestration_scope(self) -> pulumi.Output[Optional['outputs.V2PolicyOrchestratorForFolderOrchestrationScope']]:
        """
        Defines a set of selectors which drive which resources are in scope of policy orchestration.
        """
        return pulumi.get(self, "orchestration_scope")

    @property
    @pulumi.getter(name="orchestrationStates")
    def orchestration_states(self) -> pulumi.Output[Sequence['outputs.V2PolicyOrchestratorForFolderOrchestrationState']]:
        """
        Describes the state of the orchestration process.
        Structure is documented below.
        """
        return pulumi.get(self, "orchestration_states")

    @property
    @pulumi.getter(name="policyOrchestratorId")
    def policy_orchestrator_id(self) -> pulumi.Output[builtins.str]:
        """
        The logical identifier of the policy orchestrator, with the following
        restrictions:
        * Must contain only lowercase letters, numbers, and hyphens.
        * Must start with a letter.
        * Must be between 1-63 characters.
        * Must end with a number or a letter.
        * Must be unique within the parent.
        """
        return pulumi.get(self, "policy_orchestrator_id")

    @property
    @pulumi.getter(name="pulumiLabels")
    def pulumi_labels(self) -> pulumi.Output[Mapping[str, builtins.str]]:
        """
        The combination of labels configured directly on the resource
        and default labels configured on the provider.
        """
        return pulumi.get(self, "pulumi_labels")

    @property
    @pulumi.getter
    def reconciling(self) -> pulumi.Output[builtins.bool]:
        """
        Set to true, if the there are ongoing changes being applied by the
        orchestrator.
        """
        return pulumi.get(self, "reconciling")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        (Output)
        State of the iteration.
        Possible values:
        PROCESSING
        COMPLETED
        FAILED
        CANCELLED
        UNKNOWN
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[builtins.str]:
        """
        Timestamp when the policy orchestrator resource was last modified.
        """
        return pulumi.get(self, "update_time")

