# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetEntitlementResult',
    'AwaitableGetEntitlementResult',
    'get_entitlement',
    'get_entitlement_output',
]

@pulumi.output_type
class GetEntitlementResult:
    """
    A collection of values returned by getEntitlement.
    """
    def __init__(__self__, additional_notification_targets=None, approval_workflows=None, create_time=None, eligible_users=None, entitlement_id=None, etag=None, id=None, location=None, max_request_duration=None, name=None, parent=None, privileged_accesses=None, requester_justification_configs=None, state=None, update_time=None):
        if additional_notification_targets and not isinstance(additional_notification_targets, list):
            raise TypeError("Expected argument 'additional_notification_targets' to be a list")
        pulumi.set(__self__, "additional_notification_targets", additional_notification_targets)
        if approval_workflows and not isinstance(approval_workflows, list):
            raise TypeError("Expected argument 'approval_workflows' to be a list")
        pulumi.set(__self__, "approval_workflows", approval_workflows)
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if eligible_users and not isinstance(eligible_users, list):
            raise TypeError("Expected argument 'eligible_users' to be a list")
        pulumi.set(__self__, "eligible_users", eligible_users)
        if entitlement_id and not isinstance(entitlement_id, str):
            raise TypeError("Expected argument 'entitlement_id' to be a str")
        pulumi.set(__self__, "entitlement_id", entitlement_id)
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        pulumi.set(__self__, "etag", etag)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if max_request_duration and not isinstance(max_request_duration, str):
            raise TypeError("Expected argument 'max_request_duration' to be a str")
        pulumi.set(__self__, "max_request_duration", max_request_duration)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if parent and not isinstance(parent, str):
            raise TypeError("Expected argument 'parent' to be a str")
        pulumi.set(__self__, "parent", parent)
        if privileged_accesses and not isinstance(privileged_accesses, list):
            raise TypeError("Expected argument 'privileged_accesses' to be a list")
        pulumi.set(__self__, "privileged_accesses", privileged_accesses)
        if requester_justification_configs and not isinstance(requester_justification_configs, list):
            raise TypeError("Expected argument 'requester_justification_configs' to be a list")
        pulumi.set(__self__, "requester_justification_configs", requester_justification_configs)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="additionalNotificationTargets")
    def additional_notification_targets(self) -> Sequence['outputs.GetEntitlementAdditionalNotificationTargetResult']:
        return pulumi.get(self, "additional_notification_targets")

    @property
    @pulumi.getter(name="approvalWorkflows")
    def approval_workflows(self) -> Sequence['outputs.GetEntitlementApprovalWorkflowResult']:
        return pulumi.get(self, "approval_workflows")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="eligibleUsers")
    def eligible_users(self) -> Sequence['outputs.GetEntitlementEligibleUserResult']:
        return pulumi.get(self, "eligible_users")

    @property
    @pulumi.getter(name="entitlementId")
    def entitlement_id(self) -> Optional[str]:
        return pulumi.get(self, "entitlement_id")

    @property
    @pulumi.getter
    def etag(self) -> str:
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="maxRequestDuration")
    def max_request_duration(self) -> str:
        return pulumi.get(self, "max_request_duration")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def parent(self) -> Optional[str]:
        return pulumi.get(self, "parent")

    @property
    @pulumi.getter(name="privilegedAccesses")
    def privileged_accesses(self) -> Sequence['outputs.GetEntitlementPrivilegedAccessResult']:
        return pulumi.get(self, "privileged_accesses")

    @property
    @pulumi.getter(name="requesterJustificationConfigs")
    def requester_justification_configs(self) -> Sequence['outputs.GetEntitlementRequesterJustificationConfigResult']:
        return pulumi.get(self, "requester_justification_configs")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        return pulumi.get(self, "update_time")


class AwaitableGetEntitlementResult(GetEntitlementResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEntitlementResult(
            additional_notification_targets=self.additional_notification_targets,
            approval_workflows=self.approval_workflows,
            create_time=self.create_time,
            eligible_users=self.eligible_users,
            entitlement_id=self.entitlement_id,
            etag=self.etag,
            id=self.id,
            location=self.location,
            max_request_duration=self.max_request_duration,
            name=self.name,
            parent=self.parent,
            privileged_accesses=self.privileged_accesses,
            requester_justification_configs=self.requester_justification_configs,
            state=self.state,
            update_time=self.update_time)


def get_entitlement(entitlement_id: Optional[str] = None,
                    location: Optional[str] = None,
                    parent: Optional[str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEntitlementResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['entitlementId'] = entitlement_id
    __args__['location'] = location
    __args__['parent'] = parent
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('gcp:privilegedaccessmanager/getEntitlement:getEntitlement', __args__, opts=opts, typ=GetEntitlementResult).value

    return AwaitableGetEntitlementResult(
        additional_notification_targets=pulumi.get(__ret__, 'additional_notification_targets'),
        approval_workflows=pulumi.get(__ret__, 'approval_workflows'),
        create_time=pulumi.get(__ret__, 'create_time'),
        eligible_users=pulumi.get(__ret__, 'eligible_users'),
        entitlement_id=pulumi.get(__ret__, 'entitlement_id'),
        etag=pulumi.get(__ret__, 'etag'),
        id=pulumi.get(__ret__, 'id'),
        location=pulumi.get(__ret__, 'location'),
        max_request_duration=pulumi.get(__ret__, 'max_request_duration'),
        name=pulumi.get(__ret__, 'name'),
        parent=pulumi.get(__ret__, 'parent'),
        privileged_accesses=pulumi.get(__ret__, 'privileged_accesses'),
        requester_justification_configs=pulumi.get(__ret__, 'requester_justification_configs'),
        state=pulumi.get(__ret__, 'state'),
        update_time=pulumi.get(__ret__, 'update_time'))


@_utilities.lift_output_func(get_entitlement)
def get_entitlement_output(entitlement_id: Optional[pulumi.Input[Optional[str]]] = None,
                           location: Optional[pulumi.Input[Optional[str]]] = None,
                           parent: Optional[pulumi.Input[Optional[str]]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetEntitlementResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
