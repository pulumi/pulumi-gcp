# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetServiceResult',
    'AwaitableGetServiceResult',
    'get_service',
    'get_service_output',
]

@pulumi.output_type
class GetServiceResult:
    """
    A collection of values returned by getService.
    """
    def __init__(__self__, annotations=None, binary_authorizations=None, client=None, client_version=None, conditions=None, create_time=None, creator=None, custom_audiences=None, delete_time=None, description=None, effective_annotations=None, effective_labels=None, etag=None, expire_time=None, generation=None, id=None, ingress=None, labels=None, last_modifier=None, latest_created_revision=None, latest_ready_revision=None, launch_stage=None, location=None, name=None, observed_generation=None, project=None, pulumi_labels=None, reconciling=None, templates=None, terminal_conditions=None, traffic_statuses=None, traffics=None, uid=None, update_time=None, uri=None):
        if annotations and not isinstance(annotations, dict):
            raise TypeError("Expected argument 'annotations' to be a dict")
        pulumi.set(__self__, "annotations", annotations)
        if binary_authorizations and not isinstance(binary_authorizations, list):
            raise TypeError("Expected argument 'binary_authorizations' to be a list")
        pulumi.set(__self__, "binary_authorizations", binary_authorizations)
        if client and not isinstance(client, str):
            raise TypeError("Expected argument 'client' to be a str")
        pulumi.set(__self__, "client", client)
        if client_version and not isinstance(client_version, str):
            raise TypeError("Expected argument 'client_version' to be a str")
        pulumi.set(__self__, "client_version", client_version)
        if conditions and not isinstance(conditions, list):
            raise TypeError("Expected argument 'conditions' to be a list")
        pulumi.set(__self__, "conditions", conditions)
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if creator and not isinstance(creator, str):
            raise TypeError("Expected argument 'creator' to be a str")
        pulumi.set(__self__, "creator", creator)
        if custom_audiences and not isinstance(custom_audiences, list):
            raise TypeError("Expected argument 'custom_audiences' to be a list")
        pulumi.set(__self__, "custom_audiences", custom_audiences)
        if delete_time and not isinstance(delete_time, str):
            raise TypeError("Expected argument 'delete_time' to be a str")
        pulumi.set(__self__, "delete_time", delete_time)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if effective_annotations and not isinstance(effective_annotations, dict):
            raise TypeError("Expected argument 'effective_annotations' to be a dict")
        pulumi.set(__self__, "effective_annotations", effective_annotations)
        if effective_labels and not isinstance(effective_labels, dict):
            raise TypeError("Expected argument 'effective_labels' to be a dict")
        pulumi.set(__self__, "effective_labels", effective_labels)
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        pulumi.set(__self__, "etag", etag)
        if expire_time and not isinstance(expire_time, str):
            raise TypeError("Expected argument 'expire_time' to be a str")
        pulumi.set(__self__, "expire_time", expire_time)
        if generation and not isinstance(generation, str):
            raise TypeError("Expected argument 'generation' to be a str")
        pulumi.set(__self__, "generation", generation)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ingress and not isinstance(ingress, str):
            raise TypeError("Expected argument 'ingress' to be a str")
        pulumi.set(__self__, "ingress", ingress)
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        pulumi.set(__self__, "labels", labels)
        if last_modifier and not isinstance(last_modifier, str):
            raise TypeError("Expected argument 'last_modifier' to be a str")
        pulumi.set(__self__, "last_modifier", last_modifier)
        if latest_created_revision and not isinstance(latest_created_revision, str):
            raise TypeError("Expected argument 'latest_created_revision' to be a str")
        pulumi.set(__self__, "latest_created_revision", latest_created_revision)
        if latest_ready_revision and not isinstance(latest_ready_revision, str):
            raise TypeError("Expected argument 'latest_ready_revision' to be a str")
        pulumi.set(__self__, "latest_ready_revision", latest_ready_revision)
        if launch_stage and not isinstance(launch_stage, str):
            raise TypeError("Expected argument 'launch_stage' to be a str")
        pulumi.set(__self__, "launch_stage", launch_stage)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if observed_generation and not isinstance(observed_generation, str):
            raise TypeError("Expected argument 'observed_generation' to be a str")
        pulumi.set(__self__, "observed_generation", observed_generation)
        if project and not isinstance(project, str):
            raise TypeError("Expected argument 'project' to be a str")
        pulumi.set(__self__, "project", project)
        if pulumi_labels and not isinstance(pulumi_labels, dict):
            raise TypeError("Expected argument 'pulumi_labels' to be a dict")
        pulumi.set(__self__, "pulumi_labels", pulumi_labels)
        if reconciling and not isinstance(reconciling, bool):
            raise TypeError("Expected argument 'reconciling' to be a bool")
        pulumi.set(__self__, "reconciling", reconciling)
        if templates and not isinstance(templates, list):
            raise TypeError("Expected argument 'templates' to be a list")
        pulumi.set(__self__, "templates", templates)
        if terminal_conditions and not isinstance(terminal_conditions, list):
            raise TypeError("Expected argument 'terminal_conditions' to be a list")
        pulumi.set(__self__, "terminal_conditions", terminal_conditions)
        if traffic_statuses and not isinstance(traffic_statuses, list):
            raise TypeError("Expected argument 'traffic_statuses' to be a list")
        pulumi.set(__self__, "traffic_statuses", traffic_statuses)
        if traffics and not isinstance(traffics, list):
            raise TypeError("Expected argument 'traffics' to be a list")
        pulumi.set(__self__, "traffics", traffics)
        if uid and not isinstance(uid, str):
            raise TypeError("Expected argument 'uid' to be a str")
        pulumi.set(__self__, "uid", uid)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)
        if uri and not isinstance(uri, str):
            raise TypeError("Expected argument 'uri' to be a str")
        pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def annotations(self) -> Mapping[str, str]:
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter(name="binaryAuthorizations")
    def binary_authorizations(self) -> Sequence['outputs.GetServiceBinaryAuthorizationResult']:
        return pulumi.get(self, "binary_authorizations")

    @property
    @pulumi.getter
    def client(self) -> str:
        return pulumi.get(self, "client")

    @property
    @pulumi.getter(name="clientVersion")
    def client_version(self) -> str:
        return pulumi.get(self, "client_version")

    @property
    @pulumi.getter
    def conditions(self) -> Sequence['outputs.GetServiceConditionResult']:
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def creator(self) -> str:
        return pulumi.get(self, "creator")

    @property
    @pulumi.getter(name="customAudiences")
    def custom_audiences(self) -> Sequence[str]:
        return pulumi.get(self, "custom_audiences")

    @property
    @pulumi.getter(name="deleteTime")
    def delete_time(self) -> str:
        return pulumi.get(self, "delete_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="effectiveAnnotations")
    def effective_annotations(self) -> Mapping[str, str]:
        return pulumi.get(self, "effective_annotations")

    @property
    @pulumi.getter(name="effectiveLabels")
    def effective_labels(self) -> Mapping[str, str]:
        return pulumi.get(self, "effective_labels")

    @property
    @pulumi.getter
    def etag(self) -> str:
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> str:
        return pulumi.get(self, "expire_time")

    @property
    @pulumi.getter
    def generation(self) -> str:
        return pulumi.get(self, "generation")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ingress(self) -> str:
        return pulumi.get(self, "ingress")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="lastModifier")
    def last_modifier(self) -> str:
        return pulumi.get(self, "last_modifier")

    @property
    @pulumi.getter(name="latestCreatedRevision")
    def latest_created_revision(self) -> str:
        return pulumi.get(self, "latest_created_revision")

    @property
    @pulumi.getter(name="latestReadyRevision")
    def latest_ready_revision(self) -> str:
        return pulumi.get(self, "latest_ready_revision")

    @property
    @pulumi.getter(name="launchStage")
    def launch_stage(self) -> str:
        return pulumi.get(self, "launch_stage")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="observedGeneration")
    def observed_generation(self) -> str:
        return pulumi.get(self, "observed_generation")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="pulumiLabels")
    def pulumi_labels(self) -> Mapping[str, str]:
        return pulumi.get(self, "pulumi_labels")

    @property
    @pulumi.getter
    def reconciling(self) -> bool:
        return pulumi.get(self, "reconciling")

    @property
    @pulumi.getter
    def templates(self) -> Sequence['outputs.GetServiceTemplateResult']:
        return pulumi.get(self, "templates")

    @property
    @pulumi.getter(name="terminalConditions")
    def terminal_conditions(self) -> Sequence['outputs.GetServiceTerminalConditionResult']:
        return pulumi.get(self, "terminal_conditions")

    @property
    @pulumi.getter(name="trafficStatuses")
    def traffic_statuses(self) -> Sequence['outputs.GetServiceTrafficStatusResult']:
        return pulumi.get(self, "traffic_statuses")

    @property
    @pulumi.getter
    def traffics(self) -> Sequence['outputs.GetServiceTrafficResult']:
        return pulumi.get(self, "traffics")

    @property
    @pulumi.getter
    def uid(self) -> str:
        return pulumi.get(self, "uid")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter
    def uri(self) -> str:
        return pulumi.get(self, "uri")


class AwaitableGetServiceResult(GetServiceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetServiceResult(
            annotations=self.annotations,
            binary_authorizations=self.binary_authorizations,
            client=self.client,
            client_version=self.client_version,
            conditions=self.conditions,
            create_time=self.create_time,
            creator=self.creator,
            custom_audiences=self.custom_audiences,
            delete_time=self.delete_time,
            description=self.description,
            effective_annotations=self.effective_annotations,
            effective_labels=self.effective_labels,
            etag=self.etag,
            expire_time=self.expire_time,
            generation=self.generation,
            id=self.id,
            ingress=self.ingress,
            labels=self.labels,
            last_modifier=self.last_modifier,
            latest_created_revision=self.latest_created_revision,
            latest_ready_revision=self.latest_ready_revision,
            launch_stage=self.launch_stage,
            location=self.location,
            name=self.name,
            observed_generation=self.observed_generation,
            project=self.project,
            pulumi_labels=self.pulumi_labels,
            reconciling=self.reconciling,
            templates=self.templates,
            terminal_conditions=self.terminal_conditions,
            traffic_statuses=self.traffic_statuses,
            traffics=self.traffics,
            uid=self.uid,
            update_time=self.update_time,
            uri=self.uri)


def get_service(location: Optional[str] = None,
                name: Optional[str] = None,
                project: Optional[str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetServiceResult:
    """
    Get information about a Google Cloud Run v2 Service. For more information see
    the [official documentation](https://cloud.google.com/run/docs/)
    and [API](https://cloud.google.com/run/docs/apis).

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_gcp as gcp

    my_service = gcp.cloudrunv2.get_service(name="my-service",
        location="us-central1")
    ```
    <!--End PulumiCodeChooser -->


    :param str location: The location of the instance. eg us-central1
           
           - - -
    :param str name: The name of the Cloud Run v2 Service.
    :param str project: The project in which the resource belongs. If it
           is not provided, the provider project is used.
    """
    __args__ = dict()
    __args__['location'] = location
    __args__['name'] = name
    __args__['project'] = project
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('gcp:cloudrunv2/getService:getService', __args__, opts=opts, typ=GetServiceResult).value

    return AwaitableGetServiceResult(
        annotations=pulumi.get(__ret__, 'annotations'),
        binary_authorizations=pulumi.get(__ret__, 'binary_authorizations'),
        client=pulumi.get(__ret__, 'client'),
        client_version=pulumi.get(__ret__, 'client_version'),
        conditions=pulumi.get(__ret__, 'conditions'),
        create_time=pulumi.get(__ret__, 'create_time'),
        creator=pulumi.get(__ret__, 'creator'),
        custom_audiences=pulumi.get(__ret__, 'custom_audiences'),
        delete_time=pulumi.get(__ret__, 'delete_time'),
        description=pulumi.get(__ret__, 'description'),
        effective_annotations=pulumi.get(__ret__, 'effective_annotations'),
        effective_labels=pulumi.get(__ret__, 'effective_labels'),
        etag=pulumi.get(__ret__, 'etag'),
        expire_time=pulumi.get(__ret__, 'expire_time'),
        generation=pulumi.get(__ret__, 'generation'),
        id=pulumi.get(__ret__, 'id'),
        ingress=pulumi.get(__ret__, 'ingress'),
        labels=pulumi.get(__ret__, 'labels'),
        last_modifier=pulumi.get(__ret__, 'last_modifier'),
        latest_created_revision=pulumi.get(__ret__, 'latest_created_revision'),
        latest_ready_revision=pulumi.get(__ret__, 'latest_ready_revision'),
        launch_stage=pulumi.get(__ret__, 'launch_stage'),
        location=pulumi.get(__ret__, 'location'),
        name=pulumi.get(__ret__, 'name'),
        observed_generation=pulumi.get(__ret__, 'observed_generation'),
        project=pulumi.get(__ret__, 'project'),
        pulumi_labels=pulumi.get(__ret__, 'pulumi_labels'),
        reconciling=pulumi.get(__ret__, 'reconciling'),
        templates=pulumi.get(__ret__, 'templates'),
        terminal_conditions=pulumi.get(__ret__, 'terminal_conditions'),
        traffic_statuses=pulumi.get(__ret__, 'traffic_statuses'),
        traffics=pulumi.get(__ret__, 'traffics'),
        uid=pulumi.get(__ret__, 'uid'),
        update_time=pulumi.get(__ret__, 'update_time'),
        uri=pulumi.get(__ret__, 'uri'))


@_utilities.lift_output_func(get_service)
def get_service_output(location: Optional[pulumi.Input[Optional[str]]] = None,
                       name: Optional[pulumi.Input[str]] = None,
                       project: Optional[pulumi.Input[Optional[str]]] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetServiceResult]:
    """
    Get information about a Google Cloud Run v2 Service. For more information see
    the [official documentation](https://cloud.google.com/run/docs/)
    and [API](https://cloud.google.com/run/docs/apis).

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_gcp as gcp

    my_service = gcp.cloudrunv2.get_service(name="my-service",
        location="us-central1")
    ```
    <!--End PulumiCodeChooser -->


    :param str location: The location of the instance. eg us-central1
           
           - - -
    :param str name: The name of the Cloud Run v2 Service.
    :param str project: The project in which the resource belongs. If it
           is not provided, the provider project is used.
    """
    ...
