# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['UserWorkloadsConfigMapArgs', 'UserWorkloadsConfigMap']

@pulumi.input_type
class UserWorkloadsConfigMapArgs:
    def __init__(__self__, *,
                 environment: pulumi.Input[str],
                 data: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a UserWorkloadsConfigMap resource.
        :param pulumi.Input[str] environment: Environment where the Kubernetes ConfigMap will be stored and used.
               
               
               - - -
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] data: The "data" field of Kubernetes ConfigMap, organized in key-value pairs.
               For details see: https://kubernetes.io/docs/concepts/configuration/configmap/
        :param pulumi.Input[str] name: Name of the Kubernetes ConfigMap.
        :param pulumi.Input[str] project: The ID of the project in which the resource belongs.
               If it is not provided, the provider project is used.
        :param pulumi.Input[str] region: The location or Compute Engine region for the environment.
        """
        pulumi.set(__self__, "environment", environment)
        if data is not None:
            pulumi.set(__self__, "data", data)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def environment(self) -> pulumi.Input[str]:
        """
        Environment where the Kubernetes ConfigMap will be stored and used.


        - - -
        """
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(self, value: pulumi.Input[str]):
        pulumi.set(self, "environment", value)

    @property
    @pulumi.getter
    def data(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The "data" field of Kubernetes ConfigMap, organized in key-value pairs.
        For details see: https://kubernetes.io/docs/concepts/configuration/configmap/
        """
        return pulumi.get(self, "data")

    @data.setter
    def data(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "data", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the Kubernetes ConfigMap.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the project in which the resource belongs.
        If it is not provided, the provider project is used.
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        The location or Compute Engine region for the environment.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _UserWorkloadsConfigMapState:
    def __init__(__self__, *,
                 data: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 environment: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering UserWorkloadsConfigMap resources.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] data: The "data" field of Kubernetes ConfigMap, organized in key-value pairs.
               For details see: https://kubernetes.io/docs/concepts/configuration/configmap/
        :param pulumi.Input[str] environment: Environment where the Kubernetes ConfigMap will be stored and used.
               
               
               - - -
        :param pulumi.Input[str] name: Name of the Kubernetes ConfigMap.
        :param pulumi.Input[str] project: The ID of the project in which the resource belongs.
               If it is not provided, the provider project is used.
        :param pulumi.Input[str] region: The location or Compute Engine region for the environment.
        """
        if data is not None:
            pulumi.set(__self__, "data", data)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def data(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The "data" field of Kubernetes ConfigMap, organized in key-value pairs.
        For details see: https://kubernetes.io/docs/concepts/configuration/configmap/
        """
        return pulumi.get(self, "data")

    @data.setter
    def data(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "data", value)

    @property
    @pulumi.getter
    def environment(self) -> Optional[pulumi.Input[str]]:
        """
        Environment where the Kubernetes ConfigMap will be stored and used.


        - - -
        """
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "environment", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the Kubernetes ConfigMap.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the project in which the resource belongs.
        If it is not provided, the provider project is used.
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        The location or Compute Engine region for the environment.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


class UserWorkloadsConfigMap(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 data: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 environment: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## Example Usage

        ### Composer User Workloads Config Map Basic

        ```python
        import pulumi
        import pulumi_gcp as gcp

        environment = gcp.composer.Environment("environment",
            name="test-environment",
            region="us-central1",
            config=gcp.composer.EnvironmentConfigArgs(
                software_config=gcp.composer.EnvironmentConfigSoftwareConfigArgs(
                    image_version="composer-3-airflow-2",
                ),
            ))
        config_map = gcp.composer.UserWorkloadsConfigMap("config_map",
            name="test-config-map",
            region="us-central1",
            environment=environment.name,
            data={
                "api_host": "apihost:443",
            })
        ```

        ## Import

        UserWorkloadsConfigMap can be imported using any of these accepted formats:

        * `projects/{{project}}/locations/{{region}}/environments/{{environment}}/userWorkloadsConfigMaps/{{name}}`

        * `{{project}}/{{region}}/{{environment}}/{{name}}`

        * `{{region}}/{{environment}}/{{name}}`

        * `{{environment}}/{{name}}`

        When using the `pulumi import` command, UserWorkloadsConfigMap can be imported using one of the formats above. For example:

        ```sh
        $ pulumi import gcp:composer/userWorkloadsConfigMap:UserWorkloadsConfigMap default projects/{{project}}/locations/{{region}}/environments/{{environment}}/userWorkloadsConfigMaps/{{name}}
        ```

        ```sh
        $ pulumi import gcp:composer/userWorkloadsConfigMap:UserWorkloadsConfigMap default {{project}}/{{region}}/{{environment}}/{{name}}
        ```

        ```sh
        $ pulumi import gcp:composer/userWorkloadsConfigMap:UserWorkloadsConfigMap default {{region}}/{{environment}}/{{name}}
        ```

        ```sh
        $ pulumi import gcp:composer/userWorkloadsConfigMap:UserWorkloadsConfigMap default {{environment}}/{{name}}
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] data: The "data" field of Kubernetes ConfigMap, organized in key-value pairs.
               For details see: https://kubernetes.io/docs/concepts/configuration/configmap/
        :param pulumi.Input[str] environment: Environment where the Kubernetes ConfigMap will be stored and used.
               
               
               - - -
        :param pulumi.Input[str] name: Name of the Kubernetes ConfigMap.
        :param pulumi.Input[str] project: The ID of the project in which the resource belongs.
               If it is not provided, the provider project is used.
        :param pulumi.Input[str] region: The location or Compute Engine region for the environment.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: UserWorkloadsConfigMapArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ### Composer User Workloads Config Map Basic

        ```python
        import pulumi
        import pulumi_gcp as gcp

        environment = gcp.composer.Environment("environment",
            name="test-environment",
            region="us-central1",
            config=gcp.composer.EnvironmentConfigArgs(
                software_config=gcp.composer.EnvironmentConfigSoftwareConfigArgs(
                    image_version="composer-3-airflow-2",
                ),
            ))
        config_map = gcp.composer.UserWorkloadsConfigMap("config_map",
            name="test-config-map",
            region="us-central1",
            environment=environment.name,
            data={
                "api_host": "apihost:443",
            })
        ```

        ## Import

        UserWorkloadsConfigMap can be imported using any of these accepted formats:

        * `projects/{{project}}/locations/{{region}}/environments/{{environment}}/userWorkloadsConfigMaps/{{name}}`

        * `{{project}}/{{region}}/{{environment}}/{{name}}`

        * `{{region}}/{{environment}}/{{name}}`

        * `{{environment}}/{{name}}`

        When using the `pulumi import` command, UserWorkloadsConfigMap can be imported using one of the formats above. For example:

        ```sh
        $ pulumi import gcp:composer/userWorkloadsConfigMap:UserWorkloadsConfigMap default projects/{{project}}/locations/{{region}}/environments/{{environment}}/userWorkloadsConfigMaps/{{name}}
        ```

        ```sh
        $ pulumi import gcp:composer/userWorkloadsConfigMap:UserWorkloadsConfigMap default {{project}}/{{region}}/{{environment}}/{{name}}
        ```

        ```sh
        $ pulumi import gcp:composer/userWorkloadsConfigMap:UserWorkloadsConfigMap default {{region}}/{{environment}}/{{name}}
        ```

        ```sh
        $ pulumi import gcp:composer/userWorkloadsConfigMap:UserWorkloadsConfigMap default {{environment}}/{{name}}
        ```

        :param str resource_name: The name of the resource.
        :param UserWorkloadsConfigMapArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(UserWorkloadsConfigMapArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 data: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 environment: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = UserWorkloadsConfigMapArgs.__new__(UserWorkloadsConfigMapArgs)

            __props__.__dict__["data"] = data
            if environment is None and not opts.urn:
                raise TypeError("Missing required property 'environment'")
            __props__.__dict__["environment"] = environment
            __props__.__dict__["name"] = name
            __props__.__dict__["project"] = project
            __props__.__dict__["region"] = region
        super(UserWorkloadsConfigMap, __self__).__init__(
            'gcp:composer/userWorkloadsConfigMap:UserWorkloadsConfigMap',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            data: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            environment: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            project: Optional[pulumi.Input[str]] = None,
            region: Optional[pulumi.Input[str]] = None) -> 'UserWorkloadsConfigMap':
        """
        Get an existing UserWorkloadsConfigMap resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] data: The "data" field of Kubernetes ConfigMap, organized in key-value pairs.
               For details see: https://kubernetes.io/docs/concepts/configuration/configmap/
        :param pulumi.Input[str] environment: Environment where the Kubernetes ConfigMap will be stored and used.
               
               
               - - -
        :param pulumi.Input[str] name: Name of the Kubernetes ConfigMap.
        :param pulumi.Input[str] project: The ID of the project in which the resource belongs.
               If it is not provided, the provider project is used.
        :param pulumi.Input[str] region: The location or Compute Engine region for the environment.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _UserWorkloadsConfigMapState.__new__(_UserWorkloadsConfigMapState)

        __props__.__dict__["data"] = data
        __props__.__dict__["environment"] = environment
        __props__.__dict__["name"] = name
        __props__.__dict__["project"] = project
        __props__.__dict__["region"] = region
        return UserWorkloadsConfigMap(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def data(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        The "data" field of Kubernetes ConfigMap, organized in key-value pairs.
        For details see: https://kubernetes.io/docs/concepts/configuration/configmap/
        """
        return pulumi.get(self, "data")

    @property
    @pulumi.getter
    def environment(self) -> pulumi.Output[str]:
        """
        Environment where the Kubernetes ConfigMap will be stored and used.


        - - -
        """
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the Kubernetes ConfigMap.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[str]:
        """
        The ID of the project in which the resource belongs.
        If it is not provided, the provider project is used.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[str]:
        """
        The location or Compute Engine region for the environment.
        """
        return pulumi.get(self, "region")

