# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities

class Instance(pulumi.CustomResource):
    def __init__(__self__, __name__, __opts__=None, description=None, file_shares=None, labels=None, name=None, networks=None, project=None, tier=None, zone=None):
        """Create a Instance resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if description and not isinstance(description, basestring):
            raise TypeError('Expected property description to be a basestring')
        __self__.description = description
        __props__['description'] = description

        if not file_shares:
            raise TypeError('Missing required property file_shares')
        elif not isinstance(file_shares, dict):
            raise TypeError('Expected property file_shares to be a dict')
        __self__.file_shares = file_shares
        __props__['fileShares'] = file_shares

        if labels and not isinstance(labels, dict):
            raise TypeError('Expected property labels to be a dict')
        __self__.labels = labels
        __props__['labels'] = labels

        if name and not isinstance(name, basestring):
            raise TypeError('Expected property name to be a basestring')
        __self__.name = name
        __props__['name'] = name

        if not networks:
            raise TypeError('Missing required property networks')
        elif not isinstance(networks, list):
            raise TypeError('Expected property networks to be a list')
        __self__.networks = networks
        __props__['networks'] = networks

        if project and not isinstance(project, basestring):
            raise TypeError('Expected property project to be a basestring')
        __self__.project = project
        __props__['project'] = project

        if not tier:
            raise TypeError('Missing required property tier')
        elif not isinstance(tier, basestring):
            raise TypeError('Expected property tier to be a basestring')
        __self__.tier = tier
        __props__['tier'] = tier

        if not zone:
            raise TypeError('Missing required property zone')
        elif not isinstance(zone, basestring):
            raise TypeError('Expected property zone to be a basestring')
        __self__.zone = zone
        __props__['zone'] = zone

        __self__.create_time = pulumi.runtime.UNKNOWN
        __self__.etag = pulumi.runtime.UNKNOWN

        super(Instance, __self__).__init__(
            'gcp:filestore/instance:Instance',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'createTime' in outs:
            self.create_time = outs['createTime']
        if 'description' in outs:
            self.description = outs['description']
        if 'etag' in outs:
            self.etag = outs['etag']
        if 'fileShares' in outs:
            self.file_shares = outs['fileShares']
        if 'labels' in outs:
            self.labels = outs['labels']
        if 'name' in outs:
            self.name = outs['name']
        if 'networks' in outs:
            self.networks = outs['networks']
        if 'project' in outs:
            self.project = outs['project']
        if 'tier' in outs:
            self.tier = outs['tier']
        if 'zone' in outs:
            self.zone = outs['zone']
