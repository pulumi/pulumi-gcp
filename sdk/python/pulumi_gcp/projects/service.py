# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities

class Service(pulumi.CustomResource):
    """
    Allows management of a single API service for an existing Google Cloud Platform project. 
    
    For a list of services available, visit the
    [API library page](https://console.cloud.google.com/apis/library) or run `gcloud services list`.
    
    ~> **Note:** This resource _must not_ be used in conjunction with
       `google_project_services` or they will fight over which services should be enabled.
    """
    def __init__(__self__, __name__, __opts__=None, disable_on_destroy=None, project=None, service=None):
        """Create a Service resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if disable_on_destroy and not isinstance(disable_on_destroy, bool):
            raise TypeError('Expected property disable_on_destroy to be a bool')
        __self__.disable_on_destroy = disable_on_destroy
        """
        If true, disable the service when the terraform resource is destroyed.  Defaults to true.  May be useful in the event that a project is long-lived but the infrastructure running in that project changes frequently.
        """
        __props__['disableOnDestroy'] = disable_on_destroy

        if project and not isinstance(project, basestring):
            raise TypeError('Expected property project to be a basestring')
        __self__.project = project
        """
        The project ID. If not provided, the provider project is used.
        """
        __props__['project'] = project

        if not service:
            raise TypeError('Missing required property service')
        elif not isinstance(service, basestring):
            raise TypeError('Expected property service to be a basestring')
        __self__.service = service
        """
        The service to enable.
        """
        __props__['service'] = service

        super(Service, __self__).__init__(
            'gcp:projects/service:Service',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'disableOnDestroy' in outs:
            self.disable_on_destroy = outs['disableOnDestroy']
        if 'project' in outs:
            self.project = outs['project']
        if 'service' in outs:
            self.service = outs['service']
