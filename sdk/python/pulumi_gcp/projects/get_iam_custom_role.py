# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetIamCustomRoleResult',
    'AwaitableGetIamCustomRoleResult',
    'get_iam_custom_role',
    'get_iam_custom_role_output',
]

@pulumi.output_type
class GetIamCustomRoleResult:
    """
    A collection of values returned by getIamCustomRole.
    """
    def __init__(__self__, deleted=None, description=None, id=None, name=None, permissions=None, project=None, role_id=None, stage=None, title=None):
        if deleted and not isinstance(deleted, bool):
            raise TypeError("Expected argument 'deleted' to be a bool")
        pulumi.set(__self__, "deleted", deleted)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if permissions and not isinstance(permissions, list):
            raise TypeError("Expected argument 'permissions' to be a list")
        pulumi.set(__self__, "permissions", permissions)
        if project and not isinstance(project, str):
            raise TypeError("Expected argument 'project' to be a str")
        pulumi.set(__self__, "project", project)
        if role_id and not isinstance(role_id, str):
            raise TypeError("Expected argument 'role_id' to be a str")
        pulumi.set(__self__, "role_id", role_id)
        if stage and not isinstance(stage, str):
            raise TypeError("Expected argument 'stage' to be a str")
        pulumi.set(__self__, "stage", stage)
        if title and not isinstance(title, str):
            raise TypeError("Expected argument 'title' to be a str")
        pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def deleted(self) -> bool:
        return pulumi.get(self, "deleted")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def permissions(self) -> Sequence[str]:
        return pulumi.get(self, "permissions")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="roleId")
    def role_id(self) -> str:
        return pulumi.get(self, "role_id")

    @property
    @pulumi.getter
    def stage(self) -> str:
        return pulumi.get(self, "stage")

    @property
    @pulumi.getter
    def title(self) -> str:
        return pulumi.get(self, "title")


class AwaitableGetIamCustomRoleResult(GetIamCustomRoleResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIamCustomRoleResult(
            deleted=self.deleted,
            description=self.description,
            id=self.id,
            name=self.name,
            permissions=self.permissions,
            project=self.project,
            role_id=self.role_id,
            stage=self.stage,
            title=self.title)


def get_iam_custom_role(project: Optional[str] = None,
                        role_id: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIamCustomRoleResult:
    """
    Get information about a Google Cloud Project IAM Custom Role. Note that you must have the `roles/iam.roleViewer` role (or equivalent permissions) at the project level to use this datasource.

    ```python
    import pulumi
    import pulumi_gcp as gcp

    example = gcp.projects.get_iam_custom_role(project="your-project-id",
        role_id="your-role-id")
    project = gcp.projects.IAMMember("project",
        project="your-project-id",
        role=example.name,
        member="user:jane@example.com")
    ```


    :param str project: The project were the custom role has been created in. Defaults to the provider project configuration.
    :param str role_id: The role id that has been used for this role.
    """
    __args__ = dict()
    __args__['project'] = project
    __args__['roleId'] = role_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('gcp:projects/getIamCustomRole:getIamCustomRole', __args__, opts=opts, typ=GetIamCustomRoleResult).value

    return AwaitableGetIamCustomRoleResult(
        deleted=pulumi.get(__ret__, 'deleted'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        permissions=pulumi.get(__ret__, 'permissions'),
        project=pulumi.get(__ret__, 'project'),
        role_id=pulumi.get(__ret__, 'role_id'),
        stage=pulumi.get(__ret__, 'stage'),
        title=pulumi.get(__ret__, 'title'))
def get_iam_custom_role_output(project: Optional[pulumi.Input[Optional[str]]] = None,
                               role_id: Optional[pulumi.Input[str]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIamCustomRoleResult]:
    """
    Get information about a Google Cloud Project IAM Custom Role. Note that you must have the `roles/iam.roleViewer` role (or equivalent permissions) at the project level to use this datasource.

    ```python
    import pulumi
    import pulumi_gcp as gcp

    example = gcp.projects.get_iam_custom_role(project="your-project-id",
        role_id="your-role-id")
    project = gcp.projects.IAMMember("project",
        project="your-project-id",
        role=example.name,
        member="user:jane@example.com")
    ```


    :param str project: The project were the custom role has been created in. Defaults to the provider project configuration.
    :param str role_id: The role id that has been used for this role.
    """
    __args__ = dict()
    __args__['project'] = project
    __args__['roleId'] = role_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('gcp:projects/getIamCustomRole:getIamCustomRole', __args__, opts=opts, typ=GetIamCustomRoleResult)
    return __ret__.apply(lambda __response__: GetIamCustomRoleResult(
        deleted=pulumi.get(__response__, 'deleted'),
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        permissions=pulumi.get(__response__, 'permissions'),
        project=pulumi.get(__response__, 'project'),
        role_id=pulumi.get(__response__, 'role_id'),
        stage=pulumi.get(__response__, 'stage'),
        title=pulumi.get(__response__, 'title')))
