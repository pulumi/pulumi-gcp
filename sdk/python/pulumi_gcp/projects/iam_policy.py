# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime

class IAMPolicy(pulumi.CustomResource):
    """
    Three different resources help you manage your IAM policy for a project. Each of these resources serves a different use case:
    
    * `google_project_iam_policy`: Authoritative. Sets the IAM policy for the project and replaces any existing policy already attached.
    * `google_project_iam_binding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the project are preserved.
    * `google_project_iam_member`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the project are preserved.
    
    ~> **Note:** `google_project_iam_policy` **cannot** be used in conjunction with `google_project_iam_binding` and `google_project_iam_member` or they will fight over what your policy should be.
    
    ~> **Note:** `google_project_iam_binding` resources **can be** used in conjunction with `google_project_iam_member` resources **only if** they do not grant privilege to the same role.
    """
    def __init__(__self__, __name__, __opts__=None, authoritative=None, disable_project=None, policy_data=None, project=None):
        """Create a IAMPolicy resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if authoritative and not isinstance(authoritative, bool):
            raise TypeError('Expected property authoritative to be a bool')
        __self__.authoritative = authoritative
        """
        (Optional, only for `google_project_iam_policy`)
        A boolean value indicating if this policy
        should overwrite any existing IAM policy on the project. When set to true,
        **any policies not in your config file will be removed**. This can **lock
        you out** of your project until an Organization Administrator grants you
        access again, so please exercise caution. If this argument is `true` and you
        want to delete the resource, you must set the `disable_project` argument to
        `true`, acknowledging that the project will be inaccessible to anyone but the
        Organization Admins, as it will no longer have an IAM policy. Rather than using
        this, you should use `google_project_iam_binding` and
        `google_project_iam_member`.
        """
        __props__['authoritative'] = authoritative

        if disable_project and not isinstance(disable_project, bool):
            raise TypeError('Expected property disable_project to be a bool')
        __self__.disable_project = disable_project
        """
        (Optional, only for `google_project_iam_policy`)
        A boolean value that must be set to `true`
        if you want to delete a `google_project_iam_policy` that is authoritative.
        """
        __props__['disableProject'] = disable_project

        if not policy_data:
            raise TypeError('Missing required property policy_data')
        elif not isinstance(policy_data, basestring):
            raise TypeError('Expected property policy_data to be a basestring')
        __self__.policy_data = policy_data
        """
        The `google_iam_policy` data source that represents
        the IAM policy that will be applied to the project. The policy will be
        merged with any existing policy applied to the project.
        """
        __props__['policyData'] = policy_data

        if project and not isinstance(project, basestring):
            raise TypeError('Expected property project to be a basestring')
        __self__.project = project
        """
        The project ID. If not specified, uses the
        ID of the project configured with the provider.
        """
        __props__['project'] = project

        __self__.etag = pulumi.runtime.UNKNOWN
        """
        (Computed) The etag of the project's IAM policy.
        """
        __self__.restore_policy = pulumi.runtime.UNKNOWN
        """
        (DEPRECATED) (Computed, only for `google_project_iam_policy`)
        The IAM policy that will be restored when a
        non-authoritative policy resource is deleted.
        """

        super(IAMPolicy, __self__).__init__(
            'gcp:projects/iAMPolicy:IAMPolicy',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'authoritative' in outs:
            self.authoritative = outs['authoritative']
        if 'disableProject' in outs:
            self.disable_project = outs['disableProject']
        if 'etag' in outs:
            self.etag = outs['etag']
        if 'policyData' in outs:
            self.policy_data = outs['policyData']
        if 'project' in outs:
            self.project = outs['project']
        if 'restorePolicy' in outs:
            self.restore_policy = outs['restorePolicy']
