# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetReservationResult',
    'AwaitableGetReservationResult',
    'get_reservation',
    'get_reservation_output',
]

@pulumi.output_type
class GetReservationResult:
    """
    A collection of values returned by getReservation.
    """
    def __init__(__self__, commitment=None, creation_timestamp=None, delete_after_durations=None, delete_at_time=None, description=None, enable_emergent_maintenance=None, id=None, name=None, project=None, reservation_sharing_policies=None, self_link=None, share_settings=None, specific_reservation_required=None, specific_reservations=None, status=None, zone=None):
        if commitment and not isinstance(commitment, str):
            raise TypeError("Expected argument 'commitment' to be a str")
        pulumi.set(__self__, "commitment", commitment)
        if creation_timestamp and not isinstance(creation_timestamp, str):
            raise TypeError("Expected argument 'creation_timestamp' to be a str")
        pulumi.set(__self__, "creation_timestamp", creation_timestamp)
        if delete_after_durations and not isinstance(delete_after_durations, list):
            raise TypeError("Expected argument 'delete_after_durations' to be a list")
        pulumi.set(__self__, "delete_after_durations", delete_after_durations)
        if delete_at_time and not isinstance(delete_at_time, str):
            raise TypeError("Expected argument 'delete_at_time' to be a str")
        pulumi.set(__self__, "delete_at_time", delete_at_time)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if enable_emergent_maintenance and not isinstance(enable_emergent_maintenance, bool):
            raise TypeError("Expected argument 'enable_emergent_maintenance' to be a bool")
        pulumi.set(__self__, "enable_emergent_maintenance", enable_emergent_maintenance)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if project and not isinstance(project, str):
            raise TypeError("Expected argument 'project' to be a str")
        pulumi.set(__self__, "project", project)
        if reservation_sharing_policies and not isinstance(reservation_sharing_policies, list):
            raise TypeError("Expected argument 'reservation_sharing_policies' to be a list")
        pulumi.set(__self__, "reservation_sharing_policies", reservation_sharing_policies)
        if self_link and not isinstance(self_link, str):
            raise TypeError("Expected argument 'self_link' to be a str")
        pulumi.set(__self__, "self_link", self_link)
        if share_settings and not isinstance(share_settings, list):
            raise TypeError("Expected argument 'share_settings' to be a list")
        pulumi.set(__self__, "share_settings", share_settings)
        if specific_reservation_required and not isinstance(specific_reservation_required, bool):
            raise TypeError("Expected argument 'specific_reservation_required' to be a bool")
        pulumi.set(__self__, "specific_reservation_required", specific_reservation_required)
        if specific_reservations and not isinstance(specific_reservations, list):
            raise TypeError("Expected argument 'specific_reservations' to be a list")
        pulumi.set(__self__, "specific_reservations", specific_reservations)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if zone and not isinstance(zone, str):
            raise TypeError("Expected argument 'zone' to be a str")
        pulumi.set(__self__, "zone", zone)

    @_builtins.property
    @pulumi.getter
    def commitment(self) -> _builtins.str:
        return pulumi.get(self, "commitment")

    @_builtins.property
    @pulumi.getter(name="creationTimestamp")
    def creation_timestamp(self) -> _builtins.str:
        return pulumi.get(self, "creation_timestamp")

    @_builtins.property
    @pulumi.getter(name="deleteAfterDurations")
    def delete_after_durations(self) -> Sequence['outputs.GetReservationDeleteAfterDurationResult']:
        return pulumi.get(self, "delete_after_durations")

    @_builtins.property
    @pulumi.getter(name="deleteAtTime")
    def delete_at_time(self) -> _builtins.str:
        return pulumi.get(self, "delete_at_time")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enableEmergentMaintenance")
    def enable_emergent_maintenance(self) -> _builtins.bool:
        return pulumi.get(self, "enable_emergent_maintenance")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def project(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "project")

    @_builtins.property
    @pulumi.getter(name="reservationSharingPolicies")
    def reservation_sharing_policies(self) -> Sequence['outputs.GetReservationReservationSharingPolicyResult']:
        return pulumi.get(self, "reservation_sharing_policies")

    @_builtins.property
    @pulumi.getter(name="selfLink")
    def self_link(self) -> _builtins.str:
        return pulumi.get(self, "self_link")

    @_builtins.property
    @pulumi.getter(name="shareSettings")
    def share_settings(self) -> Sequence['outputs.GetReservationShareSettingResult']:
        return pulumi.get(self, "share_settings")

    @_builtins.property
    @pulumi.getter(name="specificReservationRequired")
    def specific_reservation_required(self) -> _builtins.bool:
        return pulumi.get(self, "specific_reservation_required")

    @_builtins.property
    @pulumi.getter(name="specificReservations")
    def specific_reservations(self) -> Sequence['outputs.GetReservationSpecificReservationResult']:
        return pulumi.get(self, "specific_reservations")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def zone(self) -> _builtins.str:
        return pulumi.get(self, "zone")


class AwaitableGetReservationResult(GetReservationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetReservationResult(
            commitment=self.commitment,
            creation_timestamp=self.creation_timestamp,
            delete_after_durations=self.delete_after_durations,
            delete_at_time=self.delete_at_time,
            description=self.description,
            enable_emergent_maintenance=self.enable_emergent_maintenance,
            id=self.id,
            name=self.name,
            project=self.project,
            reservation_sharing_policies=self.reservation_sharing_policies,
            self_link=self.self_link,
            share_settings=self.share_settings,
            specific_reservation_required=self.specific_reservation_required,
            specific_reservations=self.specific_reservations,
            status=self.status,
            zone=self.zone)


def get_reservation(name: Optional[_builtins.str] = None,
                    project: Optional[_builtins.str] = None,
                    zone: Optional[_builtins.str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetReservationResult:
    """
    Provides access to available Google Compute Reservation Resources for a given project.
    See more about [Reservations of Compute Engine resources](https://cloud.google.com/compute/docs/instances/reservations-overview) in the upstream docs.

    ```python
    import pulumi
    import pulumi_gcp as gcp

    reservation = gcp.compute.get_reservation(name="gce-reservation",
        zone="us-central1-a")
    ```


    :param _builtins.str name: The name of the Compute Reservation.
    :param _builtins.str project: Project from which to list the Compute Reservation. Defaults to project declared in the provider.
    :param _builtins.str zone: Zone where the Compute Reservation resides.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['project'] = project
    __args__['zone'] = zone
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('gcp:compute/getReservation:getReservation', __args__, opts=opts, typ=GetReservationResult).value

    return AwaitableGetReservationResult(
        commitment=pulumi.get(__ret__, 'commitment'),
        creation_timestamp=pulumi.get(__ret__, 'creation_timestamp'),
        delete_after_durations=pulumi.get(__ret__, 'delete_after_durations'),
        delete_at_time=pulumi.get(__ret__, 'delete_at_time'),
        description=pulumi.get(__ret__, 'description'),
        enable_emergent_maintenance=pulumi.get(__ret__, 'enable_emergent_maintenance'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        project=pulumi.get(__ret__, 'project'),
        reservation_sharing_policies=pulumi.get(__ret__, 'reservation_sharing_policies'),
        self_link=pulumi.get(__ret__, 'self_link'),
        share_settings=pulumi.get(__ret__, 'share_settings'),
        specific_reservation_required=pulumi.get(__ret__, 'specific_reservation_required'),
        specific_reservations=pulumi.get(__ret__, 'specific_reservations'),
        status=pulumi.get(__ret__, 'status'),
        zone=pulumi.get(__ret__, 'zone'))
def get_reservation_output(name: Optional[pulumi.Input[_builtins.str]] = None,
                           project: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           zone: Optional[pulumi.Input[_builtins.str]] = None,
                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetReservationResult]:
    """
    Provides access to available Google Compute Reservation Resources for a given project.
    See more about [Reservations of Compute Engine resources](https://cloud.google.com/compute/docs/instances/reservations-overview) in the upstream docs.

    ```python
    import pulumi
    import pulumi_gcp as gcp

    reservation = gcp.compute.get_reservation(name="gce-reservation",
        zone="us-central1-a")
    ```


    :param _builtins.str name: The name of the Compute Reservation.
    :param _builtins.str project: Project from which to list the Compute Reservation. Defaults to project declared in the provider.
    :param _builtins.str zone: Zone where the Compute Reservation resides.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['project'] = project
    __args__['zone'] = zone
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('gcp:compute/getReservation:getReservation', __args__, opts=opts, typ=GetReservationResult)
    return __ret__.apply(lambda __response__: GetReservationResult(
        commitment=pulumi.get(__response__, 'commitment'),
        creation_timestamp=pulumi.get(__response__, 'creation_timestamp'),
        delete_after_durations=pulumi.get(__response__, 'delete_after_durations'),
        delete_at_time=pulumi.get(__response__, 'delete_at_time'),
        description=pulumi.get(__response__, 'description'),
        enable_emergent_maintenance=pulumi.get(__response__, 'enable_emergent_maintenance'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        project=pulumi.get(__response__, 'project'),
        reservation_sharing_policies=pulumi.get(__response__, 'reservation_sharing_policies'),
        self_link=pulumi.get(__response__, 'self_link'),
        share_settings=pulumi.get(__response__, 'share_settings'),
        specific_reservation_required=pulumi.get(__response__, 'specific_reservation_required'),
        specific_reservations=pulumi.get(__response__, 'specific_reservations'),
        status=pulumi.get(__response__, 'status'),
        zone=pulumi.get(__response__, 'zone')))
