# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from .. import utilities, tables

class URLMap(pulumi.CustomResource):
    default_service: pulumi.Output[str]
    """
    The backend service or backend bucket to use when none of the given rules match.
    """
    description: pulumi.Output[str]
    """
    A brief description of this resource.
    """
    fingerprint: pulumi.Output[str]
    """
    The unique fingerprint for this resource.
    """
    host_rules: pulumi.Output[list]
    """
    A list of host rules. Multiple blocks of this type are permitted. Structure is documented below.
    """
    map_id: pulumi.Output[str]
    """
    The GCE assigned ID of the resource.
    """
    name: pulumi.Output[str]
    """
    A unique name for the resource, required by GCE.
    Changing this forces a new resource to be created.
    """
    path_matchers: pulumi.Output[list]
    """
    A list of paths to match. Structure is documented below.
    """
    project: pulumi.Output[str]
    """
    The ID of the project in which the resource belongs. If it
    is not provided, the provider project is used.
    """
    self_link: pulumi.Output[str]
    """
    The URI of the created resource.
    """
    tests: pulumi.Output[list]
    """
    The test to perform.  Multiple blocks of this type are permitted. Structure is documented below.
    """
    def __init__(__self__, resource_name, opts=None, default_service=None, description=None, host_rules=None, name=None, path_matchers=None, project=None, tests=None, __name__=None, __opts__=None):
        """
        Manages a URL Map resource within GCE. For more information see
        [the official documentation](https://cloud.google.com/compute/docs/load-balancing/http/url-map)
        and
        [API](https://cloud.google.com/compute/docs/reference/latest/urlMaps).
        
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] default_service: The backend service or backend bucket to use when none of the given rules match.
        :param pulumi.Input[str] description: A brief description of this resource.
        :param pulumi.Input[list] host_rules: A list of host rules. Multiple blocks of this type are permitted. Structure is documented below.
        :param pulumi.Input[str] name: A unique name for the resource, required by GCE.
               Changing this forces a new resource to be created.
        :param pulumi.Input[list] path_matchers: A list of paths to match. Structure is documented below.
        :param pulumi.Input[str] project: The ID of the project in which the resource belongs. If it
               is not provided, the provider project is used.
        :param pulumi.Input[list] tests: The test to perform.  Multiple blocks of this type are permitted. Structure is documented below.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if not resource_name:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(resource_name, str):
            raise TypeError('Expected resource name to be a string')
        if opts and not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if default_service is None:
            raise TypeError('Missing required property default_service')
        __props__['default_service'] = default_service

        __props__['description'] = description

        __props__['host_rules'] = host_rules

        __props__['name'] = name

        __props__['path_matchers'] = path_matchers

        __props__['project'] = project

        __props__['tests'] = tests

        __props__['fingerprint'] = None
        __props__['map_id'] = None
        __props__['self_link'] = None

        super(URLMap, __self__).__init__(
            'gcp:compute/uRLMap:URLMap',
            resource_name,
            __props__,
            opts)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

