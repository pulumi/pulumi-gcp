# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime

class NetworkPeering(pulumi.CustomResource):
    """
    Manages a network peering within GCE. For more information see
    [the official documentation](https://cloud.google.com/compute/docs/vpc/vpc-peering)
    and
    [API](https://cloud.google.com/compute/docs/reference/latest/networks).
    
    ~> **Note:** Both network must create a peering with each other for the peering to be functional.
    
    ~> **Note:** Subnets IP ranges across peered VPC networks cannot overlap.
    """
    def __init__(__self__, __name__, __opts__=None, auto_create_routes=None, name=None, network=None, peer_network=None):
        """Create a NetworkPeering resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if auto_create_routes and not isinstance(auto_create_routes, bool):
            raise TypeError('Expected property auto_create_routes to be a bool')
        __self__.auto_create_routes = auto_create_routes
        """
        If set to `true`, the routes between the two networks will
        be created and managed automatically. Defaults to `true`.
        """
        __props__['autoCreateRoutes'] = auto_create_routes

        if name and not isinstance(name, basestring):
            raise TypeError('Expected property name to be a basestring')
        __self__.name = name
        """
        Name of the peering.
        """
        __props__['name'] = name

        if not network:
            raise TypeError('Missing required property network')
        elif not isinstance(network, basestring):
            raise TypeError('Expected property network to be a basestring')
        __self__.network = network
        """
        Resource link of the network to add a peering to.
        """
        __props__['network'] = network

        if not peer_network:
            raise TypeError('Missing required property peer_network')
        elif not isinstance(peer_network, basestring):
            raise TypeError('Expected property peer_network to be a basestring')
        __self__.peer_network = peer_network
        """
        Resource link of the peer network.
        """
        __props__['peerNetwork'] = peer_network

        __self__.state = pulumi.runtime.UNKNOWN
        """
        State for the peering.
        """
        __self__.state_details = pulumi.runtime.UNKNOWN
        """
        Details about the current state of the peering.
        """

        super(NetworkPeering, __self__).__init__(
            'gcp:compute/networkPeering:NetworkPeering',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'autoCreateRoutes' in outs:
            self.auto_create_routes = outs['autoCreateRoutes']
        if 'name' in outs:
            self.name = outs['name']
        if 'network' in outs:
            self.network = outs['network']
        if 'peerNetwork' in outs:
            self.peer_network = outs['peerNetwork']
        if 'state' in outs:
            self.state = outs['state']
        if 'stateDetails' in outs:
            self.state_details = outs['stateDetails']
