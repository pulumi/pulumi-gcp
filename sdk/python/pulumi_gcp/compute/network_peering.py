# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities

class NetworkPeering(pulumi.CustomResource):
    """
    Manages a network peering within GCE. For more information see
    [the official documentation](https://cloud.google.com/compute/docs/vpc/vpc-peering)
    and
    [API](https://cloud.google.com/compute/docs/reference/latest/networks).
    
    ~> **Note:** Both network must create a peering with each other for the peering to be functional.
    
    ~> **Note:** Subnets IP ranges across peered VPC networks cannot overlap.
    """
    def __init__(__self__, __name__, __opts__=None, auto_create_routes=None, name=None, network=None, peer_network=None):
        """Create a NetworkPeering resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, str):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        __props__['autoCreateRoutes'] = auto_create_routes

        __props__['name'] = name

        if not network:
            raise TypeError('Missing required property network')
        __props__['network'] = network

        if not peer_network:
            raise TypeError('Missing required property peer_network')
        __props__['peerNetwork'] = peer_network

        __props__['state'] = None
        __props__['state_details'] = None

        super(NetworkPeering, __self__).__init__(
            'gcp:compute/networkPeering:NetworkPeering',
            __name__,
            __props__,
            __opts__)

