# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetStoragePoolTypesResult',
    'AwaitableGetStoragePoolTypesResult',
    'get_storage_pool_types',
    'get_storage_pool_types_output',
]

@pulumi.output_type
class GetStoragePoolTypesResult:
    """
    A collection of values returned by getStoragePoolTypes.
    """
    def __init__(__self__, creation_timestamp=None, deprecateds=None, description=None, id=None, kind=None, max_pool_provisioned_capacity_gb=None, max_pool_provisioned_iops=None, max_pool_provisioned_throughput=None, min_pool_provisioned_capacity_gb=None, min_pool_provisioned_iops=None, min_pool_provisioned_throughput=None, name=None, project=None, self_link=None, self_link_with_id=None, storage_pool_type=None, supported_disk_types=None, zone=None):
        if creation_timestamp and not isinstance(creation_timestamp, str):
            raise TypeError("Expected argument 'creation_timestamp' to be a str")
        pulumi.set(__self__, "creation_timestamp", creation_timestamp)
        if deprecateds and not isinstance(deprecateds, list):
            raise TypeError("Expected argument 'deprecateds' to be a list")
        pulumi.set(__self__, "deprecateds", deprecateds)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, int):
            raise TypeError("Expected argument 'id' to be a int")
        pulumi.set(__self__, "id", id)
        if kind and not isinstance(kind, str):
            raise TypeError("Expected argument 'kind' to be a str")
        pulumi.set(__self__, "kind", kind)
        if max_pool_provisioned_capacity_gb and not isinstance(max_pool_provisioned_capacity_gb, int):
            raise TypeError("Expected argument 'max_pool_provisioned_capacity_gb' to be a int")
        pulumi.set(__self__, "max_pool_provisioned_capacity_gb", max_pool_provisioned_capacity_gb)
        if max_pool_provisioned_iops and not isinstance(max_pool_provisioned_iops, int):
            raise TypeError("Expected argument 'max_pool_provisioned_iops' to be a int")
        pulumi.set(__self__, "max_pool_provisioned_iops", max_pool_provisioned_iops)
        if max_pool_provisioned_throughput and not isinstance(max_pool_provisioned_throughput, int):
            raise TypeError("Expected argument 'max_pool_provisioned_throughput' to be a int")
        pulumi.set(__self__, "max_pool_provisioned_throughput", max_pool_provisioned_throughput)
        if min_pool_provisioned_capacity_gb and not isinstance(min_pool_provisioned_capacity_gb, int):
            raise TypeError("Expected argument 'min_pool_provisioned_capacity_gb' to be a int")
        pulumi.set(__self__, "min_pool_provisioned_capacity_gb", min_pool_provisioned_capacity_gb)
        if min_pool_provisioned_iops and not isinstance(min_pool_provisioned_iops, int):
            raise TypeError("Expected argument 'min_pool_provisioned_iops' to be a int")
        pulumi.set(__self__, "min_pool_provisioned_iops", min_pool_provisioned_iops)
        if min_pool_provisioned_throughput and not isinstance(min_pool_provisioned_throughput, int):
            raise TypeError("Expected argument 'min_pool_provisioned_throughput' to be a int")
        pulumi.set(__self__, "min_pool_provisioned_throughput", min_pool_provisioned_throughput)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if project and not isinstance(project, str):
            raise TypeError("Expected argument 'project' to be a str")
        pulumi.set(__self__, "project", project)
        if self_link and not isinstance(self_link, str):
            raise TypeError("Expected argument 'self_link' to be a str")
        pulumi.set(__self__, "self_link", self_link)
        if self_link_with_id and not isinstance(self_link_with_id, str):
            raise TypeError("Expected argument 'self_link_with_id' to be a str")
        pulumi.set(__self__, "self_link_with_id", self_link_with_id)
        if storage_pool_type and not isinstance(storage_pool_type, str):
            raise TypeError("Expected argument 'storage_pool_type' to be a str")
        pulumi.set(__self__, "storage_pool_type", storage_pool_type)
        if supported_disk_types and not isinstance(supported_disk_types, list):
            raise TypeError("Expected argument 'supported_disk_types' to be a list")
        pulumi.set(__self__, "supported_disk_types", supported_disk_types)
        if zone and not isinstance(zone, str):
            raise TypeError("Expected argument 'zone' to be a str")
        pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="creationTimestamp")
    def creation_timestamp(self) -> builtins.str:
        return pulumi.get(self, "creation_timestamp")

    @property
    @pulumi.getter
    def deprecateds(self) -> Sequence['outputs.GetStoragePoolTypesDeprecatedResult']:
        return pulumi.get(self, "deprecateds")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def kind(self) -> builtins.str:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter(name="maxPoolProvisionedCapacityGb")
    def max_pool_provisioned_capacity_gb(self) -> builtins.int:
        return pulumi.get(self, "max_pool_provisioned_capacity_gb")

    @property
    @pulumi.getter(name="maxPoolProvisionedIops")
    def max_pool_provisioned_iops(self) -> builtins.int:
        return pulumi.get(self, "max_pool_provisioned_iops")

    @property
    @pulumi.getter(name="maxPoolProvisionedThroughput")
    def max_pool_provisioned_throughput(self) -> builtins.int:
        return pulumi.get(self, "max_pool_provisioned_throughput")

    @property
    @pulumi.getter(name="minPoolProvisionedCapacityGb")
    def min_pool_provisioned_capacity_gb(self) -> builtins.int:
        return pulumi.get(self, "min_pool_provisioned_capacity_gb")

    @property
    @pulumi.getter(name="minPoolProvisionedIops")
    def min_pool_provisioned_iops(self) -> builtins.int:
        return pulumi.get(self, "min_pool_provisioned_iops")

    @property
    @pulumi.getter(name="minPoolProvisionedThroughput")
    def min_pool_provisioned_throughput(self) -> builtins.int:
        return pulumi.get(self, "min_pool_provisioned_throughput")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def project(self) -> builtins.str:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="selfLink")
    def self_link(self) -> builtins.str:
        return pulumi.get(self, "self_link")

    @property
    @pulumi.getter(name="selfLinkWithId")
    def self_link_with_id(self) -> builtins.str:
        return pulumi.get(self, "self_link_with_id")

    @property
    @pulumi.getter(name="storagePoolType")
    def storage_pool_type(self) -> builtins.str:
        return pulumi.get(self, "storage_pool_type")

    @property
    @pulumi.getter(name="supportedDiskTypes")
    def supported_disk_types(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "supported_disk_types")

    @property
    @pulumi.getter
    def zone(self) -> builtins.str:
        return pulumi.get(self, "zone")


class AwaitableGetStoragePoolTypesResult(GetStoragePoolTypesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetStoragePoolTypesResult(
            creation_timestamp=self.creation_timestamp,
            deprecateds=self.deprecateds,
            description=self.description,
            id=self.id,
            kind=self.kind,
            max_pool_provisioned_capacity_gb=self.max_pool_provisioned_capacity_gb,
            max_pool_provisioned_iops=self.max_pool_provisioned_iops,
            max_pool_provisioned_throughput=self.max_pool_provisioned_throughput,
            min_pool_provisioned_capacity_gb=self.min_pool_provisioned_capacity_gb,
            min_pool_provisioned_iops=self.min_pool_provisioned_iops,
            min_pool_provisioned_throughput=self.min_pool_provisioned_throughput,
            name=self.name,
            project=self.project,
            self_link=self.self_link,
            self_link_with_id=self.self_link_with_id,
            storage_pool_type=self.storage_pool_type,
            supported_disk_types=self.supported_disk_types,
            zone=self.zone)


def get_storage_pool_types(project: Optional[builtins.str] = None,
                           storage_pool_type: Optional[builtins.str] = None,
                           zone: Optional[builtins.str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetStoragePoolTypesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['project'] = project
    __args__['storagePoolType'] = storage_pool_type
    __args__['zone'] = zone
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('gcp:compute/getStoragePoolTypes:getStoragePoolTypes', __args__, opts=opts, typ=GetStoragePoolTypesResult).value

    return AwaitableGetStoragePoolTypesResult(
        creation_timestamp=pulumi.get(__ret__, 'creation_timestamp'),
        deprecateds=pulumi.get(__ret__, 'deprecateds'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        kind=pulumi.get(__ret__, 'kind'),
        max_pool_provisioned_capacity_gb=pulumi.get(__ret__, 'max_pool_provisioned_capacity_gb'),
        max_pool_provisioned_iops=pulumi.get(__ret__, 'max_pool_provisioned_iops'),
        max_pool_provisioned_throughput=pulumi.get(__ret__, 'max_pool_provisioned_throughput'),
        min_pool_provisioned_capacity_gb=pulumi.get(__ret__, 'min_pool_provisioned_capacity_gb'),
        min_pool_provisioned_iops=pulumi.get(__ret__, 'min_pool_provisioned_iops'),
        min_pool_provisioned_throughput=pulumi.get(__ret__, 'min_pool_provisioned_throughput'),
        name=pulumi.get(__ret__, 'name'),
        project=pulumi.get(__ret__, 'project'),
        self_link=pulumi.get(__ret__, 'self_link'),
        self_link_with_id=pulumi.get(__ret__, 'self_link_with_id'),
        storage_pool_type=pulumi.get(__ret__, 'storage_pool_type'),
        supported_disk_types=pulumi.get(__ret__, 'supported_disk_types'),
        zone=pulumi.get(__ret__, 'zone'))
def get_storage_pool_types_output(project: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                                  storage_pool_type: Optional[pulumi.Input[builtins.str]] = None,
                                  zone: Optional[pulumi.Input[builtins.str]] = None,
                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetStoragePoolTypesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['project'] = project
    __args__['storagePoolType'] = storage_pool_type
    __args__['zone'] = zone
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('gcp:compute/getStoragePoolTypes:getStoragePoolTypes', __args__, opts=opts, typ=GetStoragePoolTypesResult)
    return __ret__.apply(lambda __response__: GetStoragePoolTypesResult(
        creation_timestamp=pulumi.get(__response__, 'creation_timestamp'),
        deprecateds=pulumi.get(__response__, 'deprecateds'),
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        kind=pulumi.get(__response__, 'kind'),
        max_pool_provisioned_capacity_gb=pulumi.get(__response__, 'max_pool_provisioned_capacity_gb'),
        max_pool_provisioned_iops=pulumi.get(__response__, 'max_pool_provisioned_iops'),
        max_pool_provisioned_throughput=pulumi.get(__response__, 'max_pool_provisioned_throughput'),
        min_pool_provisioned_capacity_gb=pulumi.get(__response__, 'min_pool_provisioned_capacity_gb'),
        min_pool_provisioned_iops=pulumi.get(__response__, 'min_pool_provisioned_iops'),
        min_pool_provisioned_throughput=pulumi.get(__response__, 'min_pool_provisioned_throughput'),
        name=pulumi.get(__response__, 'name'),
        project=pulumi.get(__response__, 'project'),
        self_link=pulumi.get(__response__, 'self_link'),
        self_link_with_id=pulumi.get(__response__, 'self_link_with_id'),
        storage_pool_type=pulumi.get(__response__, 'storage_pool_type'),
        supported_disk_types=pulumi.get(__response__, 'supported_disk_types'),
        zone=pulumi.get(__response__, 'zone')))
