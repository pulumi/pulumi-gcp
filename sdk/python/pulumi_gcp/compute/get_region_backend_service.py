# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetRegionBackendServiceResult',
    'AwaitableGetRegionBackendServiceResult',
    'get_region_backend_service',
    'get_region_backend_service_output',
]

@pulumi.output_type
class GetRegionBackendServiceResult:
    """
    A collection of values returned by getRegionBackendService.
    """
    def __init__(__self__, affinity_cookie_ttl_sec=None, backends=None, cdn_policies=None, circuit_breakers=None, connection_draining_timeout_sec=None, connection_tracking_policies=None, consistent_hashes=None, creation_timestamp=None, custom_metrics=None, description=None, enable_cdn=None, failover_policies=None, fingerprint=None, generated_id=None, health_checks=None, iaps=None, id=None, ip_address_selection_policy=None, load_balancing_scheme=None, locality_lb_policy=None, log_configs=None, name=None, network=None, outlier_detections=None, port_name=None, project=None, protocol=None, region=None, security_policy=None, self_link=None, session_affinity=None, strong_session_affinity_cookies=None, subsettings=None, timeout_sec=None):
        if affinity_cookie_ttl_sec and not isinstance(affinity_cookie_ttl_sec, int):
            raise TypeError("Expected argument 'affinity_cookie_ttl_sec' to be a int")
        pulumi.set(__self__, "affinity_cookie_ttl_sec", affinity_cookie_ttl_sec)
        if backends and not isinstance(backends, list):
            raise TypeError("Expected argument 'backends' to be a list")
        pulumi.set(__self__, "backends", backends)
        if cdn_policies and not isinstance(cdn_policies, list):
            raise TypeError("Expected argument 'cdn_policies' to be a list")
        pulumi.set(__self__, "cdn_policies", cdn_policies)
        if circuit_breakers and not isinstance(circuit_breakers, list):
            raise TypeError("Expected argument 'circuit_breakers' to be a list")
        pulumi.set(__self__, "circuit_breakers", circuit_breakers)
        if connection_draining_timeout_sec and not isinstance(connection_draining_timeout_sec, int):
            raise TypeError("Expected argument 'connection_draining_timeout_sec' to be a int")
        pulumi.set(__self__, "connection_draining_timeout_sec", connection_draining_timeout_sec)
        if connection_tracking_policies and not isinstance(connection_tracking_policies, list):
            raise TypeError("Expected argument 'connection_tracking_policies' to be a list")
        pulumi.set(__self__, "connection_tracking_policies", connection_tracking_policies)
        if consistent_hashes and not isinstance(consistent_hashes, list):
            raise TypeError("Expected argument 'consistent_hashes' to be a list")
        pulumi.set(__self__, "consistent_hashes", consistent_hashes)
        if creation_timestamp and not isinstance(creation_timestamp, str):
            raise TypeError("Expected argument 'creation_timestamp' to be a str")
        pulumi.set(__self__, "creation_timestamp", creation_timestamp)
        if custom_metrics and not isinstance(custom_metrics, list):
            raise TypeError("Expected argument 'custom_metrics' to be a list")
        pulumi.set(__self__, "custom_metrics", custom_metrics)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if enable_cdn and not isinstance(enable_cdn, bool):
            raise TypeError("Expected argument 'enable_cdn' to be a bool")
        pulumi.set(__self__, "enable_cdn", enable_cdn)
        if failover_policies and not isinstance(failover_policies, list):
            raise TypeError("Expected argument 'failover_policies' to be a list")
        pulumi.set(__self__, "failover_policies", failover_policies)
        if fingerprint and not isinstance(fingerprint, str):
            raise TypeError("Expected argument 'fingerprint' to be a str")
        pulumi.set(__self__, "fingerprint", fingerprint)
        if generated_id and not isinstance(generated_id, int):
            raise TypeError("Expected argument 'generated_id' to be a int")
        pulumi.set(__self__, "generated_id", generated_id)
        if health_checks and not isinstance(health_checks, list):
            raise TypeError("Expected argument 'health_checks' to be a list")
        pulumi.set(__self__, "health_checks", health_checks)
        if iaps and not isinstance(iaps, list):
            raise TypeError("Expected argument 'iaps' to be a list")
        pulumi.set(__self__, "iaps", iaps)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ip_address_selection_policy and not isinstance(ip_address_selection_policy, str):
            raise TypeError("Expected argument 'ip_address_selection_policy' to be a str")
        pulumi.set(__self__, "ip_address_selection_policy", ip_address_selection_policy)
        if load_balancing_scheme and not isinstance(load_balancing_scheme, str):
            raise TypeError("Expected argument 'load_balancing_scheme' to be a str")
        pulumi.set(__self__, "load_balancing_scheme", load_balancing_scheme)
        if locality_lb_policy and not isinstance(locality_lb_policy, str):
            raise TypeError("Expected argument 'locality_lb_policy' to be a str")
        pulumi.set(__self__, "locality_lb_policy", locality_lb_policy)
        if log_configs and not isinstance(log_configs, list):
            raise TypeError("Expected argument 'log_configs' to be a list")
        pulumi.set(__self__, "log_configs", log_configs)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if network and not isinstance(network, str):
            raise TypeError("Expected argument 'network' to be a str")
        pulumi.set(__self__, "network", network)
        if outlier_detections and not isinstance(outlier_detections, list):
            raise TypeError("Expected argument 'outlier_detections' to be a list")
        pulumi.set(__self__, "outlier_detections", outlier_detections)
        if port_name and not isinstance(port_name, str):
            raise TypeError("Expected argument 'port_name' to be a str")
        pulumi.set(__self__, "port_name", port_name)
        if project and not isinstance(project, str):
            raise TypeError("Expected argument 'project' to be a str")
        pulumi.set(__self__, "project", project)
        if protocol and not isinstance(protocol, str):
            raise TypeError("Expected argument 'protocol' to be a str")
        pulumi.set(__self__, "protocol", protocol)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if security_policy and not isinstance(security_policy, str):
            raise TypeError("Expected argument 'security_policy' to be a str")
        pulumi.set(__self__, "security_policy", security_policy)
        if self_link and not isinstance(self_link, str):
            raise TypeError("Expected argument 'self_link' to be a str")
        pulumi.set(__self__, "self_link", self_link)
        if session_affinity and not isinstance(session_affinity, str):
            raise TypeError("Expected argument 'session_affinity' to be a str")
        pulumi.set(__self__, "session_affinity", session_affinity)
        if strong_session_affinity_cookies and not isinstance(strong_session_affinity_cookies, list):
            raise TypeError("Expected argument 'strong_session_affinity_cookies' to be a list")
        pulumi.set(__self__, "strong_session_affinity_cookies", strong_session_affinity_cookies)
        if subsettings and not isinstance(subsettings, list):
            raise TypeError("Expected argument 'subsettings' to be a list")
        pulumi.set(__self__, "subsettings", subsettings)
        if timeout_sec and not isinstance(timeout_sec, int):
            raise TypeError("Expected argument 'timeout_sec' to be a int")
        pulumi.set(__self__, "timeout_sec", timeout_sec)

    @property
    @pulumi.getter(name="affinityCookieTtlSec")
    def affinity_cookie_ttl_sec(self) -> builtins.int:
        return pulumi.get(self, "affinity_cookie_ttl_sec")

    @property
    @pulumi.getter
    def backends(self) -> Sequence['outputs.GetRegionBackendServiceBackendResult']:
        return pulumi.get(self, "backends")

    @property
    @pulumi.getter(name="cdnPolicies")
    def cdn_policies(self) -> Sequence['outputs.GetRegionBackendServiceCdnPolicyResult']:
        return pulumi.get(self, "cdn_policies")

    @property
    @pulumi.getter(name="circuitBreakers")
    def circuit_breakers(self) -> Sequence['outputs.GetRegionBackendServiceCircuitBreakerResult']:
        return pulumi.get(self, "circuit_breakers")

    @property
    @pulumi.getter(name="connectionDrainingTimeoutSec")
    def connection_draining_timeout_sec(self) -> builtins.int:
        return pulumi.get(self, "connection_draining_timeout_sec")

    @property
    @pulumi.getter(name="connectionTrackingPolicies")
    def connection_tracking_policies(self) -> Sequence['outputs.GetRegionBackendServiceConnectionTrackingPolicyResult']:
        return pulumi.get(self, "connection_tracking_policies")

    @property
    @pulumi.getter(name="consistentHashes")
    def consistent_hashes(self) -> Sequence['outputs.GetRegionBackendServiceConsistentHashResult']:
        return pulumi.get(self, "consistent_hashes")

    @property
    @pulumi.getter(name="creationTimestamp")
    def creation_timestamp(self) -> builtins.str:
        return pulumi.get(self, "creation_timestamp")

    @property
    @pulumi.getter(name="customMetrics")
    def custom_metrics(self) -> Sequence['outputs.GetRegionBackendServiceCustomMetricResult']:
        return pulumi.get(self, "custom_metrics")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="enableCdn")
    def enable_cdn(self) -> builtins.bool:
        return pulumi.get(self, "enable_cdn")

    @property
    @pulumi.getter(name="failoverPolicies")
    def failover_policies(self) -> Sequence['outputs.GetRegionBackendServiceFailoverPolicyResult']:
        return pulumi.get(self, "failover_policies")

    @property
    @pulumi.getter
    def fingerprint(self) -> builtins.str:
        return pulumi.get(self, "fingerprint")

    @property
    @pulumi.getter(name="generatedId")
    def generated_id(self) -> builtins.int:
        return pulumi.get(self, "generated_id")

    @property
    @pulumi.getter(name="healthChecks")
    def health_checks(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "health_checks")

    @property
    @pulumi.getter
    def iaps(self) -> Sequence['outputs.GetRegionBackendServiceIapResult']:
        return pulumi.get(self, "iaps")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipAddressSelectionPolicy")
    def ip_address_selection_policy(self) -> builtins.str:
        return pulumi.get(self, "ip_address_selection_policy")

    @property
    @pulumi.getter(name="loadBalancingScheme")
    def load_balancing_scheme(self) -> builtins.str:
        return pulumi.get(self, "load_balancing_scheme")

    @property
    @pulumi.getter(name="localityLbPolicy")
    def locality_lb_policy(self) -> builtins.str:
        return pulumi.get(self, "locality_lb_policy")

    @property
    @pulumi.getter(name="logConfigs")
    def log_configs(self) -> Sequence['outputs.GetRegionBackendServiceLogConfigResult']:
        return pulumi.get(self, "log_configs")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def network(self) -> builtins.str:
        return pulumi.get(self, "network")

    @property
    @pulumi.getter(name="outlierDetections")
    def outlier_detections(self) -> Sequence['outputs.GetRegionBackendServiceOutlierDetectionResult']:
        return pulumi.get(self, "outlier_detections")

    @property
    @pulumi.getter(name="portName")
    def port_name(self) -> builtins.str:
        return pulumi.get(self, "port_name")

    @property
    @pulumi.getter
    def project(self) -> Optional[builtins.str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def protocol(self) -> builtins.str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def region(self) -> Optional[builtins.str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="securityPolicy")
    def security_policy(self) -> builtins.str:
        return pulumi.get(self, "security_policy")

    @property
    @pulumi.getter(name="selfLink")
    def self_link(self) -> builtins.str:
        return pulumi.get(self, "self_link")

    @property
    @pulumi.getter(name="sessionAffinity")
    def session_affinity(self) -> builtins.str:
        return pulumi.get(self, "session_affinity")

    @property
    @pulumi.getter(name="strongSessionAffinityCookies")
    def strong_session_affinity_cookies(self) -> Sequence['outputs.GetRegionBackendServiceStrongSessionAffinityCookyResult']:
        return pulumi.get(self, "strong_session_affinity_cookies")

    @property
    @pulumi.getter
    def subsettings(self) -> Sequence['outputs.GetRegionBackendServiceSubsettingResult']:
        return pulumi.get(self, "subsettings")

    @property
    @pulumi.getter(name="timeoutSec")
    def timeout_sec(self) -> builtins.int:
        return pulumi.get(self, "timeout_sec")


class AwaitableGetRegionBackendServiceResult(GetRegionBackendServiceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRegionBackendServiceResult(
            affinity_cookie_ttl_sec=self.affinity_cookie_ttl_sec,
            backends=self.backends,
            cdn_policies=self.cdn_policies,
            circuit_breakers=self.circuit_breakers,
            connection_draining_timeout_sec=self.connection_draining_timeout_sec,
            connection_tracking_policies=self.connection_tracking_policies,
            consistent_hashes=self.consistent_hashes,
            creation_timestamp=self.creation_timestamp,
            custom_metrics=self.custom_metrics,
            description=self.description,
            enable_cdn=self.enable_cdn,
            failover_policies=self.failover_policies,
            fingerprint=self.fingerprint,
            generated_id=self.generated_id,
            health_checks=self.health_checks,
            iaps=self.iaps,
            id=self.id,
            ip_address_selection_policy=self.ip_address_selection_policy,
            load_balancing_scheme=self.load_balancing_scheme,
            locality_lb_policy=self.locality_lb_policy,
            log_configs=self.log_configs,
            name=self.name,
            network=self.network,
            outlier_detections=self.outlier_detections,
            port_name=self.port_name,
            project=self.project,
            protocol=self.protocol,
            region=self.region,
            security_policy=self.security_policy,
            self_link=self.self_link,
            session_affinity=self.session_affinity,
            strong_session_affinity_cookies=self.strong_session_affinity_cookies,
            subsettings=self.subsettings,
            timeout_sec=self.timeout_sec)


def get_region_backend_service(name: Optional[builtins.str] = None,
                               project: Optional[builtins.str] = None,
                               region: Optional[builtins.str] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRegionBackendServiceResult:
    """
    Get information about a Regional Backend Service. For more information see
    [the official documentation](https://cloud.google.com/compute/docs/load-balancing/internal/backend-service) and
    [API](https://cloud.google.com/compute/docs/reference/rest/beta/regionBackendServices).

    ## Example Usage

    ```python
    import pulumi
    import pulumi_gcp as gcp

    my_backend = gcp.compute.get_region_backend_service(name="my-backend-service",
        region="us-central1")
    ```


    :param builtins.str name: The name of the regional backend service.
    :param builtins.str project: The ID of the project in which the resource belongs. If it
           is not provided, the provider project is used.
    :param builtins.str region: The region where the backend service resides.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['project'] = project
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('gcp:compute/getRegionBackendService:getRegionBackendService', __args__, opts=opts, typ=GetRegionBackendServiceResult).value

    return AwaitableGetRegionBackendServiceResult(
        affinity_cookie_ttl_sec=pulumi.get(__ret__, 'affinity_cookie_ttl_sec'),
        backends=pulumi.get(__ret__, 'backends'),
        cdn_policies=pulumi.get(__ret__, 'cdn_policies'),
        circuit_breakers=pulumi.get(__ret__, 'circuit_breakers'),
        connection_draining_timeout_sec=pulumi.get(__ret__, 'connection_draining_timeout_sec'),
        connection_tracking_policies=pulumi.get(__ret__, 'connection_tracking_policies'),
        consistent_hashes=pulumi.get(__ret__, 'consistent_hashes'),
        creation_timestamp=pulumi.get(__ret__, 'creation_timestamp'),
        custom_metrics=pulumi.get(__ret__, 'custom_metrics'),
        description=pulumi.get(__ret__, 'description'),
        enable_cdn=pulumi.get(__ret__, 'enable_cdn'),
        failover_policies=pulumi.get(__ret__, 'failover_policies'),
        fingerprint=pulumi.get(__ret__, 'fingerprint'),
        generated_id=pulumi.get(__ret__, 'generated_id'),
        health_checks=pulumi.get(__ret__, 'health_checks'),
        iaps=pulumi.get(__ret__, 'iaps'),
        id=pulumi.get(__ret__, 'id'),
        ip_address_selection_policy=pulumi.get(__ret__, 'ip_address_selection_policy'),
        load_balancing_scheme=pulumi.get(__ret__, 'load_balancing_scheme'),
        locality_lb_policy=pulumi.get(__ret__, 'locality_lb_policy'),
        log_configs=pulumi.get(__ret__, 'log_configs'),
        name=pulumi.get(__ret__, 'name'),
        network=pulumi.get(__ret__, 'network'),
        outlier_detections=pulumi.get(__ret__, 'outlier_detections'),
        port_name=pulumi.get(__ret__, 'port_name'),
        project=pulumi.get(__ret__, 'project'),
        protocol=pulumi.get(__ret__, 'protocol'),
        region=pulumi.get(__ret__, 'region'),
        security_policy=pulumi.get(__ret__, 'security_policy'),
        self_link=pulumi.get(__ret__, 'self_link'),
        session_affinity=pulumi.get(__ret__, 'session_affinity'),
        strong_session_affinity_cookies=pulumi.get(__ret__, 'strong_session_affinity_cookies'),
        subsettings=pulumi.get(__ret__, 'subsettings'),
        timeout_sec=pulumi.get(__ret__, 'timeout_sec'))
def get_region_backend_service_output(name: Optional[pulumi.Input[builtins.str]] = None,
                                      project: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                                      region: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetRegionBackendServiceResult]:
    """
    Get information about a Regional Backend Service. For more information see
    [the official documentation](https://cloud.google.com/compute/docs/load-balancing/internal/backend-service) and
    [API](https://cloud.google.com/compute/docs/reference/rest/beta/regionBackendServices).

    ## Example Usage

    ```python
    import pulumi
    import pulumi_gcp as gcp

    my_backend = gcp.compute.get_region_backend_service(name="my-backend-service",
        region="us-central1")
    ```


    :param builtins.str name: The name of the regional backend service.
    :param builtins.str project: The ID of the project in which the resource belongs. If it
           is not provided, the provider project is used.
    :param builtins.str region: The region where the backend service resides.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['project'] = project
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('gcp:compute/getRegionBackendService:getRegionBackendService', __args__, opts=opts, typ=GetRegionBackendServiceResult)
    return __ret__.apply(lambda __response__: GetRegionBackendServiceResult(
        affinity_cookie_ttl_sec=pulumi.get(__response__, 'affinity_cookie_ttl_sec'),
        backends=pulumi.get(__response__, 'backends'),
        cdn_policies=pulumi.get(__response__, 'cdn_policies'),
        circuit_breakers=pulumi.get(__response__, 'circuit_breakers'),
        connection_draining_timeout_sec=pulumi.get(__response__, 'connection_draining_timeout_sec'),
        connection_tracking_policies=pulumi.get(__response__, 'connection_tracking_policies'),
        consistent_hashes=pulumi.get(__response__, 'consistent_hashes'),
        creation_timestamp=pulumi.get(__response__, 'creation_timestamp'),
        custom_metrics=pulumi.get(__response__, 'custom_metrics'),
        description=pulumi.get(__response__, 'description'),
        enable_cdn=pulumi.get(__response__, 'enable_cdn'),
        failover_policies=pulumi.get(__response__, 'failover_policies'),
        fingerprint=pulumi.get(__response__, 'fingerprint'),
        generated_id=pulumi.get(__response__, 'generated_id'),
        health_checks=pulumi.get(__response__, 'health_checks'),
        iaps=pulumi.get(__response__, 'iaps'),
        id=pulumi.get(__response__, 'id'),
        ip_address_selection_policy=pulumi.get(__response__, 'ip_address_selection_policy'),
        load_balancing_scheme=pulumi.get(__response__, 'load_balancing_scheme'),
        locality_lb_policy=pulumi.get(__response__, 'locality_lb_policy'),
        log_configs=pulumi.get(__response__, 'log_configs'),
        name=pulumi.get(__response__, 'name'),
        network=pulumi.get(__response__, 'network'),
        outlier_detections=pulumi.get(__response__, 'outlier_detections'),
        port_name=pulumi.get(__response__, 'port_name'),
        project=pulumi.get(__response__, 'project'),
        protocol=pulumi.get(__response__, 'protocol'),
        region=pulumi.get(__response__, 'region'),
        security_policy=pulumi.get(__response__, 'security_policy'),
        self_link=pulumi.get(__response__, 'self_link'),
        session_affinity=pulumi.get(__response__, 'session_affinity'),
        strong_session_affinity_cookies=pulumi.get(__response__, 'strong_session_affinity_cookies'),
        subsettings=pulumi.get(__response__, 'subsettings'),
        timeout_sec=pulumi.get(__response__, 'timeout_sec')))
