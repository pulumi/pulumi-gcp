# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities

class AttachedDisk(pulumi.CustomResource):
    """
    Persistent disks can be attached to a compute instance using [the `attached_disk`
    section within the compute instance configuration](https://www.terraform.io/docs/providers/google/r/compute_instance.html#attached_disk).
    However there may be situations where managing the attached disks via the compute
    instance config isn't preferable or possible, such as attaching dynamic
    numbers of disks using the `count` variable.
    
    
    To get more information about attaching disks, see:
    
    * [API documentation](https://cloud.google.com/compute/docs/reference/rest/v1/instances/attachDisk)
    * [Resource: google_compute_disk](https://www.terraform.io/docs/providers/google/r/compute_disk.html)
    * How-to Guides
        * [Adding a persistent disk](https://cloud.google.com/compute/docs/disks/add-persistent-disk)
    
    """
    def __init__(__self__, __name__, __opts__=None, device_name=None, disk=None, instance=None, mode=None, project=None, zone=None):
        """Create a AttachedDisk resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if device_name and not isinstance(device_name, basestring):
            raise TypeError('Expected property device_name to be a basestring')
        __self__.device_name = device_name
        __props__['deviceName'] = device_name

        if not disk:
            raise TypeError('Missing required property disk')
        elif not isinstance(disk, basestring):
            raise TypeError('Expected property disk to be a basestring')
        __self__.disk = disk
        __props__['disk'] = disk

        if not instance:
            raise TypeError('Missing required property instance')
        elif not isinstance(instance, basestring):
            raise TypeError('Expected property instance to be a basestring')
        __self__.instance = instance
        __props__['instance'] = instance

        if mode and not isinstance(mode, basestring):
            raise TypeError('Expected property mode to be a basestring')
        __self__.mode = mode
        __props__['mode'] = mode

        if project and not isinstance(project, basestring):
            raise TypeError('Expected property project to be a basestring')
        __self__.project = project
        __props__['project'] = project

        if zone and not isinstance(zone, basestring):
            raise TypeError('Expected property zone to be a basestring')
        __self__.zone = zone
        __props__['zone'] = zone

        super(AttachedDisk, __self__).__init__(
            'gcp:compute/attachedDisk:AttachedDisk',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'deviceName' in outs:
            self.device_name = outs['deviceName']
        if 'disk' in outs:
            self.disk = outs['disk']
        if 'instance' in outs:
            self.instance = outs['instance']
        if 'mode' in outs:
            self.mode = outs['mode']
        if 'project' in outs:
            self.project = outs['project']
        if 'zone' in outs:
            self.zone = outs['zone']
