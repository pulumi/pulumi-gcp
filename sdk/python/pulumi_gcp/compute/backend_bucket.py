# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities, tables

class BackendBucket(pulumi.CustomResource):
    """
    #     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
    #
    # ----------------------------------------------------------------------------
    #
    #     This file is automatically generated by Magic Modules and manual
    #     changes will be clobbered when the file is regenerated.
    #
    #     Please read more about how to change this file in
    #     .github/CONTRIBUTING.md.
    #
    # ----------------------------------------------------------------------------
    layout: "google"
    page_title: "Google: google_compute_backend_bucket"
    sidebar_current: "docs-google-compute-backend-bucket"
    description: |-
      Backend buckets allow you to use Google Cloud Storage buckets with HTTP(S)
      load balancing.
    ---
    
    # google\_compute\_backend\_bucket
    
    Backend buckets allow you to use Google Cloud Storage buckets with HTTP(S)
    load balancing.
    
    An HTTP(S) load balancer can direct traffic to specified URLs to a
    backend bucket rather than a backend service. It can send requests for
    static content to a Cloud Storage bucket and requests for dynamic content
    a virtual machine instance.
    
    
    To get more information about BackendBucket, see:
    
    * [API documentation](https://cloud.google.com/compute/docs/reference/latest/backendBuckets)
    * How-to Guides
        * [Using a Cloud Storage bucket as a load balancer backend](https://cloud.google.com/compute/docs/load-balancing/http/backend-bucket)
    """
    def __init__(__self__, __name__, __opts__=None, bucket_name=None, description=None, enable_cdn=None, name=None, project=None):
        """Create a BackendBucket resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, str):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if not bucket_name:
            raise TypeError('Missing required property bucket_name')
        __props__['bucket_name'] = bucket_name

        __props__['description'] = description

        __props__['enable_cdn'] = enable_cdn

        __props__['name'] = name

        __props__['project'] = project

        __props__['creation_timestamp'] = None
        __props__['self_link'] = None

        super(BackendBucket, __self__).__init__(
            'gcp:compute/backendBucket:BackendBucket',
            __name__,
            __props__,
            __opts__)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

