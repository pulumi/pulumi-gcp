# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime

class GetSubnetworkResult(object):
    """
    A collection of values returned by getSubnetwork.
    """
    def __init__(__self__, description=None, gateway_address=None, ip_cidr_range=None, network=None, private_ip_google_access=None, project=None, region=None, secondary_ip_ranges=None, self_link=None):
        if not description:
            raise TypeError('Missing required argument description')
        elif not isinstance(description, basestring):
            raise TypeError('Expected argument description to be a basestring')
        __self__.description = description
        """
        Description of this subnetwork.
        """
        if not gateway_address:
            raise TypeError('Missing required argument gateway_address')
        elif not isinstance(gateway_address, basestring):
            raise TypeError('Expected argument gateway_address to be a basestring')
        __self__.gateway_address = gateway_address
        """
        The IP address of the gateway.
        """
        if not ip_cidr_range:
            raise TypeError('Missing required argument ip_cidr_range')
        elif not isinstance(ip_cidr_range, basestring):
            raise TypeError('Expected argument ip_cidr_range to be a basestring')
        __self__.ip_cidr_range = ip_cidr_range
        """
        The range of IP addresses belonging to this subnetwork
        secondary range.
        """
        if not network:
            raise TypeError('Missing required argument network')
        elif not isinstance(network, basestring):
            raise TypeError('Expected argument network to be a basestring')
        __self__.network = network
        """
        The network name or resource link to the parent
        network of this subnetwork.
        """
        if not private_ip_google_access:
            raise TypeError('Missing required argument private_ip_google_access')
        elif not isinstance(private_ip_google_access, bool):
            raise TypeError('Expected argument private_ip_google_access to be a bool')
        __self__.private_ip_google_access = private_ip_google_access
        """
        Whether the VMs in this subnet
        can access Google services without assigned external IP
        addresses.
        """
        if not project:
            raise TypeError('Missing required argument project')
        elif not isinstance(project, basestring):
            raise TypeError('Expected argument project to be a basestring')
        __self__.project = project
        if not region:
            raise TypeError('Missing required argument region')
        elif not isinstance(region, basestring):
            raise TypeError('Expected argument region to be a basestring')
        __self__.region = region
        if not secondary_ip_ranges:
            raise TypeError('Missing required argument secondary_ip_ranges')
        elif not isinstance(secondary_ip_ranges, list):
            raise TypeError('Expected argument secondary_ip_ranges to be a list')
        __self__.secondary_ip_ranges = secondary_ip_ranges
        """
        An array of configurations for secondary IP ranges for
        VM instances contained in this subnetwork. Structure is documented below.
        """
        if not self_link:
            raise TypeError('Missing required argument self_link')
        elif not isinstance(self_link, basestring):
            raise TypeError('Expected argument self_link to be a basestring')
        __self__.self_link = self_link
        """
        The URI of the created resource.
        """

def get_subnetwork(name=None, project=None, region=None):
    """
    Get a subnetwork within GCE from its name and region.
    """
    __args__ = dict()

    __args__['name'] = name
    __args__['project'] = project
    __args__['region'] = region
    __ret__ = pulumi.runtime.invoke('gcp:compute/getSubnetwork:getSubnetwork', __args__)

    return GetSubnetworkResult(
        description=__ret__['description'],
        gateway_address=__ret__['gatewayAddress'],
        ip_cidr_range=__ret__['ipCidrRange'],
        network=__ret__['network'],
        private_ip_google_access=__ret__['privateIpGoogleAccess'],
        project=__ret__['project'],
        region=__ret__['region'],
        secondary_ip_ranges=__ret__['secondaryIpRanges'],
        self_link=__ret__['selfLink'])
