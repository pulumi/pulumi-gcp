# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetMachineTypesResult',
    'AwaitableGetMachineTypesResult',
    'get_machine_types',
    'get_machine_types_output',
]

@pulumi.output_type
class GetMachineTypesResult:
    """
    A collection of values returned by getMachineTypes.
    """
    def __init__(__self__, filter=None, id=None, machine_types=None, project=None, zone=None):
        if filter and not isinstance(filter, str):
            raise TypeError("Expected argument 'filter' to be a str")
        pulumi.set(__self__, "filter", filter)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if machine_types and not isinstance(machine_types, list):
            raise TypeError("Expected argument 'machine_types' to be a list")
        pulumi.set(__self__, "machine_types", machine_types)
        if project and not isinstance(project, str):
            raise TypeError("Expected argument 'project' to be a str")
        pulumi.set(__self__, "project", project)
        if zone and not isinstance(zone, str):
            raise TypeError("Expected argument 'zone' to be a str")
        pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter
    def filter(self) -> Optional[str]:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="machineTypes")
    def machine_types(self) -> Sequence['outputs.GetMachineTypesMachineTypeResult']:
        """
        The list of machine types matching the provided filter. Structure is documented below.
        """
        return pulumi.get(self, "machine_types")

    @property
    @pulumi.getter
    def project(self) -> str:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def zone(self) -> str:
        return pulumi.get(self, "zone")


class AwaitableGetMachineTypesResult(GetMachineTypesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMachineTypesResult(
            filter=self.filter,
            id=self.id,
            machine_types=self.machine_types,
            project=self.project,
            zone=self.zone)


def get_machine_types(filter: Optional[str] = None,
                      project: Optional[str] = None,
                      zone: Optional[str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMachineTypesResult:
    """
    Provides access to available Google Compute machine types in a zone for a given project.
    See more about [machine type availability](https://cloud.google.com/compute/docs/regions-zones#available) in the upstream docs.

    To get more information about machine types, see:

    * [API Documentation](https://cloud.google.com/compute/docs/reference/rest/v1/machineTypes/list)
    * [Comparison Guide](https://cloud.google.com/compute/docs/machine-resource)

    ## Example Usage


    :param str filter: A filter expression that filters machine types listed in the response.
    :param str project: Project from which to list available zones. Defaults to project declared in the provider.
    :param str zone: Zone from which to list machine types.
    """
    __args__ = dict()
    __args__['filter'] = filter
    __args__['project'] = project
    __args__['zone'] = zone
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('gcp:compute/getMachineTypes:getMachineTypes', __args__, opts=opts, typ=GetMachineTypesResult).value

    return AwaitableGetMachineTypesResult(
        filter=pulumi.get(__ret__, 'filter'),
        id=pulumi.get(__ret__, 'id'),
        machine_types=pulumi.get(__ret__, 'machine_types'),
        project=pulumi.get(__ret__, 'project'),
        zone=pulumi.get(__ret__, 'zone'))


@_utilities.lift_output_func(get_machine_types)
def get_machine_types_output(filter: Optional[pulumi.Input[Optional[str]]] = None,
                             project: Optional[pulumi.Input[Optional[str]]] = None,
                             zone: Optional[pulumi.Input[Optional[str]]] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetMachineTypesResult]:
    """
    Provides access to available Google Compute machine types in a zone for a given project.
    See more about [machine type availability](https://cloud.google.com/compute/docs/regions-zones#available) in the upstream docs.

    To get more information about machine types, see:

    * [API Documentation](https://cloud.google.com/compute/docs/reference/rest/v1/machineTypes/list)
    * [Comparison Guide](https://cloud.google.com/compute/docs/machine-resource)

    ## Example Usage


    :param str filter: A filter expression that filters machine types listed in the response.
    :param str project: Project from which to list available zones. Defaults to project declared in the provider.
    :param str zone: Zone from which to list machine types.
    """
    ...
