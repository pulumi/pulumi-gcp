# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetRegionDiskResult',
    'AwaitableGetRegionDiskResult',
    'get_region_disk',
    'get_region_disk_output',
]

@pulumi.output_type
class GetRegionDiskResult:
    """
    A collection of values returned by getRegionDisk.
    """
    def __init__(__self__, async_primary_disks=None, creation_timestamp=None, description=None, disk_encryption_keys=None, effective_labels=None, guest_os_features=None, id=None, interface=None, label_fingerprint=None, labels=None, last_attach_timestamp=None, last_detach_timestamp=None, licenses=None, name=None, physical_block_size_bytes=None, project=None, pulumi_labels=None, region=None, replica_zones=None, self_link=None, size=None, snapshot=None, source_disk=None, source_disk_id=None, source_snapshot_encryption_keys=None, source_snapshot_id=None, type=None, users=None):
        if async_primary_disks and not isinstance(async_primary_disks, list):
            raise TypeError("Expected argument 'async_primary_disks' to be a list")
        pulumi.set(__self__, "async_primary_disks", async_primary_disks)
        if creation_timestamp and not isinstance(creation_timestamp, str):
            raise TypeError("Expected argument 'creation_timestamp' to be a str")
        pulumi.set(__self__, "creation_timestamp", creation_timestamp)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if disk_encryption_keys and not isinstance(disk_encryption_keys, list):
            raise TypeError("Expected argument 'disk_encryption_keys' to be a list")
        pulumi.set(__self__, "disk_encryption_keys", disk_encryption_keys)
        if effective_labels and not isinstance(effective_labels, dict):
            raise TypeError("Expected argument 'effective_labels' to be a dict")
        pulumi.set(__self__, "effective_labels", effective_labels)
        if guest_os_features and not isinstance(guest_os_features, list):
            raise TypeError("Expected argument 'guest_os_features' to be a list")
        pulumi.set(__self__, "guest_os_features", guest_os_features)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if interface and not isinstance(interface, str):
            raise TypeError("Expected argument 'interface' to be a str")
        pulumi.set(__self__, "interface", interface)
        if label_fingerprint and not isinstance(label_fingerprint, str):
            raise TypeError("Expected argument 'label_fingerprint' to be a str")
        pulumi.set(__self__, "label_fingerprint", label_fingerprint)
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        pulumi.set(__self__, "labels", labels)
        if last_attach_timestamp and not isinstance(last_attach_timestamp, str):
            raise TypeError("Expected argument 'last_attach_timestamp' to be a str")
        pulumi.set(__self__, "last_attach_timestamp", last_attach_timestamp)
        if last_detach_timestamp and not isinstance(last_detach_timestamp, str):
            raise TypeError("Expected argument 'last_detach_timestamp' to be a str")
        pulumi.set(__self__, "last_detach_timestamp", last_detach_timestamp)
        if licenses and not isinstance(licenses, list):
            raise TypeError("Expected argument 'licenses' to be a list")
        pulumi.set(__self__, "licenses", licenses)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if physical_block_size_bytes and not isinstance(physical_block_size_bytes, int):
            raise TypeError("Expected argument 'physical_block_size_bytes' to be a int")
        pulumi.set(__self__, "physical_block_size_bytes", physical_block_size_bytes)
        if project and not isinstance(project, str):
            raise TypeError("Expected argument 'project' to be a str")
        pulumi.set(__self__, "project", project)
        if pulumi_labels and not isinstance(pulumi_labels, dict):
            raise TypeError("Expected argument 'pulumi_labels' to be a dict")
        pulumi.set(__self__, "pulumi_labels", pulumi_labels)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if replica_zones and not isinstance(replica_zones, list):
            raise TypeError("Expected argument 'replica_zones' to be a list")
        pulumi.set(__self__, "replica_zones", replica_zones)
        if self_link and not isinstance(self_link, str):
            raise TypeError("Expected argument 'self_link' to be a str")
        pulumi.set(__self__, "self_link", self_link)
        if size and not isinstance(size, int):
            raise TypeError("Expected argument 'size' to be a int")
        pulumi.set(__self__, "size", size)
        if snapshot and not isinstance(snapshot, str):
            raise TypeError("Expected argument 'snapshot' to be a str")
        pulumi.set(__self__, "snapshot", snapshot)
        if source_disk and not isinstance(source_disk, str):
            raise TypeError("Expected argument 'source_disk' to be a str")
        pulumi.set(__self__, "source_disk", source_disk)
        if source_disk_id and not isinstance(source_disk_id, str):
            raise TypeError("Expected argument 'source_disk_id' to be a str")
        pulumi.set(__self__, "source_disk_id", source_disk_id)
        if source_snapshot_encryption_keys and not isinstance(source_snapshot_encryption_keys, list):
            raise TypeError("Expected argument 'source_snapshot_encryption_keys' to be a list")
        pulumi.set(__self__, "source_snapshot_encryption_keys", source_snapshot_encryption_keys)
        if source_snapshot_id and not isinstance(source_snapshot_id, str):
            raise TypeError("Expected argument 'source_snapshot_id' to be a str")
        pulumi.set(__self__, "source_snapshot_id", source_snapshot_id)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if users and not isinstance(users, list):
            raise TypeError("Expected argument 'users' to be a list")
        pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="asyncPrimaryDisks")
    def async_primary_disks(self) -> Sequence['outputs.GetRegionDiskAsyncPrimaryDiskResult']:
        return pulumi.get(self, "async_primary_disks")

    @property
    @pulumi.getter(name="creationTimestamp")
    def creation_timestamp(self) -> str:
        return pulumi.get(self, "creation_timestamp")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="diskEncryptionKeys")
    def disk_encryption_keys(self) -> Sequence['outputs.GetRegionDiskDiskEncryptionKeyResult']:
        return pulumi.get(self, "disk_encryption_keys")

    @property
    @pulumi.getter(name="effectiveLabels")
    def effective_labels(self) -> Mapping[str, str]:
        return pulumi.get(self, "effective_labels")

    @property
    @pulumi.getter(name="guestOsFeatures")
    def guest_os_features(self) -> Sequence['outputs.GetRegionDiskGuestOsFeatureResult']:
        return pulumi.get(self, "guest_os_features")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def interface(self) -> str:
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="labelFingerprint")
    def label_fingerprint(self) -> str:
        return pulumi.get(self, "label_fingerprint")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="lastAttachTimestamp")
    def last_attach_timestamp(self) -> str:
        return pulumi.get(self, "last_attach_timestamp")

    @property
    @pulumi.getter(name="lastDetachTimestamp")
    def last_detach_timestamp(self) -> str:
        return pulumi.get(self, "last_detach_timestamp")

    @property
    @pulumi.getter
    def licenses(self) -> Sequence[str]:
        return pulumi.get(self, "licenses")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="physicalBlockSizeBytes")
    def physical_block_size_bytes(self) -> int:
        return pulumi.get(self, "physical_block_size_bytes")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="pulumiLabels")
    def pulumi_labels(self) -> Mapping[str, str]:
        return pulumi.get(self, "pulumi_labels")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="replicaZones")
    def replica_zones(self) -> Sequence[str]:
        return pulumi.get(self, "replica_zones")

    @property
    @pulumi.getter(name="selfLink")
    def self_link(self) -> str:
        return pulumi.get(self, "self_link")

    @property
    @pulumi.getter
    def size(self) -> int:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def snapshot(self) -> str:
        return pulumi.get(self, "snapshot")

    @property
    @pulumi.getter(name="sourceDisk")
    def source_disk(self) -> str:
        return pulumi.get(self, "source_disk")

    @property
    @pulumi.getter(name="sourceDiskId")
    def source_disk_id(self) -> str:
        return pulumi.get(self, "source_disk_id")

    @property
    @pulumi.getter(name="sourceSnapshotEncryptionKeys")
    def source_snapshot_encryption_keys(self) -> Sequence['outputs.GetRegionDiskSourceSnapshotEncryptionKeyResult']:
        return pulumi.get(self, "source_snapshot_encryption_keys")

    @property
    @pulumi.getter(name="sourceSnapshotId")
    def source_snapshot_id(self) -> str:
        return pulumi.get(self, "source_snapshot_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def users(self) -> Sequence[str]:
        return pulumi.get(self, "users")


class AwaitableGetRegionDiskResult(GetRegionDiskResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRegionDiskResult(
            async_primary_disks=self.async_primary_disks,
            creation_timestamp=self.creation_timestamp,
            description=self.description,
            disk_encryption_keys=self.disk_encryption_keys,
            effective_labels=self.effective_labels,
            guest_os_features=self.guest_os_features,
            id=self.id,
            interface=self.interface,
            label_fingerprint=self.label_fingerprint,
            labels=self.labels,
            last_attach_timestamp=self.last_attach_timestamp,
            last_detach_timestamp=self.last_detach_timestamp,
            licenses=self.licenses,
            name=self.name,
            physical_block_size_bytes=self.physical_block_size_bytes,
            project=self.project,
            pulumi_labels=self.pulumi_labels,
            region=self.region,
            replica_zones=self.replica_zones,
            self_link=self.self_link,
            size=self.size,
            snapshot=self.snapshot,
            source_disk=self.source_disk,
            source_disk_id=self.source_disk_id,
            source_snapshot_encryption_keys=self.source_snapshot_encryption_keys,
            source_snapshot_id=self.source_snapshot_id,
            type=self.type,
            users=self.users)


def get_region_disk(name: Optional[str] = None,
                    project: Optional[str] = None,
                    region: Optional[str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRegionDiskResult:
    """
    Get information about a Google Compute Regional Persistent disks.

    [the official documentation](https://cloud.google.com/compute/docs/disks) and its [API](https://cloud.google.com/compute/docs/reference/rest/v1/regionDisks).


    :param str name: The name of a specific disk.
           
           - - -
    :param str project: The ID of the project in which the resource belongs.
           If it is not provided, the provider project is used.
    :param str region: A reference to the region where the disk resides.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['project'] = project
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('gcp:compute/getRegionDisk:getRegionDisk', __args__, opts=opts, typ=GetRegionDiskResult).value

    return AwaitableGetRegionDiskResult(
        async_primary_disks=pulumi.get(__ret__, 'async_primary_disks'),
        creation_timestamp=pulumi.get(__ret__, 'creation_timestamp'),
        description=pulumi.get(__ret__, 'description'),
        disk_encryption_keys=pulumi.get(__ret__, 'disk_encryption_keys'),
        effective_labels=pulumi.get(__ret__, 'effective_labels'),
        guest_os_features=pulumi.get(__ret__, 'guest_os_features'),
        id=pulumi.get(__ret__, 'id'),
        interface=pulumi.get(__ret__, 'interface'),
        label_fingerprint=pulumi.get(__ret__, 'label_fingerprint'),
        labels=pulumi.get(__ret__, 'labels'),
        last_attach_timestamp=pulumi.get(__ret__, 'last_attach_timestamp'),
        last_detach_timestamp=pulumi.get(__ret__, 'last_detach_timestamp'),
        licenses=pulumi.get(__ret__, 'licenses'),
        name=pulumi.get(__ret__, 'name'),
        physical_block_size_bytes=pulumi.get(__ret__, 'physical_block_size_bytes'),
        project=pulumi.get(__ret__, 'project'),
        pulumi_labels=pulumi.get(__ret__, 'pulumi_labels'),
        region=pulumi.get(__ret__, 'region'),
        replica_zones=pulumi.get(__ret__, 'replica_zones'),
        self_link=pulumi.get(__ret__, 'self_link'),
        size=pulumi.get(__ret__, 'size'),
        snapshot=pulumi.get(__ret__, 'snapshot'),
        source_disk=pulumi.get(__ret__, 'source_disk'),
        source_disk_id=pulumi.get(__ret__, 'source_disk_id'),
        source_snapshot_encryption_keys=pulumi.get(__ret__, 'source_snapshot_encryption_keys'),
        source_snapshot_id=pulumi.get(__ret__, 'source_snapshot_id'),
        type=pulumi.get(__ret__, 'type'),
        users=pulumi.get(__ret__, 'users'))


@_utilities.lift_output_func(get_region_disk)
def get_region_disk_output(name: Optional[pulumi.Input[str]] = None,
                           project: Optional[pulumi.Input[Optional[str]]] = None,
                           region: Optional[pulumi.Input[Optional[str]]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetRegionDiskResult]:
    """
    Get information about a Google Compute Regional Persistent disks.

    [the official documentation](https://cloud.google.com/compute/docs/disks) and its [API](https://cloud.google.com/compute/docs/reference/rest/v1/regionDisks).


    :param str name: The name of a specific disk.
           
           - - -
    :param str project: The ID of the project in which the resource belongs.
           If it is not provided, the provider project is used.
    :param str region: A reference to the region where the disk resides.
    """
    ...
