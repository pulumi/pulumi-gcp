# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime

class HttpHealthCheck(pulumi.CustomResource):
    def __init__(__self__, __name__, __opts__=None, check_interval_sec=None, description=None, healthy_threshold=None, host=None, name=None, port=None, project=None, request_path=None, timeout_sec=None, unhealthy_threshold=None):
        """Create a HttpHealthCheck resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if check_interval_sec and not isinstance(check_interval_sec, int):
            raise TypeError('Expected property check_interval_sec to be a int')
        __self__.check_interval_sec = check_interval_sec
        __props__['checkIntervalSec'] = check_interval_sec

        if description and not isinstance(description, basestring):
            raise TypeError('Expected property description to be a basestring')
        __self__.description = description
        __props__['description'] = description

        if healthy_threshold and not isinstance(healthy_threshold, int):
            raise TypeError('Expected property healthy_threshold to be a int')
        __self__.healthy_threshold = healthy_threshold
        __props__['healthyThreshold'] = healthy_threshold

        if host and not isinstance(host, basestring):
            raise TypeError('Expected property host to be a basestring')
        __self__.host = host
        __props__['host'] = host

        if name and not isinstance(name, basestring):
            raise TypeError('Expected property name to be a basestring')
        __self__.name = name
        __props__['name'] = name

        if port and not isinstance(port, int):
            raise TypeError('Expected property port to be a int')
        __self__.port = port
        __props__['port'] = port

        if project and not isinstance(project, basestring):
            raise TypeError('Expected property project to be a basestring')
        __self__.project = project
        """
        The ID of the project in which the resource belongs.
        If it is not provided, the provider project is used.
        """
        __props__['project'] = project

        if request_path and not isinstance(request_path, basestring):
            raise TypeError('Expected property request_path to be a basestring')
        __self__.request_path = request_path
        __props__['requestPath'] = request_path

        if timeout_sec and not isinstance(timeout_sec, int):
            raise TypeError('Expected property timeout_sec to be a int')
        __self__.timeout_sec = timeout_sec
        __props__['timeoutSec'] = timeout_sec

        if unhealthy_threshold and not isinstance(unhealthy_threshold, int):
            raise TypeError('Expected property unhealthy_threshold to be a int')
        __self__.unhealthy_threshold = unhealthy_threshold
        __props__['unhealthyThreshold'] = unhealthy_threshold

        __self__.creation_timestamp = pulumi.runtime.UNKNOWN
        __self__.self_link = pulumi.runtime.UNKNOWN
        """
        The URI of the created resource.
        """

        super(HttpHealthCheck, __self__).__init__(
            'gcp:compute/httpHealthCheck:HttpHealthCheck',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'checkIntervalSec' in outs:
            self.check_interval_sec = outs['checkIntervalSec']
        if 'creationTimestamp' in outs:
            self.creation_timestamp = outs['creationTimestamp']
        if 'description' in outs:
            self.description = outs['description']
        if 'healthyThreshold' in outs:
            self.healthy_threshold = outs['healthyThreshold']
        if 'host' in outs:
            self.host = outs['host']
        if 'name' in outs:
            self.name = outs['name']
        if 'port' in outs:
            self.port = outs['port']
        if 'project' in outs:
            self.project = outs['project']
        if 'requestPath' in outs:
            self.request_path = outs['requestPath']
        if 'selfLink' in outs:
            self.self_link = outs['selfLink']
        if 'timeoutSec' in outs:
            self.timeout_sec = outs['timeoutSec']
        if 'unhealthyThreshold' in outs:
            self.unhealthy_threshold = outs['unhealthyThreshold']
