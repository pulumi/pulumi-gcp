# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from .. import utilities, tables

class RegionBackendService(pulumi.CustomResource):
    backends: pulumi.Output[list]
    connection_draining_timeout_sec: pulumi.Output[float]
    description: pulumi.Output[str]
    failover_policy: pulumi.Output[dict]
    fingerprint: pulumi.Output[str]
    health_checks: pulumi.Output[str]
    load_balancing_scheme: pulumi.Output[str]
    name: pulumi.Output[str]
    project: pulumi.Output[str]
    """
    The ID of the project in which the resource belongs.
    If it is not provided, the provider project is used.
    """
    protocol: pulumi.Output[str]
    region: pulumi.Output[str]
    self_link: pulumi.Output[str]
    """
    The URI of the created resource.
    """
    session_affinity: pulumi.Output[str]
    timeout_sec: pulumi.Output[float]
    def __init__(__self__, resource_name, opts=None, backends=None, connection_draining_timeout_sec=None, description=None, failover_policy=None, health_checks=None, load_balancing_scheme=None, name=None, project=None, protocol=None, region=None, session_affinity=None, timeout_sec=None, __name__=None, __opts__=None):
        """
        A Region Backend Service defines a regionally-scoped group of virtual
        machines that will serve traffic for load balancing.
        
        Region backend services can only be used when using internal load balancing.
        For external load balancing, use a global backend service instead.
        
        
        To get more information about RegionBackendService, see:
        
        * [API documentation](https://cloud.google.com/compute/docs/reference/latest/regionBackendServices)
        * How-to Guides
            * [Internal TCP/UDP Load Balancing](https://cloud.google.com/compute/docs/load-balancing/internal/)
        
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] project: The ID of the project in which the resource belongs.
               If it is not provided, the provider project is used.

        > This content is derived from https://github.com/terraform-providers/terraform-provider-google/blob/master/website/docs/r/compute_region_backend_service.html.markdown.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts and not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        __props__['backends'] = backends
        __props__['connection_draining_timeout_sec'] = connection_draining_timeout_sec
        __props__['description'] = description
        __props__['failover_policy'] = failover_policy
        if health_checks is None:
            raise TypeError("Missing required property 'health_checks'")
        __props__['health_checks'] = health_checks
        __props__['load_balancing_scheme'] = load_balancing_scheme
        __props__['name'] = name
        __props__['project'] = project
        __props__['protocol'] = protocol
        __props__['region'] = region
        __props__['session_affinity'] = session_affinity
        __props__['timeout_sec'] = timeout_sec
        __props__['fingerprint'] = None
        __props__['self_link'] = None

        if opts is None:
            opts = pulumi.ResourceOptions()
        if opts.version is None:
            opts.version = utilities.get_version()
        super(RegionBackendService, __self__).__init__(
            'gcp:compute/regionBackendService:RegionBackendService',
            resource_name,
            __props__,
            opts)

    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

