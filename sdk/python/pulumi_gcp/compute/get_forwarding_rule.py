# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime

class GetForwardingRuleResult(object):
    """
    A collection of values returned by getForwardingRule.
    """
    def __init__(__self__, backend_service=None, description=None, ip_address=None, ip_protocol=None, load_balancing_scheme=None, network=None, port_range=None, ports=None, project=None, region=None, self_link=None, subnetwork=None, target=None):
        if not backend_service:
            raise TypeError('Missing required argument backend_service')
        elif not isinstance(backend_service, basestring):
            raise TypeError('Expected argument backend_service to be a basestring')
        __self__.backend_service = backend_service
        """
        Backend service, if this forwarding rule has one.
        """
        if not description:
            raise TypeError('Missing required argument description')
        elif not isinstance(description, basestring):
            raise TypeError('Expected argument description to be a basestring')
        __self__.description = description
        """
        Description of this forwarding rule.
        """
        if not ip_address:
            raise TypeError('Missing required argument ip_address')
        elif not isinstance(ip_address, basestring):
            raise TypeError('Expected argument ip_address to be a basestring')
        __self__.ip_address = ip_address
        """
        IP address of this forwarding rule.
        """
        if not ip_protocol:
            raise TypeError('Missing required argument ip_protocol')
        elif not isinstance(ip_protocol, basestring):
            raise TypeError('Expected argument ip_protocol to be a basestring')
        __self__.ip_protocol = ip_protocol
        """
        IP protocol of this forwarding rule.
        """
        if not load_balancing_scheme:
            raise TypeError('Missing required argument load_balancing_scheme')
        elif not isinstance(load_balancing_scheme, basestring):
            raise TypeError('Expected argument load_balancing_scheme to be a basestring')
        __self__.load_balancing_scheme = load_balancing_scheme
        """
        Type of load balancing of this forwarding rule.
        """
        if not network:
            raise TypeError('Missing required argument network')
        elif not isinstance(network, basestring):
            raise TypeError('Expected argument network to be a basestring')
        __self__.network = network
        """
        Network of this forwarding rule.
        """
        if not port_range:
            raise TypeError('Missing required argument port_range')
        elif not isinstance(port_range, basestring):
            raise TypeError('Expected argument port_range to be a basestring')
        __self__.port_range = port_range
        """
        Port range, if this forwarding rule has one.
        """
        if not ports:
            raise TypeError('Missing required argument ports')
        elif not isinstance(ports, list):
            raise TypeError('Expected argument ports to be a list')
        __self__.ports = ports
        """
        List of ports to use for internal load balancing, if this forwarding rule has any.
        """
        if not project:
            raise TypeError('Missing required argument project')
        elif not isinstance(project, basestring):
            raise TypeError('Expected argument project to be a basestring')
        __self__.project = project
        if not region:
            raise TypeError('Missing required argument region')
        elif not isinstance(region, basestring):
            raise TypeError('Expected argument region to be a basestring')
        __self__.region = region
        """
        Region of this forwarding rule.
        """
        if not self_link:
            raise TypeError('Missing required argument self_link')
        elif not isinstance(self_link, basestring):
            raise TypeError('Expected argument self_link to be a basestring')
        __self__.self_link = self_link
        """
        The URI of the resource.
        """
        if not subnetwork:
            raise TypeError('Missing required argument subnetwork')
        elif not isinstance(subnetwork, basestring):
            raise TypeError('Expected argument subnetwork to be a basestring')
        __self__.subnetwork = subnetwork
        """
        Subnetwork of this forwarding rule.
        """
        if not target:
            raise TypeError('Missing required argument target')
        elif not isinstance(target, basestring):
            raise TypeError('Expected argument target to be a basestring')
        __self__.target = target
        """
        URL of the target pool, if this forwarding rule has one.
        """

def get_forwarding_rule(name=None, project=None, region=None):
    """
    Get a forwarding rule within GCE from its name.
    """
    __args__ = dict()

    __args__['name'] = name
    __args__['project'] = project
    __args__['region'] = region
    __ret__ = pulumi.runtime.invoke('gcp:compute/getForwardingRule:getForwardingRule', __args__)

    return GetForwardingRuleResult(
        backend_service=__ret__['backendService'],
        description=__ret__['description'],
        ip_address=__ret__['ipAddress'],
        ip_protocol=__ret__['ipProtocol'],
        load_balancing_scheme=__ret__['loadBalancingScheme'],
        network=__ret__['network'],
        port_range=__ret__['portRange'],
        ports=__ret__['ports'],
        project=__ret__['project'],
        region=__ret__['region'],
        self_link=__ret__['selfLink'],
        subnetwork=__ret__['subnetwork'],
        target=__ret__['target'])
