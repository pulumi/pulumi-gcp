# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'ApiHubInstanceConfig',
    'CurationEndpoint',
    'CurationEndpointApplicationIntegrationEndpointDetails',
    'CurationPluginInstanceAction',
]

@pulumi.output_type
class ApiHubInstanceConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cmekKeyName":
            suggest = "cmek_key_name"
        elif key == "disableSearch":
            suggest = "disable_search"
        elif key == "encryptionType":
            suggest = "encryption_type"
        elif key == "vertexLocation":
            suggest = "vertex_location"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiHubInstanceConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiHubInstanceConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiHubInstanceConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cmek_key_name: Optional[builtins.str] = None,
                 disable_search: Optional[builtins.bool] = None,
                 encryption_type: Optional[builtins.str] = None,
                 vertex_location: Optional[builtins.str] = None):
        """
        :param builtins.str cmek_key_name: Optional. The Customer Managed Encryption Key (CMEK) used for data encryption.
               The CMEK name should follow the format of
               `projects/([^/]+)/locations/([^/]+)/keyRings/([^/]+)/cryptoKeys/([^/]+)`,
               where the location must match the instance location.
               If the CMEK is not provided, a GMEK will be created for the instance.
        :param builtins.bool disable_search: Optional. If true, the search will be disabled for the instance. The default value
               is false.
        :param builtins.str encryption_type: Optional. Encryption type for the region. If the encryption type is CMEK, the
               cmek_key_name must be provided. If no encryption type is provided,
               GMEK will be used.
               Possible values:
               ENCRYPTION_TYPE_UNSPECIFIED
               GMEK
               CMEK
        :param builtins.str vertex_location: Optional. The name of the Vertex AI location where the data store is stored.
               
               - - -
        """
        if cmek_key_name is not None:
            pulumi.set(__self__, "cmek_key_name", cmek_key_name)
        if disable_search is not None:
            pulumi.set(__self__, "disable_search", disable_search)
        if encryption_type is not None:
            pulumi.set(__self__, "encryption_type", encryption_type)
        if vertex_location is not None:
            pulumi.set(__self__, "vertex_location", vertex_location)

    @property
    @pulumi.getter(name="cmekKeyName")
    def cmek_key_name(self) -> Optional[builtins.str]:
        """
        Optional. The Customer Managed Encryption Key (CMEK) used for data encryption.
        The CMEK name should follow the format of
        `projects/([^/]+)/locations/([^/]+)/keyRings/([^/]+)/cryptoKeys/([^/]+)`,
        where the location must match the instance location.
        If the CMEK is not provided, a GMEK will be created for the instance.
        """
        return pulumi.get(self, "cmek_key_name")

    @property
    @pulumi.getter(name="disableSearch")
    def disable_search(self) -> Optional[builtins.bool]:
        """
        Optional. If true, the search will be disabled for the instance. The default value
        is false.
        """
        return pulumi.get(self, "disable_search")

    @property
    @pulumi.getter(name="encryptionType")
    def encryption_type(self) -> Optional[builtins.str]:
        """
        Optional. Encryption type for the region. If the encryption type is CMEK, the
        cmek_key_name must be provided. If no encryption type is provided,
        GMEK will be used.
        Possible values:
        ENCRYPTION_TYPE_UNSPECIFIED
        GMEK
        CMEK
        """
        return pulumi.get(self, "encryption_type")

    @property
    @pulumi.getter(name="vertexLocation")
    def vertex_location(self) -> Optional[builtins.str]:
        """
        Optional. The name of the Vertex AI location where the data store is stored.

        - - -
        """
        return pulumi.get(self, "vertex_location")


@pulumi.output_type
class CurationEndpoint(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "applicationIntegrationEndpointDetails":
            suggest = "application_integration_endpoint_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CurationEndpoint. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CurationEndpoint.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CurationEndpoint.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 application_integration_endpoint_details: 'outputs.CurationEndpointApplicationIntegrationEndpointDetails'):
        """
        :param 'CurationEndpointApplicationIntegrationEndpointDetailsArgs' application_integration_endpoint_details: The details of the Application Integration endpoint to be triggered for
               curation.
               Structure is documented below.
        """
        pulumi.set(__self__, "application_integration_endpoint_details", application_integration_endpoint_details)

    @property
    @pulumi.getter(name="applicationIntegrationEndpointDetails")
    def application_integration_endpoint_details(self) -> 'outputs.CurationEndpointApplicationIntegrationEndpointDetails':
        """
        The details of the Application Integration endpoint to be triggered for
        curation.
        Structure is documented below.
        """
        return pulumi.get(self, "application_integration_endpoint_details")


@pulumi.output_type
class CurationEndpointApplicationIntegrationEndpointDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "triggerId":
            suggest = "trigger_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CurationEndpointApplicationIntegrationEndpointDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CurationEndpointApplicationIntegrationEndpointDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CurationEndpointApplicationIntegrationEndpointDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 trigger_id: builtins.str,
                 uri: builtins.str):
        """
        :param builtins.str trigger_id: The API trigger ID of the Application Integration workflow.
        :param builtins.str uri: The endpoint URI should be a valid REST URI for triggering an Application
               Integration.
               Format:
               `https://integrations.googleapis.com/v1/{name=projects/*/locations/*/integrations/*}:execute`
               or
               `https://{location}-integrations.googleapis.com/v1/{name=projects/*/locations/*/integrations/*}:execute`
               
               - - -
        """
        pulumi.set(__self__, "trigger_id", trigger_id)
        pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter(name="triggerId")
    def trigger_id(self) -> builtins.str:
        """
        The API trigger ID of the Application Integration workflow.
        """
        return pulumi.get(self, "trigger_id")

    @property
    @pulumi.getter
    def uri(self) -> builtins.str:
        """
        The endpoint URI should be a valid REST URI for triggering an Application
        Integration.
        Format:
        `https://integrations.googleapis.com/v1/{name=projects/*/locations/*/integrations/*}:execute`
        or
        `https://{location}-integrations.googleapis.com/v1/{name=projects/*/locations/*/integrations/*}:execute`

        - - -
        """
        return pulumi.get(self, "uri")


@pulumi.output_type
class CurationPluginInstanceAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionId":
            suggest = "action_id"
        elif key == "pluginInstance":
            suggest = "plugin_instance"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CurationPluginInstanceAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CurationPluginInstanceAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CurationPluginInstanceAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action_id: Optional[builtins.str] = None,
                 plugin_instance: Optional[builtins.str] = None):
        """
        :param builtins.str action_id: (Output)
               The action ID that is using the curation.
               This should map to one of the action IDs specified
               in action configs in the plugin.
        :param builtins.str plugin_instance: (Output)
               Plugin instance that is using the curation.
               Format is
               `projects/{project}/locations/{locati on}/plugins/{plugin}/instances/{instance}`
        """
        if action_id is not None:
            pulumi.set(__self__, "action_id", action_id)
        if plugin_instance is not None:
            pulumi.set(__self__, "plugin_instance", plugin_instance)

    @property
    @pulumi.getter(name="actionId")
    def action_id(self) -> Optional[builtins.str]:
        """
        (Output)
        The action ID that is using the curation.
        This should map to one of the action IDs specified
        in action configs in the plugin.
        """
        return pulumi.get(self, "action_id")

    @property
    @pulumi.getter(name="pluginInstance")
    def plugin_instance(self) -> Optional[builtins.str]:
        """
        (Output)
        Plugin instance that is using the curation.
        Format is
        `projects/{project}/locations/{locati on}/plugins/{plugin}/instances/{instance}`
        """
        return pulumi.get(self, "plugin_instance")


