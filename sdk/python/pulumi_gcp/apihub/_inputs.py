# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'ApiHubInstanceConfigArgs',
    'ApiHubInstanceConfigArgsDict',
    'CurationEndpointArgs',
    'CurationEndpointArgsDict',
    'CurationEndpointApplicationIntegrationEndpointDetailsArgs',
    'CurationEndpointApplicationIntegrationEndpointDetailsArgsDict',
    'CurationPluginInstanceActionArgs',
    'CurationPluginInstanceActionArgsDict',
]

MYPY = False

if not MYPY:
    class ApiHubInstanceConfigArgsDict(TypedDict):
        cmek_key_name: NotRequired[pulumi.Input[builtins.str]]
        """
        Optional. The Customer Managed Encryption Key (CMEK) used for data encryption.
        The CMEK name should follow the format of
        `projects/([^/]+)/locations/([^/]+)/keyRings/([^/]+)/cryptoKeys/([^/]+)`,
        where the location must match the instance location.
        If the CMEK is not provided, a GMEK will be created for the instance.
        """
        disable_search: NotRequired[pulumi.Input[builtins.bool]]
        """
        Optional. If true, the search will be disabled for the instance. The default value
        is false.
        """
        encryption_type: NotRequired[pulumi.Input[builtins.str]]
        """
        Optional. Encryption type for the region. If the encryption type is CMEK, the
        cmek_key_name must be provided. If no encryption type is provided,
        GMEK will be used.
        Possible values:
        ENCRYPTION_TYPE_UNSPECIFIED
        GMEK
        CMEK
        """
        vertex_location: NotRequired[pulumi.Input[builtins.str]]
        """
        Optional. The name of the Vertex AI location where the data store is stored.

        - - -
        """
elif False:
    ApiHubInstanceConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApiHubInstanceConfigArgs:
    def __init__(__self__, *,
                 cmek_key_name: Optional[pulumi.Input[builtins.str]] = None,
                 disable_search: Optional[pulumi.Input[builtins.bool]] = None,
                 encryption_type: Optional[pulumi.Input[builtins.str]] = None,
                 vertex_location: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] cmek_key_name: Optional. The Customer Managed Encryption Key (CMEK) used for data encryption.
               The CMEK name should follow the format of
               `projects/([^/]+)/locations/([^/]+)/keyRings/([^/]+)/cryptoKeys/([^/]+)`,
               where the location must match the instance location.
               If the CMEK is not provided, a GMEK will be created for the instance.
        :param pulumi.Input[builtins.bool] disable_search: Optional. If true, the search will be disabled for the instance. The default value
               is false.
        :param pulumi.Input[builtins.str] encryption_type: Optional. Encryption type for the region. If the encryption type is CMEK, the
               cmek_key_name must be provided. If no encryption type is provided,
               GMEK will be used.
               Possible values:
               ENCRYPTION_TYPE_UNSPECIFIED
               GMEK
               CMEK
        :param pulumi.Input[builtins.str] vertex_location: Optional. The name of the Vertex AI location where the data store is stored.
               
               - - -
        """
        if cmek_key_name is not None:
            pulumi.set(__self__, "cmek_key_name", cmek_key_name)
        if disable_search is not None:
            pulumi.set(__self__, "disable_search", disable_search)
        if encryption_type is not None:
            pulumi.set(__self__, "encryption_type", encryption_type)
        if vertex_location is not None:
            pulumi.set(__self__, "vertex_location", vertex_location)

    @property
    @pulumi.getter(name="cmekKeyName")
    def cmek_key_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Optional. The Customer Managed Encryption Key (CMEK) used for data encryption.
        The CMEK name should follow the format of
        `projects/([^/]+)/locations/([^/]+)/keyRings/([^/]+)/cryptoKeys/([^/]+)`,
        where the location must match the instance location.
        If the CMEK is not provided, a GMEK will be created for the instance.
        """
        return pulumi.get(self, "cmek_key_name")

    @cmek_key_name.setter
    def cmek_key_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "cmek_key_name", value)

    @property
    @pulumi.getter(name="disableSearch")
    def disable_search(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Optional. If true, the search will be disabled for the instance. The default value
        is false.
        """
        return pulumi.get(self, "disable_search")

    @disable_search.setter
    def disable_search(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "disable_search", value)

    @property
    @pulumi.getter(name="encryptionType")
    def encryption_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Optional. Encryption type for the region. If the encryption type is CMEK, the
        cmek_key_name must be provided. If no encryption type is provided,
        GMEK will be used.
        Possible values:
        ENCRYPTION_TYPE_UNSPECIFIED
        GMEK
        CMEK
        """
        return pulumi.get(self, "encryption_type")

    @encryption_type.setter
    def encryption_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "encryption_type", value)

    @property
    @pulumi.getter(name="vertexLocation")
    def vertex_location(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Optional. The name of the Vertex AI location where the data store is stored.

        - - -
        """
        return pulumi.get(self, "vertex_location")

    @vertex_location.setter
    def vertex_location(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "vertex_location", value)


if not MYPY:
    class CurationEndpointArgsDict(TypedDict):
        application_integration_endpoint_details: pulumi.Input['CurationEndpointApplicationIntegrationEndpointDetailsArgsDict']
        """
        The details of the Application Integration endpoint to be triggered for
        curation.
        Structure is documented below.
        """
elif False:
    CurationEndpointArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CurationEndpointArgs:
    def __init__(__self__, *,
                 application_integration_endpoint_details: pulumi.Input['CurationEndpointApplicationIntegrationEndpointDetailsArgs']):
        """
        :param pulumi.Input['CurationEndpointApplicationIntegrationEndpointDetailsArgs'] application_integration_endpoint_details: The details of the Application Integration endpoint to be triggered for
               curation.
               Structure is documented below.
        """
        pulumi.set(__self__, "application_integration_endpoint_details", application_integration_endpoint_details)

    @property
    @pulumi.getter(name="applicationIntegrationEndpointDetails")
    def application_integration_endpoint_details(self) -> pulumi.Input['CurationEndpointApplicationIntegrationEndpointDetailsArgs']:
        """
        The details of the Application Integration endpoint to be triggered for
        curation.
        Structure is documented below.
        """
        return pulumi.get(self, "application_integration_endpoint_details")

    @application_integration_endpoint_details.setter
    def application_integration_endpoint_details(self, value: pulumi.Input['CurationEndpointApplicationIntegrationEndpointDetailsArgs']):
        pulumi.set(self, "application_integration_endpoint_details", value)


if not MYPY:
    class CurationEndpointApplicationIntegrationEndpointDetailsArgsDict(TypedDict):
        trigger_id: pulumi.Input[builtins.str]
        """
        The API trigger ID of the Application Integration workflow.
        """
        uri: pulumi.Input[builtins.str]
        """
        The endpoint URI should be a valid REST URI for triggering an Application
        Integration.
        Format:
        `https://integrations.googleapis.com/v1/{name=projects/*/locations/*/integrations/*}:execute`
        or
        `https://{location}-integrations.googleapis.com/v1/{name=projects/*/locations/*/integrations/*}:execute`

        - - -
        """
elif False:
    CurationEndpointApplicationIntegrationEndpointDetailsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CurationEndpointApplicationIntegrationEndpointDetailsArgs:
    def __init__(__self__, *,
                 trigger_id: pulumi.Input[builtins.str],
                 uri: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] trigger_id: The API trigger ID of the Application Integration workflow.
        :param pulumi.Input[builtins.str] uri: The endpoint URI should be a valid REST URI for triggering an Application
               Integration.
               Format:
               `https://integrations.googleapis.com/v1/{name=projects/*/locations/*/integrations/*}:execute`
               or
               `https://{location}-integrations.googleapis.com/v1/{name=projects/*/locations/*/integrations/*}:execute`
               
               - - -
        """
        pulumi.set(__self__, "trigger_id", trigger_id)
        pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter(name="triggerId")
    def trigger_id(self) -> pulumi.Input[builtins.str]:
        """
        The API trigger ID of the Application Integration workflow.
        """
        return pulumi.get(self, "trigger_id")

    @trigger_id.setter
    def trigger_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "trigger_id", value)

    @property
    @pulumi.getter
    def uri(self) -> pulumi.Input[builtins.str]:
        """
        The endpoint URI should be a valid REST URI for triggering an Application
        Integration.
        Format:
        `https://integrations.googleapis.com/v1/{name=projects/*/locations/*/integrations/*}:execute`
        or
        `https://{location}-integrations.googleapis.com/v1/{name=projects/*/locations/*/integrations/*}:execute`

        - - -
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "uri", value)


if not MYPY:
    class CurationPluginInstanceActionArgsDict(TypedDict):
        action_id: NotRequired[pulumi.Input[builtins.str]]
        """
        (Output)
        The action ID that is using the curation.
        This should map to one of the action IDs specified
        in action configs in the plugin.
        """
        plugin_instance: NotRequired[pulumi.Input[builtins.str]]
        """
        (Output)
        Plugin instance that is using the curation.
        Format is
        `projects/{project}/locations/{locati on}/plugins/{plugin}/instances/{instance}`
        """
elif False:
    CurationPluginInstanceActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CurationPluginInstanceActionArgs:
    def __init__(__self__, *,
                 action_id: Optional[pulumi.Input[builtins.str]] = None,
                 plugin_instance: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] action_id: (Output)
               The action ID that is using the curation.
               This should map to one of the action IDs specified
               in action configs in the plugin.
        :param pulumi.Input[builtins.str] plugin_instance: (Output)
               Plugin instance that is using the curation.
               Format is
               `projects/{project}/locations/{locati on}/plugins/{plugin}/instances/{instance}`
        """
        if action_id is not None:
            pulumi.set(__self__, "action_id", action_id)
        if plugin_instance is not None:
            pulumi.set(__self__, "plugin_instance", plugin_instance)

    @property
    @pulumi.getter(name="actionId")
    def action_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (Output)
        The action ID that is using the curation.
        This should map to one of the action IDs specified
        in action configs in the plugin.
        """
        return pulumi.get(self, "action_id")

    @action_id.setter
    def action_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "action_id", value)

    @property
    @pulumi.getter(name="pluginInstance")
    def plugin_instance(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (Output)
        Plugin instance that is using the curation.
        Format is
        `projects/{project}/locations/{locati on}/plugins/{plugin}/instances/{instance}`
        """
        return pulumi.get(self, "plugin_instance")

    @plugin_instance.setter
    def plugin_instance(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "plugin_instance", value)


