# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['LbTrafficExtensionArgs', 'LbTrafficExtension']

@pulumi.input_type
class LbTrafficExtensionArgs:
    def __init__(__self__, *,
                 extension_chains: pulumi.Input[Sequence[pulumi.Input['LbTrafficExtensionExtensionChainArgs']]],
                 forwarding_rules: pulumi.Input[Sequence[pulumi.Input[str]]],
                 location: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 load_balancing_scheme: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a LbTrafficExtension resource.
        :param pulumi.Input[Sequence[pulumi.Input['LbTrafficExtensionExtensionChainArgs']]] extension_chains: A set of ordered extension chains that contain the match conditions and extensions to execute.
               Match conditions for each extension chain are evaluated in sequence for a given request.
               The first extension chain that has a condition that matches the request is executed.
               Any subsequent extension chains do not execute. Limited to 5 extension chains per resource.
               Structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] forwarding_rules: A list of references to the forwarding rules to which this service extension is attached to.
               At least one forwarding rule is required. There can be only one LBTrafficExtension resource per forwarding rule.
        :param pulumi.Input[str] location: The location of the traffic extension
        :param pulumi.Input[str] description: A human-readable description of the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Set of labels associated with the LbTrafficExtension resource. **Note**: This field is non-authoritative, and will only
               manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
               present on the resource.
        :param pulumi.Input[str] load_balancing_scheme: All backend services and forwarding rules referenced by this extension must share the same load balancing scheme. For
               more information, refer to Choosing a load balancer. Possible values: ["LOAD_BALANCING_SCHEME_UNSPECIFIED",
               "INTERNAL_MANAGED", "EXTERNAL_MANAGED"]
        :param pulumi.Input[str] name: Name of the LbTrafficExtension resource in the following format: projects/{project}/locations/{location}/lbTrafficExtensions/{lbTrafficExtension}.
        """
        pulumi.set(__self__, "extension_chains", extension_chains)
        pulumi.set(__self__, "forwarding_rules", forwarding_rules)
        pulumi.set(__self__, "location", location)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if load_balancing_scheme is not None:
            pulumi.set(__self__, "load_balancing_scheme", load_balancing_scheme)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if project is not None:
            pulumi.set(__self__, "project", project)

    @property
    @pulumi.getter(name="extensionChains")
    def extension_chains(self) -> pulumi.Input[Sequence[pulumi.Input['LbTrafficExtensionExtensionChainArgs']]]:
        """
        A set of ordered extension chains that contain the match conditions and extensions to execute.
        Match conditions for each extension chain are evaluated in sequence for a given request.
        The first extension chain that has a condition that matches the request is executed.
        Any subsequent extension chains do not execute. Limited to 5 extension chains per resource.
        Structure is documented below.
        """
        return pulumi.get(self, "extension_chains")

    @extension_chains.setter
    def extension_chains(self, value: pulumi.Input[Sequence[pulumi.Input['LbTrafficExtensionExtensionChainArgs']]]):
        pulumi.set(self, "extension_chains", value)

    @property
    @pulumi.getter(name="forwardingRules")
    def forwarding_rules(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        A list of references to the forwarding rules to which this service extension is attached to.
        At least one forwarding rule is required. There can be only one LBTrafficExtension resource per forwarding rule.
        """
        return pulumi.get(self, "forwarding_rules")

    @forwarding_rules.setter
    def forwarding_rules(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "forwarding_rules", value)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input[str]:
        """
        The location of the traffic extension
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[str]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A human-readable description of the resource.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Set of labels associated with the LbTrafficExtension resource. **Note**: This field is non-authoritative, and will only
        manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
        present on the resource.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="loadBalancingScheme")
    def load_balancing_scheme(self) -> Optional[pulumi.Input[str]]:
        """
        All backend services and forwarding rules referenced by this extension must share the same load balancing scheme. For
        more information, refer to Choosing a load balancer. Possible values: ["LOAD_BALANCING_SCHEME_UNSPECIFIED",
        "INTERNAL_MANAGED", "EXTERNAL_MANAGED"]
        """
        return pulumi.get(self, "load_balancing_scheme")

    @load_balancing_scheme.setter
    def load_balancing_scheme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "load_balancing_scheme", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the LbTrafficExtension resource in the following format: projects/{project}/locations/{location}/lbTrafficExtensions/{lbTrafficExtension}.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)


@pulumi.input_type
class _LbTrafficExtensionState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 effective_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 extension_chains: Optional[pulumi.Input[Sequence[pulumi.Input['LbTrafficExtensionExtensionChainArgs']]]] = None,
                 forwarding_rules: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 load_balancing_scheme: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 pulumi_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering LbTrafficExtension resources.
        :param pulumi.Input[str] description: A human-readable description of the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] effective_labels: All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        :param pulumi.Input[Sequence[pulumi.Input['LbTrafficExtensionExtensionChainArgs']]] extension_chains: A set of ordered extension chains that contain the match conditions and extensions to execute.
               Match conditions for each extension chain are evaluated in sequence for a given request.
               The first extension chain that has a condition that matches the request is executed.
               Any subsequent extension chains do not execute. Limited to 5 extension chains per resource.
               Structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] forwarding_rules: A list of references to the forwarding rules to which this service extension is attached to.
               At least one forwarding rule is required. There can be only one LBTrafficExtension resource per forwarding rule.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Set of labels associated with the LbTrafficExtension resource. **Note**: This field is non-authoritative, and will only
               manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
               present on the resource.
        :param pulumi.Input[str] load_balancing_scheme: All backend services and forwarding rules referenced by this extension must share the same load balancing scheme. For
               more information, refer to Choosing a load balancer. Possible values: ["LOAD_BALANCING_SCHEME_UNSPECIFIED",
               "INTERNAL_MANAGED", "EXTERNAL_MANAGED"]
        :param pulumi.Input[str] location: The location of the traffic extension
        :param pulumi.Input[str] name: Name of the LbTrafficExtension resource in the following format: projects/{project}/locations/{location}/lbTrafficExtensions/{lbTrafficExtension}.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] pulumi_labels: The combination of labels configured directly on the resource
               and default labels configured on the provider.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if effective_labels is not None:
            pulumi.set(__self__, "effective_labels", effective_labels)
        if extension_chains is not None:
            pulumi.set(__self__, "extension_chains", extension_chains)
        if forwarding_rules is not None:
            pulumi.set(__self__, "forwarding_rules", forwarding_rules)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if load_balancing_scheme is not None:
            pulumi.set(__self__, "load_balancing_scheme", load_balancing_scheme)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if pulumi_labels is not None:
            pulumi.set(__self__, "pulumi_labels", pulumi_labels)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A human-readable description of the resource.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="effectiveLabels")
    def effective_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        """
        return pulumi.get(self, "effective_labels")

    @effective_labels.setter
    def effective_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "effective_labels", value)

    @property
    @pulumi.getter(name="extensionChains")
    def extension_chains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LbTrafficExtensionExtensionChainArgs']]]]:
        """
        A set of ordered extension chains that contain the match conditions and extensions to execute.
        Match conditions for each extension chain are evaluated in sequence for a given request.
        The first extension chain that has a condition that matches the request is executed.
        Any subsequent extension chains do not execute. Limited to 5 extension chains per resource.
        Structure is documented below.
        """
        return pulumi.get(self, "extension_chains")

    @extension_chains.setter
    def extension_chains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LbTrafficExtensionExtensionChainArgs']]]]):
        pulumi.set(self, "extension_chains", value)

    @property
    @pulumi.getter(name="forwardingRules")
    def forwarding_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of references to the forwarding rules to which this service extension is attached to.
        At least one forwarding rule is required. There can be only one LBTrafficExtension resource per forwarding rule.
        """
        return pulumi.get(self, "forwarding_rules")

    @forwarding_rules.setter
    def forwarding_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "forwarding_rules", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Set of labels associated with the LbTrafficExtension resource. **Note**: This field is non-authoritative, and will only
        manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
        present on the resource.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="loadBalancingScheme")
    def load_balancing_scheme(self) -> Optional[pulumi.Input[str]]:
        """
        All backend services and forwarding rules referenced by this extension must share the same load balancing scheme. For
        more information, refer to Choosing a load balancer. Possible values: ["LOAD_BALANCING_SCHEME_UNSPECIFIED",
        "INTERNAL_MANAGED", "EXTERNAL_MANAGED"]
        """
        return pulumi.get(self, "load_balancing_scheme")

    @load_balancing_scheme.setter
    def load_balancing_scheme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "load_balancing_scheme", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        The location of the traffic extension
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the LbTrafficExtension resource in the following format: projects/{project}/locations/{location}/lbTrafficExtensions/{lbTrafficExtension}.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="pulumiLabels")
    def pulumi_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The combination of labels configured directly on the resource
        and default labels configured on the provider.
        """
        return pulumi.get(self, "pulumi_labels")

    @pulumi_labels.setter
    def pulumi_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "pulumi_labels", value)


class LbTrafficExtension(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 extension_chains: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LbTrafficExtensionExtensionChainArgs']]]]] = None,
                 forwarding_rules: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 load_balancing_scheme: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        LbTrafficExtension is a resource that lets the extension service modify the headers and payloads of both requests and responses without impacting the choice of backend services or any other security policies associated with the backend service.

        To get more information about LbTrafficExtension, see:

        * [API documentation](https://cloud.google.com/service-extensions/docs/reference/rest/v1beta1/projects.locations.lbTrafficExtensions)
        * How-to Guides
            * [Configure a traffic extension](https://cloud.google.com/service-extensions/docs/configure-callout#configure_a_traffic_extension)

        ## Example Usage

        ### Network Services Lb Traffic Extension Basic

        ```python
        import pulumi
        import pulumi_gcp as gcp

        # Internal HTTP load balancer with a managed instance group backend
        # VPC network
        ilb_network = gcp.compute.Network("ilb_network",
            name="l7-ilb-network",
            auto_create_subnetworks=False)
        # proxy-only subnet
        proxy_subnet = gcp.compute.Subnetwork("proxy_subnet",
            name="l7-ilb-proxy-subnet",
            ip_cidr_range="10.0.0.0/24",
            region="us-west1",
            purpose="REGIONAL_MANAGED_PROXY",
            role="ACTIVE",
            network=ilb_network.id)
        # backend subnet
        ilb_subnet = gcp.compute.Subnetwork("ilb_subnet",
            name="l7-ilb-subnet",
            ip_cidr_range="10.0.1.0/24",
            region="us-west1",
            network=ilb_network.id)
        # health check
        default_region_health_check = gcp.compute.RegionHealthCheck("default",
            name="l7-ilb-hc",
            region="us-west1",
            http_health_check=gcp.compute.RegionHealthCheckHttpHealthCheckArgs(
                port_specification="USE_SERVING_PORT",
            ))
        # instance template
        instance_template = gcp.compute.InstanceTemplate("instance_template",
            network_interfaces=[gcp.compute.InstanceTemplateNetworkInterfaceArgs(
                access_configs=[gcp.compute.InstanceTemplateNetworkInterfaceAccessConfigArgs()],
                network=ilb_network.id,
                subnetwork=ilb_subnet.id,
            )],
            name="l7-ilb-mig-template",
            machine_type="e2-small",
            tags=["http-server"],
            disks=[gcp.compute.InstanceTemplateDiskArgs(
                source_image="debian-cloud/debian-10",
                auto_delete=True,
                boot=True,
            )],
            metadata={
                "startup-script": \"\"\"#! /bin/bash
        set -euo pipefail

        export DEBIAN_FRONTEND=noninteractive
        apt-get update
        apt-get install -y nginx-light jq

        NAME=$(curl -H "Metadata-Flavor: Google" "http://metadata.google.internal/computeMetadata/v1/instance/hostname")
        IP=$(curl -H "Metadata-Flavor: Google" "http://metadata.google.internal/computeMetadata/v1/instance/network-interfaces/0/ip")
        METADATA=$(curl -f -H "Metadata-Flavor: Google" "http://metadata.google.internal/computeMetadata/v1/instance/attributes/?recursive=True" | jq 'del(.["startup-script"])')

        cat <<EOF > /var/www/html/index.html
        <pre>
        Name: $NAME
        IP: $IP
        Metadata: $METADATA
        </pre>
        EOF
        \"\"\",
            })
        # MIG
        mig = gcp.compute.RegionInstanceGroupManager("mig",
            name="l7-ilb-mig1",
            region="us-west1",
            base_instance_name="vm",
            target_size=2,
            versions=[gcp.compute.RegionInstanceGroupManagerVersionArgs(
                instance_template=instance_template.id,
                name="primary",
            )])
        # backend service
        default_region_backend_service = gcp.compute.RegionBackendService("default",
            name="l7-ilb-backend-subnet",
            region="us-west1",
            protocol="HTTP",
            load_balancing_scheme="INTERNAL_MANAGED",
            timeout_sec=10,
            health_checks=default_region_health_check.id,
            backends=[gcp.compute.RegionBackendServiceBackendArgs(
                group=mig.instance_group,
                balancing_mode="UTILIZATION",
                capacity_scaler=1,
            )])
        # URL map
        default_region_url_map = gcp.compute.RegionUrlMap("default",
            name="l7-ilb-regional-url-map",
            region="us-west1",
            default_service=default_region_backend_service.id)
        # HTTP target proxy
        default_region_target_http_proxy = gcp.compute.RegionTargetHttpProxy("default",
            name="l7-ilb-target-http-proxy",
            region="us-west1",
            url_map=default_region_url_map.id)
        # forwarding rule
        default = gcp.compute.ForwardingRule("default",
            name="l7-ilb-forwarding-rule",
            region="us-west1",
            ip_protocol="TCP",
            load_balancing_scheme="INTERNAL_MANAGED",
            port_range="80",
            target=default_region_target_http_proxy.id,
            network=ilb_network.id,
            subnetwork=ilb_subnet.id,
            network_tier="PREMIUM")
        # allow all access from IAP and health check ranges
        fw_iap = gcp.compute.Firewall("fw_iap",
            name="l7-ilb-fw-allow-iap-hc",
            direction="INGRESS",
            network=ilb_network.id,
            source_ranges=[
                "130.211.0.0/22",
                "35.191.0.0/16",
                "35.235.240.0/20",
            ],
            allows=[gcp.compute.FirewallAllowArgs(
                protocol="tcp",
            )])
        # allow http from proxy subnet to backends
        fw_ilb_to_backends = gcp.compute.Firewall("fw_ilb_to_backends",
            name="l7-ilb-fw-allow-ilb-to-backends",
            direction="INGRESS",
            network=ilb_network.id,
            source_ranges=["10.0.0.0/24"],
            target_tags=["http-server"],
            allows=[gcp.compute.FirewallAllowArgs(
                protocol="tcp",
                ports=[
                    "80",
                    "443",
                    "8080",
                ],
            )])
        # Traffic Extension Backend Instance
        callouts_instance = gcp.compute.Instance("callouts_instance",
            network_interfaces=[gcp.compute.InstanceNetworkInterfaceArgs(
                access_configs=[gcp.compute.InstanceNetworkInterfaceAccessConfigArgs()],
                network=ilb_network.id,
                subnetwork=ilb_subnet.id,
            )],
            name="l7-ilb-callouts-ins",
            zone="us-west1-a",
            machine_type="e2-small",
            labels={
                "container-vm": "cos-stable-109-17800-147-54",
            },
            tags=[
                "allow-ssh",
                "load-balanced-backend",
            ],
            boot_disk=gcp.compute.InstanceBootDiskArgs(
                auto_delete=True,
                initialize_params=gcp.compute.InstanceBootDiskInitializeParamsArgs(
                    type="pd-standard",
                    size=10,
                    image="https://www.googleapis.com/compute/v1/projects/cos-cloud/global/images/cos-stable-109-17800-147-54",
                ),
            ),
            metadata={
                "gce-container-declaration": \"\"\"# DISCLAIMER:
        # This container declaration format is not a public API and may change without
        # notice. Please use gcloud command-line tool or Google Cloud Console to run
        # Containers on Google Compute Engine.

        spec:
          containers:
          - image: us-docker.pkg.dev/service-extensions/ext-proc/service-callout-basic-example-python:latest
            name: callouts-vm
            securityContext:
              privileged: false
            stdin: false
            tty: false
            volumeMounts: []
          restartPolicy: Always
          volumes: []
        \"\"\",
                "google-logging-enabled": "true",
            },
            deletion_protection=False)
        # callouts instance group
        callouts_instance_group = gcp.compute.InstanceGroup("callouts_instance_group",
            name="l7-ilb-callouts-ins-group",
            description="Terraform test instance group",
            zone="us-west1-a",
            instances=[callouts_instance.id],
            named_ports=[
                gcp.compute.InstanceGroupNamedPortArgs(
                    name="http",
                    port=80,
                ),
                gcp.compute.InstanceGroupNamedPortArgs(
                    name="grpc",
                    port=443,
                ),
            ])
        # callout health check
        callouts_health_check = gcp.compute.RegionHealthCheck("callouts_health_check",
            name="l7-ilb-callouts-hc",
            region="us-west1",
            http_health_check=gcp.compute.RegionHealthCheckHttpHealthCheckArgs(
                port=80,
            ))
        # callout backend service
        callouts_backend = gcp.compute.RegionBackendService("callouts_backend",
            name="l7-ilb-callouts-backend",
            region="us-west1",
            protocol="HTTP2",
            load_balancing_scheme="INTERNAL_MANAGED",
            timeout_sec=10,
            port_name="grpc",
            health_checks=callouts_health_check.id,
            backends=[gcp.compute.RegionBackendServiceBackendArgs(
                group=callouts_instance_group.id,
                balancing_mode="UTILIZATION",
                capacity_scaler=1,
            )])
        default_lb_traffic_extension = gcp.networkservices.LbTrafficExtension("default",
            name="l7-ilb-traffic-ext",
            description="my traffic extension",
            location="us-west1",
            load_balancing_scheme="INTERNAL_MANAGED",
            forwarding_rules=[default.self_link],
            extension_chains=[gcp.networkservices.LbTrafficExtensionExtensionChainArgs(
                name="chain1",
                match_condition=gcp.networkservices.LbTrafficExtensionExtensionChainMatchConditionArgs(
                    cel_expression="request.host == 'example.com'",
                ),
                extensions=[gcp.networkservices.LbTrafficExtensionExtensionChainExtensionArgs(
                    name="ext11",
                    authority="ext11.com",
                    service=callouts_backend.self_link,
                    timeout="0.1s",
                    fail_open=False,
                    supported_events=["REQUEST_HEADERS"],
                    forward_headers=["custom-header"],
                )],
            )],
            labels={
                "foo": "bar",
            })
        # test instance
        vm_test = gcp.compute.Instance("vm_test",
            name="l7-ilb-test-vm",
            zone="us-west1-b",
            machine_type="e2-small",
            network_interfaces=[gcp.compute.InstanceNetworkInterfaceArgs(
                network=ilb_network.id,
                subnetwork=ilb_subnet.id,
            )],
            boot_disk=gcp.compute.InstanceBootDiskArgs(
                initialize_params=gcp.compute.InstanceBootDiskInitializeParamsArgs(
                    image="debian-cloud/debian-11",
                ),
            ))
        ```

        ## Import

        LbTrafficExtension can be imported using any of these accepted formats:

        * `projects/{{project}}/locations/{{location}}/lbTrafficExtensions/{{name}}`

        * `{{project}}/{{location}}/{{name}}`

        * `{{location}}/{{name}}`

        When using the `pulumi import` command, LbTrafficExtension can be imported using one of the formats above. For example:

        ```sh
        $ pulumi import gcp:networkservices/lbTrafficExtension:LbTrafficExtension default projects/{{project}}/locations/{{location}}/lbTrafficExtensions/{{name}}
        ```

        ```sh
        $ pulumi import gcp:networkservices/lbTrafficExtension:LbTrafficExtension default {{project}}/{{location}}/{{name}}
        ```

        ```sh
        $ pulumi import gcp:networkservices/lbTrafficExtension:LbTrafficExtension default {{location}}/{{name}}
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: A human-readable description of the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LbTrafficExtensionExtensionChainArgs']]]] extension_chains: A set of ordered extension chains that contain the match conditions and extensions to execute.
               Match conditions for each extension chain are evaluated in sequence for a given request.
               The first extension chain that has a condition that matches the request is executed.
               Any subsequent extension chains do not execute. Limited to 5 extension chains per resource.
               Structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] forwarding_rules: A list of references to the forwarding rules to which this service extension is attached to.
               At least one forwarding rule is required. There can be only one LBTrafficExtension resource per forwarding rule.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Set of labels associated with the LbTrafficExtension resource. **Note**: This field is non-authoritative, and will only
               manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
               present on the resource.
        :param pulumi.Input[str] load_balancing_scheme: All backend services and forwarding rules referenced by this extension must share the same load balancing scheme. For
               more information, refer to Choosing a load balancer. Possible values: ["LOAD_BALANCING_SCHEME_UNSPECIFIED",
               "INTERNAL_MANAGED", "EXTERNAL_MANAGED"]
        :param pulumi.Input[str] location: The location of the traffic extension
        :param pulumi.Input[str] name: Name of the LbTrafficExtension resource in the following format: projects/{project}/locations/{location}/lbTrafficExtensions/{lbTrafficExtension}.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LbTrafficExtensionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        LbTrafficExtension is a resource that lets the extension service modify the headers and payloads of both requests and responses without impacting the choice of backend services or any other security policies associated with the backend service.

        To get more information about LbTrafficExtension, see:

        * [API documentation](https://cloud.google.com/service-extensions/docs/reference/rest/v1beta1/projects.locations.lbTrafficExtensions)
        * How-to Guides
            * [Configure a traffic extension](https://cloud.google.com/service-extensions/docs/configure-callout#configure_a_traffic_extension)

        ## Example Usage

        ### Network Services Lb Traffic Extension Basic

        ```python
        import pulumi
        import pulumi_gcp as gcp

        # Internal HTTP load balancer with a managed instance group backend
        # VPC network
        ilb_network = gcp.compute.Network("ilb_network",
            name="l7-ilb-network",
            auto_create_subnetworks=False)
        # proxy-only subnet
        proxy_subnet = gcp.compute.Subnetwork("proxy_subnet",
            name="l7-ilb-proxy-subnet",
            ip_cidr_range="10.0.0.0/24",
            region="us-west1",
            purpose="REGIONAL_MANAGED_PROXY",
            role="ACTIVE",
            network=ilb_network.id)
        # backend subnet
        ilb_subnet = gcp.compute.Subnetwork("ilb_subnet",
            name="l7-ilb-subnet",
            ip_cidr_range="10.0.1.0/24",
            region="us-west1",
            network=ilb_network.id)
        # health check
        default_region_health_check = gcp.compute.RegionHealthCheck("default",
            name="l7-ilb-hc",
            region="us-west1",
            http_health_check=gcp.compute.RegionHealthCheckHttpHealthCheckArgs(
                port_specification="USE_SERVING_PORT",
            ))
        # instance template
        instance_template = gcp.compute.InstanceTemplate("instance_template",
            network_interfaces=[gcp.compute.InstanceTemplateNetworkInterfaceArgs(
                access_configs=[gcp.compute.InstanceTemplateNetworkInterfaceAccessConfigArgs()],
                network=ilb_network.id,
                subnetwork=ilb_subnet.id,
            )],
            name="l7-ilb-mig-template",
            machine_type="e2-small",
            tags=["http-server"],
            disks=[gcp.compute.InstanceTemplateDiskArgs(
                source_image="debian-cloud/debian-10",
                auto_delete=True,
                boot=True,
            )],
            metadata={
                "startup-script": \"\"\"#! /bin/bash
        set -euo pipefail

        export DEBIAN_FRONTEND=noninteractive
        apt-get update
        apt-get install -y nginx-light jq

        NAME=$(curl -H "Metadata-Flavor: Google" "http://metadata.google.internal/computeMetadata/v1/instance/hostname")
        IP=$(curl -H "Metadata-Flavor: Google" "http://metadata.google.internal/computeMetadata/v1/instance/network-interfaces/0/ip")
        METADATA=$(curl -f -H "Metadata-Flavor: Google" "http://metadata.google.internal/computeMetadata/v1/instance/attributes/?recursive=True" | jq 'del(.["startup-script"])')

        cat <<EOF > /var/www/html/index.html
        <pre>
        Name: $NAME
        IP: $IP
        Metadata: $METADATA
        </pre>
        EOF
        \"\"\",
            })
        # MIG
        mig = gcp.compute.RegionInstanceGroupManager("mig",
            name="l7-ilb-mig1",
            region="us-west1",
            base_instance_name="vm",
            target_size=2,
            versions=[gcp.compute.RegionInstanceGroupManagerVersionArgs(
                instance_template=instance_template.id,
                name="primary",
            )])
        # backend service
        default_region_backend_service = gcp.compute.RegionBackendService("default",
            name="l7-ilb-backend-subnet",
            region="us-west1",
            protocol="HTTP",
            load_balancing_scheme="INTERNAL_MANAGED",
            timeout_sec=10,
            health_checks=default_region_health_check.id,
            backends=[gcp.compute.RegionBackendServiceBackendArgs(
                group=mig.instance_group,
                balancing_mode="UTILIZATION",
                capacity_scaler=1,
            )])
        # URL map
        default_region_url_map = gcp.compute.RegionUrlMap("default",
            name="l7-ilb-regional-url-map",
            region="us-west1",
            default_service=default_region_backend_service.id)
        # HTTP target proxy
        default_region_target_http_proxy = gcp.compute.RegionTargetHttpProxy("default",
            name="l7-ilb-target-http-proxy",
            region="us-west1",
            url_map=default_region_url_map.id)
        # forwarding rule
        default = gcp.compute.ForwardingRule("default",
            name="l7-ilb-forwarding-rule",
            region="us-west1",
            ip_protocol="TCP",
            load_balancing_scheme="INTERNAL_MANAGED",
            port_range="80",
            target=default_region_target_http_proxy.id,
            network=ilb_network.id,
            subnetwork=ilb_subnet.id,
            network_tier="PREMIUM")
        # allow all access from IAP and health check ranges
        fw_iap = gcp.compute.Firewall("fw_iap",
            name="l7-ilb-fw-allow-iap-hc",
            direction="INGRESS",
            network=ilb_network.id,
            source_ranges=[
                "130.211.0.0/22",
                "35.191.0.0/16",
                "35.235.240.0/20",
            ],
            allows=[gcp.compute.FirewallAllowArgs(
                protocol="tcp",
            )])
        # allow http from proxy subnet to backends
        fw_ilb_to_backends = gcp.compute.Firewall("fw_ilb_to_backends",
            name="l7-ilb-fw-allow-ilb-to-backends",
            direction="INGRESS",
            network=ilb_network.id,
            source_ranges=["10.0.0.0/24"],
            target_tags=["http-server"],
            allows=[gcp.compute.FirewallAllowArgs(
                protocol="tcp",
                ports=[
                    "80",
                    "443",
                    "8080",
                ],
            )])
        # Traffic Extension Backend Instance
        callouts_instance = gcp.compute.Instance("callouts_instance",
            network_interfaces=[gcp.compute.InstanceNetworkInterfaceArgs(
                access_configs=[gcp.compute.InstanceNetworkInterfaceAccessConfigArgs()],
                network=ilb_network.id,
                subnetwork=ilb_subnet.id,
            )],
            name="l7-ilb-callouts-ins",
            zone="us-west1-a",
            machine_type="e2-small",
            labels={
                "container-vm": "cos-stable-109-17800-147-54",
            },
            tags=[
                "allow-ssh",
                "load-balanced-backend",
            ],
            boot_disk=gcp.compute.InstanceBootDiskArgs(
                auto_delete=True,
                initialize_params=gcp.compute.InstanceBootDiskInitializeParamsArgs(
                    type="pd-standard",
                    size=10,
                    image="https://www.googleapis.com/compute/v1/projects/cos-cloud/global/images/cos-stable-109-17800-147-54",
                ),
            ),
            metadata={
                "gce-container-declaration": \"\"\"# DISCLAIMER:
        # This container declaration format is not a public API and may change without
        # notice. Please use gcloud command-line tool or Google Cloud Console to run
        # Containers on Google Compute Engine.

        spec:
          containers:
          - image: us-docker.pkg.dev/service-extensions/ext-proc/service-callout-basic-example-python:latest
            name: callouts-vm
            securityContext:
              privileged: false
            stdin: false
            tty: false
            volumeMounts: []
          restartPolicy: Always
          volumes: []
        \"\"\",
                "google-logging-enabled": "true",
            },
            deletion_protection=False)
        # callouts instance group
        callouts_instance_group = gcp.compute.InstanceGroup("callouts_instance_group",
            name="l7-ilb-callouts-ins-group",
            description="Terraform test instance group",
            zone="us-west1-a",
            instances=[callouts_instance.id],
            named_ports=[
                gcp.compute.InstanceGroupNamedPortArgs(
                    name="http",
                    port=80,
                ),
                gcp.compute.InstanceGroupNamedPortArgs(
                    name="grpc",
                    port=443,
                ),
            ])
        # callout health check
        callouts_health_check = gcp.compute.RegionHealthCheck("callouts_health_check",
            name="l7-ilb-callouts-hc",
            region="us-west1",
            http_health_check=gcp.compute.RegionHealthCheckHttpHealthCheckArgs(
                port=80,
            ))
        # callout backend service
        callouts_backend = gcp.compute.RegionBackendService("callouts_backend",
            name="l7-ilb-callouts-backend",
            region="us-west1",
            protocol="HTTP2",
            load_balancing_scheme="INTERNAL_MANAGED",
            timeout_sec=10,
            port_name="grpc",
            health_checks=callouts_health_check.id,
            backends=[gcp.compute.RegionBackendServiceBackendArgs(
                group=callouts_instance_group.id,
                balancing_mode="UTILIZATION",
                capacity_scaler=1,
            )])
        default_lb_traffic_extension = gcp.networkservices.LbTrafficExtension("default",
            name="l7-ilb-traffic-ext",
            description="my traffic extension",
            location="us-west1",
            load_balancing_scheme="INTERNAL_MANAGED",
            forwarding_rules=[default.self_link],
            extension_chains=[gcp.networkservices.LbTrafficExtensionExtensionChainArgs(
                name="chain1",
                match_condition=gcp.networkservices.LbTrafficExtensionExtensionChainMatchConditionArgs(
                    cel_expression="request.host == 'example.com'",
                ),
                extensions=[gcp.networkservices.LbTrafficExtensionExtensionChainExtensionArgs(
                    name="ext11",
                    authority="ext11.com",
                    service=callouts_backend.self_link,
                    timeout="0.1s",
                    fail_open=False,
                    supported_events=["REQUEST_HEADERS"],
                    forward_headers=["custom-header"],
                )],
            )],
            labels={
                "foo": "bar",
            })
        # test instance
        vm_test = gcp.compute.Instance("vm_test",
            name="l7-ilb-test-vm",
            zone="us-west1-b",
            machine_type="e2-small",
            network_interfaces=[gcp.compute.InstanceNetworkInterfaceArgs(
                network=ilb_network.id,
                subnetwork=ilb_subnet.id,
            )],
            boot_disk=gcp.compute.InstanceBootDiskArgs(
                initialize_params=gcp.compute.InstanceBootDiskInitializeParamsArgs(
                    image="debian-cloud/debian-11",
                ),
            ))
        ```

        ## Import

        LbTrafficExtension can be imported using any of these accepted formats:

        * `projects/{{project}}/locations/{{location}}/lbTrafficExtensions/{{name}}`

        * `{{project}}/{{location}}/{{name}}`

        * `{{location}}/{{name}}`

        When using the `pulumi import` command, LbTrafficExtension can be imported using one of the formats above. For example:

        ```sh
        $ pulumi import gcp:networkservices/lbTrafficExtension:LbTrafficExtension default projects/{{project}}/locations/{{location}}/lbTrafficExtensions/{{name}}
        ```

        ```sh
        $ pulumi import gcp:networkservices/lbTrafficExtension:LbTrafficExtension default {{project}}/{{location}}/{{name}}
        ```

        ```sh
        $ pulumi import gcp:networkservices/lbTrafficExtension:LbTrafficExtension default {{location}}/{{name}}
        ```

        :param str resource_name: The name of the resource.
        :param LbTrafficExtensionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LbTrafficExtensionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 extension_chains: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LbTrafficExtensionExtensionChainArgs']]]]] = None,
                 forwarding_rules: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 load_balancing_scheme: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LbTrafficExtensionArgs.__new__(LbTrafficExtensionArgs)

            __props__.__dict__["description"] = description
            if extension_chains is None and not opts.urn:
                raise TypeError("Missing required property 'extension_chains'")
            __props__.__dict__["extension_chains"] = extension_chains
            if forwarding_rules is None and not opts.urn:
                raise TypeError("Missing required property 'forwarding_rules'")
            __props__.__dict__["forwarding_rules"] = forwarding_rules
            __props__.__dict__["labels"] = labels
            __props__.__dict__["load_balancing_scheme"] = load_balancing_scheme
            if location is None and not opts.urn:
                raise TypeError("Missing required property 'location'")
            __props__.__dict__["location"] = location
            __props__.__dict__["name"] = name
            __props__.__dict__["project"] = project
            __props__.__dict__["effective_labels"] = None
            __props__.__dict__["pulumi_labels"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["effectiveLabels", "pulumiLabels"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(LbTrafficExtension, __self__).__init__(
            'gcp:networkservices/lbTrafficExtension:LbTrafficExtension',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            effective_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            extension_chains: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LbTrafficExtensionExtensionChainArgs']]]]] = None,
            forwarding_rules: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            load_balancing_scheme: Optional[pulumi.Input[str]] = None,
            location: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            project: Optional[pulumi.Input[str]] = None,
            pulumi_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None) -> 'LbTrafficExtension':
        """
        Get an existing LbTrafficExtension resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: A human-readable description of the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] effective_labels: All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LbTrafficExtensionExtensionChainArgs']]]] extension_chains: A set of ordered extension chains that contain the match conditions and extensions to execute.
               Match conditions for each extension chain are evaluated in sequence for a given request.
               The first extension chain that has a condition that matches the request is executed.
               Any subsequent extension chains do not execute. Limited to 5 extension chains per resource.
               Structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] forwarding_rules: A list of references to the forwarding rules to which this service extension is attached to.
               At least one forwarding rule is required. There can be only one LBTrafficExtension resource per forwarding rule.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Set of labels associated with the LbTrafficExtension resource. **Note**: This field is non-authoritative, and will only
               manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
               present on the resource.
        :param pulumi.Input[str] load_balancing_scheme: All backend services and forwarding rules referenced by this extension must share the same load balancing scheme. For
               more information, refer to Choosing a load balancer. Possible values: ["LOAD_BALANCING_SCHEME_UNSPECIFIED",
               "INTERNAL_MANAGED", "EXTERNAL_MANAGED"]
        :param pulumi.Input[str] location: The location of the traffic extension
        :param pulumi.Input[str] name: Name of the LbTrafficExtension resource in the following format: projects/{project}/locations/{location}/lbTrafficExtensions/{lbTrafficExtension}.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] pulumi_labels: The combination of labels configured directly on the resource
               and default labels configured on the provider.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LbTrafficExtensionState.__new__(_LbTrafficExtensionState)

        __props__.__dict__["description"] = description
        __props__.__dict__["effective_labels"] = effective_labels
        __props__.__dict__["extension_chains"] = extension_chains
        __props__.__dict__["forwarding_rules"] = forwarding_rules
        __props__.__dict__["labels"] = labels
        __props__.__dict__["load_balancing_scheme"] = load_balancing_scheme
        __props__.__dict__["location"] = location
        __props__.__dict__["name"] = name
        __props__.__dict__["project"] = project
        __props__.__dict__["pulumi_labels"] = pulumi_labels
        return LbTrafficExtension(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        A human-readable description of the resource.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="effectiveLabels")
    def effective_labels(self) -> pulumi.Output[Mapping[str, str]]:
        """
        All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        """
        return pulumi.get(self, "effective_labels")

    @property
    @pulumi.getter(name="extensionChains")
    def extension_chains(self) -> pulumi.Output[Sequence['outputs.LbTrafficExtensionExtensionChain']]:
        """
        A set of ordered extension chains that contain the match conditions and extensions to execute.
        Match conditions for each extension chain are evaluated in sequence for a given request.
        The first extension chain that has a condition that matches the request is executed.
        Any subsequent extension chains do not execute. Limited to 5 extension chains per resource.
        Structure is documented below.
        """
        return pulumi.get(self, "extension_chains")

    @property
    @pulumi.getter(name="forwardingRules")
    def forwarding_rules(self) -> pulumi.Output[Sequence[str]]:
        """
        A list of references to the forwarding rules to which this service extension is attached to.
        At least one forwarding rule is required. There can be only one LBTrafficExtension resource per forwarding rule.
        """
        return pulumi.get(self, "forwarding_rules")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Set of labels associated with the LbTrafficExtension resource. **Note**: This field is non-authoritative, and will only
        manage the labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels
        present on the resource.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="loadBalancingScheme")
    def load_balancing_scheme(self) -> pulumi.Output[Optional[str]]:
        """
        All backend services and forwarding rules referenced by this extension must share the same load balancing scheme. For
        more information, refer to Choosing a load balancer. Possible values: ["LOAD_BALANCING_SCHEME_UNSPECIFIED",
        "INTERNAL_MANAGED", "EXTERNAL_MANAGED"]
        """
        return pulumi.get(self, "load_balancing_scheme")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        """
        The location of the traffic extension
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the LbTrafficExtension resource in the following format: projects/{project}/locations/{location}/lbTrafficExtensions/{lbTrafficExtension}.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="pulumiLabels")
    def pulumi_labels(self) -> pulumi.Output[Mapping[str, str]]:
        """
        The combination of labels configured directly on the resource
        and default labels configured on the provider.
        """
        return pulumi.get(self, "pulumi_labels")

