# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities

class Project(pulumi.CustomResource):
    """
    Allows creation and management of a Google Cloud Platform project.
    
    Projects created with this resource must be associated with an Organization.
    See the [Organization documentation](https://cloud.google.com/resource-manager/docs/quickstarts) for more details.
    
    The service account used to run Terraform when creating a `google_project`
    resource must have `roles/resourcemanager.projectCreator`. See the
    [Access Control for Organizations Using IAM](https://cloud.google.com/resource-manager/docs/access-control-org)
    doc for more information.
    
    Note that prior to 0.8.5, `google_project` functioned like a data source,
    meaning any project referenced by it had to be created and managed outside
    Terraform. As of 0.8.5, `google_project` functions like any other Terraform
    resource, with Terraform creating and managing the project. To replicate the old
    behavior, either:
    
    * Use the project ID directly in whatever is referencing the project, using the
      [google_project_iam_policy](https://www.terraform.io/docs/providers/google/r/google_project_iam.html)
      to replace the old `policy_data` property.
    * Use the [import](https://www.terraform.io/docs/import/usage.html) functionality
      to import your pre-existing project into Terraform, where it can be referenced and
      used just like always, keeping in mind that Terraform will attempt to undo any changes
      made outside Terraform.
    
    ~> It's important to note that any project resources that were added to your Terraform config
    prior to 0.8.5 will continue to function as they always have, and will not be managed by
    Terraform. Only newly added projects are affected.
    """
    def __init__(__self__, __name__, __opts__=None, app_engine=None, auto_create_network=None, billing_account=None, folder_id=None, labels=None, name=None, org_id=None, project_id=None, skip_delete=None):
        """Create a Project resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if app_engine and not isinstance(app_engine, dict):
            raise TypeError('Expected property app_engine to be a dict')
        __self__.app_engine = app_engine
        """
        A block of configuration to enable an App Engine app. Setting this
        field will enabled the App Engine Admin API, which is required to manage the app.
        """
        __props__['appEngine'] = app_engine

        if auto_create_network and not isinstance(auto_create_network, bool):
            raise TypeError('Expected property auto_create_network to be a bool')
        __self__.auto_create_network = auto_create_network
        """
        Create the 'default' network automatically.  Default true.
        Note: this might be more accurately described as "Delete Default Network", since the network
        is created automatically then deleted before project creation returns, but we choose this
        name to match the GCP Console UI. Setting this field to false will enable the Compute Engine
        API which is required to delete the network.
        """
        __props__['autoCreateNetwork'] = auto_create_network

        if billing_account and not isinstance(billing_account, basestring):
            raise TypeError('Expected property billing_account to be a basestring')
        __self__.billing_account = billing_account
        """
        The alphanumeric ID of the billing account this project
        belongs to. The user or service account performing this operation with Terraform
        must have Billing Account Administrator privileges (`roles/billing.admin`) in
        the organization. See [Google Cloud Billing API Access Control](https://cloud.google.com/billing/v1/how-tos/access-control)
        for more details.
        """
        __props__['billingAccount'] = billing_account

        if folder_id and not isinstance(folder_id, basestring):
            raise TypeError('Expected property folder_id to be a basestring')
        __self__.folder_id = folder_id
        """
        The numeric ID of the folder this project should be
        created under. Only one of `org_id` or `folder_id` may be
        specified. If the `folder_id` is specified, then the project is
        created under the specified folder. Changing this forces the
        project to be migrated to the newly specified folder.
        """
        __props__['folderId'] = folder_id

        if labels and not isinstance(labels, dict):
            raise TypeError('Expected property labels to be a dict')
        __self__.labels = labels
        """
        A set of key/value label pairs to assign to the project.
        """
        __props__['labels'] = labels

        if name and not isinstance(name, basestring):
            raise TypeError('Expected property name to be a basestring')
        __self__.name = name
        """
        The display name of the project.
        """
        __props__['name'] = name

        if org_id and not isinstance(org_id, basestring):
            raise TypeError('Expected property org_id to be a basestring')
        __self__.org_id = org_id
        """
        The numeric ID of the organization this project belongs to.
        Changing this forces a new project to be created.  Only one of
        `org_id` or `folder_id` may be specified. If the `org_id` is
        specified then the project is created at the top level. Changing
        this forces the project to be migrated to the newly specified
        organization.
        """
        __props__['orgId'] = org_id

        if not project_id:
            raise TypeError('Missing required property project_id')
        elif not isinstance(project_id, basestring):
            raise TypeError('Expected property project_id to be a basestring')
        __self__.project_id = project_id
        """
        The project ID. Changing this forces a new project to be created.
        """
        __props__['projectId'] = project_id

        if skip_delete and not isinstance(skip_delete, bool):
            raise TypeError('Expected property skip_delete to be a bool')
        __self__.skip_delete = skip_delete
        """
        If true, the Terraform resource can be deleted
        without deleting the Project via the Google API.
        """
        __props__['skipDelete'] = skip_delete

        __self__.number = pulumi.runtime.UNKNOWN
        """
        The numeric identifier of the project.
        """

        super(Project, __self__).__init__(
            'gcp:organizations/project:Project',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'appEngine' in outs:
            self.app_engine = outs['appEngine']
        if 'autoCreateNetwork' in outs:
            self.auto_create_network = outs['autoCreateNetwork']
        if 'billingAccount' in outs:
            self.billing_account = outs['billingAccount']
        if 'folderId' in outs:
            self.folder_id = outs['folderId']
        if 'labels' in outs:
            self.labels = outs['labels']
        if 'name' in outs:
            self.name = outs['name']
        if 'number' in outs:
            self.number = outs['number']
        if 'orgId' in outs:
            self.org_id = outs['orgId']
        if 'projectId' in outs:
            self.project_id = outs['projectId']
        if 'skipDelete' in outs:
            self.skip_delete = outs['skipDelete']
