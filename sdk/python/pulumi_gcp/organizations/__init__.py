# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

# Export this package's modules as members:
from .access_approval_settings import *
from .folder import *
from .get_active_folder import *
from .get_billing_account import *
from .get_client_config import *
from .get_client_open_id_user_info import *
from .get_folder import *
from .get_iam_policy import *
from .get_organization import *
from .get_project import *
from .iam_audit_config import *
from .iam_binding import *
from .iam_custom_role import *
from .iam_member import *
from .iam_policy import *
from .policy import *
from .project import *
from ._inputs import *
from . import outputs

def _register_module():
    import pulumi
    from .. import _utilities


    class Module(pulumi.runtime.ResourceModule):
        _version = _utilities.get_semver_version()

        def version(self):
            return Module._version

        def construct(self, name: str, typ: str, urn: str) -> pulumi.Resource:
            if typ == "gcp:organizations/accessApprovalSettings:AccessApprovalSettings":
                return AccessApprovalSettings(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "gcp:organizations/folder:Folder":
                return Folder(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "gcp:organizations/iAMBinding:IAMBinding":
                return IAMBinding(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "gcp:organizations/iAMCustomRole:IAMCustomRole":
                return IAMCustomRole(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "gcp:organizations/iAMMember:IAMMember":
                return IAMMember(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "gcp:organizations/iAMPolicy:IAMPolicy":
                return IAMPolicy(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "gcp:organizations/iamAuditConfig:IamAuditConfig":
                return IamAuditConfig(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "gcp:organizations/policy:Policy":
                return Policy(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "gcp:organizations/project:Project":
                return Project(name, pulumi.ResourceOptions(urn=urn))
            else:
                raise Exception(f"unknown resource type {typ}")


    _module_instance = Module()
    pulumi.runtime.register_resource_module("gcp", "organizations/accessApprovalSettings", _module_instance)
    pulumi.runtime.register_resource_module("gcp", "organizations/folder", _module_instance)
    pulumi.runtime.register_resource_module("gcp", "organizations/iAMBinding", _module_instance)
    pulumi.runtime.register_resource_module("gcp", "organizations/iAMCustomRole", _module_instance)
    pulumi.runtime.register_resource_module("gcp", "organizations/iAMMember", _module_instance)
    pulumi.runtime.register_resource_module("gcp", "organizations/iAMPolicy", _module_instance)
    pulumi.runtime.register_resource_module("gcp", "organizations/iamAuditConfig", _module_instance)
    pulumi.runtime.register_resource_module("gcp", "organizations/policy", _module_instance)
    pulumi.runtime.register_resource_module("gcp", "organizations/project", _module_instance)

_register_module()
