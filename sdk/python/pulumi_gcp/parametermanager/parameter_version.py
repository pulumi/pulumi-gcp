# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['ParameterVersionArgs', 'ParameterVersion']

@pulumi.input_type
class ParameterVersionArgs:
    def __init__(__self__, *,
                 parameter: pulumi.Input[str],
                 parameter_data: pulumi.Input[str],
                 parameter_version_id: pulumi.Input[str],
                 disabled: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a ParameterVersion resource.
        :param pulumi.Input[str] parameter: Parameter Manager Parameter resource.
        :param pulumi.Input[str] parameter_data: The Parameter data.
               **Note**: This property is sensitive and will not be displayed in the plan.
        :param pulumi.Input[str] parameter_version_id: Version ID of the Parameter Version Resource. This must be unique within the Parameter.
               
               
               - - -
        :param pulumi.Input[bool] disabled: The current state of Parameter Version. This field is only applicable for updating Parameter Version.
        """
        pulumi.set(__self__, "parameter", parameter)
        pulumi.set(__self__, "parameter_data", parameter_data)
        pulumi.set(__self__, "parameter_version_id", parameter_version_id)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)

    @property
    @pulumi.getter
    def parameter(self) -> pulumi.Input[str]:
        """
        Parameter Manager Parameter resource.
        """
        return pulumi.get(self, "parameter")

    @parameter.setter
    def parameter(self, value: pulumi.Input[str]):
        pulumi.set(self, "parameter", value)

    @property
    @pulumi.getter(name="parameterData")
    def parameter_data(self) -> pulumi.Input[str]:
        """
        The Parameter data.
        **Note**: This property is sensitive and will not be displayed in the plan.
        """
        return pulumi.get(self, "parameter_data")

    @parameter_data.setter
    def parameter_data(self, value: pulumi.Input[str]):
        pulumi.set(self, "parameter_data", value)

    @property
    @pulumi.getter(name="parameterVersionId")
    def parameter_version_id(self) -> pulumi.Input[str]:
        """
        Version ID of the Parameter Version Resource. This must be unique within the Parameter.


        - - -
        """
        return pulumi.get(self, "parameter_version_id")

    @parameter_version_id.setter
    def parameter_version_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "parameter_version_id", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        The current state of Parameter Version. This field is only applicable for updating Parameter Version.
        """
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)


@pulumi.input_type
class _ParameterVersionState:
    def __init__(__self__, *,
                 create_time: Optional[pulumi.Input[str]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 parameter: Optional[pulumi.Input[str]] = None,
                 parameter_data: Optional[pulumi.Input[str]] = None,
                 parameter_version_id: Optional[pulumi.Input[str]] = None,
                 update_time: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ParameterVersion resources.
        :param pulumi.Input[str] create_time: The time at which the Parameter Version was created.
        :param pulumi.Input[bool] disabled: The current state of Parameter Version. This field is only applicable for updating Parameter Version.
        :param pulumi.Input[str] name: The resource name of the Parameter Version. Format:
               `projects/{{project}}/locations/global/parameters/{{parameter_id}}/versions/{{parameter_version_id}}`
        :param pulumi.Input[str] parameter: Parameter Manager Parameter resource.
        :param pulumi.Input[str] parameter_data: The Parameter data.
               **Note**: This property is sensitive and will not be displayed in the plan.
        :param pulumi.Input[str] parameter_version_id: Version ID of the Parameter Version Resource. This must be unique within the Parameter.
               
               
               - - -
        :param pulumi.Input[str] update_time: The time at which the Parameter Version was updated.
        """
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parameter is not None:
            pulumi.set(__self__, "parameter", parameter)
        if parameter_data is not None:
            pulumi.set(__self__, "parameter_data", parameter_data)
        if parameter_version_id is not None:
            pulumi.set(__self__, "parameter_version_id", parameter_version_id)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        The time at which the Parameter Version was created.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        The current state of Parameter Version. This field is only applicable for updating Parameter Version.
        """
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The resource name of the Parameter Version. Format:
        `projects/{{project}}/locations/global/parameters/{{parameter_id}}/versions/{{parameter_version_id}}`
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def parameter(self) -> Optional[pulumi.Input[str]]:
        """
        Parameter Manager Parameter resource.
        """
        return pulumi.get(self, "parameter")

    @parameter.setter
    def parameter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parameter", value)

    @property
    @pulumi.getter(name="parameterData")
    def parameter_data(self) -> Optional[pulumi.Input[str]]:
        """
        The Parameter data.
        **Note**: This property is sensitive and will not be displayed in the plan.
        """
        return pulumi.get(self, "parameter_data")

    @parameter_data.setter
    def parameter_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parameter_data", value)

    @property
    @pulumi.getter(name="parameterVersionId")
    def parameter_version_id(self) -> Optional[pulumi.Input[str]]:
        """
        Version ID of the Parameter Version Resource. This must be unique within the Parameter.


        - - -
        """
        return pulumi.get(self, "parameter_version_id")

    @parameter_version_id.setter
    def parameter_version_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parameter_version_id", value)

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[str]]:
        """
        The time at which the Parameter Version was updated.
        """
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_time", value)


class ParameterVersion(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 parameter: Optional[pulumi.Input[str]] = None,
                 parameter_data: Optional[pulumi.Input[str]] = None,
                 parameter_version_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## Example Usage

        ### Parameter Version Basic

        ```python
        import pulumi
        import pulumi_gcp as gcp

        parameter_basic = gcp.parametermanager.Parameter("parameter-basic", parameter_id="parameter")
        parameter_version_basic = gcp.parametermanager.ParameterVersion("parameter-version-basic",
            parameter=parameter_basic.id,
            parameter_version_id="parameter_version",
            parameter_data="app-parameter-version-data")
        ```
        ### Parameter Version With Json Format

        ```python
        import pulumi
        import json
        import pulumi_gcp as gcp

        parameter_basic = gcp.parametermanager.Parameter("parameter-basic",
            parameter_id="parameter",
            format="JSON")
        parameter_version_with_json_format = gcp.parametermanager.ParameterVersion("parameter-version-with-json-format",
            parameter=parameter_basic.id,
            parameter_version_id="parameter_version",
            parameter_data=json.dumps({
                "key1": "val1",
                "key2": "val2",
            }))
        ```
        ## Import

        ParameterVersion can be imported using any of these accepted formats:

        * `projects/{{project}}/locations/global/parameters/{{parameter_id}}/versions/{{parameter_version_id}}`

        When using the `pulumi import` command, ParameterVersion can be imported using one of the formats above. For example:

        ```sh
        $ pulumi import gcp:parametermanager/parameterVersion:ParameterVersion default projects/{{project}}/locations/global/parameters/{{parameter_id}}/versions/{{parameter_version_id}}
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] disabled: The current state of Parameter Version. This field is only applicable for updating Parameter Version.
        :param pulumi.Input[str] parameter: Parameter Manager Parameter resource.
        :param pulumi.Input[str] parameter_data: The Parameter data.
               **Note**: This property is sensitive and will not be displayed in the plan.
        :param pulumi.Input[str] parameter_version_id: Version ID of the Parameter Version Resource. This must be unique within the Parameter.
               
               
               - - -
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ParameterVersionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ### Parameter Version Basic

        ```python
        import pulumi
        import pulumi_gcp as gcp

        parameter_basic = gcp.parametermanager.Parameter("parameter-basic", parameter_id="parameter")
        parameter_version_basic = gcp.parametermanager.ParameterVersion("parameter-version-basic",
            parameter=parameter_basic.id,
            parameter_version_id="parameter_version",
            parameter_data="app-parameter-version-data")
        ```
        ### Parameter Version With Json Format

        ```python
        import pulumi
        import json
        import pulumi_gcp as gcp

        parameter_basic = gcp.parametermanager.Parameter("parameter-basic",
            parameter_id="parameter",
            format="JSON")
        parameter_version_with_json_format = gcp.parametermanager.ParameterVersion("parameter-version-with-json-format",
            parameter=parameter_basic.id,
            parameter_version_id="parameter_version",
            parameter_data=json.dumps({
                "key1": "val1",
                "key2": "val2",
            }))
        ```
        ## Import

        ParameterVersion can be imported using any of these accepted formats:

        * `projects/{{project}}/locations/global/parameters/{{parameter_id}}/versions/{{parameter_version_id}}`

        When using the `pulumi import` command, ParameterVersion can be imported using one of the formats above. For example:

        ```sh
        $ pulumi import gcp:parametermanager/parameterVersion:ParameterVersion default projects/{{project}}/locations/global/parameters/{{parameter_id}}/versions/{{parameter_version_id}}
        ```

        :param str resource_name: The name of the resource.
        :param ParameterVersionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ParameterVersionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 parameter: Optional[pulumi.Input[str]] = None,
                 parameter_data: Optional[pulumi.Input[str]] = None,
                 parameter_version_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ParameterVersionArgs.__new__(ParameterVersionArgs)

            __props__.__dict__["disabled"] = disabled
            if parameter is None and not opts.urn:
                raise TypeError("Missing required property 'parameter'")
            __props__.__dict__["parameter"] = parameter
            if parameter_data is None and not opts.urn:
                raise TypeError("Missing required property 'parameter_data'")
            __props__.__dict__["parameter_data"] = None if parameter_data is None else pulumi.Output.secret(parameter_data)
            if parameter_version_id is None and not opts.urn:
                raise TypeError("Missing required property 'parameter_version_id'")
            __props__.__dict__["parameter_version_id"] = parameter_version_id
            __props__.__dict__["create_time"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["update_time"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["parameterData"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(ParameterVersion, __self__).__init__(
            'gcp:parametermanager/parameterVersion:ParameterVersion',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            create_time: Optional[pulumi.Input[str]] = None,
            disabled: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            parameter: Optional[pulumi.Input[str]] = None,
            parameter_data: Optional[pulumi.Input[str]] = None,
            parameter_version_id: Optional[pulumi.Input[str]] = None,
            update_time: Optional[pulumi.Input[str]] = None) -> 'ParameterVersion':
        """
        Get an existing ParameterVersion resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] create_time: The time at which the Parameter Version was created.
        :param pulumi.Input[bool] disabled: The current state of Parameter Version. This field is only applicable for updating Parameter Version.
        :param pulumi.Input[str] name: The resource name of the Parameter Version. Format:
               `projects/{{project}}/locations/global/parameters/{{parameter_id}}/versions/{{parameter_version_id}}`
        :param pulumi.Input[str] parameter: Parameter Manager Parameter resource.
        :param pulumi.Input[str] parameter_data: The Parameter data.
               **Note**: This property is sensitive and will not be displayed in the plan.
        :param pulumi.Input[str] parameter_version_id: Version ID of the Parameter Version Resource. This must be unique within the Parameter.
               
               
               - - -
        :param pulumi.Input[str] update_time: The time at which the Parameter Version was updated.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ParameterVersionState.__new__(_ParameterVersionState)

        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["disabled"] = disabled
        __props__.__dict__["name"] = name
        __props__.__dict__["parameter"] = parameter
        __props__.__dict__["parameter_data"] = parameter_data
        __props__.__dict__["parameter_version_id"] = parameter_version_id
        __props__.__dict__["update_time"] = update_time
        return ParameterVersion(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        The time at which the Parameter Version was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def disabled(self) -> pulumi.Output[Optional[bool]]:
        """
        The current state of Parameter Version. This field is only applicable for updating Parameter Version.
        """
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The resource name of the Parameter Version. Format:
        `projects/{{project}}/locations/global/parameters/{{parameter_id}}/versions/{{parameter_version_id}}`
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def parameter(self) -> pulumi.Output[str]:
        """
        Parameter Manager Parameter resource.
        """
        return pulumi.get(self, "parameter")

    @property
    @pulumi.getter(name="parameterData")
    def parameter_data(self) -> pulumi.Output[str]:
        """
        The Parameter data.
        **Note**: This property is sensitive and will not be displayed in the plan.
        """
        return pulumi.get(self, "parameter_data")

    @property
    @pulumi.getter(name="parameterVersionId")
    def parameter_version_id(self) -> pulumi.Output[str]:
        """
        Version ID of the Parameter Version Resource. This must be unique within the Parameter.


        - - -
        """
        return pulumi.get(self, "parameter_version_id")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[str]:
        """
        The time at which the Parameter Version was updated.
        """
        return pulumi.get(self, "update_time")

