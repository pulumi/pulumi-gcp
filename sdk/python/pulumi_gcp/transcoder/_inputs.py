# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'JobConfigArgs',
    'JobConfigArgsDict',
    'JobConfigAdBreakArgs',
    'JobConfigAdBreakArgsDict',
    'JobConfigEditListArgs',
    'JobConfigEditListArgsDict',
    'JobConfigElementaryStreamArgs',
    'JobConfigElementaryStreamArgsDict',
    'JobConfigElementaryStreamAudioStreamArgs',
    'JobConfigElementaryStreamAudioStreamArgsDict',
    'JobConfigElementaryStreamVideoStreamArgs',
    'JobConfigElementaryStreamVideoStreamArgsDict',
    'JobConfigElementaryStreamVideoStreamH264Args',
    'JobConfigElementaryStreamVideoStreamH264ArgsDict',
    'JobConfigElementaryStreamVideoStreamH264HlgArgs',
    'JobConfigElementaryStreamVideoStreamH264HlgArgsDict',
    'JobConfigElementaryStreamVideoStreamH264SdrArgs',
    'JobConfigElementaryStreamVideoStreamH264SdrArgsDict',
    'JobConfigEncryptionArgs',
    'JobConfigEncryptionArgsDict',
    'JobConfigEncryptionAes128Args',
    'JobConfigEncryptionAes128ArgsDict',
    'JobConfigEncryptionDrmSystemsArgs',
    'JobConfigEncryptionDrmSystemsArgsDict',
    'JobConfigEncryptionDrmSystemsClearkeyArgs',
    'JobConfigEncryptionDrmSystemsClearkeyArgsDict',
    'JobConfigEncryptionDrmSystemsFairplayArgs',
    'JobConfigEncryptionDrmSystemsFairplayArgsDict',
    'JobConfigEncryptionDrmSystemsPlayreadyArgs',
    'JobConfigEncryptionDrmSystemsPlayreadyArgsDict',
    'JobConfigEncryptionDrmSystemsWidevineArgs',
    'JobConfigEncryptionDrmSystemsWidevineArgsDict',
    'JobConfigEncryptionMpegCencArgs',
    'JobConfigEncryptionMpegCencArgsDict',
    'JobConfigEncryptionSampleAesArgs',
    'JobConfigEncryptionSampleAesArgsDict',
    'JobConfigEncryptionSecretManagerKeySourceArgs',
    'JobConfigEncryptionSecretManagerKeySourceArgsDict',
    'JobConfigInputArgs',
    'JobConfigInputArgsDict',
    'JobConfigManifestArgs',
    'JobConfigManifestArgsDict',
    'JobConfigMuxStreamArgs',
    'JobConfigMuxStreamArgsDict',
    'JobConfigMuxStreamSegmentSettingsArgs',
    'JobConfigMuxStreamSegmentSettingsArgsDict',
    'JobConfigOutputArgs',
    'JobConfigOutputArgsDict',
    'JobConfigOverlayArgs',
    'JobConfigOverlayArgsDict',
    'JobConfigOverlayAnimationArgs',
    'JobConfigOverlayAnimationArgsDict',
    'JobConfigOverlayAnimationAnimationFadeArgs',
    'JobConfigOverlayAnimationAnimationFadeArgsDict',
    'JobConfigOverlayAnimationAnimationFadeXyArgs',
    'JobConfigOverlayAnimationAnimationFadeXyArgsDict',
    'JobConfigOverlayImageArgs',
    'JobConfigOverlayImageArgsDict',
    'JobConfigPubsubDestinationArgs',
    'JobConfigPubsubDestinationArgsDict',
    'JobTemplateConfigArgs',
    'JobTemplateConfigArgsDict',
    'JobTemplateConfigAdBreakArgs',
    'JobTemplateConfigAdBreakArgsDict',
    'JobTemplateConfigEditListArgs',
    'JobTemplateConfigEditListArgsDict',
    'JobTemplateConfigElementaryStreamArgs',
    'JobTemplateConfigElementaryStreamArgsDict',
    'JobTemplateConfigElementaryStreamAudioStreamArgs',
    'JobTemplateConfigElementaryStreamAudioStreamArgsDict',
    'JobTemplateConfigElementaryStreamVideoStreamArgs',
    'JobTemplateConfigElementaryStreamVideoStreamArgsDict',
    'JobTemplateConfigElementaryStreamVideoStreamH264Args',
    'JobTemplateConfigElementaryStreamVideoStreamH264ArgsDict',
    'JobTemplateConfigElementaryStreamVideoStreamH264HlgArgs',
    'JobTemplateConfigElementaryStreamVideoStreamH264HlgArgsDict',
    'JobTemplateConfigElementaryStreamVideoStreamH264SdrArgs',
    'JobTemplateConfigElementaryStreamVideoStreamH264SdrArgsDict',
    'JobTemplateConfigEncryptionArgs',
    'JobTemplateConfigEncryptionArgsDict',
    'JobTemplateConfigEncryptionAes128Args',
    'JobTemplateConfigEncryptionAes128ArgsDict',
    'JobTemplateConfigEncryptionDrmSystemsArgs',
    'JobTemplateConfigEncryptionDrmSystemsArgsDict',
    'JobTemplateConfigEncryptionDrmSystemsClearkeyArgs',
    'JobTemplateConfigEncryptionDrmSystemsClearkeyArgsDict',
    'JobTemplateConfigEncryptionDrmSystemsFairplayArgs',
    'JobTemplateConfigEncryptionDrmSystemsFairplayArgsDict',
    'JobTemplateConfigEncryptionDrmSystemsPlayreadyArgs',
    'JobTemplateConfigEncryptionDrmSystemsPlayreadyArgsDict',
    'JobTemplateConfigEncryptionDrmSystemsWidevineArgs',
    'JobTemplateConfigEncryptionDrmSystemsWidevineArgsDict',
    'JobTemplateConfigEncryptionMpegCencArgs',
    'JobTemplateConfigEncryptionMpegCencArgsDict',
    'JobTemplateConfigEncryptionSampleAesArgs',
    'JobTemplateConfigEncryptionSampleAesArgsDict',
    'JobTemplateConfigEncryptionSecretManagerKeySourceArgs',
    'JobTemplateConfigEncryptionSecretManagerKeySourceArgsDict',
    'JobTemplateConfigInputArgs',
    'JobTemplateConfigInputArgsDict',
    'JobTemplateConfigManifestArgs',
    'JobTemplateConfigManifestArgsDict',
    'JobTemplateConfigMuxStreamArgs',
    'JobTemplateConfigMuxStreamArgsDict',
    'JobTemplateConfigMuxStreamSegmentSettingsArgs',
    'JobTemplateConfigMuxStreamSegmentSettingsArgsDict',
    'JobTemplateConfigOutputArgs',
    'JobTemplateConfigOutputArgsDict',
    'JobTemplateConfigOverlayArgs',
    'JobTemplateConfigOverlayArgsDict',
    'JobTemplateConfigOverlayAnimationArgs',
    'JobTemplateConfigOverlayAnimationArgsDict',
    'JobTemplateConfigOverlayAnimationAnimationFadeArgs',
    'JobTemplateConfigOverlayAnimationAnimationFadeArgsDict',
    'JobTemplateConfigOverlayAnimationAnimationFadeXyArgs',
    'JobTemplateConfigOverlayAnimationAnimationFadeXyArgsDict',
    'JobTemplateConfigOverlayImageArgs',
    'JobTemplateConfigOverlayImageArgsDict',
    'JobTemplateConfigPubsubDestinationArgs',
    'JobTemplateConfigPubsubDestinationArgsDict',
]

MYPY = False

if not MYPY:
    class JobConfigArgsDict(TypedDict):
        ad_breaks: NotRequired[pulumi.Input[Sequence[pulumi.Input['JobConfigAdBreakArgsDict']]]]
        """
        Ad break.
        Structure is documented below.
        """
        edit_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input['JobConfigEditListArgsDict']]]]
        """
        List of input assets stored in Cloud Storage.
        Structure is documented below.
        """
        elementary_streams: NotRequired[pulumi.Input[Sequence[pulumi.Input['JobConfigElementaryStreamArgsDict']]]]
        """
        List of input assets stored in Cloud Storage.
        Structure is documented below.
        """
        encryptions: NotRequired[pulumi.Input[Sequence[pulumi.Input['JobConfigEncryptionArgsDict']]]]
        """
        List of encryption configurations for the content.
        Structure is documented below.
        """
        inputs: NotRequired[pulumi.Input[Sequence[pulumi.Input['JobConfigInputArgsDict']]]]
        """
        List of input assets stored in Cloud Storage.
        Structure is documented below.
        """
        manifests: NotRequired[pulumi.Input[Sequence[pulumi.Input['JobConfigManifestArgsDict']]]]
        """
        Manifest configuration.
        Structure is documented below.
        """
        mux_streams: NotRequired[pulumi.Input[Sequence[pulumi.Input['JobConfigMuxStreamArgsDict']]]]
        """
        Multiplexing settings for output stream.
        Structure is documented below.
        """
        output: NotRequired[pulumi.Input['JobConfigOutputArgsDict']]
        """
        Location of output file(s) in a Cloud Storage bucket.
        Structure is documented below.
        """
        overlays: NotRequired[pulumi.Input[Sequence[pulumi.Input['JobConfigOverlayArgsDict']]]]
        """
        List of overlays on the output video, in descending Z-order.
        Structure is documented below.
        """
        pubsub_destination: NotRequired[pulumi.Input['JobConfigPubsubDestinationArgsDict']]
        """
        Pub/Sub destination.
        Structure is documented below.
        """
elif False:
    JobConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class JobConfigArgs:
    def __init__(__self__, *,
                 ad_breaks: Optional[pulumi.Input[Sequence[pulumi.Input['JobConfigAdBreakArgs']]]] = None,
                 edit_lists: Optional[pulumi.Input[Sequence[pulumi.Input['JobConfigEditListArgs']]]] = None,
                 elementary_streams: Optional[pulumi.Input[Sequence[pulumi.Input['JobConfigElementaryStreamArgs']]]] = None,
                 encryptions: Optional[pulumi.Input[Sequence[pulumi.Input['JobConfigEncryptionArgs']]]] = None,
                 inputs: Optional[pulumi.Input[Sequence[pulumi.Input['JobConfigInputArgs']]]] = None,
                 manifests: Optional[pulumi.Input[Sequence[pulumi.Input['JobConfigManifestArgs']]]] = None,
                 mux_streams: Optional[pulumi.Input[Sequence[pulumi.Input['JobConfigMuxStreamArgs']]]] = None,
                 output: Optional[pulumi.Input['JobConfigOutputArgs']] = None,
                 overlays: Optional[pulumi.Input[Sequence[pulumi.Input['JobConfigOverlayArgs']]]] = None,
                 pubsub_destination: Optional[pulumi.Input['JobConfigPubsubDestinationArgs']] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['JobConfigAdBreakArgs']]] ad_breaks: Ad break.
               Structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['JobConfigEditListArgs']]] edit_lists: List of input assets stored in Cloud Storage.
               Structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['JobConfigElementaryStreamArgs']]] elementary_streams: List of input assets stored in Cloud Storage.
               Structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['JobConfigEncryptionArgs']]] encryptions: List of encryption configurations for the content.
               Structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['JobConfigInputArgs']]] inputs: List of input assets stored in Cloud Storage.
               Structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['JobConfigManifestArgs']]] manifests: Manifest configuration.
               Structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['JobConfigMuxStreamArgs']]] mux_streams: Multiplexing settings for output stream.
               Structure is documented below.
        :param pulumi.Input['JobConfigOutputArgs'] output: Location of output file(s) in a Cloud Storage bucket.
               Structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['JobConfigOverlayArgs']]] overlays: List of overlays on the output video, in descending Z-order.
               Structure is documented below.
        :param pulumi.Input['JobConfigPubsubDestinationArgs'] pubsub_destination: Pub/Sub destination.
               Structure is documented below.
        """
        if ad_breaks is not None:
            pulumi.set(__self__, "ad_breaks", ad_breaks)
        if edit_lists is not None:
            pulumi.set(__self__, "edit_lists", edit_lists)
        if elementary_streams is not None:
            pulumi.set(__self__, "elementary_streams", elementary_streams)
        if encryptions is not None:
            pulumi.set(__self__, "encryptions", encryptions)
        if inputs is not None:
            pulumi.set(__self__, "inputs", inputs)
        if manifests is not None:
            pulumi.set(__self__, "manifests", manifests)
        if mux_streams is not None:
            pulumi.set(__self__, "mux_streams", mux_streams)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if overlays is not None:
            pulumi.set(__self__, "overlays", overlays)
        if pubsub_destination is not None:
            pulumi.set(__self__, "pubsub_destination", pubsub_destination)

    @property
    @pulumi.getter(name="adBreaks")
    def ad_breaks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['JobConfigAdBreakArgs']]]]:
        """
        Ad break.
        Structure is documented below.
        """
        return pulumi.get(self, "ad_breaks")

    @ad_breaks.setter
    def ad_breaks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['JobConfigAdBreakArgs']]]]):
        pulumi.set(self, "ad_breaks", value)

    @property
    @pulumi.getter(name="editLists")
    def edit_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['JobConfigEditListArgs']]]]:
        """
        List of input assets stored in Cloud Storage.
        Structure is documented below.
        """
        return pulumi.get(self, "edit_lists")

    @edit_lists.setter
    def edit_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['JobConfigEditListArgs']]]]):
        pulumi.set(self, "edit_lists", value)

    @property
    @pulumi.getter(name="elementaryStreams")
    def elementary_streams(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['JobConfigElementaryStreamArgs']]]]:
        """
        List of input assets stored in Cloud Storage.
        Structure is documented below.
        """
        return pulumi.get(self, "elementary_streams")

    @elementary_streams.setter
    def elementary_streams(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['JobConfigElementaryStreamArgs']]]]):
        pulumi.set(self, "elementary_streams", value)

    @property
    @pulumi.getter
    def encryptions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['JobConfigEncryptionArgs']]]]:
        """
        List of encryption configurations for the content.
        Structure is documented below.
        """
        return pulumi.get(self, "encryptions")

    @encryptions.setter
    def encryptions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['JobConfigEncryptionArgs']]]]):
        pulumi.set(self, "encryptions", value)

    @property
    @pulumi.getter
    def inputs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['JobConfigInputArgs']]]]:
        """
        List of input assets stored in Cloud Storage.
        Structure is documented below.
        """
        return pulumi.get(self, "inputs")

    @inputs.setter
    def inputs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['JobConfigInputArgs']]]]):
        pulumi.set(self, "inputs", value)

    @property
    @pulumi.getter
    def manifests(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['JobConfigManifestArgs']]]]:
        """
        Manifest configuration.
        Structure is documented below.
        """
        return pulumi.get(self, "manifests")

    @manifests.setter
    def manifests(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['JobConfigManifestArgs']]]]):
        pulumi.set(self, "manifests", value)

    @property
    @pulumi.getter(name="muxStreams")
    def mux_streams(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['JobConfigMuxStreamArgs']]]]:
        """
        Multiplexing settings for output stream.
        Structure is documented below.
        """
        return pulumi.get(self, "mux_streams")

    @mux_streams.setter
    def mux_streams(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['JobConfigMuxStreamArgs']]]]):
        pulumi.set(self, "mux_streams", value)

    @property
    @pulumi.getter
    def output(self) -> Optional[pulumi.Input['JobConfigOutputArgs']]:
        """
        Location of output file(s) in a Cloud Storage bucket.
        Structure is documented below.
        """
        return pulumi.get(self, "output")

    @output.setter
    def output(self, value: Optional[pulumi.Input['JobConfigOutputArgs']]):
        pulumi.set(self, "output", value)

    @property
    @pulumi.getter
    def overlays(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['JobConfigOverlayArgs']]]]:
        """
        List of overlays on the output video, in descending Z-order.
        Structure is documented below.
        """
        return pulumi.get(self, "overlays")

    @overlays.setter
    def overlays(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['JobConfigOverlayArgs']]]]):
        pulumi.set(self, "overlays", value)

    @property
    @pulumi.getter(name="pubsubDestination")
    def pubsub_destination(self) -> Optional[pulumi.Input['JobConfigPubsubDestinationArgs']]:
        """
        Pub/Sub destination.
        Structure is documented below.
        """
        return pulumi.get(self, "pubsub_destination")

    @pubsub_destination.setter
    def pubsub_destination(self, value: Optional[pulumi.Input['JobConfigPubsubDestinationArgs']]):
        pulumi.set(self, "pubsub_destination", value)


if not MYPY:
    class JobConfigAdBreakArgsDict(TypedDict):
        start_time_offset: NotRequired[pulumi.Input[str]]
        """
        Start time in seconds for the ad break, relative to the output file timeline
        """
elif False:
    JobConfigAdBreakArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class JobConfigAdBreakArgs:
    def __init__(__self__, *,
                 start_time_offset: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] start_time_offset: Start time in seconds for the ad break, relative to the output file timeline
        """
        if start_time_offset is not None:
            pulumi.set(__self__, "start_time_offset", start_time_offset)

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> Optional[pulumi.Input[str]]:
        """
        Start time in seconds for the ad break, relative to the output file timeline
        """
        return pulumi.get(self, "start_time_offset")

    @start_time_offset.setter
    def start_time_offset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_time_offset", value)


if not MYPY:
    class JobConfigEditListArgsDict(TypedDict):
        inputs: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        List of values identifying files that should be used in this atom.
        """
        key: NotRequired[pulumi.Input[str]]
        """
        A unique key for this atom.
        """
        start_time_offset: NotRequired[pulumi.Input[str]]
        """
        Start time in seconds for the atom, relative to the input file timeline. The default is `0s`.
        """
elif False:
    JobConfigEditListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class JobConfigEditListArgs:
    def __init__(__self__, *,
                 inputs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 start_time_offset: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] inputs: List of values identifying files that should be used in this atom.
        :param pulumi.Input[str] key: A unique key for this atom.
        :param pulumi.Input[str] start_time_offset: Start time in seconds for the atom, relative to the input file timeline. The default is `0s`.
        """
        if inputs is not None:
            pulumi.set(__self__, "inputs", inputs)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if start_time_offset is not None:
            pulumi.set(__self__, "start_time_offset", start_time_offset)

    @property
    @pulumi.getter
    def inputs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of values identifying files that should be used in this atom.
        """
        return pulumi.get(self, "inputs")

    @inputs.setter
    def inputs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "inputs", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        A unique key for this atom.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> Optional[pulumi.Input[str]]:
        """
        Start time in seconds for the atom, relative to the input file timeline. The default is `0s`.
        """
        return pulumi.get(self, "start_time_offset")

    @start_time_offset.setter
    def start_time_offset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_time_offset", value)


if not MYPY:
    class JobConfigElementaryStreamArgsDict(TypedDict):
        audio_stream: NotRequired[pulumi.Input['JobConfigElementaryStreamAudioStreamArgsDict']]
        """
        Encoding of an audio stream.
        Structure is documented below.
        """
        key: NotRequired[pulumi.Input[str]]
        """
        A unique key for this atom.
        """
        video_stream: NotRequired[pulumi.Input['JobConfigElementaryStreamVideoStreamArgsDict']]
        """
        Encoding of a video stream.
        Structure is documented below.
        """
elif False:
    JobConfigElementaryStreamArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class JobConfigElementaryStreamArgs:
    def __init__(__self__, *,
                 audio_stream: Optional[pulumi.Input['JobConfigElementaryStreamAudioStreamArgs']] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 video_stream: Optional[pulumi.Input['JobConfigElementaryStreamVideoStreamArgs']] = None):
        """
        :param pulumi.Input['JobConfigElementaryStreamAudioStreamArgs'] audio_stream: Encoding of an audio stream.
               Structure is documented below.
        :param pulumi.Input[str] key: A unique key for this atom.
        :param pulumi.Input['JobConfigElementaryStreamVideoStreamArgs'] video_stream: Encoding of a video stream.
               Structure is documented below.
        """
        if audio_stream is not None:
            pulumi.set(__self__, "audio_stream", audio_stream)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if video_stream is not None:
            pulumi.set(__self__, "video_stream", video_stream)

    @property
    @pulumi.getter(name="audioStream")
    def audio_stream(self) -> Optional[pulumi.Input['JobConfigElementaryStreamAudioStreamArgs']]:
        """
        Encoding of an audio stream.
        Structure is documented below.
        """
        return pulumi.get(self, "audio_stream")

    @audio_stream.setter
    def audio_stream(self, value: Optional[pulumi.Input['JobConfigElementaryStreamAudioStreamArgs']]):
        pulumi.set(self, "audio_stream", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        A unique key for this atom.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="videoStream")
    def video_stream(self) -> Optional[pulumi.Input['JobConfigElementaryStreamVideoStreamArgs']]:
        """
        Encoding of a video stream.
        Structure is documented below.
        """
        return pulumi.get(self, "video_stream")

    @video_stream.setter
    def video_stream(self, value: Optional[pulumi.Input['JobConfigElementaryStreamVideoStreamArgs']]):
        pulumi.set(self, "video_stream", value)


if not MYPY:
    class JobConfigElementaryStreamAudioStreamArgsDict(TypedDict):
        bitrate_bps: pulumi.Input[int]
        """
        Audio bitrate in bits per second.
        """
        channel_count: NotRequired[pulumi.Input[int]]
        """
        Number of audio channels. The default is `2`.
        """
        channel_layouts: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        A list of channel names specifying layout of the audio channels. The default is ["fl", "fr"].
        """
        codec: NotRequired[pulumi.Input[str]]
        """
        The codec for this audio stream. The default is `aac`.
        """
        sample_rate_hertz: NotRequired[pulumi.Input[int]]
        """
        The audio sample rate in Hertz. The default is `48000`.
        """
elif False:
    JobConfigElementaryStreamAudioStreamArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class JobConfigElementaryStreamAudioStreamArgs:
    def __init__(__self__, *,
                 bitrate_bps: pulumi.Input[int],
                 channel_count: Optional[pulumi.Input[int]] = None,
                 channel_layouts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 codec: Optional[pulumi.Input[str]] = None,
                 sample_rate_hertz: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] bitrate_bps: Audio bitrate in bits per second.
        :param pulumi.Input[int] channel_count: Number of audio channels. The default is `2`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] channel_layouts: A list of channel names specifying layout of the audio channels. The default is ["fl", "fr"].
        :param pulumi.Input[str] codec: The codec for this audio stream. The default is `aac`.
        :param pulumi.Input[int] sample_rate_hertz: The audio sample rate in Hertz. The default is `48000`.
        """
        pulumi.set(__self__, "bitrate_bps", bitrate_bps)
        if channel_count is not None:
            pulumi.set(__self__, "channel_count", channel_count)
        if channel_layouts is not None:
            pulumi.set(__self__, "channel_layouts", channel_layouts)
        if codec is not None:
            pulumi.set(__self__, "codec", codec)
        if sample_rate_hertz is not None:
            pulumi.set(__self__, "sample_rate_hertz", sample_rate_hertz)

    @property
    @pulumi.getter(name="bitrateBps")
    def bitrate_bps(self) -> pulumi.Input[int]:
        """
        Audio bitrate in bits per second.
        """
        return pulumi.get(self, "bitrate_bps")

    @bitrate_bps.setter
    def bitrate_bps(self, value: pulumi.Input[int]):
        pulumi.set(self, "bitrate_bps", value)

    @property
    @pulumi.getter(name="channelCount")
    def channel_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of audio channels. The default is `2`.
        """
        return pulumi.get(self, "channel_count")

    @channel_count.setter
    def channel_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "channel_count", value)

    @property
    @pulumi.getter(name="channelLayouts")
    def channel_layouts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of channel names specifying layout of the audio channels. The default is ["fl", "fr"].
        """
        return pulumi.get(self, "channel_layouts")

    @channel_layouts.setter
    def channel_layouts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "channel_layouts", value)

    @property
    @pulumi.getter
    def codec(self) -> Optional[pulumi.Input[str]]:
        """
        The codec for this audio stream. The default is `aac`.
        """
        return pulumi.get(self, "codec")

    @codec.setter
    def codec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "codec", value)

    @property
    @pulumi.getter(name="sampleRateHertz")
    def sample_rate_hertz(self) -> Optional[pulumi.Input[int]]:
        """
        The audio sample rate in Hertz. The default is `48000`.
        """
        return pulumi.get(self, "sample_rate_hertz")

    @sample_rate_hertz.setter
    def sample_rate_hertz(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sample_rate_hertz", value)


if not MYPY:
    class JobConfigElementaryStreamVideoStreamArgsDict(TypedDict):
        h264: NotRequired[pulumi.Input['JobConfigElementaryStreamVideoStreamH264ArgsDict']]
        """
        H264 codec settings
        Structure is documented below.


        <a name="nested_h264"></a>The `h264` block supports:
        """
elif False:
    JobConfigElementaryStreamVideoStreamArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class JobConfigElementaryStreamVideoStreamArgs:
    def __init__(__self__, *,
                 h264: Optional[pulumi.Input['JobConfigElementaryStreamVideoStreamH264Args']] = None):
        """
        :param pulumi.Input['JobConfigElementaryStreamVideoStreamH264Args'] h264: H264 codec settings
               Structure is documented below.
               
               
               <a name="nested_h264"></a>The `h264` block supports:
        """
        if h264 is not None:
            pulumi.set(__self__, "h264", h264)

    @property
    @pulumi.getter
    def h264(self) -> Optional[pulumi.Input['JobConfigElementaryStreamVideoStreamH264Args']]:
        """
        H264 codec settings
        Structure is documented below.


        <a name="nested_h264"></a>The `h264` block supports:
        """
        return pulumi.get(self, "h264")

    @h264.setter
    def h264(self, value: Optional[pulumi.Input['JobConfigElementaryStreamVideoStreamH264Args']]):
        pulumi.set(self, "h264", value)


if not MYPY:
    class JobConfigElementaryStreamVideoStreamH264ArgsDict(TypedDict):
        bitrate_bps: pulumi.Input[int]
        """
        The video bitrate in bits per second.
        """
        frame_rate: pulumi.Input[int]
        """
        The target video frame rate in frames per second (FPS).
        """
        crf_level: NotRequired[pulumi.Input[int]]
        """
        Target CRF level. The default is '21'.
        """
        entropy_coder: NotRequired[pulumi.Input[str]]
        """
        The entropy coder to use. The default is 'cabac'.
        """
        gop_duration: NotRequired[pulumi.Input[str]]
        """
        Select the GOP size based on the specified duration. The default is '3s'.
        """
        height_pixels: NotRequired[pulumi.Input[int]]
        """
        The height of the video in pixels.
        """
        hlg: NotRequired[pulumi.Input['JobConfigElementaryStreamVideoStreamH264HlgArgsDict']]
        """
        HLG color format setting for H264.
        """
        pixel_format: NotRequired[pulumi.Input[str]]
        """
        Pixel format to use. The default is 'yuv420p'.
        """
        preset: NotRequired[pulumi.Input[str]]
        """
        Enforces the specified codec preset. The default is 'veryfast'.
        """
        profile: NotRequired[pulumi.Input[str]]
        """
        Enforces the specified codec profile.
        """
        rate_control_mode: NotRequired[pulumi.Input[str]]
        """
        Specify the mode. The default is 'vbr'.
        """
        sdr: NotRequired[pulumi.Input['JobConfigElementaryStreamVideoStreamH264SdrArgsDict']]
        """
        SDR color format setting for H264.
        """
        vbv_fullness_bits: NotRequired[pulumi.Input[int]]
        """
        Initial fullness of the Video Buffering Verifier (VBV) buffer in bits.
        """
        vbv_size_bits: NotRequired[pulumi.Input[int]]
        """
        Size of the Video Buffering Verifier (VBV) buffer in bits.
        """
        width_pixels: NotRequired[pulumi.Input[int]]
        """
        The width of the video in pixels.
        """
elif False:
    JobConfigElementaryStreamVideoStreamH264ArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class JobConfigElementaryStreamVideoStreamH264Args:
    def __init__(__self__, *,
                 bitrate_bps: pulumi.Input[int],
                 frame_rate: pulumi.Input[int],
                 crf_level: Optional[pulumi.Input[int]] = None,
                 entropy_coder: Optional[pulumi.Input[str]] = None,
                 gop_duration: Optional[pulumi.Input[str]] = None,
                 height_pixels: Optional[pulumi.Input[int]] = None,
                 hlg: Optional[pulumi.Input['JobConfigElementaryStreamVideoStreamH264HlgArgs']] = None,
                 pixel_format: Optional[pulumi.Input[str]] = None,
                 preset: Optional[pulumi.Input[str]] = None,
                 profile: Optional[pulumi.Input[str]] = None,
                 rate_control_mode: Optional[pulumi.Input[str]] = None,
                 sdr: Optional[pulumi.Input['JobConfigElementaryStreamVideoStreamH264SdrArgs']] = None,
                 vbv_fullness_bits: Optional[pulumi.Input[int]] = None,
                 vbv_size_bits: Optional[pulumi.Input[int]] = None,
                 width_pixels: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] bitrate_bps: The video bitrate in bits per second.
        :param pulumi.Input[int] frame_rate: The target video frame rate in frames per second (FPS).
        :param pulumi.Input[int] crf_level: Target CRF level. The default is '21'.
        :param pulumi.Input[str] entropy_coder: The entropy coder to use. The default is 'cabac'.
        :param pulumi.Input[str] gop_duration: Select the GOP size based on the specified duration. The default is '3s'.
        :param pulumi.Input[int] height_pixels: The height of the video in pixels.
        :param pulumi.Input['JobConfigElementaryStreamVideoStreamH264HlgArgs'] hlg: HLG color format setting for H264.
        :param pulumi.Input[str] pixel_format: Pixel format to use. The default is 'yuv420p'.
        :param pulumi.Input[str] preset: Enforces the specified codec preset. The default is 'veryfast'.
        :param pulumi.Input[str] profile: Enforces the specified codec profile.
        :param pulumi.Input[str] rate_control_mode: Specify the mode. The default is 'vbr'.
        :param pulumi.Input['JobConfigElementaryStreamVideoStreamH264SdrArgs'] sdr: SDR color format setting for H264.
        :param pulumi.Input[int] vbv_fullness_bits: Initial fullness of the Video Buffering Verifier (VBV) buffer in bits.
        :param pulumi.Input[int] vbv_size_bits: Size of the Video Buffering Verifier (VBV) buffer in bits.
        :param pulumi.Input[int] width_pixels: The width of the video in pixels.
        """
        pulumi.set(__self__, "bitrate_bps", bitrate_bps)
        pulumi.set(__self__, "frame_rate", frame_rate)
        if crf_level is not None:
            pulumi.set(__self__, "crf_level", crf_level)
        if entropy_coder is not None:
            pulumi.set(__self__, "entropy_coder", entropy_coder)
        if gop_duration is not None:
            pulumi.set(__self__, "gop_duration", gop_duration)
        if height_pixels is not None:
            pulumi.set(__self__, "height_pixels", height_pixels)
        if hlg is not None:
            pulumi.set(__self__, "hlg", hlg)
        if pixel_format is not None:
            pulumi.set(__self__, "pixel_format", pixel_format)
        if preset is not None:
            pulumi.set(__self__, "preset", preset)
        if profile is not None:
            pulumi.set(__self__, "profile", profile)
        if rate_control_mode is not None:
            pulumi.set(__self__, "rate_control_mode", rate_control_mode)
        if sdr is not None:
            pulumi.set(__self__, "sdr", sdr)
        if vbv_fullness_bits is not None:
            pulumi.set(__self__, "vbv_fullness_bits", vbv_fullness_bits)
        if vbv_size_bits is not None:
            pulumi.set(__self__, "vbv_size_bits", vbv_size_bits)
        if width_pixels is not None:
            pulumi.set(__self__, "width_pixels", width_pixels)

    @property
    @pulumi.getter(name="bitrateBps")
    def bitrate_bps(self) -> pulumi.Input[int]:
        """
        The video bitrate in bits per second.
        """
        return pulumi.get(self, "bitrate_bps")

    @bitrate_bps.setter
    def bitrate_bps(self, value: pulumi.Input[int]):
        pulumi.set(self, "bitrate_bps", value)

    @property
    @pulumi.getter(name="frameRate")
    def frame_rate(self) -> pulumi.Input[int]:
        """
        The target video frame rate in frames per second (FPS).
        """
        return pulumi.get(self, "frame_rate")

    @frame_rate.setter
    def frame_rate(self, value: pulumi.Input[int]):
        pulumi.set(self, "frame_rate", value)

    @property
    @pulumi.getter(name="crfLevel")
    def crf_level(self) -> Optional[pulumi.Input[int]]:
        """
        Target CRF level. The default is '21'.
        """
        return pulumi.get(self, "crf_level")

    @crf_level.setter
    def crf_level(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "crf_level", value)

    @property
    @pulumi.getter(name="entropyCoder")
    def entropy_coder(self) -> Optional[pulumi.Input[str]]:
        """
        The entropy coder to use. The default is 'cabac'.
        """
        return pulumi.get(self, "entropy_coder")

    @entropy_coder.setter
    def entropy_coder(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entropy_coder", value)

    @property
    @pulumi.getter(name="gopDuration")
    def gop_duration(self) -> Optional[pulumi.Input[str]]:
        """
        Select the GOP size based on the specified duration. The default is '3s'.
        """
        return pulumi.get(self, "gop_duration")

    @gop_duration.setter
    def gop_duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gop_duration", value)

    @property
    @pulumi.getter(name="heightPixels")
    def height_pixels(self) -> Optional[pulumi.Input[int]]:
        """
        The height of the video in pixels.
        """
        return pulumi.get(self, "height_pixels")

    @height_pixels.setter
    def height_pixels(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "height_pixels", value)

    @property
    @pulumi.getter
    def hlg(self) -> Optional[pulumi.Input['JobConfigElementaryStreamVideoStreamH264HlgArgs']]:
        """
        HLG color format setting for H264.
        """
        return pulumi.get(self, "hlg")

    @hlg.setter
    def hlg(self, value: Optional[pulumi.Input['JobConfigElementaryStreamVideoStreamH264HlgArgs']]):
        pulumi.set(self, "hlg", value)

    @property
    @pulumi.getter(name="pixelFormat")
    def pixel_format(self) -> Optional[pulumi.Input[str]]:
        """
        Pixel format to use. The default is 'yuv420p'.
        """
        return pulumi.get(self, "pixel_format")

    @pixel_format.setter
    def pixel_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pixel_format", value)

    @property
    @pulumi.getter
    def preset(self) -> Optional[pulumi.Input[str]]:
        """
        Enforces the specified codec preset. The default is 'veryfast'.
        """
        return pulumi.get(self, "preset")

    @preset.setter
    def preset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preset", value)

    @property
    @pulumi.getter
    def profile(self) -> Optional[pulumi.Input[str]]:
        """
        Enforces the specified codec profile.
        """
        return pulumi.get(self, "profile")

    @profile.setter
    def profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "profile", value)

    @property
    @pulumi.getter(name="rateControlMode")
    def rate_control_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Specify the mode. The default is 'vbr'.
        """
        return pulumi.get(self, "rate_control_mode")

    @rate_control_mode.setter
    def rate_control_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rate_control_mode", value)

    @property
    @pulumi.getter
    def sdr(self) -> Optional[pulumi.Input['JobConfigElementaryStreamVideoStreamH264SdrArgs']]:
        """
        SDR color format setting for H264.
        """
        return pulumi.get(self, "sdr")

    @sdr.setter
    def sdr(self, value: Optional[pulumi.Input['JobConfigElementaryStreamVideoStreamH264SdrArgs']]):
        pulumi.set(self, "sdr", value)

    @property
    @pulumi.getter(name="vbvFullnessBits")
    def vbv_fullness_bits(self) -> Optional[pulumi.Input[int]]:
        """
        Initial fullness of the Video Buffering Verifier (VBV) buffer in bits.
        """
        return pulumi.get(self, "vbv_fullness_bits")

    @vbv_fullness_bits.setter
    def vbv_fullness_bits(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vbv_fullness_bits", value)

    @property
    @pulumi.getter(name="vbvSizeBits")
    def vbv_size_bits(self) -> Optional[pulumi.Input[int]]:
        """
        Size of the Video Buffering Verifier (VBV) buffer in bits.
        """
        return pulumi.get(self, "vbv_size_bits")

    @vbv_size_bits.setter
    def vbv_size_bits(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vbv_size_bits", value)

    @property
    @pulumi.getter(name="widthPixels")
    def width_pixels(self) -> Optional[pulumi.Input[int]]:
        """
        The width of the video in pixels.
        """
        return pulumi.get(self, "width_pixels")

    @width_pixels.setter
    def width_pixels(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "width_pixels", value)


if not MYPY:
    class JobConfigElementaryStreamVideoStreamH264HlgArgsDict(TypedDict):
        pass
elif False:
    JobConfigElementaryStreamVideoStreamH264HlgArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class JobConfigElementaryStreamVideoStreamH264HlgArgs:
    def __init__(__self__):
        pass


if not MYPY:
    class JobConfigElementaryStreamVideoStreamH264SdrArgsDict(TypedDict):
        pass
elif False:
    JobConfigElementaryStreamVideoStreamH264SdrArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class JobConfigElementaryStreamVideoStreamH264SdrArgs:
    def __init__(__self__):
        pass


if not MYPY:
    class JobConfigEncryptionArgsDict(TypedDict):
        id: pulumi.Input[str]
        """
        Identifier for this set of encryption options.
        """
        aes128: NotRequired[pulumi.Input['JobConfigEncryptionAes128ArgsDict']]
        """
        Configuration for AES-128 encryption.
        """
        drm_systems: NotRequired[pulumi.Input['JobConfigEncryptionDrmSystemsArgsDict']]
        """
        DRM system(s) to use; at least one must be specified. If a DRM system is omitted, it is considered disabled.
        Structure is documented below.
        """
        mpeg_cenc: NotRequired[pulumi.Input['JobConfigEncryptionMpegCencArgsDict']]
        """
        Configuration for MPEG Common Encryption (MPEG-CENC).
        Structure is documented below.
        """
        sample_aes: NotRequired[pulumi.Input['JobConfigEncryptionSampleAesArgsDict']]
        """
        Configuration for SAMPLE-AES encryption.
        """
        secret_manager_key_source: NotRequired[pulumi.Input['JobConfigEncryptionSecretManagerKeySourceArgsDict']]
        """
        Configuration for secrets stored in Google Secret Manager.
        Structure is documented below.
        """
elif False:
    JobConfigEncryptionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class JobConfigEncryptionArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 aes128: Optional[pulumi.Input['JobConfigEncryptionAes128Args']] = None,
                 drm_systems: Optional[pulumi.Input['JobConfigEncryptionDrmSystemsArgs']] = None,
                 mpeg_cenc: Optional[pulumi.Input['JobConfigEncryptionMpegCencArgs']] = None,
                 sample_aes: Optional[pulumi.Input['JobConfigEncryptionSampleAesArgs']] = None,
                 secret_manager_key_source: Optional[pulumi.Input['JobConfigEncryptionSecretManagerKeySourceArgs']] = None):
        """
        :param pulumi.Input[str] id: Identifier for this set of encryption options.
        :param pulumi.Input['JobConfigEncryptionAes128Args'] aes128: Configuration for AES-128 encryption.
        :param pulumi.Input['JobConfigEncryptionDrmSystemsArgs'] drm_systems: DRM system(s) to use; at least one must be specified. If a DRM system is omitted, it is considered disabled.
               Structure is documented below.
        :param pulumi.Input['JobConfigEncryptionMpegCencArgs'] mpeg_cenc: Configuration for MPEG Common Encryption (MPEG-CENC).
               Structure is documented below.
        :param pulumi.Input['JobConfigEncryptionSampleAesArgs'] sample_aes: Configuration for SAMPLE-AES encryption.
        :param pulumi.Input['JobConfigEncryptionSecretManagerKeySourceArgs'] secret_manager_key_source: Configuration for secrets stored in Google Secret Manager.
               Structure is documented below.
        """
        pulumi.set(__self__, "id", id)
        if aes128 is not None:
            pulumi.set(__self__, "aes128", aes128)
        if drm_systems is not None:
            pulumi.set(__self__, "drm_systems", drm_systems)
        if mpeg_cenc is not None:
            pulumi.set(__self__, "mpeg_cenc", mpeg_cenc)
        if sample_aes is not None:
            pulumi.set(__self__, "sample_aes", sample_aes)
        if secret_manager_key_source is not None:
            pulumi.set(__self__, "secret_manager_key_source", secret_manager_key_source)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        Identifier for this set of encryption options.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def aes128(self) -> Optional[pulumi.Input['JobConfigEncryptionAes128Args']]:
        """
        Configuration for AES-128 encryption.
        """
        return pulumi.get(self, "aes128")

    @aes128.setter
    def aes128(self, value: Optional[pulumi.Input['JobConfigEncryptionAes128Args']]):
        pulumi.set(self, "aes128", value)

    @property
    @pulumi.getter(name="drmSystems")
    def drm_systems(self) -> Optional[pulumi.Input['JobConfigEncryptionDrmSystemsArgs']]:
        """
        DRM system(s) to use; at least one must be specified. If a DRM system is omitted, it is considered disabled.
        Structure is documented below.
        """
        return pulumi.get(self, "drm_systems")

    @drm_systems.setter
    def drm_systems(self, value: Optional[pulumi.Input['JobConfigEncryptionDrmSystemsArgs']]):
        pulumi.set(self, "drm_systems", value)

    @property
    @pulumi.getter(name="mpegCenc")
    def mpeg_cenc(self) -> Optional[pulumi.Input['JobConfigEncryptionMpegCencArgs']]:
        """
        Configuration for MPEG Common Encryption (MPEG-CENC).
        Structure is documented below.
        """
        return pulumi.get(self, "mpeg_cenc")

    @mpeg_cenc.setter
    def mpeg_cenc(self, value: Optional[pulumi.Input['JobConfigEncryptionMpegCencArgs']]):
        pulumi.set(self, "mpeg_cenc", value)

    @property
    @pulumi.getter(name="sampleAes")
    def sample_aes(self) -> Optional[pulumi.Input['JobConfigEncryptionSampleAesArgs']]:
        """
        Configuration for SAMPLE-AES encryption.
        """
        return pulumi.get(self, "sample_aes")

    @sample_aes.setter
    def sample_aes(self, value: Optional[pulumi.Input['JobConfigEncryptionSampleAesArgs']]):
        pulumi.set(self, "sample_aes", value)

    @property
    @pulumi.getter(name="secretManagerKeySource")
    def secret_manager_key_source(self) -> Optional[pulumi.Input['JobConfigEncryptionSecretManagerKeySourceArgs']]:
        """
        Configuration for secrets stored in Google Secret Manager.
        Structure is documented below.
        """
        return pulumi.get(self, "secret_manager_key_source")

    @secret_manager_key_source.setter
    def secret_manager_key_source(self, value: Optional[pulumi.Input['JobConfigEncryptionSecretManagerKeySourceArgs']]):
        pulumi.set(self, "secret_manager_key_source", value)


if not MYPY:
    class JobConfigEncryptionAes128ArgsDict(TypedDict):
        pass
elif False:
    JobConfigEncryptionAes128ArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class JobConfigEncryptionAes128Args:
    def __init__(__self__):
        pass


if not MYPY:
    class JobConfigEncryptionDrmSystemsArgsDict(TypedDict):
        clearkey: NotRequired[pulumi.Input['JobConfigEncryptionDrmSystemsClearkeyArgsDict']]
        """
        Clearkey configuration.
        """
        fairplay: NotRequired[pulumi.Input['JobConfigEncryptionDrmSystemsFairplayArgsDict']]
        """
        Fairplay configuration.
        """
        playready: NotRequired[pulumi.Input['JobConfigEncryptionDrmSystemsPlayreadyArgsDict']]
        """
        Playready configuration.
        """
        widevine: NotRequired[pulumi.Input['JobConfigEncryptionDrmSystemsWidevineArgsDict']]
        """
        Widevine configuration.
        """
elif False:
    JobConfigEncryptionDrmSystemsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class JobConfigEncryptionDrmSystemsArgs:
    def __init__(__self__, *,
                 clearkey: Optional[pulumi.Input['JobConfigEncryptionDrmSystemsClearkeyArgs']] = None,
                 fairplay: Optional[pulumi.Input['JobConfigEncryptionDrmSystemsFairplayArgs']] = None,
                 playready: Optional[pulumi.Input['JobConfigEncryptionDrmSystemsPlayreadyArgs']] = None,
                 widevine: Optional[pulumi.Input['JobConfigEncryptionDrmSystemsWidevineArgs']] = None):
        """
        :param pulumi.Input['JobConfigEncryptionDrmSystemsClearkeyArgs'] clearkey: Clearkey configuration.
        :param pulumi.Input['JobConfigEncryptionDrmSystemsFairplayArgs'] fairplay: Fairplay configuration.
        :param pulumi.Input['JobConfigEncryptionDrmSystemsPlayreadyArgs'] playready: Playready configuration.
        :param pulumi.Input['JobConfigEncryptionDrmSystemsWidevineArgs'] widevine: Widevine configuration.
        """
        if clearkey is not None:
            pulumi.set(__self__, "clearkey", clearkey)
        if fairplay is not None:
            pulumi.set(__self__, "fairplay", fairplay)
        if playready is not None:
            pulumi.set(__self__, "playready", playready)
        if widevine is not None:
            pulumi.set(__self__, "widevine", widevine)

    @property
    @pulumi.getter
    def clearkey(self) -> Optional[pulumi.Input['JobConfigEncryptionDrmSystemsClearkeyArgs']]:
        """
        Clearkey configuration.
        """
        return pulumi.get(self, "clearkey")

    @clearkey.setter
    def clearkey(self, value: Optional[pulumi.Input['JobConfigEncryptionDrmSystemsClearkeyArgs']]):
        pulumi.set(self, "clearkey", value)

    @property
    @pulumi.getter
    def fairplay(self) -> Optional[pulumi.Input['JobConfigEncryptionDrmSystemsFairplayArgs']]:
        """
        Fairplay configuration.
        """
        return pulumi.get(self, "fairplay")

    @fairplay.setter
    def fairplay(self, value: Optional[pulumi.Input['JobConfigEncryptionDrmSystemsFairplayArgs']]):
        pulumi.set(self, "fairplay", value)

    @property
    @pulumi.getter
    def playready(self) -> Optional[pulumi.Input['JobConfigEncryptionDrmSystemsPlayreadyArgs']]:
        """
        Playready configuration.
        """
        return pulumi.get(self, "playready")

    @playready.setter
    def playready(self, value: Optional[pulumi.Input['JobConfigEncryptionDrmSystemsPlayreadyArgs']]):
        pulumi.set(self, "playready", value)

    @property
    @pulumi.getter
    def widevine(self) -> Optional[pulumi.Input['JobConfigEncryptionDrmSystemsWidevineArgs']]:
        """
        Widevine configuration.
        """
        return pulumi.get(self, "widevine")

    @widevine.setter
    def widevine(self, value: Optional[pulumi.Input['JobConfigEncryptionDrmSystemsWidevineArgs']]):
        pulumi.set(self, "widevine", value)


if not MYPY:
    class JobConfigEncryptionDrmSystemsClearkeyArgsDict(TypedDict):
        pass
elif False:
    JobConfigEncryptionDrmSystemsClearkeyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class JobConfigEncryptionDrmSystemsClearkeyArgs:
    def __init__(__self__):
        pass


if not MYPY:
    class JobConfigEncryptionDrmSystemsFairplayArgsDict(TypedDict):
        pass
elif False:
    JobConfigEncryptionDrmSystemsFairplayArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class JobConfigEncryptionDrmSystemsFairplayArgs:
    def __init__(__self__):
        pass


if not MYPY:
    class JobConfigEncryptionDrmSystemsPlayreadyArgsDict(TypedDict):
        pass
elif False:
    JobConfigEncryptionDrmSystemsPlayreadyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class JobConfigEncryptionDrmSystemsPlayreadyArgs:
    def __init__(__self__):
        pass


if not MYPY:
    class JobConfigEncryptionDrmSystemsWidevineArgsDict(TypedDict):
        pass
elif False:
    JobConfigEncryptionDrmSystemsWidevineArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class JobConfigEncryptionDrmSystemsWidevineArgs:
    def __init__(__self__):
        pass


if not MYPY:
    class JobConfigEncryptionMpegCencArgsDict(TypedDict):
        scheme: pulumi.Input[str]
        """
        Specify the encryption scheme.
        """
elif False:
    JobConfigEncryptionMpegCencArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class JobConfigEncryptionMpegCencArgs:
    def __init__(__self__, *,
                 scheme: pulumi.Input[str]):
        """
        :param pulumi.Input[str] scheme: Specify the encryption scheme.
        """
        pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def scheme(self) -> pulumi.Input[str]:
        """
        Specify the encryption scheme.
        """
        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: pulumi.Input[str]):
        pulumi.set(self, "scheme", value)


if not MYPY:
    class JobConfigEncryptionSampleAesArgsDict(TypedDict):
        pass
elif False:
    JobConfigEncryptionSampleAesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class JobConfigEncryptionSampleAesArgs:
    def __init__(__self__):
        pass


if not MYPY:
    class JobConfigEncryptionSecretManagerKeySourceArgsDict(TypedDict):
        secret_version: pulumi.Input[str]
        """
        The name of the Secret Version containing the encryption key in the following format: projects/{project}/secrets/{secret_id}/versions/{version_number}.
        """
elif False:
    JobConfigEncryptionSecretManagerKeySourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class JobConfigEncryptionSecretManagerKeySourceArgs:
    def __init__(__self__, *,
                 secret_version: pulumi.Input[str]):
        """
        :param pulumi.Input[str] secret_version: The name of the Secret Version containing the encryption key in the following format: projects/{project}/secrets/{secret_id}/versions/{version_number}.
        """
        pulumi.set(__self__, "secret_version", secret_version)

    @property
    @pulumi.getter(name="secretVersion")
    def secret_version(self) -> pulumi.Input[str]:
        """
        The name of the Secret Version containing the encryption key in the following format: projects/{project}/secrets/{secret_id}/versions/{version_number}.
        """
        return pulumi.get(self, "secret_version")

    @secret_version.setter
    def secret_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_version", value)


if not MYPY:
    class JobConfigInputArgsDict(TypedDict):
        key: NotRequired[pulumi.Input[str]]
        """
        A unique key for this input. Must be specified when using advanced mapping and edit lists.
        """
        uri: NotRequired[pulumi.Input[str]]
        """
        URI of the media. Input files must be at least 5 seconds in duration and stored in Cloud Storage (for example, gs://bucket/inputs/file.mp4).
        If empty, the value is populated from Job.input_uri.
        """
elif False:
    JobConfigInputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class JobConfigInputArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 uri: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] key: A unique key for this input. Must be specified when using advanced mapping and edit lists.
        :param pulumi.Input[str] uri: URI of the media. Input files must be at least 5 seconds in duration and stored in Cloud Storage (for example, gs://bucket/inputs/file.mp4).
               If empty, the value is populated from Job.input_uri.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        A unique key for this input. Must be specified when using advanced mapping and edit lists.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        """
        URI of the media. Input files must be at least 5 seconds in duration and stored in Cloud Storage (for example, gs://bucket/inputs/file.mp4).
        If empty, the value is populated from Job.input_uri.
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)


if not MYPY:
    class JobConfigManifestArgsDict(TypedDict):
        file_name: NotRequired[pulumi.Input[str]]
        """
        The name of the generated file. The default is `manifest`.
        """
        mux_streams: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        List of user supplied MuxStream.key values that should appear in this manifest.
        """
        type: NotRequired[pulumi.Input[str]]
        """
        Type of the manifest.
        Possible values are: `MANIFEST_TYPE_UNSPECIFIED`, `HLS`, `DASH`.
        """
elif False:
    JobConfigManifestArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class JobConfigManifestArgs:
    def __init__(__self__, *,
                 file_name: Optional[pulumi.Input[str]] = None,
                 mux_streams: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] file_name: The name of the generated file. The default is `manifest`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] mux_streams: List of user supplied MuxStream.key values that should appear in this manifest.
        :param pulumi.Input[str] type: Type of the manifest.
               Possible values are: `MANIFEST_TYPE_UNSPECIFIED`, `HLS`, `DASH`.
        """
        if file_name is not None:
            pulumi.set(__self__, "file_name", file_name)
        if mux_streams is not None:
            pulumi.set(__self__, "mux_streams", mux_streams)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="fileName")
    def file_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the generated file. The default is `manifest`.
        """
        return pulumi.get(self, "file_name")

    @file_name.setter
    def file_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_name", value)

    @property
    @pulumi.getter(name="muxStreams")
    def mux_streams(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of user supplied MuxStream.key values that should appear in this manifest.
        """
        return pulumi.get(self, "mux_streams")

    @mux_streams.setter
    def mux_streams(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "mux_streams", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the manifest.
        Possible values are: `MANIFEST_TYPE_UNSPECIFIED`, `HLS`, `DASH`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class JobConfigMuxStreamArgsDict(TypedDict):
        container: NotRequired[pulumi.Input[str]]
        """
        The container format. The default is `mp4`.
        """
        elementary_streams: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        List of ElementaryStream.key values multiplexed in this stream.
        """
        encryption_id: NotRequired[pulumi.Input[str]]
        """
        Identifier of the encryption configuration to use.
        """
        file_name: NotRequired[pulumi.Input[str]]
        """
        The name of the generated file.
        """
        key: NotRequired[pulumi.Input[str]]
        """
        A unique key for this multiplexed stream.
        """
        segment_settings: NotRequired[pulumi.Input['JobConfigMuxStreamSegmentSettingsArgsDict']]
        """
        Segment settings for ts, fmp4 and vtt.
        Structure is documented below.
        """
elif False:
    JobConfigMuxStreamArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class JobConfigMuxStreamArgs:
    def __init__(__self__, *,
                 container: Optional[pulumi.Input[str]] = None,
                 elementary_streams: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 encryption_id: Optional[pulumi.Input[str]] = None,
                 file_name: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 segment_settings: Optional[pulumi.Input['JobConfigMuxStreamSegmentSettingsArgs']] = None):
        """
        :param pulumi.Input[str] container: The container format. The default is `mp4`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] elementary_streams: List of ElementaryStream.key values multiplexed in this stream.
        :param pulumi.Input[str] encryption_id: Identifier of the encryption configuration to use.
        :param pulumi.Input[str] file_name: The name of the generated file.
        :param pulumi.Input[str] key: A unique key for this multiplexed stream.
        :param pulumi.Input['JobConfigMuxStreamSegmentSettingsArgs'] segment_settings: Segment settings for ts, fmp4 and vtt.
               Structure is documented below.
        """
        if container is not None:
            pulumi.set(__self__, "container", container)
        if elementary_streams is not None:
            pulumi.set(__self__, "elementary_streams", elementary_streams)
        if encryption_id is not None:
            pulumi.set(__self__, "encryption_id", encryption_id)
        if file_name is not None:
            pulumi.set(__self__, "file_name", file_name)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if segment_settings is not None:
            pulumi.set(__self__, "segment_settings", segment_settings)

    @property
    @pulumi.getter
    def container(self) -> Optional[pulumi.Input[str]]:
        """
        The container format. The default is `mp4`.
        """
        return pulumi.get(self, "container")

    @container.setter
    def container(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container", value)

    @property
    @pulumi.getter(name="elementaryStreams")
    def elementary_streams(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of ElementaryStream.key values multiplexed in this stream.
        """
        return pulumi.get(self, "elementary_streams")

    @elementary_streams.setter
    def elementary_streams(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "elementary_streams", value)

    @property
    @pulumi.getter(name="encryptionId")
    def encryption_id(self) -> Optional[pulumi.Input[str]]:
        """
        Identifier of the encryption configuration to use.
        """
        return pulumi.get(self, "encryption_id")

    @encryption_id.setter
    def encryption_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encryption_id", value)

    @property
    @pulumi.getter(name="fileName")
    def file_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the generated file.
        """
        return pulumi.get(self, "file_name")

    @file_name.setter
    def file_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_name", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        A unique key for this multiplexed stream.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="segmentSettings")
    def segment_settings(self) -> Optional[pulumi.Input['JobConfigMuxStreamSegmentSettingsArgs']]:
        """
        Segment settings for ts, fmp4 and vtt.
        Structure is documented below.
        """
        return pulumi.get(self, "segment_settings")

    @segment_settings.setter
    def segment_settings(self, value: Optional[pulumi.Input['JobConfigMuxStreamSegmentSettingsArgs']]):
        pulumi.set(self, "segment_settings", value)


if not MYPY:
    class JobConfigMuxStreamSegmentSettingsArgsDict(TypedDict):
        segment_duration: NotRequired[pulumi.Input[str]]
        """
        Duration of the segments in seconds. The default is `6.0s`.
        """
elif False:
    JobConfigMuxStreamSegmentSettingsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class JobConfigMuxStreamSegmentSettingsArgs:
    def __init__(__self__, *,
                 segment_duration: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] segment_duration: Duration of the segments in seconds. The default is `6.0s`.
        """
        if segment_duration is not None:
            pulumi.set(__self__, "segment_duration", segment_duration)

    @property
    @pulumi.getter(name="segmentDuration")
    def segment_duration(self) -> Optional[pulumi.Input[str]]:
        """
        Duration of the segments in seconds. The default is `6.0s`.
        """
        return pulumi.get(self, "segment_duration")

    @segment_duration.setter
    def segment_duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "segment_duration", value)


if not MYPY:
    class JobConfigOutputArgsDict(TypedDict):
        uri: NotRequired[pulumi.Input[str]]
        """
        URI for the output file(s). For example, gs://my-bucket/outputs/.
        """
elif False:
    JobConfigOutputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class JobConfigOutputArgs:
    def __init__(__self__, *,
                 uri: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] uri: URI for the output file(s). For example, gs://my-bucket/outputs/.
        """
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        """
        URI for the output file(s). For example, gs://my-bucket/outputs/.
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)


if not MYPY:
    class JobConfigOverlayArgsDict(TypedDict):
        animations: NotRequired[pulumi.Input[Sequence[pulumi.Input['JobConfigOverlayAnimationArgsDict']]]]
        """
        List of animations. The list should be chronological, without any time overlap.
        Structure is documented below.
        """
        image: NotRequired[pulumi.Input['JobConfigOverlayImageArgsDict']]
        """
        Image overlay.
        Structure is documented below.
        """
elif False:
    JobConfigOverlayArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class JobConfigOverlayArgs:
    def __init__(__self__, *,
                 animations: Optional[pulumi.Input[Sequence[pulumi.Input['JobConfigOverlayAnimationArgs']]]] = None,
                 image: Optional[pulumi.Input['JobConfigOverlayImageArgs']] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['JobConfigOverlayAnimationArgs']]] animations: List of animations. The list should be chronological, without any time overlap.
               Structure is documented below.
        :param pulumi.Input['JobConfigOverlayImageArgs'] image: Image overlay.
               Structure is documented below.
        """
        if animations is not None:
            pulumi.set(__self__, "animations", animations)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter
    def animations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['JobConfigOverlayAnimationArgs']]]]:
        """
        List of animations. The list should be chronological, without any time overlap.
        Structure is documented below.
        """
        return pulumi.get(self, "animations")

    @animations.setter
    def animations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['JobConfigOverlayAnimationArgs']]]]):
        pulumi.set(self, "animations", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['JobConfigOverlayImageArgs']]:
        """
        Image overlay.
        Structure is documented below.
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['JobConfigOverlayImageArgs']]):
        pulumi.set(self, "image", value)


if not MYPY:
    class JobConfigOverlayAnimationArgsDict(TypedDict):
        animation_fade: NotRequired[pulumi.Input['JobConfigOverlayAnimationAnimationFadeArgsDict']]
        """
        Display overlay object with fade animation.
        Structure is documented below.
        """
elif False:
    JobConfigOverlayAnimationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class JobConfigOverlayAnimationArgs:
    def __init__(__self__, *,
                 animation_fade: Optional[pulumi.Input['JobConfigOverlayAnimationAnimationFadeArgs']] = None):
        """
        :param pulumi.Input['JobConfigOverlayAnimationAnimationFadeArgs'] animation_fade: Display overlay object with fade animation.
               Structure is documented below.
        """
        if animation_fade is not None:
            pulumi.set(__self__, "animation_fade", animation_fade)

    @property
    @pulumi.getter(name="animationFade")
    def animation_fade(self) -> Optional[pulumi.Input['JobConfigOverlayAnimationAnimationFadeArgs']]:
        """
        Display overlay object with fade animation.
        Structure is documented below.
        """
        return pulumi.get(self, "animation_fade")

    @animation_fade.setter
    def animation_fade(self, value: Optional[pulumi.Input['JobConfigOverlayAnimationAnimationFadeArgs']]):
        pulumi.set(self, "animation_fade", value)


if not MYPY:
    class JobConfigOverlayAnimationAnimationFadeArgsDict(TypedDict):
        fade_type: pulumi.Input[str]
        """
        Required. Type of fade animation: `FADE_IN` or `FADE_OUT`.
        The possible values are:
        * `FADE_TYPE_UNSPECIFIED`: The fade type is not specified.
        * `FADE_IN`: Fade the overlay object into view.
        * `FADE_OUT`: Fade the overlay object out of view.
        Possible values are: `FADE_TYPE_UNSPECIFIED`, `FADE_IN`, `FADE_OUT`.
        """
        end_time_offset: NotRequired[pulumi.Input[str]]
        """
        The time to end the fade animation, in seconds.
        """
        start_time_offset: NotRequired[pulumi.Input[str]]
        """
        The time to start the fade animation, in seconds.
        """
        xy: NotRequired[pulumi.Input['JobConfigOverlayAnimationAnimationFadeXyArgsDict']]
        """
        Normalized coordinates based on output video resolution.
        Structure is documented below.
        """
elif False:
    JobConfigOverlayAnimationAnimationFadeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class JobConfigOverlayAnimationAnimationFadeArgs:
    def __init__(__self__, *,
                 fade_type: pulumi.Input[str],
                 end_time_offset: Optional[pulumi.Input[str]] = None,
                 start_time_offset: Optional[pulumi.Input[str]] = None,
                 xy: Optional[pulumi.Input['JobConfigOverlayAnimationAnimationFadeXyArgs']] = None):
        """
        :param pulumi.Input[str] fade_type: Required. Type of fade animation: `FADE_IN` or `FADE_OUT`.
               The possible values are:
               * `FADE_TYPE_UNSPECIFIED`: The fade type is not specified.
               * `FADE_IN`: Fade the overlay object into view.
               * `FADE_OUT`: Fade the overlay object out of view.
               Possible values are: `FADE_TYPE_UNSPECIFIED`, `FADE_IN`, `FADE_OUT`.
        :param pulumi.Input[str] end_time_offset: The time to end the fade animation, in seconds.
        :param pulumi.Input[str] start_time_offset: The time to start the fade animation, in seconds.
        :param pulumi.Input['JobConfigOverlayAnimationAnimationFadeXyArgs'] xy: Normalized coordinates based on output video resolution.
               Structure is documented below.
        """
        pulumi.set(__self__, "fade_type", fade_type)
        if end_time_offset is not None:
            pulumi.set(__self__, "end_time_offset", end_time_offset)
        if start_time_offset is not None:
            pulumi.set(__self__, "start_time_offset", start_time_offset)
        if xy is not None:
            pulumi.set(__self__, "xy", xy)

    @property
    @pulumi.getter(name="fadeType")
    def fade_type(self) -> pulumi.Input[str]:
        """
        Required. Type of fade animation: `FADE_IN` or `FADE_OUT`.
        The possible values are:
        * `FADE_TYPE_UNSPECIFIED`: The fade type is not specified.
        * `FADE_IN`: Fade the overlay object into view.
        * `FADE_OUT`: Fade the overlay object out of view.
        Possible values are: `FADE_TYPE_UNSPECIFIED`, `FADE_IN`, `FADE_OUT`.
        """
        return pulumi.get(self, "fade_type")

    @fade_type.setter
    def fade_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "fade_type", value)

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> Optional[pulumi.Input[str]]:
        """
        The time to end the fade animation, in seconds.
        """
        return pulumi.get(self, "end_time_offset")

    @end_time_offset.setter
    def end_time_offset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_time_offset", value)

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> Optional[pulumi.Input[str]]:
        """
        The time to start the fade animation, in seconds.
        """
        return pulumi.get(self, "start_time_offset")

    @start_time_offset.setter
    def start_time_offset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_time_offset", value)

    @property
    @pulumi.getter
    def xy(self) -> Optional[pulumi.Input['JobConfigOverlayAnimationAnimationFadeXyArgs']]:
        """
        Normalized coordinates based on output video resolution.
        Structure is documented below.
        """
        return pulumi.get(self, "xy")

    @xy.setter
    def xy(self, value: Optional[pulumi.Input['JobConfigOverlayAnimationAnimationFadeXyArgs']]):
        pulumi.set(self, "xy", value)


if not MYPY:
    class JobConfigOverlayAnimationAnimationFadeXyArgsDict(TypedDict):
        x: NotRequired[pulumi.Input[float]]
        """
        Normalized x coordinate.
        """
        y: NotRequired[pulumi.Input[float]]
        """
        Normalized y coordinate.
        """
elif False:
    JobConfigOverlayAnimationAnimationFadeXyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class JobConfigOverlayAnimationAnimationFadeXyArgs:
    def __init__(__self__, *,
                 x: Optional[pulumi.Input[float]] = None,
                 y: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[float] x: Normalized x coordinate.
        :param pulumi.Input[float] y: Normalized y coordinate.
        """
        if x is not None:
            pulumi.set(__self__, "x", x)
        if y is not None:
            pulumi.set(__self__, "y", y)

    @property
    @pulumi.getter
    def x(self) -> Optional[pulumi.Input[float]]:
        """
        Normalized x coordinate.
        """
        return pulumi.get(self, "x")

    @x.setter
    def x(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "x", value)

    @property
    @pulumi.getter
    def y(self) -> Optional[pulumi.Input[float]]:
        """
        Normalized y coordinate.
        """
        return pulumi.get(self, "y")

    @y.setter
    def y(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "y", value)


if not MYPY:
    class JobConfigOverlayImageArgsDict(TypedDict):
        uri: pulumi.Input[str]
        """
        URI of the image in Cloud Storage. For example, gs://bucket/inputs/image.png.
        """
elif False:
    JobConfigOverlayImageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class JobConfigOverlayImageArgs:
    def __init__(__self__, *,
                 uri: pulumi.Input[str]):
        """
        :param pulumi.Input[str] uri: URI of the image in Cloud Storage. For example, gs://bucket/inputs/image.png.
        """
        pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def uri(self) -> pulumi.Input[str]:
        """
        URI of the image in Cloud Storage. For example, gs://bucket/inputs/image.png.
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "uri", value)


if not MYPY:
    class JobConfigPubsubDestinationArgsDict(TypedDict):
        topic: NotRequired[pulumi.Input[str]]
        """
        The name of the Pub/Sub topic to publish job completion notification to. For example: projects/{project}/topics/{topic}.
        """
elif False:
    JobConfigPubsubDestinationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class JobConfigPubsubDestinationArgs:
    def __init__(__self__, *,
                 topic: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] topic: The name of the Pub/Sub topic to publish job completion notification to. For example: projects/{project}/topics/{topic}.
        """
        if topic is not None:
            pulumi.set(__self__, "topic", topic)

    @property
    @pulumi.getter
    def topic(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Pub/Sub topic to publish job completion notification to. For example: projects/{project}/topics/{topic}.
        """
        return pulumi.get(self, "topic")

    @topic.setter
    def topic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic", value)


if not MYPY:
    class JobTemplateConfigArgsDict(TypedDict):
        ad_breaks: NotRequired[pulumi.Input[Sequence[pulumi.Input['JobTemplateConfigAdBreakArgsDict']]]]
        """
        Ad break.
        Structure is documented below.
        """
        edit_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input['JobTemplateConfigEditListArgsDict']]]]
        """
        List of input assets stored in Cloud Storage.
        Structure is documented below.
        """
        elementary_streams: NotRequired[pulumi.Input[Sequence[pulumi.Input['JobTemplateConfigElementaryStreamArgsDict']]]]
        """
        List of input assets stored in Cloud Storage.
        Structure is documented below.
        """
        encryptions: NotRequired[pulumi.Input[Sequence[pulumi.Input['JobTemplateConfigEncryptionArgsDict']]]]
        """
        List of encryption configurations for the content.
        Structure is documented below.
        """
        inputs: NotRequired[pulumi.Input[Sequence[pulumi.Input['JobTemplateConfigInputArgsDict']]]]
        """
        List of input assets stored in Cloud Storage.
        Structure is documented below.
        """
        manifests: NotRequired[pulumi.Input[Sequence[pulumi.Input['JobTemplateConfigManifestArgsDict']]]]
        """
        Manifest configuration.
        Structure is documented below.
        """
        mux_streams: NotRequired[pulumi.Input[Sequence[pulumi.Input['JobTemplateConfigMuxStreamArgsDict']]]]
        """
        Multiplexing settings for output stream.
        Structure is documented below.
        """
        output: NotRequired[pulumi.Input['JobTemplateConfigOutputArgsDict']]
        """
        Location of output file(s) in a Cloud Storage bucket.
        Structure is documented below.
        """
        overlays: NotRequired[pulumi.Input[Sequence[pulumi.Input['JobTemplateConfigOverlayArgsDict']]]]
        """
        List of overlays on the output video, in descending Z-order.
        Structure is documented below.
        """
        pubsub_destination: NotRequired[pulumi.Input['JobTemplateConfigPubsubDestinationArgsDict']]
        """
        Pub/Sub destination.
        Structure is documented below.
        """
elif False:
    JobTemplateConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class JobTemplateConfigArgs:
    def __init__(__self__, *,
                 ad_breaks: Optional[pulumi.Input[Sequence[pulumi.Input['JobTemplateConfigAdBreakArgs']]]] = None,
                 edit_lists: Optional[pulumi.Input[Sequence[pulumi.Input['JobTemplateConfigEditListArgs']]]] = None,
                 elementary_streams: Optional[pulumi.Input[Sequence[pulumi.Input['JobTemplateConfigElementaryStreamArgs']]]] = None,
                 encryptions: Optional[pulumi.Input[Sequence[pulumi.Input['JobTemplateConfigEncryptionArgs']]]] = None,
                 inputs: Optional[pulumi.Input[Sequence[pulumi.Input['JobTemplateConfigInputArgs']]]] = None,
                 manifests: Optional[pulumi.Input[Sequence[pulumi.Input['JobTemplateConfigManifestArgs']]]] = None,
                 mux_streams: Optional[pulumi.Input[Sequence[pulumi.Input['JobTemplateConfigMuxStreamArgs']]]] = None,
                 output: Optional[pulumi.Input['JobTemplateConfigOutputArgs']] = None,
                 overlays: Optional[pulumi.Input[Sequence[pulumi.Input['JobTemplateConfigOverlayArgs']]]] = None,
                 pubsub_destination: Optional[pulumi.Input['JobTemplateConfigPubsubDestinationArgs']] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['JobTemplateConfigAdBreakArgs']]] ad_breaks: Ad break.
               Structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['JobTemplateConfigEditListArgs']]] edit_lists: List of input assets stored in Cloud Storage.
               Structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['JobTemplateConfigElementaryStreamArgs']]] elementary_streams: List of input assets stored in Cloud Storage.
               Structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['JobTemplateConfigEncryptionArgs']]] encryptions: List of encryption configurations for the content.
               Structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['JobTemplateConfigInputArgs']]] inputs: List of input assets stored in Cloud Storage.
               Structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['JobTemplateConfigManifestArgs']]] manifests: Manifest configuration.
               Structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['JobTemplateConfigMuxStreamArgs']]] mux_streams: Multiplexing settings for output stream.
               Structure is documented below.
        :param pulumi.Input['JobTemplateConfigOutputArgs'] output: Location of output file(s) in a Cloud Storage bucket.
               Structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['JobTemplateConfigOverlayArgs']]] overlays: List of overlays on the output video, in descending Z-order.
               Structure is documented below.
        :param pulumi.Input['JobTemplateConfigPubsubDestinationArgs'] pubsub_destination: Pub/Sub destination.
               Structure is documented below.
        """
        if ad_breaks is not None:
            pulumi.set(__self__, "ad_breaks", ad_breaks)
        if edit_lists is not None:
            pulumi.set(__self__, "edit_lists", edit_lists)
        if elementary_streams is not None:
            pulumi.set(__self__, "elementary_streams", elementary_streams)
        if encryptions is not None:
            pulumi.set(__self__, "encryptions", encryptions)
        if inputs is not None:
            pulumi.set(__self__, "inputs", inputs)
        if manifests is not None:
            pulumi.set(__self__, "manifests", manifests)
        if mux_streams is not None:
            pulumi.set(__self__, "mux_streams", mux_streams)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if overlays is not None:
            pulumi.set(__self__, "overlays", overlays)
        if pubsub_destination is not None:
            pulumi.set(__self__, "pubsub_destination", pubsub_destination)

    @property
    @pulumi.getter(name="adBreaks")
    def ad_breaks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['JobTemplateConfigAdBreakArgs']]]]:
        """
        Ad break.
        Structure is documented below.
        """
        return pulumi.get(self, "ad_breaks")

    @ad_breaks.setter
    def ad_breaks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['JobTemplateConfigAdBreakArgs']]]]):
        pulumi.set(self, "ad_breaks", value)

    @property
    @pulumi.getter(name="editLists")
    def edit_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['JobTemplateConfigEditListArgs']]]]:
        """
        List of input assets stored in Cloud Storage.
        Structure is documented below.
        """
        return pulumi.get(self, "edit_lists")

    @edit_lists.setter
    def edit_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['JobTemplateConfigEditListArgs']]]]):
        pulumi.set(self, "edit_lists", value)

    @property
    @pulumi.getter(name="elementaryStreams")
    def elementary_streams(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['JobTemplateConfigElementaryStreamArgs']]]]:
        """
        List of input assets stored in Cloud Storage.
        Structure is documented below.
        """
        return pulumi.get(self, "elementary_streams")

    @elementary_streams.setter
    def elementary_streams(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['JobTemplateConfigElementaryStreamArgs']]]]):
        pulumi.set(self, "elementary_streams", value)

    @property
    @pulumi.getter
    def encryptions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['JobTemplateConfigEncryptionArgs']]]]:
        """
        List of encryption configurations for the content.
        Structure is documented below.
        """
        return pulumi.get(self, "encryptions")

    @encryptions.setter
    def encryptions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['JobTemplateConfigEncryptionArgs']]]]):
        pulumi.set(self, "encryptions", value)

    @property
    @pulumi.getter
    def inputs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['JobTemplateConfigInputArgs']]]]:
        """
        List of input assets stored in Cloud Storage.
        Structure is documented below.
        """
        return pulumi.get(self, "inputs")

    @inputs.setter
    def inputs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['JobTemplateConfigInputArgs']]]]):
        pulumi.set(self, "inputs", value)

    @property
    @pulumi.getter
    def manifests(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['JobTemplateConfigManifestArgs']]]]:
        """
        Manifest configuration.
        Structure is documented below.
        """
        return pulumi.get(self, "manifests")

    @manifests.setter
    def manifests(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['JobTemplateConfigManifestArgs']]]]):
        pulumi.set(self, "manifests", value)

    @property
    @pulumi.getter(name="muxStreams")
    def mux_streams(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['JobTemplateConfigMuxStreamArgs']]]]:
        """
        Multiplexing settings for output stream.
        Structure is documented below.
        """
        return pulumi.get(self, "mux_streams")

    @mux_streams.setter
    def mux_streams(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['JobTemplateConfigMuxStreamArgs']]]]):
        pulumi.set(self, "mux_streams", value)

    @property
    @pulumi.getter
    def output(self) -> Optional[pulumi.Input['JobTemplateConfigOutputArgs']]:
        """
        Location of output file(s) in a Cloud Storage bucket.
        Structure is documented below.
        """
        return pulumi.get(self, "output")

    @output.setter
    def output(self, value: Optional[pulumi.Input['JobTemplateConfigOutputArgs']]):
        pulumi.set(self, "output", value)

    @property
    @pulumi.getter
    def overlays(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['JobTemplateConfigOverlayArgs']]]]:
        """
        List of overlays on the output video, in descending Z-order.
        Structure is documented below.
        """
        return pulumi.get(self, "overlays")

    @overlays.setter
    def overlays(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['JobTemplateConfigOverlayArgs']]]]):
        pulumi.set(self, "overlays", value)

    @property
    @pulumi.getter(name="pubsubDestination")
    def pubsub_destination(self) -> Optional[pulumi.Input['JobTemplateConfigPubsubDestinationArgs']]:
        """
        Pub/Sub destination.
        Structure is documented below.
        """
        return pulumi.get(self, "pubsub_destination")

    @pubsub_destination.setter
    def pubsub_destination(self, value: Optional[pulumi.Input['JobTemplateConfigPubsubDestinationArgs']]):
        pulumi.set(self, "pubsub_destination", value)


if not MYPY:
    class JobTemplateConfigAdBreakArgsDict(TypedDict):
        start_time_offset: NotRequired[pulumi.Input[str]]
        """
        Start time in seconds for the ad break, relative to the output file timeline
        """
elif False:
    JobTemplateConfigAdBreakArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class JobTemplateConfigAdBreakArgs:
    def __init__(__self__, *,
                 start_time_offset: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] start_time_offset: Start time in seconds for the ad break, relative to the output file timeline
        """
        if start_time_offset is not None:
            pulumi.set(__self__, "start_time_offset", start_time_offset)

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> Optional[pulumi.Input[str]]:
        """
        Start time in seconds for the ad break, relative to the output file timeline
        """
        return pulumi.get(self, "start_time_offset")

    @start_time_offset.setter
    def start_time_offset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_time_offset", value)


if not MYPY:
    class JobTemplateConfigEditListArgsDict(TypedDict):
        inputs: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        List of values identifying files that should be used in this atom.
        """
        key: NotRequired[pulumi.Input[str]]
        """
        A unique key for this atom.
        """
        start_time_offset: NotRequired[pulumi.Input[str]]
        """
        Start time in seconds for the atom, relative to the input file timeline.  The default is `0s`.
        """
elif False:
    JobTemplateConfigEditListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class JobTemplateConfigEditListArgs:
    def __init__(__self__, *,
                 inputs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 start_time_offset: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] inputs: List of values identifying files that should be used in this atom.
        :param pulumi.Input[str] key: A unique key for this atom.
        :param pulumi.Input[str] start_time_offset: Start time in seconds for the atom, relative to the input file timeline.  The default is `0s`.
        """
        if inputs is not None:
            pulumi.set(__self__, "inputs", inputs)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if start_time_offset is not None:
            pulumi.set(__self__, "start_time_offset", start_time_offset)

    @property
    @pulumi.getter
    def inputs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of values identifying files that should be used in this atom.
        """
        return pulumi.get(self, "inputs")

    @inputs.setter
    def inputs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "inputs", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        A unique key for this atom.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> Optional[pulumi.Input[str]]:
        """
        Start time in seconds for the atom, relative to the input file timeline.  The default is `0s`.
        """
        return pulumi.get(self, "start_time_offset")

    @start_time_offset.setter
    def start_time_offset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_time_offset", value)


if not MYPY:
    class JobTemplateConfigElementaryStreamArgsDict(TypedDict):
        audio_stream: NotRequired[pulumi.Input['JobTemplateConfigElementaryStreamAudioStreamArgsDict']]
        """
        Encoding of an audio stream.
        Structure is documented below.
        """
        key: NotRequired[pulumi.Input[str]]
        """
        A unique key for this atom.
        """
        video_stream: NotRequired[pulumi.Input['JobTemplateConfigElementaryStreamVideoStreamArgsDict']]
        """
        Encoding of a video stream.
        Structure is documented below.
        """
elif False:
    JobTemplateConfigElementaryStreamArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class JobTemplateConfigElementaryStreamArgs:
    def __init__(__self__, *,
                 audio_stream: Optional[pulumi.Input['JobTemplateConfigElementaryStreamAudioStreamArgs']] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 video_stream: Optional[pulumi.Input['JobTemplateConfigElementaryStreamVideoStreamArgs']] = None):
        """
        :param pulumi.Input['JobTemplateConfigElementaryStreamAudioStreamArgs'] audio_stream: Encoding of an audio stream.
               Structure is documented below.
        :param pulumi.Input[str] key: A unique key for this atom.
        :param pulumi.Input['JobTemplateConfigElementaryStreamVideoStreamArgs'] video_stream: Encoding of a video stream.
               Structure is documented below.
        """
        if audio_stream is not None:
            pulumi.set(__self__, "audio_stream", audio_stream)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if video_stream is not None:
            pulumi.set(__self__, "video_stream", video_stream)

    @property
    @pulumi.getter(name="audioStream")
    def audio_stream(self) -> Optional[pulumi.Input['JobTemplateConfigElementaryStreamAudioStreamArgs']]:
        """
        Encoding of an audio stream.
        Structure is documented below.
        """
        return pulumi.get(self, "audio_stream")

    @audio_stream.setter
    def audio_stream(self, value: Optional[pulumi.Input['JobTemplateConfigElementaryStreamAudioStreamArgs']]):
        pulumi.set(self, "audio_stream", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        A unique key for this atom.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="videoStream")
    def video_stream(self) -> Optional[pulumi.Input['JobTemplateConfigElementaryStreamVideoStreamArgs']]:
        """
        Encoding of a video stream.
        Structure is documented below.
        """
        return pulumi.get(self, "video_stream")

    @video_stream.setter
    def video_stream(self, value: Optional[pulumi.Input['JobTemplateConfigElementaryStreamVideoStreamArgs']]):
        pulumi.set(self, "video_stream", value)


if not MYPY:
    class JobTemplateConfigElementaryStreamAudioStreamArgsDict(TypedDict):
        bitrate_bps: pulumi.Input[int]
        """
        Audio bitrate in bits per second.
        """
        channel_count: NotRequired[pulumi.Input[int]]
        """
        Number of audio channels. The default is `2`.
        """
        channel_layouts: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        A list of channel names specifying layout of the audio channels.  The default is ["fl", "fr"].
        """
        codec: NotRequired[pulumi.Input[str]]
        """
        The codec for this audio stream. The default is `aac`.
        """
        sample_rate_hertz: NotRequired[pulumi.Input[int]]
        """
        The audio sample rate in Hertz. The default is `48000`.
        """
elif False:
    JobTemplateConfigElementaryStreamAudioStreamArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class JobTemplateConfigElementaryStreamAudioStreamArgs:
    def __init__(__self__, *,
                 bitrate_bps: pulumi.Input[int],
                 channel_count: Optional[pulumi.Input[int]] = None,
                 channel_layouts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 codec: Optional[pulumi.Input[str]] = None,
                 sample_rate_hertz: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] bitrate_bps: Audio bitrate in bits per second.
        :param pulumi.Input[int] channel_count: Number of audio channels. The default is `2`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] channel_layouts: A list of channel names specifying layout of the audio channels.  The default is ["fl", "fr"].
        :param pulumi.Input[str] codec: The codec for this audio stream. The default is `aac`.
        :param pulumi.Input[int] sample_rate_hertz: The audio sample rate in Hertz. The default is `48000`.
        """
        pulumi.set(__self__, "bitrate_bps", bitrate_bps)
        if channel_count is not None:
            pulumi.set(__self__, "channel_count", channel_count)
        if channel_layouts is not None:
            pulumi.set(__self__, "channel_layouts", channel_layouts)
        if codec is not None:
            pulumi.set(__self__, "codec", codec)
        if sample_rate_hertz is not None:
            pulumi.set(__self__, "sample_rate_hertz", sample_rate_hertz)

    @property
    @pulumi.getter(name="bitrateBps")
    def bitrate_bps(self) -> pulumi.Input[int]:
        """
        Audio bitrate in bits per second.
        """
        return pulumi.get(self, "bitrate_bps")

    @bitrate_bps.setter
    def bitrate_bps(self, value: pulumi.Input[int]):
        pulumi.set(self, "bitrate_bps", value)

    @property
    @pulumi.getter(name="channelCount")
    def channel_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of audio channels. The default is `2`.
        """
        return pulumi.get(self, "channel_count")

    @channel_count.setter
    def channel_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "channel_count", value)

    @property
    @pulumi.getter(name="channelLayouts")
    def channel_layouts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of channel names specifying layout of the audio channels.  The default is ["fl", "fr"].
        """
        return pulumi.get(self, "channel_layouts")

    @channel_layouts.setter
    def channel_layouts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "channel_layouts", value)

    @property
    @pulumi.getter
    def codec(self) -> Optional[pulumi.Input[str]]:
        """
        The codec for this audio stream. The default is `aac`.
        """
        return pulumi.get(self, "codec")

    @codec.setter
    def codec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "codec", value)

    @property
    @pulumi.getter(name="sampleRateHertz")
    def sample_rate_hertz(self) -> Optional[pulumi.Input[int]]:
        """
        The audio sample rate in Hertz. The default is `48000`.
        """
        return pulumi.get(self, "sample_rate_hertz")

    @sample_rate_hertz.setter
    def sample_rate_hertz(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sample_rate_hertz", value)


if not MYPY:
    class JobTemplateConfigElementaryStreamVideoStreamArgsDict(TypedDict):
        h264: NotRequired[pulumi.Input['JobTemplateConfigElementaryStreamVideoStreamH264ArgsDict']]
        """
        H264 codec settings
        Structure is documented below.


        <a name="nested_h264"></a>The `h264` block supports:
        """
elif False:
    JobTemplateConfigElementaryStreamVideoStreamArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class JobTemplateConfigElementaryStreamVideoStreamArgs:
    def __init__(__self__, *,
                 h264: Optional[pulumi.Input['JobTemplateConfigElementaryStreamVideoStreamH264Args']] = None):
        """
        :param pulumi.Input['JobTemplateConfigElementaryStreamVideoStreamH264Args'] h264: H264 codec settings
               Structure is documented below.
               
               
               <a name="nested_h264"></a>The `h264` block supports:
        """
        if h264 is not None:
            pulumi.set(__self__, "h264", h264)

    @property
    @pulumi.getter
    def h264(self) -> Optional[pulumi.Input['JobTemplateConfigElementaryStreamVideoStreamH264Args']]:
        """
        H264 codec settings
        Structure is documented below.


        <a name="nested_h264"></a>The `h264` block supports:
        """
        return pulumi.get(self, "h264")

    @h264.setter
    def h264(self, value: Optional[pulumi.Input['JobTemplateConfigElementaryStreamVideoStreamH264Args']]):
        pulumi.set(self, "h264", value)


if not MYPY:
    class JobTemplateConfigElementaryStreamVideoStreamH264ArgsDict(TypedDict):
        bitrate_bps: pulumi.Input[int]
        """
        The video bitrate in bits per second.
        """
        frame_rate: pulumi.Input[int]
        """
        The target video frame rate in frames per second (FPS).
        """
        crf_level: NotRequired[pulumi.Input[int]]
        """
        Target CRF level. The default is '21'.
        """
        entropy_coder: NotRequired[pulumi.Input[str]]
        """
        The entropy coder to use. The default is 'cabac'.
        """
        gop_duration: NotRequired[pulumi.Input[str]]
        """
        Select the GOP size based on the specified duration. The default is '3s'.
        """
        height_pixels: NotRequired[pulumi.Input[int]]
        """
        The height of the video in pixels.
        """
        hlg: NotRequired[pulumi.Input['JobTemplateConfigElementaryStreamVideoStreamH264HlgArgsDict']]
        """
        HLG color format setting for H264.
        """
        pixel_format: NotRequired[pulumi.Input[str]]
        """
        Pixel format to use. The default is 'yuv420p'.
        """
        preset: NotRequired[pulumi.Input[str]]
        """
        Enforces the specified codec preset. The default is 'veryfast'.
        """
        profile: NotRequired[pulumi.Input[str]]
        """
        Enforces the specified codec profile.
        """
        rate_control_mode: NotRequired[pulumi.Input[str]]
        """
        Specify the mode. The default is 'vbr'.
        """
        sdr: NotRequired[pulumi.Input['JobTemplateConfigElementaryStreamVideoStreamH264SdrArgsDict']]
        """
        SDR color format setting for H264.
        """
        vbv_fullness_bits: NotRequired[pulumi.Input[int]]
        """
        Initial fullness of the Video Buffering Verifier (VBV) buffer in bits.
        """
        vbv_size_bits: NotRequired[pulumi.Input[int]]
        """
        Size of the Video Buffering Verifier (VBV) buffer in bits.
        """
        width_pixels: NotRequired[pulumi.Input[int]]
        """
        The width of the video in pixels.
        """
elif False:
    JobTemplateConfigElementaryStreamVideoStreamH264ArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class JobTemplateConfigElementaryStreamVideoStreamH264Args:
    def __init__(__self__, *,
                 bitrate_bps: pulumi.Input[int],
                 frame_rate: pulumi.Input[int],
                 crf_level: Optional[pulumi.Input[int]] = None,
                 entropy_coder: Optional[pulumi.Input[str]] = None,
                 gop_duration: Optional[pulumi.Input[str]] = None,
                 height_pixels: Optional[pulumi.Input[int]] = None,
                 hlg: Optional[pulumi.Input['JobTemplateConfigElementaryStreamVideoStreamH264HlgArgs']] = None,
                 pixel_format: Optional[pulumi.Input[str]] = None,
                 preset: Optional[pulumi.Input[str]] = None,
                 profile: Optional[pulumi.Input[str]] = None,
                 rate_control_mode: Optional[pulumi.Input[str]] = None,
                 sdr: Optional[pulumi.Input['JobTemplateConfigElementaryStreamVideoStreamH264SdrArgs']] = None,
                 vbv_fullness_bits: Optional[pulumi.Input[int]] = None,
                 vbv_size_bits: Optional[pulumi.Input[int]] = None,
                 width_pixels: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] bitrate_bps: The video bitrate in bits per second.
        :param pulumi.Input[int] frame_rate: The target video frame rate in frames per second (FPS).
        :param pulumi.Input[int] crf_level: Target CRF level. The default is '21'.
        :param pulumi.Input[str] entropy_coder: The entropy coder to use. The default is 'cabac'.
        :param pulumi.Input[str] gop_duration: Select the GOP size based on the specified duration. The default is '3s'.
        :param pulumi.Input[int] height_pixels: The height of the video in pixels.
        :param pulumi.Input['JobTemplateConfigElementaryStreamVideoStreamH264HlgArgs'] hlg: HLG color format setting for H264.
        :param pulumi.Input[str] pixel_format: Pixel format to use. The default is 'yuv420p'.
        :param pulumi.Input[str] preset: Enforces the specified codec preset. The default is 'veryfast'.
        :param pulumi.Input[str] profile: Enforces the specified codec profile.
        :param pulumi.Input[str] rate_control_mode: Specify the mode. The default is 'vbr'.
        :param pulumi.Input['JobTemplateConfigElementaryStreamVideoStreamH264SdrArgs'] sdr: SDR color format setting for H264.
        :param pulumi.Input[int] vbv_fullness_bits: Initial fullness of the Video Buffering Verifier (VBV) buffer in bits.
        :param pulumi.Input[int] vbv_size_bits: Size of the Video Buffering Verifier (VBV) buffer in bits.
        :param pulumi.Input[int] width_pixels: The width of the video in pixels.
        """
        pulumi.set(__self__, "bitrate_bps", bitrate_bps)
        pulumi.set(__self__, "frame_rate", frame_rate)
        if crf_level is not None:
            pulumi.set(__self__, "crf_level", crf_level)
        if entropy_coder is not None:
            pulumi.set(__self__, "entropy_coder", entropy_coder)
        if gop_duration is not None:
            pulumi.set(__self__, "gop_duration", gop_duration)
        if height_pixels is not None:
            pulumi.set(__self__, "height_pixels", height_pixels)
        if hlg is not None:
            pulumi.set(__self__, "hlg", hlg)
        if pixel_format is not None:
            pulumi.set(__self__, "pixel_format", pixel_format)
        if preset is not None:
            pulumi.set(__self__, "preset", preset)
        if profile is not None:
            pulumi.set(__self__, "profile", profile)
        if rate_control_mode is not None:
            pulumi.set(__self__, "rate_control_mode", rate_control_mode)
        if sdr is not None:
            pulumi.set(__self__, "sdr", sdr)
        if vbv_fullness_bits is not None:
            pulumi.set(__self__, "vbv_fullness_bits", vbv_fullness_bits)
        if vbv_size_bits is not None:
            pulumi.set(__self__, "vbv_size_bits", vbv_size_bits)
        if width_pixels is not None:
            pulumi.set(__self__, "width_pixels", width_pixels)

    @property
    @pulumi.getter(name="bitrateBps")
    def bitrate_bps(self) -> pulumi.Input[int]:
        """
        The video bitrate in bits per second.
        """
        return pulumi.get(self, "bitrate_bps")

    @bitrate_bps.setter
    def bitrate_bps(self, value: pulumi.Input[int]):
        pulumi.set(self, "bitrate_bps", value)

    @property
    @pulumi.getter(name="frameRate")
    def frame_rate(self) -> pulumi.Input[int]:
        """
        The target video frame rate in frames per second (FPS).
        """
        return pulumi.get(self, "frame_rate")

    @frame_rate.setter
    def frame_rate(self, value: pulumi.Input[int]):
        pulumi.set(self, "frame_rate", value)

    @property
    @pulumi.getter(name="crfLevel")
    def crf_level(self) -> Optional[pulumi.Input[int]]:
        """
        Target CRF level. The default is '21'.
        """
        return pulumi.get(self, "crf_level")

    @crf_level.setter
    def crf_level(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "crf_level", value)

    @property
    @pulumi.getter(name="entropyCoder")
    def entropy_coder(self) -> Optional[pulumi.Input[str]]:
        """
        The entropy coder to use. The default is 'cabac'.
        """
        return pulumi.get(self, "entropy_coder")

    @entropy_coder.setter
    def entropy_coder(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entropy_coder", value)

    @property
    @pulumi.getter(name="gopDuration")
    def gop_duration(self) -> Optional[pulumi.Input[str]]:
        """
        Select the GOP size based on the specified duration. The default is '3s'.
        """
        return pulumi.get(self, "gop_duration")

    @gop_duration.setter
    def gop_duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gop_duration", value)

    @property
    @pulumi.getter(name="heightPixels")
    def height_pixels(self) -> Optional[pulumi.Input[int]]:
        """
        The height of the video in pixels.
        """
        return pulumi.get(self, "height_pixels")

    @height_pixels.setter
    def height_pixels(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "height_pixels", value)

    @property
    @pulumi.getter
    def hlg(self) -> Optional[pulumi.Input['JobTemplateConfigElementaryStreamVideoStreamH264HlgArgs']]:
        """
        HLG color format setting for H264.
        """
        return pulumi.get(self, "hlg")

    @hlg.setter
    def hlg(self, value: Optional[pulumi.Input['JobTemplateConfigElementaryStreamVideoStreamH264HlgArgs']]):
        pulumi.set(self, "hlg", value)

    @property
    @pulumi.getter(name="pixelFormat")
    def pixel_format(self) -> Optional[pulumi.Input[str]]:
        """
        Pixel format to use. The default is 'yuv420p'.
        """
        return pulumi.get(self, "pixel_format")

    @pixel_format.setter
    def pixel_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pixel_format", value)

    @property
    @pulumi.getter
    def preset(self) -> Optional[pulumi.Input[str]]:
        """
        Enforces the specified codec preset. The default is 'veryfast'.
        """
        return pulumi.get(self, "preset")

    @preset.setter
    def preset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preset", value)

    @property
    @pulumi.getter
    def profile(self) -> Optional[pulumi.Input[str]]:
        """
        Enforces the specified codec profile.
        """
        return pulumi.get(self, "profile")

    @profile.setter
    def profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "profile", value)

    @property
    @pulumi.getter(name="rateControlMode")
    def rate_control_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Specify the mode. The default is 'vbr'.
        """
        return pulumi.get(self, "rate_control_mode")

    @rate_control_mode.setter
    def rate_control_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rate_control_mode", value)

    @property
    @pulumi.getter
    def sdr(self) -> Optional[pulumi.Input['JobTemplateConfigElementaryStreamVideoStreamH264SdrArgs']]:
        """
        SDR color format setting for H264.
        """
        return pulumi.get(self, "sdr")

    @sdr.setter
    def sdr(self, value: Optional[pulumi.Input['JobTemplateConfigElementaryStreamVideoStreamH264SdrArgs']]):
        pulumi.set(self, "sdr", value)

    @property
    @pulumi.getter(name="vbvFullnessBits")
    def vbv_fullness_bits(self) -> Optional[pulumi.Input[int]]:
        """
        Initial fullness of the Video Buffering Verifier (VBV) buffer in bits.
        """
        return pulumi.get(self, "vbv_fullness_bits")

    @vbv_fullness_bits.setter
    def vbv_fullness_bits(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vbv_fullness_bits", value)

    @property
    @pulumi.getter(name="vbvSizeBits")
    def vbv_size_bits(self) -> Optional[pulumi.Input[int]]:
        """
        Size of the Video Buffering Verifier (VBV) buffer in bits.
        """
        return pulumi.get(self, "vbv_size_bits")

    @vbv_size_bits.setter
    def vbv_size_bits(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vbv_size_bits", value)

    @property
    @pulumi.getter(name="widthPixels")
    def width_pixels(self) -> Optional[pulumi.Input[int]]:
        """
        The width of the video in pixels.
        """
        return pulumi.get(self, "width_pixels")

    @width_pixels.setter
    def width_pixels(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "width_pixels", value)


if not MYPY:
    class JobTemplateConfigElementaryStreamVideoStreamH264HlgArgsDict(TypedDict):
        pass
elif False:
    JobTemplateConfigElementaryStreamVideoStreamH264HlgArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class JobTemplateConfigElementaryStreamVideoStreamH264HlgArgs:
    def __init__(__self__):
        pass


if not MYPY:
    class JobTemplateConfigElementaryStreamVideoStreamH264SdrArgsDict(TypedDict):
        pass
elif False:
    JobTemplateConfigElementaryStreamVideoStreamH264SdrArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class JobTemplateConfigElementaryStreamVideoStreamH264SdrArgs:
    def __init__(__self__):
        pass


if not MYPY:
    class JobTemplateConfigEncryptionArgsDict(TypedDict):
        id: pulumi.Input[str]
        """
        Identifier for this set of encryption options.
        """
        aes128: NotRequired[pulumi.Input['JobTemplateConfigEncryptionAes128ArgsDict']]
        """
        Configuration for AES-128 encryption.
        """
        drm_systems: NotRequired[pulumi.Input['JobTemplateConfigEncryptionDrmSystemsArgsDict']]
        """
        DRM system(s) to use; at least one must be specified. If a DRM system is omitted, it is considered disabled.
        Structure is documented below.
        """
        mpeg_cenc: NotRequired[pulumi.Input['JobTemplateConfigEncryptionMpegCencArgsDict']]
        """
        Configuration for MPEG Common Encryption (MPEG-CENC).
        Structure is documented below.
        """
        sample_aes: NotRequired[pulumi.Input['JobTemplateConfigEncryptionSampleAesArgsDict']]
        """
        Configuration for SAMPLE-AES encryption.
        """
        secret_manager_key_source: NotRequired[pulumi.Input['JobTemplateConfigEncryptionSecretManagerKeySourceArgsDict']]
        """
        Configuration for secrets stored in Google Secret Manager.
        Structure is documented below.
        """
elif False:
    JobTemplateConfigEncryptionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class JobTemplateConfigEncryptionArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 aes128: Optional[pulumi.Input['JobTemplateConfigEncryptionAes128Args']] = None,
                 drm_systems: Optional[pulumi.Input['JobTemplateConfigEncryptionDrmSystemsArgs']] = None,
                 mpeg_cenc: Optional[pulumi.Input['JobTemplateConfigEncryptionMpegCencArgs']] = None,
                 sample_aes: Optional[pulumi.Input['JobTemplateConfigEncryptionSampleAesArgs']] = None,
                 secret_manager_key_source: Optional[pulumi.Input['JobTemplateConfigEncryptionSecretManagerKeySourceArgs']] = None):
        """
        :param pulumi.Input[str] id: Identifier for this set of encryption options.
        :param pulumi.Input['JobTemplateConfigEncryptionAes128Args'] aes128: Configuration for AES-128 encryption.
        :param pulumi.Input['JobTemplateConfigEncryptionDrmSystemsArgs'] drm_systems: DRM system(s) to use; at least one must be specified. If a DRM system is omitted, it is considered disabled.
               Structure is documented below.
        :param pulumi.Input['JobTemplateConfigEncryptionMpegCencArgs'] mpeg_cenc: Configuration for MPEG Common Encryption (MPEG-CENC).
               Structure is documented below.
        :param pulumi.Input['JobTemplateConfigEncryptionSampleAesArgs'] sample_aes: Configuration for SAMPLE-AES encryption.
        :param pulumi.Input['JobTemplateConfigEncryptionSecretManagerKeySourceArgs'] secret_manager_key_source: Configuration for secrets stored in Google Secret Manager.
               Structure is documented below.
        """
        pulumi.set(__self__, "id", id)
        if aes128 is not None:
            pulumi.set(__self__, "aes128", aes128)
        if drm_systems is not None:
            pulumi.set(__self__, "drm_systems", drm_systems)
        if mpeg_cenc is not None:
            pulumi.set(__self__, "mpeg_cenc", mpeg_cenc)
        if sample_aes is not None:
            pulumi.set(__self__, "sample_aes", sample_aes)
        if secret_manager_key_source is not None:
            pulumi.set(__self__, "secret_manager_key_source", secret_manager_key_source)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        Identifier for this set of encryption options.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def aes128(self) -> Optional[pulumi.Input['JobTemplateConfigEncryptionAes128Args']]:
        """
        Configuration for AES-128 encryption.
        """
        return pulumi.get(self, "aes128")

    @aes128.setter
    def aes128(self, value: Optional[pulumi.Input['JobTemplateConfigEncryptionAes128Args']]):
        pulumi.set(self, "aes128", value)

    @property
    @pulumi.getter(name="drmSystems")
    def drm_systems(self) -> Optional[pulumi.Input['JobTemplateConfigEncryptionDrmSystemsArgs']]:
        """
        DRM system(s) to use; at least one must be specified. If a DRM system is omitted, it is considered disabled.
        Structure is documented below.
        """
        return pulumi.get(self, "drm_systems")

    @drm_systems.setter
    def drm_systems(self, value: Optional[pulumi.Input['JobTemplateConfigEncryptionDrmSystemsArgs']]):
        pulumi.set(self, "drm_systems", value)

    @property
    @pulumi.getter(name="mpegCenc")
    def mpeg_cenc(self) -> Optional[pulumi.Input['JobTemplateConfigEncryptionMpegCencArgs']]:
        """
        Configuration for MPEG Common Encryption (MPEG-CENC).
        Structure is documented below.
        """
        return pulumi.get(self, "mpeg_cenc")

    @mpeg_cenc.setter
    def mpeg_cenc(self, value: Optional[pulumi.Input['JobTemplateConfigEncryptionMpegCencArgs']]):
        pulumi.set(self, "mpeg_cenc", value)

    @property
    @pulumi.getter(name="sampleAes")
    def sample_aes(self) -> Optional[pulumi.Input['JobTemplateConfigEncryptionSampleAesArgs']]:
        """
        Configuration for SAMPLE-AES encryption.
        """
        return pulumi.get(self, "sample_aes")

    @sample_aes.setter
    def sample_aes(self, value: Optional[pulumi.Input['JobTemplateConfigEncryptionSampleAesArgs']]):
        pulumi.set(self, "sample_aes", value)

    @property
    @pulumi.getter(name="secretManagerKeySource")
    def secret_manager_key_source(self) -> Optional[pulumi.Input['JobTemplateConfigEncryptionSecretManagerKeySourceArgs']]:
        """
        Configuration for secrets stored in Google Secret Manager.
        Structure is documented below.
        """
        return pulumi.get(self, "secret_manager_key_source")

    @secret_manager_key_source.setter
    def secret_manager_key_source(self, value: Optional[pulumi.Input['JobTemplateConfigEncryptionSecretManagerKeySourceArgs']]):
        pulumi.set(self, "secret_manager_key_source", value)


if not MYPY:
    class JobTemplateConfigEncryptionAes128ArgsDict(TypedDict):
        pass
elif False:
    JobTemplateConfigEncryptionAes128ArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class JobTemplateConfigEncryptionAes128Args:
    def __init__(__self__):
        pass


if not MYPY:
    class JobTemplateConfigEncryptionDrmSystemsArgsDict(TypedDict):
        clearkey: NotRequired[pulumi.Input['JobTemplateConfigEncryptionDrmSystemsClearkeyArgsDict']]
        """
        Clearkey configuration.
        """
        fairplay: NotRequired[pulumi.Input['JobTemplateConfigEncryptionDrmSystemsFairplayArgsDict']]
        """
        Fairplay configuration.
        """
        playready: NotRequired[pulumi.Input['JobTemplateConfigEncryptionDrmSystemsPlayreadyArgsDict']]
        """
        Playready configuration.
        """
        widevine: NotRequired[pulumi.Input['JobTemplateConfigEncryptionDrmSystemsWidevineArgsDict']]
        """
        Widevine configuration.
        """
elif False:
    JobTemplateConfigEncryptionDrmSystemsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class JobTemplateConfigEncryptionDrmSystemsArgs:
    def __init__(__self__, *,
                 clearkey: Optional[pulumi.Input['JobTemplateConfigEncryptionDrmSystemsClearkeyArgs']] = None,
                 fairplay: Optional[pulumi.Input['JobTemplateConfigEncryptionDrmSystemsFairplayArgs']] = None,
                 playready: Optional[pulumi.Input['JobTemplateConfigEncryptionDrmSystemsPlayreadyArgs']] = None,
                 widevine: Optional[pulumi.Input['JobTemplateConfigEncryptionDrmSystemsWidevineArgs']] = None):
        """
        :param pulumi.Input['JobTemplateConfigEncryptionDrmSystemsClearkeyArgs'] clearkey: Clearkey configuration.
        :param pulumi.Input['JobTemplateConfigEncryptionDrmSystemsFairplayArgs'] fairplay: Fairplay configuration.
        :param pulumi.Input['JobTemplateConfigEncryptionDrmSystemsPlayreadyArgs'] playready: Playready configuration.
        :param pulumi.Input['JobTemplateConfigEncryptionDrmSystemsWidevineArgs'] widevine: Widevine configuration.
        """
        if clearkey is not None:
            pulumi.set(__self__, "clearkey", clearkey)
        if fairplay is not None:
            pulumi.set(__self__, "fairplay", fairplay)
        if playready is not None:
            pulumi.set(__self__, "playready", playready)
        if widevine is not None:
            pulumi.set(__self__, "widevine", widevine)

    @property
    @pulumi.getter
    def clearkey(self) -> Optional[pulumi.Input['JobTemplateConfigEncryptionDrmSystemsClearkeyArgs']]:
        """
        Clearkey configuration.
        """
        return pulumi.get(self, "clearkey")

    @clearkey.setter
    def clearkey(self, value: Optional[pulumi.Input['JobTemplateConfigEncryptionDrmSystemsClearkeyArgs']]):
        pulumi.set(self, "clearkey", value)

    @property
    @pulumi.getter
    def fairplay(self) -> Optional[pulumi.Input['JobTemplateConfigEncryptionDrmSystemsFairplayArgs']]:
        """
        Fairplay configuration.
        """
        return pulumi.get(self, "fairplay")

    @fairplay.setter
    def fairplay(self, value: Optional[pulumi.Input['JobTemplateConfigEncryptionDrmSystemsFairplayArgs']]):
        pulumi.set(self, "fairplay", value)

    @property
    @pulumi.getter
    def playready(self) -> Optional[pulumi.Input['JobTemplateConfigEncryptionDrmSystemsPlayreadyArgs']]:
        """
        Playready configuration.
        """
        return pulumi.get(self, "playready")

    @playready.setter
    def playready(self, value: Optional[pulumi.Input['JobTemplateConfigEncryptionDrmSystemsPlayreadyArgs']]):
        pulumi.set(self, "playready", value)

    @property
    @pulumi.getter
    def widevine(self) -> Optional[pulumi.Input['JobTemplateConfigEncryptionDrmSystemsWidevineArgs']]:
        """
        Widevine configuration.
        """
        return pulumi.get(self, "widevine")

    @widevine.setter
    def widevine(self, value: Optional[pulumi.Input['JobTemplateConfigEncryptionDrmSystemsWidevineArgs']]):
        pulumi.set(self, "widevine", value)


if not MYPY:
    class JobTemplateConfigEncryptionDrmSystemsClearkeyArgsDict(TypedDict):
        pass
elif False:
    JobTemplateConfigEncryptionDrmSystemsClearkeyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class JobTemplateConfigEncryptionDrmSystemsClearkeyArgs:
    def __init__(__self__):
        pass


if not MYPY:
    class JobTemplateConfigEncryptionDrmSystemsFairplayArgsDict(TypedDict):
        pass
elif False:
    JobTemplateConfigEncryptionDrmSystemsFairplayArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class JobTemplateConfigEncryptionDrmSystemsFairplayArgs:
    def __init__(__self__):
        pass


if not MYPY:
    class JobTemplateConfigEncryptionDrmSystemsPlayreadyArgsDict(TypedDict):
        pass
elif False:
    JobTemplateConfigEncryptionDrmSystemsPlayreadyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class JobTemplateConfigEncryptionDrmSystemsPlayreadyArgs:
    def __init__(__self__):
        pass


if not MYPY:
    class JobTemplateConfigEncryptionDrmSystemsWidevineArgsDict(TypedDict):
        pass
elif False:
    JobTemplateConfigEncryptionDrmSystemsWidevineArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class JobTemplateConfigEncryptionDrmSystemsWidevineArgs:
    def __init__(__self__):
        pass


if not MYPY:
    class JobTemplateConfigEncryptionMpegCencArgsDict(TypedDict):
        scheme: pulumi.Input[str]
        """
        Specify the encryption scheme.
        """
elif False:
    JobTemplateConfigEncryptionMpegCencArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class JobTemplateConfigEncryptionMpegCencArgs:
    def __init__(__self__, *,
                 scheme: pulumi.Input[str]):
        """
        :param pulumi.Input[str] scheme: Specify the encryption scheme.
        """
        pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def scheme(self) -> pulumi.Input[str]:
        """
        Specify the encryption scheme.
        """
        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: pulumi.Input[str]):
        pulumi.set(self, "scheme", value)


if not MYPY:
    class JobTemplateConfigEncryptionSampleAesArgsDict(TypedDict):
        pass
elif False:
    JobTemplateConfigEncryptionSampleAesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class JobTemplateConfigEncryptionSampleAesArgs:
    def __init__(__self__):
        pass


if not MYPY:
    class JobTemplateConfigEncryptionSecretManagerKeySourceArgsDict(TypedDict):
        secret_version: pulumi.Input[str]
        """
        The name of the Secret Version containing the encryption key in the following format: projects/{project}/secrets/{secret_id}/versions/{version_number}.
        """
elif False:
    JobTemplateConfigEncryptionSecretManagerKeySourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class JobTemplateConfigEncryptionSecretManagerKeySourceArgs:
    def __init__(__self__, *,
                 secret_version: pulumi.Input[str]):
        """
        :param pulumi.Input[str] secret_version: The name of the Secret Version containing the encryption key in the following format: projects/{project}/secrets/{secret_id}/versions/{version_number}.
        """
        pulumi.set(__self__, "secret_version", secret_version)

    @property
    @pulumi.getter(name="secretVersion")
    def secret_version(self) -> pulumi.Input[str]:
        """
        The name of the Secret Version containing the encryption key in the following format: projects/{project}/secrets/{secret_id}/versions/{version_number}.
        """
        return pulumi.get(self, "secret_version")

    @secret_version.setter
    def secret_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_version", value)


if not MYPY:
    class JobTemplateConfigInputArgsDict(TypedDict):
        key: NotRequired[pulumi.Input[str]]
        """
        A unique key for this input. Must be specified when using advanced mapping and edit lists.
        """
        uri: NotRequired[pulumi.Input[str]]
        """
        URI of the media. Input files must be at least 5 seconds in duration and stored in Cloud Storage (for example, gs://bucket/inputs/file.mp4).
        If empty, the value is populated from Job.input_uri.
        """
elif False:
    JobTemplateConfigInputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class JobTemplateConfigInputArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 uri: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] key: A unique key for this input. Must be specified when using advanced mapping and edit lists.
        :param pulumi.Input[str] uri: URI of the media. Input files must be at least 5 seconds in duration and stored in Cloud Storage (for example, gs://bucket/inputs/file.mp4).
               If empty, the value is populated from Job.input_uri.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        A unique key for this input. Must be specified when using advanced mapping and edit lists.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        """
        URI of the media. Input files must be at least 5 seconds in duration and stored in Cloud Storage (for example, gs://bucket/inputs/file.mp4).
        If empty, the value is populated from Job.input_uri.
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)


if not MYPY:
    class JobTemplateConfigManifestArgsDict(TypedDict):
        file_name: NotRequired[pulumi.Input[str]]
        """
        The name of the generated file. The default is `manifest`.
        """
        mux_streams: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        List of user supplied MuxStream.key values that should appear in this manifest.
        """
        type: NotRequired[pulumi.Input[str]]
        """
        Type of the manifest.
        Possible values are: `MANIFEST_TYPE_UNSPECIFIED`, `HLS`, `DASH`.
        """
elif False:
    JobTemplateConfigManifestArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class JobTemplateConfigManifestArgs:
    def __init__(__self__, *,
                 file_name: Optional[pulumi.Input[str]] = None,
                 mux_streams: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] file_name: The name of the generated file. The default is `manifest`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] mux_streams: List of user supplied MuxStream.key values that should appear in this manifest.
        :param pulumi.Input[str] type: Type of the manifest.
               Possible values are: `MANIFEST_TYPE_UNSPECIFIED`, `HLS`, `DASH`.
        """
        if file_name is not None:
            pulumi.set(__self__, "file_name", file_name)
        if mux_streams is not None:
            pulumi.set(__self__, "mux_streams", mux_streams)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="fileName")
    def file_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the generated file. The default is `manifest`.
        """
        return pulumi.get(self, "file_name")

    @file_name.setter
    def file_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_name", value)

    @property
    @pulumi.getter(name="muxStreams")
    def mux_streams(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of user supplied MuxStream.key values that should appear in this manifest.
        """
        return pulumi.get(self, "mux_streams")

    @mux_streams.setter
    def mux_streams(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "mux_streams", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the manifest.
        Possible values are: `MANIFEST_TYPE_UNSPECIFIED`, `HLS`, `DASH`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class JobTemplateConfigMuxStreamArgsDict(TypedDict):
        container: NotRequired[pulumi.Input[str]]
        """
        The container format. The default is `mp4`.
        """
        elementary_streams: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        List of ElementaryStream.key values multiplexed in this stream.
        """
        encryption_id: NotRequired[pulumi.Input[str]]
        """
        Identifier of the encryption configuration to use.
        """
        file_name: NotRequired[pulumi.Input[str]]
        """
        The name of the generated file.
        """
        key: NotRequired[pulumi.Input[str]]
        """
        A unique key for this multiplexed stream.
        """
        segment_settings: NotRequired[pulumi.Input['JobTemplateConfigMuxStreamSegmentSettingsArgsDict']]
        """
        Segment settings for ts, fmp4 and vtt.
        Structure is documented below.
        """
elif False:
    JobTemplateConfigMuxStreamArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class JobTemplateConfigMuxStreamArgs:
    def __init__(__self__, *,
                 container: Optional[pulumi.Input[str]] = None,
                 elementary_streams: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 encryption_id: Optional[pulumi.Input[str]] = None,
                 file_name: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 segment_settings: Optional[pulumi.Input['JobTemplateConfigMuxStreamSegmentSettingsArgs']] = None):
        """
        :param pulumi.Input[str] container: The container format. The default is `mp4`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] elementary_streams: List of ElementaryStream.key values multiplexed in this stream.
        :param pulumi.Input[str] encryption_id: Identifier of the encryption configuration to use.
        :param pulumi.Input[str] file_name: The name of the generated file.
        :param pulumi.Input[str] key: A unique key for this multiplexed stream.
        :param pulumi.Input['JobTemplateConfigMuxStreamSegmentSettingsArgs'] segment_settings: Segment settings for ts, fmp4 and vtt.
               Structure is documented below.
        """
        if container is not None:
            pulumi.set(__self__, "container", container)
        if elementary_streams is not None:
            pulumi.set(__self__, "elementary_streams", elementary_streams)
        if encryption_id is not None:
            pulumi.set(__self__, "encryption_id", encryption_id)
        if file_name is not None:
            pulumi.set(__self__, "file_name", file_name)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if segment_settings is not None:
            pulumi.set(__self__, "segment_settings", segment_settings)

    @property
    @pulumi.getter
    def container(self) -> Optional[pulumi.Input[str]]:
        """
        The container format. The default is `mp4`.
        """
        return pulumi.get(self, "container")

    @container.setter
    def container(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container", value)

    @property
    @pulumi.getter(name="elementaryStreams")
    def elementary_streams(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of ElementaryStream.key values multiplexed in this stream.
        """
        return pulumi.get(self, "elementary_streams")

    @elementary_streams.setter
    def elementary_streams(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "elementary_streams", value)

    @property
    @pulumi.getter(name="encryptionId")
    def encryption_id(self) -> Optional[pulumi.Input[str]]:
        """
        Identifier of the encryption configuration to use.
        """
        return pulumi.get(self, "encryption_id")

    @encryption_id.setter
    def encryption_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encryption_id", value)

    @property
    @pulumi.getter(name="fileName")
    def file_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the generated file.
        """
        return pulumi.get(self, "file_name")

    @file_name.setter
    def file_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_name", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        A unique key for this multiplexed stream.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="segmentSettings")
    def segment_settings(self) -> Optional[pulumi.Input['JobTemplateConfigMuxStreamSegmentSettingsArgs']]:
        """
        Segment settings for ts, fmp4 and vtt.
        Structure is documented below.
        """
        return pulumi.get(self, "segment_settings")

    @segment_settings.setter
    def segment_settings(self, value: Optional[pulumi.Input['JobTemplateConfigMuxStreamSegmentSettingsArgs']]):
        pulumi.set(self, "segment_settings", value)


if not MYPY:
    class JobTemplateConfigMuxStreamSegmentSettingsArgsDict(TypedDict):
        segment_duration: NotRequired[pulumi.Input[str]]
        """
        Duration of the segments in seconds. The default is `6.0s`.
        """
elif False:
    JobTemplateConfigMuxStreamSegmentSettingsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class JobTemplateConfigMuxStreamSegmentSettingsArgs:
    def __init__(__self__, *,
                 segment_duration: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] segment_duration: Duration of the segments in seconds. The default is `6.0s`.
        """
        if segment_duration is not None:
            pulumi.set(__self__, "segment_duration", segment_duration)

    @property
    @pulumi.getter(name="segmentDuration")
    def segment_duration(self) -> Optional[pulumi.Input[str]]:
        """
        Duration of the segments in seconds. The default is `6.0s`.
        """
        return pulumi.get(self, "segment_duration")

    @segment_duration.setter
    def segment_duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "segment_duration", value)


if not MYPY:
    class JobTemplateConfigOutputArgsDict(TypedDict):
        uri: NotRequired[pulumi.Input[str]]
        """
        URI for the output file(s). For example, gs://my-bucket/outputs/.
        """
elif False:
    JobTemplateConfigOutputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class JobTemplateConfigOutputArgs:
    def __init__(__self__, *,
                 uri: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] uri: URI for the output file(s). For example, gs://my-bucket/outputs/.
        """
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        """
        URI for the output file(s). For example, gs://my-bucket/outputs/.
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)


if not MYPY:
    class JobTemplateConfigOverlayArgsDict(TypedDict):
        animations: NotRequired[pulumi.Input[Sequence[pulumi.Input['JobTemplateConfigOverlayAnimationArgsDict']]]]
        """
        List of animations. The list should be chronological, without any time overlap.
        Structure is documented below.
        """
        image: NotRequired[pulumi.Input['JobTemplateConfigOverlayImageArgsDict']]
        """
        Image overlay.
        Structure is documented below.
        """
elif False:
    JobTemplateConfigOverlayArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class JobTemplateConfigOverlayArgs:
    def __init__(__self__, *,
                 animations: Optional[pulumi.Input[Sequence[pulumi.Input['JobTemplateConfigOverlayAnimationArgs']]]] = None,
                 image: Optional[pulumi.Input['JobTemplateConfigOverlayImageArgs']] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['JobTemplateConfigOverlayAnimationArgs']]] animations: List of animations. The list should be chronological, without any time overlap.
               Structure is documented below.
        :param pulumi.Input['JobTemplateConfigOverlayImageArgs'] image: Image overlay.
               Structure is documented below.
        """
        if animations is not None:
            pulumi.set(__self__, "animations", animations)
        if image is not None:
            pulumi.set(__self__, "image", image)

    @property
    @pulumi.getter
    def animations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['JobTemplateConfigOverlayAnimationArgs']]]]:
        """
        List of animations. The list should be chronological, without any time overlap.
        Structure is documented below.
        """
        return pulumi.get(self, "animations")

    @animations.setter
    def animations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['JobTemplateConfigOverlayAnimationArgs']]]]):
        pulumi.set(self, "animations", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['JobTemplateConfigOverlayImageArgs']]:
        """
        Image overlay.
        Structure is documented below.
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['JobTemplateConfigOverlayImageArgs']]):
        pulumi.set(self, "image", value)


if not MYPY:
    class JobTemplateConfigOverlayAnimationArgsDict(TypedDict):
        animation_fade: NotRequired[pulumi.Input['JobTemplateConfigOverlayAnimationAnimationFadeArgsDict']]
        """
        Display overlay object with fade animation.
        Structure is documented below.
        """
elif False:
    JobTemplateConfigOverlayAnimationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class JobTemplateConfigOverlayAnimationArgs:
    def __init__(__self__, *,
                 animation_fade: Optional[pulumi.Input['JobTemplateConfigOverlayAnimationAnimationFadeArgs']] = None):
        """
        :param pulumi.Input['JobTemplateConfigOverlayAnimationAnimationFadeArgs'] animation_fade: Display overlay object with fade animation.
               Structure is documented below.
        """
        if animation_fade is not None:
            pulumi.set(__self__, "animation_fade", animation_fade)

    @property
    @pulumi.getter(name="animationFade")
    def animation_fade(self) -> Optional[pulumi.Input['JobTemplateConfigOverlayAnimationAnimationFadeArgs']]:
        """
        Display overlay object with fade animation.
        Structure is documented below.
        """
        return pulumi.get(self, "animation_fade")

    @animation_fade.setter
    def animation_fade(self, value: Optional[pulumi.Input['JobTemplateConfigOverlayAnimationAnimationFadeArgs']]):
        pulumi.set(self, "animation_fade", value)


if not MYPY:
    class JobTemplateConfigOverlayAnimationAnimationFadeArgsDict(TypedDict):
        fade_type: pulumi.Input[str]
        """
        Required. Type of fade animation: `FADE_IN` or `FADE_OUT`.
        The possible values are:
        * `FADE_TYPE_UNSPECIFIED`: The fade type is not specified.
        * `FADE_IN`: Fade the overlay object into view.
        * `FADE_OUT`: Fade the overlay object out of view.
        Possible values are: `FADE_TYPE_UNSPECIFIED`, `FADE_IN`, `FADE_OUT`.
        """
        end_time_offset: NotRequired[pulumi.Input[str]]
        """
        The time to end the fade animation, in seconds.
        """
        start_time_offset: NotRequired[pulumi.Input[str]]
        """
        The time to start the fade animation, in seconds.
        """
        xy: NotRequired[pulumi.Input['JobTemplateConfigOverlayAnimationAnimationFadeXyArgsDict']]
        """
        Normalized coordinates based on output video resolution.
        Structure is documented below.
        """
elif False:
    JobTemplateConfigOverlayAnimationAnimationFadeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class JobTemplateConfigOverlayAnimationAnimationFadeArgs:
    def __init__(__self__, *,
                 fade_type: pulumi.Input[str],
                 end_time_offset: Optional[pulumi.Input[str]] = None,
                 start_time_offset: Optional[pulumi.Input[str]] = None,
                 xy: Optional[pulumi.Input['JobTemplateConfigOverlayAnimationAnimationFadeXyArgs']] = None):
        """
        :param pulumi.Input[str] fade_type: Required. Type of fade animation: `FADE_IN` or `FADE_OUT`.
               The possible values are:
               * `FADE_TYPE_UNSPECIFIED`: The fade type is not specified.
               * `FADE_IN`: Fade the overlay object into view.
               * `FADE_OUT`: Fade the overlay object out of view.
               Possible values are: `FADE_TYPE_UNSPECIFIED`, `FADE_IN`, `FADE_OUT`.
        :param pulumi.Input[str] end_time_offset: The time to end the fade animation, in seconds.
        :param pulumi.Input[str] start_time_offset: The time to start the fade animation, in seconds.
        :param pulumi.Input['JobTemplateConfigOverlayAnimationAnimationFadeXyArgs'] xy: Normalized coordinates based on output video resolution.
               Structure is documented below.
        """
        pulumi.set(__self__, "fade_type", fade_type)
        if end_time_offset is not None:
            pulumi.set(__self__, "end_time_offset", end_time_offset)
        if start_time_offset is not None:
            pulumi.set(__self__, "start_time_offset", start_time_offset)
        if xy is not None:
            pulumi.set(__self__, "xy", xy)

    @property
    @pulumi.getter(name="fadeType")
    def fade_type(self) -> pulumi.Input[str]:
        """
        Required. Type of fade animation: `FADE_IN` or `FADE_OUT`.
        The possible values are:
        * `FADE_TYPE_UNSPECIFIED`: The fade type is not specified.
        * `FADE_IN`: Fade the overlay object into view.
        * `FADE_OUT`: Fade the overlay object out of view.
        Possible values are: `FADE_TYPE_UNSPECIFIED`, `FADE_IN`, `FADE_OUT`.
        """
        return pulumi.get(self, "fade_type")

    @fade_type.setter
    def fade_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "fade_type", value)

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> Optional[pulumi.Input[str]]:
        """
        The time to end the fade animation, in seconds.
        """
        return pulumi.get(self, "end_time_offset")

    @end_time_offset.setter
    def end_time_offset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_time_offset", value)

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> Optional[pulumi.Input[str]]:
        """
        The time to start the fade animation, in seconds.
        """
        return pulumi.get(self, "start_time_offset")

    @start_time_offset.setter
    def start_time_offset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_time_offset", value)

    @property
    @pulumi.getter
    def xy(self) -> Optional[pulumi.Input['JobTemplateConfigOverlayAnimationAnimationFadeXyArgs']]:
        """
        Normalized coordinates based on output video resolution.
        Structure is documented below.
        """
        return pulumi.get(self, "xy")

    @xy.setter
    def xy(self, value: Optional[pulumi.Input['JobTemplateConfigOverlayAnimationAnimationFadeXyArgs']]):
        pulumi.set(self, "xy", value)


if not MYPY:
    class JobTemplateConfigOverlayAnimationAnimationFadeXyArgsDict(TypedDict):
        x: NotRequired[pulumi.Input[float]]
        """
        Normalized x coordinate.
        """
        y: NotRequired[pulumi.Input[float]]
        """
        Normalized y coordinate.
        """
elif False:
    JobTemplateConfigOverlayAnimationAnimationFadeXyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class JobTemplateConfigOverlayAnimationAnimationFadeXyArgs:
    def __init__(__self__, *,
                 x: Optional[pulumi.Input[float]] = None,
                 y: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[float] x: Normalized x coordinate.
        :param pulumi.Input[float] y: Normalized y coordinate.
        """
        if x is not None:
            pulumi.set(__self__, "x", x)
        if y is not None:
            pulumi.set(__self__, "y", y)

    @property
    @pulumi.getter
    def x(self) -> Optional[pulumi.Input[float]]:
        """
        Normalized x coordinate.
        """
        return pulumi.get(self, "x")

    @x.setter
    def x(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "x", value)

    @property
    @pulumi.getter
    def y(self) -> Optional[pulumi.Input[float]]:
        """
        Normalized y coordinate.
        """
        return pulumi.get(self, "y")

    @y.setter
    def y(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "y", value)


if not MYPY:
    class JobTemplateConfigOverlayImageArgsDict(TypedDict):
        uri: pulumi.Input[str]
        """
        URI of the image in Cloud Storage. For example, gs://bucket/inputs/image.png.
        """
elif False:
    JobTemplateConfigOverlayImageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class JobTemplateConfigOverlayImageArgs:
    def __init__(__self__, *,
                 uri: pulumi.Input[str]):
        """
        :param pulumi.Input[str] uri: URI of the image in Cloud Storage. For example, gs://bucket/inputs/image.png.
        """
        pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def uri(self) -> pulumi.Input[str]:
        """
        URI of the image in Cloud Storage. For example, gs://bucket/inputs/image.png.
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "uri", value)


if not MYPY:
    class JobTemplateConfigPubsubDestinationArgsDict(TypedDict):
        topic: NotRequired[pulumi.Input[str]]
        """
        The name of the Pub/Sub topic to publish job completion notification to. For example: projects/{project}/topics/{topic}.
        """
elif False:
    JobTemplateConfigPubsubDestinationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class JobTemplateConfigPubsubDestinationArgs:
    def __init__(__self__, *,
                 topic: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] topic: The name of the Pub/Sub topic to publish job completion notification to. For example: projects/{project}/topics/{topic}.
        """
        if topic is not None:
            pulumi.set(__self__, "topic", topic)

    @property
    @pulumi.getter
    def topic(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Pub/Sub topic to publish job completion notification to. For example: projects/{project}/topics/{topic}.
        """
        return pulumi.get(self, "topic")

    @topic.setter
    def topic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic", value)


