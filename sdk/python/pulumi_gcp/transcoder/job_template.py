# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['JobTemplateArgs', 'JobTemplate']

@pulumi.input_type
class JobTemplateArgs:
    def __init__(__self__, *,
                 job_template_id: pulumi.Input[str],
                 location: pulumi.Input[str],
                 config: Optional[pulumi.Input['JobTemplateConfigArgs']] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 project: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a JobTemplate resource.
        :param pulumi.Input[str] job_template_id: ID to use for the Transcoding job template.
        :param pulumi.Input[str] location: The location of the transcoding job template resource.
               
               
               - - -
        :param pulumi.Input['JobTemplateConfigArgs'] config: The configuration for this template.
               Structure is documented below.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: The labels associated with this job template. You can use these to organize and group your job templates.
               
               **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
               Please refer to the field `effective_labels` for all of the labels present on the resource.
        :param pulumi.Input[str] project: The ID of the project in which the resource belongs.
               If it is not provided, the provider project is used.
        """
        pulumi.set(__self__, "job_template_id", job_template_id)
        pulumi.set(__self__, "location", location)
        if config is not None:
            pulumi.set(__self__, "config", config)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if project is not None:
            pulumi.set(__self__, "project", project)

    @property
    @pulumi.getter(name="jobTemplateId")
    def job_template_id(self) -> pulumi.Input[str]:
        """
        ID to use for the Transcoding job template.
        """
        return pulumi.get(self, "job_template_id")

    @job_template_id.setter
    def job_template_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "job_template_id", value)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input[str]:
        """
        The location of the transcoding job template resource.


        - - -
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[str]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input['JobTemplateConfigArgs']]:
        """
        The configuration for this template.
        Structure is documented below.
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input['JobTemplateConfigArgs']]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The labels associated with this job template. You can use these to organize and group your job templates.

        **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        Please refer to the field `effective_labels` for all of the labels present on the resource.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the project in which the resource belongs.
        If it is not provided, the provider project is used.
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)


@pulumi.input_type
class _JobTemplateState:
    def __init__(__self__, *,
                 config: Optional[pulumi.Input['JobTemplateConfigArgs']] = None,
                 effective_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 job_template_id: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 pulumi_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering JobTemplate resources.
        :param pulumi.Input['JobTemplateConfigArgs'] config: The configuration for this template.
               Structure is documented below.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] effective_labels: All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        :param pulumi.Input[str] job_template_id: ID to use for the Transcoding job template.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: The labels associated with this job template. You can use these to organize and group your job templates.
               
               **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
               Please refer to the field `effective_labels` for all of the labels present on the resource.
        :param pulumi.Input[str] location: The location of the transcoding job template resource.
               
               
               - - -
        :param pulumi.Input[str] name: The resource name of the job template.
        :param pulumi.Input[str] project: The ID of the project in which the resource belongs.
               If it is not provided, the provider project is used.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] pulumi_labels: The combination of labels configured directly on the resource
               and default labels configured on the provider.
        """
        if config is not None:
            pulumi.set(__self__, "config", config)
        if effective_labels is not None:
            pulumi.set(__self__, "effective_labels", effective_labels)
        if job_template_id is not None:
            pulumi.set(__self__, "job_template_id", job_template_id)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if pulumi_labels is not None:
            pulumi.set(__self__, "pulumi_labels", pulumi_labels)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input['JobTemplateConfigArgs']]:
        """
        The configuration for this template.
        Structure is documented below.
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input['JobTemplateConfigArgs']]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter(name="effectiveLabels")
    def effective_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        """
        return pulumi.get(self, "effective_labels")

    @effective_labels.setter
    def effective_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "effective_labels", value)

    @property
    @pulumi.getter(name="jobTemplateId")
    def job_template_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID to use for the Transcoding job template.
        """
        return pulumi.get(self, "job_template_id")

    @job_template_id.setter
    def job_template_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "job_template_id", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The labels associated with this job template. You can use these to organize and group your job templates.

        **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        Please refer to the field `effective_labels` for all of the labels present on the resource.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        The location of the transcoding job template resource.


        - - -
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The resource name of the job template.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the project in which the resource belongs.
        If it is not provided, the provider project is used.
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="pulumiLabels")
    def pulumi_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The combination of labels configured directly on the resource
        and default labels configured on the provider.
        """
        return pulumi.get(self, "pulumi_labels")

    @pulumi_labels.setter
    def pulumi_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "pulumi_labels", value)


class JobTemplate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 config: Optional[pulumi.Input[Union['JobTemplateConfigArgs', 'JobTemplateConfigArgsDict']]] = None,
                 job_template_id: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Transcoding Job Template Resource

        To get more information about JobTemplate, see:

        * [API documentation](https://cloud.google.com/transcoder/docs/reference/rest/v1/projects.locations.jobTemplates)
        * How-to Guides
            * [Transcoder](https://cloud.google.com/transcoder/docs/)

        ## Example Usage

        ### Transcoder Job Template Basic

        ```python
        import pulumi
        import pulumi_gcp as gcp

        default = gcp.transcoder.JobTemplate("default",
            job_template_id="example-job-template",
            location="us-central1",
            config={
                "inputs": [{
                    "key": "input0",
                }],
                "edit_lists": [{
                    "key": "atom0",
                    "inputs": ["input0"],
                    "start_time_offset": "0s",
                }],
                "ad_breaks": [{
                    "start_time_offset": "3.500s",
                }],
                "elementary_streams": [
                    {
                        "key": "video-stream0",
                        "video_stream": {
                            "h264": {
                                "width_pixels": 640,
                                "height_pixels": 360,
                                "bitrate_bps": 550000,
                                "frame_rate": 60,
                                "pixel_format": "yuv420p",
                                "rate_control_mode": "vbr",
                                "crf_level": 21,
                                "gop_duration": "3s",
                                "vbv_size_bits": 550000,
                                "vbv_fullness_bits": 495000,
                                "entropy_coder": "cabac",
                                "profile": "high",
                                "preset": "veryfast",
                            },
                        },
                    },
                    {
                        "key": "video-stream1",
                        "video_stream": {
                            "h264": {
                                "width_pixels": 1280,
                                "height_pixels": 720,
                                "bitrate_bps": 550000,
                                "frame_rate": 60,
                                "pixel_format": "yuv420p",
                                "rate_control_mode": "vbr",
                                "crf_level": 21,
                                "gop_duration": "3s",
                                "vbv_size_bits": 2500000,
                                "vbv_fullness_bits": 2250000,
                                "entropy_coder": "cabac",
                                "profile": "high",
                                "preset": "veryfast",
                            },
                        },
                    },
                    {
                        "key": "audio-stream0",
                        "audio_stream": {
                            "codec": "aac",
                            "bitrate_bps": 64000,
                            "channel_count": 2,
                            "channel_layouts": [
                                "fl",
                                "fr",
                            ],
                            "sample_rate_hertz": 48000,
                        },
                    },
                ],
                "mux_streams": [
                    {
                        "key": "sd",
                        "file_name": "sd.mp4",
                        "container": "mp4",
                        "elementary_streams": [
                            "video-stream0",
                            "audio-stream0",
                        ],
                    },
                    {
                        "key": "hd",
                        "file_name": "hd.mp4",
                        "container": "mp4",
                        "elementary_streams": [
                            "video-stream1",
                            "audio-stream0",
                        ],
                    },
                ],
            },
            labels={
                "label": "key",
            })
        ```
        ### Transcoder Job Template Overlays

        ```python
        import pulumi
        import pulumi_gcp as gcp

        default = gcp.transcoder.JobTemplate("default",
            job_template_id="example-job-template",
            location="us-central1",
            config={
                "inputs": [{
                    "key": "input0",
                    "uri": "gs://example/example.mp4",
                }],
                "output": {
                    "uri": "gs://example/outputs/",
                },
                "edit_lists": [{
                    "key": "atom0",
                    "inputs": ["input0"],
                    "start_time_offset": "0s",
                }],
                "ad_breaks": [{
                    "start_time_offset": "3.500s",
                }],
                "overlays": [{
                    "animations": [{
                        "animation_fade": {
                            "fade_type": "FADE_IN",
                            "start_time_offset": "1.500s",
                            "end_time_offset": "3.500s",
                            "xy": {
                                "x": 1,
                                "y": 0.5,
                            },
                        },
                    }],
                    "image": {
                        "uri": "gs://example/overlay.png",
                    },
                }],
                "elementary_streams": [
                    {
                        "key": "video-stream0",
                        "video_stream": {
                            "h264": {
                                "width_pixels": 640,
                                "height_pixels": 360,
                                "bitrate_bps": 550000,
                                "frame_rate": 60,
                                "pixel_format": "yuv420p",
                                "rate_control_mode": "vbr",
                                "crf_level": 21,
                                "gop_duration": "3s",
                                "vbv_size_bits": 550000,
                                "vbv_fullness_bits": 495000,
                                "entropy_coder": "cabac",
                                "profile": "high",
                                "preset": "veryfast",
                            },
                        },
                    },
                    {
                        "key": "video-stream1",
                        "video_stream": {
                            "h264": {
                                "width_pixels": 1280,
                                "height_pixels": 720,
                                "bitrate_bps": 550000,
                                "frame_rate": 60,
                                "pixel_format": "yuv420p",
                                "rate_control_mode": "vbr",
                                "crf_level": 21,
                                "gop_duration": "3s",
                                "vbv_size_bits": 2500000,
                                "vbv_fullness_bits": 2250000,
                                "entropy_coder": "cabac",
                                "profile": "high",
                                "preset": "veryfast",
                            },
                        },
                    },
                    {
                        "key": "audio-stream0",
                        "audio_stream": {
                            "codec": "aac",
                            "bitrate_bps": 64000,
                            "channel_count": 2,
                            "channel_layouts": [
                                "fl",
                                "fr",
                            ],
                            "sample_rate_hertz": 48000,
                        },
                    },
                ],
                "mux_streams": [
                    {
                        "key": "sd",
                        "file_name": "sd.mp4",
                        "container": "mp4",
                        "elementary_streams": [
                            "video-stream0",
                            "audio-stream0",
                        ],
                    },
                    {
                        "key": "hd",
                        "file_name": "hd.mp4",
                        "container": "mp4",
                        "elementary_streams": [
                            "video-stream1",
                            "audio-stream0",
                        ],
                    },
                ],
            },
            labels={
                "label": "key",
            })
        ```
        ### Transcoder Job Template Encryptions

        ```python
        import pulumi
        import pulumi_gcp as gcp

        encryption_key = gcp.secretmanager.Secret("encryption_key",
            secret_id="transcoder-encryption-key",
            replication={
                "auto": {},
            })
        encryption_key_secret_version = gcp.secretmanager.SecretVersion("encryption_key",
            secret=encryption_key.name,
            secret_data="4A67F2C1B8E93A4F6D3E7890A1BC23DF")
        default = gcp.transcoder.JobTemplate("default",
            job_template_id="example-job-template",
            location="us-central1",
            config={
                "elementary_streams": [
                    {
                        "key": "es_video",
                        "video_stream": {
                            "h264": {
                                "profile": "main",
                                "height_pixels": 600,
                                "width_pixels": 800,
                                "bitrate_bps": 1000000,
                                "frame_rate": 60,
                            },
                        },
                    },
                    {
                        "key": "es_audio",
                        "audio_stream": {
                            "codec": "aac",
                            "channel_count": 2,
                            "bitrate_bps": 160000,
                        },
                    },
                ],
                "encryptions": [
                    {
                        "id": "aes-128",
                        "secret_manager_key_source": {
                            "secret_version": encryption_key_secret_version.name,
                        },
                        "drm_systems": {
                            "clearkey": {},
                        },
                        "aes128": {},
                    },
                    {
                        "id": "cenc",
                        "secret_manager_key_source": {
                            "secret_version": encryption_key_secret_version.name,
                        },
                        "drm_systems": {
                            "widevine": {},
                        },
                        "mpeg_cenc": {
                            "scheme": "cenc",
                        },
                    },
                    {
                        "id": "cbcs",
                        "secret_manager_key_source": {
                            "secret_version": encryption_key_secret_version.name,
                        },
                        "drm_systems": {
                            "widevine": {},
                        },
                        "mpeg_cenc": {
                            "scheme": "cbcs",
                        },
                    },
                ],
                "mux_streams": [
                    {
                        "key": "ts_aes128",
                        "container": "ts",
                        "elementary_streams": [
                            "es_video",
                            "es_audio",
                        ],
                        "segment_settings": {
                            "segment_duration": "6s",
                        },
                        "encryption_id": "aes-128",
                    },
                    {
                        "key": "fmp4_cenc_video",
                        "container": "fmp4",
                        "elementary_streams": ["es_video"],
                        "segment_settings": {
                            "segment_duration": "6s",
                        },
                        "encryption_id": "cenc",
                    },
                    {
                        "key": "fmp4_cenc_audio",
                        "container": "fmp4",
                        "elementary_streams": ["es_audio"],
                        "segment_settings": {
                            "segment_duration": "6s",
                        },
                        "encryption_id": "cenc",
                    },
                    {
                        "key": "fmp4_cbcs_video",
                        "container": "fmp4",
                        "elementary_streams": ["es_video"],
                        "segment_settings": {
                            "segment_duration": "6s",
                        },
                        "encryption_id": "cbcs",
                    },
                    {
                        "key": "fmp4_cbcs_audio",
                        "container": "fmp4",
                        "elementary_streams": ["es_audio"],
                        "segment_settings": {
                            "segment_duration": "6s",
                        },
                        "encryption_id": "cbcs",
                    },
                ],
                "manifests": [
                    {
                        "file_name": "manifest_aes128.m3u8",
                        "type": "HLS",
                        "mux_streams": ["ts_aes128"],
                    },
                    {
                        "file_name": "manifest_cenc.mpd",
                        "type": "DASH",
                        "mux_streams": [
                            "fmp4_cenc_video",
                            "fmp4_cenc_audio",
                        ],
                    },
                    {
                        "file_name": "manifest_cbcs.mpd",
                        "type": "DASH",
                        "mux_streams": [
                            "fmp4_cbcs_video",
                            "fmp4_cbcs_audio",
                        ],
                    },
                ],
            },
            labels={
                "label": "key",
            })
        ```
        ### Transcoder Job Template Pubsub

        ```python
        import pulumi
        import pulumi_gcp as gcp

        transcoder_notifications = gcp.pubsub.Topic("transcoder_notifications", name="transcoder-notifications")
        default = gcp.transcoder.JobTemplate("default",
            job_template_id="example-job-template",
            location="us-central1",
            config={
                "inputs": [{
                    "key": "input0",
                    "uri": "gs://example/example.mp4",
                }],
                "output": {
                    "uri": "gs://example/outputs/",
                },
                "edit_lists": [{
                    "key": "atom0",
                    "inputs": ["input0"],
                    "start_time_offset": "0s",
                }],
                "ad_breaks": [{
                    "start_time_offset": "3.500s",
                }],
                "elementary_streams": [
                    {
                        "key": "video-stream0",
                        "video_stream": {
                            "h264": {
                                "width_pixels": 640,
                                "height_pixels": 360,
                                "bitrate_bps": 550000,
                                "frame_rate": 60,
                                "pixel_format": "yuv420p",
                                "rate_control_mode": "vbr",
                                "crf_level": 21,
                                "gop_duration": "3s",
                                "vbv_size_bits": 550000,
                                "vbv_fullness_bits": 495000,
                                "entropy_coder": "cabac",
                                "profile": "high",
                                "preset": "veryfast",
                            },
                        },
                    },
                    {
                        "key": "video-stream1",
                        "video_stream": {
                            "h264": {
                                "width_pixels": 1280,
                                "height_pixels": 720,
                                "bitrate_bps": 550000,
                                "frame_rate": 60,
                                "pixel_format": "yuv420p",
                                "rate_control_mode": "vbr",
                                "crf_level": 21,
                                "gop_duration": "3s",
                                "vbv_size_bits": 2500000,
                                "vbv_fullness_bits": 2250000,
                                "entropy_coder": "cabac",
                                "profile": "high",
                                "preset": "veryfast",
                            },
                        },
                    },
                    {
                        "key": "audio-stream0",
                        "audio_stream": {
                            "codec": "aac",
                            "bitrate_bps": 64000,
                            "channel_count": 2,
                            "channel_layouts": [
                                "fl",
                                "fr",
                            ],
                            "sample_rate_hertz": 48000,
                        },
                    },
                ],
                "mux_streams": [
                    {
                        "key": "sd",
                        "file_name": "sd.mp4",
                        "container": "mp4",
                        "elementary_streams": [
                            "video-stream0",
                            "audio-stream0",
                        ],
                    },
                    {
                        "key": "hd",
                        "file_name": "hd.mp4",
                        "container": "mp4",
                        "elementary_streams": [
                            "video-stream1",
                            "audio-stream0",
                        ],
                    },
                ],
                "pubsub_destination": {
                    "topic": transcoder_notifications.id,
                },
            },
            labels={
                "label": "key",
            })
        ```

        ## Import

        JobTemplate can be imported using any of these accepted formats:

        * `projects/{{project}}/locations/{{location}}/jobTemplates/{{job_template_id}}`

        * `{{project}}/{{location}}/{{job_template_id}}`

        * `{{location}}/{{job_template_id}}`

        When using the `pulumi import` command, JobTemplate can be imported using one of the formats above. For example:

        ```sh
        $ pulumi import gcp:transcoder/jobTemplate:JobTemplate default projects/{{project}}/locations/{{location}}/jobTemplates/{{job_template_id}}
        ```

        ```sh
        $ pulumi import gcp:transcoder/jobTemplate:JobTemplate default {{project}}/{{location}}/{{job_template_id}}
        ```

        ```sh
        $ pulumi import gcp:transcoder/jobTemplate:JobTemplate default {{location}}/{{job_template_id}}
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['JobTemplateConfigArgs', 'JobTemplateConfigArgsDict']] config: The configuration for this template.
               Structure is documented below.
        :param pulumi.Input[str] job_template_id: ID to use for the Transcoding job template.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: The labels associated with this job template. You can use these to organize and group your job templates.
               
               **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
               Please refer to the field `effective_labels` for all of the labels present on the resource.
        :param pulumi.Input[str] location: The location of the transcoding job template resource.
               
               
               - - -
        :param pulumi.Input[str] project: The ID of the project in which the resource belongs.
               If it is not provided, the provider project is used.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: JobTemplateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Transcoding Job Template Resource

        To get more information about JobTemplate, see:

        * [API documentation](https://cloud.google.com/transcoder/docs/reference/rest/v1/projects.locations.jobTemplates)
        * How-to Guides
            * [Transcoder](https://cloud.google.com/transcoder/docs/)

        ## Example Usage

        ### Transcoder Job Template Basic

        ```python
        import pulumi
        import pulumi_gcp as gcp

        default = gcp.transcoder.JobTemplate("default",
            job_template_id="example-job-template",
            location="us-central1",
            config={
                "inputs": [{
                    "key": "input0",
                }],
                "edit_lists": [{
                    "key": "atom0",
                    "inputs": ["input0"],
                    "start_time_offset": "0s",
                }],
                "ad_breaks": [{
                    "start_time_offset": "3.500s",
                }],
                "elementary_streams": [
                    {
                        "key": "video-stream0",
                        "video_stream": {
                            "h264": {
                                "width_pixels": 640,
                                "height_pixels": 360,
                                "bitrate_bps": 550000,
                                "frame_rate": 60,
                                "pixel_format": "yuv420p",
                                "rate_control_mode": "vbr",
                                "crf_level": 21,
                                "gop_duration": "3s",
                                "vbv_size_bits": 550000,
                                "vbv_fullness_bits": 495000,
                                "entropy_coder": "cabac",
                                "profile": "high",
                                "preset": "veryfast",
                            },
                        },
                    },
                    {
                        "key": "video-stream1",
                        "video_stream": {
                            "h264": {
                                "width_pixels": 1280,
                                "height_pixels": 720,
                                "bitrate_bps": 550000,
                                "frame_rate": 60,
                                "pixel_format": "yuv420p",
                                "rate_control_mode": "vbr",
                                "crf_level": 21,
                                "gop_duration": "3s",
                                "vbv_size_bits": 2500000,
                                "vbv_fullness_bits": 2250000,
                                "entropy_coder": "cabac",
                                "profile": "high",
                                "preset": "veryfast",
                            },
                        },
                    },
                    {
                        "key": "audio-stream0",
                        "audio_stream": {
                            "codec": "aac",
                            "bitrate_bps": 64000,
                            "channel_count": 2,
                            "channel_layouts": [
                                "fl",
                                "fr",
                            ],
                            "sample_rate_hertz": 48000,
                        },
                    },
                ],
                "mux_streams": [
                    {
                        "key": "sd",
                        "file_name": "sd.mp4",
                        "container": "mp4",
                        "elementary_streams": [
                            "video-stream0",
                            "audio-stream0",
                        ],
                    },
                    {
                        "key": "hd",
                        "file_name": "hd.mp4",
                        "container": "mp4",
                        "elementary_streams": [
                            "video-stream1",
                            "audio-stream0",
                        ],
                    },
                ],
            },
            labels={
                "label": "key",
            })
        ```
        ### Transcoder Job Template Overlays

        ```python
        import pulumi
        import pulumi_gcp as gcp

        default = gcp.transcoder.JobTemplate("default",
            job_template_id="example-job-template",
            location="us-central1",
            config={
                "inputs": [{
                    "key": "input0",
                    "uri": "gs://example/example.mp4",
                }],
                "output": {
                    "uri": "gs://example/outputs/",
                },
                "edit_lists": [{
                    "key": "atom0",
                    "inputs": ["input0"],
                    "start_time_offset": "0s",
                }],
                "ad_breaks": [{
                    "start_time_offset": "3.500s",
                }],
                "overlays": [{
                    "animations": [{
                        "animation_fade": {
                            "fade_type": "FADE_IN",
                            "start_time_offset": "1.500s",
                            "end_time_offset": "3.500s",
                            "xy": {
                                "x": 1,
                                "y": 0.5,
                            },
                        },
                    }],
                    "image": {
                        "uri": "gs://example/overlay.png",
                    },
                }],
                "elementary_streams": [
                    {
                        "key": "video-stream0",
                        "video_stream": {
                            "h264": {
                                "width_pixels": 640,
                                "height_pixels": 360,
                                "bitrate_bps": 550000,
                                "frame_rate": 60,
                                "pixel_format": "yuv420p",
                                "rate_control_mode": "vbr",
                                "crf_level": 21,
                                "gop_duration": "3s",
                                "vbv_size_bits": 550000,
                                "vbv_fullness_bits": 495000,
                                "entropy_coder": "cabac",
                                "profile": "high",
                                "preset": "veryfast",
                            },
                        },
                    },
                    {
                        "key": "video-stream1",
                        "video_stream": {
                            "h264": {
                                "width_pixels": 1280,
                                "height_pixels": 720,
                                "bitrate_bps": 550000,
                                "frame_rate": 60,
                                "pixel_format": "yuv420p",
                                "rate_control_mode": "vbr",
                                "crf_level": 21,
                                "gop_duration": "3s",
                                "vbv_size_bits": 2500000,
                                "vbv_fullness_bits": 2250000,
                                "entropy_coder": "cabac",
                                "profile": "high",
                                "preset": "veryfast",
                            },
                        },
                    },
                    {
                        "key": "audio-stream0",
                        "audio_stream": {
                            "codec": "aac",
                            "bitrate_bps": 64000,
                            "channel_count": 2,
                            "channel_layouts": [
                                "fl",
                                "fr",
                            ],
                            "sample_rate_hertz": 48000,
                        },
                    },
                ],
                "mux_streams": [
                    {
                        "key": "sd",
                        "file_name": "sd.mp4",
                        "container": "mp4",
                        "elementary_streams": [
                            "video-stream0",
                            "audio-stream0",
                        ],
                    },
                    {
                        "key": "hd",
                        "file_name": "hd.mp4",
                        "container": "mp4",
                        "elementary_streams": [
                            "video-stream1",
                            "audio-stream0",
                        ],
                    },
                ],
            },
            labels={
                "label": "key",
            })
        ```
        ### Transcoder Job Template Encryptions

        ```python
        import pulumi
        import pulumi_gcp as gcp

        encryption_key = gcp.secretmanager.Secret("encryption_key",
            secret_id="transcoder-encryption-key",
            replication={
                "auto": {},
            })
        encryption_key_secret_version = gcp.secretmanager.SecretVersion("encryption_key",
            secret=encryption_key.name,
            secret_data="4A67F2C1B8E93A4F6D3E7890A1BC23DF")
        default = gcp.transcoder.JobTemplate("default",
            job_template_id="example-job-template",
            location="us-central1",
            config={
                "elementary_streams": [
                    {
                        "key": "es_video",
                        "video_stream": {
                            "h264": {
                                "profile": "main",
                                "height_pixels": 600,
                                "width_pixels": 800,
                                "bitrate_bps": 1000000,
                                "frame_rate": 60,
                            },
                        },
                    },
                    {
                        "key": "es_audio",
                        "audio_stream": {
                            "codec": "aac",
                            "channel_count": 2,
                            "bitrate_bps": 160000,
                        },
                    },
                ],
                "encryptions": [
                    {
                        "id": "aes-128",
                        "secret_manager_key_source": {
                            "secret_version": encryption_key_secret_version.name,
                        },
                        "drm_systems": {
                            "clearkey": {},
                        },
                        "aes128": {},
                    },
                    {
                        "id": "cenc",
                        "secret_manager_key_source": {
                            "secret_version": encryption_key_secret_version.name,
                        },
                        "drm_systems": {
                            "widevine": {},
                        },
                        "mpeg_cenc": {
                            "scheme": "cenc",
                        },
                    },
                    {
                        "id": "cbcs",
                        "secret_manager_key_source": {
                            "secret_version": encryption_key_secret_version.name,
                        },
                        "drm_systems": {
                            "widevine": {},
                        },
                        "mpeg_cenc": {
                            "scheme": "cbcs",
                        },
                    },
                ],
                "mux_streams": [
                    {
                        "key": "ts_aes128",
                        "container": "ts",
                        "elementary_streams": [
                            "es_video",
                            "es_audio",
                        ],
                        "segment_settings": {
                            "segment_duration": "6s",
                        },
                        "encryption_id": "aes-128",
                    },
                    {
                        "key": "fmp4_cenc_video",
                        "container": "fmp4",
                        "elementary_streams": ["es_video"],
                        "segment_settings": {
                            "segment_duration": "6s",
                        },
                        "encryption_id": "cenc",
                    },
                    {
                        "key": "fmp4_cenc_audio",
                        "container": "fmp4",
                        "elementary_streams": ["es_audio"],
                        "segment_settings": {
                            "segment_duration": "6s",
                        },
                        "encryption_id": "cenc",
                    },
                    {
                        "key": "fmp4_cbcs_video",
                        "container": "fmp4",
                        "elementary_streams": ["es_video"],
                        "segment_settings": {
                            "segment_duration": "6s",
                        },
                        "encryption_id": "cbcs",
                    },
                    {
                        "key": "fmp4_cbcs_audio",
                        "container": "fmp4",
                        "elementary_streams": ["es_audio"],
                        "segment_settings": {
                            "segment_duration": "6s",
                        },
                        "encryption_id": "cbcs",
                    },
                ],
                "manifests": [
                    {
                        "file_name": "manifest_aes128.m3u8",
                        "type": "HLS",
                        "mux_streams": ["ts_aes128"],
                    },
                    {
                        "file_name": "manifest_cenc.mpd",
                        "type": "DASH",
                        "mux_streams": [
                            "fmp4_cenc_video",
                            "fmp4_cenc_audio",
                        ],
                    },
                    {
                        "file_name": "manifest_cbcs.mpd",
                        "type": "DASH",
                        "mux_streams": [
                            "fmp4_cbcs_video",
                            "fmp4_cbcs_audio",
                        ],
                    },
                ],
            },
            labels={
                "label": "key",
            })
        ```
        ### Transcoder Job Template Pubsub

        ```python
        import pulumi
        import pulumi_gcp as gcp

        transcoder_notifications = gcp.pubsub.Topic("transcoder_notifications", name="transcoder-notifications")
        default = gcp.transcoder.JobTemplate("default",
            job_template_id="example-job-template",
            location="us-central1",
            config={
                "inputs": [{
                    "key": "input0",
                    "uri": "gs://example/example.mp4",
                }],
                "output": {
                    "uri": "gs://example/outputs/",
                },
                "edit_lists": [{
                    "key": "atom0",
                    "inputs": ["input0"],
                    "start_time_offset": "0s",
                }],
                "ad_breaks": [{
                    "start_time_offset": "3.500s",
                }],
                "elementary_streams": [
                    {
                        "key": "video-stream0",
                        "video_stream": {
                            "h264": {
                                "width_pixels": 640,
                                "height_pixels": 360,
                                "bitrate_bps": 550000,
                                "frame_rate": 60,
                                "pixel_format": "yuv420p",
                                "rate_control_mode": "vbr",
                                "crf_level": 21,
                                "gop_duration": "3s",
                                "vbv_size_bits": 550000,
                                "vbv_fullness_bits": 495000,
                                "entropy_coder": "cabac",
                                "profile": "high",
                                "preset": "veryfast",
                            },
                        },
                    },
                    {
                        "key": "video-stream1",
                        "video_stream": {
                            "h264": {
                                "width_pixels": 1280,
                                "height_pixels": 720,
                                "bitrate_bps": 550000,
                                "frame_rate": 60,
                                "pixel_format": "yuv420p",
                                "rate_control_mode": "vbr",
                                "crf_level": 21,
                                "gop_duration": "3s",
                                "vbv_size_bits": 2500000,
                                "vbv_fullness_bits": 2250000,
                                "entropy_coder": "cabac",
                                "profile": "high",
                                "preset": "veryfast",
                            },
                        },
                    },
                    {
                        "key": "audio-stream0",
                        "audio_stream": {
                            "codec": "aac",
                            "bitrate_bps": 64000,
                            "channel_count": 2,
                            "channel_layouts": [
                                "fl",
                                "fr",
                            ],
                            "sample_rate_hertz": 48000,
                        },
                    },
                ],
                "mux_streams": [
                    {
                        "key": "sd",
                        "file_name": "sd.mp4",
                        "container": "mp4",
                        "elementary_streams": [
                            "video-stream0",
                            "audio-stream0",
                        ],
                    },
                    {
                        "key": "hd",
                        "file_name": "hd.mp4",
                        "container": "mp4",
                        "elementary_streams": [
                            "video-stream1",
                            "audio-stream0",
                        ],
                    },
                ],
                "pubsub_destination": {
                    "topic": transcoder_notifications.id,
                },
            },
            labels={
                "label": "key",
            })
        ```

        ## Import

        JobTemplate can be imported using any of these accepted formats:

        * `projects/{{project}}/locations/{{location}}/jobTemplates/{{job_template_id}}`

        * `{{project}}/{{location}}/{{job_template_id}}`

        * `{{location}}/{{job_template_id}}`

        When using the `pulumi import` command, JobTemplate can be imported using one of the formats above. For example:

        ```sh
        $ pulumi import gcp:transcoder/jobTemplate:JobTemplate default projects/{{project}}/locations/{{location}}/jobTemplates/{{job_template_id}}
        ```

        ```sh
        $ pulumi import gcp:transcoder/jobTemplate:JobTemplate default {{project}}/{{location}}/{{job_template_id}}
        ```

        ```sh
        $ pulumi import gcp:transcoder/jobTemplate:JobTemplate default {{location}}/{{job_template_id}}
        ```

        :param str resource_name: The name of the resource.
        :param JobTemplateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(JobTemplateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 config: Optional[pulumi.Input[Union['JobTemplateConfigArgs', 'JobTemplateConfigArgsDict']]] = None,
                 job_template_id: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = JobTemplateArgs.__new__(JobTemplateArgs)

            __props__.__dict__["config"] = config
            if job_template_id is None and not opts.urn:
                raise TypeError("Missing required property 'job_template_id'")
            __props__.__dict__["job_template_id"] = job_template_id
            __props__.__dict__["labels"] = labels
            if location is None and not opts.urn:
                raise TypeError("Missing required property 'location'")
            __props__.__dict__["location"] = location
            __props__.__dict__["project"] = project
            __props__.__dict__["effective_labels"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["pulumi_labels"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["effectiveLabels", "pulumiLabels"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(JobTemplate, __self__).__init__(
            'gcp:transcoder/jobTemplate:JobTemplate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            config: Optional[pulumi.Input[Union['JobTemplateConfigArgs', 'JobTemplateConfigArgsDict']]] = None,
            effective_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            job_template_id: Optional[pulumi.Input[str]] = None,
            labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            location: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            project: Optional[pulumi.Input[str]] = None,
            pulumi_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None) -> 'JobTemplate':
        """
        Get an existing JobTemplate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['JobTemplateConfigArgs', 'JobTemplateConfigArgsDict']] config: The configuration for this template.
               Structure is documented below.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] effective_labels: All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        :param pulumi.Input[str] job_template_id: ID to use for the Transcoding job template.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: The labels associated with this job template. You can use these to organize and group your job templates.
               
               **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
               Please refer to the field `effective_labels` for all of the labels present on the resource.
        :param pulumi.Input[str] location: The location of the transcoding job template resource.
               
               
               - - -
        :param pulumi.Input[str] name: The resource name of the job template.
        :param pulumi.Input[str] project: The ID of the project in which the resource belongs.
               If it is not provided, the provider project is used.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] pulumi_labels: The combination of labels configured directly on the resource
               and default labels configured on the provider.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _JobTemplateState.__new__(_JobTemplateState)

        __props__.__dict__["config"] = config
        __props__.__dict__["effective_labels"] = effective_labels
        __props__.__dict__["job_template_id"] = job_template_id
        __props__.__dict__["labels"] = labels
        __props__.__dict__["location"] = location
        __props__.__dict__["name"] = name
        __props__.__dict__["project"] = project
        __props__.__dict__["pulumi_labels"] = pulumi_labels
        return JobTemplate(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def config(self) -> pulumi.Output['outputs.JobTemplateConfig']:
        """
        The configuration for this template.
        Structure is documented below.
        """
        return pulumi.get(self, "config")

    @property
    @pulumi.getter(name="effectiveLabels")
    def effective_labels(self) -> pulumi.Output[Mapping[str, str]]:
        """
        All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        """
        return pulumi.get(self, "effective_labels")

    @property
    @pulumi.getter(name="jobTemplateId")
    def job_template_id(self) -> pulumi.Output[str]:
        """
        ID to use for the Transcoding job template.
        """
        return pulumi.get(self, "job_template_id")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        The labels associated with this job template. You can use these to organize and group your job templates.

        **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        Please refer to the field `effective_labels` for all of the labels present on the resource.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        """
        The location of the transcoding job template resource.


        - - -
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The resource name of the job template.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[str]:
        """
        The ID of the project in which the resource belongs.
        If it is not provided, the provider project is used.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="pulumiLabels")
    def pulumi_labels(self) -> pulumi.Output[Mapping[str, str]]:
        """
        The combination of labels configured directly on the resource
        and default labels configured on the provider.
        """
        return pulumi.get(self, "pulumi_labels")

