# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CxTestCaseArgs', 'CxTestCase']

@pulumi.input_type
class CxTestCaseArgs:
    def __init__(__self__, *,
                 display_name: pulumi.Input[str],
                 notes: Optional[pulumi.Input[str]] = None,
                 parent: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 test_case_conversation_turns: Optional[pulumi.Input[Sequence[pulumi.Input['CxTestCaseTestCaseConversationTurnArgs']]]] = None,
                 test_config: Optional[pulumi.Input['CxTestCaseTestConfigArgs']] = None):
        """
        The set of arguments for constructing a CxTestCase resource.
        :param pulumi.Input[str] display_name: The human-readable name of the test case, unique within the agent. Limit of 200 characters.
               
               
               - - -
        :param pulumi.Input[str] notes: Additional freeform notes about the test case. Limit of 400 characters.
        :param pulumi.Input[str] parent: The agent to create the test case for.
               Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: Tags are short descriptions that users may apply to test cases for organizational and filtering purposes.
               Each tag should start with "#" and has a limit of 30 characters
        :param pulumi.Input[Sequence[pulumi.Input['CxTestCaseTestCaseConversationTurnArgs']]] test_case_conversation_turns: The conversation turns uttered when the test case was created, in chronological order. These include the canonical set of agent utterances that should occur when the agent is working properly.
               Structure is documented below.
        :param pulumi.Input['CxTestCaseTestConfigArgs'] test_config: Config for the test case.
               Structure is documented below.
        """
        CxTestCaseArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            display_name=display_name,
            notes=notes,
            parent=parent,
            tags=tags,
            test_case_conversation_turns=test_case_conversation_turns,
            test_config=test_config,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             display_name: pulumi.Input[str],
             notes: Optional[pulumi.Input[str]] = None,
             parent: Optional[pulumi.Input[str]] = None,
             tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             test_case_conversation_turns: Optional[pulumi.Input[Sequence[pulumi.Input['CxTestCaseTestCaseConversationTurnArgs']]]] = None,
             test_config: Optional[pulumi.Input['CxTestCaseTestConfigArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("display_name", display_name)
        if notes is not None:
            _setter("notes", notes)
        if parent is not None:
            _setter("parent", parent)
        if tags is not None:
            _setter("tags", tags)
        if test_case_conversation_turns is not None:
            _setter("test_case_conversation_turns", test_case_conversation_turns)
        if test_config is not None:
            _setter("test_config", test_config)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Input[str]:
        """
        The human-readable name of the test case, unique within the agent. Limit of 200 characters.


        - - -
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def notes(self) -> Optional[pulumi.Input[str]]:
        """
        Additional freeform notes about the test case. Limit of 400 characters.
        """
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notes", value)

    @property
    @pulumi.getter
    def parent(self) -> Optional[pulumi.Input[str]]:
        """
        The agent to create the test case for.
        Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>.
        """
        return pulumi.get(self, "parent")

    @parent.setter
    def parent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Tags are short descriptions that users may apply to test cases for organizational and filtering purposes.
        Each tag should start with "#" and has a limit of 30 characters
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="testCaseConversationTurns")
    def test_case_conversation_turns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CxTestCaseTestCaseConversationTurnArgs']]]]:
        """
        The conversation turns uttered when the test case was created, in chronological order. These include the canonical set of agent utterances that should occur when the agent is working properly.
        Structure is documented below.
        """
        return pulumi.get(self, "test_case_conversation_turns")

    @test_case_conversation_turns.setter
    def test_case_conversation_turns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CxTestCaseTestCaseConversationTurnArgs']]]]):
        pulumi.set(self, "test_case_conversation_turns", value)

    @property
    @pulumi.getter(name="testConfig")
    def test_config(self) -> Optional[pulumi.Input['CxTestCaseTestConfigArgs']]:
        """
        Config for the test case.
        Structure is documented below.
        """
        return pulumi.get(self, "test_config")

    @test_config.setter
    def test_config(self, value: Optional[pulumi.Input['CxTestCaseTestConfigArgs']]):
        pulumi.set(self, "test_config", value)


@pulumi.input_type
class _CxTestCaseState:
    def __init__(__self__, *,
                 creation_time: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 last_test_results: Optional[pulumi.Input[Sequence[pulumi.Input['CxTestCaseLastTestResultArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 parent: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 test_case_conversation_turns: Optional[pulumi.Input[Sequence[pulumi.Input['CxTestCaseTestCaseConversationTurnArgs']]]] = None,
                 test_config: Optional[pulumi.Input['CxTestCaseTestConfigArgs']] = None):
        """
        Input properties used for looking up and filtering CxTestCase resources.
        :param pulumi.Input[str] creation_time: When the test was created. A timestamp in RFC3339 text format.
        :param pulumi.Input[str] display_name: The human-readable name of the test case, unique within the agent. Limit of 200 characters.
               
               
               - - -
        :param pulumi.Input[Sequence[pulumi.Input['CxTestCaseLastTestResultArgs']]] last_test_results: The latest test result.
               Structure is documented below.
        :param pulumi.Input[str] name: The unique identifier of the page.
               Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/pages/<Page ID>.
        :param pulumi.Input[str] notes: Additional freeform notes about the test case. Limit of 400 characters.
        :param pulumi.Input[str] parent: The agent to create the test case for.
               Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: Tags are short descriptions that users may apply to test cases for organizational and filtering purposes.
               Each tag should start with "#" and has a limit of 30 characters
        :param pulumi.Input[Sequence[pulumi.Input['CxTestCaseTestCaseConversationTurnArgs']]] test_case_conversation_turns: The conversation turns uttered when the test case was created, in chronological order. These include the canonical set of agent utterances that should occur when the agent is working properly.
               Structure is documented below.
        :param pulumi.Input['CxTestCaseTestConfigArgs'] test_config: Config for the test case.
               Structure is documented below.
        """
        _CxTestCaseState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            creation_time=creation_time,
            display_name=display_name,
            last_test_results=last_test_results,
            name=name,
            notes=notes,
            parent=parent,
            tags=tags,
            test_case_conversation_turns=test_case_conversation_turns,
            test_config=test_config,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             creation_time: Optional[pulumi.Input[str]] = None,
             display_name: Optional[pulumi.Input[str]] = None,
             last_test_results: Optional[pulumi.Input[Sequence[pulumi.Input['CxTestCaseLastTestResultArgs']]]] = None,
             name: Optional[pulumi.Input[str]] = None,
             notes: Optional[pulumi.Input[str]] = None,
             parent: Optional[pulumi.Input[str]] = None,
             tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             test_case_conversation_turns: Optional[pulumi.Input[Sequence[pulumi.Input['CxTestCaseTestCaseConversationTurnArgs']]]] = None,
             test_config: Optional[pulumi.Input['CxTestCaseTestConfigArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if creation_time is not None:
            _setter("creation_time", creation_time)
        if display_name is not None:
            _setter("display_name", display_name)
        if last_test_results is not None:
            _setter("last_test_results", last_test_results)
        if name is not None:
            _setter("name", name)
        if notes is not None:
            _setter("notes", notes)
        if parent is not None:
            _setter("parent", parent)
        if tags is not None:
            _setter("tags", tags)
        if test_case_conversation_turns is not None:
            _setter("test_case_conversation_turns", test_case_conversation_turns)
        if test_config is not None:
            _setter("test_config", test_config)

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> Optional[pulumi.Input[str]]:
        """
        When the test was created. A timestamp in RFC3339 text format.
        """
        return pulumi.get(self, "creation_time")

    @creation_time.setter
    def creation_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "creation_time", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        The human-readable name of the test case, unique within the agent. Limit of 200 characters.


        - - -
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="lastTestResults")
    def last_test_results(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CxTestCaseLastTestResultArgs']]]]:
        """
        The latest test result.
        Structure is documented below.
        """
        return pulumi.get(self, "last_test_results")

    @last_test_results.setter
    def last_test_results(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CxTestCaseLastTestResultArgs']]]]):
        pulumi.set(self, "last_test_results", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The unique identifier of the page.
        Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/pages/<Page ID>.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def notes(self) -> Optional[pulumi.Input[str]]:
        """
        Additional freeform notes about the test case. Limit of 400 characters.
        """
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notes", value)

    @property
    @pulumi.getter
    def parent(self) -> Optional[pulumi.Input[str]]:
        """
        The agent to create the test case for.
        Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>.
        """
        return pulumi.get(self, "parent")

    @parent.setter
    def parent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Tags are short descriptions that users may apply to test cases for organizational and filtering purposes.
        Each tag should start with "#" and has a limit of 30 characters
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="testCaseConversationTurns")
    def test_case_conversation_turns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CxTestCaseTestCaseConversationTurnArgs']]]]:
        """
        The conversation turns uttered when the test case was created, in chronological order. These include the canonical set of agent utterances that should occur when the agent is working properly.
        Structure is documented below.
        """
        return pulumi.get(self, "test_case_conversation_turns")

    @test_case_conversation_turns.setter
    def test_case_conversation_turns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CxTestCaseTestCaseConversationTurnArgs']]]]):
        pulumi.set(self, "test_case_conversation_turns", value)

    @property
    @pulumi.getter(name="testConfig")
    def test_config(self) -> Optional[pulumi.Input['CxTestCaseTestConfigArgs']]:
        """
        Config for the test case.
        Structure is documented below.
        """
        return pulumi.get(self, "test_config")

    @test_config.setter
    def test_config(self, value: Optional[pulumi.Input['CxTestCaseTestConfigArgs']]):
        pulumi.set(self, "test_config", value)


class CxTestCase(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 parent: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 test_case_conversation_turns: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CxTestCaseTestCaseConversationTurnArgs']]]]] = None,
                 test_config: Optional[pulumi.Input[pulumi.InputType['CxTestCaseTestConfigArgs']]] = None,
                 __props__=None):
        """
        You can use the built-in test feature to uncover bugs and prevent regressions. A test execution verifies that agent responses have not changed for end-user inputs defined in the test case.

        To get more information about TestCase, see:

        * [API documentation](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/projects.locations.agents.testCases)
        * How-to Guides
            * [Official Documentation](https://cloud.google.com/dialogflow/cx/docs)

        ## Example Usage
        ### Dialogflowcx Test Case Full

        ```python
        import pulumi
        import json
        import pulumi_gcp as gcp

        agent = gcp.diagflow.CxAgent("agent",
            display_name="dialogflowcx-agent",
            location="global",
            default_language_code="en",
            supported_language_codes=[
                "fr",
                "de",
                "es",
            ],
            time_zone="America/New_York",
            description="Example description.",
            avatar_uri="https://storage.cloud.google.com/dialogflow-test-host-image/cloud-logo.png",
            enable_stackdriver_logging=True,
            enable_spell_correction=True,
            speech_to_text_settings=gcp.diagflow.CxAgentSpeechToTextSettingsArgs(
                enable_speech_adaptation=True,
            ))
        intent = gcp.diagflow.CxIntent("intent",
            parent=agent.id,
            display_name="MyIntent",
            priority=1,
            training_phrases=[gcp.diagflow.CxIntentTrainingPhraseArgs(
                parts=[gcp.diagflow.CxIntentTrainingPhrasePartArgs(
                    text="training phrase",
                )],
                repeat_count=1,
            )])
        page = gcp.diagflow.CxPage("page",
            parent=agent.start_flow,
            display_name="MyPage",
            transition_routes=[gcp.diagflow.CxPageTransitionRouteArgs(
                intent=intent.id,
                trigger_fulfillment=gcp.diagflow.CxPageTransitionRouteTriggerFulfillmentArgs(
                    messages=[gcp.diagflow.CxPageTransitionRouteTriggerFulfillmentMessageArgs(
                        text=gcp.diagflow.CxPageTransitionRouteTriggerFulfillmentMessageTextArgs(
                            texts=["Training phrase response"],
                        ),
                    )],
                ),
            )],
            event_handlers=[gcp.diagflow.CxPageEventHandlerArgs(
                event="some-event",
                trigger_fulfillment=gcp.diagflow.CxPageEventHandlerTriggerFulfillmentArgs(
                    messages=[gcp.diagflow.CxPageEventHandlerTriggerFulfillmentMessageArgs(
                        text=gcp.diagflow.CxPageEventHandlerTriggerFulfillmentMessageTextArgs(
                            texts=["Handling some event"],
                        ),
                    )],
                ),
            )])
        basic_test_case = gcp.diagflow.CxTestCase("basicTestCase",
            parent=agent.id,
            display_name="MyTestCase",
            tags=["#tag1"],
            notes="demonstrates a simple training phrase response",
            test_config=gcp.diagflow.CxTestCaseTestConfigArgs(
                tracking_parameters=["some_param"],
                page=page.id,
            ),
            test_case_conversation_turns=[
                gcp.diagflow.CxTestCaseTestCaseConversationTurnArgs(
                    user_input=gcp.diagflow.CxTestCaseTestCaseConversationTurnUserInputArgs(
                        input=gcp.diagflow.CxTestCaseTestCaseConversationTurnUserInputInputArgs(
                            language_code="en",
                            text=gcp.diagflow.CxTestCaseTestCaseConversationTurnUserInputInputTextArgs(
                                text="training phrase",
                            ),
                        ),
                        injected_parameters=json.dumps({
                            "some_param": "1",
                        }),
                        is_webhook_enabled=True,
                        enable_sentiment_analysis=True,
                    ),
                    virtual_agent_output=gcp.diagflow.CxTestCaseTestCaseConversationTurnVirtualAgentOutputArgs(
                        session_parameters=json.dumps({
                            "some_param": "1",
                        }),
                        triggered_intent=gcp.diagflow.CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentArgs(
                            name=intent.id,
                        ),
                        current_page=gcp.diagflow.CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPageArgs(
                            name=page.id,
                        ),
                        text_responses=[gcp.diagflow.CxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponseArgs(
                            texts=["Training phrase response"],
                        )],
                    ),
                ),
                gcp.diagflow.CxTestCaseTestCaseConversationTurnArgs(
                    user_input=gcp.diagflow.CxTestCaseTestCaseConversationTurnUserInputArgs(
                        input=gcp.diagflow.CxTestCaseTestCaseConversationTurnUserInputInputArgs(
                            event=gcp.diagflow.CxTestCaseTestCaseConversationTurnUserInputInputEventArgs(
                                event="some-event",
                            ),
                        ),
                    ),
                    virtual_agent_output=gcp.diagflow.CxTestCaseTestCaseConversationTurnVirtualAgentOutputArgs(
                        current_page=gcp.diagflow.CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPageArgs(
                            name=page.id,
                        ),
                        text_responses=[gcp.diagflow.CxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponseArgs(
                            texts=["Handling some event"],
                        )],
                    ),
                ),
                gcp.diagflow.CxTestCaseTestCaseConversationTurnArgs(
                    user_input=gcp.diagflow.CxTestCaseTestCaseConversationTurnUserInputArgs(
                        input=gcp.diagflow.CxTestCaseTestCaseConversationTurnUserInputInputArgs(
                            dtmf=gcp.diagflow.CxTestCaseTestCaseConversationTurnUserInputInputDtmfArgs(
                                digits="12",
                                finish_digit="3",
                            ),
                        ),
                    ),
                    virtual_agent_output=gcp.diagflow.CxTestCaseTestCaseConversationTurnVirtualAgentOutputArgs(
                        text_responses=[gcp.diagflow.CxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponseArgs(
                            texts=["I didn't get that. Can you say it again?"],
                        )],
                    ),
                ),
            ])
        ```

        ## Import

        TestCase can be imported using any of these accepted formats:

        ```sh
         $ pulumi import gcp:diagflow/cxTestCase:CxTestCase default {{parent}}/testCases/{{name}}
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] display_name: The human-readable name of the test case, unique within the agent. Limit of 200 characters.
               
               
               - - -
        :param pulumi.Input[str] notes: Additional freeform notes about the test case. Limit of 400 characters.
        :param pulumi.Input[str] parent: The agent to create the test case for.
               Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: Tags are short descriptions that users may apply to test cases for organizational and filtering purposes.
               Each tag should start with "#" and has a limit of 30 characters
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CxTestCaseTestCaseConversationTurnArgs']]]] test_case_conversation_turns: The conversation turns uttered when the test case was created, in chronological order. These include the canonical set of agent utterances that should occur when the agent is working properly.
               Structure is documented below.
        :param pulumi.Input[pulumi.InputType['CxTestCaseTestConfigArgs']] test_config: Config for the test case.
               Structure is documented below.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CxTestCaseArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        You can use the built-in test feature to uncover bugs and prevent regressions. A test execution verifies that agent responses have not changed for end-user inputs defined in the test case.

        To get more information about TestCase, see:

        * [API documentation](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/projects.locations.agents.testCases)
        * How-to Guides
            * [Official Documentation](https://cloud.google.com/dialogflow/cx/docs)

        ## Example Usage
        ### Dialogflowcx Test Case Full

        ```python
        import pulumi
        import json
        import pulumi_gcp as gcp

        agent = gcp.diagflow.CxAgent("agent",
            display_name="dialogflowcx-agent",
            location="global",
            default_language_code="en",
            supported_language_codes=[
                "fr",
                "de",
                "es",
            ],
            time_zone="America/New_York",
            description="Example description.",
            avatar_uri="https://storage.cloud.google.com/dialogflow-test-host-image/cloud-logo.png",
            enable_stackdriver_logging=True,
            enable_spell_correction=True,
            speech_to_text_settings=gcp.diagflow.CxAgentSpeechToTextSettingsArgs(
                enable_speech_adaptation=True,
            ))
        intent = gcp.diagflow.CxIntent("intent",
            parent=agent.id,
            display_name="MyIntent",
            priority=1,
            training_phrases=[gcp.diagflow.CxIntentTrainingPhraseArgs(
                parts=[gcp.diagflow.CxIntentTrainingPhrasePartArgs(
                    text="training phrase",
                )],
                repeat_count=1,
            )])
        page = gcp.diagflow.CxPage("page",
            parent=agent.start_flow,
            display_name="MyPage",
            transition_routes=[gcp.diagflow.CxPageTransitionRouteArgs(
                intent=intent.id,
                trigger_fulfillment=gcp.diagflow.CxPageTransitionRouteTriggerFulfillmentArgs(
                    messages=[gcp.diagflow.CxPageTransitionRouteTriggerFulfillmentMessageArgs(
                        text=gcp.diagflow.CxPageTransitionRouteTriggerFulfillmentMessageTextArgs(
                            texts=["Training phrase response"],
                        ),
                    )],
                ),
            )],
            event_handlers=[gcp.diagflow.CxPageEventHandlerArgs(
                event="some-event",
                trigger_fulfillment=gcp.diagflow.CxPageEventHandlerTriggerFulfillmentArgs(
                    messages=[gcp.diagflow.CxPageEventHandlerTriggerFulfillmentMessageArgs(
                        text=gcp.diagflow.CxPageEventHandlerTriggerFulfillmentMessageTextArgs(
                            texts=["Handling some event"],
                        ),
                    )],
                ),
            )])
        basic_test_case = gcp.diagflow.CxTestCase("basicTestCase",
            parent=agent.id,
            display_name="MyTestCase",
            tags=["#tag1"],
            notes="demonstrates a simple training phrase response",
            test_config=gcp.diagflow.CxTestCaseTestConfigArgs(
                tracking_parameters=["some_param"],
                page=page.id,
            ),
            test_case_conversation_turns=[
                gcp.diagflow.CxTestCaseTestCaseConversationTurnArgs(
                    user_input=gcp.diagflow.CxTestCaseTestCaseConversationTurnUserInputArgs(
                        input=gcp.diagflow.CxTestCaseTestCaseConversationTurnUserInputInputArgs(
                            language_code="en",
                            text=gcp.diagflow.CxTestCaseTestCaseConversationTurnUserInputInputTextArgs(
                                text="training phrase",
                            ),
                        ),
                        injected_parameters=json.dumps({
                            "some_param": "1",
                        }),
                        is_webhook_enabled=True,
                        enable_sentiment_analysis=True,
                    ),
                    virtual_agent_output=gcp.diagflow.CxTestCaseTestCaseConversationTurnVirtualAgentOutputArgs(
                        session_parameters=json.dumps({
                            "some_param": "1",
                        }),
                        triggered_intent=gcp.diagflow.CxTestCaseTestCaseConversationTurnVirtualAgentOutputTriggeredIntentArgs(
                            name=intent.id,
                        ),
                        current_page=gcp.diagflow.CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPageArgs(
                            name=page.id,
                        ),
                        text_responses=[gcp.diagflow.CxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponseArgs(
                            texts=["Training phrase response"],
                        )],
                    ),
                ),
                gcp.diagflow.CxTestCaseTestCaseConversationTurnArgs(
                    user_input=gcp.diagflow.CxTestCaseTestCaseConversationTurnUserInputArgs(
                        input=gcp.diagflow.CxTestCaseTestCaseConversationTurnUserInputInputArgs(
                            event=gcp.diagflow.CxTestCaseTestCaseConversationTurnUserInputInputEventArgs(
                                event="some-event",
                            ),
                        ),
                    ),
                    virtual_agent_output=gcp.diagflow.CxTestCaseTestCaseConversationTurnVirtualAgentOutputArgs(
                        current_page=gcp.diagflow.CxTestCaseTestCaseConversationTurnVirtualAgentOutputCurrentPageArgs(
                            name=page.id,
                        ),
                        text_responses=[gcp.diagflow.CxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponseArgs(
                            texts=["Handling some event"],
                        )],
                    ),
                ),
                gcp.diagflow.CxTestCaseTestCaseConversationTurnArgs(
                    user_input=gcp.diagflow.CxTestCaseTestCaseConversationTurnUserInputArgs(
                        input=gcp.diagflow.CxTestCaseTestCaseConversationTurnUserInputInputArgs(
                            dtmf=gcp.diagflow.CxTestCaseTestCaseConversationTurnUserInputInputDtmfArgs(
                                digits="12",
                                finish_digit="3",
                            ),
                        ),
                    ),
                    virtual_agent_output=gcp.diagflow.CxTestCaseTestCaseConversationTurnVirtualAgentOutputArgs(
                        text_responses=[gcp.diagflow.CxTestCaseTestCaseConversationTurnVirtualAgentOutputTextResponseArgs(
                            texts=["I didn't get that. Can you say it again?"],
                        )],
                    ),
                ),
            ])
        ```

        ## Import

        TestCase can be imported using any of these accepted formats:

        ```sh
         $ pulumi import gcp:diagflow/cxTestCase:CxTestCase default {{parent}}/testCases/{{name}}
        ```

        :param str resource_name: The name of the resource.
        :param CxTestCaseArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CxTestCaseArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            CxTestCaseArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 parent: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 test_case_conversation_turns: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CxTestCaseTestCaseConversationTurnArgs']]]]] = None,
                 test_config: Optional[pulumi.Input[pulumi.InputType['CxTestCaseTestConfigArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CxTestCaseArgs.__new__(CxTestCaseArgs)

            if display_name is None and not opts.urn:
                raise TypeError("Missing required property 'display_name'")
            __props__.__dict__["display_name"] = display_name
            __props__.__dict__["notes"] = notes
            __props__.__dict__["parent"] = parent
            __props__.__dict__["tags"] = tags
            __props__.__dict__["test_case_conversation_turns"] = test_case_conversation_turns
            if test_config is not None and not isinstance(test_config, CxTestCaseTestConfigArgs):
                test_config = test_config or {}
                def _setter(key, value):
                    test_config[key] = value
                CxTestCaseTestConfigArgs._configure(_setter, **test_config)
            __props__.__dict__["test_config"] = test_config
            __props__.__dict__["creation_time"] = None
            __props__.__dict__["last_test_results"] = None
            __props__.__dict__["name"] = None
        super(CxTestCase, __self__).__init__(
            'gcp:diagflow/cxTestCase:CxTestCase',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            creation_time: Optional[pulumi.Input[str]] = None,
            display_name: Optional[pulumi.Input[str]] = None,
            last_test_results: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CxTestCaseLastTestResultArgs']]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            notes: Optional[pulumi.Input[str]] = None,
            parent: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            test_case_conversation_turns: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CxTestCaseTestCaseConversationTurnArgs']]]]] = None,
            test_config: Optional[pulumi.Input[pulumi.InputType['CxTestCaseTestConfigArgs']]] = None) -> 'CxTestCase':
        """
        Get an existing CxTestCase resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] creation_time: When the test was created. A timestamp in RFC3339 text format.
        :param pulumi.Input[str] display_name: The human-readable name of the test case, unique within the agent. Limit of 200 characters.
               
               
               - - -
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CxTestCaseLastTestResultArgs']]]] last_test_results: The latest test result.
               Structure is documented below.
        :param pulumi.Input[str] name: The unique identifier of the page.
               Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/pages/<Page ID>.
        :param pulumi.Input[str] notes: Additional freeform notes about the test case. Limit of 400 characters.
        :param pulumi.Input[str] parent: The agent to create the test case for.
               Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: Tags are short descriptions that users may apply to test cases for organizational and filtering purposes.
               Each tag should start with "#" and has a limit of 30 characters
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CxTestCaseTestCaseConversationTurnArgs']]]] test_case_conversation_turns: The conversation turns uttered when the test case was created, in chronological order. These include the canonical set of agent utterances that should occur when the agent is working properly.
               Structure is documented below.
        :param pulumi.Input[pulumi.InputType['CxTestCaseTestConfigArgs']] test_config: Config for the test case.
               Structure is documented below.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CxTestCaseState.__new__(_CxTestCaseState)

        __props__.__dict__["creation_time"] = creation_time
        __props__.__dict__["display_name"] = display_name
        __props__.__dict__["last_test_results"] = last_test_results
        __props__.__dict__["name"] = name
        __props__.__dict__["notes"] = notes
        __props__.__dict__["parent"] = parent
        __props__.__dict__["tags"] = tags
        __props__.__dict__["test_case_conversation_turns"] = test_case_conversation_turns
        __props__.__dict__["test_config"] = test_config
        return CxTestCase(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> pulumi.Output[str]:
        """
        When the test was created. A timestamp in RFC3339 text format.
        """
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[str]:
        """
        The human-readable name of the test case, unique within the agent. Limit of 200 characters.


        - - -
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="lastTestResults")
    def last_test_results(self) -> pulumi.Output[Sequence['outputs.CxTestCaseLastTestResult']]:
        """
        The latest test result.
        Structure is documented below.
        """
        return pulumi.get(self, "last_test_results")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The unique identifier of the page.
        Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/pages/<Page ID>.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def notes(self) -> pulumi.Output[Optional[str]]:
        """
        Additional freeform notes about the test case. Limit of 400 characters.
        """
        return pulumi.get(self, "notes")

    @property
    @pulumi.getter
    def parent(self) -> pulumi.Output[Optional[str]]:
        """
        The agent to create the test case for.
        Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>.
        """
        return pulumi.get(self, "parent")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Tags are short descriptions that users may apply to test cases for organizational and filtering purposes.
        Each tag should start with "#" and has a limit of 30 characters
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="testCaseConversationTurns")
    def test_case_conversation_turns(self) -> pulumi.Output[Optional[Sequence['outputs.CxTestCaseTestCaseConversationTurn']]]:
        """
        The conversation turns uttered when the test case was created, in chronological order. These include the canonical set of agent utterances that should occur when the agent is working properly.
        Structure is documented below.
        """
        return pulumi.get(self, "test_case_conversation_turns")

    @property
    @pulumi.getter(name="testConfig")
    def test_config(self) -> pulumi.Output[Optional['outputs.CxTestCaseTestConfig']]:
        """
        Config for the test case.
        Structure is documented below.
        """
        return pulumi.get(self, "test_config")

