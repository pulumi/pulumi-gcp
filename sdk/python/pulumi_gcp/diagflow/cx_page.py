# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CxPageArrgs', 'CxPage']

@pulumi.input_type
calass CxPageArrgs:
    def __init__(__self__, *,
                 display_name: pulumi.Input[str],
                 entry_fulfillment: Optional[pulumi.Input['CxPageEntryFulfillmentArrgs']] = None,
                 event_handlers: Optional[pulumi.Input[Sequence[pulumi.Input['CxPageEventHandlerArrgs']]]] = None,
                 form: Optional[pulumi.Input['CxPageFormArrgs']] = None,
                 language_code: Optional[pulumi.Input[str]] = None,
                 parent: Optional[pulumi.Input[str]] = None,
                 transition_route_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 transition_routes: Optional[pulumi.Input[Sequence[pulumi.Input['CxPageTransitionRouteArrgs']]]] = None):
        """
        The set of arguments for constructing a CxPage resource.
        :param pulumi.Input[str] display_name: The human-readable name of the page, unique within the agent.
               
               
               - - -
        :param pulumi.Input['CxPageEntryFulfillmentArrgs'] entry_fulfillment: The fulfillment to call when the session is entering the page.
               Structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['CxPageEventHandlerArrgs']]] event_handlers: Handlers associated with the page to handle events such as webhook errors, no match or no input.
               Structure is documented below.
        :param pulumi.Input['CxPageFormArrgs'] form: The form associated with the page, used for collecting parameters relevant to the page.
               Structure is documented below.
        :param pulumi.Input[str] language_code: The language of the following fields in page:
               Page.entry_fulfillment.messages
               Page.entry_fulfillment.conditional_cases
               Page.event_handlers.trigger_fulfillment.messages
               Page.event_handlers.trigger_fulfillment.conditional_cases
               Page.form.parameters.fill_behavior.initial_prompt_fulfillment.messages
               Page.form.parameters.fill_behavior.initial_prompt_fulfillment.conditional_cases
               Page.form.parameters.fill_behavior.reprompt_event_handlers.messages
               Page.form.parameters.fill_behavior.reprompt_event_handlers.conditional_cases
               Page.transition_routes.trigger_fulfillment.messages
               Page.transition_routes.trigger_fulfillment.conditional_cases
               If not specified, the agent's default language is used. Many languages are supported. Note: languages must be enabled in the agent before they can be used.
        :param pulumi.Input[str] parent: The flow to create a page for.
               Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] transition_route_groups: Ordered list of TransitionRouteGroups associated with the page. Transition route groups must be unique within a page.
               If multiple transition routes within a page scope refer to the same intent, then the precedence order is: page's transition route > page's transition route group > flow's transition routes.
               If multiple transition route groups within a page contain the same intent, then the first group in the ordered list takes precedence.
               Format:projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/transitionRouteGroups/<TransitionRouteGroup ID>.
        :param pulumi.Input[Sequence[pulumi.Input['CxPageTransitionRouteArrgs']]] transition_routes: A list of transitions for the transition rules of this page. They route the conversation to another page in the same flow, or another flow.
               When we are in a certain page, the TransitionRoutes are evalauted in the following order:
               TransitionRoutes defined in the page with intent specified.
               TransitionRoutes defined in the transition route groups with intent specified.
               TransitionRoutes defined in flow with intent specified.
               TransitionRoutes defined in the transition route groups with intent specified.
               TransitionRoutes defined in the page with only condition specified.
               TransitionRoutes defined in the transition route groups with only condition specified.
               Structure is documented below.
        """
        pulumi.set(__self__, "display_name", display_name)
        if entry_fulfillment is not None:
            pulumi.set(__self__, "entry_fulfillment", entry_fulfillment)
        if event_handlers is not None:
            pulumi.set(__self__, "event_handlers", event_handlers)
        if form is not None:
            pulumi.set(__self__, "form", form)
        if language_code is not None:
            pulumi.set(__self__, "language_code", language_code)
        if parent is not None:
            pulumi.set(__self__, "parent", parent)
        if transition_route_groups is not None:
            pulumi.set(__self__, "transition_route_groups", transition_route_groups)
        if transition_routes is not None:
            pulumi.set(__self__, "transition_routes", transition_routes)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Input[str]:
        """
        The human-readable name of the page, unique within the agent.


        - - -
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="entryFulfillment")
    def entry_fulfillment(self) -> Optional[pulumi.Input['CxPageEntryFulfillmentArrgs']]:
        """
        The fulfillment to call when the session is entering the page.
        Structure is documented below.
        """
        return pulumi.get(self, "entry_fulfillment")

    @entry_fulfillment.setter
    def entry_fulfillment(self, value: Optional[pulumi.Input['CxPageEntryFulfillmentArrgs']]):
        pulumi.set(self, "entry_fulfillment", value)

    @property
    @pulumi.getter(name="eventHandlers")
    def event_handlers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CxPageEventHandlerArrgs']]]]:
        """
        Handlers associated with the page to handle events such as webhook errors, no match or no input.
        Structure is documented below.
        """
        return pulumi.get(self, "event_handlers")

    @event_handlers.setter
    def event_handlers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CxPageEventHandlerArrgs']]]]):
        pulumi.set(self, "event_handlers", value)

    @property
    @pulumi.getter
    def form(self) -> Optional[pulumi.Input['CxPageFormArrgs']]:
        """
        The form associated with the page, used for collecting parameters relevant to the page.
        Structure is documented below.
        """
        return pulumi.get(self, "form")

    @form.setter
    def form(self, value: Optional[pulumi.Input['CxPageFormArrgs']]):
        pulumi.set(self, "form", value)

    @property
    @pulumi.getter(name="languageCode")
    def language_code(self) -> Optional[pulumi.Input[str]]:
        """
        The language of the following fields in page:
        Page.entry_fulfillment.messages
        Page.entry_fulfillment.conditional_cases
        Page.event_handlers.trigger_fulfillment.messages
        Page.event_handlers.trigger_fulfillment.conditional_cases
        Page.form.parameters.fill_behavior.initial_prompt_fulfillment.messages
        Page.form.parameters.fill_behavior.initial_prompt_fulfillment.conditional_cases
        Page.form.parameters.fill_behavior.reprompt_event_handlers.messages
        Page.form.parameters.fill_behavior.reprompt_event_handlers.conditional_cases
        Page.transition_routes.trigger_fulfillment.messages
        Page.transition_routes.trigger_fulfillment.conditional_cases
        If not specified, the agent's default language is used. Many languages are supported. Note: languages must be enabled in the agent before they can be used.
        """
        return pulumi.get(self, "language_code")

    @language_code.setter
    def language_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "language_code", value)

    @property
    @pulumi.getter
    def parent(self) -> Optional[pulumi.Input[str]]:
        """
        The flow to create a page for.
        Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>.
        """
        return pulumi.get(self, "parent")

    @parent.setter
    def parent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent", value)

    @property
    @pulumi.getter(name="transitionRouteGroups")
    def transition_route_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Ordered list of TransitionRouteGroups associated with the page. Transition route groups must be unique within a page.
        If multiple transition routes within a page scope refer to the same intent, then the precedence order is: page's transition route > page's transition route group > flow's transition routes.
        If multiple transition route groups within a page contain the same intent, then the first group in the ordered list takes precedence.
        Format:projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/transitionRouteGroups/<TransitionRouteGroup ID>.
        """
        return pulumi.get(self, "transition_route_groups")

    @transition_route_groups.setter
    def transition_route_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "transition_route_groups", value)

    @property
    @pulumi.getter(name="transitionRoutes")
    def transition_routes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CxPageTransitionRouteArrgs']]]]:
        """
        A list of transitions for the transition rules of this page. They route the conversation to another page in the same flow, or another flow.
        When we are in a certain page, the TransitionRoutes are evalauted in the following order:
        TransitionRoutes defined in the page with intent specified.
        TransitionRoutes defined in the transition route groups with intent specified.
        TransitionRoutes defined in flow with intent specified.
        TransitionRoutes defined in the transition route groups with intent specified.
        TransitionRoutes defined in the page with only condition specified.
        TransitionRoutes defined in the transition route groups with only condition specified.
        Structure is documented below.
        """
        return pulumi.get(self, "transition_routes")

    @transition_routes.setter
    def transition_routes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CxPageTransitionRouteArrgs']]]]):
        pulumi.set(self, "transition_routes", value)


@pulumi.input_type
calass _CxPageState:
    def __init__(__self__, *,
                 display_name: Optional[pulumi.Input[str]] = None,
                 entry_fulfillment: Optional[pulumi.Input['CxPageEntryFulfillmentArrgs']] = None,
                 event_handlers: Optional[pulumi.Input[Sequence[pulumi.Input['CxPageEventHandlerArrgs']]]] = None,
                 form: Optional[pulumi.Input['CxPageFormArrgs']] = None,
                 language_code: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 parent: Optional[pulumi.Input[str]] = None,
                 transition_route_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 transition_routes: Optional[pulumi.Input[Sequence[pulumi.Input['CxPageTransitionRouteArrgs']]]] = None):
        """
        Input properties used for looking up and filtering CxPage resources.
        :param pulumi.Input[str] display_name: The human-readable name of the page, unique within the agent.
               
               
               - - -
        :param pulumi.Input['CxPageEntryFulfillmentArrgs'] entry_fulfillment: The fulfillment to call when the session is entering the page.
               Structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['CxPageEventHandlerArrgs']]] event_handlers: Handlers associated with the page to handle events such as webhook errors, no match or no input.
               Structure is documented below.
        :param pulumi.Input['CxPageFormArrgs'] form: The form associated with the page, used for collecting parameters relevant to the page.
               Structure is documented below.
        :param pulumi.Input[str] language_code: The language of the following fields in page:
               Page.entry_fulfillment.messages
               Page.entry_fulfillment.conditional_cases
               Page.event_handlers.trigger_fulfillment.messages
               Page.event_handlers.trigger_fulfillment.conditional_cases
               Page.form.parameters.fill_behavior.initial_prompt_fulfillment.messages
               Page.form.parameters.fill_behavior.initial_prompt_fulfillment.conditional_cases
               Page.form.parameters.fill_behavior.reprompt_event_handlers.messages
               Page.form.parameters.fill_behavior.reprompt_event_handlers.conditional_cases
               Page.transition_routes.trigger_fulfillment.messages
               Page.transition_routes.trigger_fulfillment.conditional_cases
               If not specified, the agent's default language is used. Many languages are supported. Note: languages must be enabled in the agent before they can be used.
        :param pulumi.Input[str] name: (Output)
               The unique identifier of this event handler.
        :param pulumi.Input[str] parent: The flow to create a page for.
               Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] transition_route_groups: Ordered list of TransitionRouteGroups associated with the page. Transition route groups must be unique within a page.
               If multiple transition routes within a page scope refer to the same intent, then the precedence order is: page's transition route > page's transition route group > flow's transition routes.
               If multiple transition route groups within a page contain the same intent, then the first group in the ordered list takes precedence.
               Format:projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/transitionRouteGroups/<TransitionRouteGroup ID>.
        :param pulumi.Input[Sequence[pulumi.Input['CxPageTransitionRouteArrgs']]] transition_routes: A list of transitions for the transition rules of this page. They route the conversation to another page in the same flow, or another flow.
               When we are in a certain page, the TransitionRoutes are evalauted in the following order:
               TransitionRoutes defined in the page with intent specified.
               TransitionRoutes defined in the transition route groups with intent specified.
               TransitionRoutes defined in flow with intent specified.
               TransitionRoutes defined in the transition route groups with intent specified.
               TransitionRoutes defined in the page with only condition specified.
               TransitionRoutes defined in the transition route groups with only condition specified.
               Structure is documented below.
        """
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if entry_fulfillment is not None:
            pulumi.set(__self__, "entry_fulfillment", entry_fulfillment)
        if event_handlers is not None:
            pulumi.set(__self__, "event_handlers", event_handlers)
        if form is not None:
            pulumi.set(__self__, "form", form)
        if language_code is not None:
            pulumi.set(__self__, "language_code", language_code)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parent is not None:
            pulumi.set(__self__, "parent", parent)
        if transition_route_groups is not None:
            pulumi.set(__self__, "transition_route_groups", transition_route_groups)
        if transition_routes is not None:
            pulumi.set(__self__, "transition_routes", transition_routes)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        The human-readable name of the page, unique within the agent.


        - - -
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="entryFulfillment")
    def entry_fulfillment(self) -> Optional[pulumi.Input['CxPageEntryFulfillmentArrgs']]:
        """
        The fulfillment to call when the session is entering the page.
        Structure is documented below.
        """
        return pulumi.get(self, "entry_fulfillment")

    @entry_fulfillment.setter
    def entry_fulfillment(self, value: Optional[pulumi.Input['CxPageEntryFulfillmentArrgs']]):
        pulumi.set(self, "entry_fulfillment", value)

    @property
    @pulumi.getter(name="eventHandlers")
    def event_handlers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CxPageEventHandlerArrgs']]]]:
        """
        Handlers associated with the page to handle events such as webhook errors, no match or no input.
        Structure is documented below.
        """
        return pulumi.get(self, "event_handlers")

    @event_handlers.setter
    def event_handlers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CxPageEventHandlerArrgs']]]]):
        pulumi.set(self, "event_handlers", value)

    @property
    @pulumi.getter
    def form(self) -> Optional[pulumi.Input['CxPageFormArrgs']]:
        """
        The form associated with the page, used for collecting parameters relevant to the page.
        Structure is documented below.
        """
        return pulumi.get(self, "form")

    @form.setter
    def form(self, value: Optional[pulumi.Input['CxPageFormArrgs']]):
        pulumi.set(self, "form", value)

    @property
    @pulumi.getter(name="languageCode")
    def language_code(self) -> Optional[pulumi.Input[str]]:
        """
        The language of the following fields in page:
        Page.entry_fulfillment.messages
        Page.entry_fulfillment.conditional_cases
        Page.event_handlers.trigger_fulfillment.messages
        Page.event_handlers.trigger_fulfillment.conditional_cases
        Page.form.parameters.fill_behavior.initial_prompt_fulfillment.messages
        Page.form.parameters.fill_behavior.initial_prompt_fulfillment.conditional_cases
        Page.form.parameters.fill_behavior.reprompt_event_handlers.messages
        Page.form.parameters.fill_behavior.reprompt_event_handlers.conditional_cases
        Page.transition_routes.trigger_fulfillment.messages
        Page.transition_routes.trigger_fulfillment.conditional_cases
        If not specified, the agent's default language is used. Many languages are supported. Note: languages must be enabled in the agent before they can be used.
        """
        return pulumi.get(self, "language_code")

    @language_code.setter
    def language_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "language_code", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        The unique identifier of this event handler.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def parent(self) -> Optional[pulumi.Input[str]]:
        """
        The flow to create a page for.
        Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>.
        """
        return pulumi.get(self, "parent")

    @parent.setter
    def parent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent", value)

    @property
    @pulumi.getter(name="transitionRouteGroups")
    def transition_route_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Ordered list of TransitionRouteGroups associated with the page. Transition route groups must be unique within a page.
        If multiple transition routes within a page scope refer to the same intent, then the precedence order is: page's transition route > page's transition route group > flow's transition routes.
        If multiple transition route groups within a page contain the same intent, then the first group in the ordered list takes precedence.
        Format:projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/transitionRouteGroups/<TransitionRouteGroup ID>.
        """
        return pulumi.get(self, "transition_route_groups")

    @transition_route_groups.setter
    def transition_route_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "transition_route_groups", value)

    @property
    @pulumi.getter(name="transitionRoutes")
    def transition_routes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CxPageTransitionRouteArrgs']]]]:
        """
        A list of transitions for the transition rules of this page. They route the conversation to another page in the same flow, or another flow.
        When we are in a certain page, the TransitionRoutes are evalauted in the following order:
        TransitionRoutes defined in the page with intent specified.
        TransitionRoutes defined in the transition route groups with intent specified.
        TransitionRoutes defined in flow with intent specified.
        TransitionRoutes defined in the transition route groups with intent specified.
        TransitionRoutes defined in the page with only condition specified.
        TransitionRoutes defined in the transition route groups with only condition specified.
        Structure is documented below.
        """
        return pulumi.get(self, "transition_routes")

    @transition_routes.setter
    def transition_routes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CxPageTransitionRouteArrgs']]]]):
        pulumi.set(self, "transition_routes", value)


calass CxPage(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 entry_fulfillment: Optional[pulumi.Input[pulumi.InputType['CxPageEntryFulfillmentArrgs']]] = None,
                 event_handlers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CxPageEventHandlerArrgs']]]]] = None,
                 form: Optional[pulumi.Input[pulumi.InputType['CxPageFormArrgs']]] = None,
                 language_code: Optional[pulumi.Input[str]] = None,
                 parent: Optional[pulumi.Input[str]] = None,
                 transition_route_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 transition_routes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CxPageTransitionRouteArrgs']]]]] = None,
                 __props__=None):
        """
        A Dialogflow CX conversation (session) can be described and visualized as a state machine. The states of a CX session are represented by pages.

        To get more information about Page, see:

        * [API documentation](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/projects.locations.agents.flows.pages)
        * How-to Guides
            * [Official Documentation](https://cloud.google.com/dialogflow/cx/docs)

        ## Example Usage
        ### Dialogflowcx Page Full

        ```python
        import pulumi
        import json
        import pulumi_gcp as gcp

        agent = gcp.diagflow.CxAgent("agent",
            display_name="dialogflowcx-agent",
            location="global",
            default_language_code="en",
            supported_language_codes=[
                "fr",
                "de",
                "es",
            ],
            time_zone="America/New_York",
            description="Example description.",
            avatar_uri="https://cloud.google.com/_static/images/cloud/icons/favicons/onecloud/super_cloud.png",
            enable_stackdriver_logging=True,
            enable_spell_correction=True,
            speech_to_text_settings=gcp.diagflow.CxAgentSpeechToTextSettingsArrgs(
                enable_speech_adaptation=True,
            ))
        my_page2 = gcp.diagflow.CxPage("myPage2",
            parent=agent.start_flow,
            display_name="MyPage2")
        my_webhook = gcp.diagflow.CxWebhook("myWebhook",
            parent=agent.id,
            display_name="MyWebhook",
            generic_web_service=gcp.diagflow.CxWebhookGenericWebServiceArrgs(
                uri="https://example.com",
            ))
        basic_page = gcp.diagflow.CxPage("basicPage",
            parent=agent.start_flow,
            display_name="MyPage",
            entry_fulfillment=gcp.diagflow.CxPageEntryFulfillmentArrgs(
                messages=[
                    gcp.diagflow.CxPageEntryFulfillmentMessageArrgs(
                        channel="some-channel",
                        text=gcp.diagflow.CxPageEntryFulfillmentMessageTextArrgs(
                            texts=["Welcome to page"],
                        ),
                    ),
                    gcp.diagflow.CxPageEntryFulfillmentMessageArrgs(
                        payload="        {\\"some-key\\": \\"some-value\\", \\"other-key\\": [\\"other-value\\"]}\\n",
                    ),
                    gcp.diagflow.CxPageEntryFulfillmentMessageArrgs(
                        conversation_success=gcp.diagflow.CxPageEntryFulfillmentMessageConversationSuccessArrgs(
                            metadata="          {\\"some-metadata-key\\": \\"some-value\\", \\"other-metadata-key\\": 1234}\\n",
                        ),
                    ),
                    gcp.diagflow.CxPageEntryFulfillmentMessageArrgs(
                        output_audio_text=gcp.diagflow.CxPageEntryFulfillmentMessageOutputAudioTextArrgs(
                            text="some output text",
                        ),
                    ),
                    gcp.diagflow.CxPageEntryFulfillmentMessageArrgs(
                        output_audio_text=gcp.diagflow.CxPageEntryFulfillmentMessageOutputAudioTextArrgs(
                            ssml="          <speak>Some example <say-as interpret-as=\\"characters\\">SSML XML</say-as></speak>\\n",
                        ),
                    ),
                    gcp.diagflow.CxPageEntryFulfillmentMessageArrgs(
                        live_agent_handoff=gcp.diagflow.CxPageEntryFulfillmentMessageLiveAgentHandoffArrgs(
                            metadata="          {\\"some-metadata-key\\": \\"some-value\\", \\"other-metadata-key\\": 1234}\\n",
                        ),
                    ),
                    gcp.diagflow.CxPageEntryFulfillmentMessageArrgs(
                        play_audio=gcp.diagflow.CxPageEntryFulfillmentMessagePlayAudioArrgs(
                            audio_uri="http://example.com/some-audio-file.mp3",
                        ),
                    ),
                    gcp.diagflow.CxPageEntryFulfillmentMessageArrgs(
                        telephony_transfer_call=gcp.diagflow.CxPageEntryFulfillmentMessageTelephonyTransferCallArrgs(
                            phone_number="1-234-567-8901",
                        ),
                    ),
                ],
                set_parameter_actions=[
                    gcp.diagflow.CxPageEntryFulfillmentSetParameterActionArrgs(
                        parameter="some-param",
                        value="123.45",
                    ),
                    gcp.diagflow.CxPageEntryFulfillmentSetParameterActionArrgs(
                        parameter="another-param",
                        value=json.dumps("abc"),
                    ),
                    gcp.diagflow.CxPageEntryFulfillmentSetParameterActionArrgs(
                        parameter="other-param",
                        value=json.dumps(["foo"]),
                    ),
                ],
                conditional_cases=[gcp.diagflow.CxPageEntryFulfillmentConditionalCaseArrgs(
                    cases=json.dumps([
                        {
                            "condition": "$sys.func.RAND() < 0.5",
                            "caseContent": [
                                {
                                    "message": {
                                        "text": {
                                            "text": ["First case"],
                                        },
                                    },
                                },
                                {
                                    "additionalCases": {
                                        "cases": [{
                                            "condition": "$sys.func.RAND() < 0.2",
                                            "caseContent": [{
                                                "message": {
                                                    "text": {
                                                        "text": ["Nested case"],
                                                    },
                                                },
                                            }],
                                        }],
                                    },
                                },
                            ],
                        },
                        {
                            "caseContent": [{
                                "message": {
                                    "text": {
                                        "text": ["Final case"],
                                    },
                                },
                            }],
                        },
                    ]),
                )],
            ),
            event_handlers=[gcp.diagflow.CxPageEventHandlerArrgs(
                event="some-event",
                trigger_fulfillment=gcp.diagflow.CxPageEventHandlerTriggerFulfillmentArrgs(
                    return_partial_responses=True,
                    messages=[
                        gcp.diagflow.CxPageEventHandlerTriggerFulfillmentMessageArrgs(
                            channel="some-channel",
                            text=gcp.diagflow.CxPageEventHandlerTriggerFulfillmentMessageTextArrgs(
                                texts=["Some text"],
                            ),
                        ),
                        gcp.diagflow.CxPageEventHandlerTriggerFulfillmentMessageArrgs(
                            payload="          {\\"some-key\\": \\"some-value\\", \\"other-key\\": [\\"other-value\\"]}\\n",
                        ),
                        gcp.diagflow.CxPageEventHandlerTriggerFulfillmentMessageArrgs(
                            conversation_success=gcp.diagflow.CxPageEventHandlerTriggerFulfillmentMessageConversationSuccessArrgs(
                                metadata="            {\\"some-metadata-key\\": \\"some-value\\", \\"other-metadata-key\\": 1234}\\n",
                            ),
                        ),
                        gcp.diagflow.CxPageEventHandlerTriggerFulfillmentMessageArrgs(
                            output_audio_text=gcp.diagflow.CxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextArrgs(
                                text="some output text",
                            ),
                        ),
                        gcp.diagflow.CxPageEventHandlerTriggerFulfillmentMessageArrgs(
                            output_audio_text=gcp.diagflow.CxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextArrgs(
                                ssml="            <speak>Some example <say-as interpret-as=\\"characters\\">SSML XML</say-as></speak>\\n",
                            ),
                        ),
                        gcp.diagflow.CxPageEventHandlerTriggerFulfillmentMessageArrgs(
                            live_agent_handoff=gcp.diagflow.CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffArrgs(
                                metadata="            {\\"some-metadata-key\\": \\"some-value\\", \\"other-metadata-key\\": 1234}\\n",
                            ),
                        ),
                        gcp.diagflow.CxPageEventHandlerTriggerFulfillmentMessageArrgs(
                            play_audio=gcp.diagflow.CxPageEventHandlerTriggerFulfillmentMessagePlayAudioArrgs(
                                audio_uri="http://example.com/some-audio-file.mp3",
                            ),
                        ),
                        gcp.diagflow.CxPageEventHandlerTriggerFulfillmentMessageArrgs(
                            telephony_transfer_call=gcp.diagflow.CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallArrgs(
                                phone_number="1-234-567-8901",
                            ),
                        ),
                    ],
                    set_parameter_actions=[
                        gcp.diagflow.CxPageEventHandlerTriggerFulfillmentSetParameterActionArrgs(
                            parameter="some-param",
                            value="123.45",
                        ),
                        gcp.diagflow.CxPageEventHandlerTriggerFulfillmentSetParameterActionArrgs(
                            parameter="another-param",
                            value=json.dumps("abc"),
                        ),
                        gcp.diagflow.CxPageEventHandlerTriggerFulfillmentSetParameterActionArrgs(
                            parameter="other-param",
                            value=json.dumps(["foo"]),
                        ),
                    ],
                    conditional_cases=[gcp.diagflow.CxPageEventHandlerTriggerFulfillmentConditionalCaseArrgs(
                        cases=json.dumps([
                            {
                                "condition": "$sys.func.RAND() < 0.5",
                                "caseContent": [
                                    {
                                        "message": {
                                            "text": {
                                                "text": ["First case"],
                                            },
                                        },
                                    },
                                    {
                                        "additionalCases": {
                                            "cases": [{
                                                "condition": "$sys.func.RAND() < 0.2",
                                                "caseContent": [{
                                                    "message": {
                                                        "text": {
                                                            "text": ["Nested case"],
                                                        },
                                                    },
                                                }],
                                            }],
                                        },
                                    },
                                ],
                            },
                            {
                                "caseContent": [{
                                    "message": {
                                        "text": {
                                            "text": ["Final case"],
                                        },
                                    },
                                }],
                            },
                        ]),
                    )],
                ),
            )],
            form=gcp.diagflow.CxPageFormArrgs(
                parameters=[gcp.diagflow.CxPageFormParameterArrgs(
                    display_name="param1",
                    entity_type="projects/-/locations/-/agents/-/entityTypes/sys.date",
                    default_value=json.dumps("2000-01-01"),
                    fill_behavior=gcp.diagflow.CxPageFormParameterFillBehaviorArrgs(
                        initial_prompt_fulfillment=gcp.diagflow.CxPageFormParameterFillBehaviorInitialPromptFulfillmentArrgs(
                            messages=[
                                gcp.diagflow.CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArrgs(
                                    channel="some-channel",
                                    text=gcp.diagflow.CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextArrgs(
                                        texts=["Please provide param1"],
                                    ),
                                ),
                                gcp.diagflow.CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArrgs(
                                    payload="              {\\"some-key\\": \\"some-value\\", \\"other-key\\": [\\"other-value\\"]}\\n",
                                ),
                                gcp.diagflow.CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArrgs(
                                    conversation_success=gcp.diagflow.CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessArrgs(
                                        metadata="                {\\"some-metadata-key\\": \\"some-value\\", \\"other-metadata-key\\": 1234}\\n",
                                    ),
                                ),
                                gcp.diagflow.CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArrgs(
                                    output_audio_text=gcp.diagflow.CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextArrgs(
                                        text="some output text",
                                    ),
                                ),
                                gcp.diagflow.CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArrgs(
                                    output_audio_text=gcp.diagflow.CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextArrgs(
                                        ssml="                <speak>Some example <say-as interpret-as=\\"characters\\">SSML XML</say-as></speak>\\n",
                                    ),
                                ),
                                gcp.diagflow.CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArrgs(
                                    live_agent_handoff=gcp.diagflow.CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffArrgs(
                                        metadata="                {\\"some-metadata-key\\": \\"some-value\\", \\"other-metadata-key\\": 1234}\\n",
                                    ),
                                ),
                                gcp.diagflow.CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArrgs(
                                    play_audio=gcp.diagflow.CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioArrgs(
                                        audio_uri="http://example.com/some-audio-file.mp3",
                                    ),
                                ),
                                gcp.diagflow.CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArrgs(
                                    telephony_transfer_call=gcp.diagflow.CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallArrgs(
                                        phone_number="1-234-567-8901",
                                    ),
                                ),
                            ],
                            set_parameter_actions=[
                                gcp.diagflow.CxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterActionArrgs(
                                    parameter="some-param",
                                    value="123.45",
                                ),
                                gcp.diagflow.CxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterActionArrgs(
                                    parameter="another-param",
                                    value=json.dumps("abc"),
                                ),
                                gcp.diagflow.CxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterActionArrgs(
                                    parameter="other-param",
                                    value=json.dumps(["foo"]),
                                ),
                            ],
                            conditional_cases=[gcp.diagflow.CxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCaseArrgs(
                                cases=json.dumps([
                                    {
                                        "condition": "$sys.func.RAND() < 0.5",
                                        "caseContent": [
                                            {
                                                "message": {
                                                    "text": {
                                                        "text": ["First case"],
                                                    },
                                                },
                                            },
                                            {
                                                "additionalCases": {
                                                    "cases": [{
                                                        "condition": "$sys.func.RAND() < 0.2",
                                                        "caseContent": [{
                                                            "message": {
                                                                "text": {
                                                                    "text": ["Nested case"],
                                                                },
                                                            },
                                                        }],
                                                    }],
                                                },
                                            },
                                        ],
                                    },
                                    {
                                        "caseContent": [{
                                            "message": {
                                                "text": {
                                                    "text": ["Final case"],
                                                },
                                            },
                                        }],
                                    },
                                ]),
                            )],
                        ),
                        reprompt_event_handlers=[
                            gcp.diagflow.CxPageFormParameterFillBehaviorRepromptEventHandlerArrgs(
                                event="sys.no-match-1",
                                trigger_fulfillment=gcp.diagflow.CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentArrgs(
                                    return_partial_responses=True,
                                    webhook=my_webhook.id,
                                    tag="some-tag",
                                    messages=[
                                        gcp.diagflow.CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageArrgs(
                                            channel="some-channel",
                                            text=gcp.diagflow.CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextArrgs(
                                                texts=["Please provide param1"],
                                            ),
                                        ),
                                        gcp.diagflow.CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageArrgs(
                                            payload="                {\\"some-key\\": \\"some-value\\", \\"other-key\\": [\\"other-value\\"]}\\n",
                                        ),
                                        gcp.diagflow.CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageArrgs(
                                            conversation_success=gcp.diagflow.CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessArrgs(
                                                metadata="                  {\\"some-metadata-key\\": \\"some-value\\", \\"other-metadata-key\\": 1234}\\n",
                                            ),
                                        ),
                                        gcp.diagflow.CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageArrgs(
                                            output_audio_text=gcp.diagflow.CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextArrgs(
                                                text="some output text",
                                            ),
                                        ),
                                        gcp.diagflow.CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageArrgs(
                                            output_audio_text=gcp.diagflow.CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextArrgs(
                                                ssml="                  <speak>Some example <say-as interpret-as=\\"characters\\">SSML XML</say-as></speak>\\n",
                                            ),
                                        ),
                                        gcp.diagflow.CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageArrgs(
                                            live_agent_handoff=gcp.diagflow.CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffArrgs(
                                                metadata="                  {\\"some-metadata-key\\": \\"some-value\\", \\"other-metadata-key\\": 1234}\\n",
                                            ),
                                        ),
                                        gcp.diagflow.CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageArrgs(
                                            play_audio=gcp.diagflow.CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioArrgs(
                                                audio_uri="http://example.com/some-audio-file.mp3",
                                            ),
                                        ),
                                        gcp.diagflow.CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageArrgs(
                                            telephony_transfer_call=gcp.diagflow.CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallArrgs(
                                                phone_number="1-234-567-8901",
                                            ),
                                        ),
                                    ],
                                    set_parameter_actions=[
                                        gcp.diagflow.CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterActionArrgs(
                                            parameter="some-param",
                                            value="123.45",
                                        ),
                                        gcp.diagflow.CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterActionArrgs(
                                            parameter="another-param",
                                            value=json.dumps("abc"),
                                        ),
                                        gcp.diagflow.CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterActionArrgs(
                                            parameter="other-param",
                                            value=json.dumps(["foo"]),
                                        ),
                                    ],
                                    conditional_cases=[gcp.diagflow.CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCaseArrgs(
                                        cases=json.dumps([
                                            {
                                                "condition": "$sys.func.RAND() < 0.5",
                                                "caseContent": [
                                                    {
                                                        "message": {
                                                            "text": {
                                                                "text": ["First case"],
                                                            },
                                                        },
                                                    },
                                                    {
                                                        "additionalCases": {
                                                            "cases": [{
                                                                "condition": "$sys.func.RAND() < 0.2",
                                                                "caseContent": [{
                                                                    "message": {
                                                                        "text": {
                                                                            "text": ["Nested case"],
                                                                        },
                                                                    },
                                                                }],
                                                            }],
                                                        },
                                                    },
                                                ],
                                            },
                                            {
                                                "caseContent": [{
                                                    "message": {
                                                        "text": {
                                                            "text": ["Final case"],
                                                        },
                                                    },
                                                }],
                                            },
                                        ]),
                                    )],
                                ),
                            ),
                            gcp.diagflow.CxPageFormParameterFillBehaviorRepromptEventHandlerArrgs(
                                event="sys.no-match-2",
                                target_flow=agent.start_flow,
                            ),
                            gcp.diagflow.CxPageFormParameterFillBehaviorRepromptEventHandlerArrgs(
                                event="sys.no-match-3",
                                target_page=my_page2.id,
                            ),
                        ],
                    ),
                    required=True,
                    redact=True,
                )],
            ),
            transition_routes=[gcp.diagflow.CxPageTransitionRouteArrgs(
                condition="$page.params.status = 'FINAL'",
                trigger_fulfillment=gcp.diagflow.CxPageTransitionRouteTriggerFulfillmentArrgs(
                    messages=[
                        gcp.diagflow.CxPageTransitionRouteTriggerFulfillmentMessageArrgs(
                            channel="some-channel",
                            text=gcp.diagflow.CxPageTransitionRouteTriggerFulfillmentMessageTextArrgs(
                                texts=["information completed, navigating to page 2"],
                            ),
                        ),
                        gcp.diagflow.CxPageTransitionRouteTriggerFulfillmentMessageArrgs(
                            payload="          {\\"some-key\\": \\"some-value\\", \\"other-key\\": [\\"other-value\\"]}\\n",
                        ),
                        gcp.diagflow.CxPageTransitionRouteTriggerFulfillmentMessageArrgs(
                            conversation_success=gcp.diagflow.CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessArrgs(
                                metadata="            {\\"some-metadata-key\\": \\"some-value\\", \\"other-metadata-key\\": 1234}\\n",
                            ),
                        ),
                        gcp.diagflow.CxPageTransitionRouteTriggerFulfillmentMessageArrgs(
                            output_audio_text=gcp.diagflow.CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextArrgs(
                                text="some output text",
                            ),
                        ),
                        gcp.diagflow.CxPageTransitionRouteTriggerFulfillmentMessageArrgs(
                            output_audio_text=gcp.diagflow.CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextArrgs(
                                ssml="            <speak>Some example <say-as interpret-as=\\"characters\\">SSML XML</say-as></speak>\\n",
                            ),
                        ),
                        gcp.diagflow.CxPageTransitionRouteTriggerFulfillmentMessageArrgs(
                            live_agent_handoff=gcp.diagflow.CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffArrgs(
                                metadata="            {\\"some-metadata-key\\": \\"some-value\\", \\"other-metadata-key\\": 1234}\\n",
                            ),
                        ),
                        gcp.diagflow.CxPageTransitionRouteTriggerFulfillmentMessageArrgs(
                            play_audio=gcp.diagflow.CxPageTransitionRouteTriggerFulfillmentMessagePlayAudioArrgs(
                                audio_uri="http://example.com/some-audio-file.mp3",
                            ),
                        ),
                        gcp.diagflow.CxPageTransitionRouteTriggerFulfillmentMessageArrgs(
                            telephony_transfer_call=gcp.diagflow.CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallArrgs(
                                phone_number="1-234-567-8901",
                            ),
                        ),
                    ],
                    set_parameter_actions=[
                        gcp.diagflow.CxPageTransitionRouteTriggerFulfillmentSetParameterActionArrgs(
                            parameter="some-param",
                            value="123.45",
                        ),
                        gcp.diagflow.CxPageTransitionRouteTriggerFulfillmentSetParameterActionArrgs(
                            parameter="another-param",
                            value=json.dumps("abc"),
                        ),
                        gcp.diagflow.CxPageTransitionRouteTriggerFulfillmentSetParameterActionArrgs(
                            parameter="other-param",
                            value=json.dumps(["foo"]),
                        ),
                    ],
                    conditional_cases=[gcp.diagflow.CxPageTransitionRouteTriggerFulfillmentConditionalCaseArrgs(
                        cases=json.dumps([
                            {
                                "condition": "$sys.func.RAND() < 0.5",
                                "caseContent": [
                                    {
                                        "message": {
                                            "text": {
                                                "text": ["First case"],
                                            },
                                        },
                                    },
                                    {
                                        "additionalCases": {
                                            "cases": [{
                                                "condition": "$sys.func.RAND() < 0.2",
                                                "caseContent": [{
                                                    "message": {
                                                        "text": {
                                                            "text": ["Nested case"],
                                                        },
                                                    },
                                                }],
                                            }],
                                        },
                                    },
                                ],
                            },
                            {
                                "caseContent": [{
                                    "message": {
                                        "text": {
                                            "text": ["Final case"],
                                        },
                                    },
                                }],
                            },
                        ]),
                    )],
                ),
                target_page=my_page2.id,
            )])
        ```

        ## Import

        Page can be imported using any of these accepted formats

        ```sh
         $ pulumi import gcp:diagflow/cxPage:CxPage default {{parent}}/pages/{{name}}
        ```

        ```sh
         $ pulumi import gcp:diagflow/cxPage:CxPage default {{parent}}/{{name}}
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] display_name: The human-readable name of the page, unique within the agent.
               
               
               - - -
        :param pulumi.Input[pulumi.InputType['CxPageEntryFulfillmentArrgs']] entry_fulfillment: The fulfillment to call when the session is entering the page.
               Structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CxPageEventHandlerArrgs']]]] event_handlers: Handlers associated with the page to handle events such as webhook errors, no match or no input.
               Structure is documented below.
        :param pulumi.Input[pulumi.InputType['CxPageFormArrgs']] form: The form associated with the page, used for collecting parameters relevant to the page.
               Structure is documented below.
        :param pulumi.Input[str] language_code: The language of the following fields in page:
               Page.entry_fulfillment.messages
               Page.entry_fulfillment.conditional_cases
               Page.event_handlers.trigger_fulfillment.messages
               Page.event_handlers.trigger_fulfillment.conditional_cases
               Page.form.parameters.fill_behavior.initial_prompt_fulfillment.messages
               Page.form.parameters.fill_behavior.initial_prompt_fulfillment.conditional_cases
               Page.form.parameters.fill_behavior.reprompt_event_handlers.messages
               Page.form.parameters.fill_behavior.reprompt_event_handlers.conditional_cases
               Page.transition_routes.trigger_fulfillment.messages
               Page.transition_routes.trigger_fulfillment.conditional_cases
               If not specified, the agent's default language is used. Many languages are supported. Note: languages must be enabled in the agent before they can be used.
        :param pulumi.Input[str] parent: The flow to create a page for.
               Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] transition_route_groups: Ordered list of TransitionRouteGroups associated with the page. Transition route groups must be unique within a page.
               If multiple transition routes within a page scope refer to the same intent, then the precedence order is: page's transition route > page's transition route group > flow's transition routes.
               If multiple transition route groups within a page contain the same intent, then the first group in the ordered list takes precedence.
               Format:projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/transitionRouteGroups/<TransitionRouteGroup ID>.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CxPageTransitionRouteArrgs']]]] transition_routes: A list of transitions for the transition rules of this page. They route the conversation to another page in the same flow, or another flow.
               When we are in a certain page, the TransitionRoutes are evalauted in the following order:
               TransitionRoutes defined in the page with intent specified.
               TransitionRoutes defined in the transition route groups with intent specified.
               TransitionRoutes defined in flow with intent specified.
               TransitionRoutes defined in the transition route groups with intent specified.
               TransitionRoutes defined in the page with only condition specified.
               TransitionRoutes defined in the transition route groups with only condition specified.
               Structure is documented below.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CxPageArrgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        A Dialogflow CX conversation (session) can be described and visualized as a state machine. The states of a CX session are represented by pages.

        To get more information about Page, see:

        * [API documentation](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/projects.locations.agents.flows.pages)
        * How-to Guides
            * [Official Documentation](https://cloud.google.com/dialogflow/cx/docs)

        ## Example Usage
        ### Dialogflowcx Page Full

        ```python
        import pulumi
        import json
        import pulumi_gcp as gcp

        agent = gcp.diagflow.CxAgent("agent",
            display_name="dialogflowcx-agent",
            location="global",
            default_language_code="en",
            supported_language_codes=[
                "fr",
                "de",
                "es",
            ],
            time_zone="America/New_York",
            description="Example description.",
            avatar_uri="https://cloud.google.com/_static/images/cloud/icons/favicons/onecloud/super_cloud.png",
            enable_stackdriver_logging=True,
            enable_spell_correction=True,
            speech_to_text_settings=gcp.diagflow.CxAgentSpeechToTextSettingsArrgs(
                enable_speech_adaptation=True,
            ))
        my_page2 = gcp.diagflow.CxPage("myPage2",
            parent=agent.start_flow,
            display_name="MyPage2")
        my_webhook = gcp.diagflow.CxWebhook("myWebhook",
            parent=agent.id,
            display_name="MyWebhook",
            generic_web_service=gcp.diagflow.CxWebhookGenericWebServiceArrgs(
                uri="https://example.com",
            ))
        basic_page = gcp.diagflow.CxPage("basicPage",
            parent=agent.start_flow,
            display_name="MyPage",
            entry_fulfillment=gcp.diagflow.CxPageEntryFulfillmentArrgs(
                messages=[
                    gcp.diagflow.CxPageEntryFulfillmentMessageArrgs(
                        channel="some-channel",
                        text=gcp.diagflow.CxPageEntryFulfillmentMessageTextArrgs(
                            texts=["Welcome to page"],
                        ),
                    ),
                    gcp.diagflow.CxPageEntryFulfillmentMessageArrgs(
                        payload="        {\\"some-key\\": \\"some-value\\", \\"other-key\\": [\\"other-value\\"]}\\n",
                    ),
                    gcp.diagflow.CxPageEntryFulfillmentMessageArrgs(
                        conversation_success=gcp.diagflow.CxPageEntryFulfillmentMessageConversationSuccessArrgs(
                            metadata="          {\\"some-metadata-key\\": \\"some-value\\", \\"other-metadata-key\\": 1234}\\n",
                        ),
                    ),
                    gcp.diagflow.CxPageEntryFulfillmentMessageArrgs(
                        output_audio_text=gcp.diagflow.CxPageEntryFulfillmentMessageOutputAudioTextArrgs(
                            text="some output text",
                        ),
                    ),
                    gcp.diagflow.CxPageEntryFulfillmentMessageArrgs(
                        output_audio_text=gcp.diagflow.CxPageEntryFulfillmentMessageOutputAudioTextArrgs(
                            ssml="          <speak>Some example <say-as interpret-as=\\"characters\\">SSML XML</say-as></speak>\\n",
                        ),
                    ),
                    gcp.diagflow.CxPageEntryFulfillmentMessageArrgs(
                        live_agent_handoff=gcp.diagflow.CxPageEntryFulfillmentMessageLiveAgentHandoffArrgs(
                            metadata="          {\\"some-metadata-key\\": \\"some-value\\", \\"other-metadata-key\\": 1234}\\n",
                        ),
                    ),
                    gcp.diagflow.CxPageEntryFulfillmentMessageArrgs(
                        play_audio=gcp.diagflow.CxPageEntryFulfillmentMessagePlayAudioArrgs(
                            audio_uri="http://example.com/some-audio-file.mp3",
                        ),
                    ),
                    gcp.diagflow.CxPageEntryFulfillmentMessageArrgs(
                        telephony_transfer_call=gcp.diagflow.CxPageEntryFulfillmentMessageTelephonyTransferCallArrgs(
                            phone_number="1-234-567-8901",
                        ),
                    ),
                ],
                set_parameter_actions=[
                    gcp.diagflow.CxPageEntryFulfillmentSetParameterActionArrgs(
                        parameter="some-param",
                        value="123.45",
                    ),
                    gcp.diagflow.CxPageEntryFulfillmentSetParameterActionArrgs(
                        parameter="another-param",
                        value=json.dumps("abc"),
                    ),
                    gcp.diagflow.CxPageEntryFulfillmentSetParameterActionArrgs(
                        parameter="other-param",
                        value=json.dumps(["foo"]),
                    ),
                ],
                conditional_cases=[gcp.diagflow.CxPageEntryFulfillmentConditionalCaseArrgs(
                    cases=json.dumps([
                        {
                            "condition": "$sys.func.RAND() < 0.5",
                            "caseContent": [
                                {
                                    "message": {
                                        "text": {
                                            "text": ["First case"],
                                        },
                                    },
                                },
                                {
                                    "additionalCases": {
                                        "cases": [{
                                            "condition": "$sys.func.RAND() < 0.2",
                                            "caseContent": [{
                                                "message": {
                                                    "text": {
                                                        "text": ["Nested case"],
                                                    },
                                                },
                                            }],
                                        }],
                                    },
                                },
                            ],
                        },
                        {
                            "caseContent": [{
                                "message": {
                                    "text": {
                                        "text": ["Final case"],
                                    },
                                },
                            }],
                        },
                    ]),
                )],
            ),
            event_handlers=[gcp.diagflow.CxPageEventHandlerArrgs(
                event="some-event",
                trigger_fulfillment=gcp.diagflow.CxPageEventHandlerTriggerFulfillmentArrgs(
                    return_partial_responses=True,
                    messages=[
                        gcp.diagflow.CxPageEventHandlerTriggerFulfillmentMessageArrgs(
                            channel="some-channel",
                            text=gcp.diagflow.CxPageEventHandlerTriggerFulfillmentMessageTextArrgs(
                                texts=["Some text"],
                            ),
                        ),
                        gcp.diagflow.CxPageEventHandlerTriggerFulfillmentMessageArrgs(
                            payload="          {\\"some-key\\": \\"some-value\\", \\"other-key\\": [\\"other-value\\"]}\\n",
                        ),
                        gcp.diagflow.CxPageEventHandlerTriggerFulfillmentMessageArrgs(
                            conversation_success=gcp.diagflow.CxPageEventHandlerTriggerFulfillmentMessageConversationSuccessArrgs(
                                metadata="            {\\"some-metadata-key\\": \\"some-value\\", \\"other-metadata-key\\": 1234}\\n",
                            ),
                        ),
                        gcp.diagflow.CxPageEventHandlerTriggerFulfillmentMessageArrgs(
                            output_audio_text=gcp.diagflow.CxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextArrgs(
                                text="some output text",
                            ),
                        ),
                        gcp.diagflow.CxPageEventHandlerTriggerFulfillmentMessageArrgs(
                            output_audio_text=gcp.diagflow.CxPageEventHandlerTriggerFulfillmentMessageOutputAudioTextArrgs(
                                ssml="            <speak>Some example <say-as interpret-as=\\"characters\\">SSML XML</say-as></speak>\\n",
                            ),
                        ),
                        gcp.diagflow.CxPageEventHandlerTriggerFulfillmentMessageArrgs(
                            live_agent_handoff=gcp.diagflow.CxPageEventHandlerTriggerFulfillmentMessageLiveAgentHandoffArrgs(
                                metadata="            {\\"some-metadata-key\\": \\"some-value\\", \\"other-metadata-key\\": 1234}\\n",
                            ),
                        ),
                        gcp.diagflow.CxPageEventHandlerTriggerFulfillmentMessageArrgs(
                            play_audio=gcp.diagflow.CxPageEventHandlerTriggerFulfillmentMessagePlayAudioArrgs(
                                audio_uri="http://example.com/some-audio-file.mp3",
                            ),
                        ),
                        gcp.diagflow.CxPageEventHandlerTriggerFulfillmentMessageArrgs(
                            telephony_transfer_call=gcp.diagflow.CxPageEventHandlerTriggerFulfillmentMessageTelephonyTransferCallArrgs(
                                phone_number="1-234-567-8901",
                            ),
                        ),
                    ],
                    set_parameter_actions=[
                        gcp.diagflow.CxPageEventHandlerTriggerFulfillmentSetParameterActionArrgs(
                            parameter="some-param",
                            value="123.45",
                        ),
                        gcp.diagflow.CxPageEventHandlerTriggerFulfillmentSetParameterActionArrgs(
                            parameter="another-param",
                            value=json.dumps("abc"),
                        ),
                        gcp.diagflow.CxPageEventHandlerTriggerFulfillmentSetParameterActionArrgs(
                            parameter="other-param",
                            value=json.dumps(["foo"]),
                        ),
                    ],
                    conditional_cases=[gcp.diagflow.CxPageEventHandlerTriggerFulfillmentConditionalCaseArrgs(
                        cases=json.dumps([
                            {
                                "condition": "$sys.func.RAND() < 0.5",
                                "caseContent": [
                                    {
                                        "message": {
                                            "text": {
                                                "text": ["First case"],
                                            },
                                        },
                                    },
                                    {
                                        "additionalCases": {
                                            "cases": [{
                                                "condition": "$sys.func.RAND() < 0.2",
                                                "caseContent": [{
                                                    "message": {
                                                        "text": {
                                                            "text": ["Nested case"],
                                                        },
                                                    },
                                                }],
                                            }],
                                        },
                                    },
                                ],
                            },
                            {
                                "caseContent": [{
                                    "message": {
                                        "text": {
                                            "text": ["Final case"],
                                        },
                                    },
                                }],
                            },
                        ]),
                    )],
                ),
            )],
            form=gcp.diagflow.CxPageFormArrgs(
                parameters=[gcp.diagflow.CxPageFormParameterArrgs(
                    display_name="param1",
                    entity_type="projects/-/locations/-/agents/-/entityTypes/sys.date",
                    default_value=json.dumps("2000-01-01"),
                    fill_behavior=gcp.diagflow.CxPageFormParameterFillBehaviorArrgs(
                        initial_prompt_fulfillment=gcp.diagflow.CxPageFormParameterFillBehaviorInitialPromptFulfillmentArrgs(
                            messages=[
                                gcp.diagflow.CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArrgs(
                                    channel="some-channel",
                                    text=gcp.diagflow.CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTextArrgs(
                                        texts=["Please provide param1"],
                                    ),
                                ),
                                gcp.diagflow.CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArrgs(
                                    payload="              {\\"some-key\\": \\"some-value\\", \\"other-key\\": [\\"other-value\\"]}\\n",
                                ),
                                gcp.diagflow.CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArrgs(
                                    conversation_success=gcp.diagflow.CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageConversationSuccessArrgs(
                                        metadata="                {\\"some-metadata-key\\": \\"some-value\\", \\"other-metadata-key\\": 1234}\\n",
                                    ),
                                ),
                                gcp.diagflow.CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArrgs(
                                    output_audio_text=gcp.diagflow.CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextArrgs(
                                        text="some output text",
                                    ),
                                ),
                                gcp.diagflow.CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArrgs(
                                    output_audio_text=gcp.diagflow.CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageOutputAudioTextArrgs(
                                        ssml="                <speak>Some example <say-as interpret-as=\\"characters\\">SSML XML</say-as></speak>\\n",
                                    ),
                                ),
                                gcp.diagflow.CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArrgs(
                                    live_agent_handoff=gcp.diagflow.CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageLiveAgentHandoffArrgs(
                                        metadata="                {\\"some-metadata-key\\": \\"some-value\\", \\"other-metadata-key\\": 1234}\\n",
                                    ),
                                ),
                                gcp.diagflow.CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArrgs(
                                    play_audio=gcp.diagflow.CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessagePlayAudioArrgs(
                                        audio_uri="http://example.com/some-audio-file.mp3",
                                    ),
                                ),
                                gcp.diagflow.CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageArrgs(
                                    telephony_transfer_call=gcp.diagflow.CxPageFormParameterFillBehaviorInitialPromptFulfillmentMessageTelephonyTransferCallArrgs(
                                        phone_number="1-234-567-8901",
                                    ),
                                ),
                            ],
                            set_parameter_actions=[
                                gcp.diagflow.CxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterActionArrgs(
                                    parameter="some-param",
                                    value="123.45",
                                ),
                                gcp.diagflow.CxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterActionArrgs(
                                    parameter="another-param",
                                    value=json.dumps("abc"),
                                ),
                                gcp.diagflow.CxPageFormParameterFillBehaviorInitialPromptFulfillmentSetParameterActionArrgs(
                                    parameter="other-param",
                                    value=json.dumps(["foo"]),
                                ),
                            ],
                            conditional_cases=[gcp.diagflow.CxPageFormParameterFillBehaviorInitialPromptFulfillmentConditionalCaseArrgs(
                                cases=json.dumps([
                                    {
                                        "condition": "$sys.func.RAND() < 0.5",
                                        "caseContent": [
                                            {
                                                "message": {
                                                    "text": {
                                                        "text": ["First case"],
                                                    },
                                                },
                                            },
                                            {
                                                "additionalCases": {
                                                    "cases": [{
                                                        "condition": "$sys.func.RAND() < 0.2",
                                                        "caseContent": [{
                                                            "message": {
                                                                "text": {
                                                                    "text": ["Nested case"],
                                                                },
                                                            },
                                                        }],
                                                    }],
                                                },
                                            },
                                        ],
                                    },
                                    {
                                        "caseContent": [{
                                            "message": {
                                                "text": {
                                                    "text": ["Final case"],
                                                },
                                            },
                                        }],
                                    },
                                ]),
                            )],
                        ),
                        reprompt_event_handlers=[
                            gcp.diagflow.CxPageFormParameterFillBehaviorRepromptEventHandlerArrgs(
                                event="sys.no-match-1",
                                trigger_fulfillment=gcp.diagflow.CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentArrgs(
                                    return_partial_responses=True,
                                    webhook=my_webhook.id,
                                    tag="some-tag",
                                    messages=[
                                        gcp.diagflow.CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageArrgs(
                                            channel="some-channel",
                                            text=gcp.diagflow.CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTextArrgs(
                                                texts=["Please provide param1"],
                                            ),
                                        ),
                                        gcp.diagflow.CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageArrgs(
                                            payload="                {\\"some-key\\": \\"some-value\\", \\"other-key\\": [\\"other-value\\"]}\\n",
                                        ),
                                        gcp.diagflow.CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageArrgs(
                                            conversation_success=gcp.diagflow.CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageConversationSuccessArrgs(
                                                metadata="                  {\\"some-metadata-key\\": \\"some-value\\", \\"other-metadata-key\\": 1234}\\n",
                                            ),
                                        ),
                                        gcp.diagflow.CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageArrgs(
                                            output_audio_text=gcp.diagflow.CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextArrgs(
                                                text="some output text",
                                            ),
                                        ),
                                        gcp.diagflow.CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageArrgs(
                                            output_audio_text=gcp.diagflow.CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageOutputAudioTextArrgs(
                                                ssml="                  <speak>Some example <say-as interpret-as=\\"characters\\">SSML XML</say-as></speak>\\n",
                                            ),
                                        ),
                                        gcp.diagflow.CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageArrgs(
                                            live_agent_handoff=gcp.diagflow.CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageLiveAgentHandoffArrgs(
                                                metadata="                  {\\"some-metadata-key\\": \\"some-value\\", \\"other-metadata-key\\": 1234}\\n",
                                            ),
                                        ),
                                        gcp.diagflow.CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageArrgs(
                                            play_audio=gcp.diagflow.CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessagePlayAudioArrgs(
                                                audio_uri="http://example.com/some-audio-file.mp3",
                                            ),
                                        ),
                                        gcp.diagflow.CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageArrgs(
                                            telephony_transfer_call=gcp.diagflow.CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentMessageTelephonyTransferCallArrgs(
                                                phone_number="1-234-567-8901",
                                            ),
                                        ),
                                    ],
                                    set_parameter_actions=[
                                        gcp.diagflow.CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterActionArrgs(
                                            parameter="some-param",
                                            value="123.45",
                                        ),
                                        gcp.diagflow.CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterActionArrgs(
                                            parameter="another-param",
                                            value=json.dumps("abc"),
                                        ),
                                        gcp.diagflow.CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentSetParameterActionArrgs(
                                            parameter="other-param",
                                            value=json.dumps(["foo"]),
                                        ),
                                    ],
                                    conditional_cases=[gcp.diagflow.CxPageFormParameterFillBehaviorRepromptEventHandlerTriggerFulfillmentConditionalCaseArrgs(
                                        cases=json.dumps([
                                            {
                                                "condition": "$sys.func.RAND() < 0.5",
                                                "caseContent": [
                                                    {
                                                        "message": {
                                                            "text": {
                                                                "text": ["First case"],
                                                            },
                                                        },
                                                    },
                                                    {
                                                        "additionalCases": {
                                                            "cases": [{
                                                                "condition": "$sys.func.RAND() < 0.2",
                                                                "caseContent": [{
                                                                    "message": {
                                                                        "text": {
                                                                            "text": ["Nested case"],
                                                                        },
                                                                    },
                                                                }],
                                                            }],
                                                        },
                                                    },
                                                ],
                                            },
                                            {
                                                "caseContent": [{
                                                    "message": {
                                                        "text": {
                                                            "text": ["Final case"],
                                                        },
                                                    },
                                                }],
                                            },
                                        ]),
                                    )],
                                ),
                            ),
                            gcp.diagflow.CxPageFormParameterFillBehaviorRepromptEventHandlerArrgs(
                                event="sys.no-match-2",
                                target_flow=agent.start_flow,
                            ),
                            gcp.diagflow.CxPageFormParameterFillBehaviorRepromptEventHandlerArrgs(
                                event="sys.no-match-3",
                                target_page=my_page2.id,
                            ),
                        ],
                    ),
                    required=True,
                    redact=True,
                )],
            ),
            transition_routes=[gcp.diagflow.CxPageTransitionRouteArrgs(
                condition="$page.params.status = 'FINAL'",
                trigger_fulfillment=gcp.diagflow.CxPageTransitionRouteTriggerFulfillmentArrgs(
                    messages=[
                        gcp.diagflow.CxPageTransitionRouteTriggerFulfillmentMessageArrgs(
                            channel="some-channel",
                            text=gcp.diagflow.CxPageTransitionRouteTriggerFulfillmentMessageTextArrgs(
                                texts=["information completed, navigating to page 2"],
                            ),
                        ),
                        gcp.diagflow.CxPageTransitionRouteTriggerFulfillmentMessageArrgs(
                            payload="          {\\"some-key\\": \\"some-value\\", \\"other-key\\": [\\"other-value\\"]}\\n",
                        ),
                        gcp.diagflow.CxPageTransitionRouteTriggerFulfillmentMessageArrgs(
                            conversation_success=gcp.diagflow.CxPageTransitionRouteTriggerFulfillmentMessageConversationSuccessArrgs(
                                metadata="            {\\"some-metadata-key\\": \\"some-value\\", \\"other-metadata-key\\": 1234}\\n",
                            ),
                        ),
                        gcp.diagflow.CxPageTransitionRouteTriggerFulfillmentMessageArrgs(
                            output_audio_text=gcp.diagflow.CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextArrgs(
                                text="some output text",
                            ),
                        ),
                        gcp.diagflow.CxPageTransitionRouteTriggerFulfillmentMessageArrgs(
                            output_audio_text=gcp.diagflow.CxPageTransitionRouteTriggerFulfillmentMessageOutputAudioTextArrgs(
                                ssml="            <speak>Some example <say-as interpret-as=\\"characters\\">SSML XML</say-as></speak>\\n",
                            ),
                        ),
                        gcp.diagflow.CxPageTransitionRouteTriggerFulfillmentMessageArrgs(
                            live_agent_handoff=gcp.diagflow.CxPageTransitionRouteTriggerFulfillmentMessageLiveAgentHandoffArrgs(
                                metadata="            {\\"some-metadata-key\\": \\"some-value\\", \\"other-metadata-key\\": 1234}\\n",
                            ),
                        ),
                        gcp.diagflow.CxPageTransitionRouteTriggerFulfillmentMessageArrgs(
                            play_audio=gcp.diagflow.CxPageTransitionRouteTriggerFulfillmentMessagePlayAudioArrgs(
                                audio_uri="http://example.com/some-audio-file.mp3",
                            ),
                        ),
                        gcp.diagflow.CxPageTransitionRouteTriggerFulfillmentMessageArrgs(
                            telephony_transfer_call=gcp.diagflow.CxPageTransitionRouteTriggerFulfillmentMessageTelephonyTransferCallArrgs(
                                phone_number="1-234-567-8901",
                            ),
                        ),
                    ],
                    set_parameter_actions=[
                        gcp.diagflow.CxPageTransitionRouteTriggerFulfillmentSetParameterActionArrgs(
                            parameter="some-param",
                            value="123.45",
                        ),
                        gcp.diagflow.CxPageTransitionRouteTriggerFulfillmentSetParameterActionArrgs(
                            parameter="another-param",
                            value=json.dumps("abc"),
                        ),
                        gcp.diagflow.CxPageTransitionRouteTriggerFulfillmentSetParameterActionArrgs(
                            parameter="other-param",
                            value=json.dumps(["foo"]),
                        ),
                    ],
                    conditional_cases=[gcp.diagflow.CxPageTransitionRouteTriggerFulfillmentConditionalCaseArrgs(
                        cases=json.dumps([
                            {
                                "condition": "$sys.func.RAND() < 0.5",
                                "caseContent": [
                                    {
                                        "message": {
                                            "text": {
                                                "text": ["First case"],
                                            },
                                        },
                                    },
                                    {
                                        "additionalCases": {
                                            "cases": [{
                                                "condition": "$sys.func.RAND() < 0.2",
                                                "caseContent": [{
                                                    "message": {
                                                        "text": {
                                                            "text": ["Nested case"],
                                                        },
                                                    },
                                                }],
                                            }],
                                        },
                                    },
                                ],
                            },
                            {
                                "caseContent": [{
                                    "message": {
                                        "text": {
                                            "text": ["Final case"],
                                        },
                                    },
                                }],
                            },
                        ]),
                    )],
                ),
                target_page=my_page2.id,
            )])
        ```

        ## Import

        Page can be imported using any of these accepted formats

        ```sh
         $ pulumi import gcp:diagflow/cxPage:CxPage default {{parent}}/pages/{{name}}
        ```

        ```sh
         $ pulumi import gcp:diagflow/cxPage:CxPage default {{parent}}/{{name}}
        ```

        :param str resource_name: The name of the resource.
        :param CxPageArrgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CxPageArrgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 entry_fulfillment: Optional[pulumi.Input[pulumi.InputType['CxPageEntryFulfillmentArrgs']]] = None,
                 event_handlers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CxPageEventHandlerArrgs']]]]] = None,
                 form: Optional[pulumi.Input[pulumi.InputType['CxPageFormArrgs']]] = None,
                 language_code: Optional[pulumi.Input[str]] = None,
                 parent: Optional[pulumi.Input[str]] = None,
                 transition_route_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 transition_routes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CxPageTransitionRouteArrgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CxPageArrgs.__new__(CxPageArrgs)

            if display_name is None and not opts.urn:
                raise TypeError("Missing required property 'display_name'")
            __props__.__dict__["display_name"] = display_name
            __props__.__dict__["entry_fulfillment"] = entry_fulfillment
            __props__.__dict__["event_handlers"] = event_handlers
            __props__.__dict__["form"] = form
            __props__.__dict__["language_code"] = language_code
            __props__.__dict__["parent"] = parent
            __props__.__dict__["transition_route_groups"] = transition_route_groups
            __props__.__dict__["transition_routes"] = transition_routes
            __props__.__dict__["name"] = None
        super(CxPage, __self__).__init__(
            'gcp:diagflow/cxPage:CxPage',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            display_name: Optional[pulumi.Input[str]] = None,
            entry_fulfillment: Optional[pulumi.Input[pulumi.InputType['CxPageEntryFulfillmentArrgs']]] = None,
            event_handlers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CxPageEventHandlerArrgs']]]]] = None,
            form: Optional[pulumi.Input[pulumi.InputType['CxPageFormArrgs']]] = None,
            language_code: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            parent: Optional[pulumi.Input[str]] = None,
            transition_route_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            transition_routes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CxPageTransitionRouteArrgs']]]]] = None) -> 'CxPage':
        """
        Get an existing CxPage resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] display_name: The human-readable name of the page, unique within the agent.
               
               
               - - -
        :param pulumi.Input[pulumi.InputType['CxPageEntryFulfillmentArrgs']] entry_fulfillment: The fulfillment to call when the session is entering the page.
               Structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CxPageEventHandlerArrgs']]]] event_handlers: Handlers associated with the page to handle events such as webhook errors, no match or no input.
               Structure is documented below.
        :param pulumi.Input[pulumi.InputType['CxPageFormArrgs']] form: The form associated with the page, used for collecting parameters relevant to the page.
               Structure is documented below.
        :param pulumi.Input[str] language_code: The language of the following fields in page:
               Page.entry_fulfillment.messages
               Page.entry_fulfillment.conditional_cases
               Page.event_handlers.trigger_fulfillment.messages
               Page.event_handlers.trigger_fulfillment.conditional_cases
               Page.form.parameters.fill_behavior.initial_prompt_fulfillment.messages
               Page.form.parameters.fill_behavior.initial_prompt_fulfillment.conditional_cases
               Page.form.parameters.fill_behavior.reprompt_event_handlers.messages
               Page.form.parameters.fill_behavior.reprompt_event_handlers.conditional_cases
               Page.transition_routes.trigger_fulfillment.messages
               Page.transition_routes.trigger_fulfillment.conditional_cases
               If not specified, the agent's default language is used. Many languages are supported. Note: languages must be enabled in the agent before they can be used.
        :param pulumi.Input[str] name: (Output)
               The unique identifier of this event handler.
        :param pulumi.Input[str] parent: The flow to create a page for.
               Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] transition_route_groups: Ordered list of TransitionRouteGroups associated with the page. Transition route groups must be unique within a page.
               If multiple transition routes within a page scope refer to the same intent, then the precedence order is: page's transition route > page's transition route group > flow's transition routes.
               If multiple transition route groups within a page contain the same intent, then the first group in the ordered list takes precedence.
               Format:projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/transitionRouteGroups/<TransitionRouteGroup ID>.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CxPageTransitionRouteArrgs']]]] transition_routes: A list of transitions for the transition rules of this page. They route the conversation to another page in the same flow, or another flow.
               When we are in a certain page, the TransitionRoutes are evalauted in the following order:
               TransitionRoutes defined in the page with intent specified.
               TransitionRoutes defined in the transition route groups with intent specified.
               TransitionRoutes defined in flow with intent specified.
               TransitionRoutes defined in the transition route groups with intent specified.
               TransitionRoutes defined in the page with only condition specified.
               TransitionRoutes defined in the transition route groups with only condition specified.
               Structure is documented below.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CxPageState.__new__(_CxPageState)

        __props__.__dict__["display_name"] = display_name
        __props__.__dict__["entry_fulfillment"] = entry_fulfillment
        __props__.__dict__["event_handlers"] = event_handlers
        __props__.__dict__["form"] = form
        __props__.__dict__["language_code"] = language_code
        __props__.__dict__["name"] = name
        __props__.__dict__["parent"] = parent
        __props__.__dict__["transition_route_groups"] = transition_route_groups
        __props__.__dict__["transition_routes"] = transition_routes
        return CxPage(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[str]:
        """
        The human-readable name of the page, unique within the agent.


        - - -
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="entryFulfillment")
    def entry_fulfillment(self) -> pulumi.Output[Optional['outputs.CxPageEntryFulfillment']]:
        """
        The fulfillment to call when the session is entering the page.
        Structure is documented below.
        """
        return pulumi.get(self, "entry_fulfillment")

    @property
    @pulumi.getter(name="eventHandlers")
    def event_handlers(self) -> pulumi.Output[Optional[Sequence['outputs.CxPageEventHandler']]]:
        """
        Handlers associated with the page to handle events such as webhook errors, no match or no input.
        Structure is documented below.
        """
        return pulumi.get(self, "event_handlers")

    @property
    @pulumi.getter
    def form(self) -> pulumi.Output[Optional['outputs.CxPageForm']]:
        """
        The form associated with the page, used for collecting parameters relevant to the page.
        Structure is documented below.
        """
        return pulumi.get(self, "form")

    @property
    @pulumi.getter(name="languageCode")
    def language_code(self) -> pulumi.Output[Optional[str]]:
        """
        The language of the following fields in page:
        Page.entry_fulfillment.messages
        Page.entry_fulfillment.conditional_cases
        Page.event_handlers.trigger_fulfillment.messages
        Page.event_handlers.trigger_fulfillment.conditional_cases
        Page.form.parameters.fill_behavior.initial_prompt_fulfillment.messages
        Page.form.parameters.fill_behavior.initial_prompt_fulfillment.conditional_cases
        Page.form.parameters.fill_behavior.reprompt_event_handlers.messages
        Page.form.parameters.fill_behavior.reprompt_event_handlers.conditional_cases
        Page.transition_routes.trigger_fulfillment.messages
        Page.transition_routes.trigger_fulfillment.conditional_cases
        If not specified, the agent's default language is used. Many languages are supported. Note: languages must be enabled in the agent before they can be used.
        """
        return pulumi.get(self, "language_code")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        (Output)
        The unique identifier of this event handler.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def parent(self) -> pulumi.Output[Optional[str]]:
        """
        The flow to create a page for.
        Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>.
        """
        return pulumi.get(self, "parent")

    @property
    @pulumi.getter(name="transitionRouteGroups")
    def transition_route_groups(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Ordered list of TransitionRouteGroups associated with the page. Transition route groups must be unique within a page.
        If multiple transition routes within a page scope refer to the same intent, then the precedence order is: page's transition route > page's transition route group > flow's transition routes.
        If multiple transition route groups within a page contain the same intent, then the first group in the ordered list takes precedence.
        Format:projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/transitionRouteGroups/<TransitionRouteGroup ID>.
        """
        return pulumi.get(self, "transition_route_groups")

    @property
    @pulumi.getter(name="transitionRoutes")
    def transition_routes(self) -> pulumi.Output[Optional[Sequence['outputs.CxPageTransitionRoute']]]:
        """
        A list of transitions for the transition rules of this page. They route the conversation to another page in the same flow, or another flow.
        When we are in a certain page, the TransitionRoutes are evalauted in the following order:
        TransitionRoutes defined in the page with intent specified.
        TransitionRoutes defined in the transition route groups with intent specified.
        TransitionRoutes defined in flow with intent specified.
        TransitionRoutes defined in the transition route groups with intent specified.
        TransitionRoutes defined in the page with only condition specified.
        TransitionRoutes defined in the transition route groups with only condition specified.
        Structure is documented below.
        """
        return pulumi.get(self, "transition_routes")

