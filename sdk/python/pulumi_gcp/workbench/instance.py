# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['InstanceArgs', 'Instance']

@pulumi.input_type
class InstanceArgs:
    def __init__(__self__, *,
                 location: pulumi.Input[str],
                 disable_proxy_access: Optional[pulumi.Input[bool]] = None,
                 gce_setup: Optional[pulumi.Input['InstanceGceSetupArgs']] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 instance_owners: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Instance resource.
        :param pulumi.Input[str] location: Part of `parent`. See documentation of `projectsId`.
               
               
               - - -
        :param pulumi.Input[bool] disable_proxy_access: Optional. If true, the workbench instance will not register with the proxy.
        :param pulumi.Input['InstanceGceSetupArgs'] gce_setup: The definition of how to configure a VM instance outside of Resources and Identity.
               Structure is documented below.
        :param pulumi.Input[str] instance_id: Required. User-defined unique ID of this instance.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] instance_owners: 'Optional. Input only. The owner of this instance after creation. Format:
               `alias@example.com` Currently supports one owner only. If not specified, all of
               the service account users of your VM instance''s service account can use the instance.'
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Optional. Labels to apply to this instance. These can be later modified
               by the UpdateInstance method.
               
               **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
               Please refer to the field `effective_labels` for all of the labels present on the resource.
        :param pulumi.Input[str] name: The name of this workbench instance. Format: `projects/{project_id}/locations/{location}/instances/{instance_id}`
        :param pulumi.Input[str] project: The ID of the project in which the resource belongs.
               If it is not provided, the provider project is used.
        """
        pulumi.set(__self__, "location", location)
        if disable_proxy_access is not None:
            pulumi.set(__self__, "disable_proxy_access", disable_proxy_access)
        if gce_setup is not None:
            pulumi.set(__self__, "gce_setup", gce_setup)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if instance_owners is not None:
            pulumi.set(__self__, "instance_owners", instance_owners)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if project is not None:
            pulumi.set(__self__, "project", project)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input[str]:
        """
        Part of `parent`. See documentation of `projectsId`.


        - - -
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[str]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="disableProxyAccess")
    def disable_proxy_access(self) -> Optional[pulumi.Input[bool]]:
        """
        Optional. If true, the workbench instance will not register with the proxy.
        """
        return pulumi.get(self, "disable_proxy_access")

    @disable_proxy_access.setter
    def disable_proxy_access(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_proxy_access", value)

    @property
    @pulumi.getter(name="gceSetup")
    def gce_setup(self) -> Optional[pulumi.Input['InstanceGceSetupArgs']]:
        """
        The definition of how to configure a VM instance outside of Resources and Identity.
        Structure is documented below.
        """
        return pulumi.get(self, "gce_setup")

    @gce_setup.setter
    def gce_setup(self, value: Optional[pulumi.Input['InstanceGceSetupArgs']]):
        pulumi.set(self, "gce_setup", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        Required. User-defined unique ID of this instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="instanceOwners")
    def instance_owners(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        'Optional. Input only. The owner of this instance after creation. Format:
        `alias@example.com` Currently supports one owner only. If not specified, all of
        the service account users of your VM instance''s service account can use the instance.'
        """
        return pulumi.get(self, "instance_owners")

    @instance_owners.setter
    def instance_owners(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "instance_owners", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Optional. Labels to apply to this instance. These can be later modified
        by the UpdateInstance method.

        **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        Please refer to the field `effective_labels` for all of the labels present on the resource.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of this workbench instance. Format: `projects/{project_id}/locations/{location}/instances/{instance_id}`
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the project in which the resource belongs.
        If it is not provided, the provider project is used.
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)


@pulumi.input_type
class _InstanceState:
    def __init__(__self__, *,
                 create_time: Optional[pulumi.Input[str]] = None,
                 creator: Optional[pulumi.Input[str]] = None,
                 disable_proxy_access: Optional[pulumi.Input[bool]] = None,
                 effective_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 gce_setup: Optional[pulumi.Input['InstanceGceSetupArgs']] = None,
                 health_infos: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceHealthInfoArgs']]]] = None,
                 health_state: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 instance_owners: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 proxy_uri: Optional[pulumi.Input[str]] = None,
                 pulumi_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 update_time: Optional[pulumi.Input[str]] = None,
                 upgrade_histories: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceUpgradeHistoryArgs']]]] = None):
        """
        Input properties used for looking up and filtering Instance resources.
        :param pulumi.Input[str] create_time: An RFC3339 timestamp in UTC time. This in the format of yyyy-MM-ddTHH:mm:ss.SSSZ.
               The milliseconds portion (".SSS") is optional.
        :param pulumi.Input[str] creator: Output only. Email address of entity that sent original CreateInstance request.
        :param pulumi.Input[bool] disable_proxy_access: Optional. If true, the workbench instance will not register with the proxy.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] effective_labels: All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        :param pulumi.Input['InstanceGceSetupArgs'] gce_setup: The definition of how to configure a VM instance outside of Resources and Identity.
               Structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['InstanceHealthInfoArgs']]] health_infos: 'Output only. Additional information about instance health. Example:
               healthInfo": { "docker_proxy_agent_status": "1", "docker_status": "1", "jupyterlab_api_status":
               "-1", "jupyterlab_status": "-1", "updated": "2020-10-18 09:40:03.573409" }'
        :param pulumi.Input[str] health_state: Output only. Instance health_state.
        :param pulumi.Input[str] instance_id: Required. User-defined unique ID of this instance.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] instance_owners: 'Optional. Input only. The owner of this instance after creation. Format:
               `alias@example.com` Currently supports one owner only. If not specified, all of
               the service account users of your VM instance''s service account can use the instance.'
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Optional. Labels to apply to this instance. These can be later modified
               by the UpdateInstance method.
               
               **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
               Please refer to the field `effective_labels` for all of the labels present on the resource.
        :param pulumi.Input[str] location: Part of `parent`. See documentation of `projectsId`.
               
               
               - - -
        :param pulumi.Input[str] name: The name of this workbench instance. Format: `projects/{project_id}/locations/{location}/instances/{instance_id}`
        :param pulumi.Input[str] project: The ID of the project in which the resource belongs.
               If it is not provided, the provider project is used.
        :param pulumi.Input[str] proxy_uri: Output only. The proxy endpoint that is used to access the Jupyter notebook.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] pulumi_labels: The combination of labels configured directly on the resource
               and default labels configured on the provider.
        :param pulumi.Input[str] state: (Output)
               Output only. The state of this instance upgrade history entry.
        :param pulumi.Input[str] update_time: An RFC3339 timestamp in UTC time. This in the format of yyyy-MM-ddTHH:mm:ss.SSSZ.
               The milliseconds portion (".SSS") is optional.
        :param pulumi.Input[Sequence[pulumi.Input['InstanceUpgradeHistoryArgs']]] upgrade_histories: Output only. The upgrade history of this instance.
               Structure is documented below.
        """
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if creator is not None:
            pulumi.set(__self__, "creator", creator)
        if disable_proxy_access is not None:
            pulumi.set(__self__, "disable_proxy_access", disable_proxy_access)
        if effective_labels is not None:
            pulumi.set(__self__, "effective_labels", effective_labels)
        if gce_setup is not None:
            pulumi.set(__self__, "gce_setup", gce_setup)
        if health_infos is not None:
            pulumi.set(__self__, "health_infos", health_infos)
        if health_state is not None:
            pulumi.set(__self__, "health_state", health_state)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if instance_owners is not None:
            pulumi.set(__self__, "instance_owners", instance_owners)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if proxy_uri is not None:
            pulumi.set(__self__, "proxy_uri", proxy_uri)
        if pulumi_labels is not None:
            pulumi.set(__self__, "pulumi_labels", pulumi_labels)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)
        if upgrade_histories is not None:
            pulumi.set(__self__, "upgrade_histories", upgrade_histories)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        An RFC3339 timestamp in UTC time. This in the format of yyyy-MM-ddTHH:mm:ss.SSSZ.
        The milliseconds portion (".SSS") is optional.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter
    def creator(self) -> Optional[pulumi.Input[str]]:
        """
        Output only. Email address of entity that sent original CreateInstance request.
        """
        return pulumi.get(self, "creator")

    @creator.setter
    def creator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "creator", value)

    @property
    @pulumi.getter(name="disableProxyAccess")
    def disable_proxy_access(self) -> Optional[pulumi.Input[bool]]:
        """
        Optional. If true, the workbench instance will not register with the proxy.
        """
        return pulumi.get(self, "disable_proxy_access")

    @disable_proxy_access.setter
    def disable_proxy_access(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_proxy_access", value)

    @property
    @pulumi.getter(name="effectiveLabels")
    def effective_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        """
        return pulumi.get(self, "effective_labels")

    @effective_labels.setter
    def effective_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "effective_labels", value)

    @property
    @pulumi.getter(name="gceSetup")
    def gce_setup(self) -> Optional[pulumi.Input['InstanceGceSetupArgs']]:
        """
        The definition of how to configure a VM instance outside of Resources and Identity.
        Structure is documented below.
        """
        return pulumi.get(self, "gce_setup")

    @gce_setup.setter
    def gce_setup(self, value: Optional[pulumi.Input['InstanceGceSetupArgs']]):
        pulumi.set(self, "gce_setup", value)

    @property
    @pulumi.getter(name="healthInfos")
    def health_infos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceHealthInfoArgs']]]]:
        """
        'Output only. Additional information about instance health. Example:
        healthInfo": { "docker_proxy_agent_status": "1", "docker_status": "1", "jupyterlab_api_status":
        "-1", "jupyterlab_status": "-1", "updated": "2020-10-18 09:40:03.573409" }'
        """
        return pulumi.get(self, "health_infos")

    @health_infos.setter
    def health_infos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceHealthInfoArgs']]]]):
        pulumi.set(self, "health_infos", value)

    @property
    @pulumi.getter(name="healthState")
    def health_state(self) -> Optional[pulumi.Input[str]]:
        """
        Output only. Instance health_state.
        """
        return pulumi.get(self, "health_state")

    @health_state.setter
    def health_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_state", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        Required. User-defined unique ID of this instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="instanceOwners")
    def instance_owners(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        'Optional. Input only. The owner of this instance after creation. Format:
        `alias@example.com` Currently supports one owner only. If not specified, all of
        the service account users of your VM instance''s service account can use the instance.'
        """
        return pulumi.get(self, "instance_owners")

    @instance_owners.setter
    def instance_owners(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "instance_owners", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Optional. Labels to apply to this instance. These can be later modified
        by the UpdateInstance method.

        **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        Please refer to the field `effective_labels` for all of the labels present on the resource.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        Part of `parent`. See documentation of `projectsId`.


        - - -
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of this workbench instance. Format: `projects/{project_id}/locations/{location}/instances/{instance_id}`
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the project in which the resource belongs.
        If it is not provided, the provider project is used.
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="proxyUri")
    def proxy_uri(self) -> Optional[pulumi.Input[str]]:
        """
        Output only. The proxy endpoint that is used to access the Jupyter notebook.
        """
        return pulumi.get(self, "proxy_uri")

    @proxy_uri.setter
    def proxy_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_uri", value)

    @property
    @pulumi.getter(name="pulumiLabels")
    def pulumi_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The combination of labels configured directly on the resource
        and default labels configured on the provider.
        """
        return pulumi.get(self, "pulumi_labels")

    @pulumi_labels.setter
    def pulumi_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "pulumi_labels", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        Output only. The state of this instance upgrade history entry.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[str]]:
        """
        An RFC3339 timestamp in UTC time. This in the format of yyyy-MM-ddTHH:mm:ss.SSSZ.
        The milliseconds portion (".SSS") is optional.
        """
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_time", value)

    @property
    @pulumi.getter(name="upgradeHistories")
    def upgrade_histories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceUpgradeHistoryArgs']]]]:
        """
        Output only. The upgrade history of this instance.
        Structure is documented below.
        """
        return pulumi.get(self, "upgrade_histories")

    @upgrade_histories.setter
    def upgrade_histories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceUpgradeHistoryArgs']]]]):
        pulumi.set(self, "upgrade_histories", value)


class Instance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 disable_proxy_access: Optional[pulumi.Input[bool]] = None,
                 gce_setup: Optional[pulumi.Input[pulumi.InputType['InstanceGceSetupArgs']]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 instance_owners: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        A Workbench instance.

        ## Example Usage
        ### Workbench Instance Basic

        ```python
        import pulumi
        import pulumi_gcp as gcp

        instance = gcp.workbench.Instance("instance", location="us-west1-a")
        ```
        ### Workbench Instance Basic Gpu

        ```python
        import pulumi
        import pulumi_gcp as gcp

        instance = gcp.workbench.Instance("instance",
            gce_setup=gcp.workbench.InstanceGceSetupArgs(
                accelerator_configs=[gcp.workbench.InstanceGceSetupAcceleratorConfigArgs(
                    core_count="1",
                    type="NVIDIA_TESLA_T4",
                )],
                machine_type="n1-standard-1",
                vm_image=gcp.workbench.InstanceGceSetupVmImageArgs(
                    family="tf-latest-gpu",
                    project="deeplearning-platform-release",
                ),
            ),
            location="us-central1-a")
        ```
        ### Workbench Instance Labels

        ```python
        import pulumi
        import pulumi_gcp as gcp

        instance = gcp.workbench.Instance("instance",
            gce_setup=gcp.workbench.InstanceGceSetupArgs(
                machine_type="e2-standard-4",
                metadata={
                    "terraform": "true",
                },
                service_accounts=[gcp.workbench.InstanceGceSetupServiceAccountArgs(
                    email="my@service-account.com",
                )],
            ),
            instance_owners=["my@service-account.com"],
            labels={
                "k": "val",
            },
            location="us-central1-a")
        ```
        ### Workbench Instance Full

        ```python
        import pulumi
        import pulumi_gcp as gcp

        my_network = gcp.compute.Network("myNetwork", auto_create_subnetworks=False)
        my_subnetwork = gcp.compute.Subnetwork("mySubnetwork",
            network=my_network.id,
            region="us-central1",
            ip_cidr_range="10.0.1.0/24")
        keyring = gcp.kms.KeyRing("keyring", location="global")
        crypto_key = gcp.kms.CryptoKey("crypto-key", key_ring=keyring.id)
        instance = gcp.workbench.Instance("instance",
            location="us-central1-a",
            gce_setup=gcp.workbench.InstanceGceSetupArgs(
                machine_type="n1-standard-4",
                accelerator_configs=[gcp.workbench.InstanceGceSetupAcceleratorConfigArgs(
                    type="NVIDIA_TESLA_T4",
                    core_count="1",
                )],
                disable_public_ip=False,
                service_accounts=[gcp.workbench.InstanceGceSetupServiceAccountArgs(
                    email="my@service-account.com",
                )],
                boot_disk=gcp.workbench.InstanceGceSetupBootDiskArgs(
                    disk_size_gb="310",
                    disk_type="PD_SSD",
                    disk_encryption="GMEK",
                    kms_key=crypto_key.id,
                ),
                data_disks=gcp.workbench.InstanceGceSetupDataDisksArgs(
                    disk_size_gb="330",
                    disk_type="PD_SSD",
                    disk_encryption="GMEK",
                    kms_key=crypto_key.id,
                ),
                network_interfaces=[gcp.workbench.InstanceGceSetupNetworkInterfaceArgs(
                    network=my_network.id,
                    subnet=my_subnetwork.id,
                    nic_type="GVNIC",
                )],
                metadata={
                    "terraform": "true",
                },
                enable_ip_forwarding=True,
                tags=[
                    "abc",
                    "def",
                ],
            ),
            disable_proxy_access=True,
            instance_owners=["my@service-account.com"],
            labels={
                "k": "val",
            })
        ```

        ## Import

        Instance can be imported using any of these accepted formats* `projects/{{project}}/locations/{{location}}/instances/{{name}}` * `{{project}}/{{location}}/{{name}}` * `{{location}}/{{name}}` In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Instance using one of the formats above. For exampletf import {

         id = "projects/{{project}}/locations/{{location}}/instances/{{name}}"

         to = google_workbench_instance.default }

        ```sh
         $ pulumi import gcp:workbench/instance:Instance When using the [`terraform import` command](https://developer.hashicorp.com/terraform/cli/commands/import), Instance can be imported using one of the formats above. For example
        ```

        ```sh
         $ pulumi import gcp:workbench/instance:Instance default projects/{{project}}/locations/{{location}}/instances/{{name}}
        ```

        ```sh
         $ pulumi import gcp:workbench/instance:Instance default {{project}}/{{location}}/{{name}}
        ```

        ```sh
         $ pulumi import gcp:workbench/instance:Instance default {{location}}/{{name}}
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] disable_proxy_access: Optional. If true, the workbench instance will not register with the proxy.
        :param pulumi.Input[pulumi.InputType['InstanceGceSetupArgs']] gce_setup: The definition of how to configure a VM instance outside of Resources and Identity.
               Structure is documented below.
        :param pulumi.Input[str] instance_id: Required. User-defined unique ID of this instance.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] instance_owners: 'Optional. Input only. The owner of this instance after creation. Format:
               `alias@example.com` Currently supports one owner only. If not specified, all of
               the service account users of your VM instance''s service account can use the instance.'
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Optional. Labels to apply to this instance. These can be later modified
               by the UpdateInstance method.
               
               **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
               Please refer to the field `effective_labels` for all of the labels present on the resource.
        :param pulumi.Input[str] location: Part of `parent`. See documentation of `projectsId`.
               
               
               - - -
        :param pulumi.Input[str] name: The name of this workbench instance. Format: `projects/{project_id}/locations/{location}/instances/{instance_id}`
        :param pulumi.Input[str] project: The ID of the project in which the resource belongs.
               If it is not provided, the provider project is used.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: InstanceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        A Workbench instance.

        ## Example Usage
        ### Workbench Instance Basic

        ```python
        import pulumi
        import pulumi_gcp as gcp

        instance = gcp.workbench.Instance("instance", location="us-west1-a")
        ```
        ### Workbench Instance Basic Gpu

        ```python
        import pulumi
        import pulumi_gcp as gcp

        instance = gcp.workbench.Instance("instance",
            gce_setup=gcp.workbench.InstanceGceSetupArgs(
                accelerator_configs=[gcp.workbench.InstanceGceSetupAcceleratorConfigArgs(
                    core_count="1",
                    type="NVIDIA_TESLA_T4",
                )],
                machine_type="n1-standard-1",
                vm_image=gcp.workbench.InstanceGceSetupVmImageArgs(
                    family="tf-latest-gpu",
                    project="deeplearning-platform-release",
                ),
            ),
            location="us-central1-a")
        ```
        ### Workbench Instance Labels

        ```python
        import pulumi
        import pulumi_gcp as gcp

        instance = gcp.workbench.Instance("instance",
            gce_setup=gcp.workbench.InstanceGceSetupArgs(
                machine_type="e2-standard-4",
                metadata={
                    "terraform": "true",
                },
                service_accounts=[gcp.workbench.InstanceGceSetupServiceAccountArgs(
                    email="my@service-account.com",
                )],
            ),
            instance_owners=["my@service-account.com"],
            labels={
                "k": "val",
            },
            location="us-central1-a")
        ```
        ### Workbench Instance Full

        ```python
        import pulumi
        import pulumi_gcp as gcp

        my_network = gcp.compute.Network("myNetwork", auto_create_subnetworks=False)
        my_subnetwork = gcp.compute.Subnetwork("mySubnetwork",
            network=my_network.id,
            region="us-central1",
            ip_cidr_range="10.0.1.0/24")
        keyring = gcp.kms.KeyRing("keyring", location="global")
        crypto_key = gcp.kms.CryptoKey("crypto-key", key_ring=keyring.id)
        instance = gcp.workbench.Instance("instance",
            location="us-central1-a",
            gce_setup=gcp.workbench.InstanceGceSetupArgs(
                machine_type="n1-standard-4",
                accelerator_configs=[gcp.workbench.InstanceGceSetupAcceleratorConfigArgs(
                    type="NVIDIA_TESLA_T4",
                    core_count="1",
                )],
                disable_public_ip=False,
                service_accounts=[gcp.workbench.InstanceGceSetupServiceAccountArgs(
                    email="my@service-account.com",
                )],
                boot_disk=gcp.workbench.InstanceGceSetupBootDiskArgs(
                    disk_size_gb="310",
                    disk_type="PD_SSD",
                    disk_encryption="GMEK",
                    kms_key=crypto_key.id,
                ),
                data_disks=gcp.workbench.InstanceGceSetupDataDisksArgs(
                    disk_size_gb="330",
                    disk_type="PD_SSD",
                    disk_encryption="GMEK",
                    kms_key=crypto_key.id,
                ),
                network_interfaces=[gcp.workbench.InstanceGceSetupNetworkInterfaceArgs(
                    network=my_network.id,
                    subnet=my_subnetwork.id,
                    nic_type="GVNIC",
                )],
                metadata={
                    "terraform": "true",
                },
                enable_ip_forwarding=True,
                tags=[
                    "abc",
                    "def",
                ],
            ),
            disable_proxy_access=True,
            instance_owners=["my@service-account.com"],
            labels={
                "k": "val",
            })
        ```

        ## Import

        Instance can be imported using any of these accepted formats* `projects/{{project}}/locations/{{location}}/instances/{{name}}` * `{{project}}/{{location}}/{{name}}` * `{{location}}/{{name}}` In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Instance using one of the formats above. For exampletf import {

         id = "projects/{{project}}/locations/{{location}}/instances/{{name}}"

         to = google_workbench_instance.default }

        ```sh
         $ pulumi import gcp:workbench/instance:Instance When using the [`terraform import` command](https://developer.hashicorp.com/terraform/cli/commands/import), Instance can be imported using one of the formats above. For example
        ```

        ```sh
         $ pulumi import gcp:workbench/instance:Instance default projects/{{project}}/locations/{{location}}/instances/{{name}}
        ```

        ```sh
         $ pulumi import gcp:workbench/instance:Instance default {{project}}/{{location}}/{{name}}
        ```

        ```sh
         $ pulumi import gcp:workbench/instance:Instance default {{location}}/{{name}}
        ```

        :param str resource_name: The name of the resource.
        :param InstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 disable_proxy_access: Optional[pulumi.Input[bool]] = None,
                 gce_setup: Optional[pulumi.Input[pulumi.InputType['InstanceGceSetupArgs']]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 instance_owners: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InstanceArgs.__new__(InstanceArgs)

            __props__.__dict__["disable_proxy_access"] = disable_proxy_access
            __props__.__dict__["gce_setup"] = gce_setup
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["instance_owners"] = instance_owners
            __props__.__dict__["labels"] = labels
            if location is None and not opts.urn:
                raise TypeError("Missing required property 'location'")
            __props__.__dict__["location"] = location
            __props__.__dict__["name"] = name
            __props__.__dict__["project"] = project
            __props__.__dict__["create_time"] = None
            __props__.__dict__["creator"] = None
            __props__.__dict__["effective_labels"] = None
            __props__.__dict__["health_infos"] = None
            __props__.__dict__["health_state"] = None
            __props__.__dict__["proxy_uri"] = None
            __props__.__dict__["pulumi_labels"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["update_time"] = None
            __props__.__dict__["upgrade_histories"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["effectiveLabels", "pulumiLabels"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Instance, __self__).__init__(
            'gcp:workbench/instance:Instance',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            create_time: Optional[pulumi.Input[str]] = None,
            creator: Optional[pulumi.Input[str]] = None,
            disable_proxy_access: Optional[pulumi.Input[bool]] = None,
            effective_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            gce_setup: Optional[pulumi.Input[pulumi.InputType['InstanceGceSetupArgs']]] = None,
            health_infos: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceHealthInfoArgs']]]]] = None,
            health_state: Optional[pulumi.Input[str]] = None,
            instance_id: Optional[pulumi.Input[str]] = None,
            instance_owners: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            location: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            project: Optional[pulumi.Input[str]] = None,
            proxy_uri: Optional[pulumi.Input[str]] = None,
            pulumi_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            state: Optional[pulumi.Input[str]] = None,
            update_time: Optional[pulumi.Input[str]] = None,
            upgrade_histories: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceUpgradeHistoryArgs']]]]] = None) -> 'Instance':
        """
        Get an existing Instance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] create_time: An RFC3339 timestamp in UTC time. This in the format of yyyy-MM-ddTHH:mm:ss.SSSZ.
               The milliseconds portion (".SSS") is optional.
        :param pulumi.Input[str] creator: Output only. Email address of entity that sent original CreateInstance request.
        :param pulumi.Input[bool] disable_proxy_access: Optional. If true, the workbench instance will not register with the proxy.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] effective_labels: All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        :param pulumi.Input[pulumi.InputType['InstanceGceSetupArgs']] gce_setup: The definition of how to configure a VM instance outside of Resources and Identity.
               Structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceHealthInfoArgs']]]] health_infos: 'Output only. Additional information about instance health. Example:
               healthInfo": { "docker_proxy_agent_status": "1", "docker_status": "1", "jupyterlab_api_status":
               "-1", "jupyterlab_status": "-1", "updated": "2020-10-18 09:40:03.573409" }'
        :param pulumi.Input[str] health_state: Output only. Instance health_state.
        :param pulumi.Input[str] instance_id: Required. User-defined unique ID of this instance.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] instance_owners: 'Optional. Input only. The owner of this instance after creation. Format:
               `alias@example.com` Currently supports one owner only. If not specified, all of
               the service account users of your VM instance''s service account can use the instance.'
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Optional. Labels to apply to this instance. These can be later modified
               by the UpdateInstance method.
               
               **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
               Please refer to the field `effective_labels` for all of the labels present on the resource.
        :param pulumi.Input[str] location: Part of `parent`. See documentation of `projectsId`.
               
               
               - - -
        :param pulumi.Input[str] name: The name of this workbench instance. Format: `projects/{project_id}/locations/{location}/instances/{instance_id}`
        :param pulumi.Input[str] project: The ID of the project in which the resource belongs.
               If it is not provided, the provider project is used.
        :param pulumi.Input[str] proxy_uri: Output only. The proxy endpoint that is used to access the Jupyter notebook.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] pulumi_labels: The combination of labels configured directly on the resource
               and default labels configured on the provider.
        :param pulumi.Input[str] state: (Output)
               Output only. The state of this instance upgrade history entry.
        :param pulumi.Input[str] update_time: An RFC3339 timestamp in UTC time. This in the format of yyyy-MM-ddTHH:mm:ss.SSSZ.
               The milliseconds portion (".SSS") is optional.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceUpgradeHistoryArgs']]]] upgrade_histories: Output only. The upgrade history of this instance.
               Structure is documented below.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _InstanceState.__new__(_InstanceState)

        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["creator"] = creator
        __props__.__dict__["disable_proxy_access"] = disable_proxy_access
        __props__.__dict__["effective_labels"] = effective_labels
        __props__.__dict__["gce_setup"] = gce_setup
        __props__.__dict__["health_infos"] = health_infos
        __props__.__dict__["health_state"] = health_state
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["instance_owners"] = instance_owners
        __props__.__dict__["labels"] = labels
        __props__.__dict__["location"] = location
        __props__.__dict__["name"] = name
        __props__.__dict__["project"] = project
        __props__.__dict__["proxy_uri"] = proxy_uri
        __props__.__dict__["pulumi_labels"] = pulumi_labels
        __props__.__dict__["state"] = state
        __props__.__dict__["update_time"] = update_time
        __props__.__dict__["upgrade_histories"] = upgrade_histories
        return Instance(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        An RFC3339 timestamp in UTC time. This in the format of yyyy-MM-ddTHH:mm:ss.SSSZ.
        The milliseconds portion (".SSS") is optional.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def creator(self) -> pulumi.Output[str]:
        """
        Output only. Email address of entity that sent original CreateInstance request.
        """
        return pulumi.get(self, "creator")

    @property
    @pulumi.getter(name="disableProxyAccess")
    def disable_proxy_access(self) -> pulumi.Output[Optional[bool]]:
        """
        Optional. If true, the workbench instance will not register with the proxy.
        """
        return pulumi.get(self, "disable_proxy_access")

    @property
    @pulumi.getter(name="effectiveLabels")
    def effective_labels(self) -> pulumi.Output[Mapping[str, str]]:
        """
        All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        """
        return pulumi.get(self, "effective_labels")

    @property
    @pulumi.getter(name="gceSetup")
    def gce_setup(self) -> pulumi.Output['outputs.InstanceGceSetup']:
        """
        The definition of how to configure a VM instance outside of Resources and Identity.
        Structure is documented below.
        """
        return pulumi.get(self, "gce_setup")

    @property
    @pulumi.getter(name="healthInfos")
    def health_infos(self) -> pulumi.Output[Sequence['outputs.InstanceHealthInfo']]:
        """
        'Output only. Additional information about instance health. Example:
        healthInfo": { "docker_proxy_agent_status": "1", "docker_status": "1", "jupyterlab_api_status":
        "-1", "jupyterlab_status": "-1", "updated": "2020-10-18 09:40:03.573409" }'
        """
        return pulumi.get(self, "health_infos")

    @property
    @pulumi.getter(name="healthState")
    def health_state(self) -> pulumi.Output[str]:
        """
        Output only. Instance health_state.
        """
        return pulumi.get(self, "health_state")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[Optional[str]]:
        """
        Required. User-defined unique ID of this instance.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceOwners")
    def instance_owners(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        'Optional. Input only. The owner of this instance after creation. Format:
        `alias@example.com` Currently supports one owner only. If not specified, all of
        the service account users of your VM instance''s service account can use the instance.'
        """
        return pulumi.get(self, "instance_owners")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Optional. Labels to apply to this instance. These can be later modified
        by the UpdateInstance method.

        **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        Please refer to the field `effective_labels` for all of the labels present on the resource.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        """
        Part of `parent`. See documentation of `projectsId`.


        - - -
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of this workbench instance. Format: `projects/{project_id}/locations/{location}/instances/{instance_id}`
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[str]:
        """
        The ID of the project in which the resource belongs.
        If it is not provided, the provider project is used.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="proxyUri")
    def proxy_uri(self) -> pulumi.Output[str]:
        """
        Output only. The proxy endpoint that is used to access the Jupyter notebook.
        """
        return pulumi.get(self, "proxy_uri")

    @property
    @pulumi.getter(name="pulumiLabels")
    def pulumi_labels(self) -> pulumi.Output[Mapping[str, str]]:
        """
        The combination of labels configured directly on the resource
        and default labels configured on the provider.
        """
        return pulumi.get(self, "pulumi_labels")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        """
        (Output)
        Output only. The state of this instance upgrade history entry.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[str]:
        """
        An RFC3339 timestamp in UTC time. This in the format of yyyy-MM-ddTHH:mm:ss.SSSZ.
        The milliseconds portion (".SSS") is optional.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="upgradeHistories")
    def upgrade_histories(self) -> pulumi.Output[Sequence['outputs.InstanceUpgradeHistory']]:
        """
        Output only. The upgrade history of this instance.
        Structure is documented below.
        """
        return pulumi.get(self, "upgrade_histories")

