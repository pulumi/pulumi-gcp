# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetMetastoreDatabaseIamPolicyResult',
    'AwaitableGetMetastoreDatabaseIamPolicyResult',
    'get_metastore_database_iam_policy',
    'get_metastore_database_iam_policy_output',
]

@pulumi.output_type
class GetMetastoreDatabaseIamPolicyResult:
    """
    A collection of values returned by getMetastoreDatabaseIamPolicy.
    """
    def __init__(__self__, database=None, etag=None, id=None, location=None, policy_data=None, project=None, service_id=None):
        if database and not isinstance(database, str):
            raise TypeError("Expected argument 'database' to be a str")
        pulumi.set(__self__, "database", database)
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        pulumi.set(__self__, "etag", etag)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if policy_data and not isinstance(policy_data, str):
            raise TypeError("Expected argument 'policy_data' to be a str")
        pulumi.set(__self__, "policy_data", policy_data)
        if project and not isinstance(project, str):
            raise TypeError("Expected argument 'project' to be a str")
        pulumi.set(__self__, "project", project)
        if service_id and not isinstance(service_id, str):
            raise TypeError("Expected argument 'service_id' to be a str")
        pulumi.set(__self__, "service_id", service_id)

    @property
    @pulumi.getter
    def database(self) -> builtins.str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def etag(self) -> builtins.str:
        """
        (Computed) The etag of the IAM policy.
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def location(self) -> builtins.str:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="policyData")
    def policy_data(self) -> builtins.str:
        """
        (Required only by `dataproc.MetastoreDatabaseIamPolicy`) The policy data generated by
        a `organizations_get_iam_policy` data source.
        """
        return pulumi.get(self, "policy_data")

    @property
    @pulumi.getter
    def project(self) -> builtins.str:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> builtins.str:
        return pulumi.get(self, "service_id")


class AwaitableGetMetastoreDatabaseIamPolicyResult(GetMetastoreDatabaseIamPolicyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMetastoreDatabaseIamPolicyResult(
            database=self.database,
            etag=self.etag,
            id=self.id,
            location=self.location,
            policy_data=self.policy_data,
            project=self.project,
            service_id=self.service_id)


def get_metastore_database_iam_policy(database: Optional[builtins.str] = None,
                                      location: Optional[builtins.str] = None,
                                      project: Optional[builtins.str] = None,
                                      service_id: Optional[builtins.str] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMetastoreDatabaseIamPolicyResult:
    """
    Retrieves the current IAM policy data for database

    ## Example Usage

    ```python
    import pulumi
    import pulumi_gcp as gcp

    policy = gcp.dataproc.get_metastore_database_iam_policy(project=dpms_service["project"],
        location=dpms_service["location"],
        service_id=dpms_service["serviceId"],
        database=hive["hiveConfig"][0]["properties"]["database"])
    ```


    :param builtins.str database: Used to find the parent resource to bind the IAM policy to
    :param builtins.str project: The ID of the project in which the resource belongs.
           If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
    """
    __args__ = dict()
    __args__['database'] = database
    __args__['location'] = location
    __args__['project'] = project
    __args__['serviceId'] = service_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('gcp:dataproc/getMetastoreDatabaseIamPolicy:getMetastoreDatabaseIamPolicy', __args__, opts=opts, typ=GetMetastoreDatabaseIamPolicyResult).value

    return AwaitableGetMetastoreDatabaseIamPolicyResult(
        database=pulumi.get(__ret__, 'database'),
        etag=pulumi.get(__ret__, 'etag'),
        id=pulumi.get(__ret__, 'id'),
        location=pulumi.get(__ret__, 'location'),
        policy_data=pulumi.get(__ret__, 'policy_data'),
        project=pulumi.get(__ret__, 'project'),
        service_id=pulumi.get(__ret__, 'service_id'))
def get_metastore_database_iam_policy_output(database: Optional[pulumi.Input[builtins.str]] = None,
                                             location: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                                             project: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                                             service_id: Optional[pulumi.Input[builtins.str]] = None,
                                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetMetastoreDatabaseIamPolicyResult]:
    """
    Retrieves the current IAM policy data for database

    ## Example Usage

    ```python
    import pulumi
    import pulumi_gcp as gcp

    policy = gcp.dataproc.get_metastore_database_iam_policy(project=dpms_service["project"],
        location=dpms_service["location"],
        service_id=dpms_service["serviceId"],
        database=hive["hiveConfig"][0]["properties"]["database"])
    ```


    :param builtins.str database: Used to find the parent resource to bind the IAM policy to
    :param builtins.str project: The ID of the project in which the resource belongs.
           If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
    """
    __args__ = dict()
    __args__['database'] = database
    __args__['location'] = location
    __args__['project'] = project
    __args__['serviceId'] = service_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('gcp:dataproc/getMetastoreDatabaseIamPolicy:getMetastoreDatabaseIamPolicy', __args__, opts=opts, typ=GetMetastoreDatabaseIamPolicyResult)
    return __ret__.apply(lambda __response__: GetMetastoreDatabaseIamPolicyResult(
        database=pulumi.get(__response__, 'database'),
        etag=pulumi.get(__response__, 'etag'),
        id=pulumi.get(__response__, 'id'),
        location=pulumi.get(__response__, 'location'),
        policy_data=pulumi.get(__response__, 'policy_data'),
        project=pulumi.get(__response__, 'project'),
        service_id=pulumi.get(__response__, 'service_id')))
