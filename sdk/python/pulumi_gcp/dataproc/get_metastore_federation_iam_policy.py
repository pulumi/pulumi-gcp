# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetMetastoreFederationIamPolicyResult',
    'AwaitableGetMetastoreFederationIamPolicyResult',
    'get_metastore_federation_iam_policy',
    'get_metastore_federation_iam_policy_output',
]

@pulumi.output_type
class GetMetastoreFederationIamPolicyResult:
    """
    A collection of values returned by getMetastoreFederationIamPolicy.
    """
    def __init__(__self__, etag=None, federation_id=None, id=None, location=None, policy_data=None, project=None):
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        pulumi.set(__self__, "etag", etag)
        if federation_id and not isinstance(federation_id, str):
            raise TypeError("Expected argument 'federation_id' to be a str")
        pulumi.set(__self__, "federation_id", federation_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if policy_data and not isinstance(policy_data, str):
            raise TypeError("Expected argument 'policy_data' to be a str")
        pulumi.set(__self__, "policy_data", policy_data)
        if project and not isinstance(project, str):
            raise TypeError("Expected argument 'project' to be a str")
        pulumi.set(__self__, "project", project)

    @property
    @pulumi.getter
    def etag(self) -> str:
        """
        (Computed) The etag of the IAM policy.
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter(name="federationId")
    def federation_id(self) -> str:
        return pulumi.get(self, "federation_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def location(self) -> str:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="policyData")
    def policy_data(self) -> str:
        """
        (Required only by `dataproc.MetastoreFederationIamPolicy`) The policy data generated by
        a `organizations_get_iam_policy` data source.
        """
        return pulumi.get(self, "policy_data")

    @property
    @pulumi.getter
    def project(self) -> str:
        return pulumi.get(self, "project")


class AwaitableGetMetastoreFederationIamPolicyResult(GetMetastoreFederationIamPolicyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMetastoreFederationIamPolicyResult(
            etag=self.etag,
            federation_id=self.federation_id,
            id=self.id,
            location=self.location,
            policy_data=self.policy_data,
            project=self.project)


def get_metastore_federation_iam_policy(federation_id: Optional[str] = None,
                                        location: Optional[str] = None,
                                        project: Optional[str] = None,
                                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMetastoreFederationIamPolicyResult:
    """
    Use this data source to access information about an existing resource.

    :param str location: The location where the metastore federation should reside.
           Used to find the parent resource to bind the IAM policy to
    :param str project: The ID of the project in which the resource belongs.
           If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
    """
    __args__ = dict()
    __args__['federationId'] = federation_id
    __args__['location'] = location
    __args__['project'] = project
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('gcp:dataproc/getMetastoreFederationIamPolicy:getMetastoreFederationIamPolicy', __args__, opts=opts, typ=GetMetastoreFederationIamPolicyResult).value

    return AwaitableGetMetastoreFederationIamPolicyResult(
        etag=pulumi.get(__ret__, 'etag'),
        federation_id=pulumi.get(__ret__, 'federation_id'),
        id=pulumi.get(__ret__, 'id'),
        location=pulumi.get(__ret__, 'location'),
        policy_data=pulumi.get(__ret__, 'policy_data'),
        project=pulumi.get(__ret__, 'project'))


@_utilities.lift_output_func(get_metastore_federation_iam_policy)
def get_metastore_federation_iam_policy_output(federation_id: Optional[pulumi.Input[str]] = None,
                                               location: Optional[pulumi.Input[Optional[str]]] = None,
                                               project: Optional[pulumi.Input[Optional[str]]] = None,
                                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetMetastoreFederationIamPolicyResult]:
    """
    Use this data source to access information about an existing resource.

    :param str location: The location where the metastore federation should reside.
           Used to find the parent resource to bind the IAM policy to
    :param str project: The ID of the project in which the resource belongs.
           If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
    """
    ...
