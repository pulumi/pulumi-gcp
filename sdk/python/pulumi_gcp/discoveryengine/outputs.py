# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'ChatEngineChatEngineConfig',
    'ChatEngineChatEngineConfigAgentCreationConfig',
    'ChatEngineChatEngineMetadata',
    'ChatEngineCommonConfig',
    'DataStoreDocumentProcessingConfig',
    'DataStoreDocumentProcessingConfigDefaultParsingConfig',
    'DataStoreDocumentProcessingConfigDefaultParsingConfigDigitalParsingConfig',
    'DataStoreDocumentProcessingConfigDefaultParsingConfigOcrParsingConfig',
    'DataStoreDocumentProcessingConfigParsingConfigOverride',
    'DataStoreDocumentProcessingConfigParsingConfigOverrideDigitalParsingConfig',
    'DataStoreDocumentProcessingConfigParsingConfigOverrideOcrParsingConfig',
    'SearchEngineCommonConfig',
    'SearchEngineSearchEngineConfig',
]

@pulumi.output_type
class ChatEngineChatEngineConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "agentCreationConfig":
            suggest = "agent_creation_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ChatEngineChatEngineConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ChatEngineChatEngineConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ChatEngineChatEngineConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 agent_creation_config: 'outputs.ChatEngineChatEngineConfigAgentCreationConfig'):
        """
        :param 'ChatEngineChatEngineConfigAgentCreationConfigArgs' agent_creation_config: The configuration to generate the Dialogflow agent that is associated to this Engine.
               Structure is documented below.
        """
        pulumi.set(__self__, "agent_creation_config", agent_creation_config)

    @property
    @pulumi.getter(name="agentCreationConfig")
    def agent_creation_config(self) -> 'outputs.ChatEngineChatEngineConfigAgentCreationConfig':
        """
        The configuration to generate the Dialogflow agent that is associated to this Engine.
        Structure is documented below.
        """
        return pulumi.get(self, "agent_creation_config")


@pulumi.output_type
class ChatEngineChatEngineConfigAgentCreationConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultLanguageCode":
            suggest = "default_language_code"
        elif key == "timeZone":
            suggest = "time_zone"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ChatEngineChatEngineConfigAgentCreationConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ChatEngineChatEngineConfigAgentCreationConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ChatEngineChatEngineConfigAgentCreationConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default_language_code: str,
                 time_zone: str,
                 business: Optional[str] = None,
                 location: Optional[str] = None):
        """
        :param str default_language_code: The default language of the agent as a language tag. See [Language Support](https://cloud.google.com/dialogflow/docs/reference/language) for a list of the currently supported language codes.
        :param str time_zone: The time zone of the agent from the [time zone database](https://www.iana.org/time-zones), e.g., America/New_York, Europe/Paris.
        :param str business: Name of the company, organization or other entity that the agent represents. Used for knowledge connector LLM prompt and for knowledge search.
        :param str location: Agent location for Agent creation, currently supported values: global/us/eu, it needs to be the same region as the Chat Engine.
               
               - - -
        """
        pulumi.set(__self__, "default_language_code", default_language_code)
        pulumi.set(__self__, "time_zone", time_zone)
        if business is not None:
            pulumi.set(__self__, "business", business)
        if location is not None:
            pulumi.set(__self__, "location", location)

    @property
    @pulumi.getter(name="defaultLanguageCode")
    def default_language_code(self) -> str:
        """
        The default language of the agent as a language tag. See [Language Support](https://cloud.google.com/dialogflow/docs/reference/language) for a list of the currently supported language codes.
        """
        return pulumi.get(self, "default_language_code")

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> str:
        """
        The time zone of the agent from the [time zone database](https://www.iana.org/time-zones), e.g., America/New_York, Europe/Paris.
        """
        return pulumi.get(self, "time_zone")

    @property
    @pulumi.getter
    def business(self) -> Optional[str]:
        """
        Name of the company, organization or other entity that the agent represents. Used for knowledge connector LLM prompt and for knowledge search.
        """
        return pulumi.get(self, "business")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        """
        Agent location for Agent creation, currently supported values: global/us/eu, it needs to be the same region as the Chat Engine.

        - - -
        """
        return pulumi.get(self, "location")


@pulumi.output_type
class ChatEngineChatEngineMetadata(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dialogflowAgent":
            suggest = "dialogflow_agent"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ChatEngineChatEngineMetadata. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ChatEngineChatEngineMetadata.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ChatEngineChatEngineMetadata.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dialogflow_agent: Optional[str] = None):
        """
        :param str dialogflow_agent: (Output)
               The resource name of a Dialogflow agent, that this Chat Engine refers to.
        """
        if dialogflow_agent is not None:
            pulumi.set(__self__, "dialogflow_agent", dialogflow_agent)

    @property
    @pulumi.getter(name="dialogflowAgent")
    def dialogflow_agent(self) -> Optional[str]:
        """
        (Output)
        The resource name of a Dialogflow agent, that this Chat Engine refers to.
        """
        return pulumi.get(self, "dialogflow_agent")


@pulumi.output_type
class ChatEngineCommonConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "companyName":
            suggest = "company_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ChatEngineCommonConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ChatEngineCommonConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ChatEngineCommonConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 company_name: Optional[str] = None):
        """
        :param str company_name: The name of the company, business or entity that is associated with the engine. Setting this may help improve LLM related features.
        """
        if company_name is not None:
            pulumi.set(__self__, "company_name", company_name)

    @property
    @pulumi.getter(name="companyName")
    def company_name(self) -> Optional[str]:
        """
        The name of the company, business or entity that is associated with the engine. Setting this may help improve LLM related features.
        """
        return pulumi.get(self, "company_name")


@pulumi.output_type
class DataStoreDocumentProcessingConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultParsingConfig":
            suggest = "default_parsing_config"
        elif key == "parsingConfigOverrides":
            suggest = "parsing_config_overrides"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataStoreDocumentProcessingConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataStoreDocumentProcessingConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataStoreDocumentProcessingConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default_parsing_config: Optional['outputs.DataStoreDocumentProcessingConfigDefaultParsingConfig'] = None,
                 name: Optional[str] = None,
                 parsing_config_overrides: Optional[Sequence['outputs.DataStoreDocumentProcessingConfigParsingConfigOverride']] = None):
        """
        :param 'DataStoreDocumentProcessingConfigDefaultParsingConfigArgs' default_parsing_config: Configurations for default Document parser. If not specified, this resource
               will be configured to use a default DigitalParsingConfig, and the default parsing
               config will be applied to all file types for Document parsing.
               Structure is documented below.
        :param str name: (Output)
               The full resource name of the Document Processing Config. Format:
               `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}/documentProcessingConfig`.
        :param Sequence['DataStoreDocumentProcessingConfigParsingConfigOverrideArgs'] parsing_config_overrides: Map from file type to override the default parsing configuration based on the file type. Supported keys:
        """
        if default_parsing_config is not None:
            pulumi.set(__self__, "default_parsing_config", default_parsing_config)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parsing_config_overrides is not None:
            pulumi.set(__self__, "parsing_config_overrides", parsing_config_overrides)

    @property
    @pulumi.getter(name="defaultParsingConfig")
    def default_parsing_config(self) -> Optional['outputs.DataStoreDocumentProcessingConfigDefaultParsingConfig']:
        """
        Configurations for default Document parser. If not specified, this resource
        will be configured to use a default DigitalParsingConfig, and the default parsing
        config will be applied to all file types for Document parsing.
        Structure is documented below.
        """
        return pulumi.get(self, "default_parsing_config")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        (Output)
        The full resource name of the Document Processing Config. Format:
        `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}/documentProcessingConfig`.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="parsingConfigOverrides")
    def parsing_config_overrides(self) -> Optional[Sequence['outputs.DataStoreDocumentProcessingConfigParsingConfigOverride']]:
        """
        Map from file type to override the default parsing configuration based on the file type. Supported keys:
        """
        return pulumi.get(self, "parsing_config_overrides")


@pulumi.output_type
class DataStoreDocumentProcessingConfigDefaultParsingConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "digitalParsingConfig":
            suggest = "digital_parsing_config"
        elif key == "ocrParsingConfig":
            suggest = "ocr_parsing_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataStoreDocumentProcessingConfigDefaultParsingConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataStoreDocumentProcessingConfigDefaultParsingConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataStoreDocumentProcessingConfigDefaultParsingConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 digital_parsing_config: Optional['outputs.DataStoreDocumentProcessingConfigDefaultParsingConfigDigitalParsingConfig'] = None,
                 ocr_parsing_config: Optional['outputs.DataStoreDocumentProcessingConfigDefaultParsingConfigOcrParsingConfig'] = None):
        """
        :param 'DataStoreDocumentProcessingConfigDefaultParsingConfigDigitalParsingConfigArgs' digital_parsing_config: Configurations applied to digital parser.
        :param 'DataStoreDocumentProcessingConfigDefaultParsingConfigOcrParsingConfigArgs' ocr_parsing_config: Configurations applied to OCR parser. Currently it only applies to PDFs.
               Structure is documented below.
        """
        if digital_parsing_config is not None:
            pulumi.set(__self__, "digital_parsing_config", digital_parsing_config)
        if ocr_parsing_config is not None:
            pulumi.set(__self__, "ocr_parsing_config", ocr_parsing_config)

    @property
    @pulumi.getter(name="digitalParsingConfig")
    def digital_parsing_config(self) -> Optional['outputs.DataStoreDocumentProcessingConfigDefaultParsingConfigDigitalParsingConfig']:
        """
        Configurations applied to digital parser.
        """
        return pulumi.get(self, "digital_parsing_config")

    @property
    @pulumi.getter(name="ocrParsingConfig")
    def ocr_parsing_config(self) -> Optional['outputs.DataStoreDocumentProcessingConfigDefaultParsingConfigOcrParsingConfig']:
        """
        Configurations applied to OCR parser. Currently it only applies to PDFs.
        Structure is documented below.
        """
        return pulumi.get(self, "ocr_parsing_config")


@pulumi.output_type
class DataStoreDocumentProcessingConfigDefaultParsingConfigDigitalParsingConfig(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class DataStoreDocumentProcessingConfigDefaultParsingConfigOcrParsingConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "useNativeText":
            suggest = "use_native_text"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataStoreDocumentProcessingConfigDefaultParsingConfigOcrParsingConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataStoreDocumentProcessingConfigDefaultParsingConfigOcrParsingConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataStoreDocumentProcessingConfigDefaultParsingConfigOcrParsingConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 use_native_text: Optional[bool] = None):
        """
        :param bool use_native_text: If true, will use native text instead of OCR text on pages containing native text.
        """
        if use_native_text is not None:
            pulumi.set(__self__, "use_native_text", use_native_text)

    @property
    @pulumi.getter(name="useNativeText")
    def use_native_text(self) -> Optional[bool]:
        """
        If true, will use native text instead of OCR text on pages containing native text.
        """
        return pulumi.get(self, "use_native_text")


@pulumi.output_type
class DataStoreDocumentProcessingConfigParsingConfigOverride(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileType":
            suggest = "file_type"
        elif key == "digitalParsingConfig":
            suggest = "digital_parsing_config"
        elif key == "ocrParsingConfig":
            suggest = "ocr_parsing_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataStoreDocumentProcessingConfigParsingConfigOverride. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataStoreDocumentProcessingConfigParsingConfigOverride.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataStoreDocumentProcessingConfigParsingConfigOverride.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_type: str,
                 digital_parsing_config: Optional['outputs.DataStoreDocumentProcessingConfigParsingConfigOverrideDigitalParsingConfig'] = None,
                 ocr_parsing_config: Optional['outputs.DataStoreDocumentProcessingConfigParsingConfigOverrideOcrParsingConfig'] = None):
        """
        :param str file_type: The identifier for this object. Format specified above.
        :param 'DataStoreDocumentProcessingConfigParsingConfigOverrideDigitalParsingConfigArgs' digital_parsing_config: Configurations applied to digital parser.
        :param 'DataStoreDocumentProcessingConfigParsingConfigOverrideOcrParsingConfigArgs' ocr_parsing_config: Configurations applied to OCR parser. Currently it only applies to PDFs.
               Structure is documented below.
        """
        pulumi.set(__self__, "file_type", file_type)
        if digital_parsing_config is not None:
            pulumi.set(__self__, "digital_parsing_config", digital_parsing_config)
        if ocr_parsing_config is not None:
            pulumi.set(__self__, "ocr_parsing_config", ocr_parsing_config)

    @property
    @pulumi.getter(name="fileType")
    def file_type(self) -> str:
        """
        The identifier for this object. Format specified above.
        """
        return pulumi.get(self, "file_type")

    @property
    @pulumi.getter(name="digitalParsingConfig")
    def digital_parsing_config(self) -> Optional['outputs.DataStoreDocumentProcessingConfigParsingConfigOverrideDigitalParsingConfig']:
        """
        Configurations applied to digital parser.
        """
        return pulumi.get(self, "digital_parsing_config")

    @property
    @pulumi.getter(name="ocrParsingConfig")
    def ocr_parsing_config(self) -> Optional['outputs.DataStoreDocumentProcessingConfigParsingConfigOverrideOcrParsingConfig']:
        """
        Configurations applied to OCR parser. Currently it only applies to PDFs.
        Structure is documented below.
        """
        return pulumi.get(self, "ocr_parsing_config")


@pulumi.output_type
class DataStoreDocumentProcessingConfigParsingConfigOverrideDigitalParsingConfig(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class DataStoreDocumentProcessingConfigParsingConfigOverrideOcrParsingConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "useNativeText":
            suggest = "use_native_text"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataStoreDocumentProcessingConfigParsingConfigOverrideOcrParsingConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataStoreDocumentProcessingConfigParsingConfigOverrideOcrParsingConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataStoreDocumentProcessingConfigParsingConfigOverrideOcrParsingConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 use_native_text: Optional[bool] = None):
        """
        :param bool use_native_text: If true, will use native text instead of OCR text on pages containing native text.
        """
        if use_native_text is not None:
            pulumi.set(__self__, "use_native_text", use_native_text)

    @property
    @pulumi.getter(name="useNativeText")
    def use_native_text(self) -> Optional[bool]:
        """
        If true, will use native text instead of OCR text on pages containing native text.
        """
        return pulumi.get(self, "use_native_text")


@pulumi.output_type
class SearchEngineCommonConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "companyName":
            suggest = "company_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SearchEngineCommonConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SearchEngineCommonConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SearchEngineCommonConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 company_name: Optional[str] = None):
        """
        :param str company_name: The name of the company, business or entity that is associated with the engine. Setting this may help improve LLM related features.cd
        """
        if company_name is not None:
            pulumi.set(__self__, "company_name", company_name)

    @property
    @pulumi.getter(name="companyName")
    def company_name(self) -> Optional[str]:
        """
        The name of the company, business or entity that is associated with the engine. Setting this may help improve LLM related features.cd
        """
        return pulumi.get(self, "company_name")


@pulumi.output_type
class SearchEngineSearchEngineConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "searchAddOns":
            suggest = "search_add_ons"
        elif key == "searchTier":
            suggest = "search_tier"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SearchEngineSearchEngineConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SearchEngineSearchEngineConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SearchEngineSearchEngineConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 search_add_ons: Optional[Sequence[str]] = None,
                 search_tier: Optional[str] = None):
        """
        :param Sequence[str] search_add_ons: The add-on that this search engine enables.
               Each value may be one of: `SEARCH_ADD_ON_LLM`.
               
               - - -
        :param str search_tier: The search feature tier of this engine. Defaults to SearchTier.SEARCH_TIER_STANDARD if not specified.
               Default value is `SEARCH_TIER_STANDARD`.
               Possible values are: `SEARCH_TIER_STANDARD`, `SEARCH_TIER_ENTERPRISE`.
        """
        if search_add_ons is not None:
            pulumi.set(__self__, "search_add_ons", search_add_ons)
        if search_tier is not None:
            pulumi.set(__self__, "search_tier", search_tier)

    @property
    @pulumi.getter(name="searchAddOns")
    def search_add_ons(self) -> Optional[Sequence[str]]:
        """
        The add-on that this search engine enables.
        Each value may be one of: `SEARCH_ADD_ON_LLM`.

        - - -
        """
        return pulumi.get(self, "search_add_ons")

    @property
    @pulumi.getter(name="searchTier")
    def search_tier(self) -> Optional[str]:
        """
        The search feature tier of this engine. Defaults to SearchTier.SEARCH_TIER_STANDARD if not specified.
        Default value is `SEARCH_TIER_STANDARD`.
        Possible values are: `SEARCH_TIER_STANDARD`, `SEARCH_TIER_ENTERPRISE`.
        """
        return pulumi.get(self, "search_tier")


