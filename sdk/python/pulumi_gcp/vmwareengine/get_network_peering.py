# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetNetworkPeeringResult',
    'AwaitableGetNetworkPeeringResult',
    'get_network_peering',
    'get_network_peering_output',
]

@pulumi.output_type
class GetNetworkPeeringResult:
    """
    A collection of values returned by getNetworkPeering.
    """
    def __init__(__self__, create_time=None, description=None, export_custom_routes=None, export_custom_routes_with_public_ip=None, id=None, import_custom_routes=None, import_custom_routes_with_public_ip=None, name=None, peer_network=None, peer_network_type=None, project=None, state=None, state_details=None, uid=None, update_time=None, vmware_engine_network=None, vmware_engine_network_canonical=None):
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if export_custom_routes and not isinstance(export_custom_routes, bool):
            raise TypeError("Expected argument 'export_custom_routes' to be a bool")
        pulumi.set(__self__, "export_custom_routes", export_custom_routes)
        if export_custom_routes_with_public_ip and not isinstance(export_custom_routes_with_public_ip, bool):
            raise TypeError("Expected argument 'export_custom_routes_with_public_ip' to be a bool")
        pulumi.set(__self__, "export_custom_routes_with_public_ip", export_custom_routes_with_public_ip)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if import_custom_routes and not isinstance(import_custom_routes, bool):
            raise TypeError("Expected argument 'import_custom_routes' to be a bool")
        pulumi.set(__self__, "import_custom_routes", import_custom_routes)
        if import_custom_routes_with_public_ip and not isinstance(import_custom_routes_with_public_ip, bool):
            raise TypeError("Expected argument 'import_custom_routes_with_public_ip' to be a bool")
        pulumi.set(__self__, "import_custom_routes_with_public_ip", import_custom_routes_with_public_ip)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if peer_network and not isinstance(peer_network, str):
            raise TypeError("Expected argument 'peer_network' to be a str")
        pulumi.set(__self__, "peer_network", peer_network)
        if peer_network_type and not isinstance(peer_network_type, str):
            raise TypeError("Expected argument 'peer_network_type' to be a str")
        pulumi.set(__self__, "peer_network_type", peer_network_type)
        if project and not isinstance(project, str):
            raise TypeError("Expected argument 'project' to be a str")
        pulumi.set(__self__, "project", project)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if state_details and not isinstance(state_details, str):
            raise TypeError("Expected argument 'state_details' to be a str")
        pulumi.set(__self__, "state_details", state_details)
        if uid and not isinstance(uid, str):
            raise TypeError("Expected argument 'uid' to be a str")
        pulumi.set(__self__, "uid", uid)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)
        if vmware_engine_network and not isinstance(vmware_engine_network, str):
            raise TypeError("Expected argument 'vmware_engine_network' to be a str")
        pulumi.set(__self__, "vmware_engine_network", vmware_engine_network)
        if vmware_engine_network_canonical and not isinstance(vmware_engine_network_canonical, str):
            raise TypeError("Expected argument 'vmware_engine_network_canonical' to be a str")
        pulumi.set(__self__, "vmware_engine_network_canonical", vmware_engine_network_canonical)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="exportCustomRoutes")
    def export_custom_routes(self) -> bool:
        return pulumi.get(self, "export_custom_routes")

    @property
    @pulumi.getter(name="exportCustomRoutesWithPublicIp")
    def export_custom_routes_with_public_ip(self) -> bool:
        return pulumi.get(self, "export_custom_routes_with_public_ip")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="importCustomRoutes")
    def import_custom_routes(self) -> bool:
        return pulumi.get(self, "import_custom_routes")

    @property
    @pulumi.getter(name="importCustomRoutesWithPublicIp")
    def import_custom_routes_with_public_ip(self) -> bool:
        return pulumi.get(self, "import_custom_routes_with_public_ip")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="peerNetwork")
    def peer_network(self) -> str:
        return pulumi.get(self, "peer_network")

    @property
    @pulumi.getter(name="peerNetworkType")
    def peer_network_type(self) -> str:
        return pulumi.get(self, "peer_network_type")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="stateDetails")
    def state_details(self) -> str:
        return pulumi.get(self, "state_details")

    @property
    @pulumi.getter
    def uid(self) -> str:
        return pulumi.get(self, "uid")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="vmwareEngineNetwork")
    def vmware_engine_network(self) -> str:
        return pulumi.get(self, "vmware_engine_network")

    @property
    @pulumi.getter(name="vmwareEngineNetworkCanonical")
    def vmware_engine_network_canonical(self) -> str:
        return pulumi.get(self, "vmware_engine_network_canonical")


class AwaitableGetNetworkPeeringResult(GetNetworkPeeringResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNetworkPeeringResult(
            create_time=self.create_time,
            description=self.description,
            export_custom_routes=self.export_custom_routes,
            export_custom_routes_with_public_ip=self.export_custom_routes_with_public_ip,
            id=self.id,
            import_custom_routes=self.import_custom_routes,
            import_custom_routes_with_public_ip=self.import_custom_routes_with_public_ip,
            name=self.name,
            peer_network=self.peer_network,
            peer_network_type=self.peer_network_type,
            project=self.project,
            state=self.state,
            state_details=self.state_details,
            uid=self.uid,
            update_time=self.update_time,
            vmware_engine_network=self.vmware_engine_network,
            vmware_engine_network_canonical=self.vmware_engine_network_canonical)


def get_network_peering(name: Optional[str] = None,
                        project: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNetworkPeeringResult:
    """
    Use this data source to get details about a network peering resource.

    To get more information about network peering, see:
    * [API documentation](https://cloud.google.com/vmware-engine/docs/reference/rest/v1/projects.locations.networkPeerings)

    ## Example Usage

    ```python
    import pulumi
    import pulumi_gcp as gcp

    my_network_peering = gcp.vmwareengine.get_network_peering(name="my-network-peering")
    ```


    :param str name: Name of the resource.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['project'] = project
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('gcp:vmwareengine/getNetworkPeering:getNetworkPeering', __args__, opts=opts, typ=GetNetworkPeeringResult).value

    return AwaitableGetNetworkPeeringResult(
        create_time=pulumi.get(__ret__, 'create_time'),
        description=pulumi.get(__ret__, 'description'),
        export_custom_routes=pulumi.get(__ret__, 'export_custom_routes'),
        export_custom_routes_with_public_ip=pulumi.get(__ret__, 'export_custom_routes_with_public_ip'),
        id=pulumi.get(__ret__, 'id'),
        import_custom_routes=pulumi.get(__ret__, 'import_custom_routes'),
        import_custom_routes_with_public_ip=pulumi.get(__ret__, 'import_custom_routes_with_public_ip'),
        name=pulumi.get(__ret__, 'name'),
        peer_network=pulumi.get(__ret__, 'peer_network'),
        peer_network_type=pulumi.get(__ret__, 'peer_network_type'),
        project=pulumi.get(__ret__, 'project'),
        state=pulumi.get(__ret__, 'state'),
        state_details=pulumi.get(__ret__, 'state_details'),
        uid=pulumi.get(__ret__, 'uid'),
        update_time=pulumi.get(__ret__, 'update_time'),
        vmware_engine_network=pulumi.get(__ret__, 'vmware_engine_network'),
        vmware_engine_network_canonical=pulumi.get(__ret__, 'vmware_engine_network_canonical'))


@_utilities.lift_output_func(get_network_peering)
def get_network_peering_output(name: Optional[pulumi.Input[str]] = None,
                               project: Optional[pulumi.Input[Optional[str]]] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetNetworkPeeringResult]:
    """
    Use this data source to get details about a network peering resource.

    To get more information about network peering, see:
    * [API documentation](https://cloud.google.com/vmware-engine/docs/reference/rest/v1/projects.locations.networkPeerings)

    ## Example Usage

    ```python
    import pulumi
    import pulumi_gcp as gcp

    my_network_peering = gcp.vmwareengine.get_network_peering(name="my-network-peering")
    ```


    :param str name: Name of the resource.
    """
    ...
