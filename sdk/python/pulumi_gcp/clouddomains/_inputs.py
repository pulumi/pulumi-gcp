# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'RegistrationContactSettingsArgs',
    'RegistrationContactSettingsAdminContactArgs',
    'RegistrationContactSettingsAdminContactPostalAddressArgs',
    'RegistrationContactSettingsRegistrantContactArgs',
    'RegistrationContactSettingsRegistrantContactPostalAddressArgs',
    'RegistrationContactSettingsTechnicalContactArgs',
    'RegistrationContactSettingsTechnicalContactPostalAddressArgs',
    'RegistrationDnsSettingsArgs',
    'RegistrationDnsSettingsCustomDnsArgs',
    'RegistrationDnsSettingsCustomDnsDsRecordArgs',
    'RegistrationDnsSettingsGlueRecordArgs',
    'RegistrationManagementSettingsArgs',
    'RegistrationYearlyPriceArgs',
]

@pulumi.input_type
class RegistrationContactSettingsArgs:
    def __init__(__self__, *,
                 admin_contact: pulumi.Input['RegistrationContactSettingsAdminContactArgs'],
                 privacy: pulumi.Input[str],
                 registrant_contact: pulumi.Input['RegistrationContactSettingsRegistrantContactArgs'],
                 technical_contact: pulumi.Input['RegistrationContactSettingsTechnicalContactArgs']):
        """
        :param pulumi.Input['RegistrationContactSettingsAdminContactArgs'] admin_contact: Caution: Anyone with access to this email address, phone number, and/or postal address can take control of the domain.
               Warning: For new Registrations, the registrant receives an email confirmation that they must complete within 15 days to
               avoid domain suspension.
               Structure is documented below.
        :param pulumi.Input[str] privacy: Required. Privacy setting for the contacts associated with the Registration.
               Values are PUBLIC_CONTACT_DATA, PRIVATE_CONTACT_DATA, and REDACTED_CONTACT_DATA
        :param pulumi.Input['RegistrationContactSettingsRegistrantContactArgs'] registrant_contact: Caution: Anyone with access to this email address, phone number, and/or postal address can take control of the domain.
               Warning: For new Registrations, the registrant receives an email confirmation that they must complete within 15 days to
               avoid domain suspension.
               Structure is documented below.
        :param pulumi.Input['RegistrationContactSettingsTechnicalContactArgs'] technical_contact: Caution: Anyone with access to this email address, phone number, and/or postal address can take control of the domain.
               Warning: For new Registrations, the registrant receives an email confirmation that they must complete within 15 days to
               avoid domain suspension.
               Structure is documented below.
        """
        pulumi.set(__self__, "admin_contact", admin_contact)
        pulumi.set(__self__, "privacy", privacy)
        pulumi.set(__self__, "registrant_contact", registrant_contact)
        pulumi.set(__self__, "technical_contact", technical_contact)

    @property
    @pulumi.getter(name="adminContact")
    def admin_contact(self) -> pulumi.Input['RegistrationContactSettingsAdminContactArgs']:
        """
        Caution: Anyone with access to this email address, phone number, and/or postal address can take control of the domain.
        Warning: For new Registrations, the registrant receives an email confirmation that they must complete within 15 days to
        avoid domain suspension.
        Structure is documented below.
        """
        return pulumi.get(self, "admin_contact")

    @admin_contact.setter
    def admin_contact(self, value: pulumi.Input['RegistrationContactSettingsAdminContactArgs']):
        pulumi.set(self, "admin_contact", value)

    @property
    @pulumi.getter
    def privacy(self) -> pulumi.Input[str]:
        """
        Required. Privacy setting for the contacts associated with the Registration.
        Values are PUBLIC_CONTACT_DATA, PRIVATE_CONTACT_DATA, and REDACTED_CONTACT_DATA
        """
        return pulumi.get(self, "privacy")

    @privacy.setter
    def privacy(self, value: pulumi.Input[str]):
        pulumi.set(self, "privacy", value)

    @property
    @pulumi.getter(name="registrantContact")
    def registrant_contact(self) -> pulumi.Input['RegistrationContactSettingsRegistrantContactArgs']:
        """
        Caution: Anyone with access to this email address, phone number, and/or postal address can take control of the domain.
        Warning: For new Registrations, the registrant receives an email confirmation that they must complete within 15 days to
        avoid domain suspension.
        Structure is documented below.
        """
        return pulumi.get(self, "registrant_contact")

    @registrant_contact.setter
    def registrant_contact(self, value: pulumi.Input['RegistrationContactSettingsRegistrantContactArgs']):
        pulumi.set(self, "registrant_contact", value)

    @property
    @pulumi.getter(name="technicalContact")
    def technical_contact(self) -> pulumi.Input['RegistrationContactSettingsTechnicalContactArgs']:
        """
        Caution: Anyone with access to this email address, phone number, and/or postal address can take control of the domain.
        Warning: For new Registrations, the registrant receives an email confirmation that they must complete within 15 days to
        avoid domain suspension.
        Structure is documented below.
        """
        return pulumi.get(self, "technical_contact")

    @technical_contact.setter
    def technical_contact(self, value: pulumi.Input['RegistrationContactSettingsTechnicalContactArgs']):
        pulumi.set(self, "technical_contact", value)


@pulumi.input_type
class RegistrationContactSettingsAdminContactArgs:
    def __init__(__self__, *,
                 email: pulumi.Input[str],
                 phone_number: pulumi.Input[str],
                 postal_address: pulumi.Input['RegistrationContactSettingsAdminContactPostalAddressArgs'],
                 fax_number: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] email: Required. Email address of the contact.
        :param pulumi.Input[str] phone_number: Required. Phone number of the contact in international format. For example, "+1-800-555-0123".
        :param pulumi.Input['RegistrationContactSettingsAdminContactPostalAddressArgs'] postal_address: Required. Postal address of the contact.
               Structure is documented below.
        :param pulumi.Input[str] fax_number: Fax number of the contact in international format. For example, "+1-800-555-0123".
        """
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "phone_number", phone_number)
        pulumi.set(__self__, "postal_address", postal_address)
        if fax_number is not None:
            pulumi.set(__self__, "fax_number", fax_number)

    @property
    @pulumi.getter
    def email(self) -> pulumi.Input[str]:
        """
        Required. Email address of the contact.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: pulumi.Input[str]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="phoneNumber")
    def phone_number(self) -> pulumi.Input[str]:
        """
        Required. Phone number of the contact in international format. For example, "+1-800-555-0123".
        """
        return pulumi.get(self, "phone_number")

    @phone_number.setter
    def phone_number(self, value: pulumi.Input[str]):
        pulumi.set(self, "phone_number", value)

    @property
    @pulumi.getter(name="postalAddress")
    def postal_address(self) -> pulumi.Input['RegistrationContactSettingsAdminContactPostalAddressArgs']:
        """
        Required. Postal address of the contact.
        Structure is documented below.
        """
        return pulumi.get(self, "postal_address")

    @postal_address.setter
    def postal_address(self, value: pulumi.Input['RegistrationContactSettingsAdminContactPostalAddressArgs']):
        pulumi.set(self, "postal_address", value)

    @property
    @pulumi.getter(name="faxNumber")
    def fax_number(self) -> Optional[pulumi.Input[str]]:
        """
        Fax number of the contact in international format. For example, "+1-800-555-0123".
        """
        return pulumi.get(self, "fax_number")

    @fax_number.setter
    def fax_number(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fax_number", value)


@pulumi.input_type
class RegistrationContactSettingsAdminContactPostalAddressArgs:
    def __init__(__self__, *,
                 region_code: pulumi.Input[str],
                 address_lines: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 administrative_area: Optional[pulumi.Input[str]] = None,
                 locality: Optional[pulumi.Input[str]] = None,
                 organization: Optional[pulumi.Input[str]] = None,
                 postal_code: Optional[pulumi.Input[str]] = None,
                 recipients: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] region_code: Required. CLDR region code of the country/region of the address. This is never inferred and it is up to the user to
               ensure the value is correct. See https://cldr.unicode.org/ and
               https://www.unicode.org/cldr/charts/30/supplemental/territory_information.html for details. Example: "CH" for Switzerland.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] address_lines: Unstructured address lines describing the lower levels of an address.
               Because values in addressLines do not have type information and may sometimes contain multiple values in a single
               field (e.g. "Austin, TX"), it is important that the line order is clear. The order of address lines should be
               "envelope order" for the country/region of the address. In places where this can vary (e.g. Japan), address_language
               is used to make it explicit (e.g. "ja" for large-to-small ordering and "ja-Latn" or "en" for small-to-large). This way,
               the most specific line of an address can be selected based on the language.
        :param pulumi.Input[str] administrative_area: Highest administrative subdivision which is used for postal addresses of a country or region. For example, this can be a state,
               a province, an oblast, or a prefecture. Specifically, for Spain this is the province and not the autonomous community
               (e.g. "Barcelona" and not "Catalonia"). Many countries don't use an administrative area in postal addresses. E.g. in Switzerland
               this should be left unpopulated.
        :param pulumi.Input[str] locality: Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world
               where localities are not well defined or do not fit into this structure well, leave locality empty and use addressLines.
        :param pulumi.Input[str] organization: The name of the organization at the address.
        :param pulumi.Input[str] postal_code: Postal code of the address. Not all countries use or require postal codes to be present, but where they are used,
               they may trigger additional validation with other parts of the address (e.g. state/zip validation in the U.S.A.).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] recipients: The recipient at the address. This field may, under certain circumstances, contain multiline information. For example,
               it might contain "care of" information.
               
               - - -
        """
        pulumi.set(__self__, "region_code", region_code)
        if address_lines is not None:
            pulumi.set(__self__, "address_lines", address_lines)
        if administrative_area is not None:
            pulumi.set(__self__, "administrative_area", administrative_area)
        if locality is not None:
            pulumi.set(__self__, "locality", locality)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)
        if postal_code is not None:
            pulumi.set(__self__, "postal_code", postal_code)
        if recipients is not None:
            pulumi.set(__self__, "recipients", recipients)

    @property
    @pulumi.getter(name="regionCode")
    def region_code(self) -> pulumi.Input[str]:
        """
        Required. CLDR region code of the country/region of the address. This is never inferred and it is up to the user to
        ensure the value is correct. See https://cldr.unicode.org/ and
        https://www.unicode.org/cldr/charts/30/supplemental/territory_information.html for details. Example: "CH" for Switzerland.
        """
        return pulumi.get(self, "region_code")

    @region_code.setter
    def region_code(self, value: pulumi.Input[str]):
        pulumi.set(self, "region_code", value)

    @property
    @pulumi.getter(name="addressLines")
    def address_lines(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Unstructured address lines describing the lower levels of an address.
        Because values in addressLines do not have type information and may sometimes contain multiple values in a single
        field (e.g. "Austin, TX"), it is important that the line order is clear. The order of address lines should be
        "envelope order" for the country/region of the address. In places where this can vary (e.g. Japan), address_language
        is used to make it explicit (e.g. "ja" for large-to-small ordering and "ja-Latn" or "en" for small-to-large). This way,
        the most specific line of an address can be selected based on the language.
        """
        return pulumi.get(self, "address_lines")

    @address_lines.setter
    def address_lines(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "address_lines", value)

    @property
    @pulumi.getter(name="administrativeArea")
    def administrative_area(self) -> Optional[pulumi.Input[str]]:
        """
        Highest administrative subdivision which is used for postal addresses of a country or region. For example, this can be a state,
        a province, an oblast, or a prefecture. Specifically, for Spain this is the province and not the autonomous community
        (e.g. "Barcelona" and not "Catalonia"). Many countries don't use an administrative area in postal addresses. E.g. in Switzerland
        this should be left unpopulated.
        """
        return pulumi.get(self, "administrative_area")

    @administrative_area.setter
    def administrative_area(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "administrative_area", value)

    @property
    @pulumi.getter
    def locality(self) -> Optional[pulumi.Input[str]]:
        """
        Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world
        where localities are not well defined or do not fit into this structure well, leave locality empty and use addressLines.
        """
        return pulumi.get(self, "locality")

    @locality.setter
    def locality(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "locality", value)

    @property
    @pulumi.getter
    def organization(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the organization at the address.
        """
        return pulumi.get(self, "organization")

    @organization.setter
    def organization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "organization", value)

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> Optional[pulumi.Input[str]]:
        """
        Postal code of the address. Not all countries use or require postal codes to be present, but where they are used,
        they may trigger additional validation with other parts of the address (e.g. state/zip validation in the U.S.A.).
        """
        return pulumi.get(self, "postal_code")

    @postal_code.setter
    def postal_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "postal_code", value)

    @property
    @pulumi.getter
    def recipients(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The recipient at the address. This field may, under certain circumstances, contain multiline information. For example,
        it might contain "care of" information.

        - - -
        """
        return pulumi.get(self, "recipients")

    @recipients.setter
    def recipients(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "recipients", value)


@pulumi.input_type
class RegistrationContactSettingsRegistrantContactArgs:
    def __init__(__self__, *,
                 email: pulumi.Input[str],
                 phone_number: pulumi.Input[str],
                 postal_address: pulumi.Input['RegistrationContactSettingsRegistrantContactPostalAddressArgs'],
                 fax_number: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] email: Required. Email address of the contact.
        :param pulumi.Input[str] phone_number: Required. Phone number of the contact in international format. For example, "+1-800-555-0123".
        :param pulumi.Input['RegistrationContactSettingsRegistrantContactPostalAddressArgs'] postal_address: Required. Postal address of the contact.
               Structure is documented below.
        :param pulumi.Input[str] fax_number: Fax number of the contact in international format. For example, "+1-800-555-0123".
        """
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "phone_number", phone_number)
        pulumi.set(__self__, "postal_address", postal_address)
        if fax_number is not None:
            pulumi.set(__self__, "fax_number", fax_number)

    @property
    @pulumi.getter
    def email(self) -> pulumi.Input[str]:
        """
        Required. Email address of the contact.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: pulumi.Input[str]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="phoneNumber")
    def phone_number(self) -> pulumi.Input[str]:
        """
        Required. Phone number of the contact in international format. For example, "+1-800-555-0123".
        """
        return pulumi.get(self, "phone_number")

    @phone_number.setter
    def phone_number(self, value: pulumi.Input[str]):
        pulumi.set(self, "phone_number", value)

    @property
    @pulumi.getter(name="postalAddress")
    def postal_address(self) -> pulumi.Input['RegistrationContactSettingsRegistrantContactPostalAddressArgs']:
        """
        Required. Postal address of the contact.
        Structure is documented below.
        """
        return pulumi.get(self, "postal_address")

    @postal_address.setter
    def postal_address(self, value: pulumi.Input['RegistrationContactSettingsRegistrantContactPostalAddressArgs']):
        pulumi.set(self, "postal_address", value)

    @property
    @pulumi.getter(name="faxNumber")
    def fax_number(self) -> Optional[pulumi.Input[str]]:
        """
        Fax number of the contact in international format. For example, "+1-800-555-0123".
        """
        return pulumi.get(self, "fax_number")

    @fax_number.setter
    def fax_number(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fax_number", value)


@pulumi.input_type
class RegistrationContactSettingsRegistrantContactPostalAddressArgs:
    def __init__(__self__, *,
                 region_code: pulumi.Input[str],
                 address_lines: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 administrative_area: Optional[pulumi.Input[str]] = None,
                 locality: Optional[pulumi.Input[str]] = None,
                 organization: Optional[pulumi.Input[str]] = None,
                 postal_code: Optional[pulumi.Input[str]] = None,
                 recipients: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] region_code: Required. CLDR region code of the country/region of the address. This is never inferred and it is up to the user to
               ensure the value is correct. See https://cldr.unicode.org/ and
               https://www.unicode.org/cldr/charts/30/supplemental/territory_information.html for details. Example: "CH" for Switzerland.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] address_lines: Unstructured address lines describing the lower levels of an address.
               Because values in addressLines do not have type information and may sometimes contain multiple values in a single
               field (e.g. "Austin, TX"), it is important that the line order is clear. The order of address lines should be
               "envelope order" for the country/region of the address. In places where this can vary (e.g. Japan), address_language
               is used to make it explicit (e.g. "ja" for large-to-small ordering and "ja-Latn" or "en" for small-to-large). This way,
               the most specific line of an address can be selected based on the language.
        :param pulumi.Input[str] administrative_area: Highest administrative subdivision which is used for postal addresses of a country or region. For example, this can be a state,
               a province, an oblast, or a prefecture. Specifically, for Spain this is the province and not the autonomous community
               (e.g. "Barcelona" and not "Catalonia"). Many countries don't use an administrative area in postal addresses. E.g. in Switzerland
               this should be left unpopulated.
        :param pulumi.Input[str] locality: Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world
               where localities are not well defined or do not fit into this structure well, leave locality empty and use addressLines.
        :param pulumi.Input[str] organization: The name of the organization at the address.
        :param pulumi.Input[str] postal_code: Postal code of the address. Not all countries use or require postal codes to be present, but where they are used,
               they may trigger additional validation with other parts of the address (e.g. state/zip validation in the U.S.A.).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] recipients: The recipient at the address. This field may, under certain circumstances, contain multiline information. For example,
               it might contain "care of" information.
               
               - - -
        """
        pulumi.set(__self__, "region_code", region_code)
        if address_lines is not None:
            pulumi.set(__self__, "address_lines", address_lines)
        if administrative_area is not None:
            pulumi.set(__self__, "administrative_area", administrative_area)
        if locality is not None:
            pulumi.set(__self__, "locality", locality)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)
        if postal_code is not None:
            pulumi.set(__self__, "postal_code", postal_code)
        if recipients is not None:
            pulumi.set(__self__, "recipients", recipients)

    @property
    @pulumi.getter(name="regionCode")
    def region_code(self) -> pulumi.Input[str]:
        """
        Required. CLDR region code of the country/region of the address. This is never inferred and it is up to the user to
        ensure the value is correct. See https://cldr.unicode.org/ and
        https://www.unicode.org/cldr/charts/30/supplemental/territory_information.html for details. Example: "CH" for Switzerland.
        """
        return pulumi.get(self, "region_code")

    @region_code.setter
    def region_code(self, value: pulumi.Input[str]):
        pulumi.set(self, "region_code", value)

    @property
    @pulumi.getter(name="addressLines")
    def address_lines(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Unstructured address lines describing the lower levels of an address.
        Because values in addressLines do not have type information and may sometimes contain multiple values in a single
        field (e.g. "Austin, TX"), it is important that the line order is clear. The order of address lines should be
        "envelope order" for the country/region of the address. In places where this can vary (e.g. Japan), address_language
        is used to make it explicit (e.g. "ja" for large-to-small ordering and "ja-Latn" or "en" for small-to-large). This way,
        the most specific line of an address can be selected based on the language.
        """
        return pulumi.get(self, "address_lines")

    @address_lines.setter
    def address_lines(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "address_lines", value)

    @property
    @pulumi.getter(name="administrativeArea")
    def administrative_area(self) -> Optional[pulumi.Input[str]]:
        """
        Highest administrative subdivision which is used for postal addresses of a country or region. For example, this can be a state,
        a province, an oblast, or a prefecture. Specifically, for Spain this is the province and not the autonomous community
        (e.g. "Barcelona" and not "Catalonia"). Many countries don't use an administrative area in postal addresses. E.g. in Switzerland
        this should be left unpopulated.
        """
        return pulumi.get(self, "administrative_area")

    @administrative_area.setter
    def administrative_area(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "administrative_area", value)

    @property
    @pulumi.getter
    def locality(self) -> Optional[pulumi.Input[str]]:
        """
        Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world
        where localities are not well defined or do not fit into this structure well, leave locality empty and use addressLines.
        """
        return pulumi.get(self, "locality")

    @locality.setter
    def locality(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "locality", value)

    @property
    @pulumi.getter
    def organization(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the organization at the address.
        """
        return pulumi.get(self, "organization")

    @organization.setter
    def organization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "organization", value)

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> Optional[pulumi.Input[str]]:
        """
        Postal code of the address. Not all countries use or require postal codes to be present, but where they are used,
        they may trigger additional validation with other parts of the address (e.g. state/zip validation in the U.S.A.).
        """
        return pulumi.get(self, "postal_code")

    @postal_code.setter
    def postal_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "postal_code", value)

    @property
    @pulumi.getter
    def recipients(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The recipient at the address. This field may, under certain circumstances, contain multiline information. For example,
        it might contain "care of" information.

        - - -
        """
        return pulumi.get(self, "recipients")

    @recipients.setter
    def recipients(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "recipients", value)


@pulumi.input_type
class RegistrationContactSettingsTechnicalContactArgs:
    def __init__(__self__, *,
                 email: pulumi.Input[str],
                 phone_number: pulumi.Input[str],
                 postal_address: pulumi.Input['RegistrationContactSettingsTechnicalContactPostalAddressArgs'],
                 fax_number: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] email: Required. Email address of the contact.
        :param pulumi.Input[str] phone_number: Required. Phone number of the contact in international format. For example, "+1-800-555-0123".
        :param pulumi.Input['RegistrationContactSettingsTechnicalContactPostalAddressArgs'] postal_address: Required. Postal address of the contact.
               Structure is documented below.
        :param pulumi.Input[str] fax_number: Fax number of the contact in international format. For example, "+1-800-555-0123".
        """
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "phone_number", phone_number)
        pulumi.set(__self__, "postal_address", postal_address)
        if fax_number is not None:
            pulumi.set(__self__, "fax_number", fax_number)

    @property
    @pulumi.getter
    def email(self) -> pulumi.Input[str]:
        """
        Required. Email address of the contact.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: pulumi.Input[str]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="phoneNumber")
    def phone_number(self) -> pulumi.Input[str]:
        """
        Required. Phone number of the contact in international format. For example, "+1-800-555-0123".
        """
        return pulumi.get(self, "phone_number")

    @phone_number.setter
    def phone_number(self, value: pulumi.Input[str]):
        pulumi.set(self, "phone_number", value)

    @property
    @pulumi.getter(name="postalAddress")
    def postal_address(self) -> pulumi.Input['RegistrationContactSettingsTechnicalContactPostalAddressArgs']:
        """
        Required. Postal address of the contact.
        Structure is documented below.
        """
        return pulumi.get(self, "postal_address")

    @postal_address.setter
    def postal_address(self, value: pulumi.Input['RegistrationContactSettingsTechnicalContactPostalAddressArgs']):
        pulumi.set(self, "postal_address", value)

    @property
    @pulumi.getter(name="faxNumber")
    def fax_number(self) -> Optional[pulumi.Input[str]]:
        """
        Fax number of the contact in international format. For example, "+1-800-555-0123".
        """
        return pulumi.get(self, "fax_number")

    @fax_number.setter
    def fax_number(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fax_number", value)


@pulumi.input_type
class RegistrationContactSettingsTechnicalContactPostalAddressArgs:
    def __init__(__self__, *,
                 region_code: pulumi.Input[str],
                 address_lines: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 administrative_area: Optional[pulumi.Input[str]] = None,
                 locality: Optional[pulumi.Input[str]] = None,
                 organization: Optional[pulumi.Input[str]] = None,
                 postal_code: Optional[pulumi.Input[str]] = None,
                 recipients: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] region_code: Required. CLDR region code of the country/region of the address. This is never inferred and it is up to the user to
               ensure the value is correct. See https://cldr.unicode.org/ and
               https://www.unicode.org/cldr/charts/30/supplemental/territory_information.html for details. Example: "CH" for Switzerland.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] address_lines: Unstructured address lines describing the lower levels of an address.
               Because values in addressLines do not have type information and may sometimes contain multiple values in a single
               field (e.g. "Austin, TX"), it is important that the line order is clear. The order of address lines should be
               "envelope order" for the country/region of the address. In places where this can vary (e.g. Japan), address_language
               is used to make it explicit (e.g. "ja" for large-to-small ordering and "ja-Latn" or "en" for small-to-large). This way,
               the most specific line of an address can be selected based on the language.
        :param pulumi.Input[str] administrative_area: Highest administrative subdivision which is used for postal addresses of a country or region. For example, this can be a state,
               a province, an oblast, or a prefecture. Specifically, for Spain this is the province and not the autonomous community
               (e.g. "Barcelona" and not "Catalonia"). Many countries don't use an administrative area in postal addresses. E.g. in Switzerland
               this should be left unpopulated.
        :param pulumi.Input[str] locality: Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world
               where localities are not well defined or do not fit into this structure well, leave locality empty and use addressLines.
        :param pulumi.Input[str] organization: The name of the organization at the address.
        :param pulumi.Input[str] postal_code: Postal code of the address. Not all countries use or require postal codes to be present, but where they are used,
               they may trigger additional validation with other parts of the address (e.g. state/zip validation in the U.S.A.).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] recipients: The recipient at the address. This field may, under certain circumstances, contain multiline information. For example,
               it might contain "care of" information.
               
               - - -
        """
        pulumi.set(__self__, "region_code", region_code)
        if address_lines is not None:
            pulumi.set(__self__, "address_lines", address_lines)
        if administrative_area is not None:
            pulumi.set(__self__, "administrative_area", administrative_area)
        if locality is not None:
            pulumi.set(__self__, "locality", locality)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)
        if postal_code is not None:
            pulumi.set(__self__, "postal_code", postal_code)
        if recipients is not None:
            pulumi.set(__self__, "recipients", recipients)

    @property
    @pulumi.getter(name="regionCode")
    def region_code(self) -> pulumi.Input[str]:
        """
        Required. CLDR region code of the country/region of the address. This is never inferred and it is up to the user to
        ensure the value is correct. See https://cldr.unicode.org/ and
        https://www.unicode.org/cldr/charts/30/supplemental/territory_information.html for details. Example: "CH" for Switzerland.
        """
        return pulumi.get(self, "region_code")

    @region_code.setter
    def region_code(self, value: pulumi.Input[str]):
        pulumi.set(self, "region_code", value)

    @property
    @pulumi.getter(name="addressLines")
    def address_lines(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Unstructured address lines describing the lower levels of an address.
        Because values in addressLines do not have type information and may sometimes contain multiple values in a single
        field (e.g. "Austin, TX"), it is important that the line order is clear. The order of address lines should be
        "envelope order" for the country/region of the address. In places where this can vary (e.g. Japan), address_language
        is used to make it explicit (e.g. "ja" for large-to-small ordering and "ja-Latn" or "en" for small-to-large). This way,
        the most specific line of an address can be selected based on the language.
        """
        return pulumi.get(self, "address_lines")

    @address_lines.setter
    def address_lines(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "address_lines", value)

    @property
    @pulumi.getter(name="administrativeArea")
    def administrative_area(self) -> Optional[pulumi.Input[str]]:
        """
        Highest administrative subdivision which is used for postal addresses of a country or region. For example, this can be a state,
        a province, an oblast, or a prefecture. Specifically, for Spain this is the province and not the autonomous community
        (e.g. "Barcelona" and not "Catalonia"). Many countries don't use an administrative area in postal addresses. E.g. in Switzerland
        this should be left unpopulated.
        """
        return pulumi.get(self, "administrative_area")

    @administrative_area.setter
    def administrative_area(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "administrative_area", value)

    @property
    @pulumi.getter
    def locality(self) -> Optional[pulumi.Input[str]]:
        """
        Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world
        where localities are not well defined or do not fit into this structure well, leave locality empty and use addressLines.
        """
        return pulumi.get(self, "locality")

    @locality.setter
    def locality(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "locality", value)

    @property
    @pulumi.getter
    def organization(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the organization at the address.
        """
        return pulumi.get(self, "organization")

    @organization.setter
    def organization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "organization", value)

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> Optional[pulumi.Input[str]]:
        """
        Postal code of the address. Not all countries use or require postal codes to be present, but where they are used,
        they may trigger additional validation with other parts of the address (e.g. state/zip validation in the U.S.A.).
        """
        return pulumi.get(self, "postal_code")

    @postal_code.setter
    def postal_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "postal_code", value)

    @property
    @pulumi.getter
    def recipients(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The recipient at the address. This field may, under certain circumstances, contain multiline information. For example,
        it might contain "care of" information.

        - - -
        """
        return pulumi.get(self, "recipients")

    @recipients.setter
    def recipients(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "recipients", value)


@pulumi.input_type
class RegistrationDnsSettingsArgs:
    def __init__(__self__, *,
                 custom_dns: Optional[pulumi.Input['RegistrationDnsSettingsCustomDnsArgs']] = None,
                 glue_records: Optional[pulumi.Input[Sequence[pulumi.Input['RegistrationDnsSettingsGlueRecordArgs']]]] = None):
        """
        :param pulumi.Input['RegistrationDnsSettingsCustomDnsArgs'] custom_dns: Configuration for an arbitrary DNS provider.
               Structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['RegistrationDnsSettingsGlueRecordArgs']]] glue_records: The list of glue records for this Registration. Commonly empty.
               Structure is documented below.
        """
        if custom_dns is not None:
            pulumi.set(__self__, "custom_dns", custom_dns)
        if glue_records is not None:
            pulumi.set(__self__, "glue_records", glue_records)

    @property
    @pulumi.getter(name="customDns")
    def custom_dns(self) -> Optional[pulumi.Input['RegistrationDnsSettingsCustomDnsArgs']]:
        """
        Configuration for an arbitrary DNS provider.
        Structure is documented below.
        """
        return pulumi.get(self, "custom_dns")

    @custom_dns.setter
    def custom_dns(self, value: Optional[pulumi.Input['RegistrationDnsSettingsCustomDnsArgs']]):
        pulumi.set(self, "custom_dns", value)

    @property
    @pulumi.getter(name="glueRecords")
    def glue_records(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RegistrationDnsSettingsGlueRecordArgs']]]]:
        """
        The list of glue records for this Registration. Commonly empty.
        Structure is documented below.
        """
        return pulumi.get(self, "glue_records")

    @glue_records.setter
    def glue_records(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RegistrationDnsSettingsGlueRecordArgs']]]]):
        pulumi.set(self, "glue_records", value)


@pulumi.input_type
class RegistrationDnsSettingsCustomDnsArgs:
    def __init__(__self__, *,
                 name_servers: pulumi.Input[Sequence[pulumi.Input[str]]],
                 ds_records: Optional[pulumi.Input[Sequence[pulumi.Input['RegistrationDnsSettingsCustomDnsDsRecordArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] name_servers: Required. A list of name servers that store the DNS zone for this domain. Each name server is a domain
               name, with Unicode domain names expressed in Punycode format.
        :param pulumi.Input[Sequence[pulumi.Input['RegistrationDnsSettingsCustomDnsDsRecordArgs']]] ds_records: The list of DS records for this domain, which are used to enable DNSSEC. The domain's DNS provider can provide
               the values to set here. If this field is empty, DNSSEC is disabled.
               Structure is documented below.
        """
        pulumi.set(__self__, "name_servers", name_servers)
        if ds_records is not None:
            pulumi.set(__self__, "ds_records", ds_records)

    @property
    @pulumi.getter(name="nameServers")
    def name_servers(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Required. A list of name servers that store the DNS zone for this domain. Each name server is a domain
        name, with Unicode domain names expressed in Punycode format.
        """
        return pulumi.get(self, "name_servers")

    @name_servers.setter
    def name_servers(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "name_servers", value)

    @property
    @pulumi.getter(name="dsRecords")
    def ds_records(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RegistrationDnsSettingsCustomDnsDsRecordArgs']]]]:
        """
        The list of DS records for this domain, which are used to enable DNSSEC. The domain's DNS provider can provide
        the values to set here. If this field is empty, DNSSEC is disabled.
        Structure is documented below.
        """
        return pulumi.get(self, "ds_records")

    @ds_records.setter
    def ds_records(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RegistrationDnsSettingsCustomDnsDsRecordArgs']]]]):
        pulumi.set(self, "ds_records", value)


@pulumi.input_type
class RegistrationDnsSettingsCustomDnsDsRecordArgs:
    def __init__(__self__, *,
                 algorithm: Optional[pulumi.Input[str]] = None,
                 digest: Optional[pulumi.Input[str]] = None,
                 digest_type: Optional[pulumi.Input[str]] = None,
                 key_tag: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] algorithm: The algorithm used to generate the referenced DNSKEY.
        :param pulumi.Input[str] digest: The digest generated from the referenced DNSKEY.
        :param pulumi.Input[str] digest_type: The hash function used to generate the digest of the referenced DNSKEY.
        :param pulumi.Input[int] key_tag: The key tag of the record. Must be set in range 0 -- 65535.
        """
        if algorithm is not None:
            pulumi.set(__self__, "algorithm", algorithm)
        if digest is not None:
            pulumi.set(__self__, "digest", digest)
        if digest_type is not None:
            pulumi.set(__self__, "digest_type", digest_type)
        if key_tag is not None:
            pulumi.set(__self__, "key_tag", key_tag)

    @property
    @pulumi.getter
    def algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        The algorithm used to generate the referenced DNSKEY.
        """
        return pulumi.get(self, "algorithm")

    @algorithm.setter
    def algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "algorithm", value)

    @property
    @pulumi.getter
    def digest(self) -> Optional[pulumi.Input[str]]:
        """
        The digest generated from the referenced DNSKEY.
        """
        return pulumi.get(self, "digest")

    @digest.setter
    def digest(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "digest", value)

    @property
    @pulumi.getter(name="digestType")
    def digest_type(self) -> Optional[pulumi.Input[str]]:
        """
        The hash function used to generate the digest of the referenced DNSKEY.
        """
        return pulumi.get(self, "digest_type")

    @digest_type.setter
    def digest_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "digest_type", value)

    @property
    @pulumi.getter(name="keyTag")
    def key_tag(self) -> Optional[pulumi.Input[int]]:
        """
        The key tag of the record. Must be set in range 0 -- 65535.
        """
        return pulumi.get(self, "key_tag")

    @key_tag.setter
    def key_tag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "key_tag", value)


@pulumi.input_type
class RegistrationDnsSettingsGlueRecordArgs:
    def __init__(__self__, *,
                 host_name: pulumi.Input[str],
                 ipv4_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ipv6_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] host_name: Required. Domain name of the host in Punycode format.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ipv4_addresses: List of IPv4 addresses corresponding to this host in the standard decimal format (e.g. 198.51.100.1).
               At least one of ipv4_address and ipv6_address must be set.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ipv6_addresses: List of IPv4 addresses corresponding to this host in the standard decimal format (e.g. 198.51.100.1).
               At least one of ipv4_address and ipv6_address must be set.
        """
        pulumi.set(__self__, "host_name", host_name)
        if ipv4_addresses is not None:
            pulumi.set(__self__, "ipv4_addresses", ipv4_addresses)
        if ipv6_addresses is not None:
            pulumi.set(__self__, "ipv6_addresses", ipv6_addresses)

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> pulumi.Input[str]:
        """
        Required. Domain name of the host in Punycode format.
        """
        return pulumi.get(self, "host_name")

    @host_name.setter
    def host_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "host_name", value)

    @property
    @pulumi.getter(name="ipv4Addresses")
    def ipv4_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of IPv4 addresses corresponding to this host in the standard decimal format (e.g. 198.51.100.1).
        At least one of ipv4_address and ipv6_address must be set.
        """
        return pulumi.get(self, "ipv4_addresses")

    @ipv4_addresses.setter
    def ipv4_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ipv4_addresses", value)

    @property
    @pulumi.getter(name="ipv6Addresses")
    def ipv6_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of IPv4 addresses corresponding to this host in the standard decimal format (e.g. 198.51.100.1).
        At least one of ipv4_address and ipv6_address must be set.
        """
        return pulumi.get(self, "ipv6_addresses")

    @ipv6_addresses.setter
    def ipv6_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ipv6_addresses", value)


@pulumi.input_type
class RegistrationManagementSettingsArgs:
    def __init__(__self__, *,
                 preferred_renewal_method: Optional[pulumi.Input[str]] = None,
                 renewal_method: Optional[pulumi.Input[str]] = None,
                 transfer_lock_state: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] preferred_renewal_method: The desired renewal method for this Registration. The actual renewalMethod is automatically updated to reflect this choice.
               If unset or equal to RENEWAL_METHOD_UNSPECIFIED, the actual renewalMethod is treated as if it were set to AUTOMATIC_RENEWAL.
               You cannot use RENEWAL_DISABLED during resource creation, and you can update the renewal status only when the Registration
               resource has state ACTIVE or SUSPENDED.
               When preferredRenewalMethod is set to AUTOMATIC_RENEWAL, the actual renewalMethod can be set to RENEWAL_DISABLED in case of
               problems with the billing account or reported domain abuse. In such cases, check the issues field on the Registration. After
               the problem is resolved, the renewalMethod is automatically updated to preferredRenewalMethod in a few hours.
        :param pulumi.Input[str] renewal_method: (Output)
               Output only. The actual renewal method for this Registration. When preferredRenewalMethod is set to AUTOMATIC_RENEWAL,
               the actual renewalMethod can be equal to RENEWAL_DISABLED—for example, when there are problems with the billing account
               or reported domain abuse. In such cases, check the issues field on the Registration. After the problem is resolved, the
               renewalMethod is automatically updated to preferredRenewalMethod in a few hours.
        :param pulumi.Input[str] transfer_lock_state: Controls whether the domain can be transferred to another registrar. Values are UNLOCKED or LOCKED.
        """
        if preferred_renewal_method is not None:
            pulumi.set(__self__, "preferred_renewal_method", preferred_renewal_method)
        if renewal_method is not None:
            pulumi.set(__self__, "renewal_method", renewal_method)
        if transfer_lock_state is not None:
            pulumi.set(__self__, "transfer_lock_state", transfer_lock_state)

    @property
    @pulumi.getter(name="preferredRenewalMethod")
    def preferred_renewal_method(self) -> Optional[pulumi.Input[str]]:
        """
        The desired renewal method for this Registration. The actual renewalMethod is automatically updated to reflect this choice.
        If unset or equal to RENEWAL_METHOD_UNSPECIFIED, the actual renewalMethod is treated as if it were set to AUTOMATIC_RENEWAL.
        You cannot use RENEWAL_DISABLED during resource creation, and you can update the renewal status only when the Registration
        resource has state ACTIVE or SUSPENDED.
        When preferredRenewalMethod is set to AUTOMATIC_RENEWAL, the actual renewalMethod can be set to RENEWAL_DISABLED in case of
        problems with the billing account or reported domain abuse. In such cases, check the issues field on the Registration. After
        the problem is resolved, the renewalMethod is automatically updated to preferredRenewalMethod in a few hours.
        """
        return pulumi.get(self, "preferred_renewal_method")

    @preferred_renewal_method.setter
    def preferred_renewal_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preferred_renewal_method", value)

    @property
    @pulumi.getter(name="renewalMethod")
    def renewal_method(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        Output only. The actual renewal method for this Registration. When preferredRenewalMethod is set to AUTOMATIC_RENEWAL,
        the actual renewalMethod can be equal to RENEWAL_DISABLED—for example, when there are problems with the billing account
        or reported domain abuse. In such cases, check the issues field on the Registration. After the problem is resolved, the
        renewalMethod is automatically updated to preferredRenewalMethod in a few hours.
        """
        return pulumi.get(self, "renewal_method")

    @renewal_method.setter
    def renewal_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "renewal_method", value)

    @property
    @pulumi.getter(name="transferLockState")
    def transfer_lock_state(self) -> Optional[pulumi.Input[str]]:
        """
        Controls whether the domain can be transferred to another registrar. Values are UNLOCKED or LOCKED.
        """
        return pulumi.get(self, "transfer_lock_state")

    @transfer_lock_state.setter
    def transfer_lock_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "transfer_lock_state", value)


@pulumi.input_type
class RegistrationYearlyPriceArgs:
    def __init__(__self__, *,
                 currency_code: Optional[pulumi.Input[str]] = None,
                 units: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] currency_code: The three-letter currency code defined in ISO 4217.
        :param pulumi.Input[str] units: The whole units of the amount. For example if currencyCode is "USD", then 1 unit is one US dollar.
        """
        if currency_code is not None:
            pulumi.set(__self__, "currency_code", currency_code)
        if units is not None:
            pulumi.set(__self__, "units", units)

    @property
    @pulumi.getter(name="currencyCode")
    def currency_code(self) -> Optional[pulumi.Input[str]]:
        """
        The three-letter currency code defined in ISO 4217.
        """
        return pulumi.get(self, "currency_code")

    @currency_code.setter
    def currency_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "currency_code", value)

    @property
    @pulumi.getter
    def units(self) -> Optional[pulumi.Input[str]]:
        """
        The whole units of the amount. For example if currencyCode is "USD", then 1 unit is one US dollar.
        """
        return pulumi.get(self, "units")

    @units.setter
    def units(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "units", value)


