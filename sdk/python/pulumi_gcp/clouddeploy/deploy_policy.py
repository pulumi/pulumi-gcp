# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DeployPolicyArgs', 'DeployPolicy']

@pulumi.input_type
class DeployPolicyArgs:
    def __init__(__self__, *,
                 location: pulumi.Input[builtins.str],
                 rules: pulumi.Input[Sequence[pulumi.Input['DeployPolicyRuleArgs']]],
                 selectors: pulumi.Input[Sequence[pulumi.Input['DeployPolicySelectorArgs']]],
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 project: Optional[pulumi.Input[builtins.str]] = None,
                 suspended: Optional[pulumi.Input[builtins.bool]] = None):
        """
        The set of arguments for constructing a DeployPolicy resource.
        :param pulumi.Input[builtins.str] location: The location for the resource
        :param pulumi.Input[Sequence[pulumi.Input['DeployPolicyRuleArgs']]] rules: Required. Rules to apply. At least one rule must be present.
               Structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['DeployPolicySelectorArgs']]] selectors: Required. Selected resources to which the policy will be applied. At least one selector is required. If one selector matches the resource the policy applies. For example, if there are two selectors and the action being attempted matches one of them, the policy will apply to that action.
               Structure is documented below.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] annotations: Optional. User annotations. These attributes can only be set and used by the user, and not by Cloud Deploy. Annotations
               must meet the following constraints: * Annotations are key/value pairs. * Valid annotation keys have two segments: an
               optional prefix and name, separated by a slash ('/'). * The name segment is required and must be 63 characters or less,
               beginning and ending with an alphanumeric character ('[a-z0-9A-Z]') with dashes ('-'), underscores ('_'), dots ('.'),
               and alphanumerics between. * The prefix is optional. If specified, the prefix must be a DNS subdomain: a series of DNS
               labels separated by dots('.'), not longer than 253 characters in total, followed by a slash ('/'). See
               https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/#syntax-and-character-set for more
               details. **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
               Please refer to the field 'effective_annotations' for all of the annotations present on the resource.
        :param pulumi.Input[builtins.str] description: Optional. Description of the 'DeployPolicy'. Max length is 255 characters.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] labels: Optional. Labels are attributes that can be set and used by both the user and by Cloud Deploy. Labels must meet the
               following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and
               dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a
               lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values
               are additionally constrained to be <= 63 characters. **Note**: This field is non-authoritative, and will only manage the
               labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the
               resource.
        :param pulumi.Input[builtins.str] name: Name of the `DeployPolicy`.
        :param pulumi.Input[builtins.bool] suspended: Optional. When suspended, the policy will not prevent actions from occurring, even if the action violates the policy.
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "rules", rules)
        pulumi.set(__self__, "selectors", selectors)
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if suspended is not None:
            pulumi.set(__self__, "suspended", suspended)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input[builtins.str]:
        """
        The location for the resource
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def rules(self) -> pulumi.Input[Sequence[pulumi.Input['DeployPolicyRuleArgs']]]:
        """
        Required. Rules to apply. At least one rule must be present.
        Structure is documented below.
        """
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: pulumi.Input[Sequence[pulumi.Input['DeployPolicyRuleArgs']]]):
        pulumi.set(self, "rules", value)

    @property
    @pulumi.getter
    def selectors(self) -> pulumi.Input[Sequence[pulumi.Input['DeployPolicySelectorArgs']]]:
        """
        Required. Selected resources to which the policy will be applied. At least one selector is required. If one selector matches the resource the policy applies. For example, if there are two selectors and the action being attempted matches one of them, the policy will apply to that action.
        Structure is documented below.
        """
        return pulumi.get(self, "selectors")

    @selectors.setter
    def selectors(self, value: pulumi.Input[Sequence[pulumi.Input['DeployPolicySelectorArgs']]]):
        pulumi.set(self, "selectors", value)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        Optional. User annotations. These attributes can only be set and used by the user, and not by Cloud Deploy. Annotations
        must meet the following constraints: * Annotations are key/value pairs. * Valid annotation keys have two segments: an
        optional prefix and name, separated by a slash ('/'). * The name segment is required and must be 63 characters or less,
        beginning and ending with an alphanumeric character ('[a-z0-9A-Z]') with dashes ('-'), underscores ('_'), dots ('.'),
        and alphanumerics between. * The prefix is optional. If specified, the prefix must be a DNS subdomain: a series of DNS
        labels separated by dots('.'), not longer than 253 characters in total, followed by a slash ('/'). See
        https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/#syntax-and-character-set for more
        details. **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
        Please refer to the field 'effective_annotations' for all of the annotations present on the resource.
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Optional. Description of the 'DeployPolicy'. Max length is 255 characters.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        Optional. Labels are attributes that can be set and used by both the user and by Cloud Deploy. Labels must meet the
        following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and
        dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a
        lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values
        are additionally constrained to be <= 63 characters. **Note**: This field is non-authoritative, and will only manage the
        labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the
        resource.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Name of the `DeployPolicy`.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def suspended(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Optional. When suspended, the policy will not prevent actions from occurring, even if the action violates the policy.
        """
        return pulumi.get(self, "suspended")

    @suspended.setter
    def suspended(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "suspended", value)


@pulumi.input_type
class _DeployPolicyState:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 create_time: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 effective_annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 effective_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 etag: Optional[pulumi.Input[builtins.str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 location: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 project: Optional[pulumi.Input[builtins.str]] = None,
                 pulumi_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input['DeployPolicyRuleArgs']]]] = None,
                 selectors: Optional[pulumi.Input[Sequence[pulumi.Input['DeployPolicySelectorArgs']]]] = None,
                 suspended: Optional[pulumi.Input[builtins.bool]] = None,
                 uid: Optional[pulumi.Input[builtins.str]] = None,
                 update_time: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering DeployPolicy resources.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] annotations: Optional. User annotations. These attributes can only be set and used by the user, and not by Cloud Deploy. Annotations
               must meet the following constraints: * Annotations are key/value pairs. * Valid annotation keys have two segments: an
               optional prefix and name, separated by a slash ('/'). * The name segment is required and must be 63 characters or less,
               beginning and ending with an alphanumeric character ('[a-z0-9A-Z]') with dashes ('-'), underscores ('_'), dots ('.'),
               and alphanumerics between. * The prefix is optional. If specified, the prefix must be a DNS subdomain: a series of DNS
               labels separated by dots('.'), not longer than 253 characters in total, followed by a slash ('/'). See
               https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/#syntax-and-character-set for more
               details. **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
               Please refer to the field 'effective_annotations' for all of the annotations present on the resource.
        :param pulumi.Input[builtins.str] create_time: Output only. Time at which the DeployPolicy was created.
        :param pulumi.Input[builtins.str] description: Optional. Description of the 'DeployPolicy'. Max length is 255 characters.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] effective_labels: All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        :param pulumi.Input[builtins.str] etag: Optional. The weak etag of the `DeployPolicy` resource. This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] labels: Optional. Labels are attributes that can be set and used by both the user and by Cloud Deploy. Labels must meet the
               following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and
               dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a
               lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values
               are additionally constrained to be <= 63 characters. **Note**: This field is non-authoritative, and will only manage the
               labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the
               resource.
        :param pulumi.Input[builtins.str] location: The location for the resource
        :param pulumi.Input[builtins.str] name: Name of the `DeployPolicy`.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] pulumi_labels: The combination of labels configured directly on the resource
               and default labels configured on the provider.
        :param pulumi.Input[Sequence[pulumi.Input['DeployPolicyRuleArgs']]] rules: Required. Rules to apply. At least one rule must be present.
               Structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['DeployPolicySelectorArgs']]] selectors: Required. Selected resources to which the policy will be applied. At least one selector is required. If one selector matches the resource the policy applies. For example, if there are two selectors and the action being attempted matches one of them, the policy will apply to that action.
               Structure is documented below.
        :param pulumi.Input[builtins.bool] suspended: Optional. When suspended, the policy will not prevent actions from occurring, even if the action violates the policy.
        :param pulumi.Input[builtins.str] uid: Output only. Unique identifier of the `DeployPolicy`.
        :param pulumi.Input[builtins.str] update_time: Output only. Time at which the DeployPolicy was updated.
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if effective_annotations is not None:
            pulumi.set(__self__, "effective_annotations", effective_annotations)
        if effective_labels is not None:
            pulumi.set(__self__, "effective_labels", effective_labels)
        if etag is not None:
            pulumi.set(__self__, "etag", etag)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if pulumi_labels is not None:
            pulumi.set(__self__, "pulumi_labels", pulumi_labels)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)
        if selectors is not None:
            pulumi.set(__self__, "selectors", selectors)
        if suspended is not None:
            pulumi.set(__self__, "suspended", suspended)
        if uid is not None:
            pulumi.set(__self__, "uid", uid)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        Optional. User annotations. These attributes can only be set and used by the user, and not by Cloud Deploy. Annotations
        must meet the following constraints: * Annotations are key/value pairs. * Valid annotation keys have two segments: an
        optional prefix and name, separated by a slash ('/'). * The name segment is required and must be 63 characters or less,
        beginning and ending with an alphanumeric character ('[a-z0-9A-Z]') with dashes ('-'), underscores ('_'), dots ('.'),
        and alphanumerics between. * The prefix is optional. If specified, the prefix must be a DNS subdomain: a series of DNS
        labels separated by dots('.'), not longer than 253 characters in total, followed by a slash ('/'). See
        https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/#syntax-and-character-set for more
        details. **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
        Please refer to the field 'effective_annotations' for all of the annotations present on the resource.
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Output only. Time at which the DeployPolicy was created.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Optional. Description of the 'DeployPolicy'. Max length is 255 characters.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="effectiveAnnotations")
    def effective_annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "effective_annotations")

    @effective_annotations.setter
    def effective_annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "effective_annotations", value)

    @property
    @pulumi.getter(name="effectiveLabels")
    def effective_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        """
        return pulumi.get(self, "effective_labels")

    @effective_labels.setter
    def effective_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "effective_labels", value)

    @property
    @pulumi.getter
    def etag(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Optional. The weak etag of the `DeployPolicy` resource. This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
        """
        return pulumi.get(self, "etag")

    @etag.setter
    def etag(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "etag", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        Optional. Labels are attributes that can be set and used by both the user and by Cloud Deploy. Labels must meet the
        following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and
        dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a
        lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values
        are additionally constrained to be <= 63 characters. **Note**: This field is non-authoritative, and will only manage the
        labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the
        resource.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The location for the resource
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Name of the `DeployPolicy`.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="pulumiLabels")
    def pulumi_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        The combination of labels configured directly on the resource
        and default labels configured on the provider.
        """
        return pulumi.get(self, "pulumi_labels")

    @pulumi_labels.setter
    def pulumi_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "pulumi_labels", value)

    @property
    @pulumi.getter
    def rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeployPolicyRuleArgs']]]]:
        """
        Required. Rules to apply. At least one rule must be present.
        Structure is documented below.
        """
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeployPolicyRuleArgs']]]]):
        pulumi.set(self, "rules", value)

    @property
    @pulumi.getter
    def selectors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeployPolicySelectorArgs']]]]:
        """
        Required. Selected resources to which the policy will be applied. At least one selector is required. If one selector matches the resource the policy applies. For example, if there are two selectors and the action being attempted matches one of them, the policy will apply to that action.
        Structure is documented below.
        """
        return pulumi.get(self, "selectors")

    @selectors.setter
    def selectors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeployPolicySelectorArgs']]]]):
        pulumi.set(self, "selectors", value)

    @property
    @pulumi.getter
    def suspended(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Optional. When suspended, the policy will not prevent actions from occurring, even if the action violates the policy.
        """
        return pulumi.get(self, "suspended")

    @suspended.setter
    def suspended(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "suspended", value)

    @property
    @pulumi.getter
    def uid(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Output only. Unique identifier of the `DeployPolicy`.
        """
        return pulumi.get(self, "uid")

    @uid.setter
    def uid(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "uid", value)

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Output only. Time at which the DeployPolicy was updated.
        """
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "update_time", value)


@pulumi.type_token("gcp:clouddeploy/deployPolicy:DeployPolicy")
class DeployPolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 location: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 project: Optional[pulumi.Input[builtins.str]] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DeployPolicyRuleArgs', 'DeployPolicyRuleArgsDict']]]]] = None,
                 selectors: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DeployPolicySelectorArgs', 'DeployPolicySelectorArgsDict']]]]] = None,
                 suspended: Optional[pulumi.Input[builtins.bool]] = None,
                 __props__=None):
        """
        A `DeployPolicy` inhibits manual or DeployPolicy-driven actions within a Delivery Pipeline or Target.

        To get more information about DeployPolicy, see:

        * [API documentation](https://cloud.google.com/deploy/docs/api/reference/rest/v1/projects.locations.deployPolicies)
        * How-to Guides
            * [Restrict deploy behavior using policies](https://cloud.google.com/deploy/docs/deploy-policy)

        ## Example Usage

        ### Clouddeploy Deploy Policy Basic

        ```python
        import pulumi
        import pulumi_gcp as gcp

        b_deploy_policy = gcp.clouddeploy.DeployPolicy("b-deploy-policy",
            name="cd-policy",
            location="us-central1",
            selectors=[{
                "delivery_pipeline": {
                    "id": "cd-pipeline",
                },
            }],
            rules=[{
                "rollout_restriction": {
                    "id": "rule",
                    "time_windows": {
                        "time_zone": "America/Los_Angeles",
                        "weekly_windows": [{
                            "start_time": {
                                "hours": 12,
                                "minutes": 0,
                            },
                            "end_time": {
                                "hours": 13,
                                "minutes": 0,
                            },
                        }],
                    },
                },
            }])
        ```
        ### Clouddeploy Deploy Policy Full

        ```python
        import pulumi
        import pulumi_gcp as gcp

        f_deploy_policy = gcp.clouddeploy.DeployPolicy("f-deploy-policy",
            name="cd-policy",
            location="us-central1",
            annotations={
                "my_first_annotation": "example-annotation-1",
                "my_second_annotation": "example-annotation-2",
            },
            labels={
                "my_first_label": "example-label-1",
                "my_second_label": "example-label-2",
            },
            description="policy resource",
            selectors=[
                {
                    "delivery_pipeline": {
                        "id": "cd-pipeline",
                        "labels": {
                            "foo": "bar",
                        },
                    },
                },
                {
                    "target": {
                        "id": "dev",
                        "labels": {
                            "foo": "bar",
                        },
                    },
                },
            ],
            suspended=True,
            rules=[
                {
                    "rollout_restriction": {
                        "id": "rule",
                        "time_windows": {
                            "time_zone": "America/Los_Angeles",
                            "weekly_windows": [{
                                "start_time": {
                                    "hours": 12,
                                    "minutes": 0,
                                    "seconds": 0,
                                    "nanos": 0,
                                },
                                "end_time": {
                                    "hours": 13,
                                    "minutes": 0,
                                    "seconds": 0,
                                    "nanos": 0,
                                },
                            }],
                        },
                    },
                },
                {
                    "rollout_restriction": {
                        "id": "rule2",
                        "invokers": ["USER"],
                        "actions": ["CREATE"],
                        "time_windows": {
                            "time_zone": "America/Los_Angeles",
                            "weekly_windows": [{
                                "start_time": {
                                    "hours": 13,
                                    "minutes": 0,
                                    "seconds": 0,
                                    "nanos": 0,
                                },
                                "end_time": {
                                    "hours": 14,
                                    "minutes": 0,
                                    "seconds": 0,
                                    "nanos": 0,
                                },
                                "days_of_weeks": ["MONDAY"],
                            }],
                            "one_time_windows": [{
                                "start_time": {
                                    "hours": 15,
                                    "minutes": 0,
                                    "seconds": 0,
                                    "nanos": 0,
                                },
                                "end_time": {
                                    "hours": 16,
                                    "minutes": 0,
                                    "seconds": 0,
                                    "nanos": 0,
                                },
                                "start_date": {
                                    "year": 2019,
                                    "month": 1,
                                    "day": 1,
                                },
                                "end_date": {
                                    "year": 2019,
                                    "month": 12,
                                    "day": 31,
                                },
                            }],
                        },
                    },
                },
            ])
        ```

        ## Import

        DeployPolicy can be imported using any of these accepted formats:

        * `projects/{{project}}/locations/{{location}}/deployPolicies/{{name}}`

        * `{{project}}/{{location}}/{{name}}`

        * `{{location}}/{{name}}`

        When using the `pulumi import` command, DeployPolicy can be imported using one of the formats above. For example:

        ```sh
        $ pulumi import gcp:clouddeploy/deployPolicy:DeployPolicy default projects/{{project}}/locations/{{location}}/deployPolicies/{{name}}
        ```

        ```sh
        $ pulumi import gcp:clouddeploy/deployPolicy:DeployPolicy default {{project}}/{{location}}/{{name}}
        ```

        ```sh
        $ pulumi import gcp:clouddeploy/deployPolicy:DeployPolicy default {{location}}/{{name}}
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] annotations: Optional. User annotations. These attributes can only be set and used by the user, and not by Cloud Deploy. Annotations
               must meet the following constraints: * Annotations are key/value pairs. * Valid annotation keys have two segments: an
               optional prefix and name, separated by a slash ('/'). * The name segment is required and must be 63 characters or less,
               beginning and ending with an alphanumeric character ('[a-z0-9A-Z]') with dashes ('-'), underscores ('_'), dots ('.'),
               and alphanumerics between. * The prefix is optional. If specified, the prefix must be a DNS subdomain: a series of DNS
               labels separated by dots('.'), not longer than 253 characters in total, followed by a slash ('/'). See
               https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/#syntax-and-character-set for more
               details. **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
               Please refer to the field 'effective_annotations' for all of the annotations present on the resource.
        :param pulumi.Input[builtins.str] description: Optional. Description of the 'DeployPolicy'. Max length is 255 characters.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] labels: Optional. Labels are attributes that can be set and used by both the user and by Cloud Deploy. Labels must meet the
               following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and
               dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a
               lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values
               are additionally constrained to be <= 63 characters. **Note**: This field is non-authoritative, and will only manage the
               labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the
               resource.
        :param pulumi.Input[builtins.str] location: The location for the resource
        :param pulumi.Input[builtins.str] name: Name of the `DeployPolicy`.
        :param pulumi.Input[Sequence[pulumi.Input[Union['DeployPolicyRuleArgs', 'DeployPolicyRuleArgsDict']]]] rules: Required. Rules to apply. At least one rule must be present.
               Structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[Union['DeployPolicySelectorArgs', 'DeployPolicySelectorArgsDict']]]] selectors: Required. Selected resources to which the policy will be applied. At least one selector is required. If one selector matches the resource the policy applies. For example, if there are two selectors and the action being attempted matches one of them, the policy will apply to that action.
               Structure is documented below.
        :param pulumi.Input[builtins.bool] suspended: Optional. When suspended, the policy will not prevent actions from occurring, even if the action violates the policy.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DeployPolicyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        A `DeployPolicy` inhibits manual or DeployPolicy-driven actions within a Delivery Pipeline or Target.

        To get more information about DeployPolicy, see:

        * [API documentation](https://cloud.google.com/deploy/docs/api/reference/rest/v1/projects.locations.deployPolicies)
        * How-to Guides
            * [Restrict deploy behavior using policies](https://cloud.google.com/deploy/docs/deploy-policy)

        ## Example Usage

        ### Clouddeploy Deploy Policy Basic

        ```python
        import pulumi
        import pulumi_gcp as gcp

        b_deploy_policy = gcp.clouddeploy.DeployPolicy("b-deploy-policy",
            name="cd-policy",
            location="us-central1",
            selectors=[{
                "delivery_pipeline": {
                    "id": "cd-pipeline",
                },
            }],
            rules=[{
                "rollout_restriction": {
                    "id": "rule",
                    "time_windows": {
                        "time_zone": "America/Los_Angeles",
                        "weekly_windows": [{
                            "start_time": {
                                "hours": 12,
                                "minutes": 0,
                            },
                            "end_time": {
                                "hours": 13,
                                "minutes": 0,
                            },
                        }],
                    },
                },
            }])
        ```
        ### Clouddeploy Deploy Policy Full

        ```python
        import pulumi
        import pulumi_gcp as gcp

        f_deploy_policy = gcp.clouddeploy.DeployPolicy("f-deploy-policy",
            name="cd-policy",
            location="us-central1",
            annotations={
                "my_first_annotation": "example-annotation-1",
                "my_second_annotation": "example-annotation-2",
            },
            labels={
                "my_first_label": "example-label-1",
                "my_second_label": "example-label-2",
            },
            description="policy resource",
            selectors=[
                {
                    "delivery_pipeline": {
                        "id": "cd-pipeline",
                        "labels": {
                            "foo": "bar",
                        },
                    },
                },
                {
                    "target": {
                        "id": "dev",
                        "labels": {
                            "foo": "bar",
                        },
                    },
                },
            ],
            suspended=True,
            rules=[
                {
                    "rollout_restriction": {
                        "id": "rule",
                        "time_windows": {
                            "time_zone": "America/Los_Angeles",
                            "weekly_windows": [{
                                "start_time": {
                                    "hours": 12,
                                    "minutes": 0,
                                    "seconds": 0,
                                    "nanos": 0,
                                },
                                "end_time": {
                                    "hours": 13,
                                    "minutes": 0,
                                    "seconds": 0,
                                    "nanos": 0,
                                },
                            }],
                        },
                    },
                },
                {
                    "rollout_restriction": {
                        "id": "rule2",
                        "invokers": ["USER"],
                        "actions": ["CREATE"],
                        "time_windows": {
                            "time_zone": "America/Los_Angeles",
                            "weekly_windows": [{
                                "start_time": {
                                    "hours": 13,
                                    "minutes": 0,
                                    "seconds": 0,
                                    "nanos": 0,
                                },
                                "end_time": {
                                    "hours": 14,
                                    "minutes": 0,
                                    "seconds": 0,
                                    "nanos": 0,
                                },
                                "days_of_weeks": ["MONDAY"],
                            }],
                            "one_time_windows": [{
                                "start_time": {
                                    "hours": 15,
                                    "minutes": 0,
                                    "seconds": 0,
                                    "nanos": 0,
                                },
                                "end_time": {
                                    "hours": 16,
                                    "minutes": 0,
                                    "seconds": 0,
                                    "nanos": 0,
                                },
                                "start_date": {
                                    "year": 2019,
                                    "month": 1,
                                    "day": 1,
                                },
                                "end_date": {
                                    "year": 2019,
                                    "month": 12,
                                    "day": 31,
                                },
                            }],
                        },
                    },
                },
            ])
        ```

        ## Import

        DeployPolicy can be imported using any of these accepted formats:

        * `projects/{{project}}/locations/{{location}}/deployPolicies/{{name}}`

        * `{{project}}/{{location}}/{{name}}`

        * `{{location}}/{{name}}`

        When using the `pulumi import` command, DeployPolicy can be imported using one of the formats above. For example:

        ```sh
        $ pulumi import gcp:clouddeploy/deployPolicy:DeployPolicy default projects/{{project}}/locations/{{location}}/deployPolicies/{{name}}
        ```

        ```sh
        $ pulumi import gcp:clouddeploy/deployPolicy:DeployPolicy default {{project}}/{{location}}/{{name}}
        ```

        ```sh
        $ pulumi import gcp:clouddeploy/deployPolicy:DeployPolicy default {{location}}/{{name}}
        ```

        :param str resource_name: The name of the resource.
        :param DeployPolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DeployPolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 location: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 project: Optional[pulumi.Input[builtins.str]] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DeployPolicyRuleArgs', 'DeployPolicyRuleArgsDict']]]]] = None,
                 selectors: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DeployPolicySelectorArgs', 'DeployPolicySelectorArgsDict']]]]] = None,
                 suspended: Optional[pulumi.Input[builtins.bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DeployPolicyArgs.__new__(DeployPolicyArgs)

            __props__.__dict__["annotations"] = annotations
            __props__.__dict__["description"] = description
            __props__.__dict__["labels"] = labels
            if location is None and not opts.urn:
                raise TypeError("Missing required property 'location'")
            __props__.__dict__["location"] = location
            __props__.__dict__["name"] = name
            __props__.__dict__["project"] = project
            if rules is None and not opts.urn:
                raise TypeError("Missing required property 'rules'")
            __props__.__dict__["rules"] = rules
            if selectors is None and not opts.urn:
                raise TypeError("Missing required property 'selectors'")
            __props__.__dict__["selectors"] = selectors
            __props__.__dict__["suspended"] = suspended
            __props__.__dict__["create_time"] = None
            __props__.__dict__["effective_annotations"] = None
            __props__.__dict__["effective_labels"] = None
            __props__.__dict__["etag"] = None
            __props__.__dict__["pulumi_labels"] = None
            __props__.__dict__["uid"] = None
            __props__.__dict__["update_time"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["effectiveLabels", "pulumiLabels"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(DeployPolicy, __self__).__init__(
            'gcp:clouddeploy/deployPolicy:DeployPolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
            create_time: Optional[pulumi.Input[builtins.str]] = None,
            description: Optional[pulumi.Input[builtins.str]] = None,
            effective_annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
            effective_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
            etag: Optional[pulumi.Input[builtins.str]] = None,
            labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
            location: Optional[pulumi.Input[builtins.str]] = None,
            name: Optional[pulumi.Input[builtins.str]] = None,
            project: Optional[pulumi.Input[builtins.str]] = None,
            pulumi_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
            rules: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DeployPolicyRuleArgs', 'DeployPolicyRuleArgsDict']]]]] = None,
            selectors: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DeployPolicySelectorArgs', 'DeployPolicySelectorArgsDict']]]]] = None,
            suspended: Optional[pulumi.Input[builtins.bool]] = None,
            uid: Optional[pulumi.Input[builtins.str]] = None,
            update_time: Optional[pulumi.Input[builtins.str]] = None) -> 'DeployPolicy':
        """
        Get an existing DeployPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] annotations: Optional. User annotations. These attributes can only be set and used by the user, and not by Cloud Deploy. Annotations
               must meet the following constraints: * Annotations are key/value pairs. * Valid annotation keys have two segments: an
               optional prefix and name, separated by a slash ('/'). * The name segment is required and must be 63 characters or less,
               beginning and ending with an alphanumeric character ('[a-z0-9A-Z]') with dashes ('-'), underscores ('_'), dots ('.'),
               and alphanumerics between. * The prefix is optional. If specified, the prefix must be a DNS subdomain: a series of DNS
               labels separated by dots('.'), not longer than 253 characters in total, followed by a slash ('/'). See
               https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/#syntax-and-character-set for more
               details. **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
               Please refer to the field 'effective_annotations' for all of the annotations present on the resource.
        :param pulumi.Input[builtins.str] create_time: Output only. Time at which the DeployPolicy was created.
        :param pulumi.Input[builtins.str] description: Optional. Description of the 'DeployPolicy'. Max length is 255 characters.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] effective_labels: All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        :param pulumi.Input[builtins.str] etag: Optional. The weak etag of the `DeployPolicy` resource. This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] labels: Optional. Labels are attributes that can be set and used by both the user and by Cloud Deploy. Labels must meet the
               following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and
               dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a
               lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values
               are additionally constrained to be <= 63 characters. **Note**: This field is non-authoritative, and will only manage the
               labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the
               resource.
        :param pulumi.Input[builtins.str] location: The location for the resource
        :param pulumi.Input[builtins.str] name: Name of the `DeployPolicy`.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] pulumi_labels: The combination of labels configured directly on the resource
               and default labels configured on the provider.
        :param pulumi.Input[Sequence[pulumi.Input[Union['DeployPolicyRuleArgs', 'DeployPolicyRuleArgsDict']]]] rules: Required. Rules to apply. At least one rule must be present.
               Structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[Union['DeployPolicySelectorArgs', 'DeployPolicySelectorArgsDict']]]] selectors: Required. Selected resources to which the policy will be applied. At least one selector is required. If one selector matches the resource the policy applies. For example, if there are two selectors and the action being attempted matches one of them, the policy will apply to that action.
               Structure is documented below.
        :param pulumi.Input[builtins.bool] suspended: Optional. When suspended, the policy will not prevent actions from occurring, even if the action violates the policy.
        :param pulumi.Input[builtins.str] uid: Output only. Unique identifier of the `DeployPolicy`.
        :param pulumi.Input[builtins.str] update_time: Output only. Time at which the DeployPolicy was updated.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DeployPolicyState.__new__(_DeployPolicyState)

        __props__.__dict__["annotations"] = annotations
        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["description"] = description
        __props__.__dict__["effective_annotations"] = effective_annotations
        __props__.__dict__["effective_labels"] = effective_labels
        __props__.__dict__["etag"] = etag
        __props__.__dict__["labels"] = labels
        __props__.__dict__["location"] = location
        __props__.__dict__["name"] = name
        __props__.__dict__["project"] = project
        __props__.__dict__["pulumi_labels"] = pulumi_labels
        __props__.__dict__["rules"] = rules
        __props__.__dict__["selectors"] = selectors
        __props__.__dict__["suspended"] = suspended
        __props__.__dict__["uid"] = uid
        __props__.__dict__["update_time"] = update_time
        return DeployPolicy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def annotations(self) -> pulumi.Output[Optional[Mapping[str, builtins.str]]]:
        """
        Optional. User annotations. These attributes can only be set and used by the user, and not by Cloud Deploy. Annotations
        must meet the following constraints: * Annotations are key/value pairs. * Valid annotation keys have two segments: an
        optional prefix and name, separated by a slash ('/'). * The name segment is required and must be 63 characters or less,
        beginning and ending with an alphanumeric character ('[a-z0-9A-Z]') with dashes ('-'), underscores ('_'), dots ('.'),
        and alphanumerics between. * The prefix is optional. If specified, the prefix must be a DNS subdomain: a series of DNS
        labels separated by dots('.'), not longer than 253 characters in total, followed by a slash ('/'). See
        https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/#syntax-and-character-set for more
        details. **Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
        Please refer to the field 'effective_annotations' for all of the annotations present on the resource.
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[builtins.str]:
        """
        Output only. Time at which the DeployPolicy was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Optional. Description of the 'DeployPolicy'. Max length is 255 characters.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="effectiveAnnotations")
    def effective_annotations(self) -> pulumi.Output[Mapping[str, builtins.str]]:
        return pulumi.get(self, "effective_annotations")

    @property
    @pulumi.getter(name="effectiveLabels")
    def effective_labels(self) -> pulumi.Output[Mapping[str, builtins.str]]:
        """
        All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        """
        return pulumi.get(self, "effective_labels")

    @property
    @pulumi.getter
    def etag(self) -> pulumi.Output[builtins.str]:
        """
        Optional. The weak etag of the `DeployPolicy` resource. This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Optional[Mapping[str, builtins.str]]]:
        """
        Optional. Labels are attributes that can be set and used by both the user and by Cloud Deploy. Labels must meet the
        following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and
        dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a
        lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values
        are additionally constrained to be <= 63 characters. **Note**: This field is non-authoritative, and will only manage the
        labels present in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the
        resource.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[builtins.str]:
        """
        The location for the resource
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        """
        Name of the `DeployPolicy`.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="pulumiLabels")
    def pulumi_labels(self) -> pulumi.Output[Mapping[str, builtins.str]]:
        """
        The combination of labels configured directly on the resource
        and default labels configured on the provider.
        """
        return pulumi.get(self, "pulumi_labels")

    @property
    @pulumi.getter
    def rules(self) -> pulumi.Output[Sequence['outputs.DeployPolicyRule']]:
        """
        Required. Rules to apply. At least one rule must be present.
        Structure is documented below.
        """
        return pulumi.get(self, "rules")

    @property
    @pulumi.getter
    def selectors(self) -> pulumi.Output[Sequence['outputs.DeployPolicySelector']]:
        """
        Required. Selected resources to which the policy will be applied. At least one selector is required. If one selector matches the resource the policy applies. For example, if there are two selectors and the action being attempted matches one of them, the policy will apply to that action.
        Structure is documented below.
        """
        return pulumi.get(self, "selectors")

    @property
    @pulumi.getter
    def suspended(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        Optional. When suspended, the policy will not prevent actions from occurring, even if the action violates the policy.
        """
        return pulumi.get(self, "suspended")

    @property
    @pulumi.getter
    def uid(self) -> pulumi.Output[builtins.str]:
        """
        Output only. Unique identifier of the `DeployPolicy`.
        """
        return pulumi.get(self, "uid")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[builtins.str]:
        """
        Output only. Time at which the DeployPolicy was updated.
        """
        return pulumi.get(self, "update_time")

