# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DeliveryPipelineArgs', 'DeliveryPipeline']

@pulumi.input_type
class DeliveryPipelineArgs:
    def __init__(__self__, *,
                 location: pulumi.Input[str],
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 serial_pipeline: Optional[pulumi.Input['DeliveryPipelineSerialPipelineArgs']] = None,
                 suspended: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a DeliveryPipeline resource.
        :param pulumi.Input[str] location: The location for the resource
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] annotations: User annotations. These attributes can only be set and used by the user, and not by Google Cloud Deploy. See https://google.aip.dev/128#annotations for more details such as format and size limitations.
        :param pulumi.Input[str] description: Description of the `DeliveryPipeline`. Max length is 255 characters.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Labels are attributes that can be set and used by both the user and by Google Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be <= 128 bytes.
        :param pulumi.Input[str] name: Name of the `DeliveryPipeline`. Format is [a-z][a-z0-9\\-]{0,62}.
        :param pulumi.Input[str] project: The project for the resource
        :param pulumi.Input['DeliveryPipelineSerialPipelineArgs'] serial_pipeline: SerialPipeline defines a sequential set of stages for a `DeliveryPipeline`.
        :param pulumi.Input[bool] suspended: When suspended, no new releases or rollouts can be created, but in-progress ones will complete.
        """
        DeliveryPipelineArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            location=location,
            annotations=annotations,
            description=description,
            labels=labels,
            name=name,
            project=project,
            serial_pipeline=serial_pipeline,
            suspended=suspended,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             location: pulumi.Input[str],
             annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             description: Optional[pulumi.Input[str]] = None,
             labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             name: Optional[pulumi.Input[str]] = None,
             project: Optional[pulumi.Input[str]] = None,
             serial_pipeline: Optional[pulumi.Input['DeliveryPipelineSerialPipelineArgs']] = None,
             suspended: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("location", location)
        if annotations is not None:
            _setter("annotations", annotations)
        if description is not None:
            _setter("description", description)
        if labels is not None:
            _setter("labels", labels)
        if name is not None:
            _setter("name", name)
        if project is not None:
            _setter("project", project)
        if serial_pipeline is not None:
            _setter("serial_pipeline", serial_pipeline)
        if suspended is not None:
            _setter("suspended", suspended)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input[str]:
        """
        The location for the resource
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[str]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        User annotations. These attributes can only be set and used by the user, and not by Google Cloud Deploy. See https://google.aip.dev/128#annotations for more details such as format and size limitations.
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the `DeliveryPipeline`. Max length is 255 characters.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Labels are attributes that can be set and used by both the user and by Google Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be <= 128 bytes.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the `DeliveryPipeline`. Format is [a-z][a-z0-9\\-]{0,62}.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        """
        The project for the resource
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="serialPipeline")
    def serial_pipeline(self) -> Optional[pulumi.Input['DeliveryPipelineSerialPipelineArgs']]:
        """
        SerialPipeline defines a sequential set of stages for a `DeliveryPipeline`.
        """
        return pulumi.get(self, "serial_pipeline")

    @serial_pipeline.setter
    def serial_pipeline(self, value: Optional[pulumi.Input['DeliveryPipelineSerialPipelineArgs']]):
        pulumi.set(self, "serial_pipeline", value)

    @property
    @pulumi.getter
    def suspended(self) -> Optional[pulumi.Input[bool]]:
        """
        When suspended, no new releases or rollouts can be created, but in-progress ones will complete.
        """
        return pulumi.get(self, "suspended")

    @suspended.setter
    def suspended(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "suspended", value)


@pulumi.input_type
class _DeliveryPipelineState:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['DeliveryPipelineConditionArgs']]]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 etag: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 serial_pipeline: Optional[pulumi.Input['DeliveryPipelineSerialPipelineArgs']] = None,
                 suspended: Optional[pulumi.Input[bool]] = None,
                 uid: Optional[pulumi.Input[str]] = None,
                 update_time: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering DeliveryPipeline resources.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] annotations: User annotations. These attributes can only be set and used by the user, and not by Google Cloud Deploy. See https://google.aip.dev/128#annotations for more details such as format and size limitations.
        :param pulumi.Input[Sequence[pulumi.Input['DeliveryPipelineConditionArgs']]] conditions: Output only. Information around the state of the Delivery Pipeline.
        :param pulumi.Input[str] create_time: Output only. Time at which the pipeline was created.
        :param pulumi.Input[str] description: Description of the `DeliveryPipeline`. Max length is 255 characters.
        :param pulumi.Input[str] etag: This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Labels are attributes that can be set and used by both the user and by Google Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be <= 128 bytes.
        :param pulumi.Input[str] location: The location for the resource
        :param pulumi.Input[str] name: Name of the `DeliveryPipeline`. Format is [a-z][a-z0-9\\-]{0,62}.
        :param pulumi.Input[str] project: The project for the resource
        :param pulumi.Input['DeliveryPipelineSerialPipelineArgs'] serial_pipeline: SerialPipeline defines a sequential set of stages for a `DeliveryPipeline`.
        :param pulumi.Input[bool] suspended: When suspended, no new releases or rollouts can be created, but in-progress ones will complete.
        :param pulumi.Input[str] uid: Output only. Unique identifier of the `DeliveryPipeline`.
        :param pulumi.Input[str] update_time: Output only. Most recent time at which the pipeline was updated.
        """
        _DeliveryPipelineState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            annotations=annotations,
            conditions=conditions,
            create_time=create_time,
            description=description,
            etag=etag,
            labels=labels,
            location=location,
            name=name,
            project=project,
            serial_pipeline=serial_pipeline,
            suspended=suspended,
            uid=uid,
            update_time=update_time,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             conditions: Optional[pulumi.Input[Sequence[pulumi.Input['DeliveryPipelineConditionArgs']]]] = None,
             create_time: Optional[pulumi.Input[str]] = None,
             description: Optional[pulumi.Input[str]] = None,
             etag: Optional[pulumi.Input[str]] = None,
             labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             location: Optional[pulumi.Input[str]] = None,
             name: Optional[pulumi.Input[str]] = None,
             project: Optional[pulumi.Input[str]] = None,
             serial_pipeline: Optional[pulumi.Input['DeliveryPipelineSerialPipelineArgs']] = None,
             suspended: Optional[pulumi.Input[bool]] = None,
             uid: Optional[pulumi.Input[str]] = None,
             update_time: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if annotations is not None:
            _setter("annotations", annotations)
        if conditions is not None:
            _setter("conditions", conditions)
        if create_time is not None:
            _setter("create_time", create_time)
        if description is not None:
            _setter("description", description)
        if etag is not None:
            _setter("etag", etag)
        if labels is not None:
            _setter("labels", labels)
        if location is not None:
            _setter("location", location)
        if name is not None:
            _setter("name", name)
        if project is not None:
            _setter("project", project)
        if serial_pipeline is not None:
            _setter("serial_pipeline", serial_pipeline)
        if suspended is not None:
            _setter("suspended", suspended)
        if uid is not None:
            _setter("uid", uid)
        if update_time is not None:
            _setter("update_time", update_time)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        User annotations. These attributes can only be set and used by the user, and not by Google Cloud Deploy. See https://google.aip.dev/128#annotations for more details such as format and size limitations.
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeliveryPipelineConditionArgs']]]]:
        """
        Output only. Information around the state of the Delivery Pipeline.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeliveryPipelineConditionArgs']]]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        Output only. Time at which the pipeline was created.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the `DeliveryPipeline`. Max length is 255 characters.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def etag(self) -> Optional[pulumi.Input[str]]:
        """
        This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
        """
        return pulumi.get(self, "etag")

    @etag.setter
    def etag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "etag", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Labels are attributes that can be set and used by both the user and by Google Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be <= 128 bytes.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        The location for the resource
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the `DeliveryPipeline`. Format is [a-z][a-z0-9\\-]{0,62}.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        """
        The project for the resource
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="serialPipeline")
    def serial_pipeline(self) -> Optional[pulumi.Input['DeliveryPipelineSerialPipelineArgs']]:
        """
        SerialPipeline defines a sequential set of stages for a `DeliveryPipeline`.
        """
        return pulumi.get(self, "serial_pipeline")

    @serial_pipeline.setter
    def serial_pipeline(self, value: Optional[pulumi.Input['DeliveryPipelineSerialPipelineArgs']]):
        pulumi.set(self, "serial_pipeline", value)

    @property
    @pulumi.getter
    def suspended(self) -> Optional[pulumi.Input[bool]]:
        """
        When suspended, no new releases or rollouts can be created, but in-progress ones will complete.
        """
        return pulumi.get(self, "suspended")

    @suspended.setter
    def suspended(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "suspended", value)

    @property
    @pulumi.getter
    def uid(self) -> Optional[pulumi.Input[str]]:
        """
        Output only. Unique identifier of the `DeliveryPipeline`.
        """
        return pulumi.get(self, "uid")

    @uid.setter
    def uid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uid", value)

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[str]]:
        """
        Output only. Most recent time at which the pipeline was updated.
        """
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_time", value)


class DeliveryPipeline(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 serial_pipeline: Optional[pulumi.Input[pulumi.InputType['DeliveryPipelineSerialPipelineArgs']]] = None,
                 suspended: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        The Cloud Deploy `DeliveryPipeline` resource

        ## Example Usage
        ### Canary_delivery_pipeline
        Creates a basic Cloud Deploy delivery pipeline
        ```python
        import pulumi
        import pulumi_gcp as gcp

        primary = gcp.clouddeploy.DeliveryPipeline("primary",
            location="us-west1",
            annotations={
                "my_first_annotation": "example-annotation-1",
                "my_second_annotation": "example-annotation-2",
            },
            description="basic description",
            labels={
                "my_first_label": "example-label-1",
                "my_second_label": "example-label-2",
            },
            project="my-project-name",
            serial_pipeline=gcp.clouddeploy.DeliveryPipelineSerialPipelineArgs(
                stages=[
                    gcp.clouddeploy.DeliveryPipelineSerialPipelineStageArgs(
                        deploy_parameters=[gcp.clouddeploy.DeliveryPipelineSerialPipelineStageDeployParameterArgs(
                            values={
                                "deployParameterKey": "deployParameterValue",
                            },
                            match_target_labels={},
                        )],
                        profiles=[
                            "example-profile-one",
                            "example-profile-two",
                        ],
                        target_id="example-target-one",
                    ),
                    gcp.clouddeploy.DeliveryPipelineSerialPipelineStageArgs(
                        profiles=[],
                        target_id="example-target-two",
                    ),
                ],
            ),
            opts=pulumi.ResourceOptions(provider=google_beta))
        ```
        ### Canary_service_networking_delivery_pipeline
        Creates a basic Cloud Deploy delivery pipeline
        ```python
        import pulumi
        import pulumi_gcp as gcp

        primary = gcp.clouddeploy.DeliveryPipeline("primary",
            location="us-west1",
            annotations={
                "my_first_annotation": "example-annotation-1",
                "my_second_annotation": "example-annotation-2",
            },
            description="basic description",
            labels={
                "my_first_label": "example-label-1",
                "my_second_label": "example-label-2",
            },
            project="my-project-name",
            serial_pipeline=gcp.clouddeploy.DeliveryPipelineSerialPipelineArgs(
                stages=[
                    gcp.clouddeploy.DeliveryPipelineSerialPipelineStageArgs(
                        deploy_parameters=[gcp.clouddeploy.DeliveryPipelineSerialPipelineStageDeployParameterArgs(
                            values={
                                "deployParameterKey": "deployParameterValue",
                            },
                            match_target_labels={},
                        )],
                        profiles=[
                            "example-profile-one",
                            "example-profile-two",
                        ],
                        target_id="example-target-one",
                    ),
                    gcp.clouddeploy.DeliveryPipelineSerialPipelineStageArgs(
                        profiles=[],
                        target_id="example-target-two",
                    ),
                ],
            ),
            opts=pulumi.ResourceOptions(provider=google_beta))
        ```
        ### Canaryrun_delivery_pipeline
        Creates a basic Cloud Deploy delivery pipeline
        ```python
        import pulumi
        import pulumi_gcp as gcp

        primary = gcp.clouddeploy.DeliveryPipeline("primary",
            location="us-west1",
            annotations={
                "my_first_annotation": "example-annotation-1",
                "my_second_annotation": "example-annotation-2",
            },
            description="basic description",
            labels={
                "my_first_label": "example-label-1",
                "my_second_label": "example-label-2",
            },
            project="my-project-name",
            serial_pipeline=gcp.clouddeploy.DeliveryPipelineSerialPipelineArgs(
                stages=[
                    gcp.clouddeploy.DeliveryPipelineSerialPipelineStageArgs(
                        deploy_parameters=[gcp.clouddeploy.DeliveryPipelineSerialPipelineStageDeployParameterArgs(
                            values={
                                "deployParameterKey": "deployParameterValue",
                            },
                            match_target_labels={},
                        )],
                        profiles=[
                            "example-profile-one",
                            "example-profile-two",
                        ],
                        target_id="example-target-one",
                    ),
                    gcp.clouddeploy.DeliveryPipelineSerialPipelineStageArgs(
                        profiles=[],
                        target_id="example-target-two",
                    ),
                ],
            ),
            opts=pulumi.ResourceOptions(provider=google_beta))
        ```
        ### Delivery_pipeline
        Creates a basic Cloud Deploy delivery pipeline
        ```python
        import pulumi
        import pulumi_gcp as gcp

        primary = gcp.clouddeploy.DeliveryPipeline("primary",
            annotations={
                "my_first_annotation": "example-annotation-1",
                "my_second_annotation": "example-annotation-2",
            },
            description="basic description",
            labels={
                "my_first_label": "example-label-1",
                "my_second_label": "example-label-2",
            },
            location="us-west1",
            project="my-project-name",
            serial_pipeline=gcp.clouddeploy.DeliveryPipelineSerialPipelineArgs(
                stages=[
                    gcp.clouddeploy.DeliveryPipelineSerialPipelineStageArgs(
                        deploy_parameters=[gcp.clouddeploy.DeliveryPipelineSerialPipelineStageDeployParameterArgs(
                            match_target_labels={},
                            values={
                                "deployParameterKey": "deployParameterValue",
                            },
                        )],
                        profiles=[
                            "example-profile-one",
                            "example-profile-two",
                        ],
                        target_id="example-target-one",
                    ),
                    gcp.clouddeploy.DeliveryPipelineSerialPipelineStageArgs(
                        profiles=[],
                        target_id="example-target-two",
                    ),
                ],
            ))
        ```
        ### Verify_delivery_pipeline
        tests creating and updating a delivery pipeline with deployment verification strategy
        ```python
        import pulumi
        import pulumi_gcp as gcp

        primary = gcp.clouddeploy.DeliveryPipeline("primary",
            location="us-west1",
            annotations={
                "my_first_annotation": "example-annotation-1",
                "my_second_annotation": "example-annotation-2",
            },
            description="basic description",
            labels={
                "my_first_label": "example-label-1",
                "my_second_label": "example-label-2",
            },
            project="my-project-name",
            serial_pipeline=gcp.clouddeploy.DeliveryPipelineSerialPipelineArgs(
                stages=[
                    gcp.clouddeploy.DeliveryPipelineSerialPipelineStageArgs(
                        deploy_parameters=[gcp.clouddeploy.DeliveryPipelineSerialPipelineStageDeployParameterArgs(
                            values={
                                "deployParameterKey": "deployParameterValue",
                            },
                            match_target_labels={},
                        )],
                        profiles=[
                            "example-profile-one",
                            "example-profile-two",
                        ],
                        target_id="example-target-one",
                    ),
                    gcp.clouddeploy.DeliveryPipelineSerialPipelineStageArgs(
                        profiles=[],
                        target_id="example-target-two",
                    ),
                ],
            ),
            opts=pulumi.ResourceOptions(provider=google_beta))
        ```

        ## Import

        DeliveryPipeline can be imported using any of these accepted formats

        ```sh
         $ pulumi import gcp:clouddeploy/deliveryPipeline:DeliveryPipeline default projects/{{project}}/locations/{{location}}/deliveryPipelines/{{name}}
        ```

        ```sh
         $ pulumi import gcp:clouddeploy/deliveryPipeline:DeliveryPipeline default {{project}}/{{location}}/{{name}}
        ```

        ```sh
         $ pulumi import gcp:clouddeploy/deliveryPipeline:DeliveryPipeline default {{location}}/{{name}}
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] annotations: User annotations. These attributes can only be set and used by the user, and not by Google Cloud Deploy. See https://google.aip.dev/128#annotations for more details such as format and size limitations.
        :param pulumi.Input[str] description: Description of the `DeliveryPipeline`. Max length is 255 characters.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Labels are attributes that can be set and used by both the user and by Google Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be <= 128 bytes.
        :param pulumi.Input[str] location: The location for the resource
        :param pulumi.Input[str] name: Name of the `DeliveryPipeline`. Format is [a-z][a-z0-9\\-]{0,62}.
        :param pulumi.Input[str] project: The project for the resource
        :param pulumi.Input[pulumi.InputType['DeliveryPipelineSerialPipelineArgs']] serial_pipeline: SerialPipeline defines a sequential set of stages for a `DeliveryPipeline`.
        :param pulumi.Input[bool] suspended: When suspended, no new releases or rollouts can be created, but in-progress ones will complete.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DeliveryPipelineArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The Cloud Deploy `DeliveryPipeline` resource

        ## Example Usage
        ### Canary_delivery_pipeline
        Creates a basic Cloud Deploy delivery pipeline
        ```python
        import pulumi
        import pulumi_gcp as gcp

        primary = gcp.clouddeploy.DeliveryPipeline("primary",
            location="us-west1",
            annotations={
                "my_first_annotation": "example-annotation-1",
                "my_second_annotation": "example-annotation-2",
            },
            description="basic description",
            labels={
                "my_first_label": "example-label-1",
                "my_second_label": "example-label-2",
            },
            project="my-project-name",
            serial_pipeline=gcp.clouddeploy.DeliveryPipelineSerialPipelineArgs(
                stages=[
                    gcp.clouddeploy.DeliveryPipelineSerialPipelineStageArgs(
                        deploy_parameters=[gcp.clouddeploy.DeliveryPipelineSerialPipelineStageDeployParameterArgs(
                            values={
                                "deployParameterKey": "deployParameterValue",
                            },
                            match_target_labels={},
                        )],
                        profiles=[
                            "example-profile-one",
                            "example-profile-two",
                        ],
                        target_id="example-target-one",
                    ),
                    gcp.clouddeploy.DeliveryPipelineSerialPipelineStageArgs(
                        profiles=[],
                        target_id="example-target-two",
                    ),
                ],
            ),
            opts=pulumi.ResourceOptions(provider=google_beta))
        ```
        ### Canary_service_networking_delivery_pipeline
        Creates a basic Cloud Deploy delivery pipeline
        ```python
        import pulumi
        import pulumi_gcp as gcp

        primary = gcp.clouddeploy.DeliveryPipeline("primary",
            location="us-west1",
            annotations={
                "my_first_annotation": "example-annotation-1",
                "my_second_annotation": "example-annotation-2",
            },
            description="basic description",
            labels={
                "my_first_label": "example-label-1",
                "my_second_label": "example-label-2",
            },
            project="my-project-name",
            serial_pipeline=gcp.clouddeploy.DeliveryPipelineSerialPipelineArgs(
                stages=[
                    gcp.clouddeploy.DeliveryPipelineSerialPipelineStageArgs(
                        deploy_parameters=[gcp.clouddeploy.DeliveryPipelineSerialPipelineStageDeployParameterArgs(
                            values={
                                "deployParameterKey": "deployParameterValue",
                            },
                            match_target_labels={},
                        )],
                        profiles=[
                            "example-profile-one",
                            "example-profile-two",
                        ],
                        target_id="example-target-one",
                    ),
                    gcp.clouddeploy.DeliveryPipelineSerialPipelineStageArgs(
                        profiles=[],
                        target_id="example-target-two",
                    ),
                ],
            ),
            opts=pulumi.ResourceOptions(provider=google_beta))
        ```
        ### Canaryrun_delivery_pipeline
        Creates a basic Cloud Deploy delivery pipeline
        ```python
        import pulumi
        import pulumi_gcp as gcp

        primary = gcp.clouddeploy.DeliveryPipeline("primary",
            location="us-west1",
            annotations={
                "my_first_annotation": "example-annotation-1",
                "my_second_annotation": "example-annotation-2",
            },
            description="basic description",
            labels={
                "my_first_label": "example-label-1",
                "my_second_label": "example-label-2",
            },
            project="my-project-name",
            serial_pipeline=gcp.clouddeploy.DeliveryPipelineSerialPipelineArgs(
                stages=[
                    gcp.clouddeploy.DeliveryPipelineSerialPipelineStageArgs(
                        deploy_parameters=[gcp.clouddeploy.DeliveryPipelineSerialPipelineStageDeployParameterArgs(
                            values={
                                "deployParameterKey": "deployParameterValue",
                            },
                            match_target_labels={},
                        )],
                        profiles=[
                            "example-profile-one",
                            "example-profile-two",
                        ],
                        target_id="example-target-one",
                    ),
                    gcp.clouddeploy.DeliveryPipelineSerialPipelineStageArgs(
                        profiles=[],
                        target_id="example-target-two",
                    ),
                ],
            ),
            opts=pulumi.ResourceOptions(provider=google_beta))
        ```
        ### Delivery_pipeline
        Creates a basic Cloud Deploy delivery pipeline
        ```python
        import pulumi
        import pulumi_gcp as gcp

        primary = gcp.clouddeploy.DeliveryPipeline("primary",
            annotations={
                "my_first_annotation": "example-annotation-1",
                "my_second_annotation": "example-annotation-2",
            },
            description="basic description",
            labels={
                "my_first_label": "example-label-1",
                "my_second_label": "example-label-2",
            },
            location="us-west1",
            project="my-project-name",
            serial_pipeline=gcp.clouddeploy.DeliveryPipelineSerialPipelineArgs(
                stages=[
                    gcp.clouddeploy.DeliveryPipelineSerialPipelineStageArgs(
                        deploy_parameters=[gcp.clouddeploy.DeliveryPipelineSerialPipelineStageDeployParameterArgs(
                            match_target_labels={},
                            values={
                                "deployParameterKey": "deployParameterValue",
                            },
                        )],
                        profiles=[
                            "example-profile-one",
                            "example-profile-two",
                        ],
                        target_id="example-target-one",
                    ),
                    gcp.clouddeploy.DeliveryPipelineSerialPipelineStageArgs(
                        profiles=[],
                        target_id="example-target-two",
                    ),
                ],
            ))
        ```
        ### Verify_delivery_pipeline
        tests creating and updating a delivery pipeline with deployment verification strategy
        ```python
        import pulumi
        import pulumi_gcp as gcp

        primary = gcp.clouddeploy.DeliveryPipeline("primary",
            location="us-west1",
            annotations={
                "my_first_annotation": "example-annotation-1",
                "my_second_annotation": "example-annotation-2",
            },
            description="basic description",
            labels={
                "my_first_label": "example-label-1",
                "my_second_label": "example-label-2",
            },
            project="my-project-name",
            serial_pipeline=gcp.clouddeploy.DeliveryPipelineSerialPipelineArgs(
                stages=[
                    gcp.clouddeploy.DeliveryPipelineSerialPipelineStageArgs(
                        deploy_parameters=[gcp.clouddeploy.DeliveryPipelineSerialPipelineStageDeployParameterArgs(
                            values={
                                "deployParameterKey": "deployParameterValue",
                            },
                            match_target_labels={},
                        )],
                        profiles=[
                            "example-profile-one",
                            "example-profile-two",
                        ],
                        target_id="example-target-one",
                    ),
                    gcp.clouddeploy.DeliveryPipelineSerialPipelineStageArgs(
                        profiles=[],
                        target_id="example-target-two",
                    ),
                ],
            ),
            opts=pulumi.ResourceOptions(provider=google_beta))
        ```

        ## Import

        DeliveryPipeline can be imported using any of these accepted formats

        ```sh
         $ pulumi import gcp:clouddeploy/deliveryPipeline:DeliveryPipeline default projects/{{project}}/locations/{{location}}/deliveryPipelines/{{name}}
        ```

        ```sh
         $ pulumi import gcp:clouddeploy/deliveryPipeline:DeliveryPipeline default {{project}}/{{location}}/{{name}}
        ```

        ```sh
         $ pulumi import gcp:clouddeploy/deliveryPipeline:DeliveryPipeline default {{location}}/{{name}}
        ```

        :param str resource_name: The name of the resource.
        :param DeliveryPipelineArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DeliveryPipelineArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            DeliveryPipelineArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 serial_pipeline: Optional[pulumi.Input[pulumi.InputType['DeliveryPipelineSerialPipelineArgs']]] = None,
                 suspended: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DeliveryPipelineArgs.__new__(DeliveryPipelineArgs)

            __props__.__dict__["annotations"] = annotations
            __props__.__dict__["description"] = description
            __props__.__dict__["labels"] = labels
            if location is None and not opts.urn:
                raise TypeError("Missing required property 'location'")
            __props__.__dict__["location"] = location
            __props__.__dict__["name"] = name
            __props__.__dict__["project"] = project
            if serial_pipeline is not None and not isinstance(serial_pipeline, DeliveryPipelineSerialPipelineArgs):
                serial_pipeline = serial_pipeline or {}
                def _setter(key, value):
                    serial_pipeline[key] = value
                DeliveryPipelineSerialPipelineArgs._configure(_setter, **serial_pipeline)
            __props__.__dict__["serial_pipeline"] = serial_pipeline
            __props__.__dict__["suspended"] = suspended
            __props__.__dict__["conditions"] = None
            __props__.__dict__["create_time"] = None
            __props__.__dict__["etag"] = None
            __props__.__dict__["uid"] = None
            __props__.__dict__["update_time"] = None
        super(DeliveryPipeline, __self__).__init__(
            'gcp:clouddeploy/deliveryPipeline:DeliveryPipeline',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            conditions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DeliveryPipelineConditionArgs']]]]] = None,
            create_time: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            etag: Optional[pulumi.Input[str]] = None,
            labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            location: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            project: Optional[pulumi.Input[str]] = None,
            serial_pipeline: Optional[pulumi.Input[pulumi.InputType['DeliveryPipelineSerialPipelineArgs']]] = None,
            suspended: Optional[pulumi.Input[bool]] = None,
            uid: Optional[pulumi.Input[str]] = None,
            update_time: Optional[pulumi.Input[str]] = None) -> 'DeliveryPipeline':
        """
        Get an existing DeliveryPipeline resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] annotations: User annotations. These attributes can only be set and used by the user, and not by Google Cloud Deploy. See https://google.aip.dev/128#annotations for more details such as format and size limitations.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DeliveryPipelineConditionArgs']]]] conditions: Output only. Information around the state of the Delivery Pipeline.
        :param pulumi.Input[str] create_time: Output only. Time at which the pipeline was created.
        :param pulumi.Input[str] description: Description of the `DeliveryPipeline`. Max length is 255 characters.
        :param pulumi.Input[str] etag: This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Labels are attributes that can be set and used by both the user and by Google Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be <= 128 bytes.
        :param pulumi.Input[str] location: The location for the resource
        :param pulumi.Input[str] name: Name of the `DeliveryPipeline`. Format is [a-z][a-z0-9\\-]{0,62}.
        :param pulumi.Input[str] project: The project for the resource
        :param pulumi.Input[pulumi.InputType['DeliveryPipelineSerialPipelineArgs']] serial_pipeline: SerialPipeline defines a sequential set of stages for a `DeliveryPipeline`.
        :param pulumi.Input[bool] suspended: When suspended, no new releases or rollouts can be created, but in-progress ones will complete.
        :param pulumi.Input[str] uid: Output only. Unique identifier of the `DeliveryPipeline`.
        :param pulumi.Input[str] update_time: Output only. Most recent time at which the pipeline was updated.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DeliveryPipelineState.__new__(_DeliveryPipelineState)

        __props__.__dict__["annotations"] = annotations
        __props__.__dict__["conditions"] = conditions
        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["description"] = description
        __props__.__dict__["etag"] = etag
        __props__.__dict__["labels"] = labels
        __props__.__dict__["location"] = location
        __props__.__dict__["name"] = name
        __props__.__dict__["project"] = project
        __props__.__dict__["serial_pipeline"] = serial_pipeline
        __props__.__dict__["suspended"] = suspended
        __props__.__dict__["uid"] = uid
        __props__.__dict__["update_time"] = update_time
        return DeliveryPipeline(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def annotations(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        User annotations. These attributes can only be set and used by the user, and not by Google Cloud Deploy. See https://google.aip.dev/128#annotations for more details such as format and size limitations.
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def conditions(self) -> pulumi.Output[Sequence['outputs.DeliveryPipelineCondition']]:
        """
        Output only. Information around the state of the Delivery Pipeline.
        """
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        Output only. Time at which the pipeline was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Description of the `DeliveryPipeline`. Max length is 255 characters.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def etag(self) -> pulumi.Output[str]:
        """
        This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Labels are attributes that can be set and used by both the user and by Google Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be <= 128 bytes.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        """
        The location for the resource
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the `DeliveryPipeline`. Format is [a-z][a-z0-9\\-]{0,62}.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[str]:
        """
        The project for the resource
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="serialPipeline")
    def serial_pipeline(self) -> pulumi.Output[Optional['outputs.DeliveryPipelineSerialPipeline']]:
        """
        SerialPipeline defines a sequential set of stages for a `DeliveryPipeline`.
        """
        return pulumi.get(self, "serial_pipeline")

    @property
    @pulumi.getter
    def suspended(self) -> pulumi.Output[Optional[bool]]:
        """
        When suspended, no new releases or rollouts can be created, but in-progress ones will complete.
        """
        return pulumi.get(self, "suspended")

    @property
    @pulumi.getter
    def uid(self) -> pulumi.Output[str]:
        """
        Output only. Unique identifier of the `DeliveryPipeline`.
        """
        return pulumi.get(self, "uid")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[str]:
        """
        Output only. Most recent time at which the pipeline was updated.
        """
        return pulumi.get(self, "update_time")

