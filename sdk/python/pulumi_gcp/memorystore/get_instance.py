# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetInstanceResult',
    'AwaitableGetInstanceResult',
    'get_instance',
    'get_instance_output',
]

@pulumi.output_type
class GetInstanceResult:
    """
    A collection of values returned by getInstance.
    """
    def __init__(__self__, authorization_mode=None, create_time=None, deletion_protection_enabled=None, desired_psc_auto_connections=None, discovery_endpoints=None, effective_labels=None, endpoints=None, engine_configs=None, engine_version=None, id=None, instance_id=None, labels=None, location=None, mode=None, name=None, node_configs=None, node_type=None, persistence_configs=None, project=None, psc_auto_connections=None, pulumi_labels=None, replica_count=None, shard_count=None, state=None, state_infos=None, transit_encryption_mode=None, uid=None, update_time=None, zone_distribution_configs=None):
        if authorization_mode and not isinstance(authorization_mode, str):
            raise TypeError("Expected argument 'authorization_mode' to be a str")
        pulumi.set(__self__, "authorization_mode", authorization_mode)
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if deletion_protection_enabled and not isinstance(deletion_protection_enabled, bool):
            raise TypeError("Expected argument 'deletion_protection_enabled' to be a bool")
        pulumi.set(__self__, "deletion_protection_enabled", deletion_protection_enabled)
        if desired_psc_auto_connections and not isinstance(desired_psc_auto_connections, list):
            raise TypeError("Expected argument 'desired_psc_auto_connections' to be a list")
        pulumi.set(__self__, "desired_psc_auto_connections", desired_psc_auto_connections)
        if discovery_endpoints and not isinstance(discovery_endpoints, list):
            raise TypeError("Expected argument 'discovery_endpoints' to be a list")
        pulumi.set(__self__, "discovery_endpoints", discovery_endpoints)
        if effective_labels and not isinstance(effective_labels, dict):
            raise TypeError("Expected argument 'effective_labels' to be a dict")
        pulumi.set(__self__, "effective_labels", effective_labels)
        if endpoints and not isinstance(endpoints, list):
            raise TypeError("Expected argument 'endpoints' to be a list")
        pulumi.set(__self__, "endpoints", endpoints)
        if engine_configs and not isinstance(engine_configs, dict):
            raise TypeError("Expected argument 'engine_configs' to be a dict")
        pulumi.set(__self__, "engine_configs", engine_configs)
        if engine_version and not isinstance(engine_version, str):
            raise TypeError("Expected argument 'engine_version' to be a str")
        pulumi.set(__self__, "engine_version", engine_version)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        pulumi.set(__self__, "labels", labels)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if mode and not isinstance(mode, str):
            raise TypeError("Expected argument 'mode' to be a str")
        pulumi.set(__self__, "mode", mode)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if node_configs and not isinstance(node_configs, list):
            raise TypeError("Expected argument 'node_configs' to be a list")
        pulumi.set(__self__, "node_configs", node_configs)
        if node_type and not isinstance(node_type, str):
            raise TypeError("Expected argument 'node_type' to be a str")
        pulumi.set(__self__, "node_type", node_type)
        if persistence_configs and not isinstance(persistence_configs, list):
            raise TypeError("Expected argument 'persistence_configs' to be a list")
        pulumi.set(__self__, "persistence_configs", persistence_configs)
        if project and not isinstance(project, str):
            raise TypeError("Expected argument 'project' to be a str")
        pulumi.set(__self__, "project", project)
        if psc_auto_connections and not isinstance(psc_auto_connections, list):
            raise TypeError("Expected argument 'psc_auto_connections' to be a list")
        pulumi.set(__self__, "psc_auto_connections", psc_auto_connections)
        if pulumi_labels and not isinstance(pulumi_labels, dict):
            raise TypeError("Expected argument 'pulumi_labels' to be a dict")
        pulumi.set(__self__, "pulumi_labels", pulumi_labels)
        if replica_count and not isinstance(replica_count, int):
            raise TypeError("Expected argument 'replica_count' to be a int")
        pulumi.set(__self__, "replica_count", replica_count)
        if shard_count and not isinstance(shard_count, int):
            raise TypeError("Expected argument 'shard_count' to be a int")
        pulumi.set(__self__, "shard_count", shard_count)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if state_infos and not isinstance(state_infos, list):
            raise TypeError("Expected argument 'state_infos' to be a list")
        pulumi.set(__self__, "state_infos", state_infos)
        if transit_encryption_mode and not isinstance(transit_encryption_mode, str):
            raise TypeError("Expected argument 'transit_encryption_mode' to be a str")
        pulumi.set(__self__, "transit_encryption_mode", transit_encryption_mode)
        if uid and not isinstance(uid, str):
            raise TypeError("Expected argument 'uid' to be a str")
        pulumi.set(__self__, "uid", uid)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)
        if zone_distribution_configs and not isinstance(zone_distribution_configs, list):
            raise TypeError("Expected argument 'zone_distribution_configs' to be a list")
        pulumi.set(__self__, "zone_distribution_configs", zone_distribution_configs)

    @property
    @pulumi.getter(name="authorizationMode")
    def authorization_mode(self) -> str:
        return pulumi.get(self, "authorization_mode")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="deletionProtectionEnabled")
    def deletion_protection_enabled(self) -> bool:
        return pulumi.get(self, "deletion_protection_enabled")

    @property
    @pulumi.getter(name="desiredPscAutoConnections")
    def desired_psc_auto_connections(self) -> Sequence['outputs.GetInstanceDesiredPscAutoConnectionResult']:
        return pulumi.get(self, "desired_psc_auto_connections")

    @property
    @pulumi.getter(name="discoveryEndpoints")
    def discovery_endpoints(self) -> Sequence['outputs.GetInstanceDiscoveryEndpointResult']:
        return pulumi.get(self, "discovery_endpoints")

    @property
    @pulumi.getter(name="effectiveLabels")
    def effective_labels(self) -> Mapping[str, str]:
        return pulumi.get(self, "effective_labels")

    @property
    @pulumi.getter
    def endpoints(self) -> Sequence['outputs.GetInstanceEndpointResult']:
        return pulumi.get(self, "endpoints")

    @property
    @pulumi.getter(name="engineConfigs")
    def engine_configs(self) -> Mapping[str, str]:
        return pulumi.get(self, "engine_configs")

    @property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> str:
        return pulumi.get(self, "engine_version")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodeConfigs")
    def node_configs(self) -> Sequence['outputs.GetInstanceNodeConfigResult']:
        return pulumi.get(self, "node_configs")

    @property
    @pulumi.getter(name="nodeType")
    def node_type(self) -> str:
        return pulumi.get(self, "node_type")

    @property
    @pulumi.getter(name="persistenceConfigs")
    def persistence_configs(self) -> Sequence['outputs.GetInstancePersistenceConfigResult']:
        return pulumi.get(self, "persistence_configs")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="pscAutoConnections")
    def psc_auto_connections(self) -> Sequence['outputs.GetInstancePscAutoConnectionResult']:
        return pulumi.get(self, "psc_auto_connections")

    @property
    @pulumi.getter(name="pulumiLabels")
    def pulumi_labels(self) -> Mapping[str, str]:
        return pulumi.get(self, "pulumi_labels")

    @property
    @pulumi.getter(name="replicaCount")
    def replica_count(self) -> int:
        return pulumi.get(self, "replica_count")

    @property
    @pulumi.getter(name="shardCount")
    def shard_count(self) -> int:
        return pulumi.get(self, "shard_count")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="stateInfos")
    def state_infos(self) -> Sequence['outputs.GetInstanceStateInfoResult']:
        return pulumi.get(self, "state_infos")

    @property
    @pulumi.getter(name="transitEncryptionMode")
    def transit_encryption_mode(self) -> str:
        return pulumi.get(self, "transit_encryption_mode")

    @property
    @pulumi.getter
    def uid(self) -> str:
        return pulumi.get(self, "uid")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="zoneDistributionConfigs")
    def zone_distribution_configs(self) -> Sequence['outputs.GetInstanceZoneDistributionConfigResult']:
        return pulumi.get(self, "zone_distribution_configs")


class AwaitableGetInstanceResult(GetInstanceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetInstanceResult(
            authorization_mode=self.authorization_mode,
            create_time=self.create_time,
            deletion_protection_enabled=self.deletion_protection_enabled,
            desired_psc_auto_connections=self.desired_psc_auto_connections,
            discovery_endpoints=self.discovery_endpoints,
            effective_labels=self.effective_labels,
            endpoints=self.endpoints,
            engine_configs=self.engine_configs,
            engine_version=self.engine_version,
            id=self.id,
            instance_id=self.instance_id,
            labels=self.labels,
            location=self.location,
            mode=self.mode,
            name=self.name,
            node_configs=self.node_configs,
            node_type=self.node_type,
            persistence_configs=self.persistence_configs,
            project=self.project,
            psc_auto_connections=self.psc_auto_connections,
            pulumi_labels=self.pulumi_labels,
            replica_count=self.replica_count,
            shard_count=self.shard_count,
            state=self.state,
            state_infos=self.state_infos,
            transit_encryption_mode=self.transit_encryption_mode,
            uid=self.uid,
            update_time=self.update_time,
            zone_distribution_configs=self.zone_distribution_configs)


def get_instance(instance_id: Optional[str] = None,
                 location: Optional[str] = None,
                 project: Optional[str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetInstanceResult:
    """
    Use this data source to get information about the available instance. For more details refer the [API docs](https://cloud.google.com/memorystore/docs/valkey/reference/rest/v1/projects.locations.instances).

    ## Example Usage

    ```python
    import pulumi
    import pulumi_gcp as gcp

    qa = gcp.memorystore.get_instance()
    ```


    :param str instance_id: The ID of the memorystore instance.
           'memorystore_instance_id'
    :param str location: (optional)
           The canonical id of the location.If it is not provided, the provider project is used. For example: us-east1.
    :param str project: (optional)
           The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['location'] = location
    __args__['project'] = project
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('gcp:memorystore/getInstance:getInstance', __args__, opts=opts, typ=GetInstanceResult).value

    return AwaitableGetInstanceResult(
        authorization_mode=pulumi.get(__ret__, 'authorization_mode'),
        create_time=pulumi.get(__ret__, 'create_time'),
        deletion_protection_enabled=pulumi.get(__ret__, 'deletion_protection_enabled'),
        desired_psc_auto_connections=pulumi.get(__ret__, 'desired_psc_auto_connections'),
        discovery_endpoints=pulumi.get(__ret__, 'discovery_endpoints'),
        effective_labels=pulumi.get(__ret__, 'effective_labels'),
        endpoints=pulumi.get(__ret__, 'endpoints'),
        engine_configs=pulumi.get(__ret__, 'engine_configs'),
        engine_version=pulumi.get(__ret__, 'engine_version'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        labels=pulumi.get(__ret__, 'labels'),
        location=pulumi.get(__ret__, 'location'),
        mode=pulumi.get(__ret__, 'mode'),
        name=pulumi.get(__ret__, 'name'),
        node_configs=pulumi.get(__ret__, 'node_configs'),
        node_type=pulumi.get(__ret__, 'node_type'),
        persistence_configs=pulumi.get(__ret__, 'persistence_configs'),
        project=pulumi.get(__ret__, 'project'),
        psc_auto_connections=pulumi.get(__ret__, 'psc_auto_connections'),
        pulumi_labels=pulumi.get(__ret__, 'pulumi_labels'),
        replica_count=pulumi.get(__ret__, 'replica_count'),
        shard_count=pulumi.get(__ret__, 'shard_count'),
        state=pulumi.get(__ret__, 'state'),
        state_infos=pulumi.get(__ret__, 'state_infos'),
        transit_encryption_mode=pulumi.get(__ret__, 'transit_encryption_mode'),
        uid=pulumi.get(__ret__, 'uid'),
        update_time=pulumi.get(__ret__, 'update_time'),
        zone_distribution_configs=pulumi.get(__ret__, 'zone_distribution_configs'))
def get_instance_output(instance_id: Optional[pulumi.Input[str]] = None,
                        location: Optional[pulumi.Input[Optional[str]]] = None,
                        project: Optional[pulumi.Input[Optional[str]]] = None,
                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetInstanceResult]:
    """
    Use this data source to get information about the available instance. For more details refer the [API docs](https://cloud.google.com/memorystore/docs/valkey/reference/rest/v1/projects.locations.instances).

    ## Example Usage

    ```python
    import pulumi
    import pulumi_gcp as gcp

    qa = gcp.memorystore.get_instance()
    ```


    :param str instance_id: The ID of the memorystore instance.
           'memorystore_instance_id'
    :param str location: (optional)
           The canonical id of the location.If it is not provided, the provider project is used. For example: us-east1.
    :param str project: (optional)
           The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['location'] = location
    __args__['project'] = project
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('gcp:memorystore/getInstance:getInstance', __args__, opts=opts, typ=GetInstanceResult)
    return __ret__.apply(lambda __response__: GetInstanceResult(
        authorization_mode=pulumi.get(__response__, 'authorization_mode'),
        create_time=pulumi.get(__response__, 'create_time'),
        deletion_protection_enabled=pulumi.get(__response__, 'deletion_protection_enabled'),
        desired_psc_auto_connections=pulumi.get(__response__, 'desired_psc_auto_connections'),
        discovery_endpoints=pulumi.get(__response__, 'discovery_endpoints'),
        effective_labels=pulumi.get(__response__, 'effective_labels'),
        endpoints=pulumi.get(__response__, 'endpoints'),
        engine_configs=pulumi.get(__response__, 'engine_configs'),
        engine_version=pulumi.get(__response__, 'engine_version'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        labels=pulumi.get(__response__, 'labels'),
        location=pulumi.get(__response__, 'location'),
        mode=pulumi.get(__response__, 'mode'),
        name=pulumi.get(__response__, 'name'),
        node_configs=pulumi.get(__response__, 'node_configs'),
        node_type=pulumi.get(__response__, 'node_type'),
        persistence_configs=pulumi.get(__response__, 'persistence_configs'),
        project=pulumi.get(__response__, 'project'),
        psc_auto_connections=pulumi.get(__response__, 'psc_auto_connections'),
        pulumi_labels=pulumi.get(__response__, 'pulumi_labels'),
        replica_count=pulumi.get(__response__, 'replica_count'),
        shard_count=pulumi.get(__response__, 'shard_count'),
        state=pulumi.get(__response__, 'state'),
        state_infos=pulumi.get(__response__, 'state_infos'),
        transit_encryption_mode=pulumi.get(__response__, 'transit_encryption_mode'),
        uid=pulumi.get(__response__, 'uid'),
        update_time=pulumi.get(__response__, 'update_time'),
        zone_distribution_configs=pulumi.get(__response__, 'zone_distribution_configs')))
