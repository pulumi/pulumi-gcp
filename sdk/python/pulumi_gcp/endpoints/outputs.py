# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'ConsumersIamBindingCondition',
    'ConsumersIamMemberCondition',
    'ServiceApi',
    'ServiceApiMethod',
    'ServiceEndpoint',
    'ServiceIamBindingCondition',
    'ServiceIamMemberCondition',
]

@pulumi.output_type
class ConsumersIamBindingCondition(dict):
    def __init__(__self__, *,
                 expression: _builtins.str,
                 title: _builtins.str,
                 description: Optional[_builtins.str] = None):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "title", title)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @_builtins.property
    @pulumi.getter
    def expression(self) -> _builtins.str:
        return pulumi.get(self, "expression")

    @_builtins.property
    @pulumi.getter
    def title(self) -> _builtins.str:
        return pulumi.get(self, "title")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "description")


@pulumi.output_type
class ConsumersIamMemberCondition(dict):
    def __init__(__self__, *,
                 expression: _builtins.str,
                 title: _builtins.str,
                 description: Optional[_builtins.str] = None):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "title", title)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @_builtins.property
    @pulumi.getter
    def expression(self) -> _builtins.str:
        return pulumi.get(self, "expression")

    @_builtins.property
    @pulumi.getter
    def title(self) -> _builtins.str:
        return pulumi.get(self, "title")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "description")


@pulumi.output_type
class ServiceApi(dict):
    def __init__(__self__, *,
                 methods: Optional[Sequence['outputs.ServiceApiMethod']] = None,
                 name: Optional[_builtins.str] = None,
                 syntax: Optional[_builtins.str] = None,
                 version: Optional[_builtins.str] = None):
        """
        :param Sequence['ServiceApiMethodArgs'] methods: A list of Method objects; structure is documented below.
        :param _builtins.str name: The simple name of the endpoint as described in the config.
        :param _builtins.str syntax: `SYNTAX_PROTO2` or `SYNTAX_PROTO3`.
        :param _builtins.str version: A version string for this api. If specified, will have the form major-version.minor-version, e.g. `1.10`.
        """
        if methods is not None:
            pulumi.set(__self__, "methods", methods)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if syntax is not None:
            pulumi.set(__self__, "syntax", syntax)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def methods(self) -> Optional[Sequence['outputs.ServiceApiMethod']]:
        """
        A list of Method objects; structure is documented below.
        """
        return pulumi.get(self, "methods")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The simple name of the endpoint as described in the config.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def syntax(self) -> Optional[_builtins.str]:
        """
        `SYNTAX_PROTO2` or `SYNTAX_PROTO3`.
        """
        return pulumi.get(self, "syntax")

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[_builtins.str]:
        """
        A version string for this api. If specified, will have the form major-version.minor-version, e.g. `1.10`.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ServiceApiMethod(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "requestType":
            suggest = "request_type"
        elif key == "responseType":
            suggest = "response_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceApiMethod. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceApiMethod.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceApiMethod.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: Optional[_builtins.str] = None,
                 request_type: Optional[_builtins.str] = None,
                 response_type: Optional[_builtins.str] = None,
                 syntax: Optional[_builtins.str] = None):
        """
        :param _builtins.str name: The simple name of the endpoint as described in the config.
        :param _builtins.str request_type: The type URL for the request to this API.
        :param _builtins.str response_type: The type URL for the response from this API.
        :param _builtins.str syntax: `SYNTAX_PROTO2` or `SYNTAX_PROTO3`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if request_type is not None:
            pulumi.set(__self__, "request_type", request_type)
        if response_type is not None:
            pulumi.set(__self__, "response_type", response_type)
        if syntax is not None:
            pulumi.set(__self__, "syntax", syntax)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The simple name of the endpoint as described in the config.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="requestType")
    def request_type(self) -> Optional[_builtins.str]:
        """
        The type URL for the request to this API.
        """
        return pulumi.get(self, "request_type")

    @_builtins.property
    @pulumi.getter(name="responseType")
    def response_type(self) -> Optional[_builtins.str]:
        """
        The type URL for the response from this API.
        """
        return pulumi.get(self, "response_type")

    @_builtins.property
    @pulumi.getter
    def syntax(self) -> Optional[_builtins.str]:
        """
        `SYNTAX_PROTO2` or `SYNTAX_PROTO3`.
        """
        return pulumi.get(self, "syntax")


@pulumi.output_type
class ServiceEndpoint(dict):
    def __init__(__self__, *,
                 address: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None):
        """
        :param _builtins.str address: The FQDN of the endpoint as described in the config.
        :param _builtins.str name: The simple name of the endpoint as described in the config.
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def address(self) -> Optional[_builtins.str]:
        """
        The FQDN of the endpoint as described in the config.
        """
        return pulumi.get(self, "address")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The simple name of the endpoint as described in the config.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ServiceIamBindingCondition(dict):
    def __init__(__self__, *,
                 expression: _builtins.str,
                 title: _builtins.str,
                 description: Optional[_builtins.str] = None):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "title", title)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @_builtins.property
    @pulumi.getter
    def expression(self) -> _builtins.str:
        return pulumi.get(self, "expression")

    @_builtins.property
    @pulumi.getter
    def title(self) -> _builtins.str:
        return pulumi.get(self, "title")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "description")


@pulumi.output_type
class ServiceIamMemberCondition(dict):
    def __init__(__self__, *,
                 expression: _builtins.str,
                 title: _builtins.str,
                 description: Optional[_builtins.str] = None):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "title", title)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @_builtins.property
    @pulumi.getter
    def expression(self) -> _builtins.str:
        return pulumi.get(self, "expression")

    @_builtins.property
    @pulumi.getter
    def title(self) -> _builtins.str:
        return pulumi.get(self, "title")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "description")


