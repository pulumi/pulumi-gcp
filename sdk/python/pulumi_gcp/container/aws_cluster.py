# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AwsClusterArgs', 'AwsCluster']

@pulumi.input_type
class AwsClusterArgs:
    def __init__(__self__, *,
                 authorization: pulumi.Input['AwsClusterAuthorizationArgs'],
                 aws_region: pulumi.Input[str],
                 control_plane: pulumi.Input['AwsClusterControlPlaneArgs'],
                 fleet: pulumi.Input['AwsClusterFleetArgs'],
                 location: pulumi.Input[str],
                 networking: pulumi.Input['AwsClusterNetworkingArgs'],
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 logging_config: Optional[pulumi.Input['AwsClusterLoggingConfigArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a AwsCluster resource.
        :param pulumi.Input['AwsClusterAuthorizationArgs'] authorization: Configuration related to the cluster RBAC settings.
        :param pulumi.Input[str] aws_region: The AWS region where the cluster runs. Each Google Cloud region supports a subset of nearby AWS regions. You can call to list all supported AWS regions within a given Google Cloud region.
        :param pulumi.Input['AwsClusterControlPlaneArgs'] control_plane: Configuration related to the cluster control plane.
        :param pulumi.Input['AwsClusterFleetArgs'] fleet: Fleet configuration.
        :param pulumi.Input[str] location: The location for the resource
        :param pulumi.Input['AwsClusterNetworkingArgs'] networking: Cluster-wide networking configuration.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] annotations: Optional. Annotations on the cluster. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.
        :param pulumi.Input[str] description: Optional. A human readable description of this cluster. Cannot be longer than 255 UTF-8 encoded bytes.
        :param pulumi.Input['AwsClusterLoggingConfigArgs'] logging_config: (Beta only) Logging configuration.
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input[str] project: The number of the Fleet host project where this cluster will be registered.
        """
        AwsClusterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            authorization=authorization,
            aws_region=aws_region,
            control_plane=control_plane,
            fleet=fleet,
            location=location,
            networking=networking,
            annotations=annotations,
            description=description,
            logging_config=logging_config,
            name=name,
            project=project,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             authorization: pulumi.Input['AwsClusterAuthorizationArgs'],
             aws_region: pulumi.Input[str],
             control_plane: pulumi.Input['AwsClusterControlPlaneArgs'],
             fleet: pulumi.Input['AwsClusterFleetArgs'],
             location: pulumi.Input[str],
             networking: pulumi.Input['AwsClusterNetworkingArgs'],
             annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             description: Optional[pulumi.Input[str]] = None,
             logging_config: Optional[pulumi.Input['AwsClusterLoggingConfigArgs']] = None,
             name: Optional[pulumi.Input[str]] = None,
             project: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("authorization", authorization)
        _setter("aws_region", aws_region)
        _setter("control_plane", control_plane)
        _setter("fleet", fleet)
        _setter("location", location)
        _setter("networking", networking)
        if annotations is not None:
            _setter("annotations", annotations)
        if description is not None:
            _setter("description", description)
        if logging_config is not None:
            _setter("logging_config", logging_config)
        if name is not None:
            _setter("name", name)
        if project is not None:
            _setter("project", project)

    @property
    @pulumi.getter
    def authorization(self) -> pulumi.Input['AwsClusterAuthorizationArgs']:
        """
        Configuration related to the cluster RBAC settings.
        """
        return pulumi.get(self, "authorization")

    @authorization.setter
    def authorization(self, value: pulumi.Input['AwsClusterAuthorizationArgs']):
        pulumi.set(self, "authorization", value)

    @property
    @pulumi.getter(name="awsRegion")
    def aws_region(self) -> pulumi.Input[str]:
        """
        The AWS region where the cluster runs. Each Google Cloud region supports a subset of nearby AWS regions. You can call to list all supported AWS regions within a given Google Cloud region.
        """
        return pulumi.get(self, "aws_region")

    @aws_region.setter
    def aws_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "aws_region", value)

    @property
    @pulumi.getter(name="controlPlane")
    def control_plane(self) -> pulumi.Input['AwsClusterControlPlaneArgs']:
        """
        Configuration related to the cluster control plane.
        """
        return pulumi.get(self, "control_plane")

    @control_plane.setter
    def control_plane(self, value: pulumi.Input['AwsClusterControlPlaneArgs']):
        pulumi.set(self, "control_plane", value)

    @property
    @pulumi.getter
    def fleet(self) -> pulumi.Input['AwsClusterFleetArgs']:
        """
        Fleet configuration.
        """
        return pulumi.get(self, "fleet")

    @fleet.setter
    def fleet(self, value: pulumi.Input['AwsClusterFleetArgs']):
        pulumi.set(self, "fleet", value)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input[str]:
        """
        The location for the resource
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[str]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def networking(self) -> pulumi.Input['AwsClusterNetworkingArgs']:
        """
        Cluster-wide networking configuration.
        """
        return pulumi.get(self, "networking")

    @networking.setter
    def networking(self, value: pulumi.Input['AwsClusterNetworkingArgs']):
        pulumi.set(self, "networking", value)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Optional. Annotations on the cluster. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. A human readable description of this cluster. Cannot be longer than 255 UTF-8 encoded bytes.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="loggingConfig")
    def logging_config(self) -> Optional[pulumi.Input['AwsClusterLoggingConfigArgs']]:
        """
        (Beta only) Logging configuration.
        """
        return pulumi.get(self, "logging_config")

    @logging_config.setter
    def logging_config(self, value: Optional[pulumi.Input['AwsClusterLoggingConfigArgs']]):
        pulumi.set(self, "logging_config", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        """
        The number of the Fleet host project where this cluster will be registered.
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)


@pulumi.input_type
class _AwsClusterState:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 authorization: Optional[pulumi.Input['AwsClusterAuthorizationArgs']] = None,
                 aws_region: Optional[pulumi.Input[str]] = None,
                 control_plane: Optional[pulumi.Input['AwsClusterControlPlaneArgs']] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 endpoint: Optional[pulumi.Input[str]] = None,
                 etag: Optional[pulumi.Input[str]] = None,
                 fleet: Optional[pulumi.Input['AwsClusterFleetArgs']] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 logging_config: Optional[pulumi.Input['AwsClusterLoggingConfigArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 networking: Optional[pulumi.Input['AwsClusterNetworkingArgs']] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 reconciling: Optional[pulumi.Input[bool]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 uid: Optional[pulumi.Input[str]] = None,
                 update_time: Optional[pulumi.Input[str]] = None,
                 workload_identity_configs: Optional[pulumi.Input[Sequence[pulumi.Input['AwsClusterWorkloadIdentityConfigArgs']]]] = None):
        """
        Input properties used for looking up and filtering AwsCluster resources.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] annotations: Optional. Annotations on the cluster. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.
        :param pulumi.Input['AwsClusterAuthorizationArgs'] authorization: Configuration related to the cluster RBAC settings.
        :param pulumi.Input[str] aws_region: The AWS region where the cluster runs. Each Google Cloud region supports a subset of nearby AWS regions. You can call to list all supported AWS regions within a given Google Cloud region.
        :param pulumi.Input['AwsClusterControlPlaneArgs'] control_plane: Configuration related to the cluster control plane.
        :param pulumi.Input[str] create_time: Output only. The time at which this cluster was created.
        :param pulumi.Input[str] description: Optional. A human readable description of this cluster. Cannot be longer than 255 UTF-8 encoded bytes.
        :param pulumi.Input[str] endpoint: Output only. The endpoint of the cluster's API server.
        :param pulumi.Input[str] etag: Allows clients to perform consistent read-modify-writes through optimistic concurrency control. May be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
        :param pulumi.Input['AwsClusterFleetArgs'] fleet: Fleet configuration.
        :param pulumi.Input[str] location: The location for the resource
        :param pulumi.Input['AwsClusterLoggingConfigArgs'] logging_config: (Beta only) Logging configuration.
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input['AwsClusterNetworkingArgs'] networking: Cluster-wide networking configuration.
        :param pulumi.Input[str] project: The number of the Fleet host project where this cluster will be registered.
        :param pulumi.Input[bool] reconciling: Output only. If set, there are currently changes in flight to the cluster.
        :param pulumi.Input[str] state: Output only. The current state of the cluster. Possible values: STATE_UNSPECIFIED, PROVISIONING, RUNNING, RECONCILING, STOPPING, ERROR, DEGRADED
        :param pulumi.Input[str] uid: Output only. A globally unique identifier for the cluster.
        :param pulumi.Input[str] update_time: Output only. The time at which this cluster was last updated.
        :param pulumi.Input[Sequence[pulumi.Input['AwsClusterWorkloadIdentityConfigArgs']]] workload_identity_configs: Output only. Workload Identity settings.
        """
        _AwsClusterState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            annotations=annotations,
            authorization=authorization,
            aws_region=aws_region,
            control_plane=control_plane,
            create_time=create_time,
            description=description,
            endpoint=endpoint,
            etag=etag,
            fleet=fleet,
            location=location,
            logging_config=logging_config,
            name=name,
            networking=networking,
            project=project,
            reconciling=reconciling,
            state=state,
            uid=uid,
            update_time=update_time,
            workload_identity_configs=workload_identity_configs,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             authorization: Optional[pulumi.Input['AwsClusterAuthorizationArgs']] = None,
             aws_region: Optional[pulumi.Input[str]] = None,
             control_plane: Optional[pulumi.Input['AwsClusterControlPlaneArgs']] = None,
             create_time: Optional[pulumi.Input[str]] = None,
             description: Optional[pulumi.Input[str]] = None,
             endpoint: Optional[pulumi.Input[str]] = None,
             etag: Optional[pulumi.Input[str]] = None,
             fleet: Optional[pulumi.Input['AwsClusterFleetArgs']] = None,
             location: Optional[pulumi.Input[str]] = None,
             logging_config: Optional[pulumi.Input['AwsClusterLoggingConfigArgs']] = None,
             name: Optional[pulumi.Input[str]] = None,
             networking: Optional[pulumi.Input['AwsClusterNetworkingArgs']] = None,
             project: Optional[pulumi.Input[str]] = None,
             reconciling: Optional[pulumi.Input[bool]] = None,
             state: Optional[pulumi.Input[str]] = None,
             uid: Optional[pulumi.Input[str]] = None,
             update_time: Optional[pulumi.Input[str]] = None,
             workload_identity_configs: Optional[pulumi.Input[Sequence[pulumi.Input['AwsClusterWorkloadIdentityConfigArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if annotations is not None:
            _setter("annotations", annotations)
        if authorization is not None:
            _setter("authorization", authorization)
        if aws_region is not None:
            _setter("aws_region", aws_region)
        if control_plane is not None:
            _setter("control_plane", control_plane)
        if create_time is not None:
            _setter("create_time", create_time)
        if description is not None:
            _setter("description", description)
        if endpoint is not None:
            _setter("endpoint", endpoint)
        if etag is not None:
            _setter("etag", etag)
        if fleet is not None:
            _setter("fleet", fleet)
        if location is not None:
            _setter("location", location)
        if logging_config is not None:
            _setter("logging_config", logging_config)
        if name is not None:
            _setter("name", name)
        if networking is not None:
            _setter("networking", networking)
        if project is not None:
            _setter("project", project)
        if reconciling is not None:
            _setter("reconciling", reconciling)
        if state is not None:
            _setter("state", state)
        if uid is not None:
            _setter("uid", uid)
        if update_time is not None:
            _setter("update_time", update_time)
        if workload_identity_configs is not None:
            _setter("workload_identity_configs", workload_identity_configs)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Optional. Annotations on the cluster. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def authorization(self) -> Optional[pulumi.Input['AwsClusterAuthorizationArgs']]:
        """
        Configuration related to the cluster RBAC settings.
        """
        return pulumi.get(self, "authorization")

    @authorization.setter
    def authorization(self, value: Optional[pulumi.Input['AwsClusterAuthorizationArgs']]):
        pulumi.set(self, "authorization", value)

    @property
    @pulumi.getter(name="awsRegion")
    def aws_region(self) -> Optional[pulumi.Input[str]]:
        """
        The AWS region where the cluster runs. Each Google Cloud region supports a subset of nearby AWS regions. You can call to list all supported AWS regions within a given Google Cloud region.
        """
        return pulumi.get(self, "aws_region")

    @aws_region.setter
    def aws_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aws_region", value)

    @property
    @pulumi.getter(name="controlPlane")
    def control_plane(self) -> Optional[pulumi.Input['AwsClusterControlPlaneArgs']]:
        """
        Configuration related to the cluster control plane.
        """
        return pulumi.get(self, "control_plane")

    @control_plane.setter
    def control_plane(self, value: Optional[pulumi.Input['AwsClusterControlPlaneArgs']]):
        pulumi.set(self, "control_plane", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        Output only. The time at which this cluster was created.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. A human readable description of this cluster. Cannot be longer than 255 UTF-8 encoded bytes.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        Output only. The endpoint of the cluster's API server.
        """
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter
    def etag(self) -> Optional[pulumi.Input[str]]:
        """
        Allows clients to perform consistent read-modify-writes through optimistic concurrency control. May be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
        """
        return pulumi.get(self, "etag")

    @etag.setter
    def etag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "etag", value)

    @property
    @pulumi.getter
    def fleet(self) -> Optional[pulumi.Input['AwsClusterFleetArgs']]:
        """
        Fleet configuration.
        """
        return pulumi.get(self, "fleet")

    @fleet.setter
    def fleet(self, value: Optional[pulumi.Input['AwsClusterFleetArgs']]):
        pulumi.set(self, "fleet", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        The location for the resource
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="loggingConfig")
    def logging_config(self) -> Optional[pulumi.Input['AwsClusterLoggingConfigArgs']]:
        """
        (Beta only) Logging configuration.
        """
        return pulumi.get(self, "logging_config")

    @logging_config.setter
    def logging_config(self, value: Optional[pulumi.Input['AwsClusterLoggingConfigArgs']]):
        pulumi.set(self, "logging_config", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def networking(self) -> Optional[pulumi.Input['AwsClusterNetworkingArgs']]:
        """
        Cluster-wide networking configuration.
        """
        return pulumi.get(self, "networking")

    @networking.setter
    def networking(self, value: Optional[pulumi.Input['AwsClusterNetworkingArgs']]):
        pulumi.set(self, "networking", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        """
        The number of the Fleet host project where this cluster will be registered.
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def reconciling(self) -> Optional[pulumi.Input[bool]]:
        """
        Output only. If set, there are currently changes in flight to the cluster.
        """
        return pulumi.get(self, "reconciling")

    @reconciling.setter
    def reconciling(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "reconciling", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        Output only. The current state of the cluster. Possible values: STATE_UNSPECIFIED, PROVISIONING, RUNNING, RECONCILING, STOPPING, ERROR, DEGRADED
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter
    def uid(self) -> Optional[pulumi.Input[str]]:
        """
        Output only. A globally unique identifier for the cluster.
        """
        return pulumi.get(self, "uid")

    @uid.setter
    def uid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uid", value)

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[str]]:
        """
        Output only. The time at which this cluster was last updated.
        """
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_time", value)

    @property
    @pulumi.getter(name="workloadIdentityConfigs")
    def workload_identity_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AwsClusterWorkloadIdentityConfigArgs']]]]:
        """
        Output only. Workload Identity settings.
        """
        return pulumi.get(self, "workload_identity_configs")

    @workload_identity_configs.setter
    def workload_identity_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AwsClusterWorkloadIdentityConfigArgs']]]]):
        pulumi.set(self, "workload_identity_configs", value)


class AwsCluster(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 authorization: Optional[pulumi.Input[pulumi.InputType['AwsClusterAuthorizationArgs']]] = None,
                 aws_region: Optional[pulumi.Input[str]] = None,
                 control_plane: Optional[pulumi.Input[pulumi.InputType['AwsClusterControlPlaneArgs']]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 fleet: Optional[pulumi.Input[pulumi.InputType['AwsClusterFleetArgs']]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 logging_config: Optional[pulumi.Input[pulumi.InputType['AwsClusterLoggingConfigArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 networking: Optional[pulumi.Input[pulumi.InputType['AwsClusterNetworkingArgs']]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        An Anthos cluster running on AWS.

        For more information, see:
        * [Multicloud overview](https://cloud.google.com/anthos/clusters/docs/multi-cloud)
        ## Example Usage
        ### Basic_aws_cluster
        A basic example of a containeraws cluster
        ```python
        import pulumi
        import pulumi_gcp as gcp

        versions = gcp.container.get_aws_versions(location="us-west1",
            project="my-project-name")
        primary = gcp.container.AwsCluster("primary",
            annotations={
                "label-one": "value-one",
            },
            authorization=gcp.container.AwsClusterAuthorizationArgs(
                admin_users=[gcp.container.AwsClusterAuthorizationAdminUserArgs(
                    username="my@service-account.com",
                )],
            ),
            aws_region="my-aws-region",
            control_plane=gcp.container.AwsClusterControlPlaneArgs(
                aws_services_authentication=gcp.container.AwsClusterControlPlaneAwsServicesAuthenticationArgs(
                    role_arn="arn:aws:iam::012345678910:role/my--1p-dev-oneplatform",
                    role_session_name="my--1p-dev-session",
                ),
                config_encryption=gcp.container.AwsClusterControlPlaneConfigEncryptionArgs(
                    kms_key_arn="arn:aws:kms:my-aws-region:012345678910:key/12345678-1234-1234-1234-123456789111",
                ),
                database_encryption=gcp.container.AwsClusterControlPlaneDatabaseEncryptionArgs(
                    kms_key_arn="arn:aws:kms:my-aws-region:012345678910:key/12345678-1234-1234-1234-123456789111",
                ),
                iam_instance_profile="my--1p-dev-controlplane",
                instance_type="t3.medium",
                main_volume=gcp.container.AwsClusterControlPlaneMainVolumeArgs(
                    iops=3000,
                    kms_key_arn="arn:aws:kms:my-aws-region:012345678910:key/12345678-1234-1234-1234-123456789111",
                    size_gib=10,
                    volume_type="GP3",
                ),
                proxy_config=gcp.container.AwsClusterControlPlaneProxyConfigArgs(
                    secret_arn="arn:aws:secretsmanager:us-west-2:126285863215:secret:proxy_config20210824150329476300000001-ABCDEF",
                    secret_version="12345678-ABCD-EFGH-IJKL-987654321098",
                ),
                root_volume=gcp.container.AwsClusterControlPlaneRootVolumeArgs(
                    iops=3000,
                    kms_key_arn="arn:aws:kms:my-aws-region:012345678910:key/12345678-1234-1234-1234-123456789111",
                    size_gib=10,
                    volume_type="GP3",
                ),
                security_group_ids=["sg-00000000000000000"],
                ssh_config=gcp.container.AwsClusterControlPlaneSshConfigArgs(
                    ec2_key_pair="my--1p-dev-ssh",
                ),
                subnet_ids=["subnet-00000000000000000"],
                tags={
                    "owner": "my@service-account.com",
                },
                version=versions.valid_versions[0],
            ),
            description="A sample aws cluster",
            fleet=gcp.container.AwsClusterFleetArgs(
                project="my-project-number",
            ),
            location="us-west1",
            networking=gcp.container.AwsClusterNetworkingArgs(
                pod_address_cidr_blocks=["10.2.0.0/16"],
                service_address_cidr_blocks=["10.1.0.0/16"],
                vpc_id="vpc-00000000000000000",
            ),
            project="my-project-name")
        ```
        ### Basic_enum_aws_cluster
        A basic example of a containeraws cluster with lowercase enums
        ```python
        import pulumi
        import pulumi_gcp as gcp

        versions = gcp.container.get_aws_versions(location="us-west1",
            project="my-project-name")
        primary = gcp.container.AwsCluster("primary",
            annotations={
                "label-one": "value-one",
            },
            authorization=gcp.container.AwsClusterAuthorizationArgs(
                admin_users=[gcp.container.AwsClusterAuthorizationAdminUserArgs(
                    username="my@service-account.com",
                )],
            ),
            aws_region="my-aws-region",
            control_plane=gcp.container.AwsClusterControlPlaneArgs(
                aws_services_authentication=gcp.container.AwsClusterControlPlaneAwsServicesAuthenticationArgs(
                    role_arn="arn:aws:iam::012345678910:role/my--1p-dev-oneplatform",
                    role_session_name="my--1p-dev-session",
                ),
                config_encryption=gcp.container.AwsClusterControlPlaneConfigEncryptionArgs(
                    kms_key_arn="arn:aws:kms:my-aws-region:012345678910:key/12345678-1234-1234-1234-123456789111",
                ),
                database_encryption=gcp.container.AwsClusterControlPlaneDatabaseEncryptionArgs(
                    kms_key_arn="arn:aws:kms:my-aws-region:012345678910:key/12345678-1234-1234-1234-123456789111",
                ),
                iam_instance_profile="my--1p-dev-controlplane",
                instance_type="t3.medium",
                main_volume=gcp.container.AwsClusterControlPlaneMainVolumeArgs(
                    iops=3000,
                    kms_key_arn="arn:aws:kms:my-aws-region:012345678910:key/12345678-1234-1234-1234-123456789111",
                    size_gib=10,
                    volume_type="gp3",
                ),
                proxy_config=gcp.container.AwsClusterControlPlaneProxyConfigArgs(
                    secret_arn="arn:aws:secretsmanager:us-west-2:126285863215:secret:proxy_config20210824150329476300000001-ABCDEF",
                    secret_version="12345678-ABCD-EFGH-IJKL-987654321098",
                ),
                root_volume=gcp.container.AwsClusterControlPlaneRootVolumeArgs(
                    iops=3000,
                    kms_key_arn="arn:aws:kms:my-aws-region:012345678910:key/12345678-1234-1234-1234-123456789111",
                    size_gib=10,
                    volume_type="gp3",
                ),
                security_group_ids=["sg-00000000000000000"],
                ssh_config=gcp.container.AwsClusterControlPlaneSshConfigArgs(
                    ec2_key_pair="my--1p-dev-ssh",
                ),
                subnet_ids=["subnet-00000000000000000"],
                tags={
                    "owner": "my@service-account.com",
                },
                version=versions.valid_versions[0],
            ),
            description="A sample aws cluster",
            fleet=gcp.container.AwsClusterFleetArgs(
                project="my-project-number",
            ),
            location="us-west1",
            networking=gcp.container.AwsClusterNetworkingArgs(
                pod_address_cidr_blocks=["10.2.0.0/16"],
                service_address_cidr_blocks=["10.1.0.0/16"],
                vpc_id="vpc-00000000000000000",
            ),
            project="my-project-name")
        ```
        ### Beta_basic_enum_aws_cluster
        A basic example of a containeraws cluster with lowercase enums (beta)
        ```python
        import pulumi
        import pulumi_gcp as gcp

        versions = gcp.container.get_aws_versions(project="my-project-name",
            location="us-west1")
        primary = gcp.container.AwsCluster("primary",
            authorization=gcp.container.AwsClusterAuthorizationArgs(
                admin_users=[gcp.container.AwsClusterAuthorizationAdminUserArgs(
                    username="my@service-account.com",
                )],
            ),
            aws_region="my-aws-region",
            control_plane=gcp.container.AwsClusterControlPlaneArgs(
                aws_services_authentication=gcp.container.AwsClusterControlPlaneAwsServicesAuthenticationArgs(
                    role_arn="arn:aws:iam::012345678910:role/my--1p-dev-oneplatform",
                    role_session_name="my--1p-dev-session",
                ),
                config_encryption=gcp.container.AwsClusterControlPlaneConfigEncryptionArgs(
                    kms_key_arn="arn:aws:kms:my-aws-region:012345678910:key/12345678-1234-1234-1234-123456789111",
                ),
                database_encryption=gcp.container.AwsClusterControlPlaneDatabaseEncryptionArgs(
                    kms_key_arn="arn:aws:kms:my-aws-region:012345678910:key/12345678-1234-1234-1234-123456789111",
                ),
                iam_instance_profile="my--1p-dev-controlplane",
                subnet_ids=["subnet-00000000000000000"],
                version=versions.valid_versions[0],
                instance_type="t3.medium",
                main_volume=gcp.container.AwsClusterControlPlaneMainVolumeArgs(
                    iops=3000,
                    kms_key_arn="arn:aws:kms:my-aws-region:012345678910:key/12345678-1234-1234-1234-123456789111",
                    size_gib=10,
                    volume_type="gp3",
                ),
                proxy_config=gcp.container.AwsClusterControlPlaneProxyConfigArgs(
                    secret_arn="arn:aws:secretsmanager:us-west-2:126285863215:secret:proxy_config20210824150329476300000001-ABCDEF",
                    secret_version="12345678-ABCD-EFGH-IJKL-987654321098",
                ),
                root_volume=gcp.container.AwsClusterControlPlaneRootVolumeArgs(
                    iops=3000,
                    kms_key_arn="arn:aws:kms:my-aws-region:012345678910:key/12345678-1234-1234-1234-123456789111",
                    size_gib=10,
                    volume_type="gp3",
                ),
                security_group_ids=["sg-00000000000000000"],
                ssh_config=gcp.container.AwsClusterControlPlaneSshConfigArgs(
                    ec2_key_pair="my--1p-dev-ssh",
                ),
                tags={
                    "owner": "my@service-account.com",
                },
                instance_placement=gcp.container.AwsClusterControlPlaneInstancePlacementArgs(
                    tenancy="dedicated",
                ),
            ),
            fleet=gcp.container.AwsClusterFleetArgs(
                project="my-project-number",
            ),
            location="us-west1",
            networking=gcp.container.AwsClusterNetworkingArgs(
                pod_address_cidr_blocks=["10.2.0.0/16"],
                service_address_cidr_blocks=["10.1.0.0/16"],
                vpc_id="vpc-00000000000000000",
            ),
            annotations={
                "label-one": "value-one",
            },
            description="A sample aws cluster",
            project="my-project-name",
            logging_config=gcp.container.AwsClusterLoggingConfigArgs(
                component_config=gcp.container.AwsClusterLoggingConfigComponentConfigArgs(
                    enable_components=[
                        "system_components",
                        "workloads",
                    ],
                ),
            ),
            opts=pulumi.ResourceOptions(provider=google_beta))
        ```

        ## Import

        Cluster can be imported using any of these accepted formats

        ```sh
         $ pulumi import gcp:container/awsCluster:AwsCluster default projects/{{project}}/locations/{{location}}/awsClusters/{{name}}
        ```

        ```sh
         $ pulumi import gcp:container/awsCluster:AwsCluster default {{project}}/{{location}}/{{name}}
        ```

        ```sh
         $ pulumi import gcp:container/awsCluster:AwsCluster default {{location}}/{{name}}
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] annotations: Optional. Annotations on the cluster. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.
        :param pulumi.Input[pulumi.InputType['AwsClusterAuthorizationArgs']] authorization: Configuration related to the cluster RBAC settings.
        :param pulumi.Input[str] aws_region: The AWS region where the cluster runs. Each Google Cloud region supports a subset of nearby AWS regions. You can call to list all supported AWS regions within a given Google Cloud region.
        :param pulumi.Input[pulumi.InputType['AwsClusterControlPlaneArgs']] control_plane: Configuration related to the cluster control plane.
        :param pulumi.Input[str] description: Optional. A human readable description of this cluster. Cannot be longer than 255 UTF-8 encoded bytes.
        :param pulumi.Input[pulumi.InputType['AwsClusterFleetArgs']] fleet: Fleet configuration.
        :param pulumi.Input[str] location: The location for the resource
        :param pulumi.Input[pulumi.InputType['AwsClusterLoggingConfigArgs']] logging_config: (Beta only) Logging configuration.
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input[pulumi.InputType['AwsClusterNetworkingArgs']] networking: Cluster-wide networking configuration.
        :param pulumi.Input[str] project: The number of the Fleet host project where this cluster will be registered.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AwsClusterArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        An Anthos cluster running on AWS.

        For more information, see:
        * [Multicloud overview](https://cloud.google.com/anthos/clusters/docs/multi-cloud)
        ## Example Usage
        ### Basic_aws_cluster
        A basic example of a containeraws cluster
        ```python
        import pulumi
        import pulumi_gcp as gcp

        versions = gcp.container.get_aws_versions(location="us-west1",
            project="my-project-name")
        primary = gcp.container.AwsCluster("primary",
            annotations={
                "label-one": "value-one",
            },
            authorization=gcp.container.AwsClusterAuthorizationArgs(
                admin_users=[gcp.container.AwsClusterAuthorizationAdminUserArgs(
                    username="my@service-account.com",
                )],
            ),
            aws_region="my-aws-region",
            control_plane=gcp.container.AwsClusterControlPlaneArgs(
                aws_services_authentication=gcp.container.AwsClusterControlPlaneAwsServicesAuthenticationArgs(
                    role_arn="arn:aws:iam::012345678910:role/my--1p-dev-oneplatform",
                    role_session_name="my--1p-dev-session",
                ),
                config_encryption=gcp.container.AwsClusterControlPlaneConfigEncryptionArgs(
                    kms_key_arn="arn:aws:kms:my-aws-region:012345678910:key/12345678-1234-1234-1234-123456789111",
                ),
                database_encryption=gcp.container.AwsClusterControlPlaneDatabaseEncryptionArgs(
                    kms_key_arn="arn:aws:kms:my-aws-region:012345678910:key/12345678-1234-1234-1234-123456789111",
                ),
                iam_instance_profile="my--1p-dev-controlplane",
                instance_type="t3.medium",
                main_volume=gcp.container.AwsClusterControlPlaneMainVolumeArgs(
                    iops=3000,
                    kms_key_arn="arn:aws:kms:my-aws-region:012345678910:key/12345678-1234-1234-1234-123456789111",
                    size_gib=10,
                    volume_type="GP3",
                ),
                proxy_config=gcp.container.AwsClusterControlPlaneProxyConfigArgs(
                    secret_arn="arn:aws:secretsmanager:us-west-2:126285863215:secret:proxy_config20210824150329476300000001-ABCDEF",
                    secret_version="12345678-ABCD-EFGH-IJKL-987654321098",
                ),
                root_volume=gcp.container.AwsClusterControlPlaneRootVolumeArgs(
                    iops=3000,
                    kms_key_arn="arn:aws:kms:my-aws-region:012345678910:key/12345678-1234-1234-1234-123456789111",
                    size_gib=10,
                    volume_type="GP3",
                ),
                security_group_ids=["sg-00000000000000000"],
                ssh_config=gcp.container.AwsClusterControlPlaneSshConfigArgs(
                    ec2_key_pair="my--1p-dev-ssh",
                ),
                subnet_ids=["subnet-00000000000000000"],
                tags={
                    "owner": "my@service-account.com",
                },
                version=versions.valid_versions[0],
            ),
            description="A sample aws cluster",
            fleet=gcp.container.AwsClusterFleetArgs(
                project="my-project-number",
            ),
            location="us-west1",
            networking=gcp.container.AwsClusterNetworkingArgs(
                pod_address_cidr_blocks=["10.2.0.0/16"],
                service_address_cidr_blocks=["10.1.0.0/16"],
                vpc_id="vpc-00000000000000000",
            ),
            project="my-project-name")
        ```
        ### Basic_enum_aws_cluster
        A basic example of a containeraws cluster with lowercase enums
        ```python
        import pulumi
        import pulumi_gcp as gcp

        versions = gcp.container.get_aws_versions(location="us-west1",
            project="my-project-name")
        primary = gcp.container.AwsCluster("primary",
            annotations={
                "label-one": "value-one",
            },
            authorization=gcp.container.AwsClusterAuthorizationArgs(
                admin_users=[gcp.container.AwsClusterAuthorizationAdminUserArgs(
                    username="my@service-account.com",
                )],
            ),
            aws_region="my-aws-region",
            control_plane=gcp.container.AwsClusterControlPlaneArgs(
                aws_services_authentication=gcp.container.AwsClusterControlPlaneAwsServicesAuthenticationArgs(
                    role_arn="arn:aws:iam::012345678910:role/my--1p-dev-oneplatform",
                    role_session_name="my--1p-dev-session",
                ),
                config_encryption=gcp.container.AwsClusterControlPlaneConfigEncryptionArgs(
                    kms_key_arn="arn:aws:kms:my-aws-region:012345678910:key/12345678-1234-1234-1234-123456789111",
                ),
                database_encryption=gcp.container.AwsClusterControlPlaneDatabaseEncryptionArgs(
                    kms_key_arn="arn:aws:kms:my-aws-region:012345678910:key/12345678-1234-1234-1234-123456789111",
                ),
                iam_instance_profile="my--1p-dev-controlplane",
                instance_type="t3.medium",
                main_volume=gcp.container.AwsClusterControlPlaneMainVolumeArgs(
                    iops=3000,
                    kms_key_arn="arn:aws:kms:my-aws-region:012345678910:key/12345678-1234-1234-1234-123456789111",
                    size_gib=10,
                    volume_type="gp3",
                ),
                proxy_config=gcp.container.AwsClusterControlPlaneProxyConfigArgs(
                    secret_arn="arn:aws:secretsmanager:us-west-2:126285863215:secret:proxy_config20210824150329476300000001-ABCDEF",
                    secret_version="12345678-ABCD-EFGH-IJKL-987654321098",
                ),
                root_volume=gcp.container.AwsClusterControlPlaneRootVolumeArgs(
                    iops=3000,
                    kms_key_arn="arn:aws:kms:my-aws-region:012345678910:key/12345678-1234-1234-1234-123456789111",
                    size_gib=10,
                    volume_type="gp3",
                ),
                security_group_ids=["sg-00000000000000000"],
                ssh_config=gcp.container.AwsClusterControlPlaneSshConfigArgs(
                    ec2_key_pair="my--1p-dev-ssh",
                ),
                subnet_ids=["subnet-00000000000000000"],
                tags={
                    "owner": "my@service-account.com",
                },
                version=versions.valid_versions[0],
            ),
            description="A sample aws cluster",
            fleet=gcp.container.AwsClusterFleetArgs(
                project="my-project-number",
            ),
            location="us-west1",
            networking=gcp.container.AwsClusterNetworkingArgs(
                pod_address_cidr_blocks=["10.2.0.0/16"],
                service_address_cidr_blocks=["10.1.0.0/16"],
                vpc_id="vpc-00000000000000000",
            ),
            project="my-project-name")
        ```
        ### Beta_basic_enum_aws_cluster
        A basic example of a containeraws cluster with lowercase enums (beta)
        ```python
        import pulumi
        import pulumi_gcp as gcp

        versions = gcp.container.get_aws_versions(project="my-project-name",
            location="us-west1")
        primary = gcp.container.AwsCluster("primary",
            authorization=gcp.container.AwsClusterAuthorizationArgs(
                admin_users=[gcp.container.AwsClusterAuthorizationAdminUserArgs(
                    username="my@service-account.com",
                )],
            ),
            aws_region="my-aws-region",
            control_plane=gcp.container.AwsClusterControlPlaneArgs(
                aws_services_authentication=gcp.container.AwsClusterControlPlaneAwsServicesAuthenticationArgs(
                    role_arn="arn:aws:iam::012345678910:role/my--1p-dev-oneplatform",
                    role_session_name="my--1p-dev-session",
                ),
                config_encryption=gcp.container.AwsClusterControlPlaneConfigEncryptionArgs(
                    kms_key_arn="arn:aws:kms:my-aws-region:012345678910:key/12345678-1234-1234-1234-123456789111",
                ),
                database_encryption=gcp.container.AwsClusterControlPlaneDatabaseEncryptionArgs(
                    kms_key_arn="arn:aws:kms:my-aws-region:012345678910:key/12345678-1234-1234-1234-123456789111",
                ),
                iam_instance_profile="my--1p-dev-controlplane",
                subnet_ids=["subnet-00000000000000000"],
                version=versions.valid_versions[0],
                instance_type="t3.medium",
                main_volume=gcp.container.AwsClusterControlPlaneMainVolumeArgs(
                    iops=3000,
                    kms_key_arn="arn:aws:kms:my-aws-region:012345678910:key/12345678-1234-1234-1234-123456789111",
                    size_gib=10,
                    volume_type="gp3",
                ),
                proxy_config=gcp.container.AwsClusterControlPlaneProxyConfigArgs(
                    secret_arn="arn:aws:secretsmanager:us-west-2:126285863215:secret:proxy_config20210824150329476300000001-ABCDEF",
                    secret_version="12345678-ABCD-EFGH-IJKL-987654321098",
                ),
                root_volume=gcp.container.AwsClusterControlPlaneRootVolumeArgs(
                    iops=3000,
                    kms_key_arn="arn:aws:kms:my-aws-region:012345678910:key/12345678-1234-1234-1234-123456789111",
                    size_gib=10,
                    volume_type="gp3",
                ),
                security_group_ids=["sg-00000000000000000"],
                ssh_config=gcp.container.AwsClusterControlPlaneSshConfigArgs(
                    ec2_key_pair="my--1p-dev-ssh",
                ),
                tags={
                    "owner": "my@service-account.com",
                },
                instance_placement=gcp.container.AwsClusterControlPlaneInstancePlacementArgs(
                    tenancy="dedicated",
                ),
            ),
            fleet=gcp.container.AwsClusterFleetArgs(
                project="my-project-number",
            ),
            location="us-west1",
            networking=gcp.container.AwsClusterNetworkingArgs(
                pod_address_cidr_blocks=["10.2.0.0/16"],
                service_address_cidr_blocks=["10.1.0.0/16"],
                vpc_id="vpc-00000000000000000",
            ),
            annotations={
                "label-one": "value-one",
            },
            description="A sample aws cluster",
            project="my-project-name",
            logging_config=gcp.container.AwsClusterLoggingConfigArgs(
                component_config=gcp.container.AwsClusterLoggingConfigComponentConfigArgs(
                    enable_components=[
                        "system_components",
                        "workloads",
                    ],
                ),
            ),
            opts=pulumi.ResourceOptions(provider=google_beta))
        ```

        ## Import

        Cluster can be imported using any of these accepted formats

        ```sh
         $ pulumi import gcp:container/awsCluster:AwsCluster default projects/{{project}}/locations/{{location}}/awsClusters/{{name}}
        ```

        ```sh
         $ pulumi import gcp:container/awsCluster:AwsCluster default {{project}}/{{location}}/{{name}}
        ```

        ```sh
         $ pulumi import gcp:container/awsCluster:AwsCluster default {{location}}/{{name}}
        ```

        :param str resource_name: The name of the resource.
        :param AwsClusterArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AwsClusterArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            AwsClusterArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 authorization: Optional[pulumi.Input[pulumi.InputType['AwsClusterAuthorizationArgs']]] = None,
                 aws_region: Optional[pulumi.Input[str]] = None,
                 control_plane: Optional[pulumi.Input[pulumi.InputType['AwsClusterControlPlaneArgs']]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 fleet: Optional[pulumi.Input[pulumi.InputType['AwsClusterFleetArgs']]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 logging_config: Optional[pulumi.Input[pulumi.InputType['AwsClusterLoggingConfigArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 networking: Optional[pulumi.Input[pulumi.InputType['AwsClusterNetworkingArgs']]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AwsClusterArgs.__new__(AwsClusterArgs)

            __props__.__dict__["annotations"] = annotations
            if authorization is not None and not isinstance(authorization, AwsClusterAuthorizationArgs):
                authorization = authorization or {}
                def _setter(key, value):
                    authorization[key] = value
                AwsClusterAuthorizationArgs._configure(_setter, **authorization)
            if authorization is None and not opts.urn:
                raise TypeError("Missing required property 'authorization'")
            __props__.__dict__["authorization"] = authorization
            if aws_region is None and not opts.urn:
                raise TypeError("Missing required property 'aws_region'")
            __props__.__dict__["aws_region"] = aws_region
            if control_plane is not None and not isinstance(control_plane, AwsClusterControlPlaneArgs):
                control_plane = control_plane or {}
                def _setter(key, value):
                    control_plane[key] = value
                AwsClusterControlPlaneArgs._configure(_setter, **control_plane)
            if control_plane is None and not opts.urn:
                raise TypeError("Missing required property 'control_plane'")
            __props__.__dict__["control_plane"] = control_plane
            __props__.__dict__["description"] = description
            if fleet is not None and not isinstance(fleet, AwsClusterFleetArgs):
                fleet = fleet or {}
                def _setter(key, value):
                    fleet[key] = value
                AwsClusterFleetArgs._configure(_setter, **fleet)
            if fleet is None and not opts.urn:
                raise TypeError("Missing required property 'fleet'")
            __props__.__dict__["fleet"] = fleet
            if location is None and not opts.urn:
                raise TypeError("Missing required property 'location'")
            __props__.__dict__["location"] = location
            if logging_config is not None and not isinstance(logging_config, AwsClusterLoggingConfigArgs):
                logging_config = logging_config or {}
                def _setter(key, value):
                    logging_config[key] = value
                AwsClusterLoggingConfigArgs._configure(_setter, **logging_config)
            __props__.__dict__["logging_config"] = logging_config
            __props__.__dict__["name"] = name
            if networking is not None and not isinstance(networking, AwsClusterNetworkingArgs):
                networking = networking or {}
                def _setter(key, value):
                    networking[key] = value
                AwsClusterNetworkingArgs._configure(_setter, **networking)
            if networking is None and not opts.urn:
                raise TypeError("Missing required property 'networking'")
            __props__.__dict__["networking"] = networking
            __props__.__dict__["project"] = project
            __props__.__dict__["create_time"] = None
            __props__.__dict__["endpoint"] = None
            __props__.__dict__["etag"] = None
            __props__.__dict__["reconciling"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["uid"] = None
            __props__.__dict__["update_time"] = None
            __props__.__dict__["workload_identity_configs"] = None
        super(AwsCluster, __self__).__init__(
            'gcp:container/awsCluster:AwsCluster',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            authorization: Optional[pulumi.Input[pulumi.InputType['AwsClusterAuthorizationArgs']]] = None,
            aws_region: Optional[pulumi.Input[str]] = None,
            control_plane: Optional[pulumi.Input[pulumi.InputType['AwsClusterControlPlaneArgs']]] = None,
            create_time: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            endpoint: Optional[pulumi.Input[str]] = None,
            etag: Optional[pulumi.Input[str]] = None,
            fleet: Optional[pulumi.Input[pulumi.InputType['AwsClusterFleetArgs']]] = None,
            location: Optional[pulumi.Input[str]] = None,
            logging_config: Optional[pulumi.Input[pulumi.InputType['AwsClusterLoggingConfigArgs']]] = None,
            name: Optional[pulumi.Input[str]] = None,
            networking: Optional[pulumi.Input[pulumi.InputType['AwsClusterNetworkingArgs']]] = None,
            project: Optional[pulumi.Input[str]] = None,
            reconciling: Optional[pulumi.Input[bool]] = None,
            state: Optional[pulumi.Input[str]] = None,
            uid: Optional[pulumi.Input[str]] = None,
            update_time: Optional[pulumi.Input[str]] = None,
            workload_identity_configs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AwsClusterWorkloadIdentityConfigArgs']]]]] = None) -> 'AwsCluster':
        """
        Get an existing AwsCluster resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] annotations: Optional. Annotations on the cluster. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.
        :param pulumi.Input[pulumi.InputType['AwsClusterAuthorizationArgs']] authorization: Configuration related to the cluster RBAC settings.
        :param pulumi.Input[str] aws_region: The AWS region where the cluster runs. Each Google Cloud region supports a subset of nearby AWS regions. You can call to list all supported AWS regions within a given Google Cloud region.
        :param pulumi.Input[pulumi.InputType['AwsClusterControlPlaneArgs']] control_plane: Configuration related to the cluster control plane.
        :param pulumi.Input[str] create_time: Output only. The time at which this cluster was created.
        :param pulumi.Input[str] description: Optional. A human readable description of this cluster. Cannot be longer than 255 UTF-8 encoded bytes.
        :param pulumi.Input[str] endpoint: Output only. The endpoint of the cluster's API server.
        :param pulumi.Input[str] etag: Allows clients to perform consistent read-modify-writes through optimistic concurrency control. May be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
        :param pulumi.Input[pulumi.InputType['AwsClusterFleetArgs']] fleet: Fleet configuration.
        :param pulumi.Input[str] location: The location for the resource
        :param pulumi.Input[pulumi.InputType['AwsClusterLoggingConfigArgs']] logging_config: (Beta only) Logging configuration.
        :param pulumi.Input[str] name: The name of this resource.
        :param pulumi.Input[pulumi.InputType['AwsClusterNetworkingArgs']] networking: Cluster-wide networking configuration.
        :param pulumi.Input[str] project: The number of the Fleet host project where this cluster will be registered.
        :param pulumi.Input[bool] reconciling: Output only. If set, there are currently changes in flight to the cluster.
        :param pulumi.Input[str] state: Output only. The current state of the cluster. Possible values: STATE_UNSPECIFIED, PROVISIONING, RUNNING, RECONCILING, STOPPING, ERROR, DEGRADED
        :param pulumi.Input[str] uid: Output only. A globally unique identifier for the cluster.
        :param pulumi.Input[str] update_time: Output only. The time at which this cluster was last updated.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AwsClusterWorkloadIdentityConfigArgs']]]] workload_identity_configs: Output only. Workload Identity settings.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AwsClusterState.__new__(_AwsClusterState)

        __props__.__dict__["annotations"] = annotations
        __props__.__dict__["authorization"] = authorization
        __props__.__dict__["aws_region"] = aws_region
        __props__.__dict__["control_plane"] = control_plane
        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["description"] = description
        __props__.__dict__["endpoint"] = endpoint
        __props__.__dict__["etag"] = etag
        __props__.__dict__["fleet"] = fleet
        __props__.__dict__["location"] = location
        __props__.__dict__["logging_config"] = logging_config
        __props__.__dict__["name"] = name
        __props__.__dict__["networking"] = networking
        __props__.__dict__["project"] = project
        __props__.__dict__["reconciling"] = reconciling
        __props__.__dict__["state"] = state
        __props__.__dict__["uid"] = uid
        __props__.__dict__["update_time"] = update_time
        __props__.__dict__["workload_identity_configs"] = workload_identity_configs
        return AwsCluster(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def annotations(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Optional. Annotations on the cluster. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def authorization(self) -> pulumi.Output['outputs.AwsClusterAuthorization']:
        """
        Configuration related to the cluster RBAC settings.
        """
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter(name="awsRegion")
    def aws_region(self) -> pulumi.Output[str]:
        """
        The AWS region where the cluster runs. Each Google Cloud region supports a subset of nearby AWS regions. You can call to list all supported AWS regions within a given Google Cloud region.
        """
        return pulumi.get(self, "aws_region")

    @property
    @pulumi.getter(name="controlPlane")
    def control_plane(self) -> pulumi.Output['outputs.AwsClusterControlPlane']:
        """
        Configuration related to the cluster control plane.
        """
        return pulumi.get(self, "control_plane")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        Output only. The time at which this cluster was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Optional. A human readable description of this cluster. Cannot be longer than 255 UTF-8 encoded bytes.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def endpoint(self) -> pulumi.Output[str]:
        """
        Output only. The endpoint of the cluster's API server.
        """
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter
    def etag(self) -> pulumi.Output[str]:
        """
        Allows clients to perform consistent read-modify-writes through optimistic concurrency control. May be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter
    def fleet(self) -> pulumi.Output['outputs.AwsClusterFleet']:
        """
        Fleet configuration.
        """
        return pulumi.get(self, "fleet")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        """
        The location for the resource
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="loggingConfig")
    def logging_config(self) -> pulumi.Output['outputs.AwsClusterLoggingConfig']:
        """
        (Beta only) Logging configuration.
        """
        return pulumi.get(self, "logging_config")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of this resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def networking(self) -> pulumi.Output['outputs.AwsClusterNetworking']:
        """
        Cluster-wide networking configuration.
        """
        return pulumi.get(self, "networking")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[str]:
        """
        The number of the Fleet host project where this cluster will be registered.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def reconciling(self) -> pulumi.Output[bool]:
        """
        Output only. If set, there are currently changes in flight to the cluster.
        """
        return pulumi.get(self, "reconciling")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        """
        Output only. The current state of the cluster. Possible values: STATE_UNSPECIFIED, PROVISIONING, RUNNING, RECONCILING, STOPPING, ERROR, DEGRADED
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def uid(self) -> pulumi.Output[str]:
        """
        Output only. A globally unique identifier for the cluster.
        """
        return pulumi.get(self, "uid")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[str]:
        """
        Output only. The time at which this cluster was last updated.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="workloadIdentityConfigs")
    def workload_identity_configs(self) -> pulumi.Output[Sequence['outputs.AwsClusterWorkloadIdentityConfig']]:
        """
        Output only. Workload Identity settings.
        """
        return pulumi.get(self, "workload_identity_configs")

