# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime

class GetEngineVersionsResult(object):
    """
    A collection of values returned by getEngineVersions.
    """
    def __init__(__self__, default_cluster_version=None, latest_master_version=None, latest_node_version=None, valid_master_versions=None, valid_node_versions=None):
        if not default_cluster_version:
            raise TypeError('Missing required argument default_cluster_version')
        elif not isinstance(default_cluster_version, basestring):
            raise TypeError('Expected argument default_cluster_version to be a basestring')
        __self__.default_cluster_version = default_cluster_version
        """
        Version of Kubernetes the service deploys by default.
        """
        if not latest_master_version:
            raise TypeError('Missing required argument latest_master_version')
        elif not isinstance(latest_master_version, basestring):
            raise TypeError('Expected argument latest_master_version to be a basestring')
        __self__.latest_master_version = latest_master_version
        """
        The latest version available in the given zone for use with master instances.
        """
        if not latest_node_version:
            raise TypeError('Missing required argument latest_node_version')
        elif not isinstance(latest_node_version, basestring):
            raise TypeError('Expected argument latest_node_version to be a basestring')
        __self__.latest_node_version = latest_node_version
        """
        The latest version available in the given zone for use with node instances.
        """
        if not valid_master_versions:
            raise TypeError('Missing required argument valid_master_versions')
        elif not isinstance(valid_master_versions, list):
            raise TypeError('Expected argument valid_master_versions to be a list')
        __self__.valid_master_versions = valid_master_versions
        """
        A list of versions available in the given zone for use with master instances.
        """
        if not valid_node_versions:
            raise TypeError('Missing required argument valid_node_versions')
        elif not isinstance(valid_node_versions, list):
            raise TypeError('Expected argument valid_node_versions to be a list')
        __self__.valid_node_versions = valid_node_versions
        """
        A list of versions available in the given zone for use with node instances.
        """

def get_engine_versions(project=None, zone=None):
    """
    Provides access to available Google Container Engine versions in a zone for a given project.
    
    ```hcl
    data "google_container_engine_versions" "central1b" {
      zone = "us-central1-b"
    }
    
    resource "google_container_cluster" "foo" {
      name               = "terraform-test-cluster"
      zone               = "us-central1-b"
      node_version       = "${data.google_container_engine_versions.central1b.latest_node_version}"
      initial_node_count = 1
    
      master_auth {
        username = "mr.yoda"
        password = "adoy.rm"
      }
    }
    ```
    """
    __args__ = dict()

    __args__['project'] = project
    __args__['zone'] = zone
    __ret__ = pulumi.runtime.invoke('gcp:container/getEngineVersions:getEngineVersions', __args__)

    return GetEngineVersionsResult(
        default_cluster_version=__ret__['defaultClusterVersion'],
        latest_master_version=__ret__['latestMasterVersion'],
        latest_node_version=__ret__['latestNodeVersion'],
        valid_master_versions=__ret__['validMasterVersions'],
        valid_node_versions=__ret__['validNodeVersions'])
