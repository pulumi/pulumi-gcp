# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities

class Cluster(pulumi.CustomResource):
    """
    Creates a Google Kubernetes Engine (GKE) cluster. For more information see
    [the official documentation](https://cloud.google.com/container-engine/docs/clusters)
    and
    [API](https://cloud.google.com/container-engine/reference/rest/v1/projects.zones.clusters).
    
    ~> **Note:** All arguments including the username and password will be stored in the raw state as plain-text.
    [Read more about sensitive data in state](https://www.terraform.io/docs/state/sensitive-data.html).
    """
    def __init__(__self__, __name__, __opts__=None, additional_zones=None, addons_config=None, cluster_ipv4_cidr=None, description=None, enable_binary_authorization=None, enable_kubernetes_alpha=None, enable_legacy_abac=None, enable_tpu=None, initial_node_count=None, ip_allocation_policy=None, logging_service=None, maintenance_policy=None, master_auth=None, master_authorized_networks_config=None, master_ipv4_cidr_block=None, min_master_version=None, monitoring_service=None, name=None, network=None, network_policy=None, node_config=None, node_pools=None, node_version=None, pod_security_policy_config=None, private_cluster=None, project=None, region=None, remove_default_node_pool=None, resource_labels=None, subnetwork=None, zone=None):
        """Create a Cluster resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, str):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        __props__['additionalZones'] = additional_zones

        __props__['addonsConfig'] = addons_config

        __props__['clusterIpv4Cidr'] = cluster_ipv4_cidr

        __props__['description'] = description

        __props__['enableBinaryAuthorization'] = enable_binary_authorization

        __props__['enableKubernetesAlpha'] = enable_kubernetes_alpha

        __props__['enableLegacyAbac'] = enable_legacy_abac

        __props__['enableTpu'] = enable_tpu

        __props__['initialNodeCount'] = initial_node_count

        __props__['ipAllocationPolicy'] = ip_allocation_policy

        __props__['loggingService'] = logging_service

        __props__['maintenancePolicy'] = maintenance_policy

        __props__['masterAuth'] = master_auth

        __props__['masterAuthorizedNetworksConfig'] = master_authorized_networks_config

        __props__['masterIpv4CidrBlock'] = master_ipv4_cidr_block

        __props__['minMasterVersion'] = min_master_version

        __props__['monitoringService'] = monitoring_service

        __props__['name'] = name

        __props__['network'] = network

        __props__['networkPolicy'] = network_policy

        __props__['nodeConfig'] = node_config

        __props__['nodePools'] = node_pools

        __props__['nodeVersion'] = node_version

        __props__['podSecurityPolicyConfig'] = pod_security_policy_config

        __props__['privateCluster'] = private_cluster

        __props__['project'] = project

        __props__['region'] = region

        __props__['removeDefaultNodePool'] = remove_default_node_pool

        __props__['resourceLabels'] = resource_labels

        __props__['subnetwork'] = subnetwork

        __props__['zone'] = zone

        __props__['endpoint'] = None
        __props__['instance_group_urls'] = None
        __props__['master_version'] = None

        super(Cluster, __self__).__init__(
            'gcp:container/cluster:Cluster',
            __name__,
            __props__,
            __opts__)

