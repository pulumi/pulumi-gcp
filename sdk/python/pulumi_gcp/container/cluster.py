# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities

class Cluster(pulumi.CustomResource):
    """
    Creates a Google Kubernetes Engine (GKE) cluster. For more information see
    [the official documentation](https://cloud.google.com/container-engine/docs/clusters)
    and
    [API](https://cloud.google.com/container-engine/reference/rest/v1/projects.zones.clusters).
    
    ~> **Note:** All arguments including the username and password will be stored in the raw state as plain-text.
    [Read more about sensitive data in state](https://www.terraform.io/docs/state/sensitive-data.html).
    """
    def __init__(__self__, __name__, __opts__=None, additional_zones=None, addons_config=None, cluster_ipv4_cidr=None, description=None, enable_kubernetes_alpha=None, enable_legacy_abac=None, initial_node_count=None, ip_allocation_policy=None, logging_service=None, maintenance_policy=None, master_auth=None, master_authorized_networks_config=None, master_ipv4_cidr_block=None, min_master_version=None, monitoring_service=None, name=None, network=None, network_policy=None, node_config=None, node_pools=None, node_version=None, pod_security_policy_config=None, private_cluster=None, project=None, region=None, remove_default_node_pool=None, resource_labels=None, subnetwork=None, zone=None):
        """Create a Cluster resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if additional_zones and not isinstance(additional_zones, list):
            raise TypeError('Expected property additional_zones to be a list')
        __self__.additional_zones = additional_zones
        """
        The list of additional Google Compute Engine
        locations in which the cluster's nodes should be located. If additional zones are
        configured, the number of nodes specified in `initial_node_count` is created in
        all specified zones.
        """
        __props__['additionalZones'] = additional_zones

        if addons_config and not isinstance(addons_config, dict):
            raise TypeError('Expected property addons_config to be a dict')
        __self__.addons_config = addons_config
        """
        The configuration for addons supported by GKE.
        Structure is documented below.
        """
        __props__['addonsConfig'] = addons_config

        if cluster_ipv4_cidr and not isinstance(cluster_ipv4_cidr, basestring):
            raise TypeError('Expected property cluster_ipv4_cidr to be a basestring')
        __self__.cluster_ipv4_cidr = cluster_ipv4_cidr
        """
        The IP address range of the kubernetes pods in
        this cluster. Default is an automatically assigned CIDR.
        """
        __props__['clusterIpv4Cidr'] = cluster_ipv4_cidr

        if description and not isinstance(description, basestring):
            raise TypeError('Expected property description to be a basestring')
        __self__.description = description
        """
        Description of the cluster.
        """
        __props__['description'] = description

        if enable_kubernetes_alpha and not isinstance(enable_kubernetes_alpha, bool):
            raise TypeError('Expected property enable_kubernetes_alpha to be a bool')
        __self__.enable_kubernetes_alpha = enable_kubernetes_alpha
        """
        Whether to enable Kubernetes Alpha features for
        this cluster. Note that when this option is enabled, the cluster cannot be upgraded
        and will be automatically deleted after 30 days.
        """
        __props__['enableKubernetesAlpha'] = enable_kubernetes_alpha

        if enable_legacy_abac and not isinstance(enable_legacy_abac, bool):
            raise TypeError('Expected property enable_legacy_abac to be a bool')
        __self__.enable_legacy_abac = enable_legacy_abac
        """
        Whether the ABAC authorizer is enabled for this cluster.
        When enabled, identities in the system, including service accounts, nodes, and controllers,
        will have statically granted permissions beyond those provided by the RBAC configuration or IAM.
        Defaults to `false`
        """
        __props__['enableLegacyAbac'] = enable_legacy_abac

        if initial_node_count and not isinstance(initial_node_count, int):
            raise TypeError('Expected property initial_node_count to be a int')
        __self__.initial_node_count = initial_node_count
        """
        The number of nodes to create in this
        cluster (not including the Kubernetes master). Must be set if `node_pool` is not set.
        """
        __props__['initialNodeCount'] = initial_node_count

        if ip_allocation_policy and not isinstance(ip_allocation_policy, dict):
            raise TypeError('Expected property ip_allocation_policy to be a dict')
        __self__.ip_allocation_policy = ip_allocation_policy
        """
        Configuration for cluster IP allocation. As of now, only pre-allocated subnetworks (custom type with secondary ranges) are supported.
        This will activate IP aliases. See the [official documentation](https://cloud.google.com/kubernetes-engine/docs/how-to/ip-aliases)
        Structure is documented below.
        """
        __props__['ipAllocationPolicy'] = ip_allocation_policy

        if logging_service and not isinstance(logging_service, basestring):
            raise TypeError('Expected property logging_service to be a basestring')
        __self__.logging_service = logging_service
        """
        The logging service that the cluster should
        write logs to. Available options include `logging.googleapis.com`,
        `logging.googleapis.com/kubernetes` (beta), and `none`. Defaults to `logging.googleapis.com`
        """
        __props__['loggingService'] = logging_service

        if maintenance_policy and not isinstance(maintenance_policy, dict):
            raise TypeError('Expected property maintenance_policy to be a dict')
        __self__.maintenance_policy = maintenance_policy
        """
        The maintenance policy to use for the cluster. Structure is
        documented below.
        """
        __props__['maintenancePolicy'] = maintenance_policy

        if master_auth and not isinstance(master_auth, dict):
            raise TypeError('Expected property master_auth to be a dict')
        __self__.master_auth = master_auth
        """
        The authentication information for accessing the
        Kubernetes master. Structure is documented below.
        """
        __props__['masterAuth'] = master_auth

        if master_authorized_networks_config and not isinstance(master_authorized_networks_config, dict):
            raise TypeError('Expected property master_authorized_networks_config to be a dict')
        __self__.master_authorized_networks_config = master_authorized_networks_config
        """
        The desired configuration options
        for master authorized networks. Omit the nested `cidr_blocks` attribute to disallow
        external access (except the cluster node IPs, which GKE automatically whitelists).
        """
        __props__['masterAuthorizedNetworksConfig'] = master_authorized_networks_config

        if master_ipv4_cidr_block and not isinstance(master_ipv4_cidr_block, basestring):
            raise TypeError('Expected property master_ipv4_cidr_block to be a basestring')
        __self__.master_ipv4_cidr_block = master_ipv4_cidr_block
        """
        ) Specifies a private
        [RFC1918](https://tools.ietf.org/html/rfc1918) block for the master's VPC. The master range must not overlap with any subnet in your cluster's VPC.
        The master and your cluster use VPC peering. Must be specified in CIDR notation and must be `/28` subnet.
        """
        __props__['masterIpv4CidrBlock'] = master_ipv4_cidr_block

        if min_master_version and not isinstance(min_master_version, basestring):
            raise TypeError('Expected property min_master_version to be a basestring')
        __self__.min_master_version = min_master_version
        """
        The minimum version of the master. GKE
        will auto-update the master to new versions, so this does not guarantee the
        current master version--use the read-only `master_version` field to obtain that.
        If unset, the cluster's version will be set by GKE to the version of the most recent
        official release (which is not necessarily the latest version).
        """
        __props__['minMasterVersion'] = min_master_version

        if monitoring_service and not isinstance(monitoring_service, basestring):
            raise TypeError('Expected property monitoring_service to be a basestring')
        __self__.monitoring_service = monitoring_service
        """
        The monitoring service that the cluster
        should write metrics to.
        Automatically send metrics from pods in the cluster to the Google Cloud Monitoring API.
        VM metrics will be collected by Google Compute Engine regardless of this setting
        Available options include
        `monitoring.googleapis.com`, `monitoring.googleapis.com/kubernetes` (beta) and `none`.
        Defaults to `monitoring.googleapis.com`
        """
        __props__['monitoringService'] = monitoring_service

        if name and not isinstance(name, basestring):
            raise TypeError('Expected property name to be a basestring')
        __self__.name = name
        """
        The name of the cluster, unique within the project and
        zone.
        """
        __props__['name'] = name

        if network and not isinstance(network, basestring):
            raise TypeError('Expected property network to be a basestring')
        __self__.network = network
        """
        The name or self_link of the Google Compute Engine
        network to which the cluster is connected. For Shared VPC, set this to the self link of the
        shared network.
        """
        __props__['network'] = network

        if network_policy and not isinstance(network_policy, dict):
            raise TypeError('Expected property network_policy to be a dict')
        __self__.network_policy = network_policy
        """
        Configuration options for the
        [NetworkPolicy](https://kubernetes.io/docs/concepts/services-networking/networkpolicies/)
        feature. Structure is documented below.
        """
        __props__['networkPolicy'] = network_policy

        if node_config and not isinstance(node_config, dict):
            raise TypeError('Expected property node_config to be a dict')
        __self__.node_config = node_config
        """
        Parameters used in creating the cluster's nodes.
        Structure is documented below.
        """
        __props__['nodeConfig'] = node_config

        if node_pools and not isinstance(node_pools, list):
            raise TypeError('Expected property node_pools to be a list')
        __self__.node_pools = node_pools
        """
        List of node pools associated with this cluster.
        See google_container_node_pool for schema.
        """
        __props__['nodePools'] = node_pools

        if node_version and not isinstance(node_version, basestring):
            raise TypeError('Expected property node_version to be a basestring')
        __self__.node_version = node_version
        """
        The Kubernetes version on the nodes. Must either be unset
        or set to the same value as `min_master_version` on create. Defaults to the default
        version set by GKE which is not necessarily the latest version.
        """
        __props__['nodeVersion'] = node_version

        if pod_security_policy_config and not isinstance(pod_security_policy_config, dict):
            raise TypeError('Expected property pod_security_policy_config to be a dict')
        __self__.pod_security_policy_config = pod_security_policy_config
        """
        ) Configuration for the
        [PodSecurityPolicy](https://cloud.google.com/kubernetes-engine/docs/how-to/pod-security-policies) feature.
        Structure is documented below.
        """
        __props__['podSecurityPolicyConfig'] = pod_security_policy_config

        if private_cluster and not isinstance(private_cluster, bool):
            raise TypeError('Expected property private_cluster to be a bool')
        __self__.private_cluster = private_cluster
        """
        ) If true, a
        [private cluster](https://cloud.google.com/kubernetes-engine/docs/how-to/private-clusters) will be created, meaning
        nodes do not get public IP addresses. It is mandatory to specify `master_ipv4_cidr_block` and
        `ip_allocation_policy` with this option.
        """
        __props__['privateCluster'] = private_cluster

        if project and not isinstance(project, basestring):
            raise TypeError('Expected property project to be a basestring')
        __self__.project = project
        """
        The ID of the project in which the resource belongs. If it
        is not provided, the provider project is used.
        """
        __props__['project'] = project

        if region and not isinstance(region, basestring):
            raise TypeError('Expected property region to be a basestring')
        __self__.region = region
        __props__['region'] = region

        if remove_default_node_pool and not isinstance(remove_default_node_pool, bool):
            raise TypeError('Expected property remove_default_node_pool to be a bool')
        __self__.remove_default_node_pool = remove_default_node_pool
        """
        If true, deletes the default node pool upon cluster creation.
        """
        __props__['removeDefaultNodePool'] = remove_default_node_pool

        if resource_labels and not isinstance(resource_labels, dict):
            raise TypeError('Expected property resource_labels to be a dict')
        __self__.resource_labels = resource_labels
        """
        The GCE resource labels (a map of key/value pairs) to be applied to the cluster.
        """
        __props__['resourceLabels'] = resource_labels

        if subnetwork and not isinstance(subnetwork, basestring):
            raise TypeError('Expected property subnetwork to be a basestring')
        __self__.subnetwork = subnetwork
        """
        The name or self_link of the Google Compute Engine subnetwork in
        which the cluster's instances are launched.
        """
        __props__['subnetwork'] = subnetwork

        if zone and not isinstance(zone, basestring):
            raise TypeError('Expected property zone to be a basestring')
        __self__.zone = zone
        """
        The zone that the master and the number of nodes specified
        in `initial_node_count` should be created in. Only one of `zone` and `region`
        may be set. If neither zone nor region are set, the provider zone is used.
        """
        __props__['zone'] = zone

        __self__.endpoint = pulumi.runtime.UNKNOWN
        """
        The IP address of this cluster's Kubernetes master.
        """
        __self__.instance_group_urls = pulumi.runtime.UNKNOWN
        """
        List of instance group URLs which have been assigned
        to the cluster.
        """
        __self__.master_version = pulumi.runtime.UNKNOWN
        """
        The current version of the master in the cluster. This may
        be different than the `min_master_version` set in the config if the master
        has been updated by GKE.
        """

        super(Cluster, __self__).__init__(
            'gcp:container/cluster:Cluster',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'additionalZones' in outs:
            self.additional_zones = outs['additionalZones']
        if 'addonsConfig' in outs:
            self.addons_config = outs['addonsConfig']
        if 'clusterIpv4Cidr' in outs:
            self.cluster_ipv4_cidr = outs['clusterIpv4Cidr']
        if 'description' in outs:
            self.description = outs['description']
        if 'enableKubernetesAlpha' in outs:
            self.enable_kubernetes_alpha = outs['enableKubernetesAlpha']
        if 'enableLegacyAbac' in outs:
            self.enable_legacy_abac = outs['enableLegacyAbac']
        if 'endpoint' in outs:
            self.endpoint = outs['endpoint']
        if 'initialNodeCount' in outs:
            self.initial_node_count = outs['initialNodeCount']
        if 'instanceGroupUrls' in outs:
            self.instance_group_urls = outs['instanceGroupUrls']
        if 'ipAllocationPolicy' in outs:
            self.ip_allocation_policy = outs['ipAllocationPolicy']
        if 'loggingService' in outs:
            self.logging_service = outs['loggingService']
        if 'maintenancePolicy' in outs:
            self.maintenance_policy = outs['maintenancePolicy']
        if 'masterAuth' in outs:
            self.master_auth = outs['masterAuth']
        if 'masterAuthorizedNetworksConfig' in outs:
            self.master_authorized_networks_config = outs['masterAuthorizedNetworksConfig']
        if 'masterIpv4CidrBlock' in outs:
            self.master_ipv4_cidr_block = outs['masterIpv4CidrBlock']
        if 'masterVersion' in outs:
            self.master_version = outs['masterVersion']
        if 'minMasterVersion' in outs:
            self.min_master_version = outs['minMasterVersion']
        if 'monitoringService' in outs:
            self.monitoring_service = outs['monitoringService']
        if 'name' in outs:
            self.name = outs['name']
        if 'network' in outs:
            self.network = outs['network']
        if 'networkPolicy' in outs:
            self.network_policy = outs['networkPolicy']
        if 'nodeConfig' in outs:
            self.node_config = outs['nodeConfig']
        if 'nodePools' in outs:
            self.node_pools = outs['nodePools']
        if 'nodeVersion' in outs:
            self.node_version = outs['nodeVersion']
        if 'podSecurityPolicyConfig' in outs:
            self.pod_security_policy_config = outs['podSecurityPolicyConfig']
        if 'privateCluster' in outs:
            self.private_cluster = outs['privateCluster']
        if 'project' in outs:
            self.project = outs['project']
        if 'region' in outs:
            self.region = outs['region']
        if 'removeDefaultNodePool' in outs:
            self.remove_default_node_pool = outs['removeDefaultNodePool']
        if 'resourceLabels' in outs:
            self.resource_labels = outs['resourceLabels']
        if 'subnetwork' in outs:
            self.subnetwork = outs['subnetwork']
        if 'zone' in outs:
            self.zone = outs['zone']
