# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetSResult',
    'AwaitableGetSResult',
    'get_s',
    'get_s_output',
]

@pulumi.output_type
class GetSResult:
    """
    A collection of values returned by getS.
    """
    def __init__(__self__, accounts=None, id=None, project=None):
        if accounts and not isinstance(accounts, list):
            raise TypeError("Expected argument 'accounts' to be a list")
        pulumi.set(__self__, "accounts", accounts)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if project and not isinstance(project, str):
            raise TypeError("Expected argument 'project' to be a str")
        pulumi.set(__self__, "project", project)

    @property
    @pulumi.getter
    def accounts(self) -> Sequence['outputs.GetSAccountResult']:
        """
        A list of all retrieved service accounts. Structure is defined below.
        """
        return pulumi.get(self, "accounts")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        return pulumi.get(self, "project")


class AwaitableGetSResult(GetSResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSResult(
            accounts=self.accounts,
            id=self.id,
            project=self.project)


def get_s(project: Optional[str] = None,
          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSResult:
    """
    Gets a list of all service accounts from a project.
    See [the official documentation](https://cloud.google.com/iam/docs/service-account-overview)
    and [API](https://cloud.google.com/iam/docs/reference/rest/v1/projects.serviceAccounts).

    ## Example Usage

    Example service accounts.

    ```python
    import pulumi
    import pulumi_gcp as gcp

    example = gcp.serviceaccount.get_s(project="example-project")
    ```


    :param str project: The ID of the project. If it is not provided, the provider project is used.
    """
    __args__ = dict()
    __args__['project'] = project
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('gcp:serviceaccount/getS:getS', __args__, opts=opts, typ=GetSResult).value

    return AwaitableGetSResult(
        accounts=pulumi.get(__ret__, 'accounts'),
        id=pulumi.get(__ret__, 'id'),
        project=pulumi.get(__ret__, 'project'))
def get_s_output(project: Optional[pulumi.Input[Optional[str]]] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSResult]:
    """
    Gets a list of all service accounts from a project.
    See [the official documentation](https://cloud.google.com/iam/docs/service-account-overview)
    and [API](https://cloud.google.com/iam/docs/reference/rest/v1/projects.serviceAccounts).

    ## Example Usage

    Example service accounts.

    ```python
    import pulumi
    import pulumi_gcp as gcp

    example = gcp.serviceaccount.get_s(project="example-project")
    ```


    :param str project: The ID of the project. If it is not provided, the provider project is used.
    """
    __args__ = dict()
    __args__['project'] = project
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('gcp:serviceaccount/getS:getS', __args__, opts=opts, typ=GetSResult)
    return __ret__.apply(lambda __response__: GetSResult(
        accounts=pulumi.get(__response__, 'accounts'),
        id=pulumi.get(__response__, 'id'),
        project=pulumi.get(__response__, 'project')))
