# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ManagedZoneArgs', 'ManagedZone']

@pulumi.input_type
class ManagedZoneArgs:
    def __init__(__self__, *,
                 dns_name: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 dnssec_config: Optional[pulumi.Input['ManagedZoneDnssecConfigArgs']] = None,
                 force_destroy: Optional[pulumi.Input[bool]] = None,
                 forwarding_config: Optional[pulumi.Input['ManagedZoneForwardingConfigArgs']] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 peering_config: Optional[pulumi.Input['ManagedZonePeeringConfigArgs']] = None,
                 private_visibility_config: Optional[pulumi.Input['ManagedZonePrivateVisibilityConfigArgs']] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 reverse_lookup: Optional[pulumi.Input[bool]] = None,
                 service_directory_config: Optional[pulumi.Input['ManagedZoneServiceDirectoryConfigArgs']] = None,
                 visibility: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ManagedZone resource.
        :param pulumi.Input[str] dns_name: The DNS name of this managed zone, for instance "example.com.".
        :param pulumi.Input[str] description: A textual description field. Defaults to 'Managed by Pulumi'.
        :param pulumi.Input['ManagedZoneDnssecConfigArgs'] dnssec_config: DNSSEC configuration
               Structure is documented below.
        :param pulumi.Input[bool] force_destroy: Set this true to delete all records in the zone.
        :param pulumi.Input['ManagedZoneForwardingConfigArgs'] forwarding_config: The presence for this field indicates that outbound forwarding is enabled
               for this zone. The value of this field contains the set of destinations
               to forward to.
               Structure is documented below.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: A set of key/value label pairs to assign to this ManagedZone.
        :param pulumi.Input[str] name: User assigned name for this resource.
               Must be unique within the project.
        :param pulumi.Input['ManagedZonePeeringConfigArgs'] peering_config: The presence of this field indicates that DNS Peering is enabled for this
               zone. The value of this field contains the network to peer with.
               Structure is documented below.
        :param pulumi.Input['ManagedZonePrivateVisibilityConfigArgs'] private_visibility_config: For privately visible zones, the set of Virtual Private Cloud
               resources that the zone is visible from.
               Structure is documented below.
        :param pulumi.Input[str] project: The ID of the project in which the resource belongs.
               If it is not provided, the provider project is used.
        :param pulumi.Input[bool] reverse_lookup: Specifies if this is a managed reverse lookup zone. If true, Cloud DNS will resolve reverse
               lookup queries using automatically configured records for VPC resources. This only applies
               to networks listed under `private_visibility_config`.
        :param pulumi.Input['ManagedZoneServiceDirectoryConfigArgs'] service_directory_config: The presence of this field indicates that this zone is backed by Service Directory. The value of this field contains information related to the namespace associated with the zone.  Structure is documented below.
        :param pulumi.Input[str] visibility: The zone's visibility: public zones are exposed to the Internet,
               while private zones are visible only to Virtual Private Cloud resources.
               Default value is `public`.
               Possible values are `private` and `public`.
        """
        pulumi.set(__self__, "dns_name", dns_name)
        if description is None:
            description = 'Managed by Pulumi'
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dnssec_config is not None:
            pulumi.set(__self__, "dnssec_config", dnssec_config)
        if force_destroy is not None:
            pulumi.set(__self__, "force_destroy", force_destroy)
        if forwarding_config is not None:
            pulumi.set(__self__, "forwarding_config", forwarding_config)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if peering_config is not None:
            pulumi.set(__self__, "peering_config", peering_config)
        if private_visibility_config is not None:
            pulumi.set(__self__, "private_visibility_config", private_visibility_config)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if reverse_lookup is not None:
            pulumi.set(__self__, "reverse_lookup", reverse_lookup)
        if service_directory_config is not None:
            pulumi.set(__self__, "service_directory_config", service_directory_config)
        if visibility is not None:
            pulumi.set(__self__, "visibility", visibility)

    @property
    @pulumi.getter(name="dnsName")
    def dns_name(self) -> pulumi.Input[str]:
        """
        The DNS name of this managed zone, for instance "example.com.".
        """
        return pulumi.get(self, "dns_name")

    @dns_name.setter
    def dns_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "dns_name", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A textual description field. Defaults to 'Managed by Pulumi'.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="dnssecConfig")
    def dnssec_config(self) -> Optional[pulumi.Input['ManagedZoneDnssecConfigArgs']]:
        """
        DNSSEC configuration
        Structure is documented below.
        """
        return pulumi.get(self, "dnssec_config")

    @dnssec_config.setter
    def dnssec_config(self, value: Optional[pulumi.Input['ManagedZoneDnssecConfigArgs']]):
        pulumi.set(self, "dnssec_config", value)

    @property
    @pulumi.getter(name="forceDestroy")
    def force_destroy(self) -> Optional[pulumi.Input[bool]]:
        """
        Set this true to delete all records in the zone.
        """
        return pulumi.get(self, "force_destroy")

    @force_destroy.setter
    def force_destroy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force_destroy", value)

    @property
    @pulumi.getter(name="forwardingConfig")
    def forwarding_config(self) -> Optional[pulumi.Input['ManagedZoneForwardingConfigArgs']]:
        """
        The presence for this field indicates that outbound forwarding is enabled
        for this zone. The value of this field contains the set of destinations
        to forward to.
        Structure is documented below.
        """
        return pulumi.get(self, "forwarding_config")

    @forwarding_config.setter
    def forwarding_config(self, value: Optional[pulumi.Input['ManagedZoneForwardingConfigArgs']]):
        pulumi.set(self, "forwarding_config", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A set of key/value label pairs to assign to this ManagedZone.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        User assigned name for this resource.
        Must be unique within the project.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="peeringConfig")
    def peering_config(self) -> Optional[pulumi.Input['ManagedZonePeeringConfigArgs']]:
        """
        The presence of this field indicates that DNS Peering is enabled for this
        zone. The value of this field contains the network to peer with.
        Structure is documented below.
        """
        return pulumi.get(self, "peering_config")

    @peering_config.setter
    def peering_config(self, value: Optional[pulumi.Input['ManagedZonePeeringConfigArgs']]):
        pulumi.set(self, "peering_config", value)

    @property
    @pulumi.getter(name="privateVisibilityConfig")
    def private_visibility_config(self) -> Optional[pulumi.Input['ManagedZonePrivateVisibilityConfigArgs']]:
        """
        For privately visible zones, the set of Virtual Private Cloud
        resources that the zone is visible from.
        Structure is documented below.
        """
        return pulumi.get(self, "private_visibility_config")

    @private_visibility_config.setter
    def private_visibility_config(self, value: Optional[pulumi.Input['ManagedZonePrivateVisibilityConfigArgs']]):
        pulumi.set(self, "private_visibility_config", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the project in which the resource belongs.
        If it is not provided, the provider project is used.
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="reverseLookup")
    def reverse_lookup(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies if this is a managed reverse lookup zone. If true, Cloud DNS will resolve reverse
        lookup queries using automatically configured records for VPC resources. This only applies
        to networks listed under `private_visibility_config`.
        """
        return pulumi.get(self, "reverse_lookup")

    @reverse_lookup.setter
    def reverse_lookup(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "reverse_lookup", value)

    @property
    @pulumi.getter(name="serviceDirectoryConfig")
    def service_directory_config(self) -> Optional[pulumi.Input['ManagedZoneServiceDirectoryConfigArgs']]:
        """
        The presence of this field indicates that this zone is backed by Service Directory. The value of this field contains information related to the namespace associated with the zone.  Structure is documented below.
        """
        return pulumi.get(self, "service_directory_config")

    @service_directory_config.setter
    def service_directory_config(self, value: Optional[pulumi.Input['ManagedZoneServiceDirectoryConfigArgs']]):
        pulumi.set(self, "service_directory_config", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input[str]]:
        """
        The zone's visibility: public zones are exposed to the Internet,
        while private zones are visible only to Virtual Private Cloud resources.
        Default value is `public`.
        Possible values are `private` and `public`.
        """
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class _ManagedZoneState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 dns_name: Optional[pulumi.Input[str]] = None,
                 dnssec_config: Optional[pulumi.Input['ManagedZoneDnssecConfigArgs']] = None,
                 force_destroy: Optional[pulumi.Input[bool]] = None,
                 forwarding_config: Optional[pulumi.Input['ManagedZoneForwardingConfigArgs']] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 name_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 peering_config: Optional[pulumi.Input['ManagedZonePeeringConfigArgs']] = None,
                 private_visibility_config: Optional[pulumi.Input['ManagedZonePrivateVisibilityConfigArgs']] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 reverse_lookup: Optional[pulumi.Input[bool]] = None,
                 service_directory_config: Optional[pulumi.Input['ManagedZoneServiceDirectoryConfigArgs']] = None,
                 visibility: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ManagedZone resources.
        :param pulumi.Input[str] description: A textual description field. Defaults to 'Managed by Pulumi'.
        :param pulumi.Input[str] dns_name: The DNS name of this managed zone, for instance "example.com.".
        :param pulumi.Input['ManagedZoneDnssecConfigArgs'] dnssec_config: DNSSEC configuration
               Structure is documented below.
        :param pulumi.Input[bool] force_destroy: Set this true to delete all records in the zone.
        :param pulumi.Input['ManagedZoneForwardingConfigArgs'] forwarding_config: The presence for this field indicates that outbound forwarding is enabled
               for this zone. The value of this field contains the set of destinations
               to forward to.
               Structure is documented below.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: A set of key/value label pairs to assign to this ManagedZone.
        :param pulumi.Input[str] name: User assigned name for this resource.
               Must be unique within the project.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] name_servers: Delegate your managed_zone to these virtual name servers; defined by the server
        :param pulumi.Input['ManagedZonePeeringConfigArgs'] peering_config: The presence of this field indicates that DNS Peering is enabled for this
               zone. The value of this field contains the network to peer with.
               Structure is documented below.
        :param pulumi.Input['ManagedZonePrivateVisibilityConfigArgs'] private_visibility_config: For privately visible zones, the set of Virtual Private Cloud
               resources that the zone is visible from.
               Structure is documented below.
        :param pulumi.Input[str] project: The ID of the project in which the resource belongs.
               If it is not provided, the provider project is used.
        :param pulumi.Input[bool] reverse_lookup: Specifies if this is a managed reverse lookup zone. If true, Cloud DNS will resolve reverse
               lookup queries using automatically configured records for VPC resources. This only applies
               to networks listed under `private_visibility_config`.
        :param pulumi.Input['ManagedZoneServiceDirectoryConfigArgs'] service_directory_config: The presence of this field indicates that this zone is backed by Service Directory. The value of this field contains information related to the namespace associated with the zone.  Structure is documented below.
        :param pulumi.Input[str] visibility: The zone's visibility: public zones are exposed to the Internet,
               while private zones are visible only to Virtual Private Cloud resources.
               Default value is `public`.
               Possible values are `private` and `public`.
        """
        if description is None:
            description = 'Managed by Pulumi'
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dns_name is not None:
            pulumi.set(__self__, "dns_name", dns_name)
        if dnssec_config is not None:
            pulumi.set(__self__, "dnssec_config", dnssec_config)
        if force_destroy is not None:
            pulumi.set(__self__, "force_destroy", force_destroy)
        if forwarding_config is not None:
            pulumi.set(__self__, "forwarding_config", forwarding_config)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_servers is not None:
            pulumi.set(__self__, "name_servers", name_servers)
        if peering_config is not None:
            pulumi.set(__self__, "peering_config", peering_config)
        if private_visibility_config is not None:
            pulumi.set(__self__, "private_visibility_config", private_visibility_config)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if reverse_lookup is not None:
            pulumi.set(__self__, "reverse_lookup", reverse_lookup)
        if service_directory_config is not None:
            pulumi.set(__self__, "service_directory_config", service_directory_config)
        if visibility is not None:
            pulumi.set(__self__, "visibility", visibility)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A textual description field. Defaults to 'Managed by Pulumi'.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="dnsName")
    def dns_name(self) -> Optional[pulumi.Input[str]]:
        """
        The DNS name of this managed zone, for instance "example.com.".
        """
        return pulumi.get(self, "dns_name")

    @dns_name.setter
    def dns_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_name", value)

    @property
    @pulumi.getter(name="dnssecConfig")
    def dnssec_config(self) -> Optional[pulumi.Input['ManagedZoneDnssecConfigArgs']]:
        """
        DNSSEC configuration
        Structure is documented below.
        """
        return pulumi.get(self, "dnssec_config")

    @dnssec_config.setter
    def dnssec_config(self, value: Optional[pulumi.Input['ManagedZoneDnssecConfigArgs']]):
        pulumi.set(self, "dnssec_config", value)

    @property
    @pulumi.getter(name="forceDestroy")
    def force_destroy(self) -> Optional[pulumi.Input[bool]]:
        """
        Set this true to delete all records in the zone.
        """
        return pulumi.get(self, "force_destroy")

    @force_destroy.setter
    def force_destroy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force_destroy", value)

    @property
    @pulumi.getter(name="forwardingConfig")
    def forwarding_config(self) -> Optional[pulumi.Input['ManagedZoneForwardingConfigArgs']]:
        """
        The presence for this field indicates that outbound forwarding is enabled
        for this zone. The value of this field contains the set of destinations
        to forward to.
        Structure is documented below.
        """
        return pulumi.get(self, "forwarding_config")

    @forwarding_config.setter
    def forwarding_config(self, value: Optional[pulumi.Input['ManagedZoneForwardingConfigArgs']]):
        pulumi.set(self, "forwarding_config", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A set of key/value label pairs to assign to this ManagedZone.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        User assigned name for this resource.
        Must be unique within the project.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nameServers")
    def name_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Delegate your managed_zone to these virtual name servers; defined by the server
        """
        return pulumi.get(self, "name_servers")

    @name_servers.setter
    def name_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "name_servers", value)

    @property
    @pulumi.getter(name="peeringConfig")
    def peering_config(self) -> Optional[pulumi.Input['ManagedZonePeeringConfigArgs']]:
        """
        The presence of this field indicates that DNS Peering is enabled for this
        zone. The value of this field contains the network to peer with.
        Structure is documented below.
        """
        return pulumi.get(self, "peering_config")

    @peering_config.setter
    def peering_config(self, value: Optional[pulumi.Input['ManagedZonePeeringConfigArgs']]):
        pulumi.set(self, "peering_config", value)

    @property
    @pulumi.getter(name="privateVisibilityConfig")
    def private_visibility_config(self) -> Optional[pulumi.Input['ManagedZonePrivateVisibilityConfigArgs']]:
        """
        For privately visible zones, the set of Virtual Private Cloud
        resources that the zone is visible from.
        Structure is documented below.
        """
        return pulumi.get(self, "private_visibility_config")

    @private_visibility_config.setter
    def private_visibility_config(self, value: Optional[pulumi.Input['ManagedZonePrivateVisibilityConfigArgs']]):
        pulumi.set(self, "private_visibility_config", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the project in which the resource belongs.
        If it is not provided, the provider project is used.
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="reverseLookup")
    def reverse_lookup(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies if this is a managed reverse lookup zone. If true, Cloud DNS will resolve reverse
        lookup queries using automatically configured records for VPC resources. This only applies
        to networks listed under `private_visibility_config`.
        """
        return pulumi.get(self, "reverse_lookup")

    @reverse_lookup.setter
    def reverse_lookup(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "reverse_lookup", value)

    @property
    @pulumi.getter(name="serviceDirectoryConfig")
    def service_directory_config(self) -> Optional[pulumi.Input['ManagedZoneServiceDirectoryConfigArgs']]:
        """
        The presence of this field indicates that this zone is backed by Service Directory. The value of this field contains information related to the namespace associated with the zone.  Structure is documented below.
        """
        return pulumi.get(self, "service_directory_config")

    @service_directory_config.setter
    def service_directory_config(self, value: Optional[pulumi.Input['ManagedZoneServiceDirectoryConfigArgs']]):
        pulumi.set(self, "service_directory_config", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input[str]]:
        """
        The zone's visibility: public zones are exposed to the Internet,
        while private zones are visible only to Virtual Private Cloud resources.
        Default value is `public`.
        Possible values are `private` and `public`.
        """
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "visibility", value)


class ManagedZone(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dns_name: Optional[pulumi.Input[str]] = None,
                 dnssec_config: Optional[pulumi.Input[pulumi.InputType['ManagedZoneDnssecConfigArgs']]] = None,
                 force_destroy: Optional[pulumi.Input[bool]] = None,
                 forwarding_config: Optional[pulumi.Input[pulumi.InputType['ManagedZoneForwardingConfigArgs']]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 peering_config: Optional[pulumi.Input[pulumi.InputType['ManagedZonePeeringConfigArgs']]] = None,
                 private_visibility_config: Optional[pulumi.Input[pulumi.InputType['ManagedZonePrivateVisibilityConfigArgs']]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 reverse_lookup: Optional[pulumi.Input[bool]] = None,
                 service_directory_config: Optional[pulumi.Input[pulumi.InputType['ManagedZoneServiceDirectoryConfigArgs']]] = None,
                 visibility: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        A zone is a subtree of the DNS namespace under one administrative
        responsibility. A ManagedZone is a resource that represents a DNS zone
        hosted by the Cloud DNS service.

        To get more information about ManagedZone, see:

        * [API documentation](https://cloud.google.com/dns/api/v1/managedZones)
        * How-to Guides
            * [Managing Zones](https://cloud.google.com/dns/zones/)

        ## Example Usage
        ### Dns Managed Zone Basic

        ```python
        import pulumi
        import pulumi_gcp as gcp

        example_zone = gcp.dns.ManagedZone("example-zone",
            description="Example DNS zone",
            dns_name="my-domain.com.",
            labels={
                "foo": "bar",
            })
        ```
        ### Dns Managed Zone Private

        ```python
        import pulumi
        import pulumi_gcp as gcp

        network_1 = gcp.compute.Network("network-1", auto_create_subnetworks=False)
        network_2 = gcp.compute.Network("network-2", auto_create_subnetworks=False)
        private_zone = gcp.dns.ManagedZone("private-zone",
            dns_name="private.example.com.",
            description="Example private DNS zone",
            labels={
                "foo": "bar",
            },
            visibility="private",
            private_visibility_config=gcp.dns.ManagedZonePrivateVisibilityConfigArgs(
                networks=[
                    gcp.dns.ManagedZonePrivateVisibilityConfigNetworkArgs(
                        network_url=network_1.id,
                    ),
                    gcp.dns.ManagedZonePrivateVisibilityConfigNetworkArgs(
                        network_url=network_2.id,
                    ),
                ],
            ))
        ```
        ### Dns Managed Zone Private Forwarding

        ```python
        import pulumi
        import pulumi_gcp as gcp

        network_1 = gcp.compute.Network("network-1", auto_create_subnetworks=False)
        network_2 = gcp.compute.Network("network-2", auto_create_subnetworks=False)
        private_zone = gcp.dns.ManagedZone("private-zone",
            dns_name="private.example.com.",
            description="Example private DNS zone",
            labels={
                "foo": "bar",
            },
            visibility="private",
            private_visibility_config=gcp.dns.ManagedZonePrivateVisibilityConfigArgs(
                networks=[
                    gcp.dns.ManagedZonePrivateVisibilityConfigNetworkArgs(
                        network_url=network_1.id,
                    ),
                    gcp.dns.ManagedZonePrivateVisibilityConfigNetworkArgs(
                        network_url=network_2.id,
                    ),
                ],
            ),
            forwarding_config=gcp.dns.ManagedZoneForwardingConfigArgs(
                target_name_servers=[
                    gcp.dns.ManagedZoneForwardingConfigTargetNameServerArgs(
                        ipv4_address="172.16.1.10",
                    ),
                    gcp.dns.ManagedZoneForwardingConfigTargetNameServerArgs(
                        ipv4_address="172.16.1.20",
                    ),
                ],
            ))
        ```
        ### Dns Managed Zone Private Peering

        ```python
        import pulumi
        import pulumi_gcp as gcp

        network_source = gcp.compute.Network("network-source", auto_create_subnetworks=False)
        network_target = gcp.compute.Network("network-target", auto_create_subnetworks=False)
        peering_zone = gcp.dns.ManagedZone("peering-zone",
            dns_name="peering.example.com.",
            description="Example private DNS peering zone",
            visibility="private",
            private_visibility_config=gcp.dns.ManagedZonePrivateVisibilityConfigArgs(
                networks=[gcp.dns.ManagedZonePrivateVisibilityConfigNetworkArgs(
                    network_url=network_source.id,
                )],
            ),
            peering_config=gcp.dns.ManagedZonePeeringConfigArgs(
                target_network=gcp.dns.ManagedZonePeeringConfigTargetNetworkArgs(
                    network_url=network_target.id,
                ),
            ))
        ```
        ### Dns Managed Zone Service Directory

        ```python
        import pulumi
        import pulumi_gcp as gcp

        example = gcp.servicedirectory.Namespace("example",
            namespace_id="example",
            location="us-central1",
            opts=pulumi.ResourceOptions(provider=google_beta))
        sd_zone = gcp.dns.ManagedZone("sd-zone",
            dns_name="services.example.com.",
            description="Example private DNS Service Directory zone",
            visibility="private",
            service_directory_config=gcp.dns.ManagedZoneServiceDirectoryConfigArgs(
                namespace=gcp.dns.ManagedZoneServiceDirectoryConfigNamespaceArgs(
                    namespace_url=example.id,
                ),
            ),
            opts=pulumi.ResourceOptions(provider=google_beta))
        network = gcp.compute.Network("network", auto_create_subnetworks=False,
        opts=pulumi.ResourceOptions(provider=google_beta))
        ```

        ## Import

        ManagedZone can be imported using any of these accepted formats

        ```sh
         $ pulumi import gcp:dns/managedZone:ManagedZone default projects/{{project}}/managedZones/{{name}}
        ```

        ```sh
         $ pulumi import gcp:dns/managedZone:ManagedZone default {{project}}/{{name}}
        ```

        ```sh
         $ pulumi import gcp:dns/managedZone:ManagedZone default {{name}}
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: A textual description field. Defaults to 'Managed by Pulumi'.
        :param pulumi.Input[str] dns_name: The DNS name of this managed zone, for instance "example.com.".
        :param pulumi.Input[pulumi.InputType['ManagedZoneDnssecConfigArgs']] dnssec_config: DNSSEC configuration
               Structure is documented below.
        :param pulumi.Input[bool] force_destroy: Set this true to delete all records in the zone.
        :param pulumi.Input[pulumi.InputType['ManagedZoneForwardingConfigArgs']] forwarding_config: The presence for this field indicates that outbound forwarding is enabled
               for this zone. The value of this field contains the set of destinations
               to forward to.
               Structure is documented below.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: A set of key/value label pairs to assign to this ManagedZone.
        :param pulumi.Input[str] name: User assigned name for this resource.
               Must be unique within the project.
        :param pulumi.Input[pulumi.InputType['ManagedZonePeeringConfigArgs']] peering_config: The presence of this field indicates that DNS Peering is enabled for this
               zone. The value of this field contains the network to peer with.
               Structure is documented below.
        :param pulumi.Input[pulumi.InputType['ManagedZonePrivateVisibilityConfigArgs']] private_visibility_config: For privately visible zones, the set of Virtual Private Cloud
               resources that the zone is visible from.
               Structure is documented below.
        :param pulumi.Input[str] project: The ID of the project in which the resource belongs.
               If it is not provided, the provider project is used.
        :param pulumi.Input[bool] reverse_lookup: Specifies if this is a managed reverse lookup zone. If true, Cloud DNS will resolve reverse
               lookup queries using automatically configured records for VPC resources. This only applies
               to networks listed under `private_visibility_config`.
        :param pulumi.Input[pulumi.InputType['ManagedZoneServiceDirectoryConfigArgs']] service_directory_config: The presence of this field indicates that this zone is backed by Service Directory. The value of this field contains information related to the namespace associated with the zone.  Structure is documented below.
        :param pulumi.Input[str] visibility: The zone's visibility: public zones are exposed to the Internet,
               while private zones are visible only to Virtual Private Cloud resources.
               Default value is `public`.
               Possible values are `private` and `public`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ManagedZoneArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        A zone is a subtree of the DNS namespace under one administrative
        responsibility. A ManagedZone is a resource that represents a DNS zone
        hosted by the Cloud DNS service.

        To get more information about ManagedZone, see:

        * [API documentation](https://cloud.google.com/dns/api/v1/managedZones)
        * How-to Guides
            * [Managing Zones](https://cloud.google.com/dns/zones/)

        ## Example Usage
        ### Dns Managed Zone Basic

        ```python
        import pulumi
        import pulumi_gcp as gcp

        example_zone = gcp.dns.ManagedZone("example-zone",
            description="Example DNS zone",
            dns_name="my-domain.com.",
            labels={
                "foo": "bar",
            })
        ```
        ### Dns Managed Zone Private

        ```python
        import pulumi
        import pulumi_gcp as gcp

        network_1 = gcp.compute.Network("network-1", auto_create_subnetworks=False)
        network_2 = gcp.compute.Network("network-2", auto_create_subnetworks=False)
        private_zone = gcp.dns.ManagedZone("private-zone",
            dns_name="private.example.com.",
            description="Example private DNS zone",
            labels={
                "foo": "bar",
            },
            visibility="private",
            private_visibility_config=gcp.dns.ManagedZonePrivateVisibilityConfigArgs(
                networks=[
                    gcp.dns.ManagedZonePrivateVisibilityConfigNetworkArgs(
                        network_url=network_1.id,
                    ),
                    gcp.dns.ManagedZonePrivateVisibilityConfigNetworkArgs(
                        network_url=network_2.id,
                    ),
                ],
            ))
        ```
        ### Dns Managed Zone Private Forwarding

        ```python
        import pulumi
        import pulumi_gcp as gcp

        network_1 = gcp.compute.Network("network-1", auto_create_subnetworks=False)
        network_2 = gcp.compute.Network("network-2", auto_create_subnetworks=False)
        private_zone = gcp.dns.ManagedZone("private-zone",
            dns_name="private.example.com.",
            description="Example private DNS zone",
            labels={
                "foo": "bar",
            },
            visibility="private",
            private_visibility_config=gcp.dns.ManagedZonePrivateVisibilityConfigArgs(
                networks=[
                    gcp.dns.ManagedZonePrivateVisibilityConfigNetworkArgs(
                        network_url=network_1.id,
                    ),
                    gcp.dns.ManagedZonePrivateVisibilityConfigNetworkArgs(
                        network_url=network_2.id,
                    ),
                ],
            ),
            forwarding_config=gcp.dns.ManagedZoneForwardingConfigArgs(
                target_name_servers=[
                    gcp.dns.ManagedZoneForwardingConfigTargetNameServerArgs(
                        ipv4_address="172.16.1.10",
                    ),
                    gcp.dns.ManagedZoneForwardingConfigTargetNameServerArgs(
                        ipv4_address="172.16.1.20",
                    ),
                ],
            ))
        ```
        ### Dns Managed Zone Private Peering

        ```python
        import pulumi
        import pulumi_gcp as gcp

        network_source = gcp.compute.Network("network-source", auto_create_subnetworks=False)
        network_target = gcp.compute.Network("network-target", auto_create_subnetworks=False)
        peering_zone = gcp.dns.ManagedZone("peering-zone",
            dns_name="peering.example.com.",
            description="Example private DNS peering zone",
            visibility="private",
            private_visibility_config=gcp.dns.ManagedZonePrivateVisibilityConfigArgs(
                networks=[gcp.dns.ManagedZonePrivateVisibilityConfigNetworkArgs(
                    network_url=network_source.id,
                )],
            ),
            peering_config=gcp.dns.ManagedZonePeeringConfigArgs(
                target_network=gcp.dns.ManagedZonePeeringConfigTargetNetworkArgs(
                    network_url=network_target.id,
                ),
            ))
        ```
        ### Dns Managed Zone Service Directory

        ```python
        import pulumi
        import pulumi_gcp as gcp

        example = gcp.servicedirectory.Namespace("example",
            namespace_id="example",
            location="us-central1",
            opts=pulumi.ResourceOptions(provider=google_beta))
        sd_zone = gcp.dns.ManagedZone("sd-zone",
            dns_name="services.example.com.",
            description="Example private DNS Service Directory zone",
            visibility="private",
            service_directory_config=gcp.dns.ManagedZoneServiceDirectoryConfigArgs(
                namespace=gcp.dns.ManagedZoneServiceDirectoryConfigNamespaceArgs(
                    namespace_url=example.id,
                ),
            ),
            opts=pulumi.ResourceOptions(provider=google_beta))
        network = gcp.compute.Network("network", auto_create_subnetworks=False,
        opts=pulumi.ResourceOptions(provider=google_beta))
        ```

        ## Import

        ManagedZone can be imported using any of these accepted formats

        ```sh
         $ pulumi import gcp:dns/managedZone:ManagedZone default projects/{{project}}/managedZones/{{name}}
        ```

        ```sh
         $ pulumi import gcp:dns/managedZone:ManagedZone default {{project}}/{{name}}
        ```

        ```sh
         $ pulumi import gcp:dns/managedZone:ManagedZone default {{name}}
        ```

        :param str resource_name: The name of the resource.
        :param ManagedZoneArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ManagedZoneArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dns_name: Optional[pulumi.Input[str]] = None,
                 dnssec_config: Optional[pulumi.Input[pulumi.InputType['ManagedZoneDnssecConfigArgs']]] = None,
                 force_destroy: Optional[pulumi.Input[bool]] = None,
                 forwarding_config: Optional[pulumi.Input[pulumi.InputType['ManagedZoneForwardingConfigArgs']]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 peering_config: Optional[pulumi.Input[pulumi.InputType['ManagedZonePeeringConfigArgs']]] = None,
                 private_visibility_config: Optional[pulumi.Input[pulumi.InputType['ManagedZonePrivateVisibilityConfigArgs']]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 reverse_lookup: Optional[pulumi.Input[bool]] = None,
                 service_directory_config: Optional[pulumi.Input[pulumi.InputType['ManagedZoneServiceDirectoryConfigArgs']]] = None,
                 visibility: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ManagedZoneArgs.__new__(ManagedZoneArgs)

            if description is None:
                description = 'Managed by Pulumi'
            __props__.__dict__["description"] = description
            if dns_name is None and not opts.urn:
                raise TypeError("Missing required property 'dns_name'")
            __props__.__dict__["dns_name"] = dns_name
            __props__.__dict__["dnssec_config"] = dnssec_config
            __props__.__dict__["force_destroy"] = force_destroy
            __props__.__dict__["forwarding_config"] = forwarding_config
            __props__.__dict__["labels"] = labels
            __props__.__dict__["name"] = name
            __props__.__dict__["peering_config"] = peering_config
            __props__.__dict__["private_visibility_config"] = private_visibility_config
            __props__.__dict__["project"] = project
            __props__.__dict__["reverse_lookup"] = reverse_lookup
            __props__.__dict__["service_directory_config"] = service_directory_config
            __props__.__dict__["visibility"] = visibility
            __props__.__dict__["name_servers"] = None
        super(ManagedZone, __self__).__init__(
            'gcp:dns/managedZone:ManagedZone',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            dns_name: Optional[pulumi.Input[str]] = None,
            dnssec_config: Optional[pulumi.Input[pulumi.InputType['ManagedZoneDnssecConfigArgs']]] = None,
            force_destroy: Optional[pulumi.Input[bool]] = None,
            forwarding_config: Optional[pulumi.Input[pulumi.InputType['ManagedZoneForwardingConfigArgs']]] = None,
            labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            name_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            peering_config: Optional[pulumi.Input[pulumi.InputType['ManagedZonePeeringConfigArgs']]] = None,
            private_visibility_config: Optional[pulumi.Input[pulumi.InputType['ManagedZonePrivateVisibilityConfigArgs']]] = None,
            project: Optional[pulumi.Input[str]] = None,
            reverse_lookup: Optional[pulumi.Input[bool]] = None,
            service_directory_config: Optional[pulumi.Input[pulumi.InputType['ManagedZoneServiceDirectoryConfigArgs']]] = None,
            visibility: Optional[pulumi.Input[str]] = None) -> 'ManagedZone':
        """
        Get an existing ManagedZone resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: A textual description field. Defaults to 'Managed by Pulumi'.
        :param pulumi.Input[str] dns_name: The DNS name of this managed zone, for instance "example.com.".
        :param pulumi.Input[pulumi.InputType['ManagedZoneDnssecConfigArgs']] dnssec_config: DNSSEC configuration
               Structure is documented below.
        :param pulumi.Input[bool] force_destroy: Set this true to delete all records in the zone.
        :param pulumi.Input[pulumi.InputType['ManagedZoneForwardingConfigArgs']] forwarding_config: The presence for this field indicates that outbound forwarding is enabled
               for this zone. The value of this field contains the set of destinations
               to forward to.
               Structure is documented below.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: A set of key/value label pairs to assign to this ManagedZone.
        :param pulumi.Input[str] name: User assigned name for this resource.
               Must be unique within the project.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] name_servers: Delegate your managed_zone to these virtual name servers; defined by the server
        :param pulumi.Input[pulumi.InputType['ManagedZonePeeringConfigArgs']] peering_config: The presence of this field indicates that DNS Peering is enabled for this
               zone. The value of this field contains the network to peer with.
               Structure is documented below.
        :param pulumi.Input[pulumi.InputType['ManagedZonePrivateVisibilityConfigArgs']] private_visibility_config: For privately visible zones, the set of Virtual Private Cloud
               resources that the zone is visible from.
               Structure is documented below.
        :param pulumi.Input[str] project: The ID of the project in which the resource belongs.
               If it is not provided, the provider project is used.
        :param pulumi.Input[bool] reverse_lookup: Specifies if this is a managed reverse lookup zone. If true, Cloud DNS will resolve reverse
               lookup queries using automatically configured records for VPC resources. This only applies
               to networks listed under `private_visibility_config`.
        :param pulumi.Input[pulumi.InputType['ManagedZoneServiceDirectoryConfigArgs']] service_directory_config: The presence of this field indicates that this zone is backed by Service Directory. The value of this field contains information related to the namespace associated with the zone.  Structure is documented below.
        :param pulumi.Input[str] visibility: The zone's visibility: public zones are exposed to the Internet,
               while private zones are visible only to Virtual Private Cloud resources.
               Default value is `public`.
               Possible values are `private` and `public`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ManagedZoneState.__new__(_ManagedZoneState)

        __props__.__dict__["description"] = description
        __props__.__dict__["dns_name"] = dns_name
        __props__.__dict__["dnssec_config"] = dnssec_config
        __props__.__dict__["force_destroy"] = force_destroy
        __props__.__dict__["forwarding_config"] = forwarding_config
        __props__.__dict__["labels"] = labels
        __props__.__dict__["name"] = name
        __props__.__dict__["name_servers"] = name_servers
        __props__.__dict__["peering_config"] = peering_config
        __props__.__dict__["private_visibility_config"] = private_visibility_config
        __props__.__dict__["project"] = project
        __props__.__dict__["reverse_lookup"] = reverse_lookup
        __props__.__dict__["service_directory_config"] = service_directory_config
        __props__.__dict__["visibility"] = visibility
        return ManagedZone(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        A textual description field. Defaults to 'Managed by Pulumi'.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="dnsName")
    def dns_name(self) -> pulumi.Output[str]:
        """
        The DNS name of this managed zone, for instance "example.com.".
        """
        return pulumi.get(self, "dns_name")

    @property
    @pulumi.getter(name="dnssecConfig")
    def dnssec_config(self) -> pulumi.Output[Optional['outputs.ManagedZoneDnssecConfig']]:
        """
        DNSSEC configuration
        Structure is documented below.
        """
        return pulumi.get(self, "dnssec_config")

    @property
    @pulumi.getter(name="forceDestroy")
    def force_destroy(self) -> pulumi.Output[Optional[bool]]:
        """
        Set this true to delete all records in the zone.
        """
        return pulumi.get(self, "force_destroy")

    @property
    @pulumi.getter(name="forwardingConfig")
    def forwarding_config(self) -> pulumi.Output[Optional['outputs.ManagedZoneForwardingConfig']]:
        """
        The presence for this field indicates that outbound forwarding is enabled
        for this zone. The value of this field contains the set of destinations
        to forward to.
        Structure is documented below.
        """
        return pulumi.get(self, "forwarding_config")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        A set of key/value label pairs to assign to this ManagedZone.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        User assigned name for this resource.
        Must be unique within the project.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nameServers")
    def name_servers(self) -> pulumi.Output[Sequence[str]]:
        """
        Delegate your managed_zone to these virtual name servers; defined by the server
        """
        return pulumi.get(self, "name_servers")

    @property
    @pulumi.getter(name="peeringConfig")
    def peering_config(self) -> pulumi.Output[Optional['outputs.ManagedZonePeeringConfig']]:
        """
        The presence of this field indicates that DNS Peering is enabled for this
        zone. The value of this field contains the network to peer with.
        Structure is documented below.
        """
        return pulumi.get(self, "peering_config")

    @property
    @pulumi.getter(name="privateVisibilityConfig")
    def private_visibility_config(self) -> pulumi.Output[Optional['outputs.ManagedZonePrivateVisibilityConfig']]:
        """
        For privately visible zones, the set of Virtual Private Cloud
        resources that the zone is visible from.
        Structure is documented below.
        """
        return pulumi.get(self, "private_visibility_config")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[str]:
        """
        The ID of the project in which the resource belongs.
        If it is not provided, the provider project is used.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="reverseLookup")
    def reverse_lookup(self) -> pulumi.Output[Optional[bool]]:
        """
        Specifies if this is a managed reverse lookup zone. If true, Cloud DNS will resolve reverse
        lookup queries using automatically configured records for VPC resources. This only applies
        to networks listed under `private_visibility_config`.
        """
        return pulumi.get(self, "reverse_lookup")

    @property
    @pulumi.getter(name="serviceDirectoryConfig")
    def service_directory_config(self) -> pulumi.Output[Optional['outputs.ManagedZoneServiceDirectoryConfig']]:
        """
        The presence of this field indicates that this zone is backed by Service Directory. The value of this field contains information related to the namespace associated with the zone.  Structure is documented below.
        """
        return pulumi.get(self, "service_directory_config")

    @property
    @pulumi.getter
    def visibility(self) -> pulumi.Output[Optional[str]]:
        """
        The zone's visibility: public zones are exposed to the Internet,
        while private zones are visible only to Virtual Private Cloud resources.
        Default value is `public`.
        Possible values are `private` and `public`.
        """
        return pulumi.get(self, "visibility")

