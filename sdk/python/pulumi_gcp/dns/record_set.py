# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime

class RecordSet(pulumi.CustomResource):
    """
    Manages a set of DNS records within Google Cloud DNS. For more information see [the official documentation](https://cloud.google.com/dns/records/) and
    [API](https://cloud.google.com/dns/api/v1/resourceRecordSets).
    
    ~> **Note:** The Google Cloud DNS API requires NS records be present at all
    times. To accommodate this, when creating NS records, the default records
    Google automatically creates will be silently overwritten.  Also, when
    destroying NS records, Terraform will not actually remove NS records, but will
    report that it did.
    """
    def __init__(__self__, __name__, __opts__=None, managed_zone=None, name=None, project=None, rrdatas=None, ttl=None, type=None):
        """Create a RecordSet resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if not managed_zone:
            raise TypeError('Missing required property managed_zone')
        elif not isinstance(managed_zone, basestring):
            raise TypeError('Expected property managed_zone to be a basestring')
        __self__.managed_zone = managed_zone
        """
        The name of the zone in which this record set will
        reside.
        """
        __props__['managedZone'] = managed_zone

        if name and not isinstance(name, basestring):
            raise TypeError('Expected property name to be a basestring')
        __self__.name = name
        """
        The DNS name this record set will apply to.
        """
        __props__['name'] = name

        if project and not isinstance(project, basestring):
            raise TypeError('Expected property project to be a basestring')
        __self__.project = project
        """
        The ID of the project in which the resource belongs. If it
        is not provided, the provider project is used.
        """
        __props__['project'] = project

        if not rrdatas:
            raise TypeError('Missing required property rrdatas')
        elif not isinstance(rrdatas, list):
            raise TypeError('Expected property rrdatas to be a list')
        __self__.rrdatas = rrdatas
        """
        The string data for the records in this record set
        whose meaning depends on the DNS type. For TXT record, if the string data contains spaces, add surrounding `\"` if you don't want your string to get split on spaces.
        """
        __props__['rrdatas'] = rrdatas

        if not ttl:
            raise TypeError('Missing required property ttl')
        elif not isinstance(ttl, int):
            raise TypeError('Expected property ttl to be a int')
        __self__.ttl = ttl
        """
        The time-to-live of this record set (seconds).
        """
        __props__['ttl'] = ttl

        if not type:
            raise TypeError('Missing required property type')
        elif not isinstance(type, basestring):
            raise TypeError('Expected property type to be a basestring')
        __self__.type = type
        """
        The DNS record set type.
        """
        __props__['type'] = type

        super(RecordSet, __self__).__init__(
            'gcp:dns/recordSet:RecordSet',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'managedZone' in outs:
            self.managed_zone = outs['managedZone']
        if 'name' in outs:
            self.name = outs['name']
        if 'project' in outs:
            self.project = outs['project']
        if 'rrdatas' in outs:
            self.rrdatas = outs['rrdatas']
        if 'ttl' in outs:
            self.ttl = outs['ttl']
        if 'type' in outs:
            self.type = outs['type']
