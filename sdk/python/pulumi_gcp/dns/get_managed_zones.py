# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetManagedZonesResult',
    'AwaitableGetManagedZonesResult',
    'get_managed_zones',
    'get_managed_zones_output',
]

@pulumi.output_type
class GetManagedZonesResult:
    """
    A collection of values returned by getManagedZones.
    """
    def __init__(__self__, id=None, managed_zones=None, project=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if managed_zones and not isinstance(managed_zones, list):
            raise TypeError("Expected argument 'managed_zones' to be a list")
        pulumi.set(__self__, "managed_zones", managed_zones)
        if project and not isinstance(project, str):
            raise TypeError("Expected argument 'project' to be a str")
        pulumi.set(__self__, "project", project)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="managedZones")
    def managed_zones(self) -> Optional[Sequence['outputs.GetManagedZonesManagedZoneResult']]:
        return pulumi.get(self, "managed_zones")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        return pulumi.get(self, "project")


class AwaitableGetManagedZonesResult(GetManagedZonesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetManagedZonesResult(
            id=self.id,
            managed_zones=self.managed_zones,
            project=self.project)


def get_managed_zones(managed_zones: Optional[Sequence[pulumi.InputType['GetManagedZonesManagedZoneArgs']]] = None,
                      project: Optional[str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetManagedZonesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['managedZones'] = managed_zones
    __args__['project'] = project
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('gcp:dns/getManagedZones:getManagedZones', __args__, opts=opts, typ=GetManagedZonesResult).value

    return AwaitableGetManagedZonesResult(
        id=pulumi.get(__ret__, 'id'),
        managed_zones=pulumi.get(__ret__, 'managed_zones'),
        project=pulumi.get(__ret__, 'project'))


@_utilities.lift_output_func(get_managed_zones)
def get_managed_zones_output(managed_zones: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetManagedZonesManagedZoneArgs']]]]] = None,
                             project: Optional[pulumi.Input[Optional[str]]] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetManagedZonesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
