# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DocumentSchemaArgs', 'DocumentSchema']

@pulumi.input_type
class DocumentSchemaArgs:
    def __init__(__self__, *,
                 display_name: pulumi.Input[str],
                 location: pulumi.Input[str],
                 project_number: pulumi.Input[str],
                 property_definitions: pulumi.Input[Sequence[pulumi.Input['DocumentSchemaPropertyDefinitionArgs']]],
                 document_is_folder: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a DocumentSchema resource.
        :param pulumi.Input[str] display_name: Name of the schema given by the user.
        :param pulumi.Input[str] location: The location of the resource.
        :param pulumi.Input[str] project_number: The unique identifier of the project.
        :param pulumi.Input[Sequence[pulumi.Input['DocumentSchemaPropertyDefinitionArgs']]] property_definitions: Defines the metadata for a schema property.
               Structure is documented below.
        :param pulumi.Input[bool] document_is_folder: Tells whether the document is a folder or a typical document.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "project_number", project_number)
        pulumi.set(__self__, "property_definitions", property_definitions)
        if document_is_folder is not None:
            pulumi.set(__self__, "document_is_folder", document_is_folder)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Input[str]:
        """
        Name of the schema given by the user.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input[str]:
        """
        The location of the resource.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[str]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="projectNumber")
    def project_number(self) -> pulumi.Input[str]:
        """
        The unique identifier of the project.
        """
        return pulumi.get(self, "project_number")

    @project_number.setter
    def project_number(self, value: pulumi.Input[str]):
        pulumi.set(self, "project_number", value)

    @property
    @pulumi.getter(name="propertyDefinitions")
    def property_definitions(self) -> pulumi.Input[Sequence[pulumi.Input['DocumentSchemaPropertyDefinitionArgs']]]:
        """
        Defines the metadata for a schema property.
        Structure is documented below.
        """
        return pulumi.get(self, "property_definitions")

    @property_definitions.setter
    def property_definitions(self, value: pulumi.Input[Sequence[pulumi.Input['DocumentSchemaPropertyDefinitionArgs']]]):
        pulumi.set(self, "property_definitions", value)

    @property
    @pulumi.getter(name="documentIsFolder")
    def document_is_folder(self) -> Optional[pulumi.Input[bool]]:
        """
        Tells whether the document is a folder or a typical document.
        """
        return pulumi.get(self, "document_is_folder")

    @document_is_folder.setter
    def document_is_folder(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "document_is_folder", value)


@pulumi.input_type
class _DocumentSchemaState:
    def __init__(__self__, *,
                 display_name: Optional[pulumi.Input[str]] = None,
                 document_is_folder: Optional[pulumi.Input[bool]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project_number: Optional[pulumi.Input[str]] = None,
                 property_definitions: Optional[pulumi.Input[Sequence[pulumi.Input['DocumentSchemaPropertyDefinitionArgs']]]] = None):
        """
        Input properties used for looking up and filtering DocumentSchema resources.
        :param pulumi.Input[str] display_name: Name of the schema given by the user.
        :param pulumi.Input[bool] document_is_folder: Tells whether the document is a folder or a typical document.
        :param pulumi.Input[str] location: The location of the resource.
        :param pulumi.Input[str] name: The name of the metadata property.
               
               (Optional)
               The schema name in the source.
               
               (Required)
               The name of the metadata property.
               
               (Optional)
               The schema name in the source.
        :param pulumi.Input[str] project_number: The unique identifier of the project.
        :param pulumi.Input[Sequence[pulumi.Input['DocumentSchemaPropertyDefinitionArgs']]] property_definitions: Defines the metadata for a schema property.
               Structure is documented below.
        """
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if document_is_folder is not None:
            pulumi.set(__self__, "document_is_folder", document_is_folder)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if project_number is not None:
            pulumi.set(__self__, "project_number", project_number)
        if property_definitions is not None:
            pulumi.set(__self__, "property_definitions", property_definitions)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the schema given by the user.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="documentIsFolder")
    def document_is_folder(self) -> Optional[pulumi.Input[bool]]:
        """
        Tells whether the document is a folder or a typical document.
        """
        return pulumi.get(self, "document_is_folder")

    @document_is_folder.setter
    def document_is_folder(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "document_is_folder", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        The location of the resource.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the metadata property.

        (Optional)
        The schema name in the source.

        (Required)
        The name of the metadata property.

        (Optional)
        The schema name in the source.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="projectNumber")
    def project_number(self) -> Optional[pulumi.Input[str]]:
        """
        The unique identifier of the project.
        """
        return pulumi.get(self, "project_number")

    @project_number.setter
    def project_number(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_number", value)

    @property
    @pulumi.getter(name="propertyDefinitions")
    def property_definitions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DocumentSchemaPropertyDefinitionArgs']]]]:
        """
        Defines the metadata for a schema property.
        Structure is documented below.
        """
        return pulumi.get(self, "property_definitions")

    @property_definitions.setter
    def property_definitions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DocumentSchemaPropertyDefinitionArgs']]]]):
        pulumi.set(self, "property_definitions", value)


class DocumentSchema(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 document_is_folder: Optional[pulumi.Input[bool]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 project_number: Optional[pulumi.Input[str]] = None,
                 property_definitions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DocumentSchemaPropertyDefinitionArgs']]]]] = None,
                 __props__=None):
        """
        A document schema is used to define document structure.

        To get more information about DocumentSchema, see:

        * [API documentation](https://cloud.google.com/document-warehouse/docs/reference/rest/v1/projects.locations.documentSchemas)
        * How-to Guides
            * [Official Documentation](https://cloud.google.com/document-warehouse/docs/manage-document-schemas)

        ## Example Usage
        ### Document Ai Warehouse Document Schema Text

        ```python
        import pulumi
        import pulumi_gcp as gcp

        project = gcp.organizations.get_project()
        example_text = gcp.documentaiwarehouse.DocumentSchema("exampleText",
            project_number=project.number,
            display_name="test-property-text",
            location="us",
            document_is_folder=False,
            property_definitions=[gcp.documentaiwarehouse.DocumentSchemaPropertyDefinitionArgs(
                name="prop3",
                display_name="propdisp3",
                is_repeatable=False,
                is_filterable=True,
                is_searchable=True,
                is_metadata=False,
                is_required=False,
                retrieval_importance="HIGHEST",
                schema_sources=[gcp.documentaiwarehouse.DocumentSchemaPropertyDefinitionSchemaSourceArgs(
                    name="dummy_source",
                    processor_type="dummy_processor",
                )],
                text_type_options=gcp.documentaiwarehouse.DocumentSchemaPropertyDefinitionTextTypeOptionsArgs(),
            )])
        ```
        ### Document Ai Warehouse Document Schema Integer

        ```python
        import pulumi
        import pulumi_gcp as gcp

        project = gcp.organizations.get_project()
        example_integer = gcp.documentaiwarehouse.DocumentSchema("exampleInteger",
            project_number=project.number,
            display_name="test-property-integer",
            location="us",
            property_definitions=[gcp.documentaiwarehouse.DocumentSchemaPropertyDefinitionArgs(
                name="prop1",
                display_name="propdisp1",
                is_repeatable=False,
                is_filterable=True,
                is_searchable=True,
                is_metadata=False,
                is_required=False,
                retrieval_importance="HIGHEST",
                schema_sources=[gcp.documentaiwarehouse.DocumentSchemaPropertyDefinitionSchemaSourceArgs(
                    name="dummy_source",
                    processor_type="dummy_processor",
                )],
                integer_type_options=gcp.documentaiwarehouse.DocumentSchemaPropertyDefinitionIntegerTypeOptionsArgs(),
            )])
        ```
        ### Document Ai Warehouse Document Schema Float

        ```python
        import pulumi
        import pulumi_gcp as gcp

        project = gcp.organizations.get_project()
        example_float = gcp.documentaiwarehouse.DocumentSchema("exampleFloat",
            project_number=project.number,
            display_name="test-property-float",
            location="us",
            property_definitions=[gcp.documentaiwarehouse.DocumentSchemaPropertyDefinitionArgs(
                name="prop2",
                display_name="propdisp2",
                is_repeatable=False,
                is_filterable=True,
                is_searchable=True,
                is_metadata=False,
                is_required=False,
                retrieval_importance="HIGHEST",
                schema_sources=[gcp.documentaiwarehouse.DocumentSchemaPropertyDefinitionSchemaSourceArgs(
                    name="dummy_source",
                    processor_type="dummy_processor",
                )],
                float_type_options=gcp.documentaiwarehouse.DocumentSchemaPropertyDefinitionFloatTypeOptionsArgs(),
            )])
        ```
        ### Document Ai Warehouse Document Schema Property

        ```python
        import pulumi
        import pulumi_gcp as gcp

        project = gcp.organizations.get_project()
        example_property = gcp.documentaiwarehouse.DocumentSchema("exampleProperty",
            project_number=project.number,
            display_name="test-property-property",
            location="us",
            document_is_folder=False,
            property_definitions=[gcp.documentaiwarehouse.DocumentSchemaPropertyDefinitionArgs(
                name="prop8",
                display_name="propdisp8",
                is_repeatable=False,
                is_filterable=True,
                is_searchable=True,
                is_metadata=False,
                is_required=False,
                retrieval_importance="HIGHEST",
                schema_sources=[gcp.documentaiwarehouse.DocumentSchemaPropertyDefinitionSchemaSourceArgs(
                    name="dummy_source",
                    processor_type="dummy_processor",
                )],
                property_type_options=gcp.documentaiwarehouse.DocumentSchemaPropertyDefinitionPropertyTypeOptionsArgs(
                    property_definitions=[gcp.documentaiwarehouse.DocumentSchemaPropertyDefinitionPropertyTypeOptionsPropertyDefinitionArgs(
                        name="prop8_nested",
                        display_name="propdisp8_nested",
                        is_repeatable=False,
                        is_filterable=True,
                        is_searchable=True,
                        is_metadata=False,
                        is_required=False,
                        retrieval_importance="HIGHEST",
                        schema_sources=[gcp.documentaiwarehouse.DocumentSchemaPropertyDefinitionPropertyTypeOptionsPropertyDefinitionSchemaSourceArgs(
                            name="dummy_source_nested",
                            processor_type="dummy_processor_nested",
                        )],
                        text_type_options=gcp.documentaiwarehouse.DocumentSchemaPropertyDefinitionPropertyTypeOptionsPropertyDefinitionTextTypeOptionsArgs(),
                    )],
                ),
            )])
        ```
        ### Document Ai Warehouse Document Schema Property Enum

        ```python
        import pulumi
        import pulumi_gcp as gcp

        project = gcp.organizations.get_project()
        example_property_enum = gcp.documentaiwarehouse.DocumentSchema("examplePropertyEnum",
            project_number=project.number,
            display_name="test-property-property",
            location="us",
            document_is_folder=False,
            property_definitions=[gcp.documentaiwarehouse.DocumentSchemaPropertyDefinitionArgs(
                name="prop8",
                display_name="propdisp8",
                is_repeatable=False,
                is_filterable=True,
                is_searchable=True,
                is_metadata=False,
                is_required=False,
                retrieval_importance="HIGHEST",
                schema_sources=[gcp.documentaiwarehouse.DocumentSchemaPropertyDefinitionSchemaSourceArgs(
                    name="dummy_source",
                    processor_type="dummy_processor",
                )],
                property_type_options=gcp.documentaiwarehouse.DocumentSchemaPropertyDefinitionPropertyTypeOptionsArgs(
                    property_definitions=[gcp.documentaiwarehouse.DocumentSchemaPropertyDefinitionPropertyTypeOptionsPropertyDefinitionArgs(
                        name="prop8_nested",
                        display_name="propdisp8_nested",
                        is_repeatable=False,
                        is_filterable=True,
                        is_searchable=True,
                        is_metadata=False,
                        is_required=False,
                        retrieval_importance="HIGHEST",
                        schema_sources=[gcp.documentaiwarehouse.DocumentSchemaPropertyDefinitionPropertyTypeOptionsPropertyDefinitionSchemaSourceArgs(
                            name="dummy_source_nested",
                            processor_type="dummy_processor_nested",
                        )],
                        enum_type_options=gcp.documentaiwarehouse.DocumentSchemaPropertyDefinitionPropertyTypeOptionsPropertyDefinitionEnumTypeOptionsArgs(
                            possible_values=[
                                "M",
                                "F",
                                "X",
                            ],
                            validation_check_disabled=False,
                        ),
                    )],
                ),
            )])
        ```
        ### Document Ai Warehouse Document Schema Enum

        ```python
        import pulumi
        import pulumi_gcp as gcp

        project = gcp.organizations.get_project()
        example_enum = gcp.documentaiwarehouse.DocumentSchema("exampleEnum",
            project_number=project.number,
            display_name="test-property-enum",
            location="us",
            property_definitions=[gcp.documentaiwarehouse.DocumentSchemaPropertyDefinitionArgs(
                name="prop6",
                display_name="propdisp6",
                is_repeatable=False,
                is_filterable=True,
                is_searchable=True,
                is_metadata=False,
                is_required=False,
                retrieval_importance="HIGHEST",
                schema_sources=[gcp.documentaiwarehouse.DocumentSchemaPropertyDefinitionSchemaSourceArgs(
                    name="dummy_source",
                    processor_type="dummy_processor",
                )],
                enum_type_options=gcp.documentaiwarehouse.DocumentSchemaPropertyDefinitionEnumTypeOptionsArgs(
                    possible_values=[
                        "M",
                        "F",
                        "X",
                    ],
                    validation_check_disabled=False,
                ),
            )])
        ```
        ### Document Ai Warehouse Document Schema Map

        ```python
        import pulumi
        import pulumi_gcp as gcp

        project = gcp.organizations.get_project()
        example_map = gcp.documentaiwarehouse.DocumentSchema("exampleMap",
            project_number=project.number,
            display_name="test-property-map",
            location="us",
            property_definitions=[gcp.documentaiwarehouse.DocumentSchemaPropertyDefinitionArgs(
                name="prop4",
                display_name="propdisp4",
                is_repeatable=False,
                is_filterable=True,
                is_searchable=True,
                is_metadata=False,
                is_required=False,
                retrieval_importance="HIGHEST",
                schema_sources=[gcp.documentaiwarehouse.DocumentSchemaPropertyDefinitionSchemaSourceArgs(
                    name="dummy_source",
                    processor_type="dummy_processor",
                )],
                map_type_options=gcp.documentaiwarehouse.DocumentSchemaPropertyDefinitionMapTypeOptionsArgs(),
            )])
        ```
        ### Document Ai Warehouse Document Schema Datetime

        ```python
        import pulumi
        import pulumi_gcp as gcp

        project = gcp.organizations.get_project()
        example_datetime = gcp.documentaiwarehouse.DocumentSchema("exampleDatetime",
            project_number=project.number,
            display_name="test-property-date_time",
            location="us",
            property_definitions=[gcp.documentaiwarehouse.DocumentSchemaPropertyDefinitionArgs(
                name="prop7",
                display_name="propdisp7",
                is_repeatable=False,
                is_filterable=True,
                is_searchable=True,
                is_metadata=False,
                is_required=False,
                retrieval_importance="HIGHEST",
                schema_sources=[gcp.documentaiwarehouse.DocumentSchemaPropertyDefinitionSchemaSourceArgs(
                    name="dummy_source",
                    processor_type="dummy_processor",
                )],
                date_time_type_options=gcp.documentaiwarehouse.DocumentSchemaPropertyDefinitionDateTimeTypeOptionsArgs(),
            )])
        ```
        ### Document Ai Warehouse Document Schema Timestamp

        ```python
        import pulumi
        import pulumi_gcp as gcp

        project = gcp.organizations.get_project()
        example_timestamp = gcp.documentaiwarehouse.DocumentSchema("exampleTimestamp",
            project_number=project.number,
            display_name="test-property-timestamp",
            location="us",
            property_definitions=[gcp.documentaiwarehouse.DocumentSchemaPropertyDefinitionArgs(
                name="prop5",
                display_name="propdisp5",
                is_repeatable=False,
                is_filterable=True,
                is_searchable=True,
                is_metadata=False,
                is_required=False,
                retrieval_importance="HIGHEST",
                schema_sources=[gcp.documentaiwarehouse.DocumentSchemaPropertyDefinitionSchemaSourceArgs(
                    name="dummy_source",
                    processor_type="dummy_processor",
                )],
                timestamp_type_options=gcp.documentaiwarehouse.DocumentSchemaPropertyDefinitionTimestampTypeOptionsArgs(),
            )])
        ```

        ## Import

        DocumentSchema can be imported using any of these accepted formats

        ```sh
         $ pulumi import gcp:documentaiwarehouse/documentSchema:DocumentSchema default projects/{{project_number}}/locations/{{location}}/documentSchemas/{{name}}
        ```

        ```sh
         $ pulumi import gcp:documentaiwarehouse/documentSchema:DocumentSchema default {{project_number}}/{{location}}/{{name}}
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] display_name: Name of the schema given by the user.
        :param pulumi.Input[bool] document_is_folder: Tells whether the document is a folder or a typical document.
        :param pulumi.Input[str] location: The location of the resource.
        :param pulumi.Input[str] project_number: The unique identifier of the project.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DocumentSchemaPropertyDefinitionArgs']]]] property_definitions: Defines the metadata for a schema property.
               Structure is documented below.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DocumentSchemaArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        A document schema is used to define document structure.

        To get more information about DocumentSchema, see:

        * [API documentation](https://cloud.google.com/document-warehouse/docs/reference/rest/v1/projects.locations.documentSchemas)
        * How-to Guides
            * [Official Documentation](https://cloud.google.com/document-warehouse/docs/manage-document-schemas)

        ## Example Usage
        ### Document Ai Warehouse Document Schema Text

        ```python
        import pulumi
        import pulumi_gcp as gcp

        project = gcp.organizations.get_project()
        example_text = gcp.documentaiwarehouse.DocumentSchema("exampleText",
            project_number=project.number,
            display_name="test-property-text",
            location="us",
            document_is_folder=False,
            property_definitions=[gcp.documentaiwarehouse.DocumentSchemaPropertyDefinitionArgs(
                name="prop3",
                display_name="propdisp3",
                is_repeatable=False,
                is_filterable=True,
                is_searchable=True,
                is_metadata=False,
                is_required=False,
                retrieval_importance="HIGHEST",
                schema_sources=[gcp.documentaiwarehouse.DocumentSchemaPropertyDefinitionSchemaSourceArgs(
                    name="dummy_source",
                    processor_type="dummy_processor",
                )],
                text_type_options=gcp.documentaiwarehouse.DocumentSchemaPropertyDefinitionTextTypeOptionsArgs(),
            )])
        ```
        ### Document Ai Warehouse Document Schema Integer

        ```python
        import pulumi
        import pulumi_gcp as gcp

        project = gcp.organizations.get_project()
        example_integer = gcp.documentaiwarehouse.DocumentSchema("exampleInteger",
            project_number=project.number,
            display_name="test-property-integer",
            location="us",
            property_definitions=[gcp.documentaiwarehouse.DocumentSchemaPropertyDefinitionArgs(
                name="prop1",
                display_name="propdisp1",
                is_repeatable=False,
                is_filterable=True,
                is_searchable=True,
                is_metadata=False,
                is_required=False,
                retrieval_importance="HIGHEST",
                schema_sources=[gcp.documentaiwarehouse.DocumentSchemaPropertyDefinitionSchemaSourceArgs(
                    name="dummy_source",
                    processor_type="dummy_processor",
                )],
                integer_type_options=gcp.documentaiwarehouse.DocumentSchemaPropertyDefinitionIntegerTypeOptionsArgs(),
            )])
        ```
        ### Document Ai Warehouse Document Schema Float

        ```python
        import pulumi
        import pulumi_gcp as gcp

        project = gcp.organizations.get_project()
        example_float = gcp.documentaiwarehouse.DocumentSchema("exampleFloat",
            project_number=project.number,
            display_name="test-property-float",
            location="us",
            property_definitions=[gcp.documentaiwarehouse.DocumentSchemaPropertyDefinitionArgs(
                name="prop2",
                display_name="propdisp2",
                is_repeatable=False,
                is_filterable=True,
                is_searchable=True,
                is_metadata=False,
                is_required=False,
                retrieval_importance="HIGHEST",
                schema_sources=[gcp.documentaiwarehouse.DocumentSchemaPropertyDefinitionSchemaSourceArgs(
                    name="dummy_source",
                    processor_type="dummy_processor",
                )],
                float_type_options=gcp.documentaiwarehouse.DocumentSchemaPropertyDefinitionFloatTypeOptionsArgs(),
            )])
        ```
        ### Document Ai Warehouse Document Schema Property

        ```python
        import pulumi
        import pulumi_gcp as gcp

        project = gcp.organizations.get_project()
        example_property = gcp.documentaiwarehouse.DocumentSchema("exampleProperty",
            project_number=project.number,
            display_name="test-property-property",
            location="us",
            document_is_folder=False,
            property_definitions=[gcp.documentaiwarehouse.DocumentSchemaPropertyDefinitionArgs(
                name="prop8",
                display_name="propdisp8",
                is_repeatable=False,
                is_filterable=True,
                is_searchable=True,
                is_metadata=False,
                is_required=False,
                retrieval_importance="HIGHEST",
                schema_sources=[gcp.documentaiwarehouse.DocumentSchemaPropertyDefinitionSchemaSourceArgs(
                    name="dummy_source",
                    processor_type="dummy_processor",
                )],
                property_type_options=gcp.documentaiwarehouse.DocumentSchemaPropertyDefinitionPropertyTypeOptionsArgs(
                    property_definitions=[gcp.documentaiwarehouse.DocumentSchemaPropertyDefinitionPropertyTypeOptionsPropertyDefinitionArgs(
                        name="prop8_nested",
                        display_name="propdisp8_nested",
                        is_repeatable=False,
                        is_filterable=True,
                        is_searchable=True,
                        is_metadata=False,
                        is_required=False,
                        retrieval_importance="HIGHEST",
                        schema_sources=[gcp.documentaiwarehouse.DocumentSchemaPropertyDefinitionPropertyTypeOptionsPropertyDefinitionSchemaSourceArgs(
                            name="dummy_source_nested",
                            processor_type="dummy_processor_nested",
                        )],
                        text_type_options=gcp.documentaiwarehouse.DocumentSchemaPropertyDefinitionPropertyTypeOptionsPropertyDefinitionTextTypeOptionsArgs(),
                    )],
                ),
            )])
        ```
        ### Document Ai Warehouse Document Schema Property Enum

        ```python
        import pulumi
        import pulumi_gcp as gcp

        project = gcp.organizations.get_project()
        example_property_enum = gcp.documentaiwarehouse.DocumentSchema("examplePropertyEnum",
            project_number=project.number,
            display_name="test-property-property",
            location="us",
            document_is_folder=False,
            property_definitions=[gcp.documentaiwarehouse.DocumentSchemaPropertyDefinitionArgs(
                name="prop8",
                display_name="propdisp8",
                is_repeatable=False,
                is_filterable=True,
                is_searchable=True,
                is_metadata=False,
                is_required=False,
                retrieval_importance="HIGHEST",
                schema_sources=[gcp.documentaiwarehouse.DocumentSchemaPropertyDefinitionSchemaSourceArgs(
                    name="dummy_source",
                    processor_type="dummy_processor",
                )],
                property_type_options=gcp.documentaiwarehouse.DocumentSchemaPropertyDefinitionPropertyTypeOptionsArgs(
                    property_definitions=[gcp.documentaiwarehouse.DocumentSchemaPropertyDefinitionPropertyTypeOptionsPropertyDefinitionArgs(
                        name="prop8_nested",
                        display_name="propdisp8_nested",
                        is_repeatable=False,
                        is_filterable=True,
                        is_searchable=True,
                        is_metadata=False,
                        is_required=False,
                        retrieval_importance="HIGHEST",
                        schema_sources=[gcp.documentaiwarehouse.DocumentSchemaPropertyDefinitionPropertyTypeOptionsPropertyDefinitionSchemaSourceArgs(
                            name="dummy_source_nested",
                            processor_type="dummy_processor_nested",
                        )],
                        enum_type_options=gcp.documentaiwarehouse.DocumentSchemaPropertyDefinitionPropertyTypeOptionsPropertyDefinitionEnumTypeOptionsArgs(
                            possible_values=[
                                "M",
                                "F",
                                "X",
                            ],
                            validation_check_disabled=False,
                        ),
                    )],
                ),
            )])
        ```
        ### Document Ai Warehouse Document Schema Enum

        ```python
        import pulumi
        import pulumi_gcp as gcp

        project = gcp.organizations.get_project()
        example_enum = gcp.documentaiwarehouse.DocumentSchema("exampleEnum",
            project_number=project.number,
            display_name="test-property-enum",
            location="us",
            property_definitions=[gcp.documentaiwarehouse.DocumentSchemaPropertyDefinitionArgs(
                name="prop6",
                display_name="propdisp6",
                is_repeatable=False,
                is_filterable=True,
                is_searchable=True,
                is_metadata=False,
                is_required=False,
                retrieval_importance="HIGHEST",
                schema_sources=[gcp.documentaiwarehouse.DocumentSchemaPropertyDefinitionSchemaSourceArgs(
                    name="dummy_source",
                    processor_type="dummy_processor",
                )],
                enum_type_options=gcp.documentaiwarehouse.DocumentSchemaPropertyDefinitionEnumTypeOptionsArgs(
                    possible_values=[
                        "M",
                        "F",
                        "X",
                    ],
                    validation_check_disabled=False,
                ),
            )])
        ```
        ### Document Ai Warehouse Document Schema Map

        ```python
        import pulumi
        import pulumi_gcp as gcp

        project = gcp.organizations.get_project()
        example_map = gcp.documentaiwarehouse.DocumentSchema("exampleMap",
            project_number=project.number,
            display_name="test-property-map",
            location="us",
            property_definitions=[gcp.documentaiwarehouse.DocumentSchemaPropertyDefinitionArgs(
                name="prop4",
                display_name="propdisp4",
                is_repeatable=False,
                is_filterable=True,
                is_searchable=True,
                is_metadata=False,
                is_required=False,
                retrieval_importance="HIGHEST",
                schema_sources=[gcp.documentaiwarehouse.DocumentSchemaPropertyDefinitionSchemaSourceArgs(
                    name="dummy_source",
                    processor_type="dummy_processor",
                )],
                map_type_options=gcp.documentaiwarehouse.DocumentSchemaPropertyDefinitionMapTypeOptionsArgs(),
            )])
        ```
        ### Document Ai Warehouse Document Schema Datetime

        ```python
        import pulumi
        import pulumi_gcp as gcp

        project = gcp.organizations.get_project()
        example_datetime = gcp.documentaiwarehouse.DocumentSchema("exampleDatetime",
            project_number=project.number,
            display_name="test-property-date_time",
            location="us",
            property_definitions=[gcp.documentaiwarehouse.DocumentSchemaPropertyDefinitionArgs(
                name="prop7",
                display_name="propdisp7",
                is_repeatable=False,
                is_filterable=True,
                is_searchable=True,
                is_metadata=False,
                is_required=False,
                retrieval_importance="HIGHEST",
                schema_sources=[gcp.documentaiwarehouse.DocumentSchemaPropertyDefinitionSchemaSourceArgs(
                    name="dummy_source",
                    processor_type="dummy_processor",
                )],
                date_time_type_options=gcp.documentaiwarehouse.DocumentSchemaPropertyDefinitionDateTimeTypeOptionsArgs(),
            )])
        ```
        ### Document Ai Warehouse Document Schema Timestamp

        ```python
        import pulumi
        import pulumi_gcp as gcp

        project = gcp.organizations.get_project()
        example_timestamp = gcp.documentaiwarehouse.DocumentSchema("exampleTimestamp",
            project_number=project.number,
            display_name="test-property-timestamp",
            location="us",
            property_definitions=[gcp.documentaiwarehouse.DocumentSchemaPropertyDefinitionArgs(
                name="prop5",
                display_name="propdisp5",
                is_repeatable=False,
                is_filterable=True,
                is_searchable=True,
                is_metadata=False,
                is_required=False,
                retrieval_importance="HIGHEST",
                schema_sources=[gcp.documentaiwarehouse.DocumentSchemaPropertyDefinitionSchemaSourceArgs(
                    name="dummy_source",
                    processor_type="dummy_processor",
                )],
                timestamp_type_options=gcp.documentaiwarehouse.DocumentSchemaPropertyDefinitionTimestampTypeOptionsArgs(),
            )])
        ```

        ## Import

        DocumentSchema can be imported using any of these accepted formats

        ```sh
         $ pulumi import gcp:documentaiwarehouse/documentSchema:DocumentSchema default projects/{{project_number}}/locations/{{location}}/documentSchemas/{{name}}
        ```

        ```sh
         $ pulumi import gcp:documentaiwarehouse/documentSchema:DocumentSchema default {{project_number}}/{{location}}/{{name}}
        ```

        :param str resource_name: The name of the resource.
        :param DocumentSchemaArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DocumentSchemaArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 document_is_folder: Optional[pulumi.Input[bool]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 project_number: Optional[pulumi.Input[str]] = None,
                 property_definitions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DocumentSchemaPropertyDefinitionArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DocumentSchemaArgs.__new__(DocumentSchemaArgs)

            if display_name is None and not opts.urn:
                raise TypeError("Missing required property 'display_name'")
            __props__.__dict__["display_name"] = display_name
            __props__.__dict__["document_is_folder"] = document_is_folder
            if location is None and not opts.urn:
                raise TypeError("Missing required property 'location'")
            __props__.__dict__["location"] = location
            if project_number is None and not opts.urn:
                raise TypeError("Missing required property 'project_number'")
            __props__.__dict__["project_number"] = project_number
            if property_definitions is None and not opts.urn:
                raise TypeError("Missing required property 'property_definitions'")
            __props__.__dict__["property_definitions"] = property_definitions
            __props__.__dict__["name"] = None
        super(DocumentSchema, __self__).__init__(
            'gcp:documentaiwarehouse/documentSchema:DocumentSchema',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            display_name: Optional[pulumi.Input[str]] = None,
            document_is_folder: Optional[pulumi.Input[bool]] = None,
            location: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            project_number: Optional[pulumi.Input[str]] = None,
            property_definitions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DocumentSchemaPropertyDefinitionArgs']]]]] = None) -> 'DocumentSchema':
        """
        Get an existing DocumentSchema resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] display_name: Name of the schema given by the user.
        :param pulumi.Input[bool] document_is_folder: Tells whether the document is a folder or a typical document.
        :param pulumi.Input[str] location: The location of the resource.
        :param pulumi.Input[str] name: The name of the metadata property.
               
               (Optional)
               The schema name in the source.
               
               (Required)
               The name of the metadata property.
               
               (Optional)
               The schema name in the source.
        :param pulumi.Input[str] project_number: The unique identifier of the project.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DocumentSchemaPropertyDefinitionArgs']]]] property_definitions: Defines the metadata for a schema property.
               Structure is documented below.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DocumentSchemaState.__new__(_DocumentSchemaState)

        __props__.__dict__["display_name"] = display_name
        __props__.__dict__["document_is_folder"] = document_is_folder
        __props__.__dict__["location"] = location
        __props__.__dict__["name"] = name
        __props__.__dict__["project_number"] = project_number
        __props__.__dict__["property_definitions"] = property_definitions
        return DocumentSchema(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[str]:
        """
        Name of the schema given by the user.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="documentIsFolder")
    def document_is_folder(self) -> pulumi.Output[Optional[bool]]:
        """
        Tells whether the document is a folder or a typical document.
        """
        return pulumi.get(self, "document_is_folder")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        """
        The location of the resource.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the metadata property.

        (Optional)
        The schema name in the source.

        (Required)
        The name of the metadata property.

        (Optional)
        The schema name in the source.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="projectNumber")
    def project_number(self) -> pulumi.Output[str]:
        """
        The unique identifier of the project.
        """
        return pulumi.get(self, "project_number")

    @property
    @pulumi.getter(name="propertyDefinitions")
    def property_definitions(self) -> pulumi.Output[Sequence['outputs.DocumentSchemaPropertyDefinition']]:
        """
        Defines the metadata for a schema property.
        Structure is documented below.
        """
        return pulumi.get(self, "property_definitions")

