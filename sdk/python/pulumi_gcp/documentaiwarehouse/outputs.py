# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'DocumentSchemaPropertyDefinition',
    'DocumentSchemaPropertyDefinitionDateTimeTypeOptions',
    'DocumentSchemaPropertyDefinitionEnumTypeOptions',
    'DocumentSchemaPropertyDefinitionFloatTypeOptions',
    'DocumentSchemaPropertyDefinitionIntegerTypeOptions',
    'DocumentSchemaPropertyDefinitionMapTypeOptions',
    'DocumentSchemaPropertyDefinitionPropertyTypeOptions',
    'DocumentSchemaPropertyDefinitionPropertyTypeOptionsPropertyDefinition',
    'DocumentSchemaPropertyDefinitionPropertyTypeOptionsPropertyDefinitionDateTimeTypeOptions',
    'DocumentSchemaPropertyDefinitionPropertyTypeOptionsPropertyDefinitionEnumTypeOptions',
    'DocumentSchemaPropertyDefinitionPropertyTypeOptionsPropertyDefinitionFloatTypeOptions',
    'DocumentSchemaPropertyDefinitionPropertyTypeOptionsPropertyDefinitionIntegerTypeOptions',
    'DocumentSchemaPropertyDefinitionPropertyTypeOptionsPropertyDefinitionMapTypeOptions',
    'DocumentSchemaPropertyDefinitionPropertyTypeOptionsPropertyDefinitionSchemaSource',
    'DocumentSchemaPropertyDefinitionPropertyTypeOptionsPropertyDefinitionTextTypeOptions',
    'DocumentSchemaPropertyDefinitionPropertyTypeOptionsPropertyDefinitionTimestampTypeOptions',
    'DocumentSchemaPropertyDefinitionSchemaSource',
    'DocumentSchemaPropertyDefinitionTextTypeOptions',
    'DocumentSchemaPropertyDefinitionTimestampTypeOptions',
]

@pulumi.output_type
class DocumentSchemaPropertyDefinition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dateTimeTypeOptions":
            suggest = "date_time_type_options"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "enumTypeOptions":
            suggest = "enum_type_options"
        elif key == "floatTypeOptions":
            suggest = "float_type_options"
        elif key == "integerTypeOptions":
            suggest = "integer_type_options"
        elif key == "isFilterable":
            suggest = "is_filterable"
        elif key == "isMetadata":
            suggest = "is_metadata"
        elif key == "isRepeatable":
            suggest = "is_repeatable"
        elif key == "isRequired":
            suggest = "is_required"
        elif key == "isSearchable":
            suggest = "is_searchable"
        elif key == "mapTypeOptions":
            suggest = "map_type_options"
        elif key == "propertyTypeOptions":
            suggest = "property_type_options"
        elif key == "retrievalImportance":
            suggest = "retrieval_importance"
        elif key == "schemaSources":
            suggest = "schema_sources"
        elif key == "textTypeOptions":
            suggest = "text_type_options"
        elif key == "timestampTypeOptions":
            suggest = "timestamp_type_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DocumentSchemaPropertyDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DocumentSchemaPropertyDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DocumentSchemaPropertyDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 date_time_type_options: Optional['outputs.DocumentSchemaPropertyDefinitionDateTimeTypeOptions'] = None,
                 display_name: Optional[str] = None,
                 enum_type_options: Optional['outputs.DocumentSchemaPropertyDefinitionEnumTypeOptions'] = None,
                 float_type_options: Optional['outputs.DocumentSchemaPropertyDefinitionFloatTypeOptions'] = None,
                 integer_type_options: Optional['outputs.DocumentSchemaPropertyDefinitionIntegerTypeOptions'] = None,
                 is_filterable: Optional[bool] = None,
                 is_metadata: Optional[bool] = None,
                 is_repeatable: Optional[bool] = None,
                 is_required: Optional[bool] = None,
                 is_searchable: Optional[bool] = None,
                 map_type_options: Optional['outputs.DocumentSchemaPropertyDefinitionMapTypeOptions'] = None,
                 property_type_options: Optional['outputs.DocumentSchemaPropertyDefinitionPropertyTypeOptions'] = None,
                 retrieval_importance: Optional[str] = None,
                 schema_sources: Optional[Sequence['outputs.DocumentSchemaPropertyDefinitionSchemaSource']] = None,
                 text_type_options: Optional['outputs.DocumentSchemaPropertyDefinitionTextTypeOptions'] = None,
                 timestamp_type_options: Optional['outputs.DocumentSchemaPropertyDefinitionTimestampTypeOptions'] = None):
        """
        :param str name: The name of the metadata property.
        :param 'DocumentSchemaPropertyDefinitionDateTimeTypeOptionsArgs' date_time_type_options: Date time property. Not supported by CMEK compliant deployment.
        :param str display_name: The display-name for the property, used for front-end.
        :param 'DocumentSchemaPropertyDefinitionEnumTypeOptionsArgs' enum_type_options: Enum/categorical property.
               Structure is documented below.
        :param 'DocumentSchemaPropertyDefinitionFloatTypeOptionsArgs' float_type_options: Float property.
        :param 'DocumentSchemaPropertyDefinitionIntegerTypeOptionsArgs' integer_type_options: Integer property.
        :param bool is_filterable: Whether the property can be filtered. If this is a sub-property, all the parent properties must be marked filterable.
        :param bool is_metadata: Whether the property is user supplied metadata.
        :param bool is_repeatable: Whether the property can have multiple values.
        :param bool is_required: Whether the property is mandatory.
        :param bool is_searchable: Indicates that the property should be included in a global search.
        :param 'DocumentSchemaPropertyDefinitionMapTypeOptionsArgs' map_type_options: Map property.
        :param 'DocumentSchemaPropertyDefinitionPropertyTypeOptionsArgs' property_type_options: Nested structured data property.
               Structure is documented below.
        :param str retrieval_importance: Stores the retrieval importance.
               Possible values are: `HIGHEST`, `HIGHER`, `HIGH`, `MEDIUM`, `LOW`, `LOWEST`.
        :param Sequence['DocumentSchemaPropertyDefinitionSchemaSourceArgs'] schema_sources: The schema source information.
               Structure is documented below.
        :param 'DocumentSchemaPropertyDefinitionTextTypeOptionsArgs' text_type_options: Text property.
        :param 'DocumentSchemaPropertyDefinitionTimestampTypeOptionsArgs' timestamp_type_options: Timestamp property. Not supported by CMEK compliant deployment.
        """
        pulumi.set(__self__, "name", name)
        if date_time_type_options is not None:
            pulumi.set(__self__, "date_time_type_options", date_time_type_options)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if enum_type_options is not None:
            pulumi.set(__self__, "enum_type_options", enum_type_options)
        if float_type_options is not None:
            pulumi.set(__self__, "float_type_options", float_type_options)
        if integer_type_options is not None:
            pulumi.set(__self__, "integer_type_options", integer_type_options)
        if is_filterable is not None:
            pulumi.set(__self__, "is_filterable", is_filterable)
        if is_metadata is not None:
            pulumi.set(__self__, "is_metadata", is_metadata)
        if is_repeatable is not None:
            pulumi.set(__self__, "is_repeatable", is_repeatable)
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if is_searchable is not None:
            pulumi.set(__self__, "is_searchable", is_searchable)
        if map_type_options is not None:
            pulumi.set(__self__, "map_type_options", map_type_options)
        if property_type_options is not None:
            pulumi.set(__self__, "property_type_options", property_type_options)
        if retrieval_importance is not None:
            pulumi.set(__self__, "retrieval_importance", retrieval_importance)
        if schema_sources is not None:
            pulumi.set(__self__, "schema_sources", schema_sources)
        if text_type_options is not None:
            pulumi.set(__self__, "text_type_options", text_type_options)
        if timestamp_type_options is not None:
            pulumi.set(__self__, "timestamp_type_options", timestamp_type_options)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the metadata property.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="dateTimeTypeOptions")
    def date_time_type_options(self) -> Optional['outputs.DocumentSchemaPropertyDefinitionDateTimeTypeOptions']:
        """
        Date time property. Not supported by CMEK compliant deployment.
        """
        return pulumi.get(self, "date_time_type_options")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        The display-name for the property, used for front-end.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="enumTypeOptions")
    def enum_type_options(self) -> Optional['outputs.DocumentSchemaPropertyDefinitionEnumTypeOptions']:
        """
        Enum/categorical property.
        Structure is documented below.
        """
        return pulumi.get(self, "enum_type_options")

    @property
    @pulumi.getter(name="floatTypeOptions")
    def float_type_options(self) -> Optional['outputs.DocumentSchemaPropertyDefinitionFloatTypeOptions']:
        """
        Float property.
        """
        return pulumi.get(self, "float_type_options")

    @property
    @pulumi.getter(name="integerTypeOptions")
    def integer_type_options(self) -> Optional['outputs.DocumentSchemaPropertyDefinitionIntegerTypeOptions']:
        """
        Integer property.
        """
        return pulumi.get(self, "integer_type_options")

    @property
    @pulumi.getter(name="isFilterable")
    def is_filterable(self) -> Optional[bool]:
        """
        Whether the property can be filtered. If this is a sub-property, all the parent properties must be marked filterable.
        """
        return pulumi.get(self, "is_filterable")

    @property
    @pulumi.getter(name="isMetadata")
    def is_metadata(self) -> Optional[bool]:
        """
        Whether the property is user supplied metadata.
        """
        return pulumi.get(self, "is_metadata")

    @property
    @pulumi.getter(name="isRepeatable")
    def is_repeatable(self) -> Optional[bool]:
        """
        Whether the property can have multiple values.
        """
        return pulumi.get(self, "is_repeatable")

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[bool]:
        """
        Whether the property is mandatory.
        """
        return pulumi.get(self, "is_required")

    @property
    @pulumi.getter(name="isSearchable")
    def is_searchable(self) -> Optional[bool]:
        """
        Indicates that the property should be included in a global search.
        """
        return pulumi.get(self, "is_searchable")

    @property
    @pulumi.getter(name="mapTypeOptions")
    def map_type_options(self) -> Optional['outputs.DocumentSchemaPropertyDefinitionMapTypeOptions']:
        """
        Map property.
        """
        return pulumi.get(self, "map_type_options")

    @property
    @pulumi.getter(name="propertyTypeOptions")
    def property_type_options(self) -> Optional['outputs.DocumentSchemaPropertyDefinitionPropertyTypeOptions']:
        """
        Nested structured data property.
        Structure is documented below.
        """
        return pulumi.get(self, "property_type_options")

    @property
    @pulumi.getter(name="retrievalImportance")
    def retrieval_importance(self) -> Optional[str]:
        """
        Stores the retrieval importance.
        Possible values are: `HIGHEST`, `HIGHER`, `HIGH`, `MEDIUM`, `LOW`, `LOWEST`.
        """
        return pulumi.get(self, "retrieval_importance")

    @property
    @pulumi.getter(name="schemaSources")
    def schema_sources(self) -> Optional[Sequence['outputs.DocumentSchemaPropertyDefinitionSchemaSource']]:
        """
        The schema source information.
        Structure is documented below.
        """
        return pulumi.get(self, "schema_sources")

    @property
    @pulumi.getter(name="textTypeOptions")
    def text_type_options(self) -> Optional['outputs.DocumentSchemaPropertyDefinitionTextTypeOptions']:
        """
        Text property.
        """
        return pulumi.get(self, "text_type_options")

    @property
    @pulumi.getter(name="timestampTypeOptions")
    def timestamp_type_options(self) -> Optional['outputs.DocumentSchemaPropertyDefinitionTimestampTypeOptions']:
        """
        Timestamp property. Not supported by CMEK compliant deployment.
        """
        return pulumi.get(self, "timestamp_type_options")


@pulumi.output_type
class DocumentSchemaPropertyDefinitionDateTimeTypeOptions(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class DocumentSchemaPropertyDefinitionEnumTypeOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "possibleValues":
            suggest = "possible_values"
        elif key == "validationCheckDisabled":
            suggest = "validation_check_disabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DocumentSchemaPropertyDefinitionEnumTypeOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DocumentSchemaPropertyDefinitionEnumTypeOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DocumentSchemaPropertyDefinitionEnumTypeOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 possible_values: Sequence[str],
                 validation_check_disabled: Optional[bool] = None):
        """
        :param Sequence[str] possible_values: List of possible enum values.
        :param bool validation_check_disabled: Make sure the enum property value provided in the document is in the possile value list during document creation. The validation check runs by default.
               
               - - -
        """
        pulumi.set(__self__, "possible_values", possible_values)
        if validation_check_disabled is not None:
            pulumi.set(__self__, "validation_check_disabled", validation_check_disabled)

    @property
    @pulumi.getter(name="possibleValues")
    def possible_values(self) -> Sequence[str]:
        """
        List of possible enum values.
        """
        return pulumi.get(self, "possible_values")

    @property
    @pulumi.getter(name="validationCheckDisabled")
    def validation_check_disabled(self) -> Optional[bool]:
        """
        Make sure the enum property value provided in the document is in the possile value list during document creation. The validation check runs by default.

        - - -
        """
        return pulumi.get(self, "validation_check_disabled")


@pulumi.output_type
class DocumentSchemaPropertyDefinitionFloatTypeOptions(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class DocumentSchemaPropertyDefinitionIntegerTypeOptions(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class DocumentSchemaPropertyDefinitionMapTypeOptions(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class DocumentSchemaPropertyDefinitionPropertyTypeOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "propertyDefinitions":
            suggest = "property_definitions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DocumentSchemaPropertyDefinitionPropertyTypeOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DocumentSchemaPropertyDefinitionPropertyTypeOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DocumentSchemaPropertyDefinitionPropertyTypeOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 property_definitions: Sequence['outputs.DocumentSchemaPropertyDefinitionPropertyTypeOptionsPropertyDefinition']):
        """
        :param Sequence['DocumentSchemaPropertyDefinitionPropertyTypeOptionsPropertyDefinitionArgs'] property_definitions: Defines the metadata for a schema property.
               Structure is documented below.
        """
        pulumi.set(__self__, "property_definitions", property_definitions)

    @property
    @pulumi.getter(name="propertyDefinitions")
    def property_definitions(self) -> Sequence['outputs.DocumentSchemaPropertyDefinitionPropertyTypeOptionsPropertyDefinition']:
        """
        Defines the metadata for a schema property.
        Structure is documented below.
        """
        return pulumi.get(self, "property_definitions")


@pulumi.output_type
class DocumentSchemaPropertyDefinitionPropertyTypeOptionsPropertyDefinition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dateTimeTypeOptions":
            suggest = "date_time_type_options"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "enumTypeOptions":
            suggest = "enum_type_options"
        elif key == "floatTypeOptions":
            suggest = "float_type_options"
        elif key == "integerTypeOptions":
            suggest = "integer_type_options"
        elif key == "isFilterable":
            suggest = "is_filterable"
        elif key == "isMetadata":
            suggest = "is_metadata"
        elif key == "isRepeatable":
            suggest = "is_repeatable"
        elif key == "isRequired":
            suggest = "is_required"
        elif key == "isSearchable":
            suggest = "is_searchable"
        elif key == "mapTypeOptions":
            suggest = "map_type_options"
        elif key == "retrievalImportance":
            suggest = "retrieval_importance"
        elif key == "schemaSources":
            suggest = "schema_sources"
        elif key == "textTypeOptions":
            suggest = "text_type_options"
        elif key == "timestampTypeOptions":
            suggest = "timestamp_type_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DocumentSchemaPropertyDefinitionPropertyTypeOptionsPropertyDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DocumentSchemaPropertyDefinitionPropertyTypeOptionsPropertyDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DocumentSchemaPropertyDefinitionPropertyTypeOptionsPropertyDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 date_time_type_options: Optional['outputs.DocumentSchemaPropertyDefinitionPropertyTypeOptionsPropertyDefinitionDateTimeTypeOptions'] = None,
                 display_name: Optional[str] = None,
                 enum_type_options: Optional['outputs.DocumentSchemaPropertyDefinitionPropertyTypeOptionsPropertyDefinitionEnumTypeOptions'] = None,
                 float_type_options: Optional['outputs.DocumentSchemaPropertyDefinitionPropertyTypeOptionsPropertyDefinitionFloatTypeOptions'] = None,
                 integer_type_options: Optional['outputs.DocumentSchemaPropertyDefinitionPropertyTypeOptionsPropertyDefinitionIntegerTypeOptions'] = None,
                 is_filterable: Optional[bool] = None,
                 is_metadata: Optional[bool] = None,
                 is_repeatable: Optional[bool] = None,
                 is_required: Optional[bool] = None,
                 is_searchable: Optional[bool] = None,
                 map_type_options: Optional['outputs.DocumentSchemaPropertyDefinitionPropertyTypeOptionsPropertyDefinitionMapTypeOptions'] = None,
                 retrieval_importance: Optional[str] = None,
                 schema_sources: Optional[Sequence['outputs.DocumentSchemaPropertyDefinitionPropertyTypeOptionsPropertyDefinitionSchemaSource']] = None,
                 text_type_options: Optional['outputs.DocumentSchemaPropertyDefinitionPropertyTypeOptionsPropertyDefinitionTextTypeOptions'] = None,
                 timestamp_type_options: Optional['outputs.DocumentSchemaPropertyDefinitionPropertyTypeOptionsPropertyDefinitionTimestampTypeOptions'] = None):
        """
        :param str name: The name of the metadata property.
        :param 'DocumentSchemaPropertyDefinitionPropertyTypeOptionsPropertyDefinitionDateTimeTypeOptionsArgs' date_time_type_options: Date time property. Not supported by CMEK compliant deployment.
        :param str display_name: The display-name for the property, used for front-end.
        :param 'DocumentSchemaPropertyDefinitionPropertyTypeOptionsPropertyDefinitionEnumTypeOptionsArgs' enum_type_options: Enum/categorical property.
               Structure is documented below.
        :param 'DocumentSchemaPropertyDefinitionPropertyTypeOptionsPropertyDefinitionFloatTypeOptionsArgs' float_type_options: Float property.
        :param 'DocumentSchemaPropertyDefinitionPropertyTypeOptionsPropertyDefinitionIntegerTypeOptionsArgs' integer_type_options: Integer property.
        :param bool is_filterable: Whether the property can be filtered. If this is a sub-property, all the parent properties must be marked filterable.
        :param bool is_metadata: Whether the property is user supplied metadata.
        :param bool is_repeatable: Whether the property can have multiple values.
        :param bool is_required: Whether the property is mandatory.
        :param bool is_searchable: Indicates that the property should be included in a global search.
        :param 'DocumentSchemaPropertyDefinitionPropertyTypeOptionsPropertyDefinitionMapTypeOptionsArgs' map_type_options: Map property.
        :param str retrieval_importance: Stores the retrieval importance.
               Possible values are: `HIGHEST`, `HIGHER`, `HIGH`, `MEDIUM`, `LOW`, `LOWEST`.
        :param Sequence['DocumentSchemaPropertyDefinitionPropertyTypeOptionsPropertyDefinitionSchemaSourceArgs'] schema_sources: The schema source information.
               Structure is documented below.
        :param 'DocumentSchemaPropertyDefinitionPropertyTypeOptionsPropertyDefinitionTextTypeOptionsArgs' text_type_options: Text property.
        :param 'DocumentSchemaPropertyDefinitionPropertyTypeOptionsPropertyDefinitionTimestampTypeOptionsArgs' timestamp_type_options: Timestamp property. Not supported by CMEK compliant deployment.
        """
        pulumi.set(__self__, "name", name)
        if date_time_type_options is not None:
            pulumi.set(__self__, "date_time_type_options", date_time_type_options)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if enum_type_options is not None:
            pulumi.set(__self__, "enum_type_options", enum_type_options)
        if float_type_options is not None:
            pulumi.set(__self__, "float_type_options", float_type_options)
        if integer_type_options is not None:
            pulumi.set(__self__, "integer_type_options", integer_type_options)
        if is_filterable is not None:
            pulumi.set(__self__, "is_filterable", is_filterable)
        if is_metadata is not None:
            pulumi.set(__self__, "is_metadata", is_metadata)
        if is_repeatable is not None:
            pulumi.set(__self__, "is_repeatable", is_repeatable)
        if is_required is not None:
            pulumi.set(__self__, "is_required", is_required)
        if is_searchable is not None:
            pulumi.set(__self__, "is_searchable", is_searchable)
        if map_type_options is not None:
            pulumi.set(__self__, "map_type_options", map_type_options)
        if retrieval_importance is not None:
            pulumi.set(__self__, "retrieval_importance", retrieval_importance)
        if schema_sources is not None:
            pulumi.set(__self__, "schema_sources", schema_sources)
        if text_type_options is not None:
            pulumi.set(__self__, "text_type_options", text_type_options)
        if timestamp_type_options is not None:
            pulumi.set(__self__, "timestamp_type_options", timestamp_type_options)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the metadata property.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="dateTimeTypeOptions")
    def date_time_type_options(self) -> Optional['outputs.DocumentSchemaPropertyDefinitionPropertyTypeOptionsPropertyDefinitionDateTimeTypeOptions']:
        """
        Date time property. Not supported by CMEK compliant deployment.
        """
        return pulumi.get(self, "date_time_type_options")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        The display-name for the property, used for front-end.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="enumTypeOptions")
    def enum_type_options(self) -> Optional['outputs.DocumentSchemaPropertyDefinitionPropertyTypeOptionsPropertyDefinitionEnumTypeOptions']:
        """
        Enum/categorical property.
        Structure is documented below.
        """
        return pulumi.get(self, "enum_type_options")

    @property
    @pulumi.getter(name="floatTypeOptions")
    def float_type_options(self) -> Optional['outputs.DocumentSchemaPropertyDefinitionPropertyTypeOptionsPropertyDefinitionFloatTypeOptions']:
        """
        Float property.
        """
        return pulumi.get(self, "float_type_options")

    @property
    @pulumi.getter(name="integerTypeOptions")
    def integer_type_options(self) -> Optional['outputs.DocumentSchemaPropertyDefinitionPropertyTypeOptionsPropertyDefinitionIntegerTypeOptions']:
        """
        Integer property.
        """
        return pulumi.get(self, "integer_type_options")

    @property
    @pulumi.getter(name="isFilterable")
    def is_filterable(self) -> Optional[bool]:
        """
        Whether the property can be filtered. If this is a sub-property, all the parent properties must be marked filterable.
        """
        return pulumi.get(self, "is_filterable")

    @property
    @pulumi.getter(name="isMetadata")
    def is_metadata(self) -> Optional[bool]:
        """
        Whether the property is user supplied metadata.
        """
        return pulumi.get(self, "is_metadata")

    @property
    @pulumi.getter(name="isRepeatable")
    def is_repeatable(self) -> Optional[bool]:
        """
        Whether the property can have multiple values.
        """
        return pulumi.get(self, "is_repeatable")

    @property
    @pulumi.getter(name="isRequired")
    def is_required(self) -> Optional[bool]:
        """
        Whether the property is mandatory.
        """
        return pulumi.get(self, "is_required")

    @property
    @pulumi.getter(name="isSearchable")
    def is_searchable(self) -> Optional[bool]:
        """
        Indicates that the property should be included in a global search.
        """
        return pulumi.get(self, "is_searchable")

    @property
    @pulumi.getter(name="mapTypeOptions")
    def map_type_options(self) -> Optional['outputs.DocumentSchemaPropertyDefinitionPropertyTypeOptionsPropertyDefinitionMapTypeOptions']:
        """
        Map property.
        """
        return pulumi.get(self, "map_type_options")

    @property
    @pulumi.getter(name="retrievalImportance")
    def retrieval_importance(self) -> Optional[str]:
        """
        Stores the retrieval importance.
        Possible values are: `HIGHEST`, `HIGHER`, `HIGH`, `MEDIUM`, `LOW`, `LOWEST`.
        """
        return pulumi.get(self, "retrieval_importance")

    @property
    @pulumi.getter(name="schemaSources")
    def schema_sources(self) -> Optional[Sequence['outputs.DocumentSchemaPropertyDefinitionPropertyTypeOptionsPropertyDefinitionSchemaSource']]:
        """
        The schema source information.
        Structure is documented below.
        """
        return pulumi.get(self, "schema_sources")

    @property
    @pulumi.getter(name="textTypeOptions")
    def text_type_options(self) -> Optional['outputs.DocumentSchemaPropertyDefinitionPropertyTypeOptionsPropertyDefinitionTextTypeOptions']:
        """
        Text property.
        """
        return pulumi.get(self, "text_type_options")

    @property
    @pulumi.getter(name="timestampTypeOptions")
    def timestamp_type_options(self) -> Optional['outputs.DocumentSchemaPropertyDefinitionPropertyTypeOptionsPropertyDefinitionTimestampTypeOptions']:
        """
        Timestamp property. Not supported by CMEK compliant deployment.
        """
        return pulumi.get(self, "timestamp_type_options")


@pulumi.output_type
class DocumentSchemaPropertyDefinitionPropertyTypeOptionsPropertyDefinitionDateTimeTypeOptions(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class DocumentSchemaPropertyDefinitionPropertyTypeOptionsPropertyDefinitionEnumTypeOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "possibleValues":
            suggest = "possible_values"
        elif key == "validationCheckDisabled":
            suggest = "validation_check_disabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DocumentSchemaPropertyDefinitionPropertyTypeOptionsPropertyDefinitionEnumTypeOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DocumentSchemaPropertyDefinitionPropertyTypeOptionsPropertyDefinitionEnumTypeOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DocumentSchemaPropertyDefinitionPropertyTypeOptionsPropertyDefinitionEnumTypeOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 possible_values: Sequence[str],
                 validation_check_disabled: Optional[bool] = None):
        """
        :param Sequence[str] possible_values: List of possible enum values.
        :param bool validation_check_disabled: Make sure the enum property value provided in the document is in the possile value list during document creation. The validation check runs by default.
               
               - - -
        """
        pulumi.set(__self__, "possible_values", possible_values)
        if validation_check_disabled is not None:
            pulumi.set(__self__, "validation_check_disabled", validation_check_disabled)

    @property
    @pulumi.getter(name="possibleValues")
    def possible_values(self) -> Sequence[str]:
        """
        List of possible enum values.
        """
        return pulumi.get(self, "possible_values")

    @property
    @pulumi.getter(name="validationCheckDisabled")
    def validation_check_disabled(self) -> Optional[bool]:
        """
        Make sure the enum property value provided in the document is in the possile value list during document creation. The validation check runs by default.

        - - -
        """
        return pulumi.get(self, "validation_check_disabled")


@pulumi.output_type
class DocumentSchemaPropertyDefinitionPropertyTypeOptionsPropertyDefinitionFloatTypeOptions(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class DocumentSchemaPropertyDefinitionPropertyTypeOptionsPropertyDefinitionIntegerTypeOptions(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class DocumentSchemaPropertyDefinitionPropertyTypeOptionsPropertyDefinitionMapTypeOptions(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class DocumentSchemaPropertyDefinitionPropertyTypeOptionsPropertyDefinitionSchemaSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "processorType":
            suggest = "processor_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DocumentSchemaPropertyDefinitionPropertyTypeOptionsPropertyDefinitionSchemaSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DocumentSchemaPropertyDefinitionPropertyTypeOptionsPropertyDefinitionSchemaSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DocumentSchemaPropertyDefinitionPropertyTypeOptionsPropertyDefinitionSchemaSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: Optional[str] = None,
                 processor_type: Optional[str] = None):
        """
        :param str name: The schema name in the source.
        :param str processor_type: The Doc AI processor type name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if processor_type is not None:
            pulumi.set(__self__, "processor_type", processor_type)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The schema name in the source.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="processorType")
    def processor_type(self) -> Optional[str]:
        """
        The Doc AI processor type name.
        """
        return pulumi.get(self, "processor_type")


@pulumi.output_type
class DocumentSchemaPropertyDefinitionPropertyTypeOptionsPropertyDefinitionTextTypeOptions(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class DocumentSchemaPropertyDefinitionPropertyTypeOptionsPropertyDefinitionTimestampTypeOptions(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class DocumentSchemaPropertyDefinitionSchemaSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "processorType":
            suggest = "processor_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DocumentSchemaPropertyDefinitionSchemaSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DocumentSchemaPropertyDefinitionSchemaSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DocumentSchemaPropertyDefinitionSchemaSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: Optional[str] = None,
                 processor_type: Optional[str] = None):
        """
        :param str name: The schema name in the source.
        :param str processor_type: The Doc AI processor type name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if processor_type is not None:
            pulumi.set(__self__, "processor_type", processor_type)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The schema name in the source.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="processorType")
    def processor_type(self) -> Optional[str]:
        """
        The Doc AI processor type name.
        """
        return pulumi.get(self, "processor_type")


@pulumi.output_type
class DocumentSchemaPropertyDefinitionTextTypeOptions(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class DocumentSchemaPropertyDefinitionTimestampTypeOptions(dict):
    def __init__(__self__):
        pass


