# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetWebRegionForwardingRuleServiceIamPolicyResult',
    'AwaitableGetWebRegionForwardingRuleServiceIamPolicyResult',
    'get_web_region_forwarding_rule_service_iam_policy',
    'get_web_region_forwarding_rule_service_iam_policy_output',
]

@pulumi.output_type
class GetWebRegionForwardingRuleServiceIamPolicyResult:
    """
    A collection of values returned by getWebRegionForwardingRuleServiceIamPolicy.
    """
    def __init__(__self__, etag=None, forwarding_rule_region_service_name=None, id=None, policy_data=None, project=None, region=None):
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        pulumi.set(__self__, "etag", etag)
        if forwarding_rule_region_service_name and not isinstance(forwarding_rule_region_service_name, str):
            raise TypeError("Expected argument 'forwarding_rule_region_service_name' to be a str")
        pulumi.set(__self__, "forwarding_rule_region_service_name", forwarding_rule_region_service_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if policy_data and not isinstance(policy_data, str):
            raise TypeError("Expected argument 'policy_data' to be a str")
        pulumi.set(__self__, "policy_data", policy_data)
        if project and not isinstance(project, str):
            raise TypeError("Expected argument 'project' to be a str")
        pulumi.set(__self__, "project", project)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def etag(self) -> _builtins.str:
        """
        (Computed) The etag of the IAM policy.
        """
        return pulumi.get(self, "etag")

    @_builtins.property
    @pulumi.getter(name="forwardingRuleRegionServiceName")
    def forwarding_rule_region_service_name(self) -> _builtins.str:
        return pulumi.get(self, "forwarding_rule_region_service_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="policyData")
    def policy_data(self) -> _builtins.str:
        """
        (Required only by `iap.WebRegionForwardingRuleServiceIamPolicy`) The policy data generated by
        a `organizations_get_iam_policy` data source.
        """
        return pulumi.get(self, "policy_data")

    @_builtins.property
    @pulumi.getter
    def project(self) -> _builtins.str:
        return pulumi.get(self, "project")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetWebRegionForwardingRuleServiceIamPolicyResult(GetWebRegionForwardingRuleServiceIamPolicyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetWebRegionForwardingRuleServiceIamPolicyResult(
            etag=self.etag,
            forwarding_rule_region_service_name=self.forwarding_rule_region_service_name,
            id=self.id,
            policy_data=self.policy_data,
            project=self.project,
            region=self.region)


def get_web_region_forwarding_rule_service_iam_policy(forwarding_rule_region_service_name: Optional[_builtins.str] = None,
                                                      project: Optional[_builtins.str] = None,
                                                      region: Optional[_builtins.str] = None,
                                                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetWebRegionForwardingRuleServiceIamPolicyResult:
    """
    Retrieves the current IAM policy data for webregionforwardingruleservice

    ## Example Usage

    ```python
    import pulumi
    import pulumi_gcp as gcp

    policy = gcp.iap.get_web_region_forwarding_rule_service_iam_policy(project=default["project"],
        region=default["region"],
        forwarding_rule_region_service_name=default["name"])
    ```


    :param _builtins.str forwarding_rule_region_service_name: Used to find the parent resource to bind the IAM policy to
    :param _builtins.str project: The ID of the project in which the resource belongs.
           If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
    :param _builtins.str region: Used to find the parent resource to bind the IAM policy to. If not specified,
           the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
           region is specified, it is taken from the provider configuration.
    """
    __args__ = dict()
    __args__['forwardingRuleRegionServiceName'] = forwarding_rule_region_service_name
    __args__['project'] = project
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('gcp:iap/getWebRegionForwardingRuleServiceIamPolicy:getWebRegionForwardingRuleServiceIamPolicy', __args__, opts=opts, typ=GetWebRegionForwardingRuleServiceIamPolicyResult).value

    return AwaitableGetWebRegionForwardingRuleServiceIamPolicyResult(
        etag=pulumi.get(__ret__, 'etag'),
        forwarding_rule_region_service_name=pulumi.get(__ret__, 'forwarding_rule_region_service_name'),
        id=pulumi.get(__ret__, 'id'),
        policy_data=pulumi.get(__ret__, 'policy_data'),
        project=pulumi.get(__ret__, 'project'),
        region=pulumi.get(__ret__, 'region'))
def get_web_region_forwarding_rule_service_iam_policy_output(forwarding_rule_region_service_name: Optional[pulumi.Input[_builtins.str]] = None,
                                                             project: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                             region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetWebRegionForwardingRuleServiceIamPolicyResult]:
    """
    Retrieves the current IAM policy data for webregionforwardingruleservice

    ## Example Usage

    ```python
    import pulumi
    import pulumi_gcp as gcp

    policy = gcp.iap.get_web_region_forwarding_rule_service_iam_policy(project=default["project"],
        region=default["region"],
        forwarding_rule_region_service_name=default["name"])
    ```


    :param _builtins.str forwarding_rule_region_service_name: Used to find the parent resource to bind the IAM policy to
    :param _builtins.str project: The ID of the project in which the resource belongs.
           If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
    :param _builtins.str region: Used to find the parent resource to bind the IAM policy to. If not specified,
           the value will be parsed from the identifier of the parent resource. If no region is provided in the parent identifier and no
           region is specified, it is taken from the provider configuration.
    """
    __args__ = dict()
    __args__['forwardingRuleRegionServiceName'] = forwarding_rule_region_service_name
    __args__['project'] = project
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('gcp:iap/getWebRegionForwardingRuleServiceIamPolicy:getWebRegionForwardingRuleServiceIamPolicy', __args__, opts=opts, typ=GetWebRegionForwardingRuleServiceIamPolicyResult)
    return __ret__.apply(lambda __response__: GetWebRegionForwardingRuleServiceIamPolicyResult(
        etag=pulumi.get(__response__, 'etag'),
        forwarding_rule_region_service_name=pulumi.get(__response__, 'forwarding_rule_region_service_name'),
        id=pulumi.get(__response__, 'id'),
        policy_data=pulumi.get(__response__, 'policy_data'),
        project=pulumi.get(__response__, 'project'),
        region=pulumi.get(__response__, 'region')))
