# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['SQuotaAdjusterSettingsArgs', 'SQuotaAdjusterSettings']

@pulumi.input_type
class SQuotaAdjusterSettingsArgs:
    def __init__(__self__, *,
                 enablement: pulumi.Input[str],
                 parent: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a SQuotaAdjusterSettings resource.
        :param pulumi.Input[str] enablement: Required. The configured value of the enablement at the given resource.
               Possible values are: `ENABLED`, `DISABLED`.
        :param pulumi.Input[str] parent: The parent of the quota preference. Allowed parents are "projects/[project-id / number]" or "folders/[folder-id / number]" or "organizations/[org-id / number]".
               
               
               - - -
        """
        pulumi.set(__self__, "enablement", enablement)
        if parent is not None:
            pulumi.set(__self__, "parent", parent)

    @property
    @pulumi.getter
    def enablement(self) -> pulumi.Input[str]:
        """
        Required. The configured value of the enablement at the given resource.
        Possible values are: `ENABLED`, `DISABLED`.
        """
        return pulumi.get(self, "enablement")

    @enablement.setter
    def enablement(self, value: pulumi.Input[str]):
        pulumi.set(self, "enablement", value)

    @property
    @pulumi.getter
    def parent(self) -> Optional[pulumi.Input[str]]:
        """
        The parent of the quota preference. Allowed parents are "projects/[project-id / number]" or "folders/[folder-id / number]" or "organizations/[org-id / number]".


        - - -
        """
        return pulumi.get(self, "parent")

    @parent.setter
    def parent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent", value)


@pulumi.input_type
class _SQuotaAdjusterSettingsState:
    def __init__(__self__, *,
                 effective_container: Optional[pulumi.Input[str]] = None,
                 effective_enablement: Optional[pulumi.Input[str]] = None,
                 enablement: Optional[pulumi.Input[str]] = None,
                 parent: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SQuotaAdjusterSettings resources.
        :param pulumi.Input[str] effective_container: Fields to capture the hierarchy enablement.
               The container (org/folder/project) that determines if the quota adjuster is set for this project/folder/org. We use the nearest-ancestor to determine the effective container.
               The nearest ancestor (including this container) with `enabled` set (either true or false) will be returned.
        :param pulumi.Input[str] effective_enablement: Based on the effective container`s setting above, determines Whether this container has the quota adjuster enabled.
        :param pulumi.Input[str] enablement: Required. The configured value of the enablement at the given resource.
               Possible values are: `ENABLED`, `DISABLED`.
        :param pulumi.Input[str] parent: The parent of the quota preference. Allowed parents are "projects/[project-id / number]" or "folders/[folder-id / number]" or "organizations/[org-id / number]".
               
               
               - - -
        """
        if effective_container is not None:
            pulumi.set(__self__, "effective_container", effective_container)
        if effective_enablement is not None:
            pulumi.set(__self__, "effective_enablement", effective_enablement)
        if enablement is not None:
            pulumi.set(__self__, "enablement", enablement)
        if parent is not None:
            pulumi.set(__self__, "parent", parent)

    @property
    @pulumi.getter(name="effectiveContainer")
    def effective_container(self) -> Optional[pulumi.Input[str]]:
        """
        Fields to capture the hierarchy enablement.
        The container (org/folder/project) that determines if the quota adjuster is set for this project/folder/org. We use the nearest-ancestor to determine the effective container.
        The nearest ancestor (including this container) with `enabled` set (either true or false) will be returned.
        """
        return pulumi.get(self, "effective_container")

    @effective_container.setter
    def effective_container(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effective_container", value)

    @property
    @pulumi.getter(name="effectiveEnablement")
    def effective_enablement(self) -> Optional[pulumi.Input[str]]:
        """
        Based on the effective container`s setting above, determines Whether this container has the quota adjuster enabled.
        """
        return pulumi.get(self, "effective_enablement")

    @effective_enablement.setter
    def effective_enablement(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effective_enablement", value)

    @property
    @pulumi.getter
    def enablement(self) -> Optional[pulumi.Input[str]]:
        """
        Required. The configured value of the enablement at the given resource.
        Possible values are: `ENABLED`, `DISABLED`.
        """
        return pulumi.get(self, "enablement")

    @enablement.setter
    def enablement(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enablement", value)

    @property
    @pulumi.getter
    def parent(self) -> Optional[pulumi.Input[str]]:
        """
        The parent of the quota preference. Allowed parents are "projects/[project-id / number]" or "folders/[folder-id / number]" or "organizations/[org-id / number]".


        - - -
        """
        return pulumi.get(self, "parent")

    @parent.setter
    def parent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent", value)


class SQuotaAdjusterSettings(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enablement: Optional[pulumi.Input[str]] = None,
                 parent: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## Example Usage

        ### Cloudquotas Quota Adjuster Settings Basic

        ```python
        import pulumi
        import pulumi_gcp as gcp

        adjuster_settings = gcp.cloudquota.SQuotaAdjusterSettings("adjuster_settings",
            parent="projects/104740170505",
            enablement="ENABLED")
        ```

        ## Import

        QuotaAdjusterSettings can be imported using any of these accepted formats:

        * `{{parent}}/locations/global/quotaAdjusterSettings`

        When using the `pulumi import` command, QuotaAdjusterSettings can be imported using one of the formats above. For example:

        ```sh
        $ pulumi import gcp:cloudquota/sQuotaAdjusterSettings:SQuotaAdjusterSettings default {{parent}}/locations/global/quotaAdjusterSettings
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] enablement: Required. The configured value of the enablement at the given resource.
               Possible values are: `ENABLED`, `DISABLED`.
        :param pulumi.Input[str] parent: The parent of the quota preference. Allowed parents are "projects/[project-id / number]" or "folders/[folder-id / number]" or "organizations/[org-id / number]".
               
               
               - - -
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SQuotaAdjusterSettingsArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ### Cloudquotas Quota Adjuster Settings Basic

        ```python
        import pulumi
        import pulumi_gcp as gcp

        adjuster_settings = gcp.cloudquota.SQuotaAdjusterSettings("adjuster_settings",
            parent="projects/104740170505",
            enablement="ENABLED")
        ```

        ## Import

        QuotaAdjusterSettings can be imported using any of these accepted formats:

        * `{{parent}}/locations/global/quotaAdjusterSettings`

        When using the `pulumi import` command, QuotaAdjusterSettings can be imported using one of the formats above. For example:

        ```sh
        $ pulumi import gcp:cloudquota/sQuotaAdjusterSettings:SQuotaAdjusterSettings default {{parent}}/locations/global/quotaAdjusterSettings
        ```

        :param str resource_name: The name of the resource.
        :param SQuotaAdjusterSettingsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SQuotaAdjusterSettingsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enablement: Optional[pulumi.Input[str]] = None,
                 parent: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SQuotaAdjusterSettingsArgs.__new__(SQuotaAdjusterSettingsArgs)

            if enablement is None and not opts.urn:
                raise TypeError("Missing required property 'enablement'")
            __props__.__dict__["enablement"] = enablement
            __props__.__dict__["parent"] = parent
            __props__.__dict__["effective_container"] = None
            __props__.__dict__["effective_enablement"] = None
        super(SQuotaAdjusterSettings, __self__).__init__(
            'gcp:cloudquota/sQuotaAdjusterSettings:SQuotaAdjusterSettings',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            effective_container: Optional[pulumi.Input[str]] = None,
            effective_enablement: Optional[pulumi.Input[str]] = None,
            enablement: Optional[pulumi.Input[str]] = None,
            parent: Optional[pulumi.Input[str]] = None) -> 'SQuotaAdjusterSettings':
        """
        Get an existing SQuotaAdjusterSettings resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] effective_container: Fields to capture the hierarchy enablement.
               The container (org/folder/project) that determines if the quota adjuster is set for this project/folder/org. We use the nearest-ancestor to determine the effective container.
               The nearest ancestor (including this container) with `enabled` set (either true or false) will be returned.
        :param pulumi.Input[str] effective_enablement: Based on the effective container`s setting above, determines Whether this container has the quota adjuster enabled.
        :param pulumi.Input[str] enablement: Required. The configured value of the enablement at the given resource.
               Possible values are: `ENABLED`, `DISABLED`.
        :param pulumi.Input[str] parent: The parent of the quota preference. Allowed parents are "projects/[project-id / number]" or "folders/[folder-id / number]" or "organizations/[org-id / number]".
               
               
               - - -
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SQuotaAdjusterSettingsState.__new__(_SQuotaAdjusterSettingsState)

        __props__.__dict__["effective_container"] = effective_container
        __props__.__dict__["effective_enablement"] = effective_enablement
        __props__.__dict__["enablement"] = enablement
        __props__.__dict__["parent"] = parent
        return SQuotaAdjusterSettings(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="effectiveContainer")
    def effective_container(self) -> pulumi.Output[str]:
        """
        Fields to capture the hierarchy enablement.
        The container (org/folder/project) that determines if the quota adjuster is set for this project/folder/org. We use the nearest-ancestor to determine the effective container.
        The nearest ancestor (including this container) with `enabled` set (either true or false) will be returned.
        """
        return pulumi.get(self, "effective_container")

    @property
    @pulumi.getter(name="effectiveEnablement")
    def effective_enablement(self) -> pulumi.Output[str]:
        """
        Based on the effective container`s setting above, determines Whether this container has the quota adjuster enabled.
        """
        return pulumi.get(self, "effective_enablement")

    @property
    @pulumi.getter
    def enablement(self) -> pulumi.Output[str]:
        """
        Required. The configured value of the enablement at the given resource.
        Possible values are: `ENABLED`, `DISABLED`.
        """
        return pulumi.get(self, "enablement")

    @property
    @pulumi.getter
    def parent(self) -> pulumi.Output[str]:
        """
        The parent of the quota preference. Allowed parents are "projects/[project-id / number]" or "folders/[folder-id / number]" or "organizations/[org-id / number]".


        - - -
        """
        return pulumi.get(self, "parent")

