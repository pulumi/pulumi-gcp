# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetSQuotaInfoDimensionsInfoResult',
    'GetSQuotaInfoDimensionsInfoDetailResult',
    'GetSQuotaInfoQuotaIncreaseEligibilityResult',
    'GetSQuotaInfosQuotaInfoResult',
    'GetSQuotaInfosQuotaInfoDimensionsInfoResult',
    'GetSQuotaInfosQuotaInfoDimensionsInfoDetailResult',
    'GetSQuotaInfosQuotaInfoQuotaIncreaseEligibilityResult',
]

@pulumi.output_type
class GetSQuotaInfoDimensionsInfoResult(dict):
    def __init__(__self__, *,
                 applicable_locations: Sequence[str],
                 details: Sequence['outputs.GetSQuotaInfoDimensionsInfoDetailResult'],
                 dimensions: Mapping[str, Any]):
        """
        :param Sequence[str] applicable_locations: The applicable regions or zones of this dimensions info. The field will be set to `['global']` for quotas that are not per region or per zone. Otherwise, it will be set to the list of locations this dimension info is applicable to.
        :param Sequence['GetSQuotaInfoDimensionsInfoDetailArgs'] details: The quota details for a map of dimensions.
        :param Mapping[str, Any] dimensions: The map of dimensions for this dimensions info. The key of a map entry is "region", "zone" or the name of a service specific dimension, and the value of a map entry is the value of the dimension. If a dimension does not appear in the map of dimensions, the dimensions info applies to all the dimension values except for those that have another DimenisonInfo instance configured for the specific value. Example: {"provider" : "Foo Inc"} where "provider" is a service specific dimension of a quota.
        """
        pulumi.set(__self__, "applicable_locations", applicable_locations)
        pulumi.set(__self__, "details", details)
        pulumi.set(__self__, "dimensions", dimensions)

    @property
    @pulumi.getter(name="applicableLocations")
    def applicable_locations(self) -> Sequence[str]:
        """
        The applicable regions or zones of this dimensions info. The field will be set to `['global']` for quotas that are not per region or per zone. Otherwise, it will be set to the list of locations this dimension info is applicable to.
        """
        return pulumi.get(self, "applicable_locations")

    @property
    @pulumi.getter
    def details(self) -> Sequence['outputs.GetSQuotaInfoDimensionsInfoDetailResult']:
        """
        The quota details for a map of dimensions.
        """
        return pulumi.get(self, "details")

    @property
    @pulumi.getter
    def dimensions(self) -> Mapping[str, Any]:
        """
        The map of dimensions for this dimensions info. The key of a map entry is "region", "zone" or the name of a service specific dimension, and the value of a map entry is the value of the dimension. If a dimension does not appear in the map of dimensions, the dimensions info applies to all the dimension values except for those that have another DimenisonInfo instance configured for the specific value. Example: {"provider" : "Foo Inc"} where "provider" is a service specific dimension of a quota.
        """
        return pulumi.get(self, "dimensions")


@pulumi.output_type
class GetSQuotaInfoDimensionsInfoDetailResult(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: The value currently in effect and being enforced.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value currently in effect and being enforced.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSQuotaInfoQuotaIncreaseEligibilityResult(dict):
    def __init__(__self__, *,
                 ineligibility_reason: str,
                 is_eligible: bool):
        """
        :param str ineligibility_reason: The enumeration of reasons when it is ineligible to request increase adjustment.
        :param bool is_eligible: Whether a higher quota value can be requested for the quota.
        """
        pulumi.set(__self__, "ineligibility_reason", ineligibility_reason)
        pulumi.set(__self__, "is_eligible", is_eligible)

    @property
    @pulumi.getter(name="ineligibilityReason")
    def ineligibility_reason(self) -> str:
        """
        The enumeration of reasons when it is ineligible to request increase adjustment.
        """
        return pulumi.get(self, "ineligibility_reason")

    @property
    @pulumi.getter(name="isEligible")
    def is_eligible(self) -> bool:
        """
        Whether a higher quota value can be requested for the quota.
        """
        return pulumi.get(self, "is_eligible")


@pulumi.output_type
class GetSQuotaInfosQuotaInfoResult(dict):
    def __init__(__self__, *,
                 container_type: str,
                 dimensions: Sequence[str],
                 dimensions_infos: Sequence['outputs.GetSQuotaInfosQuotaInfoDimensionsInfoResult'],
                 is_concurrent: bool,
                 is_fixed: bool,
                 is_precise: bool,
                 metric: str,
                 metric_display_name: str,
                 metric_unit: str,
                 name: str,
                 quota_display_name: str,
                 quota_id: str,
                 quota_increase_eligibilities: Sequence['outputs.GetSQuotaInfosQuotaInfoQuotaIncreaseEligibilityResult'],
                 refresh_interval: str,
                 service: str,
                 service_request_quota_uri: str):
        """
        :param str container_type: (Output) The container type of the QuotaInfo.
        :param Sequence[str] dimensions: The map of dimensions for this dimensions info. The key of a map entry is "region", "zone" or the name of a service specific dimension, and the value of a map entry is the value of the dimension. If a dimension does not appear in the map of dimensions, the dimensions info applies to all the dimension values except for those that have another DimenisonInfo instance configured for the specific value. Example: {"provider" : "Foo Inc"} where "provider" is a service specific dimension of a quota.
        :param Sequence['GetSQuotaInfosQuotaInfoDimensionsInfoArgs'] dimensions_infos: (Output) The collection of dimensions info ordered by their dimensions from more specific ones to less specific ones.
        :param bool is_concurrent: (Output) Whether the quota is a concurrent quota. Concurrent quotas are enforced on the total number of concurrent operations in flight at any given time.
        :param bool is_fixed: (Output) Whether the quota value is fixed or adjustable.
        :param bool is_precise: (Output) Whether this is a precise quota. A precise quota is tracked with absolute precision. In contrast, an imprecise quota is not tracked with precision.
        :param str metric: (Output) The metric of the quota. It specifies the resources consumption the quota is defined for, for example: `compute.googleapis.com/cpus`.
        :param str metric_display_name: (Output) The display name of the quota metric.
        :param str metric_unit: (Output) The unit in which the metric value is reported, e.g., `MByte`.
        :param str name: (Output) Resource name of this QuotaInfo, for example: `projects/123/locations/global/services/compute.googleapis.com/quotaInfos/CpusPerProjectPerRegion`.
        :param str quota_display_name: (Output) The display name of the quota.
        :param Sequence['GetSQuotaInfosQuotaInfoQuotaIncreaseEligibilityArgs'] quota_increase_eligibilities: (Output) Whether it is eligible to request a higher quota value for this quota.
        :param str refresh_interval: (Output) The reset time interval for the quota. Refresh interval applies to rate quota only. Example: "minute" for per minute, "day" for per day, or "10 seconds" for every 10 seconds.
        :param str service: The name of the service in which the quotas are defined.
        :param str service_request_quota_uri: (Output) URI to the page where users can request more quota for the cloud service, for example: `https://console.cloud.google.com/iam-admin/quotas`.
        """
        pulumi.set(__self__, "container_type", container_type)
        pulumi.set(__self__, "dimensions", dimensions)
        pulumi.set(__self__, "dimensions_infos", dimensions_infos)
        pulumi.set(__self__, "is_concurrent", is_concurrent)
        pulumi.set(__self__, "is_fixed", is_fixed)
        pulumi.set(__self__, "is_precise", is_precise)
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "metric_display_name", metric_display_name)
        pulumi.set(__self__, "metric_unit", metric_unit)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "quota_display_name", quota_display_name)
        pulumi.set(__self__, "quota_id", quota_id)
        pulumi.set(__self__, "quota_increase_eligibilities", quota_increase_eligibilities)
        pulumi.set(__self__, "refresh_interval", refresh_interval)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "service_request_quota_uri", service_request_quota_uri)

    @property
    @pulumi.getter(name="containerType")
    def container_type(self) -> str:
        """
        (Output) The container type of the QuotaInfo.
        """
        return pulumi.get(self, "container_type")

    @property
    @pulumi.getter
    def dimensions(self) -> Sequence[str]:
        """
        The map of dimensions for this dimensions info. The key of a map entry is "region", "zone" or the name of a service specific dimension, and the value of a map entry is the value of the dimension. If a dimension does not appear in the map of dimensions, the dimensions info applies to all the dimension values except for those that have another DimenisonInfo instance configured for the specific value. Example: {"provider" : "Foo Inc"} where "provider" is a service specific dimension of a quota.
        """
        return pulumi.get(self, "dimensions")

    @property
    @pulumi.getter(name="dimensionsInfos")
    def dimensions_infos(self) -> Sequence['outputs.GetSQuotaInfosQuotaInfoDimensionsInfoResult']:
        """
        (Output) The collection of dimensions info ordered by their dimensions from more specific ones to less specific ones.
        """
        return pulumi.get(self, "dimensions_infos")

    @property
    @pulumi.getter(name="isConcurrent")
    def is_concurrent(self) -> bool:
        """
        (Output) Whether the quota is a concurrent quota. Concurrent quotas are enforced on the total number of concurrent operations in flight at any given time.
        """
        return pulumi.get(self, "is_concurrent")

    @property
    @pulumi.getter(name="isFixed")
    def is_fixed(self) -> bool:
        """
        (Output) Whether the quota value is fixed or adjustable.
        """
        return pulumi.get(self, "is_fixed")

    @property
    @pulumi.getter(name="isPrecise")
    def is_precise(self) -> bool:
        """
        (Output) Whether this is a precise quota. A precise quota is tracked with absolute precision. In contrast, an imprecise quota is not tracked with precision.
        """
        return pulumi.get(self, "is_precise")

    @property
    @pulumi.getter
    def metric(self) -> str:
        """
        (Output) The metric of the quota. It specifies the resources consumption the quota is defined for, for example: `compute.googleapis.com/cpus`.
        """
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter(name="metricDisplayName")
    def metric_display_name(self) -> str:
        """
        (Output) The display name of the quota metric.
        """
        return pulumi.get(self, "metric_display_name")

    @property
    @pulumi.getter(name="metricUnit")
    def metric_unit(self) -> str:
        """
        (Output) The unit in which the metric value is reported, e.g., `MByte`.
        """
        return pulumi.get(self, "metric_unit")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Output) Resource name of this QuotaInfo, for example: `projects/123/locations/global/services/compute.googleapis.com/quotaInfos/CpusPerProjectPerRegion`.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="quotaDisplayName")
    def quota_display_name(self) -> str:
        """
        (Output) The display name of the quota.
        """
        return pulumi.get(self, "quota_display_name")

    @property
    @pulumi.getter(name="quotaId")
    def quota_id(self) -> str:
        return pulumi.get(self, "quota_id")

    @property
    @pulumi.getter(name="quotaIncreaseEligibilities")
    def quota_increase_eligibilities(self) -> Sequence['outputs.GetSQuotaInfosQuotaInfoQuotaIncreaseEligibilityResult']:
        """
        (Output) Whether it is eligible to request a higher quota value for this quota.
        """
        return pulumi.get(self, "quota_increase_eligibilities")

    @property
    @pulumi.getter(name="refreshInterval")
    def refresh_interval(self) -> str:
        """
        (Output) The reset time interval for the quota. Refresh interval applies to rate quota only. Example: "minute" for per minute, "day" for per day, or "10 seconds" for every 10 seconds.
        """
        return pulumi.get(self, "refresh_interval")

    @property
    @pulumi.getter
    def service(self) -> str:
        """
        The name of the service in which the quotas are defined.
        """
        return pulumi.get(self, "service")

    @property
    @pulumi.getter(name="serviceRequestQuotaUri")
    def service_request_quota_uri(self) -> str:
        """
        (Output) URI to the page where users can request more quota for the cloud service, for example: `https://console.cloud.google.com/iam-admin/quotas`.
        """
        return pulumi.get(self, "service_request_quota_uri")


@pulumi.output_type
class GetSQuotaInfosQuotaInfoDimensionsInfoResult(dict):
    def __init__(__self__, *,
                 applicable_locations: Sequence[str],
                 details: Sequence['outputs.GetSQuotaInfosQuotaInfoDimensionsInfoDetailResult'],
                 dimensions: Mapping[str, Any]):
        """
        :param Sequence[str] applicable_locations: The applicable regions or zones of this dimensions info. The field will be set to `['global']` for quotas that are not per region or per zone. Otherwise, it will be set to the list of locations this dimension info is applicable to.
        :param Sequence['GetSQuotaInfosQuotaInfoDimensionsInfoDetailArgs'] details: The quota details for a map of dimensions.
        :param Mapping[str, Any] dimensions: The map of dimensions for this dimensions info. The key of a map entry is "region", "zone" or the name of a service specific dimension, and the value of a map entry is the value of the dimension. If a dimension does not appear in the map of dimensions, the dimensions info applies to all the dimension values except for those that have another DimenisonInfo instance configured for the specific value. Example: {"provider" : "Foo Inc"} where "provider" is a service specific dimension of a quota.
        """
        pulumi.set(__self__, "applicable_locations", applicable_locations)
        pulumi.set(__self__, "details", details)
        pulumi.set(__self__, "dimensions", dimensions)

    @property
    @pulumi.getter(name="applicableLocations")
    def applicable_locations(self) -> Sequence[str]:
        """
        The applicable regions or zones of this dimensions info. The field will be set to `['global']` for quotas that are not per region or per zone. Otherwise, it will be set to the list of locations this dimension info is applicable to.
        """
        return pulumi.get(self, "applicable_locations")

    @property
    @pulumi.getter
    def details(self) -> Sequence['outputs.GetSQuotaInfosQuotaInfoDimensionsInfoDetailResult']:
        """
        The quota details for a map of dimensions.
        """
        return pulumi.get(self, "details")

    @property
    @pulumi.getter
    def dimensions(self) -> Mapping[str, Any]:
        """
        The map of dimensions for this dimensions info. The key of a map entry is "region", "zone" or the name of a service specific dimension, and the value of a map entry is the value of the dimension. If a dimension does not appear in the map of dimensions, the dimensions info applies to all the dimension values except for those that have another DimenisonInfo instance configured for the specific value. Example: {"provider" : "Foo Inc"} where "provider" is a service specific dimension of a quota.
        """
        return pulumi.get(self, "dimensions")


@pulumi.output_type
class GetSQuotaInfosQuotaInfoDimensionsInfoDetailResult(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: The value currently in effect and being enforced.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value currently in effect and being enforced.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSQuotaInfosQuotaInfoQuotaIncreaseEligibilityResult(dict):
    def __init__(__self__, *,
                 ineligibility_reason: str,
                 is_eligible: bool):
        """
        :param str ineligibility_reason: The enumeration of reasons when it is ineligible to request increase adjustment.
        :param bool is_eligible: Whether a higher quota value can be requested for the quota.
        """
        pulumi.set(__self__, "ineligibility_reason", ineligibility_reason)
        pulumi.set(__self__, "is_eligible", is_eligible)

    @property
    @pulumi.getter(name="ineligibilityReason")
    def ineligibility_reason(self) -> str:
        """
        The enumeration of reasons when it is ineligible to request increase adjustment.
        """
        return pulumi.get(self, "ineligibility_reason")

    @property
    @pulumi.getter(name="isEligible")
    def is_eligible(self) -> bool:
        """
        Whether a higher quota value can be requested for the quota.
        """
        return pulumi.get(self, "is_eligible")


