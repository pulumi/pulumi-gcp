# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetSQuotaInfoDimensionsInfoResult',
    'GetSQuotaInfoDimensionsInfoDetailResult',
    'GetSQuotaInfoQuotaIncreaseEligibilityResult',
]

@pulumi.output_type
class GetSQuotaInfoDimensionsInfoResult(dict):
    def __init__(__self__, *,
                 applicable_locations: Sequence[str],
                 details: Sequence['outputs.GetSQuotaInfoDimensionsInfoDetailResult'],
                 dimensions: Mapping[str, Any]):
        """
        :param Sequence[str] applicable_locations: The applicable regions or zones of this dimensions info. The field will be set to `['global']` for quotas that are not per region or per zone. Otherwise, it will be set to the list of locations this dimension info is applicable to.
        :param Sequence['GetSQuotaInfoDimensionsInfoDetailArgs'] details: The quota details for a map of dimensions.
        :param Mapping[str, Any] dimensions: The map of dimensions for this dimensions info. The key of a map entry is "region", "zone" or the name of a service specific dimension, and the value of a map entry is the value of the dimension. If a dimension does not appear in the map of dimensions, the dimensions info applies to all the dimension values except for those that have another DimenisonInfo instance configured for the specific value. Example: {"provider" : "Foo Inc"} where "provider" is a service specific dimension of a quota.
        """
        pulumi.set(__self__, "applicable_locations", applicable_locations)
        pulumi.set(__self__, "details", details)
        pulumi.set(__self__, "dimensions", dimensions)

    @property
    @pulumi.getter(name="applicableLocations")
    def applicable_locations(self) -> Sequence[str]:
        """
        The applicable regions or zones of this dimensions info. The field will be set to `['global']` for quotas that are not per region or per zone. Otherwise, it will be set to the list of locations this dimension info is applicable to.
        """
        return pulumi.get(self, "applicable_locations")

    @property
    @pulumi.getter
    def details(self) -> Sequence['outputs.GetSQuotaInfoDimensionsInfoDetailResult']:
        """
        The quota details for a map of dimensions.
        """
        return pulumi.get(self, "details")

    @property
    @pulumi.getter
    def dimensions(self) -> Mapping[str, Any]:
        """
        The map of dimensions for this dimensions info. The key of a map entry is "region", "zone" or the name of a service specific dimension, and the value of a map entry is the value of the dimension. If a dimension does not appear in the map of dimensions, the dimensions info applies to all the dimension values except for those that have another DimenisonInfo instance configured for the specific value. Example: {"provider" : "Foo Inc"} where "provider" is a service specific dimension of a quota.
        """
        return pulumi.get(self, "dimensions")


@pulumi.output_type
class GetSQuotaInfoDimensionsInfoDetailResult(dict):
    def __init__(__self__, *,
                 value: str):
        """
        :param str value: The value currently in effect and being enforced.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value currently in effect and being enforced.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSQuotaInfoQuotaIncreaseEligibilityResult(dict):
    def __init__(__self__, *,
                 ineligibility_reason: str,
                 is_eligible: bool):
        """
        :param str ineligibility_reason: The enumeration of reasons when it is ineligible to request increase adjustment.
        :param bool is_eligible: Whether a higher quota value can be requested for the quota.
        """
        pulumi.set(__self__, "ineligibility_reason", ineligibility_reason)
        pulumi.set(__self__, "is_eligible", is_eligible)

    @property
    @pulumi.getter(name="ineligibilityReason")
    def ineligibility_reason(self) -> str:
        """
        The enumeration of reasons when it is ineligible to request increase adjustment.
        """
        return pulumi.get(self, "ineligibility_reason")

    @property
    @pulumi.getter(name="isEligible")
    def is_eligible(self) -> bool:
        """
        Whether a higher quota value can be requested for the quota.
        """
        return pulumi.get(self, "is_eligible")


