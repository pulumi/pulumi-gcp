# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'InstanceHostConfigArgs',
    'InstanceHostConfigArgsDict',
    'InstanceIamBindingConditionArgs',
    'InstanceIamBindingConditionArgsDict',
    'InstanceIamMemberConditionArgs',
    'InstanceIamMemberConditionArgsDict',
    'InstancePrivateConfigArgs',
    'InstancePrivateConfigArgsDict',
    'InstanceWorkforceIdentityFederationConfigArgs',
    'InstanceWorkforceIdentityFederationConfigArgsDict',
    'RepositoryIamBindingConditionArgs',
    'RepositoryIamBindingConditionArgsDict',
    'RepositoryIamMemberConditionArgs',
    'RepositoryIamMemberConditionArgsDict',
    'RepositoryInitialConfigArgs',
    'RepositoryInitialConfigArgsDict',
    'RepositoryUriArgs',
    'RepositoryUriArgsDict',
]

MYPY = False

if not MYPY:
    class InstanceHostConfigArgsDict(TypedDict):
        api: NotRequired[pulumi.Input[str]]
        """
        (Output)
        API hostname.
        """
        git_http: NotRequired[pulumi.Input[str]]
        """
        (Output)
        Git HTTP hostname.
        """
        git_ssh: NotRequired[pulumi.Input[str]]
        """
        (Output)
        Git SSH hostname.
        """
        html: NotRequired[pulumi.Input[str]]
        """
        (Output)
        HTML hostname.
        """
elif False:
    InstanceHostConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InstanceHostConfigArgs:
    def __init__(__self__, *,
                 api: Optional[pulumi.Input[str]] = None,
                 git_http: Optional[pulumi.Input[str]] = None,
                 git_ssh: Optional[pulumi.Input[str]] = None,
                 html: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] api: (Output)
               API hostname.
        :param pulumi.Input[str] git_http: (Output)
               Git HTTP hostname.
        :param pulumi.Input[str] git_ssh: (Output)
               Git SSH hostname.
        :param pulumi.Input[str] html: (Output)
               HTML hostname.
        """
        if api is not None:
            pulumi.set(__self__, "api", api)
        if git_http is not None:
            pulumi.set(__self__, "git_http", git_http)
        if git_ssh is not None:
            pulumi.set(__self__, "git_ssh", git_ssh)
        if html is not None:
            pulumi.set(__self__, "html", html)

    @property
    @pulumi.getter
    def api(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        API hostname.
        """
        return pulumi.get(self, "api")

    @api.setter
    def api(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api", value)

    @property
    @pulumi.getter(name="gitHttp")
    def git_http(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        Git HTTP hostname.
        """
        return pulumi.get(self, "git_http")

    @git_http.setter
    def git_http(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "git_http", value)

    @property
    @pulumi.getter(name="gitSsh")
    def git_ssh(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        Git SSH hostname.
        """
        return pulumi.get(self, "git_ssh")

    @git_ssh.setter
    def git_ssh(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "git_ssh", value)

    @property
    @pulumi.getter
    def html(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        HTML hostname.
        """
        return pulumi.get(self, "html")

    @html.setter
    def html(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "html", value)


if not MYPY:
    class InstanceIamBindingConditionArgsDict(TypedDict):
        expression: pulumi.Input[str]
        title: pulumi.Input[str]
        description: NotRequired[pulumi.Input[str]]
elif False:
    InstanceIamBindingConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InstanceIamBindingConditionArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 title: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "title", title)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)


if not MYPY:
    class InstanceIamMemberConditionArgsDict(TypedDict):
        expression: pulumi.Input[str]
        title: pulumi.Input[str]
        description: NotRequired[pulumi.Input[str]]
elif False:
    InstanceIamMemberConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InstanceIamMemberConditionArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 title: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "title", title)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)


if not MYPY:
    class InstancePrivateConfigArgsDict(TypedDict):
        ca_pool: pulumi.Input[str]
        """
        CA pool resource, resource must in the format of `projects/{project}/locations/{location}/caPools/{ca_pool}`.
        """
        is_private: pulumi.Input[bool]
        """
        'Indicate if it's private instance.'
        """
        http_service_attachment: NotRequired[pulumi.Input[str]]
        """
        (Output)
        Service Attachment for HTTP, resource is in the format of `projects/{project}/regions/{region}/serviceAttachments/{service_attachment}`.
        """
        ssh_service_attachment: NotRequired[pulumi.Input[str]]
        """
        (Output)
        Service Attachment for SSH, resource is in the format of `projects/{project}/regions/{region}/serviceAttachments/{service_attachment}`.
        """
elif False:
    InstancePrivateConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InstancePrivateConfigArgs:
    def __init__(__self__, *,
                 ca_pool: pulumi.Input[str],
                 is_private: pulumi.Input[bool],
                 http_service_attachment: Optional[pulumi.Input[str]] = None,
                 ssh_service_attachment: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] ca_pool: CA pool resource, resource must in the format of `projects/{project}/locations/{location}/caPools/{ca_pool}`.
        :param pulumi.Input[bool] is_private: 'Indicate if it's private instance.'
        :param pulumi.Input[str] http_service_attachment: (Output)
               Service Attachment for HTTP, resource is in the format of `projects/{project}/regions/{region}/serviceAttachments/{service_attachment}`.
        :param pulumi.Input[str] ssh_service_attachment: (Output)
               Service Attachment for SSH, resource is in the format of `projects/{project}/regions/{region}/serviceAttachments/{service_attachment}`.
        """
        pulumi.set(__self__, "ca_pool", ca_pool)
        pulumi.set(__self__, "is_private", is_private)
        if http_service_attachment is not None:
            pulumi.set(__self__, "http_service_attachment", http_service_attachment)
        if ssh_service_attachment is not None:
            pulumi.set(__self__, "ssh_service_attachment", ssh_service_attachment)

    @property
    @pulumi.getter(name="caPool")
    def ca_pool(self) -> pulumi.Input[str]:
        """
        CA pool resource, resource must in the format of `projects/{project}/locations/{location}/caPools/{ca_pool}`.
        """
        return pulumi.get(self, "ca_pool")

    @ca_pool.setter
    def ca_pool(self, value: pulumi.Input[str]):
        pulumi.set(self, "ca_pool", value)

    @property
    @pulumi.getter(name="isPrivate")
    def is_private(self) -> pulumi.Input[bool]:
        """
        'Indicate if it's private instance.'
        """
        return pulumi.get(self, "is_private")

    @is_private.setter
    def is_private(self, value: pulumi.Input[bool]):
        pulumi.set(self, "is_private", value)

    @property
    @pulumi.getter(name="httpServiceAttachment")
    def http_service_attachment(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        Service Attachment for HTTP, resource is in the format of `projects/{project}/regions/{region}/serviceAttachments/{service_attachment}`.
        """
        return pulumi.get(self, "http_service_attachment")

    @http_service_attachment.setter
    def http_service_attachment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_service_attachment", value)

    @property
    @pulumi.getter(name="sshServiceAttachment")
    def ssh_service_attachment(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        Service Attachment for SSH, resource is in the format of `projects/{project}/regions/{region}/serviceAttachments/{service_attachment}`.
        """
        return pulumi.get(self, "ssh_service_attachment")

    @ssh_service_attachment.setter
    def ssh_service_attachment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_service_attachment", value)


if not MYPY:
    class InstanceWorkforceIdentityFederationConfigArgsDict(TypedDict):
        enabled: pulumi.Input[bool]
        """
        'Whether Workforce Identity Federation is enabled.'
        """
elif False:
    InstanceWorkforceIdentityFederationConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InstanceWorkforceIdentityFederationConfigArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool]):
        """
        :param pulumi.Input[bool] enabled: 'Whether Workforce Identity Federation is enabled.'
        """
        pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        'Whether Workforce Identity Federation is enabled.'
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)


if not MYPY:
    class RepositoryIamBindingConditionArgsDict(TypedDict):
        expression: pulumi.Input[str]
        title: pulumi.Input[str]
        description: NotRequired[pulumi.Input[str]]
elif False:
    RepositoryIamBindingConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RepositoryIamBindingConditionArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 title: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "title", title)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)


if not MYPY:
    class RepositoryIamMemberConditionArgsDict(TypedDict):
        expression: pulumi.Input[str]
        title: pulumi.Input[str]
        description: NotRequired[pulumi.Input[str]]
elif False:
    RepositoryIamMemberConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RepositoryIamMemberConditionArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 title: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "title", title)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)


if not MYPY:
    class RepositoryInitialConfigArgsDict(TypedDict):
        default_branch: NotRequired[pulumi.Input[str]]
        """
        Default branch name of the repository.
        """
        gitignores: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        List of gitignore template names user can choose from.
        Valid values can be viewed at https://cloud.google.com/secure-source-manager/docs/reference/rest/v1/projects.locations.repositories#initialconfig.
        """
        license: NotRequired[pulumi.Input[str]]
        """
        License template name user can choose from.
        Valid values can be viewed at https://cloud.google.com/secure-source-manager/docs/reference/rest/v1/projects.locations.repositories#initialconfig.
        """
        readme: NotRequired[pulumi.Input[str]]
        """
        README template name.
        Valid values can be viewed at https://cloud.google.com/secure-source-manager/docs/reference/rest/v1/projects.locations.repositories#initialconfig.
        """
elif False:
    RepositoryInitialConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RepositoryInitialConfigArgs:
    def __init__(__self__, *,
                 default_branch: Optional[pulumi.Input[str]] = None,
                 gitignores: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 license: Optional[pulumi.Input[str]] = None,
                 readme: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] default_branch: Default branch name of the repository.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] gitignores: List of gitignore template names user can choose from.
               Valid values can be viewed at https://cloud.google.com/secure-source-manager/docs/reference/rest/v1/projects.locations.repositories#initialconfig.
        :param pulumi.Input[str] license: License template name user can choose from.
               Valid values can be viewed at https://cloud.google.com/secure-source-manager/docs/reference/rest/v1/projects.locations.repositories#initialconfig.
        :param pulumi.Input[str] readme: README template name.
               Valid values can be viewed at https://cloud.google.com/secure-source-manager/docs/reference/rest/v1/projects.locations.repositories#initialconfig.
        """
        if default_branch is not None:
            pulumi.set(__self__, "default_branch", default_branch)
        if gitignores is not None:
            pulumi.set(__self__, "gitignores", gitignores)
        if license is not None:
            pulumi.set(__self__, "license", license)
        if readme is not None:
            pulumi.set(__self__, "readme", readme)

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> Optional[pulumi.Input[str]]:
        """
        Default branch name of the repository.
        """
        return pulumi.get(self, "default_branch")

    @default_branch.setter
    def default_branch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_branch", value)

    @property
    @pulumi.getter
    def gitignores(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of gitignore template names user can choose from.
        Valid values can be viewed at https://cloud.google.com/secure-source-manager/docs/reference/rest/v1/projects.locations.repositories#initialconfig.
        """
        return pulumi.get(self, "gitignores")

    @gitignores.setter
    def gitignores(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "gitignores", value)

    @property
    @pulumi.getter
    def license(self) -> Optional[pulumi.Input[str]]:
        """
        License template name user can choose from.
        Valid values can be viewed at https://cloud.google.com/secure-source-manager/docs/reference/rest/v1/projects.locations.repositories#initialconfig.
        """
        return pulumi.get(self, "license")

    @license.setter
    def license(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "license", value)

    @property
    @pulumi.getter
    def readme(self) -> Optional[pulumi.Input[str]]:
        """
        README template name.
        Valid values can be viewed at https://cloud.google.com/secure-source-manager/docs/reference/rest/v1/projects.locations.repositories#initialconfig.
        """
        return pulumi.get(self, "readme")

    @readme.setter
    def readme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "readme", value)


if not MYPY:
    class RepositoryUriArgsDict(TypedDict):
        api: NotRequired[pulumi.Input[str]]
        """
        (Output)
        API is the URI for API access.
        """
        git_https: NotRequired[pulumi.Input[str]]
        """
        (Output)
        git_https is the git HTTPS URI for git operations.
        """
        html: NotRequired[pulumi.Input[str]]
        """
        (Output)
        HTML is the URI for the user to view the repository in a browser.
        """
elif False:
    RepositoryUriArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RepositoryUriArgs:
    def __init__(__self__, *,
                 api: Optional[pulumi.Input[str]] = None,
                 git_https: Optional[pulumi.Input[str]] = None,
                 html: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] api: (Output)
               API is the URI for API access.
        :param pulumi.Input[str] git_https: (Output)
               git_https is the git HTTPS URI for git operations.
        :param pulumi.Input[str] html: (Output)
               HTML is the URI for the user to view the repository in a browser.
        """
        if api is not None:
            pulumi.set(__self__, "api", api)
        if git_https is not None:
            pulumi.set(__self__, "git_https", git_https)
        if html is not None:
            pulumi.set(__self__, "html", html)

    @property
    @pulumi.getter
    def api(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        API is the URI for API access.
        """
        return pulumi.get(self, "api")

    @api.setter
    def api(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api", value)

    @property
    @pulumi.getter(name="gitHttps")
    def git_https(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        git_https is the git HTTPS URI for git operations.
        """
        return pulumi.get(self, "git_https")

    @git_https.setter
    def git_https(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "git_https", value)

    @property
    @pulumi.getter
    def html(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        HTML is the URI for the user to view the repository in a browser.
        """
        return pulumi.get(self, "html")

    @html.setter
    def html(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "html", value)


