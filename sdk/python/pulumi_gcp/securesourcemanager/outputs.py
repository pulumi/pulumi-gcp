# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'InstanceHostConfig',
    'InstanceIamBindingCondition',
    'InstanceIamMemberCondition',
    'InstancePrivateConfig',
    'InstanceWorkforceIdentityFederationConfig',
    'RepositoryIamBindingCondition',
    'RepositoryIamMemberCondition',
    'RepositoryInitialConfig',
    'RepositoryUri',
]

@pulumi.output_type
class InstanceHostConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "gitHttp":
            suggest = "git_http"
        elif key == "gitSsh":
            suggest = "git_ssh"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceHostConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceHostConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceHostConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api: Optional[_builtins.str] = None,
                 git_http: Optional[_builtins.str] = None,
                 git_ssh: Optional[_builtins.str] = None,
                 html: Optional[_builtins.str] = None):
        """
        :param _builtins.str api: (Output)
               API hostname.
        :param _builtins.str git_http: (Output)
               Git HTTP hostname.
        :param _builtins.str git_ssh: (Output)
               Git SSH hostname.
        :param _builtins.str html: (Output)
               HTML hostname.
        """
        if api is not None:
            pulumi.set(__self__, "api", api)
        if git_http is not None:
            pulumi.set(__self__, "git_http", git_http)
        if git_ssh is not None:
            pulumi.set(__self__, "git_ssh", git_ssh)
        if html is not None:
            pulumi.set(__self__, "html", html)

    @_builtins.property
    @pulumi.getter
    def api(self) -> Optional[_builtins.str]:
        """
        (Output)
        API hostname.
        """
        return pulumi.get(self, "api")

    @_builtins.property
    @pulumi.getter(name="gitHttp")
    def git_http(self) -> Optional[_builtins.str]:
        """
        (Output)
        Git HTTP hostname.
        """
        return pulumi.get(self, "git_http")

    @_builtins.property
    @pulumi.getter(name="gitSsh")
    def git_ssh(self) -> Optional[_builtins.str]:
        """
        (Output)
        Git SSH hostname.
        """
        return pulumi.get(self, "git_ssh")

    @_builtins.property
    @pulumi.getter
    def html(self) -> Optional[_builtins.str]:
        """
        (Output)
        HTML hostname.
        """
        return pulumi.get(self, "html")


@pulumi.output_type
class InstanceIamBindingCondition(dict):
    def __init__(__self__, *,
                 expression: _builtins.str,
                 title: _builtins.str,
                 description: Optional[_builtins.str] = None):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "title", title)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @_builtins.property
    @pulumi.getter
    def expression(self) -> _builtins.str:
        return pulumi.get(self, "expression")

    @_builtins.property
    @pulumi.getter
    def title(self) -> _builtins.str:
        return pulumi.get(self, "title")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "description")


@pulumi.output_type
class InstanceIamMemberCondition(dict):
    def __init__(__self__, *,
                 expression: _builtins.str,
                 title: _builtins.str,
                 description: Optional[_builtins.str] = None):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "title", title)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @_builtins.property
    @pulumi.getter
    def expression(self) -> _builtins.str:
        return pulumi.get(self, "expression")

    @_builtins.property
    @pulumi.getter
    def title(self) -> _builtins.str:
        return pulumi.get(self, "title")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "description")


@pulumi.output_type
class InstancePrivateConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "caPool":
            suggest = "ca_pool"
        elif key == "isPrivate":
            suggest = "is_private"
        elif key == "httpServiceAttachment":
            suggest = "http_service_attachment"
        elif key == "sshServiceAttachment":
            suggest = "ssh_service_attachment"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstancePrivateConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstancePrivateConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstancePrivateConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ca_pool: _builtins.str,
                 is_private: _builtins.bool,
                 http_service_attachment: Optional[_builtins.str] = None,
                 ssh_service_attachment: Optional[_builtins.str] = None):
        """
        :param _builtins.str ca_pool: CA pool resource, resource must in the format of `projects/{project}/locations/{location}/caPools/{ca_pool}`.
        :param _builtins.bool is_private: 'Indicate if it's private instance.'
        :param _builtins.str http_service_attachment: (Output)
               Service Attachment for HTTP, resource is in the format of `projects/{project}/regions/{region}/serviceAttachments/{service_attachment}`.
        :param _builtins.str ssh_service_attachment: (Output)
               Service Attachment for SSH, resource is in the format of `projects/{project}/regions/{region}/serviceAttachments/{service_attachment}`.
        """
        pulumi.set(__self__, "ca_pool", ca_pool)
        pulumi.set(__self__, "is_private", is_private)
        if http_service_attachment is not None:
            pulumi.set(__self__, "http_service_attachment", http_service_attachment)
        if ssh_service_attachment is not None:
            pulumi.set(__self__, "ssh_service_attachment", ssh_service_attachment)

    @_builtins.property
    @pulumi.getter(name="caPool")
    def ca_pool(self) -> _builtins.str:
        """
        CA pool resource, resource must in the format of `projects/{project}/locations/{location}/caPools/{ca_pool}`.
        """
        return pulumi.get(self, "ca_pool")

    @_builtins.property
    @pulumi.getter(name="isPrivate")
    def is_private(self) -> _builtins.bool:
        """
        'Indicate if it's private instance.'
        """
        return pulumi.get(self, "is_private")

    @_builtins.property
    @pulumi.getter(name="httpServiceAttachment")
    def http_service_attachment(self) -> Optional[_builtins.str]:
        """
        (Output)
        Service Attachment for HTTP, resource is in the format of `projects/{project}/regions/{region}/serviceAttachments/{service_attachment}`.
        """
        return pulumi.get(self, "http_service_attachment")

    @_builtins.property
    @pulumi.getter(name="sshServiceAttachment")
    def ssh_service_attachment(self) -> Optional[_builtins.str]:
        """
        (Output)
        Service Attachment for SSH, resource is in the format of `projects/{project}/regions/{region}/serviceAttachments/{service_attachment}`.
        """
        return pulumi.get(self, "ssh_service_attachment")


@pulumi.output_type
class InstanceWorkforceIdentityFederationConfig(dict):
    def __init__(__self__, *,
                 enabled: _builtins.bool):
        """
        :param _builtins.bool enabled: 'Whether Workforce Identity Federation is enabled.'
        """
        pulumi.set(__self__, "enabled", enabled)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> _builtins.bool:
        """
        'Whether Workforce Identity Federation is enabled.'
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class RepositoryIamBindingCondition(dict):
    def __init__(__self__, *,
                 expression: _builtins.str,
                 title: _builtins.str,
                 description: Optional[_builtins.str] = None):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "title", title)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @_builtins.property
    @pulumi.getter
    def expression(self) -> _builtins.str:
        return pulumi.get(self, "expression")

    @_builtins.property
    @pulumi.getter
    def title(self) -> _builtins.str:
        return pulumi.get(self, "title")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "description")


@pulumi.output_type
class RepositoryIamMemberCondition(dict):
    def __init__(__self__, *,
                 expression: _builtins.str,
                 title: _builtins.str,
                 description: Optional[_builtins.str] = None):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "title", title)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @_builtins.property
    @pulumi.getter
    def expression(self) -> _builtins.str:
        return pulumi.get(self, "expression")

    @_builtins.property
    @pulumi.getter
    def title(self) -> _builtins.str:
        return pulumi.get(self, "title")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "description")


@pulumi.output_type
class RepositoryInitialConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultBranch":
            suggest = "default_branch"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RepositoryInitialConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RepositoryInitialConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RepositoryInitialConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default_branch: Optional[_builtins.str] = None,
                 gitignores: Optional[Sequence[_builtins.str]] = None,
                 license: Optional[_builtins.str] = None,
                 readme: Optional[_builtins.str] = None):
        """
        :param _builtins.str default_branch: Default branch name of the repository.
        :param Sequence[_builtins.str] gitignores: List of gitignore template names user can choose from.
               Valid values can be viewed at https://cloud.google.com/secure-source-manager/docs/reference/rest/v1/projects.locations.repositories#initialconfig.
        :param _builtins.str license: License template name user can choose from.
               Valid values can be viewed at https://cloud.google.com/secure-source-manager/docs/reference/rest/v1/projects.locations.repositories#initialconfig.
        :param _builtins.str readme: README template name.
               Valid values can be viewed at https://cloud.google.com/secure-source-manager/docs/reference/rest/v1/projects.locations.repositories#initialconfig.
        """
        if default_branch is not None:
            pulumi.set(__self__, "default_branch", default_branch)
        if gitignores is not None:
            pulumi.set(__self__, "gitignores", gitignores)
        if license is not None:
            pulumi.set(__self__, "license", license)
        if readme is not None:
            pulumi.set(__self__, "readme", readme)

    @_builtins.property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> Optional[_builtins.str]:
        """
        Default branch name of the repository.
        """
        return pulumi.get(self, "default_branch")

    @_builtins.property
    @pulumi.getter
    def gitignores(self) -> Optional[Sequence[_builtins.str]]:
        """
        List of gitignore template names user can choose from.
        Valid values can be viewed at https://cloud.google.com/secure-source-manager/docs/reference/rest/v1/projects.locations.repositories#initialconfig.
        """
        return pulumi.get(self, "gitignores")

    @_builtins.property
    @pulumi.getter
    def license(self) -> Optional[_builtins.str]:
        """
        License template name user can choose from.
        Valid values can be viewed at https://cloud.google.com/secure-source-manager/docs/reference/rest/v1/projects.locations.repositories#initialconfig.
        """
        return pulumi.get(self, "license")

    @_builtins.property
    @pulumi.getter
    def readme(self) -> Optional[_builtins.str]:
        """
        README template name.
        Valid values can be viewed at https://cloud.google.com/secure-source-manager/docs/reference/rest/v1/projects.locations.repositories#initialconfig.
        """
        return pulumi.get(self, "readme")


@pulumi.output_type
class RepositoryUri(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "gitHttps":
            suggest = "git_https"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RepositoryUri. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RepositoryUri.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RepositoryUri.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api: Optional[_builtins.str] = None,
                 git_https: Optional[_builtins.str] = None,
                 html: Optional[_builtins.str] = None):
        """
        :param _builtins.str api: (Output)
               API is the URI for API access.
        :param _builtins.str git_https: (Output)
               git_https is the git HTTPS URI for git operations.
        :param _builtins.str html: (Output)
               HTML is the URI for the user to view the repository in a browser.
        """
        if api is not None:
            pulumi.set(__self__, "api", api)
        if git_https is not None:
            pulumi.set(__self__, "git_https", git_https)
        if html is not None:
            pulumi.set(__self__, "html", html)

    @_builtins.property
    @pulumi.getter
    def api(self) -> Optional[_builtins.str]:
        """
        (Output)
        API is the URI for API access.
        """
        return pulumi.get(self, "api")

    @_builtins.property
    @pulumi.getter(name="gitHttps")
    def git_https(self) -> Optional[_builtins.str]:
        """
        (Output)
        git_https is the git HTTPS URI for git operations.
        """
        return pulumi.get(self, "git_https")

    @_builtins.property
    @pulumi.getter
    def html(self) -> Optional[_builtins.str]:
        """
        (Output)
        HTML is the URI for the user to view the repository in a browser.
        """
        return pulumi.get(self, "html")


