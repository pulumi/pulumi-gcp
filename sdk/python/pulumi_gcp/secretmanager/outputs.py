# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'SecretIamBindingCondition',
    'SecretIamMemberCondition',
    'SecretReplication',
    'SecretReplicationAuto',
    'SecretReplicationAutoCustomerManagedEncryption',
    'SecretReplicationUserManaged',
    'SecretReplicationUserManagedReplica',
    'SecretReplicationUserManagedReplicaCustomerManagedEncryption',
    'SecretRotation',
    'SecretTopic',
    'GetSecretReplicationResult',
    'GetSecretReplicationAutoResult',
    'GetSecretReplicationAutoCustomerManagedEncryptionResult',
    'GetSecretReplicationUserManagedResult',
    'GetSecretReplicationUserManagedReplicaResult',
    'GetSecretReplicationUserManagedReplicaCustomerManagedEncryptionResult',
    'GetSecretRotationResult',
    'GetSecretTopicResult',
]

@pulumi.output_type
class SecretIamBindingCondition(dict):
    def __init__(__self__, *,
                 expression: str,
                 title: str,
                 description: Optional[str] = None):
        SecretIamBindingCondition._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            expression=expression,
            title=title,
            description=description,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             expression: str,
             title: str,
             description: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("expression", expression)
        _setter("title", title)
        if description is not None:
            _setter("description", description)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def title(self) -> str:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")


@pulumi.output_type
class SecretIamMemberCondition(dict):
    def __init__(__self__, *,
                 expression: str,
                 title: str,
                 description: Optional[str] = None):
        SecretIamMemberCondition._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            expression=expression,
            title=title,
            description=description,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             expression: str,
             title: str,
             description: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("expression", expression)
        _setter("title", title)
        if description is not None:
            _setter("description", description)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def title(self) -> str:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")


@pulumi.output_type
class SecretReplication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "userManaged":
            suggest = "user_managed"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecretReplication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecretReplication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecretReplication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auto: Optional['outputs.SecretReplicationAuto'] = None,
                 automatic: Optional[bool] = None,
                 user_managed: Optional['outputs.SecretReplicationUserManaged'] = None):
        """
        :param 'SecretReplicationAutoArgs' auto: The Secret will automatically be replicated without any restrictions.
               Structure is documented below.
        :param bool automatic: (Optional, Deprecated)
               The Secret will automatically be replicated without any restrictions.
               
               > **Warning:** `automatic` is deprecated and will be removed in a future major release. Use `auto` instead.
        :param 'SecretReplicationUserManagedArgs' user_managed: The Secret will be replicated to the regions specified by the user.
               Structure is documented below.
        """
        SecretReplication._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            auto=auto,
            automatic=automatic,
            user_managed=user_managed,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             auto: Optional['outputs.SecretReplicationAuto'] = None,
             automatic: Optional[bool] = None,
             user_managed: Optional['outputs.SecretReplicationUserManaged'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if auto is not None:
            _setter("auto", auto)
        if automatic is not None:
            _setter("automatic", automatic)
        if user_managed is not None:
            _setter("user_managed", user_managed)

    @property
    @pulumi.getter
    def auto(self) -> Optional['outputs.SecretReplicationAuto']:
        """
        The Secret will automatically be replicated without any restrictions.
        Structure is documented below.
        """
        return pulumi.get(self, "auto")

    @property
    @pulumi.getter
    def automatic(self) -> Optional[bool]:
        """
        (Optional, Deprecated)
        The Secret will automatically be replicated without any restrictions.

        > **Warning:** `automatic` is deprecated and will be removed in a future major release. Use `auto` instead.
        """
        warnings.warn("""`automatic` is deprecated and will be removed in a future major release. Use `auto` instead.""", DeprecationWarning)
        pulumi.log.warn("""automatic is deprecated: `automatic` is deprecated and will be removed in a future major release. Use `auto` instead.""")

        return pulumi.get(self, "automatic")

    @property
    @pulumi.getter(name="userManaged")
    def user_managed(self) -> Optional['outputs.SecretReplicationUserManaged']:
        """
        The Secret will be replicated to the regions specified by the user.
        Structure is documented below.
        """
        return pulumi.get(self, "user_managed")


@pulumi.output_type
class SecretReplicationAuto(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customerManagedEncryption":
            suggest = "customer_managed_encryption"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecretReplicationAuto. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecretReplicationAuto.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecretReplicationAuto.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 customer_managed_encryption: Optional['outputs.SecretReplicationAutoCustomerManagedEncryption'] = None):
        """
        :param 'SecretReplicationAutoCustomerManagedEncryptionArgs' customer_managed_encryption: The customer-managed encryption configuration of the Secret.
               If no configuration is provided, Google-managed default
               encryption is used.
               Structure is documented below.
        """
        SecretReplicationAuto._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            customer_managed_encryption=customer_managed_encryption,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             customer_managed_encryption: Optional['outputs.SecretReplicationAutoCustomerManagedEncryption'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if customer_managed_encryption is not None:
            _setter("customer_managed_encryption", customer_managed_encryption)

    @property
    @pulumi.getter(name="customerManagedEncryption")
    def customer_managed_encryption(self) -> Optional['outputs.SecretReplicationAutoCustomerManagedEncryption']:
        """
        The customer-managed encryption configuration of the Secret.
        If no configuration is provided, Google-managed default
        encryption is used.
        Structure is documented below.
        """
        return pulumi.get(self, "customer_managed_encryption")


@pulumi.output_type
class SecretReplicationAutoCustomerManagedEncryption(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "kmsKeyName":
            suggest = "kms_key_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecretReplicationAutoCustomerManagedEncryption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecretReplicationAutoCustomerManagedEncryption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecretReplicationAutoCustomerManagedEncryption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 kms_key_name: str):
        """
        :param str kms_key_name: Describes the Cloud KMS encryption key that will be used to protect destination secret.
               
               - - -
        """
        SecretReplicationAutoCustomerManagedEncryption._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            kms_key_name=kms_key_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             kms_key_name: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("kms_key_name", kms_key_name)

    @property
    @pulumi.getter(name="kmsKeyName")
    def kms_key_name(self) -> str:
        """
        Describes the Cloud KMS encryption key that will be used to protect destination secret.

        - - -
        """
        return pulumi.get(self, "kms_key_name")


@pulumi.output_type
class SecretReplicationUserManaged(dict):
    def __init__(__self__, *,
                 replicas: Sequence['outputs.SecretReplicationUserManagedReplica']):
        """
        :param Sequence['SecretReplicationUserManagedReplicaArgs'] replicas: The list of Replicas for this Secret. Cannot be empty.
               Structure is documented below.
        """
        SecretReplicationUserManaged._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            replicas=replicas,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             replicas: Sequence['outputs.SecretReplicationUserManagedReplica'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("replicas", replicas)

    @property
    @pulumi.getter
    def replicas(self) -> Sequence['outputs.SecretReplicationUserManagedReplica']:
        """
        The list of Replicas for this Secret. Cannot be empty.
        Structure is documented below.
        """
        return pulumi.get(self, "replicas")


@pulumi.output_type
class SecretReplicationUserManagedReplica(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customerManagedEncryption":
            suggest = "customer_managed_encryption"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecretReplicationUserManagedReplica. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecretReplicationUserManagedReplica.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecretReplicationUserManagedReplica.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 location: str,
                 customer_managed_encryption: Optional['outputs.SecretReplicationUserManagedReplicaCustomerManagedEncryption'] = None):
        """
        :param str location: The canonical IDs of the location to replicate data. For example: "us-east1".
        :param 'SecretReplicationUserManagedReplicaCustomerManagedEncryptionArgs' customer_managed_encryption: Customer Managed Encryption for the secret.
               Structure is documented below.
        """
        SecretReplicationUserManagedReplica._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            location=location,
            customer_managed_encryption=customer_managed_encryption,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             location: str,
             customer_managed_encryption: Optional['outputs.SecretReplicationUserManagedReplicaCustomerManagedEncryption'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("location", location)
        if customer_managed_encryption is not None:
            _setter("customer_managed_encryption", customer_managed_encryption)

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The canonical IDs of the location to replicate data. For example: "us-east1".
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="customerManagedEncryption")
    def customer_managed_encryption(self) -> Optional['outputs.SecretReplicationUserManagedReplicaCustomerManagedEncryption']:
        """
        Customer Managed Encryption for the secret.
        Structure is documented below.
        """
        return pulumi.get(self, "customer_managed_encryption")


@pulumi.output_type
class SecretReplicationUserManagedReplicaCustomerManagedEncryption(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "kmsKeyName":
            suggest = "kms_key_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecretReplicationUserManagedReplicaCustomerManagedEncryption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecretReplicationUserManagedReplicaCustomerManagedEncryption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecretReplicationUserManagedReplicaCustomerManagedEncryption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 kms_key_name: str):
        """
        :param str kms_key_name: Describes the Cloud KMS encryption key that will be used to protect destination secret.
               
               - - -
        """
        SecretReplicationUserManagedReplicaCustomerManagedEncryption._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            kms_key_name=kms_key_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             kms_key_name: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("kms_key_name", kms_key_name)

    @property
    @pulumi.getter(name="kmsKeyName")
    def kms_key_name(self) -> str:
        """
        Describes the Cloud KMS encryption key that will be used to protect destination secret.

        - - -
        """
        return pulumi.get(self, "kms_key_name")


@pulumi.output_type
class SecretRotation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nextRotationTime":
            suggest = "next_rotation_time"
        elif key == "rotationPeriod":
            suggest = "rotation_period"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecretRotation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecretRotation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecretRotation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 next_rotation_time: Optional[str] = None,
                 rotation_period: Optional[str] = None):
        """
        :param str next_rotation_time: Timestamp in UTC at which the Secret is scheduled to rotate.
               A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
        :param str rotation_period: The Duration between rotation notifications. Must be in seconds and at least 3600s (1h) and at most 3153600000s (100 years).
               If rotationPeriod is set, `next_rotation_time` must be set. `next_rotation_time` will be advanced by this period when the service automatically sends rotation notifications.
        """
        SecretRotation._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            next_rotation_time=next_rotation_time,
            rotation_period=rotation_period,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             next_rotation_time: Optional[str] = None,
             rotation_period: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if next_rotation_time is not None:
            _setter("next_rotation_time", next_rotation_time)
        if rotation_period is not None:
            _setter("rotation_period", rotation_period)

    @property
    @pulumi.getter(name="nextRotationTime")
    def next_rotation_time(self) -> Optional[str]:
        """
        Timestamp in UTC at which the Secret is scheduled to rotate.
        A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
        """
        return pulumi.get(self, "next_rotation_time")

    @property
    @pulumi.getter(name="rotationPeriod")
    def rotation_period(self) -> Optional[str]:
        """
        The Duration between rotation notifications. Must be in seconds and at least 3600s (1h) and at most 3153600000s (100 years).
        If rotationPeriod is set, `next_rotation_time` must be set. `next_rotation_time` will be advanced by this period when the service automatically sends rotation notifications.
        """
        return pulumi.get(self, "rotation_period")


@pulumi.output_type
class SecretTopic(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: The resource name of the Pub/Sub topic that will be published to, in the following format: projects/*/topics/*.
               For publication to succeed, the Secret Manager Service Agent service account must have pubsub.publisher permissions on the topic.
        """
        SecretTopic._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The resource name of the Pub/Sub topic that will be published to, in the following format: projects/*/topics/*.
        For publication to succeed, the Secret Manager Service Agent service account must have pubsub.publisher permissions on the topic.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSecretReplicationResult(dict):
    def __init__(__self__, *,
                 automatic: bool,
                 autos: Sequence['outputs.GetSecretReplicationAutoResult'],
                 user_manageds: Sequence['outputs.GetSecretReplicationUserManagedResult']):
        GetSecretReplicationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            automatic=automatic,
            autos=autos,
            user_manageds=user_manageds,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             automatic: bool,
             autos: Sequence['outputs.GetSecretReplicationAutoResult'],
             user_manageds: Sequence['outputs.GetSecretReplicationUserManagedResult'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("automatic", automatic)
        _setter("autos", autos)
        _setter("user_manageds", user_manageds)

    @property
    @pulumi.getter
    def automatic(self) -> bool:
        return pulumi.get(self, "automatic")

    @property
    @pulumi.getter
    def autos(self) -> Sequence['outputs.GetSecretReplicationAutoResult']:
        return pulumi.get(self, "autos")

    @property
    @pulumi.getter(name="userManageds")
    def user_manageds(self) -> Sequence['outputs.GetSecretReplicationUserManagedResult']:
        return pulumi.get(self, "user_manageds")


@pulumi.output_type
class GetSecretReplicationAutoResult(dict):
    def __init__(__self__, *,
                 customer_managed_encryptions: Sequence['outputs.GetSecretReplicationAutoCustomerManagedEncryptionResult']):
        GetSecretReplicationAutoResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            customer_managed_encryptions=customer_managed_encryptions,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             customer_managed_encryptions: Sequence['outputs.GetSecretReplicationAutoCustomerManagedEncryptionResult'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("customer_managed_encryptions", customer_managed_encryptions)

    @property
    @pulumi.getter(name="customerManagedEncryptions")
    def customer_managed_encryptions(self) -> Sequence['outputs.GetSecretReplicationAutoCustomerManagedEncryptionResult']:
        return pulumi.get(self, "customer_managed_encryptions")


@pulumi.output_type
class GetSecretReplicationAutoCustomerManagedEncryptionResult(dict):
    def __init__(__self__, *,
                 kms_key_name: str):
        GetSecretReplicationAutoCustomerManagedEncryptionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            kms_key_name=kms_key_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             kms_key_name: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("kms_key_name", kms_key_name)

    @property
    @pulumi.getter(name="kmsKeyName")
    def kms_key_name(self) -> str:
        return pulumi.get(self, "kms_key_name")


@pulumi.output_type
class GetSecretReplicationUserManagedResult(dict):
    def __init__(__self__, *,
                 replicas: Sequence['outputs.GetSecretReplicationUserManagedReplicaResult']):
        GetSecretReplicationUserManagedResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            replicas=replicas,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             replicas: Sequence['outputs.GetSecretReplicationUserManagedReplicaResult'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("replicas", replicas)

    @property
    @pulumi.getter
    def replicas(self) -> Sequence['outputs.GetSecretReplicationUserManagedReplicaResult']:
        return pulumi.get(self, "replicas")


@pulumi.output_type
class GetSecretReplicationUserManagedReplicaResult(dict):
    def __init__(__self__, *,
                 customer_managed_encryptions: Sequence['outputs.GetSecretReplicationUserManagedReplicaCustomerManagedEncryptionResult'],
                 location: str):
        GetSecretReplicationUserManagedReplicaResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            customer_managed_encryptions=customer_managed_encryptions,
            location=location,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             customer_managed_encryptions: Sequence['outputs.GetSecretReplicationUserManagedReplicaCustomerManagedEncryptionResult'],
             location: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("customer_managed_encryptions", customer_managed_encryptions)
        _setter("location", location)

    @property
    @pulumi.getter(name="customerManagedEncryptions")
    def customer_managed_encryptions(self) -> Sequence['outputs.GetSecretReplicationUserManagedReplicaCustomerManagedEncryptionResult']:
        return pulumi.get(self, "customer_managed_encryptions")

    @property
    @pulumi.getter
    def location(self) -> str:
        return pulumi.get(self, "location")


@pulumi.output_type
class GetSecretReplicationUserManagedReplicaCustomerManagedEncryptionResult(dict):
    def __init__(__self__, *,
                 kms_key_name: str):
        GetSecretReplicationUserManagedReplicaCustomerManagedEncryptionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            kms_key_name=kms_key_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             kms_key_name: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("kms_key_name", kms_key_name)

    @property
    @pulumi.getter(name="kmsKeyName")
    def kms_key_name(self) -> str:
        return pulumi.get(self, "kms_key_name")


@pulumi.output_type
class GetSecretRotationResult(dict):
    def __init__(__self__, *,
                 next_rotation_time: str,
                 rotation_period: str):
        GetSecretRotationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            next_rotation_time=next_rotation_time,
            rotation_period=rotation_period,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             next_rotation_time: str,
             rotation_period: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("next_rotation_time", next_rotation_time)
        _setter("rotation_period", rotation_period)

    @property
    @pulumi.getter(name="nextRotationTime")
    def next_rotation_time(self) -> str:
        return pulumi.get(self, "next_rotation_time")

    @property
    @pulumi.getter(name="rotationPeriod")
    def rotation_period(self) -> str:
        return pulumi.get(self, "rotation_period")


@pulumi.output_type
class GetSecretTopicResult(dict):
    def __init__(__self__, *,
                 name: str):
        GetSecretTopicResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


