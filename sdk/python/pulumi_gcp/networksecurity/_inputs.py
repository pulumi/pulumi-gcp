# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'AddressGroupIamBindingConditionArgs',
    'AddressGroupIamBindingConditionArgsDict',
    'AddressGroupIamMemberConditionArgs',
    'AddressGroupIamMemberConditionArgsDict',
    'AuthorizationPolicyRuleArgs',
    'AuthorizationPolicyRuleArgsDict',
    'AuthorizationPolicyRuleDestinationArgs',
    'AuthorizationPolicyRuleDestinationArgsDict',
    'AuthorizationPolicyRuleDestinationHttpHeaderMatchArgs',
    'AuthorizationPolicyRuleDestinationHttpHeaderMatchArgsDict',
    'AuthorizationPolicyRuleSourceArgs',
    'AuthorizationPolicyRuleSourceArgsDict',
    'AuthzPolicyCustomProviderArgs',
    'AuthzPolicyCustomProviderArgsDict',
    'AuthzPolicyCustomProviderAuthzExtensionArgs',
    'AuthzPolicyCustomProviderAuthzExtensionArgsDict',
    'AuthzPolicyCustomProviderCloudIapArgs',
    'AuthzPolicyCustomProviderCloudIapArgsDict',
    'AuthzPolicyHttpRuleArgs',
    'AuthzPolicyHttpRuleArgsDict',
    'AuthzPolicyHttpRuleFromArgs',
    'AuthzPolicyHttpRuleFromArgsDict',
    'AuthzPolicyHttpRuleFromNotSourceArgs',
    'AuthzPolicyHttpRuleFromNotSourceArgsDict',
    'AuthzPolicyHttpRuleFromNotSourcePrincipalArgs',
    'AuthzPolicyHttpRuleFromNotSourcePrincipalArgsDict',
    'AuthzPolicyHttpRuleFromNotSourceResourceArgs',
    'AuthzPolicyHttpRuleFromNotSourceResourceArgsDict',
    'AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountArgs',
    'AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountArgsDict',
    'AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetArgs',
    'AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetArgsDict',
    'AuthzPolicyHttpRuleFromSourceArgs',
    'AuthzPolicyHttpRuleFromSourceArgsDict',
    'AuthzPolicyHttpRuleFromSourcePrincipalArgs',
    'AuthzPolicyHttpRuleFromSourcePrincipalArgsDict',
    'AuthzPolicyHttpRuleFromSourceResourceArgs',
    'AuthzPolicyHttpRuleFromSourceResourceArgsDict',
    'AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountArgs',
    'AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountArgsDict',
    'AuthzPolicyHttpRuleFromSourceResourceTagValueIdSetArgs',
    'AuthzPolicyHttpRuleFromSourceResourceTagValueIdSetArgsDict',
    'AuthzPolicyHttpRuleToArgs',
    'AuthzPolicyHttpRuleToArgsDict',
    'AuthzPolicyHttpRuleToOperationArgs',
    'AuthzPolicyHttpRuleToOperationArgsDict',
    'AuthzPolicyHttpRuleToOperationHeaderSetArgs',
    'AuthzPolicyHttpRuleToOperationHeaderSetArgsDict',
    'AuthzPolicyHttpRuleToOperationHeaderSetHeaderArgs',
    'AuthzPolicyHttpRuleToOperationHeaderSetHeaderArgsDict',
    'AuthzPolicyHttpRuleToOperationHeaderSetHeaderValueArgs',
    'AuthzPolicyHttpRuleToOperationHeaderSetHeaderValueArgsDict',
    'AuthzPolicyHttpRuleToOperationHostArgs',
    'AuthzPolicyHttpRuleToOperationHostArgsDict',
    'AuthzPolicyHttpRuleToOperationPathArgs',
    'AuthzPolicyHttpRuleToOperationPathArgsDict',
    'AuthzPolicyTargetArgs',
    'AuthzPolicyTargetArgsDict',
    'ClientTlsPolicyClientCertificateArgs',
    'ClientTlsPolicyClientCertificateArgsDict',
    'ClientTlsPolicyClientCertificateCertificateProviderInstanceArgs',
    'ClientTlsPolicyClientCertificateCertificateProviderInstanceArgsDict',
    'ClientTlsPolicyClientCertificateGrpcEndpointArgs',
    'ClientTlsPolicyClientCertificateGrpcEndpointArgsDict',
    'ClientTlsPolicyServerValidationCaArgs',
    'ClientTlsPolicyServerValidationCaArgsDict',
    'ClientTlsPolicyServerValidationCaCertificateProviderInstanceArgs',
    'ClientTlsPolicyServerValidationCaCertificateProviderInstanceArgsDict',
    'ClientTlsPolicyServerValidationCaGrpcEndpointArgs',
    'ClientTlsPolicyServerValidationCaGrpcEndpointArgsDict',
    'InterceptDeploymentGroupConnectedEndpointGroupArgs',
    'InterceptDeploymentGroupConnectedEndpointGroupArgsDict',
    'MirroringDeploymentGroupConnectedEndpointGroupArgs',
    'MirroringDeploymentGroupConnectedEndpointGroupArgsDict',
    'MirroringEndpointGroupAssociationLocationsDetailArgs',
    'MirroringEndpointGroupAssociationLocationsDetailArgsDict',
    'SecurityProfileThreatPreventionProfileArgs',
    'SecurityProfileThreatPreventionProfileArgsDict',
    'SecurityProfileThreatPreventionProfileSeverityOverrideArgs',
    'SecurityProfileThreatPreventionProfileSeverityOverrideArgsDict',
    'SecurityProfileThreatPreventionProfileThreatOverrideArgs',
    'SecurityProfileThreatPreventionProfileThreatOverrideArgsDict',
    'ServerTlsPolicyMtlsPolicyArgs',
    'ServerTlsPolicyMtlsPolicyArgsDict',
    'ServerTlsPolicyMtlsPolicyClientValidationCaArgs',
    'ServerTlsPolicyMtlsPolicyClientValidationCaArgsDict',
    'ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceArgs',
    'ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceArgsDict',
    'ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointArgs',
    'ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointArgsDict',
    'ServerTlsPolicyServerCertificateArgs',
    'ServerTlsPolicyServerCertificateArgsDict',
    'ServerTlsPolicyServerCertificateCertificateProviderInstanceArgs',
    'ServerTlsPolicyServerCertificateCertificateProviderInstanceArgsDict',
    'ServerTlsPolicyServerCertificateGrpcEndpointArgs',
    'ServerTlsPolicyServerCertificateGrpcEndpointArgsDict',
]

MYPY = False

if not MYPY:
    class AddressGroupIamBindingConditionArgsDict(TypedDict):
        expression: pulumi.Input[str]
        title: pulumi.Input[str]
        description: NotRequired[pulumi.Input[str]]
elif False:
    AddressGroupIamBindingConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AddressGroupIamBindingConditionArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 title: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "title", title)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)


if not MYPY:
    class AddressGroupIamMemberConditionArgsDict(TypedDict):
        expression: pulumi.Input[str]
        title: pulumi.Input[str]
        description: NotRequired[pulumi.Input[str]]
elif False:
    AddressGroupIamMemberConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AddressGroupIamMemberConditionArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 title: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "title", title)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)


if not MYPY:
    class AuthorizationPolicyRuleArgsDict(TypedDict):
        destinations: NotRequired[pulumi.Input[Sequence[pulumi.Input['AuthorizationPolicyRuleDestinationArgsDict']]]]
        """
        List of attributes for the traffic destination. All of the destinations must match. A destination is a match if a request matches all the specified hosts, ports, methods and headers.
        If not set, the action specified in the 'action' field will be applied without any rule checks for the destination.
        Structure is documented below.
        """
        sources: NotRequired[pulumi.Input[Sequence[pulumi.Input['AuthorizationPolicyRuleSourceArgsDict']]]]
        """
        List of attributes for the traffic source. All of the sources must match. A source is a match if both principals and ipBlocks match.
        If not set, the action specified in the 'action' field will be applied without any rule checks for the source.
        Structure is documented below.
        """
elif False:
    AuthorizationPolicyRuleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AuthorizationPolicyRuleArgs:
    def __init__(__self__, *,
                 destinations: Optional[pulumi.Input[Sequence[pulumi.Input['AuthorizationPolicyRuleDestinationArgs']]]] = None,
                 sources: Optional[pulumi.Input[Sequence[pulumi.Input['AuthorizationPolicyRuleSourceArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['AuthorizationPolicyRuleDestinationArgs']]] destinations: List of attributes for the traffic destination. All of the destinations must match. A destination is a match if a request matches all the specified hosts, ports, methods and headers.
               If not set, the action specified in the 'action' field will be applied without any rule checks for the destination.
               Structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['AuthorizationPolicyRuleSourceArgs']]] sources: List of attributes for the traffic source. All of the sources must match. A source is a match if both principals and ipBlocks match.
               If not set, the action specified in the 'action' field will be applied without any rule checks for the source.
               Structure is documented below.
        """
        if destinations is not None:
            pulumi.set(__self__, "destinations", destinations)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)

    @property
    @pulumi.getter
    def destinations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AuthorizationPolicyRuleDestinationArgs']]]]:
        """
        List of attributes for the traffic destination. All of the destinations must match. A destination is a match if a request matches all the specified hosts, ports, methods and headers.
        If not set, the action specified in the 'action' field will be applied without any rule checks for the destination.
        Structure is documented below.
        """
        return pulumi.get(self, "destinations")

    @destinations.setter
    def destinations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AuthorizationPolicyRuleDestinationArgs']]]]):
        pulumi.set(self, "destinations", value)

    @property
    @pulumi.getter
    def sources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AuthorizationPolicyRuleSourceArgs']]]]:
        """
        List of attributes for the traffic source. All of the sources must match. A source is a match if both principals and ipBlocks match.
        If not set, the action specified in the 'action' field will be applied without any rule checks for the source.
        Structure is documented below.
        """
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AuthorizationPolicyRuleSourceArgs']]]]):
        pulumi.set(self, "sources", value)


if not MYPY:
    class AuthorizationPolicyRuleDestinationArgsDict(TypedDict):
        hosts: pulumi.Input[Sequence[pulumi.Input[str]]]
        """
        List of host names to match. Matched against the ":authority" header in http requests. At least one host should match. Each host can be an exact match, or a prefix match (example "mydomain.*") or a suffix match (example "*.myorg.com") or a presence (any) match "*".
        """
        methods: pulumi.Input[Sequence[pulumi.Input[str]]]
        """
        A list of HTTP methods to match. At least one method should match. Should not be set for gRPC services.
        """
        ports: pulumi.Input[Sequence[pulumi.Input[int]]]
        """
        List of destination ports to match. At least one port should match.
        """
        http_header_match: NotRequired[pulumi.Input['AuthorizationPolicyRuleDestinationHttpHeaderMatchArgsDict']]
        """
        Match against key:value pair in http header. Provides a flexible match based on HTTP headers, for potentially advanced use cases. At least one header should match.
        Avoid using header matches to make authorization decisions unless there is a strong guarantee that requests arrive through a trusted client or proxy.
        Structure is documented below.
        """
elif False:
    AuthorizationPolicyRuleDestinationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AuthorizationPolicyRuleDestinationArgs:
    def __init__(__self__, *,
                 hosts: pulumi.Input[Sequence[pulumi.Input[str]]],
                 methods: pulumi.Input[Sequence[pulumi.Input[str]]],
                 ports: pulumi.Input[Sequence[pulumi.Input[int]]],
                 http_header_match: Optional[pulumi.Input['AuthorizationPolicyRuleDestinationHttpHeaderMatchArgs']] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] hosts: List of host names to match. Matched against the ":authority" header in http requests. At least one host should match. Each host can be an exact match, or a prefix match (example "mydomain.*") or a suffix match (example "*.myorg.com") or a presence (any) match "*".
        :param pulumi.Input[Sequence[pulumi.Input[str]]] methods: A list of HTTP methods to match. At least one method should match. Should not be set for gRPC services.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] ports: List of destination ports to match. At least one port should match.
        :param pulumi.Input['AuthorizationPolicyRuleDestinationHttpHeaderMatchArgs'] http_header_match: Match against key:value pair in http header. Provides a flexible match based on HTTP headers, for potentially advanced use cases. At least one header should match.
               Avoid using header matches to make authorization decisions unless there is a strong guarantee that requests arrive through a trusted client or proxy.
               Structure is documented below.
        """
        pulumi.set(__self__, "hosts", hosts)
        pulumi.set(__self__, "methods", methods)
        pulumi.set(__self__, "ports", ports)
        if http_header_match is not None:
            pulumi.set(__self__, "http_header_match", http_header_match)

    @property
    @pulumi.getter
    def hosts(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        List of host names to match. Matched against the ":authority" header in http requests. At least one host should match. Each host can be an exact match, or a prefix match (example "mydomain.*") or a suffix match (example "*.myorg.com") or a presence (any) match "*".
        """
        return pulumi.get(self, "hosts")

    @hosts.setter
    def hosts(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "hosts", value)

    @property
    @pulumi.getter
    def methods(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        A list of HTTP methods to match. At least one method should match. Should not be set for gRPC services.
        """
        return pulumi.get(self, "methods")

    @methods.setter
    def methods(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "methods", value)

    @property
    @pulumi.getter
    def ports(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        """
        List of destination ports to match. At least one port should match.
        """
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="httpHeaderMatch")
    def http_header_match(self) -> Optional[pulumi.Input['AuthorizationPolicyRuleDestinationHttpHeaderMatchArgs']]:
        """
        Match against key:value pair in http header. Provides a flexible match based on HTTP headers, for potentially advanced use cases. At least one header should match.
        Avoid using header matches to make authorization decisions unless there is a strong guarantee that requests arrive through a trusted client or proxy.
        Structure is documented below.
        """
        return pulumi.get(self, "http_header_match")

    @http_header_match.setter
    def http_header_match(self, value: Optional[pulumi.Input['AuthorizationPolicyRuleDestinationHttpHeaderMatchArgs']]):
        pulumi.set(self, "http_header_match", value)


if not MYPY:
    class AuthorizationPolicyRuleDestinationHttpHeaderMatchArgsDict(TypedDict):
        header_name: pulumi.Input[str]
        """
        The name of the HTTP header to match. For matching against the HTTP request's authority, use a headerMatch with the header name ":authority". For matching a request's method, use the headerName ":method".
        """
        regex_match: pulumi.Input[str]
        """
        The value of the header must match the regular expression specified in regexMatch. For regular expression grammar, please see: en.cppreference.com/w/cpp/regex/ecmascript For matching against a port specified in the HTTP request, use a headerMatch with headerName set to Host and a regular expression that satisfies the RFC2616 Host header's port specifier.
        """
elif False:
    AuthorizationPolicyRuleDestinationHttpHeaderMatchArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AuthorizationPolicyRuleDestinationHttpHeaderMatchArgs:
    def __init__(__self__, *,
                 header_name: pulumi.Input[str],
                 regex_match: pulumi.Input[str]):
        """
        :param pulumi.Input[str] header_name: The name of the HTTP header to match. For matching against the HTTP request's authority, use a headerMatch with the header name ":authority". For matching a request's method, use the headerName ":method".
        :param pulumi.Input[str] regex_match: The value of the header must match the regular expression specified in regexMatch. For regular expression grammar, please see: en.cppreference.com/w/cpp/regex/ecmascript For matching against a port specified in the HTTP request, use a headerMatch with headerName set to Host and a regular expression that satisfies the RFC2616 Host header's port specifier.
        """
        pulumi.set(__self__, "header_name", header_name)
        pulumi.set(__self__, "regex_match", regex_match)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> pulumi.Input[str]:
        """
        The name of the HTTP header to match. For matching against the HTTP request's authority, use a headerMatch with the header name ":authority". For matching a request's method, use the headerName ":method".
        """
        return pulumi.get(self, "header_name")

    @header_name.setter
    def header_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "header_name", value)

    @property
    @pulumi.getter(name="regexMatch")
    def regex_match(self) -> pulumi.Input[str]:
        """
        The value of the header must match the regular expression specified in regexMatch. For regular expression grammar, please see: en.cppreference.com/w/cpp/regex/ecmascript For matching against a port specified in the HTTP request, use a headerMatch with headerName set to Host and a regular expression that satisfies the RFC2616 Host header's port specifier.
        """
        return pulumi.get(self, "regex_match")

    @regex_match.setter
    def regex_match(self, value: pulumi.Input[str]):
        pulumi.set(self, "regex_match", value)


if not MYPY:
    class AuthorizationPolicyRuleSourceArgsDict(TypedDict):
        ip_blocks: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        List of CIDR ranges to match based on source IP address. At least one IP block should match. Single IP (e.g., "1.2.3.4") and CIDR (e.g., "1.2.3.0/24") are supported. Authorization based on source IP alone should be avoided.
        The IP addresses of any load balancers or proxies should be considered untrusted.
        """
        principals: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        List of peer identities to match for authorization. At least one principal should match. Each peer can be an exact match, or a prefix match (example, "namespace/*") or a suffix match (example, "*/service-account") or a presence match "*".
        Authorization based on the principal name without certificate validation (configured by ServerTlsPolicy resource) is considered insecure.
        """
elif False:
    AuthorizationPolicyRuleSourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AuthorizationPolicyRuleSourceArgs:
    def __init__(__self__, *,
                 ip_blocks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 principals: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ip_blocks: List of CIDR ranges to match based on source IP address. At least one IP block should match. Single IP (e.g., "1.2.3.4") and CIDR (e.g., "1.2.3.0/24") are supported. Authorization based on source IP alone should be avoided.
               The IP addresses of any load balancers or proxies should be considered untrusted.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] principals: List of peer identities to match for authorization. At least one principal should match. Each peer can be an exact match, or a prefix match (example, "namespace/*") or a suffix match (example, "*/service-account") or a presence match "*".
               Authorization based on the principal name without certificate validation (configured by ServerTlsPolicy resource) is considered insecure.
        """
        if ip_blocks is not None:
            pulumi.set(__self__, "ip_blocks", ip_blocks)
        if principals is not None:
            pulumi.set(__self__, "principals", principals)

    @property
    @pulumi.getter(name="ipBlocks")
    def ip_blocks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of CIDR ranges to match based on source IP address. At least one IP block should match. Single IP (e.g., "1.2.3.4") and CIDR (e.g., "1.2.3.0/24") are supported. Authorization based on source IP alone should be avoided.
        The IP addresses of any load balancers or proxies should be considered untrusted.
        """
        return pulumi.get(self, "ip_blocks")

    @ip_blocks.setter
    def ip_blocks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_blocks", value)

    @property
    @pulumi.getter
    def principals(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of peer identities to match for authorization. At least one principal should match. Each peer can be an exact match, or a prefix match (example, "namespace/*") or a suffix match (example, "*/service-account") or a presence match "*".
        Authorization based on the principal name without certificate validation (configured by ServerTlsPolicy resource) is considered insecure.
        """
        return pulumi.get(self, "principals")

    @principals.setter
    def principals(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "principals", value)


if not MYPY:
    class AuthzPolicyCustomProviderArgsDict(TypedDict):
        authz_extension: NotRequired[pulumi.Input['AuthzPolicyCustomProviderAuthzExtensionArgsDict']]
        """
        Delegate authorization decision to user authored Service Extension. Only one of cloudIap or authzExtension can be specified.
        Structure is documented below.
        """
        cloud_iap: NotRequired[pulumi.Input['AuthzPolicyCustomProviderCloudIapArgsDict']]
        """
        Delegates authorization decisions to Cloud IAP. Applicable only for managed load balancers. Enabling Cloud IAP at the AuthzPolicy level is not compatible with Cloud IAP settings in the BackendService. Enabling IAP in both places will result in request failure. Ensure that IAP is enabled in either the AuthzPolicy or the BackendService but not in both places.
        Structure is documented below.
        """
elif False:
    AuthzPolicyCustomProviderArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AuthzPolicyCustomProviderArgs:
    def __init__(__self__, *,
                 authz_extension: Optional[pulumi.Input['AuthzPolicyCustomProviderAuthzExtensionArgs']] = None,
                 cloud_iap: Optional[pulumi.Input['AuthzPolicyCustomProviderCloudIapArgs']] = None):
        """
        :param pulumi.Input['AuthzPolicyCustomProviderAuthzExtensionArgs'] authz_extension: Delegate authorization decision to user authored Service Extension. Only one of cloudIap or authzExtension can be specified.
               Structure is documented below.
        :param pulumi.Input['AuthzPolicyCustomProviderCloudIapArgs'] cloud_iap: Delegates authorization decisions to Cloud IAP. Applicable only for managed load balancers. Enabling Cloud IAP at the AuthzPolicy level is not compatible with Cloud IAP settings in the BackendService. Enabling IAP in both places will result in request failure. Ensure that IAP is enabled in either the AuthzPolicy or the BackendService but not in both places.
               Structure is documented below.
        """
        if authz_extension is not None:
            pulumi.set(__self__, "authz_extension", authz_extension)
        if cloud_iap is not None:
            pulumi.set(__self__, "cloud_iap", cloud_iap)

    @property
    @pulumi.getter(name="authzExtension")
    def authz_extension(self) -> Optional[pulumi.Input['AuthzPolicyCustomProviderAuthzExtensionArgs']]:
        """
        Delegate authorization decision to user authored Service Extension. Only one of cloudIap or authzExtension can be specified.
        Structure is documented below.
        """
        return pulumi.get(self, "authz_extension")

    @authz_extension.setter
    def authz_extension(self, value: Optional[pulumi.Input['AuthzPolicyCustomProviderAuthzExtensionArgs']]):
        pulumi.set(self, "authz_extension", value)

    @property
    @pulumi.getter(name="cloudIap")
    def cloud_iap(self) -> Optional[pulumi.Input['AuthzPolicyCustomProviderCloudIapArgs']]:
        """
        Delegates authorization decisions to Cloud IAP. Applicable only for managed load balancers. Enabling Cloud IAP at the AuthzPolicy level is not compatible with Cloud IAP settings in the BackendService. Enabling IAP in both places will result in request failure. Ensure that IAP is enabled in either the AuthzPolicy or the BackendService but not in both places.
        Structure is documented below.
        """
        return pulumi.get(self, "cloud_iap")

    @cloud_iap.setter
    def cloud_iap(self, value: Optional[pulumi.Input['AuthzPolicyCustomProviderCloudIapArgs']]):
        pulumi.set(self, "cloud_iap", value)


if not MYPY:
    class AuthzPolicyCustomProviderAuthzExtensionArgsDict(TypedDict):
        resources: pulumi.Input[Sequence[pulumi.Input[str]]]
        """
        A list of references to authorization extensions that will be invoked for requests matching this policy. Limited to 1 custom provider.
        """
elif False:
    AuthzPolicyCustomProviderAuthzExtensionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AuthzPolicyCustomProviderAuthzExtensionArgs:
    def __init__(__self__, *,
                 resources: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] resources: A list of references to authorization extensions that will be invoked for requests matching this policy. Limited to 1 custom provider.
        """
        pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def resources(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        A list of references to authorization extensions that will be invoked for requests matching this policy. Limited to 1 custom provider.
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "resources", value)


if not MYPY:
    class AuthzPolicyCustomProviderCloudIapArgsDict(TypedDict):
        enabled: pulumi.Input[bool]
        """
        Enable Cloud IAP at the AuthzPolicy level.
        """
elif False:
    AuthzPolicyCustomProviderCloudIapArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AuthzPolicyCustomProviderCloudIapArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool]):
        """
        :param pulumi.Input[bool] enabled: Enable Cloud IAP at the AuthzPolicy level.
        """
        pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        Enable Cloud IAP at the AuthzPolicy level.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)


if not MYPY:
    class AuthzPolicyHttpRuleArgsDict(TypedDict):
        from_: NotRequired[pulumi.Input['AuthzPolicyHttpRuleFromArgsDict']]
        """
        Describes properties of one or more sources of a request.
        Structure is documented below.
        """
        to: NotRequired[pulumi.Input['AuthzPolicyHttpRuleToArgsDict']]
        """
        Describes properties of one or more targets of a request
        Structure is documented below.
        """
        when: NotRequired[pulumi.Input[str]]
        """
        CEL expression that describes the conditions to be satisfied for the action. The result of the CEL expression is ANDed with the from and to. Refer to the CEL language reference for a list of available attributes.
        """
elif False:
    AuthzPolicyHttpRuleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AuthzPolicyHttpRuleArgs:
    def __init__(__self__, *,
                 from_: Optional[pulumi.Input['AuthzPolicyHttpRuleFromArgs']] = None,
                 to: Optional[pulumi.Input['AuthzPolicyHttpRuleToArgs']] = None,
                 when: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['AuthzPolicyHttpRuleFromArgs'] from_: Describes properties of one or more sources of a request.
               Structure is documented below.
        :param pulumi.Input['AuthzPolicyHttpRuleToArgs'] to: Describes properties of one or more targets of a request
               Structure is documented below.
        :param pulumi.Input[str] when: CEL expression that describes the conditions to be satisfied for the action. The result of the CEL expression is ANDed with the from and to. Refer to the CEL language reference for a list of available attributes.
        """
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)
        if to is not None:
            pulumi.set(__self__, "to", to)
        if when is not None:
            pulumi.set(__self__, "when", when)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[pulumi.Input['AuthzPolicyHttpRuleFromArgs']]:
        """
        Describes properties of one or more sources of a request.
        Structure is documented below.
        """
        return pulumi.get(self, "from_")

    @from_.setter
    def from_(self, value: Optional[pulumi.Input['AuthzPolicyHttpRuleFromArgs']]):
        pulumi.set(self, "from_", value)

    @property
    @pulumi.getter
    def to(self) -> Optional[pulumi.Input['AuthzPolicyHttpRuleToArgs']]:
        """
        Describes properties of one or more targets of a request
        Structure is documented below.
        """
        return pulumi.get(self, "to")

    @to.setter
    def to(self, value: Optional[pulumi.Input['AuthzPolicyHttpRuleToArgs']]):
        pulumi.set(self, "to", value)

    @property
    @pulumi.getter
    def when(self) -> Optional[pulumi.Input[str]]:
        """
        CEL expression that describes the conditions to be satisfied for the action. The result of the CEL expression is ANDed with the from and to. Refer to the CEL language reference for a list of available attributes.
        """
        return pulumi.get(self, "when")

    @when.setter
    def when(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "when", value)


if not MYPY:
    class AuthzPolicyHttpRuleFromArgsDict(TypedDict):
        not_sources: NotRequired[pulumi.Input[Sequence[pulumi.Input['AuthzPolicyHttpRuleFromNotSourceArgsDict']]]]
        """
        Describes the properties of a request's sources. At least one of sources or notSources must be specified. Limited to 5 sources. A match occurs when ANY source (in sources or notSources) matches the request. Within a single source, the match follows AND semantics across fields and OR semantics within a single field, i.e. a match occurs when ANY principal matches AND ANY ipBlocks match.
        Structure is documented below.
        """
        sources: NotRequired[pulumi.Input[Sequence[pulumi.Input['AuthzPolicyHttpRuleFromSourceArgsDict']]]]
        """
        Describes the properties of a request's sources. At least one of sources or notSources must be specified. Limited to 5 sources. A match occurs when ANY source (in sources or notSources) matches the request. Within a single source, the match follows AND semantics across fields and OR semantics within a single field, i.e. a match occurs when ANY principal matches AND ANY ipBlocks match.
        Structure is documented below.
        """
elif False:
    AuthzPolicyHttpRuleFromArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AuthzPolicyHttpRuleFromArgs:
    def __init__(__self__, *,
                 not_sources: Optional[pulumi.Input[Sequence[pulumi.Input['AuthzPolicyHttpRuleFromNotSourceArgs']]]] = None,
                 sources: Optional[pulumi.Input[Sequence[pulumi.Input['AuthzPolicyHttpRuleFromSourceArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['AuthzPolicyHttpRuleFromNotSourceArgs']]] not_sources: Describes the properties of a request's sources. At least one of sources or notSources must be specified. Limited to 5 sources. A match occurs when ANY source (in sources or notSources) matches the request. Within a single source, the match follows AND semantics across fields and OR semantics within a single field, i.e. a match occurs when ANY principal matches AND ANY ipBlocks match.
               Structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['AuthzPolicyHttpRuleFromSourceArgs']]] sources: Describes the properties of a request's sources. At least one of sources or notSources must be specified. Limited to 5 sources. A match occurs when ANY source (in sources or notSources) matches the request. Within a single source, the match follows AND semantics across fields and OR semantics within a single field, i.e. a match occurs when ANY principal matches AND ANY ipBlocks match.
               Structure is documented below.
        """
        if not_sources is not None:
            pulumi.set(__self__, "not_sources", not_sources)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)

    @property
    @pulumi.getter(name="notSources")
    def not_sources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AuthzPolicyHttpRuleFromNotSourceArgs']]]]:
        """
        Describes the properties of a request's sources. At least one of sources or notSources must be specified. Limited to 5 sources. A match occurs when ANY source (in sources or notSources) matches the request. Within a single source, the match follows AND semantics across fields and OR semantics within a single field, i.e. a match occurs when ANY principal matches AND ANY ipBlocks match.
        Structure is documented below.
        """
        return pulumi.get(self, "not_sources")

    @not_sources.setter
    def not_sources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AuthzPolicyHttpRuleFromNotSourceArgs']]]]):
        pulumi.set(self, "not_sources", value)

    @property
    @pulumi.getter
    def sources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AuthzPolicyHttpRuleFromSourceArgs']]]]:
        """
        Describes the properties of a request's sources. At least one of sources or notSources must be specified. Limited to 5 sources. A match occurs when ANY source (in sources or notSources) matches the request. Within a single source, the match follows AND semantics across fields and OR semantics within a single field, i.e. a match occurs when ANY principal matches AND ANY ipBlocks match.
        Structure is documented below.
        """
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AuthzPolicyHttpRuleFromSourceArgs']]]]):
        pulumi.set(self, "sources", value)


if not MYPY:
    class AuthzPolicyHttpRuleFromNotSourceArgsDict(TypedDict):
        principals: NotRequired[pulumi.Input[Sequence[pulumi.Input['AuthzPolicyHttpRuleFromNotSourcePrincipalArgsDict']]]]
        """
        A list of identities derived from the client's certificate. This field will not match on a request unless mutual TLS is enabled for the Forwarding rule or Gateway. Each identity is a string whose value is matched against the URI SAN, or DNS SAN or the subject field in the client's certificate. The match can be exact, prefix, suffix or a substring match. One of exact, prefix, suffix or contains must be specified.
        Limited to 5 principals.
        Structure is documented below.
        """
        resources: NotRequired[pulumi.Input[Sequence[pulumi.Input['AuthzPolicyHttpRuleFromNotSourceResourceArgsDict']]]]
        """
        A list of resources to match against the resource of the source VM of a request.
        Limited to 5 resources.
        Structure is documented below.
        """
elif False:
    AuthzPolicyHttpRuleFromNotSourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AuthzPolicyHttpRuleFromNotSourceArgs:
    def __init__(__self__, *,
                 principals: Optional[pulumi.Input[Sequence[pulumi.Input['AuthzPolicyHttpRuleFromNotSourcePrincipalArgs']]]] = None,
                 resources: Optional[pulumi.Input[Sequence[pulumi.Input['AuthzPolicyHttpRuleFromNotSourceResourceArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['AuthzPolicyHttpRuleFromNotSourcePrincipalArgs']]] principals: A list of identities derived from the client's certificate. This field will not match on a request unless mutual TLS is enabled for the Forwarding rule or Gateway. Each identity is a string whose value is matched against the URI SAN, or DNS SAN or the subject field in the client's certificate. The match can be exact, prefix, suffix or a substring match. One of exact, prefix, suffix or contains must be specified.
               Limited to 5 principals.
               Structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['AuthzPolicyHttpRuleFromNotSourceResourceArgs']]] resources: A list of resources to match against the resource of the source VM of a request.
               Limited to 5 resources.
               Structure is documented below.
        """
        if principals is not None:
            pulumi.set(__self__, "principals", principals)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def principals(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AuthzPolicyHttpRuleFromNotSourcePrincipalArgs']]]]:
        """
        A list of identities derived from the client's certificate. This field will not match on a request unless mutual TLS is enabled for the Forwarding rule or Gateway. Each identity is a string whose value is matched against the URI SAN, or DNS SAN or the subject field in the client's certificate. The match can be exact, prefix, suffix or a substring match. One of exact, prefix, suffix or contains must be specified.
        Limited to 5 principals.
        Structure is documented below.
        """
        return pulumi.get(self, "principals")

    @principals.setter
    def principals(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AuthzPolicyHttpRuleFromNotSourcePrincipalArgs']]]]):
        pulumi.set(self, "principals", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AuthzPolicyHttpRuleFromNotSourceResourceArgs']]]]:
        """
        A list of resources to match against the resource of the source VM of a request.
        Limited to 5 resources.
        Structure is documented below.
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AuthzPolicyHttpRuleFromNotSourceResourceArgs']]]]):
        pulumi.set(self, "resources", value)


if not MYPY:
    class AuthzPolicyHttpRuleFromNotSourcePrincipalArgsDict(TypedDict):
        contains: NotRequired[pulumi.Input[str]]
        """
        The input string must have the substring specified here. Note: empty contains match is not allowed, please use regex instead.
        Examples:
        * abc matches the value xyz.abc.def
        """
        exact: NotRequired[pulumi.Input[str]]
        """
        The input string must match exactly the string specified here.
        Examples:
        * abc only matches the value abc.
        """
        ignore_case: NotRequired[pulumi.Input[bool]]
        """
        If true, indicates the exact/prefix/suffix/contains matching should be case insensitive. For example, the matcher data will match both input string Data and data if set to true.
        """
        prefix: NotRequired[pulumi.Input[str]]
        """
        The input string must have the prefix specified here. Note: empty prefix is not allowed, please use regex instead.
        Examples:
        * abc matches the value abc.xyz
        """
        suffix: NotRequired[pulumi.Input[str]]
        """
        The input string must have the suffix specified here. Note: empty prefix is not allowed, please use regex instead.
        Examples:
        * abc matches the value xyz.abc
        """
elif False:
    AuthzPolicyHttpRuleFromNotSourcePrincipalArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AuthzPolicyHttpRuleFromNotSourcePrincipalArgs:
    def __init__(__self__, *,
                 contains: Optional[pulumi.Input[str]] = None,
                 exact: Optional[pulumi.Input[str]] = None,
                 ignore_case: Optional[pulumi.Input[bool]] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 suffix: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] contains: The input string must have the substring specified here. Note: empty contains match is not allowed, please use regex instead.
               Examples:
               * abc matches the value xyz.abc.def
        :param pulumi.Input[str] exact: The input string must match exactly the string specified here.
               Examples:
               * abc only matches the value abc.
        :param pulumi.Input[bool] ignore_case: If true, indicates the exact/prefix/suffix/contains matching should be case insensitive. For example, the matcher data will match both input string Data and data if set to true.
        :param pulumi.Input[str] prefix: The input string must have the prefix specified here. Note: empty prefix is not allowed, please use regex instead.
               Examples:
               * abc matches the value abc.xyz
        :param pulumi.Input[str] suffix: The input string must have the suffix specified here. Note: empty prefix is not allowed, please use regex instead.
               Examples:
               * abc matches the value xyz.abc
        """
        if contains is not None:
            pulumi.set(__self__, "contains", contains)
        if exact is not None:
            pulumi.set(__self__, "exact", exact)
        if ignore_case is not None:
            pulumi.set(__self__, "ignore_case", ignore_case)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if suffix is not None:
            pulumi.set(__self__, "suffix", suffix)

    @property
    @pulumi.getter
    def contains(self) -> Optional[pulumi.Input[str]]:
        """
        The input string must have the substring specified here. Note: empty contains match is not allowed, please use regex instead.
        Examples:
        * abc matches the value xyz.abc.def
        """
        return pulumi.get(self, "contains")

    @contains.setter
    def contains(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "contains", value)

    @property
    @pulumi.getter
    def exact(self) -> Optional[pulumi.Input[str]]:
        """
        The input string must match exactly the string specified here.
        Examples:
        * abc only matches the value abc.
        """
        return pulumi.get(self, "exact")

    @exact.setter
    def exact(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exact", value)

    @property
    @pulumi.getter(name="ignoreCase")
    def ignore_case(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, indicates the exact/prefix/suffix/contains matching should be case insensitive. For example, the matcher data will match both input string Data and data if set to true.
        """
        return pulumi.get(self, "ignore_case")

    @ignore_case.setter
    def ignore_case(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_case", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        """
        The input string must have the prefix specified here. Note: empty prefix is not allowed, please use regex instead.
        Examples:
        * abc matches the value abc.xyz
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter
    def suffix(self) -> Optional[pulumi.Input[str]]:
        """
        The input string must have the suffix specified here. Note: empty prefix is not allowed, please use regex instead.
        Examples:
        * abc matches the value xyz.abc
        """
        return pulumi.get(self, "suffix")

    @suffix.setter
    def suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "suffix", value)


if not MYPY:
    class AuthzPolicyHttpRuleFromNotSourceResourceArgsDict(TypedDict):
        iam_service_account: NotRequired[pulumi.Input['AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountArgsDict']]
        """
        An IAM service account to match against the source service account of the VM sending the request.
        Structure is documented below.
        """
        tag_value_id_set: NotRequired[pulumi.Input['AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetArgsDict']]
        """
        A list of resource tag value permanent IDs to match against the resource manager tags value associated with the source VM of a request.
        Structure is documented below.
        """
elif False:
    AuthzPolicyHttpRuleFromNotSourceResourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AuthzPolicyHttpRuleFromNotSourceResourceArgs:
    def __init__(__self__, *,
                 iam_service_account: Optional[pulumi.Input['AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountArgs']] = None,
                 tag_value_id_set: Optional[pulumi.Input['AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetArgs']] = None):
        """
        :param pulumi.Input['AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountArgs'] iam_service_account: An IAM service account to match against the source service account of the VM sending the request.
               Structure is documented below.
        :param pulumi.Input['AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetArgs'] tag_value_id_set: A list of resource tag value permanent IDs to match against the resource manager tags value associated with the source VM of a request.
               Structure is documented below.
        """
        if iam_service_account is not None:
            pulumi.set(__self__, "iam_service_account", iam_service_account)
        if tag_value_id_set is not None:
            pulumi.set(__self__, "tag_value_id_set", tag_value_id_set)

    @property
    @pulumi.getter(name="iamServiceAccount")
    def iam_service_account(self) -> Optional[pulumi.Input['AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountArgs']]:
        """
        An IAM service account to match against the source service account of the VM sending the request.
        Structure is documented below.
        """
        return pulumi.get(self, "iam_service_account")

    @iam_service_account.setter
    def iam_service_account(self, value: Optional[pulumi.Input['AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountArgs']]):
        pulumi.set(self, "iam_service_account", value)

    @property
    @pulumi.getter(name="tagValueIdSet")
    def tag_value_id_set(self) -> Optional[pulumi.Input['AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetArgs']]:
        """
        A list of resource tag value permanent IDs to match against the resource manager tags value associated with the source VM of a request.
        Structure is documented below.
        """
        return pulumi.get(self, "tag_value_id_set")

    @tag_value_id_set.setter
    def tag_value_id_set(self, value: Optional[pulumi.Input['AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetArgs']]):
        pulumi.set(self, "tag_value_id_set", value)


if not MYPY:
    class AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountArgsDict(TypedDict):
        contains: NotRequired[pulumi.Input[str]]
        """
        The input string must have the substring specified here. Note: empty contains match is not allowed, please use regex instead.
        Examples:
        * abc matches the value xyz.abc.def
        """
        exact: NotRequired[pulumi.Input[str]]
        """
        The input string must match exactly the string specified here.
        Examples:
        * abc only matches the value abc.
        """
        ignore_case: NotRequired[pulumi.Input[bool]]
        """
        If true, indicates the exact/prefix/suffix/contains matching should be case insensitive. For example, the matcher data will match both input string Data and data if set to true.
        """
        prefix: NotRequired[pulumi.Input[str]]
        """
        The input string must have the prefix specified here. Note: empty prefix is not allowed, please use regex instead.
        Examples:
        * abc matches the value abc.xyz
        """
        suffix: NotRequired[pulumi.Input[str]]
        """
        The input string must have the suffix specified here. Note: empty prefix is not allowed, please use regex instead.
        Examples:
        * abc matches the value xyz.abc
        """
elif False:
    AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AuthzPolicyHttpRuleFromNotSourceResourceIamServiceAccountArgs:
    def __init__(__self__, *,
                 contains: Optional[pulumi.Input[str]] = None,
                 exact: Optional[pulumi.Input[str]] = None,
                 ignore_case: Optional[pulumi.Input[bool]] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 suffix: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] contains: The input string must have the substring specified here. Note: empty contains match is not allowed, please use regex instead.
               Examples:
               * abc matches the value xyz.abc.def
        :param pulumi.Input[str] exact: The input string must match exactly the string specified here.
               Examples:
               * abc only matches the value abc.
        :param pulumi.Input[bool] ignore_case: If true, indicates the exact/prefix/suffix/contains matching should be case insensitive. For example, the matcher data will match both input string Data and data if set to true.
        :param pulumi.Input[str] prefix: The input string must have the prefix specified here. Note: empty prefix is not allowed, please use regex instead.
               Examples:
               * abc matches the value abc.xyz
        :param pulumi.Input[str] suffix: The input string must have the suffix specified here. Note: empty prefix is not allowed, please use regex instead.
               Examples:
               * abc matches the value xyz.abc
        """
        if contains is not None:
            pulumi.set(__self__, "contains", contains)
        if exact is not None:
            pulumi.set(__self__, "exact", exact)
        if ignore_case is not None:
            pulumi.set(__self__, "ignore_case", ignore_case)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if suffix is not None:
            pulumi.set(__self__, "suffix", suffix)

    @property
    @pulumi.getter
    def contains(self) -> Optional[pulumi.Input[str]]:
        """
        The input string must have the substring specified here. Note: empty contains match is not allowed, please use regex instead.
        Examples:
        * abc matches the value xyz.abc.def
        """
        return pulumi.get(self, "contains")

    @contains.setter
    def contains(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "contains", value)

    @property
    @pulumi.getter
    def exact(self) -> Optional[pulumi.Input[str]]:
        """
        The input string must match exactly the string specified here.
        Examples:
        * abc only matches the value abc.
        """
        return pulumi.get(self, "exact")

    @exact.setter
    def exact(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exact", value)

    @property
    @pulumi.getter(name="ignoreCase")
    def ignore_case(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, indicates the exact/prefix/suffix/contains matching should be case insensitive. For example, the matcher data will match both input string Data and data if set to true.
        """
        return pulumi.get(self, "ignore_case")

    @ignore_case.setter
    def ignore_case(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_case", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        """
        The input string must have the prefix specified here. Note: empty prefix is not allowed, please use regex instead.
        Examples:
        * abc matches the value abc.xyz
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter
    def suffix(self) -> Optional[pulumi.Input[str]]:
        """
        The input string must have the suffix specified here. Note: empty prefix is not allowed, please use regex instead.
        Examples:
        * abc matches the value xyz.abc
        """
        return pulumi.get(self, "suffix")

    @suffix.setter
    def suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "suffix", value)


if not MYPY:
    class AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetArgsDict(TypedDict):
        ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        A list of resource tag value permanent IDs to match against the resource manager tags value associated with the source VM of a request. The match follows AND semantics which means all the ids must match.
        Limited to 5 matches.
        """
elif False:
    AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AuthzPolicyHttpRuleFromNotSourceResourceTagValueIdSetArgs:
    def __init__(__self__, *,
                 ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ids: A list of resource tag value permanent IDs to match against the resource manager tags value associated with the source VM of a request. The match follows AND semantics which means all the ids must match.
               Limited to 5 matches.
        """
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of resource tag value permanent IDs to match against the resource manager tags value associated with the source VM of a request. The match follows AND semantics which means all the ids must match.
        Limited to 5 matches.
        """
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ids", value)


if not MYPY:
    class AuthzPolicyHttpRuleFromSourceArgsDict(TypedDict):
        principals: NotRequired[pulumi.Input[Sequence[pulumi.Input['AuthzPolicyHttpRuleFromSourcePrincipalArgsDict']]]]
        """
        A list of identities derived from the client's certificate. This field will not match on a request unless mutual TLS is enabled for the Forwarding rule or Gateway. Each identity is a string whose value is matched against the URI SAN, or DNS SAN or the subject field in the client's certificate. The match can be exact, prefix, suffix or a substring match. One of exact, prefix, suffix or contains must be specified.
        Limited to 5 principals.
        Structure is documented below.
        """
        resources: NotRequired[pulumi.Input[Sequence[pulumi.Input['AuthzPolicyHttpRuleFromSourceResourceArgsDict']]]]
        """
        A list of resources to match against the resource of the source VM of a request.
        Limited to 5 resources.
        Structure is documented below.
        """
elif False:
    AuthzPolicyHttpRuleFromSourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AuthzPolicyHttpRuleFromSourceArgs:
    def __init__(__self__, *,
                 principals: Optional[pulumi.Input[Sequence[pulumi.Input['AuthzPolicyHttpRuleFromSourcePrincipalArgs']]]] = None,
                 resources: Optional[pulumi.Input[Sequence[pulumi.Input['AuthzPolicyHttpRuleFromSourceResourceArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['AuthzPolicyHttpRuleFromSourcePrincipalArgs']]] principals: A list of identities derived from the client's certificate. This field will not match on a request unless mutual TLS is enabled for the Forwarding rule or Gateway. Each identity is a string whose value is matched against the URI SAN, or DNS SAN or the subject field in the client's certificate. The match can be exact, prefix, suffix or a substring match. One of exact, prefix, suffix or contains must be specified.
               Limited to 5 principals.
               Structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['AuthzPolicyHttpRuleFromSourceResourceArgs']]] resources: A list of resources to match against the resource of the source VM of a request.
               Limited to 5 resources.
               Structure is documented below.
        """
        if principals is not None:
            pulumi.set(__self__, "principals", principals)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def principals(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AuthzPolicyHttpRuleFromSourcePrincipalArgs']]]]:
        """
        A list of identities derived from the client's certificate. This field will not match on a request unless mutual TLS is enabled for the Forwarding rule or Gateway. Each identity is a string whose value is matched against the URI SAN, or DNS SAN or the subject field in the client's certificate. The match can be exact, prefix, suffix or a substring match. One of exact, prefix, suffix or contains must be specified.
        Limited to 5 principals.
        Structure is documented below.
        """
        return pulumi.get(self, "principals")

    @principals.setter
    def principals(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AuthzPolicyHttpRuleFromSourcePrincipalArgs']]]]):
        pulumi.set(self, "principals", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AuthzPolicyHttpRuleFromSourceResourceArgs']]]]:
        """
        A list of resources to match against the resource of the source VM of a request.
        Limited to 5 resources.
        Structure is documented below.
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AuthzPolicyHttpRuleFromSourceResourceArgs']]]]):
        pulumi.set(self, "resources", value)


if not MYPY:
    class AuthzPolicyHttpRuleFromSourcePrincipalArgsDict(TypedDict):
        contains: NotRequired[pulumi.Input[str]]
        """
        The input string must have the substring specified here. Note: empty contains match is not allowed, please use regex instead.
        Examples:
        * abc matches the value xyz.abc.def
        """
        exact: NotRequired[pulumi.Input[str]]
        """
        The input string must match exactly the string specified here.
        Examples:
        * abc only matches the value abc.
        """
        ignore_case: NotRequired[pulumi.Input[bool]]
        """
        If true, indicates the exact/prefix/suffix/contains matching should be case insensitive. For example, the matcher data will match both input string Data and data if set to true.
        """
        prefix: NotRequired[pulumi.Input[str]]
        """
        The input string must have the prefix specified here. Note: empty prefix is not allowed, please use regex instead.
        Examples:
        * abc matches the value abc.xyz
        """
        suffix: NotRequired[pulumi.Input[str]]
        """
        The input string must have the suffix specified here. Note: empty prefix is not allowed, please use regex instead.
        Examples:
        * abc matches the value xyz.abc
        """
elif False:
    AuthzPolicyHttpRuleFromSourcePrincipalArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AuthzPolicyHttpRuleFromSourcePrincipalArgs:
    def __init__(__self__, *,
                 contains: Optional[pulumi.Input[str]] = None,
                 exact: Optional[pulumi.Input[str]] = None,
                 ignore_case: Optional[pulumi.Input[bool]] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 suffix: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] contains: The input string must have the substring specified here. Note: empty contains match is not allowed, please use regex instead.
               Examples:
               * abc matches the value xyz.abc.def
        :param pulumi.Input[str] exact: The input string must match exactly the string specified here.
               Examples:
               * abc only matches the value abc.
        :param pulumi.Input[bool] ignore_case: If true, indicates the exact/prefix/suffix/contains matching should be case insensitive. For example, the matcher data will match both input string Data and data if set to true.
        :param pulumi.Input[str] prefix: The input string must have the prefix specified here. Note: empty prefix is not allowed, please use regex instead.
               Examples:
               * abc matches the value abc.xyz
        :param pulumi.Input[str] suffix: The input string must have the suffix specified here. Note: empty prefix is not allowed, please use regex instead.
               Examples:
               * abc matches the value xyz.abc
        """
        if contains is not None:
            pulumi.set(__self__, "contains", contains)
        if exact is not None:
            pulumi.set(__self__, "exact", exact)
        if ignore_case is not None:
            pulumi.set(__self__, "ignore_case", ignore_case)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if suffix is not None:
            pulumi.set(__self__, "suffix", suffix)

    @property
    @pulumi.getter
    def contains(self) -> Optional[pulumi.Input[str]]:
        """
        The input string must have the substring specified here. Note: empty contains match is not allowed, please use regex instead.
        Examples:
        * abc matches the value xyz.abc.def
        """
        return pulumi.get(self, "contains")

    @contains.setter
    def contains(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "contains", value)

    @property
    @pulumi.getter
    def exact(self) -> Optional[pulumi.Input[str]]:
        """
        The input string must match exactly the string specified here.
        Examples:
        * abc only matches the value abc.
        """
        return pulumi.get(self, "exact")

    @exact.setter
    def exact(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exact", value)

    @property
    @pulumi.getter(name="ignoreCase")
    def ignore_case(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, indicates the exact/prefix/suffix/contains matching should be case insensitive. For example, the matcher data will match both input string Data and data if set to true.
        """
        return pulumi.get(self, "ignore_case")

    @ignore_case.setter
    def ignore_case(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_case", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        """
        The input string must have the prefix specified here. Note: empty prefix is not allowed, please use regex instead.
        Examples:
        * abc matches the value abc.xyz
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter
    def suffix(self) -> Optional[pulumi.Input[str]]:
        """
        The input string must have the suffix specified here. Note: empty prefix is not allowed, please use regex instead.
        Examples:
        * abc matches the value xyz.abc
        """
        return pulumi.get(self, "suffix")

    @suffix.setter
    def suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "suffix", value)


if not MYPY:
    class AuthzPolicyHttpRuleFromSourceResourceArgsDict(TypedDict):
        iam_service_account: NotRequired[pulumi.Input['AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountArgsDict']]
        """
        An IAM service account to match against the source service account of the VM sending the request.
        Structure is documented below.
        """
        tag_value_id_set: NotRequired[pulumi.Input['AuthzPolicyHttpRuleFromSourceResourceTagValueIdSetArgsDict']]
        """
        A list of resource tag value permanent IDs to match against the resource manager tags value associated with the source VM of a request.
        Structure is documented below.
        """
elif False:
    AuthzPolicyHttpRuleFromSourceResourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AuthzPolicyHttpRuleFromSourceResourceArgs:
    def __init__(__self__, *,
                 iam_service_account: Optional[pulumi.Input['AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountArgs']] = None,
                 tag_value_id_set: Optional[pulumi.Input['AuthzPolicyHttpRuleFromSourceResourceTagValueIdSetArgs']] = None):
        """
        :param pulumi.Input['AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountArgs'] iam_service_account: An IAM service account to match against the source service account of the VM sending the request.
               Structure is documented below.
        :param pulumi.Input['AuthzPolicyHttpRuleFromSourceResourceTagValueIdSetArgs'] tag_value_id_set: A list of resource tag value permanent IDs to match against the resource manager tags value associated with the source VM of a request.
               Structure is documented below.
        """
        if iam_service_account is not None:
            pulumi.set(__self__, "iam_service_account", iam_service_account)
        if tag_value_id_set is not None:
            pulumi.set(__self__, "tag_value_id_set", tag_value_id_set)

    @property
    @pulumi.getter(name="iamServiceAccount")
    def iam_service_account(self) -> Optional[pulumi.Input['AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountArgs']]:
        """
        An IAM service account to match against the source service account of the VM sending the request.
        Structure is documented below.
        """
        return pulumi.get(self, "iam_service_account")

    @iam_service_account.setter
    def iam_service_account(self, value: Optional[pulumi.Input['AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountArgs']]):
        pulumi.set(self, "iam_service_account", value)

    @property
    @pulumi.getter(name="tagValueIdSet")
    def tag_value_id_set(self) -> Optional[pulumi.Input['AuthzPolicyHttpRuleFromSourceResourceTagValueIdSetArgs']]:
        """
        A list of resource tag value permanent IDs to match against the resource manager tags value associated with the source VM of a request.
        Structure is documented below.
        """
        return pulumi.get(self, "tag_value_id_set")

    @tag_value_id_set.setter
    def tag_value_id_set(self, value: Optional[pulumi.Input['AuthzPolicyHttpRuleFromSourceResourceTagValueIdSetArgs']]):
        pulumi.set(self, "tag_value_id_set", value)


if not MYPY:
    class AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountArgsDict(TypedDict):
        contains: NotRequired[pulumi.Input[str]]
        """
        The input string must have the substring specified here. Note: empty contains match is not allowed, please use regex instead.
        Examples:
        * abc matches the value xyz.abc.def
        """
        exact: NotRequired[pulumi.Input[str]]
        """
        The input string must match exactly the string specified here.
        Examples:
        * abc only matches the value abc.
        """
        ignore_case: NotRequired[pulumi.Input[bool]]
        """
        If true, indicates the exact/prefix/suffix/contains matching should be case insensitive. For example, the matcher data will match both input string Data and data if set to true.
        """
        prefix: NotRequired[pulumi.Input[str]]
        """
        The input string must have the prefix specified here. Note: empty prefix is not allowed, please use regex instead.
        Examples:
        * abc matches the value abc.xyz
        """
        suffix: NotRequired[pulumi.Input[str]]
        """
        The input string must have the suffix specified here. Note: empty prefix is not allowed, please use regex instead.
        Examples:
        * abc matches the value xyz.abc
        """
elif False:
    AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AuthzPolicyHttpRuleFromSourceResourceIamServiceAccountArgs:
    def __init__(__self__, *,
                 contains: Optional[pulumi.Input[str]] = None,
                 exact: Optional[pulumi.Input[str]] = None,
                 ignore_case: Optional[pulumi.Input[bool]] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 suffix: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] contains: The input string must have the substring specified here. Note: empty contains match is not allowed, please use regex instead.
               Examples:
               * abc matches the value xyz.abc.def
        :param pulumi.Input[str] exact: The input string must match exactly the string specified here.
               Examples:
               * abc only matches the value abc.
        :param pulumi.Input[bool] ignore_case: If true, indicates the exact/prefix/suffix/contains matching should be case insensitive. For example, the matcher data will match both input string Data and data if set to true.
        :param pulumi.Input[str] prefix: The input string must have the prefix specified here. Note: empty prefix is not allowed, please use regex instead.
               Examples:
               * abc matches the value abc.xyz
        :param pulumi.Input[str] suffix: The input string must have the suffix specified here. Note: empty prefix is not allowed, please use regex instead.
               Examples:
               * abc matches the value xyz.abc
        """
        if contains is not None:
            pulumi.set(__self__, "contains", contains)
        if exact is not None:
            pulumi.set(__self__, "exact", exact)
        if ignore_case is not None:
            pulumi.set(__self__, "ignore_case", ignore_case)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if suffix is not None:
            pulumi.set(__self__, "suffix", suffix)

    @property
    @pulumi.getter
    def contains(self) -> Optional[pulumi.Input[str]]:
        """
        The input string must have the substring specified here. Note: empty contains match is not allowed, please use regex instead.
        Examples:
        * abc matches the value xyz.abc.def
        """
        return pulumi.get(self, "contains")

    @contains.setter
    def contains(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "contains", value)

    @property
    @pulumi.getter
    def exact(self) -> Optional[pulumi.Input[str]]:
        """
        The input string must match exactly the string specified here.
        Examples:
        * abc only matches the value abc.
        """
        return pulumi.get(self, "exact")

    @exact.setter
    def exact(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exact", value)

    @property
    @pulumi.getter(name="ignoreCase")
    def ignore_case(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, indicates the exact/prefix/suffix/contains matching should be case insensitive. For example, the matcher data will match both input string Data and data if set to true.
        """
        return pulumi.get(self, "ignore_case")

    @ignore_case.setter
    def ignore_case(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_case", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        """
        The input string must have the prefix specified here. Note: empty prefix is not allowed, please use regex instead.
        Examples:
        * abc matches the value abc.xyz
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter
    def suffix(self) -> Optional[pulumi.Input[str]]:
        """
        The input string must have the suffix specified here. Note: empty prefix is not allowed, please use regex instead.
        Examples:
        * abc matches the value xyz.abc
        """
        return pulumi.get(self, "suffix")

    @suffix.setter
    def suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "suffix", value)


if not MYPY:
    class AuthzPolicyHttpRuleFromSourceResourceTagValueIdSetArgsDict(TypedDict):
        ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        A list of resource tag value permanent IDs to match against the resource manager tags value associated with the source VM of a request. The match follows AND semantics which means all the ids must match.
        Limited to 5 matches.
        """
elif False:
    AuthzPolicyHttpRuleFromSourceResourceTagValueIdSetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AuthzPolicyHttpRuleFromSourceResourceTagValueIdSetArgs:
    def __init__(__self__, *,
                 ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ids: A list of resource tag value permanent IDs to match against the resource manager tags value associated with the source VM of a request. The match follows AND semantics which means all the ids must match.
               Limited to 5 matches.
        """
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of resource tag value permanent IDs to match against the resource manager tags value associated with the source VM of a request. The match follows AND semantics which means all the ids must match.
        Limited to 5 matches.
        """
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ids", value)


if not MYPY:
    class AuthzPolicyHttpRuleToArgsDict(TypedDict):
        operations: NotRequired[pulumi.Input[Sequence[pulumi.Input['AuthzPolicyHttpRuleToOperationArgsDict']]]]
        """
        Describes properties of one or more targets of a request. At least one of operations or notOperations must be specified. Limited to 5 operations. A match occurs when ANY operation (in operations or notOperations) matches. Within an operation, the match follows AND semantics across fields and OR semantics within a field, i.e. a match occurs when ANY path matches AND ANY header matches and ANY method matches.
        Structure is documented below.
        """
elif False:
    AuthzPolicyHttpRuleToArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AuthzPolicyHttpRuleToArgs:
    def __init__(__self__, *,
                 operations: Optional[pulumi.Input[Sequence[pulumi.Input['AuthzPolicyHttpRuleToOperationArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['AuthzPolicyHttpRuleToOperationArgs']]] operations: Describes properties of one or more targets of a request. At least one of operations or notOperations must be specified. Limited to 5 operations. A match occurs when ANY operation (in operations or notOperations) matches. Within an operation, the match follows AND semantics across fields and OR semantics within a field, i.e. a match occurs when ANY path matches AND ANY header matches and ANY method matches.
               Structure is documented below.
        """
        if operations is not None:
            pulumi.set(__self__, "operations", operations)

    @property
    @pulumi.getter
    def operations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AuthzPolicyHttpRuleToOperationArgs']]]]:
        """
        Describes properties of one or more targets of a request. At least one of operations or notOperations must be specified. Limited to 5 operations. A match occurs when ANY operation (in operations or notOperations) matches. Within an operation, the match follows AND semantics across fields and OR semantics within a field, i.e. a match occurs when ANY path matches AND ANY header matches and ANY method matches.
        Structure is documented below.
        """
        return pulumi.get(self, "operations")

    @operations.setter
    def operations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AuthzPolicyHttpRuleToOperationArgs']]]]):
        pulumi.set(self, "operations", value)


if not MYPY:
    class AuthzPolicyHttpRuleToOperationArgsDict(TypedDict):
        header_set: NotRequired[pulumi.Input['AuthzPolicyHttpRuleToOperationHeaderSetArgsDict']]
        """
        A list of headers to match against in http header.
        Structure is documented below.
        """
        hosts: NotRequired[pulumi.Input[Sequence[pulumi.Input['AuthzPolicyHttpRuleToOperationHostArgsDict']]]]
        """
        A list of HTTP Hosts to match against. The match can be one of exact, prefix, suffix, or contains (substring match). Matches are always case sensitive unless the ignoreCase is set.
        Limited to 5 matches.
        Structure is documented below.
        """
        methods: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        A list of HTTP methods to match against. Each entry must be a valid HTTP method name (GET, PUT, POST, HEAD, PATCH, DELETE, OPTIONS). It only allows exact match and is always case sensitive.
        """
        paths: NotRequired[pulumi.Input[Sequence[pulumi.Input['AuthzPolicyHttpRuleToOperationPathArgsDict']]]]
        """
        A list of paths to match against. The match can be one of exact, prefix, suffix, or contains (substring match). Matches are always case sensitive unless the ignoreCase is set.
        Limited to 5 matches.
        Note that this path match includes the query parameters. For gRPC services, this should be a fully-qualified name of the form /package.service/method.
        Structure is documented below.
        """
elif False:
    AuthzPolicyHttpRuleToOperationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AuthzPolicyHttpRuleToOperationArgs:
    def __init__(__self__, *,
                 header_set: Optional[pulumi.Input['AuthzPolicyHttpRuleToOperationHeaderSetArgs']] = None,
                 hosts: Optional[pulumi.Input[Sequence[pulumi.Input['AuthzPolicyHttpRuleToOperationHostArgs']]]] = None,
                 methods: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 paths: Optional[pulumi.Input[Sequence[pulumi.Input['AuthzPolicyHttpRuleToOperationPathArgs']]]] = None):
        """
        :param pulumi.Input['AuthzPolicyHttpRuleToOperationHeaderSetArgs'] header_set: A list of headers to match against in http header.
               Structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['AuthzPolicyHttpRuleToOperationHostArgs']]] hosts: A list of HTTP Hosts to match against. The match can be one of exact, prefix, suffix, or contains (substring match). Matches are always case sensitive unless the ignoreCase is set.
               Limited to 5 matches.
               Structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] methods: A list of HTTP methods to match against. Each entry must be a valid HTTP method name (GET, PUT, POST, HEAD, PATCH, DELETE, OPTIONS). It only allows exact match and is always case sensitive.
        :param pulumi.Input[Sequence[pulumi.Input['AuthzPolicyHttpRuleToOperationPathArgs']]] paths: A list of paths to match against. The match can be one of exact, prefix, suffix, or contains (substring match). Matches are always case sensitive unless the ignoreCase is set.
               Limited to 5 matches.
               Note that this path match includes the query parameters. For gRPC services, this should be a fully-qualified name of the form /package.service/method.
               Structure is documented below.
        """
        if header_set is not None:
            pulumi.set(__self__, "header_set", header_set)
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if methods is not None:
            pulumi.set(__self__, "methods", methods)
        if paths is not None:
            pulumi.set(__self__, "paths", paths)

    @property
    @pulumi.getter(name="headerSet")
    def header_set(self) -> Optional[pulumi.Input['AuthzPolicyHttpRuleToOperationHeaderSetArgs']]:
        """
        A list of headers to match against in http header.
        Structure is documented below.
        """
        return pulumi.get(self, "header_set")

    @header_set.setter
    def header_set(self, value: Optional[pulumi.Input['AuthzPolicyHttpRuleToOperationHeaderSetArgs']]):
        pulumi.set(self, "header_set", value)

    @property
    @pulumi.getter
    def hosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AuthzPolicyHttpRuleToOperationHostArgs']]]]:
        """
        A list of HTTP Hosts to match against. The match can be one of exact, prefix, suffix, or contains (substring match). Matches are always case sensitive unless the ignoreCase is set.
        Limited to 5 matches.
        Structure is documented below.
        """
        return pulumi.get(self, "hosts")

    @hosts.setter
    def hosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AuthzPolicyHttpRuleToOperationHostArgs']]]]):
        pulumi.set(self, "hosts", value)

    @property
    @pulumi.getter
    def methods(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of HTTP methods to match against. Each entry must be a valid HTTP method name (GET, PUT, POST, HEAD, PATCH, DELETE, OPTIONS). It only allows exact match and is always case sensitive.
        """
        return pulumi.get(self, "methods")

    @methods.setter
    def methods(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "methods", value)

    @property
    @pulumi.getter
    def paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AuthzPolicyHttpRuleToOperationPathArgs']]]]:
        """
        A list of paths to match against. The match can be one of exact, prefix, suffix, or contains (substring match). Matches are always case sensitive unless the ignoreCase is set.
        Limited to 5 matches.
        Note that this path match includes the query parameters. For gRPC services, this should be a fully-qualified name of the form /package.service/method.
        Structure is documented below.
        """
        return pulumi.get(self, "paths")

    @paths.setter
    def paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AuthzPolicyHttpRuleToOperationPathArgs']]]]):
        pulumi.set(self, "paths", value)


if not MYPY:
    class AuthzPolicyHttpRuleToOperationHeaderSetArgsDict(TypedDict):
        headers: NotRequired[pulumi.Input[Sequence[pulumi.Input['AuthzPolicyHttpRuleToOperationHeaderSetHeaderArgsDict']]]]
        """
        A list of headers to match against in http header. The match can be one of exact, prefix, suffix, or contains (substring match). The match follows AND semantics which means all the headers must match. Matches are always case sensitive unless the ignoreCase is set. Limited to 5 matches.
        Structure is documented below.
        """
elif False:
    AuthzPolicyHttpRuleToOperationHeaderSetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AuthzPolicyHttpRuleToOperationHeaderSetArgs:
    def __init__(__self__, *,
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input['AuthzPolicyHttpRuleToOperationHeaderSetHeaderArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['AuthzPolicyHttpRuleToOperationHeaderSetHeaderArgs']]] headers: A list of headers to match against in http header. The match can be one of exact, prefix, suffix, or contains (substring match). The match follows AND semantics which means all the headers must match. Matches are always case sensitive unless the ignoreCase is set. Limited to 5 matches.
               Structure is documented below.
        """
        if headers is not None:
            pulumi.set(__self__, "headers", headers)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AuthzPolicyHttpRuleToOperationHeaderSetHeaderArgs']]]]:
        """
        A list of headers to match against in http header. The match can be one of exact, prefix, suffix, or contains (substring match). The match follows AND semantics which means all the headers must match. Matches are always case sensitive unless the ignoreCase is set. Limited to 5 matches.
        Structure is documented below.
        """
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AuthzPolicyHttpRuleToOperationHeaderSetHeaderArgs']]]]):
        pulumi.set(self, "headers", value)


if not MYPY:
    class AuthzPolicyHttpRuleToOperationHeaderSetHeaderArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        Specifies the name of the header in the request.
        """
        value: NotRequired[pulumi.Input['AuthzPolicyHttpRuleToOperationHeaderSetHeaderValueArgsDict']]
        """
        Specifies how the header match will be performed.
        Structure is documented below.
        """
elif False:
    AuthzPolicyHttpRuleToOperationHeaderSetHeaderArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AuthzPolicyHttpRuleToOperationHeaderSetHeaderArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['AuthzPolicyHttpRuleToOperationHeaderSetHeaderValueArgs']] = None):
        """
        :param pulumi.Input[str] name: Specifies the name of the header in the request.
        :param pulumi.Input['AuthzPolicyHttpRuleToOperationHeaderSetHeaderValueArgs'] value: Specifies how the header match will be performed.
               Structure is documented below.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the name of the header in the request.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['AuthzPolicyHttpRuleToOperationHeaderSetHeaderValueArgs']]:
        """
        Specifies how the header match will be performed.
        Structure is documented below.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['AuthzPolicyHttpRuleToOperationHeaderSetHeaderValueArgs']]):
        pulumi.set(self, "value", value)


if not MYPY:
    class AuthzPolicyHttpRuleToOperationHeaderSetHeaderValueArgsDict(TypedDict):
        contains: NotRequired[pulumi.Input[str]]
        """
        The input string must have the substring specified here. Note: empty contains match is not allowed, please use regex instead.
        Examples:
        * abc matches the value xyz.abc.def
        """
        exact: NotRequired[pulumi.Input[str]]
        """
        The input string must match exactly the string specified here.
        Examples:
        * abc only matches the value abc.
        """
        ignore_case: NotRequired[pulumi.Input[bool]]
        """
        If true, indicates the exact/prefix/suffix/contains matching should be case insensitive. For example, the matcher data will match both input string Data and data if set to true.
        """
        prefix: NotRequired[pulumi.Input[str]]
        """
        The input string must have the prefix specified here. Note: empty prefix is not allowed, please use regex instead.
        Examples:
        * abc matches the value abc.xyz
        """
        suffix: NotRequired[pulumi.Input[str]]
        """
        The input string must have the suffix specified here. Note: empty prefix is not allowed, please use regex instead.
        Examples:
        * abc matches the value xyz.abc
        """
elif False:
    AuthzPolicyHttpRuleToOperationHeaderSetHeaderValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AuthzPolicyHttpRuleToOperationHeaderSetHeaderValueArgs:
    def __init__(__self__, *,
                 contains: Optional[pulumi.Input[str]] = None,
                 exact: Optional[pulumi.Input[str]] = None,
                 ignore_case: Optional[pulumi.Input[bool]] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 suffix: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] contains: The input string must have the substring specified here. Note: empty contains match is not allowed, please use regex instead.
               Examples:
               * abc matches the value xyz.abc.def
        :param pulumi.Input[str] exact: The input string must match exactly the string specified here.
               Examples:
               * abc only matches the value abc.
        :param pulumi.Input[bool] ignore_case: If true, indicates the exact/prefix/suffix/contains matching should be case insensitive. For example, the matcher data will match both input string Data and data if set to true.
        :param pulumi.Input[str] prefix: The input string must have the prefix specified here. Note: empty prefix is not allowed, please use regex instead.
               Examples:
               * abc matches the value abc.xyz
        :param pulumi.Input[str] suffix: The input string must have the suffix specified here. Note: empty prefix is not allowed, please use regex instead.
               Examples:
               * abc matches the value xyz.abc
        """
        if contains is not None:
            pulumi.set(__self__, "contains", contains)
        if exact is not None:
            pulumi.set(__self__, "exact", exact)
        if ignore_case is not None:
            pulumi.set(__self__, "ignore_case", ignore_case)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if suffix is not None:
            pulumi.set(__self__, "suffix", suffix)

    @property
    @pulumi.getter
    def contains(self) -> Optional[pulumi.Input[str]]:
        """
        The input string must have the substring specified here. Note: empty contains match is not allowed, please use regex instead.
        Examples:
        * abc matches the value xyz.abc.def
        """
        return pulumi.get(self, "contains")

    @contains.setter
    def contains(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "contains", value)

    @property
    @pulumi.getter
    def exact(self) -> Optional[pulumi.Input[str]]:
        """
        The input string must match exactly the string specified here.
        Examples:
        * abc only matches the value abc.
        """
        return pulumi.get(self, "exact")

    @exact.setter
    def exact(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exact", value)

    @property
    @pulumi.getter(name="ignoreCase")
    def ignore_case(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, indicates the exact/prefix/suffix/contains matching should be case insensitive. For example, the matcher data will match both input string Data and data if set to true.
        """
        return pulumi.get(self, "ignore_case")

    @ignore_case.setter
    def ignore_case(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_case", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        """
        The input string must have the prefix specified here. Note: empty prefix is not allowed, please use regex instead.
        Examples:
        * abc matches the value abc.xyz
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter
    def suffix(self) -> Optional[pulumi.Input[str]]:
        """
        The input string must have the suffix specified here. Note: empty prefix is not allowed, please use regex instead.
        Examples:
        * abc matches the value xyz.abc
        """
        return pulumi.get(self, "suffix")

    @suffix.setter
    def suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "suffix", value)


if not MYPY:
    class AuthzPolicyHttpRuleToOperationHostArgsDict(TypedDict):
        contains: NotRequired[pulumi.Input[str]]
        """
        The input string must have the substring specified here. Note: empty contains match is not allowed, please use regex instead.
        Examples:
        * abc matches the value xyz.abc.def
        """
        exact: NotRequired[pulumi.Input[str]]
        """
        The input string must match exactly the string specified here.
        Examples:
        * abc only matches the value abc.
        """
        ignore_case: NotRequired[pulumi.Input[bool]]
        """
        If true, indicates the exact/prefix/suffix/contains matching should be case insensitive. For example, the matcher data will match both input string Data and data if set to true.
        """
        prefix: NotRequired[pulumi.Input[str]]
        """
        The input string must have the prefix specified here. Note: empty prefix is not allowed, please use regex instead.
        Examples:
        * abc matches the value abc.xyz
        """
        suffix: NotRequired[pulumi.Input[str]]
        """
        The input string must have the suffix specified here. Note: empty prefix is not allowed, please use regex instead.
        Examples:
        * abc matches the value xyz.abc
        """
elif False:
    AuthzPolicyHttpRuleToOperationHostArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AuthzPolicyHttpRuleToOperationHostArgs:
    def __init__(__self__, *,
                 contains: Optional[pulumi.Input[str]] = None,
                 exact: Optional[pulumi.Input[str]] = None,
                 ignore_case: Optional[pulumi.Input[bool]] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 suffix: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] contains: The input string must have the substring specified here. Note: empty contains match is not allowed, please use regex instead.
               Examples:
               * abc matches the value xyz.abc.def
        :param pulumi.Input[str] exact: The input string must match exactly the string specified here.
               Examples:
               * abc only matches the value abc.
        :param pulumi.Input[bool] ignore_case: If true, indicates the exact/prefix/suffix/contains matching should be case insensitive. For example, the matcher data will match both input string Data and data if set to true.
        :param pulumi.Input[str] prefix: The input string must have the prefix specified here. Note: empty prefix is not allowed, please use regex instead.
               Examples:
               * abc matches the value abc.xyz
        :param pulumi.Input[str] suffix: The input string must have the suffix specified here. Note: empty prefix is not allowed, please use regex instead.
               Examples:
               * abc matches the value xyz.abc
        """
        if contains is not None:
            pulumi.set(__self__, "contains", contains)
        if exact is not None:
            pulumi.set(__self__, "exact", exact)
        if ignore_case is not None:
            pulumi.set(__self__, "ignore_case", ignore_case)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if suffix is not None:
            pulumi.set(__self__, "suffix", suffix)

    @property
    @pulumi.getter
    def contains(self) -> Optional[pulumi.Input[str]]:
        """
        The input string must have the substring specified here. Note: empty contains match is not allowed, please use regex instead.
        Examples:
        * abc matches the value xyz.abc.def
        """
        return pulumi.get(self, "contains")

    @contains.setter
    def contains(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "contains", value)

    @property
    @pulumi.getter
    def exact(self) -> Optional[pulumi.Input[str]]:
        """
        The input string must match exactly the string specified here.
        Examples:
        * abc only matches the value abc.
        """
        return pulumi.get(self, "exact")

    @exact.setter
    def exact(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exact", value)

    @property
    @pulumi.getter(name="ignoreCase")
    def ignore_case(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, indicates the exact/prefix/suffix/contains matching should be case insensitive. For example, the matcher data will match both input string Data and data if set to true.
        """
        return pulumi.get(self, "ignore_case")

    @ignore_case.setter
    def ignore_case(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_case", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        """
        The input string must have the prefix specified here. Note: empty prefix is not allowed, please use regex instead.
        Examples:
        * abc matches the value abc.xyz
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter
    def suffix(self) -> Optional[pulumi.Input[str]]:
        """
        The input string must have the suffix specified here. Note: empty prefix is not allowed, please use regex instead.
        Examples:
        * abc matches the value xyz.abc
        """
        return pulumi.get(self, "suffix")

    @suffix.setter
    def suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "suffix", value)


if not MYPY:
    class AuthzPolicyHttpRuleToOperationPathArgsDict(TypedDict):
        contains: NotRequired[pulumi.Input[str]]
        """
        The input string must have the substring specified here. Note: empty contains match is not allowed, please use regex instead.
        Examples:
        * abc matches the value xyz.abc.def
        """
        exact: NotRequired[pulumi.Input[str]]
        """
        The input string must match exactly the string specified here.
        Examples:
        * abc only matches the value abc.
        """
        ignore_case: NotRequired[pulumi.Input[bool]]
        """
        If true, indicates the exact/prefix/suffix/contains matching should be case insensitive. For example, the matcher data will match both input string Data and data if set to true.
        """
        prefix: NotRequired[pulumi.Input[str]]
        """
        The input string must have the prefix specified here. Note: empty prefix is not allowed, please use regex instead.
        Examples:
        * abc matches the value abc.xyz
        """
        suffix: NotRequired[pulumi.Input[str]]
        """
        The input string must have the suffix specified here. Note: empty prefix is not allowed, please use regex instead.
        Examples:
        * abc matches the value xyz.abc
        """
elif False:
    AuthzPolicyHttpRuleToOperationPathArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AuthzPolicyHttpRuleToOperationPathArgs:
    def __init__(__self__, *,
                 contains: Optional[pulumi.Input[str]] = None,
                 exact: Optional[pulumi.Input[str]] = None,
                 ignore_case: Optional[pulumi.Input[bool]] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 suffix: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] contains: The input string must have the substring specified here. Note: empty contains match is not allowed, please use regex instead.
               Examples:
               * abc matches the value xyz.abc.def
        :param pulumi.Input[str] exact: The input string must match exactly the string specified here.
               Examples:
               * abc only matches the value abc.
        :param pulumi.Input[bool] ignore_case: If true, indicates the exact/prefix/suffix/contains matching should be case insensitive. For example, the matcher data will match both input string Data and data if set to true.
        :param pulumi.Input[str] prefix: The input string must have the prefix specified here. Note: empty prefix is not allowed, please use regex instead.
               Examples:
               * abc matches the value abc.xyz
        :param pulumi.Input[str] suffix: The input string must have the suffix specified here. Note: empty prefix is not allowed, please use regex instead.
               Examples:
               * abc matches the value xyz.abc
        """
        if contains is not None:
            pulumi.set(__self__, "contains", contains)
        if exact is not None:
            pulumi.set(__self__, "exact", exact)
        if ignore_case is not None:
            pulumi.set(__self__, "ignore_case", ignore_case)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if suffix is not None:
            pulumi.set(__self__, "suffix", suffix)

    @property
    @pulumi.getter
    def contains(self) -> Optional[pulumi.Input[str]]:
        """
        The input string must have the substring specified here. Note: empty contains match is not allowed, please use regex instead.
        Examples:
        * abc matches the value xyz.abc.def
        """
        return pulumi.get(self, "contains")

    @contains.setter
    def contains(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "contains", value)

    @property
    @pulumi.getter
    def exact(self) -> Optional[pulumi.Input[str]]:
        """
        The input string must match exactly the string specified here.
        Examples:
        * abc only matches the value abc.
        """
        return pulumi.get(self, "exact")

    @exact.setter
    def exact(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exact", value)

    @property
    @pulumi.getter(name="ignoreCase")
    def ignore_case(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, indicates the exact/prefix/suffix/contains matching should be case insensitive. For example, the matcher data will match both input string Data and data if set to true.
        """
        return pulumi.get(self, "ignore_case")

    @ignore_case.setter
    def ignore_case(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_case", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        """
        The input string must have the prefix specified here. Note: empty prefix is not allowed, please use regex instead.
        Examples:
        * abc matches the value abc.xyz
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter
    def suffix(self) -> Optional[pulumi.Input[str]]:
        """
        The input string must have the suffix specified here. Note: empty prefix is not allowed, please use regex instead.
        Examples:
        * abc matches the value xyz.abc
        """
        return pulumi.get(self, "suffix")

    @suffix.setter
    def suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "suffix", value)


if not MYPY:
    class AuthzPolicyTargetArgsDict(TypedDict):
        load_balancing_scheme: pulumi.Input[str]
        """
        All gateways and forwarding rules referenced by this policy and extensions must share the same load balancing scheme.
        For more information, refer to [Backend services overview](https://cloud.google.com/load-balancing/docs/backend-service).
        Possible values are: `INTERNAL_MANAGED`, `EXTERNAL_MANAGED`, `INTERNAL_SELF_MANAGED`.
        """
        resources: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        A list of references to the Forwarding Rules on which this policy will be applied.

        - - -
        """
elif False:
    AuthzPolicyTargetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AuthzPolicyTargetArgs:
    def __init__(__self__, *,
                 load_balancing_scheme: pulumi.Input[str],
                 resources: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] load_balancing_scheme: All gateways and forwarding rules referenced by this policy and extensions must share the same load balancing scheme.
               For more information, refer to [Backend services overview](https://cloud.google.com/load-balancing/docs/backend-service).
               Possible values are: `INTERNAL_MANAGED`, `EXTERNAL_MANAGED`, `INTERNAL_SELF_MANAGED`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] resources: A list of references to the Forwarding Rules on which this policy will be applied.
               
               - - -
        """
        pulumi.set(__self__, "load_balancing_scheme", load_balancing_scheme)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter(name="loadBalancingScheme")
    def load_balancing_scheme(self) -> pulumi.Input[str]:
        """
        All gateways and forwarding rules referenced by this policy and extensions must share the same load balancing scheme.
        For more information, refer to [Backend services overview](https://cloud.google.com/load-balancing/docs/backend-service).
        Possible values are: `INTERNAL_MANAGED`, `EXTERNAL_MANAGED`, `INTERNAL_SELF_MANAGED`.
        """
        return pulumi.get(self, "load_balancing_scheme")

    @load_balancing_scheme.setter
    def load_balancing_scheme(self, value: pulumi.Input[str]):
        pulumi.set(self, "load_balancing_scheme", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of references to the Forwarding Rules on which this policy will be applied.

        - - -
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "resources", value)


if not MYPY:
    class ClientTlsPolicyClientCertificateArgsDict(TypedDict):
        certificate_provider_instance: NotRequired[pulumi.Input['ClientTlsPolicyClientCertificateCertificateProviderInstanceArgsDict']]
        """
        The certificate provider instance specification that will be passed to the data plane, which will be used to load necessary credential information.
        Structure is documented below.
        """
        grpc_endpoint: NotRequired[pulumi.Input['ClientTlsPolicyClientCertificateGrpcEndpointArgsDict']]
        """
        gRPC specific configuration to access the gRPC server to obtain the cert and private key.
        Structure is documented below.
        """
elif False:
    ClientTlsPolicyClientCertificateArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClientTlsPolicyClientCertificateArgs:
    def __init__(__self__, *,
                 certificate_provider_instance: Optional[pulumi.Input['ClientTlsPolicyClientCertificateCertificateProviderInstanceArgs']] = None,
                 grpc_endpoint: Optional[pulumi.Input['ClientTlsPolicyClientCertificateGrpcEndpointArgs']] = None):
        """
        :param pulumi.Input['ClientTlsPolicyClientCertificateCertificateProviderInstanceArgs'] certificate_provider_instance: The certificate provider instance specification that will be passed to the data plane, which will be used to load necessary credential information.
               Structure is documented below.
        :param pulumi.Input['ClientTlsPolicyClientCertificateGrpcEndpointArgs'] grpc_endpoint: gRPC specific configuration to access the gRPC server to obtain the cert and private key.
               Structure is documented below.
        """
        if certificate_provider_instance is not None:
            pulumi.set(__self__, "certificate_provider_instance", certificate_provider_instance)
        if grpc_endpoint is not None:
            pulumi.set(__self__, "grpc_endpoint", grpc_endpoint)

    @property
    @pulumi.getter(name="certificateProviderInstance")
    def certificate_provider_instance(self) -> Optional[pulumi.Input['ClientTlsPolicyClientCertificateCertificateProviderInstanceArgs']]:
        """
        The certificate provider instance specification that will be passed to the data plane, which will be used to load necessary credential information.
        Structure is documented below.
        """
        return pulumi.get(self, "certificate_provider_instance")

    @certificate_provider_instance.setter
    def certificate_provider_instance(self, value: Optional[pulumi.Input['ClientTlsPolicyClientCertificateCertificateProviderInstanceArgs']]):
        pulumi.set(self, "certificate_provider_instance", value)

    @property
    @pulumi.getter(name="grpcEndpoint")
    def grpc_endpoint(self) -> Optional[pulumi.Input['ClientTlsPolicyClientCertificateGrpcEndpointArgs']]:
        """
        gRPC specific configuration to access the gRPC server to obtain the cert and private key.
        Structure is documented below.
        """
        return pulumi.get(self, "grpc_endpoint")

    @grpc_endpoint.setter
    def grpc_endpoint(self, value: Optional[pulumi.Input['ClientTlsPolicyClientCertificateGrpcEndpointArgs']]):
        pulumi.set(self, "grpc_endpoint", value)


if not MYPY:
    class ClientTlsPolicyClientCertificateCertificateProviderInstanceArgsDict(TypedDict):
        plugin_instance: pulumi.Input[str]
        """
        Plugin instance name, used to locate and load CertificateProvider instance configuration. Set to "google_cloud_private_spiffe" to use Certificate Authority Service certificate provider instance.
        """
elif False:
    ClientTlsPolicyClientCertificateCertificateProviderInstanceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClientTlsPolicyClientCertificateCertificateProviderInstanceArgs:
    def __init__(__self__, *,
                 plugin_instance: pulumi.Input[str]):
        """
        :param pulumi.Input[str] plugin_instance: Plugin instance name, used to locate and load CertificateProvider instance configuration. Set to "google_cloud_private_spiffe" to use Certificate Authority Service certificate provider instance.
        """
        pulumi.set(__self__, "plugin_instance", plugin_instance)

    @property
    @pulumi.getter(name="pluginInstance")
    def plugin_instance(self) -> pulumi.Input[str]:
        """
        Plugin instance name, used to locate and load CertificateProvider instance configuration. Set to "google_cloud_private_spiffe" to use Certificate Authority Service certificate provider instance.
        """
        return pulumi.get(self, "plugin_instance")

    @plugin_instance.setter
    def plugin_instance(self, value: pulumi.Input[str]):
        pulumi.set(self, "plugin_instance", value)


if not MYPY:
    class ClientTlsPolicyClientCertificateGrpcEndpointArgsDict(TypedDict):
        target_uri: pulumi.Input[str]
        """
        The target URI of the gRPC endpoint. Only UDS path is supported, and should start with "unix:".
        """
elif False:
    ClientTlsPolicyClientCertificateGrpcEndpointArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClientTlsPolicyClientCertificateGrpcEndpointArgs:
    def __init__(__self__, *,
                 target_uri: pulumi.Input[str]):
        """
        :param pulumi.Input[str] target_uri: The target URI of the gRPC endpoint. Only UDS path is supported, and should start with "unix:".
        """
        pulumi.set(__self__, "target_uri", target_uri)

    @property
    @pulumi.getter(name="targetUri")
    def target_uri(self) -> pulumi.Input[str]:
        """
        The target URI of the gRPC endpoint. Only UDS path is supported, and should start with "unix:".
        """
        return pulumi.get(self, "target_uri")

    @target_uri.setter
    def target_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_uri", value)


if not MYPY:
    class ClientTlsPolicyServerValidationCaArgsDict(TypedDict):
        certificate_provider_instance: NotRequired[pulumi.Input['ClientTlsPolicyServerValidationCaCertificateProviderInstanceArgsDict']]
        """
        The certificate provider instance specification that will be passed to the data plane, which will be used to load necessary credential information.
        Structure is documented below.
        """
        grpc_endpoint: NotRequired[pulumi.Input['ClientTlsPolicyServerValidationCaGrpcEndpointArgsDict']]
        """
        gRPC specific configuration to access the gRPC server to obtain the cert and private key.
        Structure is documented below.
        """
elif False:
    ClientTlsPolicyServerValidationCaArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClientTlsPolicyServerValidationCaArgs:
    def __init__(__self__, *,
                 certificate_provider_instance: Optional[pulumi.Input['ClientTlsPolicyServerValidationCaCertificateProviderInstanceArgs']] = None,
                 grpc_endpoint: Optional[pulumi.Input['ClientTlsPolicyServerValidationCaGrpcEndpointArgs']] = None):
        """
        :param pulumi.Input['ClientTlsPolicyServerValidationCaCertificateProviderInstanceArgs'] certificate_provider_instance: The certificate provider instance specification that will be passed to the data plane, which will be used to load necessary credential information.
               Structure is documented below.
        :param pulumi.Input['ClientTlsPolicyServerValidationCaGrpcEndpointArgs'] grpc_endpoint: gRPC specific configuration to access the gRPC server to obtain the cert and private key.
               Structure is documented below.
        """
        if certificate_provider_instance is not None:
            pulumi.set(__self__, "certificate_provider_instance", certificate_provider_instance)
        if grpc_endpoint is not None:
            pulumi.set(__self__, "grpc_endpoint", grpc_endpoint)

    @property
    @pulumi.getter(name="certificateProviderInstance")
    def certificate_provider_instance(self) -> Optional[pulumi.Input['ClientTlsPolicyServerValidationCaCertificateProviderInstanceArgs']]:
        """
        The certificate provider instance specification that will be passed to the data plane, which will be used to load necessary credential information.
        Structure is documented below.
        """
        return pulumi.get(self, "certificate_provider_instance")

    @certificate_provider_instance.setter
    def certificate_provider_instance(self, value: Optional[pulumi.Input['ClientTlsPolicyServerValidationCaCertificateProviderInstanceArgs']]):
        pulumi.set(self, "certificate_provider_instance", value)

    @property
    @pulumi.getter(name="grpcEndpoint")
    def grpc_endpoint(self) -> Optional[pulumi.Input['ClientTlsPolicyServerValidationCaGrpcEndpointArgs']]:
        """
        gRPC specific configuration to access the gRPC server to obtain the cert and private key.
        Structure is documented below.
        """
        return pulumi.get(self, "grpc_endpoint")

    @grpc_endpoint.setter
    def grpc_endpoint(self, value: Optional[pulumi.Input['ClientTlsPolicyServerValidationCaGrpcEndpointArgs']]):
        pulumi.set(self, "grpc_endpoint", value)


if not MYPY:
    class ClientTlsPolicyServerValidationCaCertificateProviderInstanceArgsDict(TypedDict):
        plugin_instance: pulumi.Input[str]
        """
        Plugin instance name, used to locate and load CertificateProvider instance configuration. Set to "google_cloud_private_spiffe" to use Certificate Authority Service certificate provider instance.
        """
elif False:
    ClientTlsPolicyServerValidationCaCertificateProviderInstanceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClientTlsPolicyServerValidationCaCertificateProviderInstanceArgs:
    def __init__(__self__, *,
                 plugin_instance: pulumi.Input[str]):
        """
        :param pulumi.Input[str] plugin_instance: Plugin instance name, used to locate and load CertificateProvider instance configuration. Set to "google_cloud_private_spiffe" to use Certificate Authority Service certificate provider instance.
        """
        pulumi.set(__self__, "plugin_instance", plugin_instance)

    @property
    @pulumi.getter(name="pluginInstance")
    def plugin_instance(self) -> pulumi.Input[str]:
        """
        Plugin instance name, used to locate and load CertificateProvider instance configuration. Set to "google_cloud_private_spiffe" to use Certificate Authority Service certificate provider instance.
        """
        return pulumi.get(self, "plugin_instance")

    @plugin_instance.setter
    def plugin_instance(self, value: pulumi.Input[str]):
        pulumi.set(self, "plugin_instance", value)


if not MYPY:
    class ClientTlsPolicyServerValidationCaGrpcEndpointArgsDict(TypedDict):
        target_uri: pulumi.Input[str]
        """
        The target URI of the gRPC endpoint. Only UDS path is supported, and should start with "unix:".
        """
elif False:
    ClientTlsPolicyServerValidationCaGrpcEndpointArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClientTlsPolicyServerValidationCaGrpcEndpointArgs:
    def __init__(__self__, *,
                 target_uri: pulumi.Input[str]):
        """
        :param pulumi.Input[str] target_uri: The target URI of the gRPC endpoint. Only UDS path is supported, and should start with "unix:".
        """
        pulumi.set(__self__, "target_uri", target_uri)

    @property
    @pulumi.getter(name="targetUri")
    def target_uri(self) -> pulumi.Input[str]:
        """
        The target URI of the gRPC endpoint. Only UDS path is supported, and should start with "unix:".
        """
        return pulumi.get(self, "target_uri")

    @target_uri.setter
    def target_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_uri", value)


if not MYPY:
    class InterceptDeploymentGroupConnectedEndpointGroupArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        (Output)
        Output only. A connected intercept endpoint group.
        """
elif False:
    InterceptDeploymentGroupConnectedEndpointGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InterceptDeploymentGroupConnectedEndpointGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: (Output)
               Output only. A connected intercept endpoint group.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        Output only. A connected intercept endpoint group.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class MirroringDeploymentGroupConnectedEndpointGroupArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        (Output)
        Output only. A connected mirroring endpoint group.
        """
elif False:
    MirroringDeploymentGroupConnectedEndpointGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MirroringDeploymentGroupConnectedEndpointGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: (Output)
               Output only. A connected mirroring endpoint group.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        Output only. A connected mirroring endpoint group.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class MirroringEndpointGroupAssociationLocationsDetailArgsDict(TypedDict):
        location: NotRequired[pulumi.Input[str]]
        """
        Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122. See documentation for resource type `networksecurity.googleapis.com/MirroringEndpointGroupAssociation`.


        - - -
        """
        state: NotRequired[pulumi.Input[str]]
        """
        (Output)
        Output only. The association state in this location.
        Possible values:
        STATE_UNSPECIFIED
        ACTIVE
        OUT_OF_SYNC
        """
elif False:
    MirroringEndpointGroupAssociationLocationsDetailArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MirroringEndpointGroupAssociationLocationsDetailArgs:
    def __init__(__self__, *,
                 location: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] location: Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122. See documentation for resource type `networksecurity.googleapis.com/MirroringEndpointGroupAssociation`.
               
               
               - - -
        :param pulumi.Input[str] state: (Output)
               Output only. The association state in this location.
               Possible values:
               STATE_UNSPECIFIED
               ACTIVE
               OUT_OF_SYNC
        """
        if location is not None:
            pulumi.set(__self__, "location", location)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        Resource ID segment making up resource `name`. It identifies the resource within its parent collection as described in https://google.aip.dev/122. See documentation for resource type `networksecurity.googleapis.com/MirroringEndpointGroupAssociation`.


        - - -
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        Output only. The association state in this location.
        Possible values:
        STATE_UNSPECIFIED
        ACTIVE
        OUT_OF_SYNC
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)


if not MYPY:
    class SecurityProfileThreatPreventionProfileArgsDict(TypedDict):
        severity_overrides: NotRequired[pulumi.Input[Sequence[pulumi.Input['SecurityProfileThreatPreventionProfileSeverityOverrideArgsDict']]]]
        """
        The configuration for overriding threats actions by severity match.
        Structure is documented below.
        """
        threat_overrides: NotRequired[pulumi.Input[Sequence[pulumi.Input['SecurityProfileThreatPreventionProfileThreatOverrideArgsDict']]]]
        """
        The configuration for overriding threats actions by threat id match.
        If a threat is matched both by configuration provided in severity overrides
        and threat overrides, the threat overrides action is applied.
        Structure is documented below.
        """
elif False:
    SecurityProfileThreatPreventionProfileArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SecurityProfileThreatPreventionProfileArgs:
    def __init__(__self__, *,
                 severity_overrides: Optional[pulumi.Input[Sequence[pulumi.Input['SecurityProfileThreatPreventionProfileSeverityOverrideArgs']]]] = None,
                 threat_overrides: Optional[pulumi.Input[Sequence[pulumi.Input['SecurityProfileThreatPreventionProfileThreatOverrideArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['SecurityProfileThreatPreventionProfileSeverityOverrideArgs']]] severity_overrides: The configuration for overriding threats actions by severity match.
               Structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['SecurityProfileThreatPreventionProfileThreatOverrideArgs']]] threat_overrides: The configuration for overriding threats actions by threat id match.
               If a threat is matched both by configuration provided in severity overrides
               and threat overrides, the threat overrides action is applied.
               Structure is documented below.
        """
        if severity_overrides is not None:
            pulumi.set(__self__, "severity_overrides", severity_overrides)
        if threat_overrides is not None:
            pulumi.set(__self__, "threat_overrides", threat_overrides)

    @property
    @pulumi.getter(name="severityOverrides")
    def severity_overrides(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SecurityProfileThreatPreventionProfileSeverityOverrideArgs']]]]:
        """
        The configuration for overriding threats actions by severity match.
        Structure is documented below.
        """
        return pulumi.get(self, "severity_overrides")

    @severity_overrides.setter
    def severity_overrides(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SecurityProfileThreatPreventionProfileSeverityOverrideArgs']]]]):
        pulumi.set(self, "severity_overrides", value)

    @property
    @pulumi.getter(name="threatOverrides")
    def threat_overrides(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SecurityProfileThreatPreventionProfileThreatOverrideArgs']]]]:
        """
        The configuration for overriding threats actions by threat id match.
        If a threat is matched both by configuration provided in severity overrides
        and threat overrides, the threat overrides action is applied.
        Structure is documented below.
        """
        return pulumi.get(self, "threat_overrides")

    @threat_overrides.setter
    def threat_overrides(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SecurityProfileThreatPreventionProfileThreatOverrideArgs']]]]):
        pulumi.set(self, "threat_overrides", value)


if not MYPY:
    class SecurityProfileThreatPreventionProfileSeverityOverrideArgsDict(TypedDict):
        action: pulumi.Input[str]
        """
        Threat action override.
        Possible values are: `ALERT`, `ALLOW`, `DEFAULT_ACTION`, `DENY`.
        """
        severity: pulumi.Input[str]
        """
        Severity level to match.
        Possible values are: `CRITICAL`, `HIGH`, `INFORMATIONAL`, `LOW`, `MEDIUM`.
        """
elif False:
    SecurityProfileThreatPreventionProfileSeverityOverrideArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SecurityProfileThreatPreventionProfileSeverityOverrideArgs:
    def __init__(__self__, *,
                 action: pulumi.Input[str],
                 severity: pulumi.Input[str]):
        """
        :param pulumi.Input[str] action: Threat action override.
               Possible values are: `ALERT`, `ALLOW`, `DEFAULT_ACTION`, `DENY`.
        :param pulumi.Input[str] severity: Severity level to match.
               Possible values are: `CRITICAL`, `HIGH`, `INFORMATIONAL`, `LOW`, `MEDIUM`.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "severity", severity)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input[str]:
        """
        Threat action override.
        Possible values are: `ALERT`, `ALLOW`, `DEFAULT_ACTION`, `DENY`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[str]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def severity(self) -> pulumi.Input[str]:
        """
        Severity level to match.
        Possible values are: `CRITICAL`, `HIGH`, `INFORMATIONAL`, `LOW`, `MEDIUM`.
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: pulumi.Input[str]):
        pulumi.set(self, "severity", value)


if not MYPY:
    class SecurityProfileThreatPreventionProfileThreatOverrideArgsDict(TypedDict):
        action: pulumi.Input[str]
        """
        Threat action.
        Possible values are: `ALERT`, `ALLOW`, `DEFAULT_ACTION`, `DENY`.
        """
        threat_id: pulumi.Input[str]
        """
        Vendor-specific ID of a threat to override.
        """
        type: NotRequired[pulumi.Input[str]]
        """
        (Output)
        Type of threat.
        """
elif False:
    SecurityProfileThreatPreventionProfileThreatOverrideArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SecurityProfileThreatPreventionProfileThreatOverrideArgs:
    def __init__(__self__, *,
                 action: pulumi.Input[str],
                 threat_id: pulumi.Input[str],
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Threat action.
               Possible values are: `ALERT`, `ALLOW`, `DEFAULT_ACTION`, `DENY`.
        :param pulumi.Input[str] threat_id: Vendor-specific ID of a threat to override.
        :param pulumi.Input[str] type: (Output)
               Type of threat.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "threat_id", threat_id)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input[str]:
        """
        Threat action.
        Possible values are: `ALERT`, `ALLOW`, `DEFAULT_ACTION`, `DENY`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[str]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="threatId")
    def threat_id(self) -> pulumi.Input[str]:
        """
        Vendor-specific ID of a threat to override.
        """
        return pulumi.get(self, "threat_id")

    @threat_id.setter
    def threat_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "threat_id", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        Type of threat.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class ServerTlsPolicyMtlsPolicyArgsDict(TypedDict):
        client_validation_cas: NotRequired[pulumi.Input[Sequence[pulumi.Input['ServerTlsPolicyMtlsPolicyClientValidationCaArgsDict']]]]
        """
        Required if the policy is to be used with Traffic Director. For external HTTPS load balancers it must be empty.
        Defines the mechanism to obtain the Certificate Authority certificate to validate the client certificate.
        Structure is documented below.
        """
        client_validation_mode: NotRequired[pulumi.Input[str]]
        """
        When the client presents an invalid certificate or no certificate to the load balancer, the clientValidationMode specifies how the client connection is handled.
        Required if the policy is to be used with the external HTTPS load balancing. For Traffic Director it must be empty.
        Possible values are: `CLIENT_VALIDATION_MODE_UNSPECIFIED`, `ALLOW_INVALID_OR_MISSING_CLIENT_CERT`, `REJECT_INVALID`.
        """
        client_validation_trust_config: NotRequired[pulumi.Input[str]]
        """
        Reference to the TrustConfig from certificatemanager.googleapis.com namespace.
        If specified, the chain validation will be performed against certificates configured in the given TrustConfig.
        Allowed only if the policy is to be used with external HTTPS load balancers.
        """
elif False:
    ServerTlsPolicyMtlsPolicyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServerTlsPolicyMtlsPolicyArgs:
    def __init__(__self__, *,
                 client_validation_cas: Optional[pulumi.Input[Sequence[pulumi.Input['ServerTlsPolicyMtlsPolicyClientValidationCaArgs']]]] = None,
                 client_validation_mode: Optional[pulumi.Input[str]] = None,
                 client_validation_trust_config: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ServerTlsPolicyMtlsPolicyClientValidationCaArgs']]] client_validation_cas: Required if the policy is to be used with Traffic Director. For external HTTPS load balancers it must be empty.
               Defines the mechanism to obtain the Certificate Authority certificate to validate the client certificate.
               Structure is documented below.
        :param pulumi.Input[str] client_validation_mode: When the client presents an invalid certificate or no certificate to the load balancer, the clientValidationMode specifies how the client connection is handled.
               Required if the policy is to be used with the external HTTPS load balancing. For Traffic Director it must be empty.
               Possible values are: `CLIENT_VALIDATION_MODE_UNSPECIFIED`, `ALLOW_INVALID_OR_MISSING_CLIENT_CERT`, `REJECT_INVALID`.
        :param pulumi.Input[str] client_validation_trust_config: Reference to the TrustConfig from certificatemanager.googleapis.com namespace.
               If specified, the chain validation will be performed against certificates configured in the given TrustConfig.
               Allowed only if the policy is to be used with external HTTPS load balancers.
        """
        if client_validation_cas is not None:
            pulumi.set(__self__, "client_validation_cas", client_validation_cas)
        if client_validation_mode is not None:
            pulumi.set(__self__, "client_validation_mode", client_validation_mode)
        if client_validation_trust_config is not None:
            pulumi.set(__self__, "client_validation_trust_config", client_validation_trust_config)

    @property
    @pulumi.getter(name="clientValidationCas")
    def client_validation_cas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServerTlsPolicyMtlsPolicyClientValidationCaArgs']]]]:
        """
        Required if the policy is to be used with Traffic Director. For external HTTPS load balancers it must be empty.
        Defines the mechanism to obtain the Certificate Authority certificate to validate the client certificate.
        Structure is documented below.
        """
        return pulumi.get(self, "client_validation_cas")

    @client_validation_cas.setter
    def client_validation_cas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServerTlsPolicyMtlsPolicyClientValidationCaArgs']]]]):
        pulumi.set(self, "client_validation_cas", value)

    @property
    @pulumi.getter(name="clientValidationMode")
    def client_validation_mode(self) -> Optional[pulumi.Input[str]]:
        """
        When the client presents an invalid certificate or no certificate to the load balancer, the clientValidationMode specifies how the client connection is handled.
        Required if the policy is to be used with the external HTTPS load balancing. For Traffic Director it must be empty.
        Possible values are: `CLIENT_VALIDATION_MODE_UNSPECIFIED`, `ALLOW_INVALID_OR_MISSING_CLIENT_CERT`, `REJECT_INVALID`.
        """
        return pulumi.get(self, "client_validation_mode")

    @client_validation_mode.setter
    def client_validation_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_validation_mode", value)

    @property
    @pulumi.getter(name="clientValidationTrustConfig")
    def client_validation_trust_config(self) -> Optional[pulumi.Input[str]]:
        """
        Reference to the TrustConfig from certificatemanager.googleapis.com namespace.
        If specified, the chain validation will be performed against certificates configured in the given TrustConfig.
        Allowed only if the policy is to be used with external HTTPS load balancers.
        """
        return pulumi.get(self, "client_validation_trust_config")

    @client_validation_trust_config.setter
    def client_validation_trust_config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_validation_trust_config", value)


if not MYPY:
    class ServerTlsPolicyMtlsPolicyClientValidationCaArgsDict(TypedDict):
        certificate_provider_instance: NotRequired[pulumi.Input['ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceArgsDict']]
        """
        Optional if policy is to be used with Traffic Director. For external HTTPS load balancer must be empty.
        Defines a mechanism to provision server identity (public and private keys). Cannot be combined with allowOpen as a permissive mode that allows both plain text and TLS is not supported.
        Structure is documented below.
        """
        grpc_endpoint: NotRequired[pulumi.Input['ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointArgsDict']]
        """
        gRPC specific configuration to access the gRPC server to obtain the cert and private key.
        Structure is documented below.
        """
elif False:
    ServerTlsPolicyMtlsPolicyClientValidationCaArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServerTlsPolicyMtlsPolicyClientValidationCaArgs:
    def __init__(__self__, *,
                 certificate_provider_instance: Optional[pulumi.Input['ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceArgs']] = None,
                 grpc_endpoint: Optional[pulumi.Input['ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointArgs']] = None):
        """
        :param pulumi.Input['ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceArgs'] certificate_provider_instance: Optional if policy is to be used with Traffic Director. For external HTTPS load balancer must be empty.
               Defines a mechanism to provision server identity (public and private keys). Cannot be combined with allowOpen as a permissive mode that allows both plain text and TLS is not supported.
               Structure is documented below.
        :param pulumi.Input['ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointArgs'] grpc_endpoint: gRPC specific configuration to access the gRPC server to obtain the cert and private key.
               Structure is documented below.
        """
        if certificate_provider_instance is not None:
            pulumi.set(__self__, "certificate_provider_instance", certificate_provider_instance)
        if grpc_endpoint is not None:
            pulumi.set(__self__, "grpc_endpoint", grpc_endpoint)

    @property
    @pulumi.getter(name="certificateProviderInstance")
    def certificate_provider_instance(self) -> Optional[pulumi.Input['ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceArgs']]:
        """
        Optional if policy is to be used with Traffic Director. For external HTTPS load balancer must be empty.
        Defines a mechanism to provision server identity (public and private keys). Cannot be combined with allowOpen as a permissive mode that allows both plain text and TLS is not supported.
        Structure is documented below.
        """
        return pulumi.get(self, "certificate_provider_instance")

    @certificate_provider_instance.setter
    def certificate_provider_instance(self, value: Optional[pulumi.Input['ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceArgs']]):
        pulumi.set(self, "certificate_provider_instance", value)

    @property
    @pulumi.getter(name="grpcEndpoint")
    def grpc_endpoint(self) -> Optional[pulumi.Input['ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointArgs']]:
        """
        gRPC specific configuration to access the gRPC server to obtain the cert and private key.
        Structure is documented below.
        """
        return pulumi.get(self, "grpc_endpoint")

    @grpc_endpoint.setter
    def grpc_endpoint(self, value: Optional[pulumi.Input['ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointArgs']]):
        pulumi.set(self, "grpc_endpoint", value)


if not MYPY:
    class ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceArgsDict(TypedDict):
        plugin_instance: pulumi.Input[str]
        """
        Plugin instance name, used to locate and load CertificateProvider instance configuration. Set to "google_cloud_private_spiffe" to use Certificate Authority Service certificate provider instance.
        """
elif False:
    ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstanceArgs:
    def __init__(__self__, *,
                 plugin_instance: pulumi.Input[str]):
        """
        :param pulumi.Input[str] plugin_instance: Plugin instance name, used to locate and load CertificateProvider instance configuration. Set to "google_cloud_private_spiffe" to use Certificate Authority Service certificate provider instance.
        """
        pulumi.set(__self__, "plugin_instance", plugin_instance)

    @property
    @pulumi.getter(name="pluginInstance")
    def plugin_instance(self) -> pulumi.Input[str]:
        """
        Plugin instance name, used to locate and load CertificateProvider instance configuration. Set to "google_cloud_private_spiffe" to use Certificate Authority Service certificate provider instance.
        """
        return pulumi.get(self, "plugin_instance")

    @plugin_instance.setter
    def plugin_instance(self, value: pulumi.Input[str]):
        pulumi.set(self, "plugin_instance", value)


if not MYPY:
    class ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointArgsDict(TypedDict):
        target_uri: pulumi.Input[str]
        """
        The target URI of the gRPC endpoint. Only UDS path is supported, and should start with "unix:".
        """
elif False:
    ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointArgs:
    def __init__(__self__, *,
                 target_uri: pulumi.Input[str]):
        """
        :param pulumi.Input[str] target_uri: The target URI of the gRPC endpoint. Only UDS path is supported, and should start with "unix:".
        """
        pulumi.set(__self__, "target_uri", target_uri)

    @property
    @pulumi.getter(name="targetUri")
    def target_uri(self) -> pulumi.Input[str]:
        """
        The target URI of the gRPC endpoint. Only UDS path is supported, and should start with "unix:".
        """
        return pulumi.get(self, "target_uri")

    @target_uri.setter
    def target_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_uri", value)


if not MYPY:
    class ServerTlsPolicyServerCertificateArgsDict(TypedDict):
        certificate_provider_instance: NotRequired[pulumi.Input['ServerTlsPolicyServerCertificateCertificateProviderInstanceArgsDict']]
        """
        Optional if policy is to be used with Traffic Director. For external HTTPS load balancer must be empty.
        Defines a mechanism to provision server identity (public and private keys). Cannot be combined with allowOpen as a permissive mode that allows both plain text and TLS is not supported.
        Structure is documented below.
        """
        grpc_endpoint: NotRequired[pulumi.Input['ServerTlsPolicyServerCertificateGrpcEndpointArgsDict']]
        """
        gRPC specific configuration to access the gRPC server to obtain the cert and private key.
        Structure is documented below.
        """
elif False:
    ServerTlsPolicyServerCertificateArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServerTlsPolicyServerCertificateArgs:
    def __init__(__self__, *,
                 certificate_provider_instance: Optional[pulumi.Input['ServerTlsPolicyServerCertificateCertificateProviderInstanceArgs']] = None,
                 grpc_endpoint: Optional[pulumi.Input['ServerTlsPolicyServerCertificateGrpcEndpointArgs']] = None):
        """
        :param pulumi.Input['ServerTlsPolicyServerCertificateCertificateProviderInstanceArgs'] certificate_provider_instance: Optional if policy is to be used with Traffic Director. For external HTTPS load balancer must be empty.
               Defines a mechanism to provision server identity (public and private keys). Cannot be combined with allowOpen as a permissive mode that allows both plain text and TLS is not supported.
               Structure is documented below.
        :param pulumi.Input['ServerTlsPolicyServerCertificateGrpcEndpointArgs'] grpc_endpoint: gRPC specific configuration to access the gRPC server to obtain the cert and private key.
               Structure is documented below.
        """
        if certificate_provider_instance is not None:
            pulumi.set(__self__, "certificate_provider_instance", certificate_provider_instance)
        if grpc_endpoint is not None:
            pulumi.set(__self__, "grpc_endpoint", grpc_endpoint)

    @property
    @pulumi.getter(name="certificateProviderInstance")
    def certificate_provider_instance(self) -> Optional[pulumi.Input['ServerTlsPolicyServerCertificateCertificateProviderInstanceArgs']]:
        """
        Optional if policy is to be used with Traffic Director. For external HTTPS load balancer must be empty.
        Defines a mechanism to provision server identity (public and private keys). Cannot be combined with allowOpen as a permissive mode that allows both plain text and TLS is not supported.
        Structure is documented below.
        """
        return pulumi.get(self, "certificate_provider_instance")

    @certificate_provider_instance.setter
    def certificate_provider_instance(self, value: Optional[pulumi.Input['ServerTlsPolicyServerCertificateCertificateProviderInstanceArgs']]):
        pulumi.set(self, "certificate_provider_instance", value)

    @property
    @pulumi.getter(name="grpcEndpoint")
    def grpc_endpoint(self) -> Optional[pulumi.Input['ServerTlsPolicyServerCertificateGrpcEndpointArgs']]:
        """
        gRPC specific configuration to access the gRPC server to obtain the cert and private key.
        Structure is documented below.
        """
        return pulumi.get(self, "grpc_endpoint")

    @grpc_endpoint.setter
    def grpc_endpoint(self, value: Optional[pulumi.Input['ServerTlsPolicyServerCertificateGrpcEndpointArgs']]):
        pulumi.set(self, "grpc_endpoint", value)


if not MYPY:
    class ServerTlsPolicyServerCertificateCertificateProviderInstanceArgsDict(TypedDict):
        plugin_instance: pulumi.Input[str]
        """
        Plugin instance name, used to locate and load CertificateProvider instance configuration. Set to "google_cloud_private_spiffe" to use Certificate Authority Service certificate provider instance.
        """
elif False:
    ServerTlsPolicyServerCertificateCertificateProviderInstanceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServerTlsPolicyServerCertificateCertificateProviderInstanceArgs:
    def __init__(__self__, *,
                 plugin_instance: pulumi.Input[str]):
        """
        :param pulumi.Input[str] plugin_instance: Plugin instance name, used to locate and load CertificateProvider instance configuration. Set to "google_cloud_private_spiffe" to use Certificate Authority Service certificate provider instance.
        """
        pulumi.set(__self__, "plugin_instance", plugin_instance)

    @property
    @pulumi.getter(name="pluginInstance")
    def plugin_instance(self) -> pulumi.Input[str]:
        """
        Plugin instance name, used to locate and load CertificateProvider instance configuration. Set to "google_cloud_private_spiffe" to use Certificate Authority Service certificate provider instance.
        """
        return pulumi.get(self, "plugin_instance")

    @plugin_instance.setter
    def plugin_instance(self, value: pulumi.Input[str]):
        pulumi.set(self, "plugin_instance", value)


if not MYPY:
    class ServerTlsPolicyServerCertificateGrpcEndpointArgsDict(TypedDict):
        target_uri: pulumi.Input[str]
        """
        The target URI of the gRPC endpoint. Only UDS path is supported, and should start with "unix:".
        """
elif False:
    ServerTlsPolicyServerCertificateGrpcEndpointArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServerTlsPolicyServerCertificateGrpcEndpointArgs:
    def __init__(__self__, *,
                 target_uri: pulumi.Input[str]):
        """
        :param pulumi.Input[str] target_uri: The target URI of the gRPC endpoint. Only UDS path is supported, and should start with "unix:".
        """
        pulumi.set(__self__, "target_uri", target_uri)

    @property
    @pulumi.getter(name="targetUri")
    def target_uri(self) -> pulumi.Input[str]:
        """
        The target URI of the gRPC endpoint. Only UDS path is supported, and should start with "unix:".
        """
        return pulumi.get(self, "target_uri")

    @target_uri.setter
    def target_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_uri", value)


