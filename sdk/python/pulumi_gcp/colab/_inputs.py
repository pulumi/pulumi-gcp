# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'NotebookExecutionDataformRepositorySourceArgs',
    'NotebookExecutionDataformRepositorySourceArgsDict',
    'NotebookExecutionDirectNotebookSourceArgs',
    'NotebookExecutionDirectNotebookSourceArgsDict',
    'NotebookExecutionGcsNotebookSourceArgs',
    'NotebookExecutionGcsNotebookSourceArgsDict',
    'RuntimeNotebookRuntimeTemplateRefArgs',
    'RuntimeNotebookRuntimeTemplateRefArgsDict',
    'RuntimeTemplateDataPersistentDiskSpecArgs',
    'RuntimeTemplateDataPersistentDiskSpecArgsDict',
    'RuntimeTemplateEncryptionSpecArgs',
    'RuntimeTemplateEncryptionSpecArgsDict',
    'RuntimeTemplateEucConfigArgs',
    'RuntimeTemplateEucConfigArgsDict',
    'RuntimeTemplateIamBindingConditionArgs',
    'RuntimeTemplateIamBindingConditionArgsDict',
    'RuntimeTemplateIamMemberConditionArgs',
    'RuntimeTemplateIamMemberConditionArgsDict',
    'RuntimeTemplateIdleShutdownConfigArgs',
    'RuntimeTemplateIdleShutdownConfigArgsDict',
    'RuntimeTemplateMachineSpecArgs',
    'RuntimeTemplateMachineSpecArgsDict',
    'RuntimeTemplateNetworkSpecArgs',
    'RuntimeTemplateNetworkSpecArgsDict',
    'RuntimeTemplateShieldedVmConfigArgs',
    'RuntimeTemplateShieldedVmConfigArgsDict',
    'RuntimeTemplateSoftwareConfigArgs',
    'RuntimeTemplateSoftwareConfigArgsDict',
    'RuntimeTemplateSoftwareConfigEnvArgs',
    'RuntimeTemplateSoftwareConfigEnvArgsDict',
    'RuntimeTemplateSoftwareConfigPostStartupScriptConfigArgs',
    'RuntimeTemplateSoftwareConfigPostStartupScriptConfigArgsDict',
    'ScheduleCreateNotebookExecutionJobRequestArgs',
    'ScheduleCreateNotebookExecutionJobRequestArgsDict',
    'ScheduleCreateNotebookExecutionJobRequestNotebookExecutionJobArgs',
    'ScheduleCreateNotebookExecutionJobRequestNotebookExecutionJobArgsDict',
    'ScheduleCreateNotebookExecutionJobRequestNotebookExecutionJobDataformRepositorySourceArgs',
    'ScheduleCreateNotebookExecutionJobRequestNotebookExecutionJobDataformRepositorySourceArgsDict',
    'ScheduleCreateNotebookExecutionJobRequestNotebookExecutionJobGcsNotebookSourceArgs',
    'ScheduleCreateNotebookExecutionJobRequestNotebookExecutionJobGcsNotebookSourceArgsDict',
]

MYPY = False

if not MYPY:
    class NotebookExecutionDataformRepositorySourceArgsDict(TypedDict):
        dataform_repository_resource_name: pulumi.Input[str]
        """
        The resource name of the Dataform Repository.
        """
        commit_sha: NotRequired[pulumi.Input[str]]
        """
        The commit SHA to read repository with. If unset, the file will be read at HEAD.
        """
elif False:
    NotebookExecutionDataformRepositorySourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NotebookExecutionDataformRepositorySourceArgs:
    def __init__(__self__, *,
                 dataform_repository_resource_name: pulumi.Input[str],
                 commit_sha: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] dataform_repository_resource_name: The resource name of the Dataform Repository.
        :param pulumi.Input[str] commit_sha: The commit SHA to read repository with. If unset, the file will be read at HEAD.
        """
        pulumi.set(__self__, "dataform_repository_resource_name", dataform_repository_resource_name)
        if commit_sha is not None:
            pulumi.set(__self__, "commit_sha", commit_sha)

    @property
    @pulumi.getter(name="dataformRepositoryResourceName")
    def dataform_repository_resource_name(self) -> pulumi.Input[str]:
        """
        The resource name of the Dataform Repository.
        """
        return pulumi.get(self, "dataform_repository_resource_name")

    @dataform_repository_resource_name.setter
    def dataform_repository_resource_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "dataform_repository_resource_name", value)

    @property
    @pulumi.getter(name="commitSha")
    def commit_sha(self) -> Optional[pulumi.Input[str]]:
        """
        The commit SHA to read repository with. If unset, the file will be read at HEAD.
        """
        return pulumi.get(self, "commit_sha")

    @commit_sha.setter
    def commit_sha(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "commit_sha", value)


if not MYPY:
    class NotebookExecutionDirectNotebookSourceArgsDict(TypedDict):
        content: pulumi.Input[str]
        """
        The base64-encoded contents of the input notebook file.
        """
elif False:
    NotebookExecutionDirectNotebookSourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NotebookExecutionDirectNotebookSourceArgs:
    def __init__(__self__, *,
                 content: pulumi.Input[str]):
        """
        :param pulumi.Input[str] content: The base64-encoded contents of the input notebook file.
        """
        pulumi.set(__self__, "content", content)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Input[str]:
        """
        The base64-encoded contents of the input notebook file.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input[str]):
        pulumi.set(self, "content", value)


if not MYPY:
    class NotebookExecutionGcsNotebookSourceArgsDict(TypedDict):
        uri: pulumi.Input[str]
        """
        The Cloud Storage uri pointing to the ipynb file.
        """
        generation: NotRequired[pulumi.Input[str]]
        """
        The version of the Cloud Storage object to read. If unset, the current version of the object is read. See https://cloud.google.com/storage/docs/metadata#generation-number.
        """
elif False:
    NotebookExecutionGcsNotebookSourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NotebookExecutionGcsNotebookSourceArgs:
    def __init__(__self__, *,
                 uri: pulumi.Input[str],
                 generation: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] uri: The Cloud Storage uri pointing to the ipynb file.
        :param pulumi.Input[str] generation: The version of the Cloud Storage object to read. If unset, the current version of the object is read. See https://cloud.google.com/storage/docs/metadata#generation-number.
        """
        pulumi.set(__self__, "uri", uri)
        if generation is not None:
            pulumi.set(__self__, "generation", generation)

    @property
    @pulumi.getter
    def uri(self) -> pulumi.Input[str]:
        """
        The Cloud Storage uri pointing to the ipynb file.
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "uri", value)

    @property
    @pulumi.getter
    def generation(self) -> Optional[pulumi.Input[str]]:
        """
        The version of the Cloud Storage object to read. If unset, the current version of the object is read. See https://cloud.google.com/storage/docs/metadata#generation-number.
        """
        return pulumi.get(self, "generation")

    @generation.setter
    def generation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "generation", value)


if not MYPY:
    class RuntimeNotebookRuntimeTemplateRefArgsDict(TypedDict):
        notebook_runtime_template: pulumi.Input[str]
        """
        The resource name of the NotebookRuntimeTemplate based on which a NotebookRuntime will be created.
        """
elif False:
    RuntimeNotebookRuntimeTemplateRefArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RuntimeNotebookRuntimeTemplateRefArgs:
    def __init__(__self__, *,
                 notebook_runtime_template: pulumi.Input[str]):
        """
        :param pulumi.Input[str] notebook_runtime_template: The resource name of the NotebookRuntimeTemplate based on which a NotebookRuntime will be created.
        """
        pulumi.set(__self__, "notebook_runtime_template", notebook_runtime_template)

    @property
    @pulumi.getter(name="notebookRuntimeTemplate")
    def notebook_runtime_template(self) -> pulumi.Input[str]:
        """
        The resource name of the NotebookRuntimeTemplate based on which a NotebookRuntime will be created.
        """
        return pulumi.get(self, "notebook_runtime_template")

    @notebook_runtime_template.setter
    def notebook_runtime_template(self, value: pulumi.Input[str]):
        pulumi.set(self, "notebook_runtime_template", value)


if not MYPY:
    class RuntimeTemplateDataPersistentDiskSpecArgsDict(TypedDict):
        disk_size_gb: NotRequired[pulumi.Input[str]]
        """
        The disk size of the runtime in GB. If specified, the diskType must also be specified. The minimum size is 10GB and the maximum is 65536GB.
        """
        disk_type: NotRequired[pulumi.Input[str]]
        """
        The type of the persistent disk.
        """
elif False:
    RuntimeTemplateDataPersistentDiskSpecArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RuntimeTemplateDataPersistentDiskSpecArgs:
    def __init__(__self__, *,
                 disk_size_gb: Optional[pulumi.Input[str]] = None,
                 disk_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] disk_size_gb: The disk size of the runtime in GB. If specified, the diskType must also be specified. The minimum size is 10GB and the maximum is 65536GB.
        :param pulumi.Input[str] disk_type: The type of the persistent disk.
        """
        if disk_size_gb is not None:
            pulumi.set(__self__, "disk_size_gb", disk_size_gb)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)

    @property
    @pulumi.getter(name="diskSizeGb")
    def disk_size_gb(self) -> Optional[pulumi.Input[str]]:
        """
        The disk size of the runtime in GB. If specified, the diskType must also be specified. The minimum size is 10GB and the maximum is 65536GB.
        """
        return pulumi.get(self, "disk_size_gb")

    @disk_size_gb.setter
    def disk_size_gb(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_size_gb", value)

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of the persistent disk.
        """
        return pulumi.get(self, "disk_type")

    @disk_type.setter
    def disk_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_type", value)


if not MYPY:
    class RuntimeTemplateEncryptionSpecArgsDict(TypedDict):
        kms_key_name: NotRequired[pulumi.Input[str]]
        """
        The Cloud KMS encryption key (customer-managed encryption key) used to protect the runtime.
        """
elif False:
    RuntimeTemplateEncryptionSpecArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RuntimeTemplateEncryptionSpecArgs:
    def __init__(__self__, *,
                 kms_key_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] kms_key_name: The Cloud KMS encryption key (customer-managed encryption key) used to protect the runtime.
        """
        if kms_key_name is not None:
            pulumi.set(__self__, "kms_key_name", kms_key_name)

    @property
    @pulumi.getter(name="kmsKeyName")
    def kms_key_name(self) -> Optional[pulumi.Input[str]]:
        """
        The Cloud KMS encryption key (customer-managed encryption key) used to protect the runtime.
        """
        return pulumi.get(self, "kms_key_name")

    @kms_key_name.setter
    def kms_key_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_name", value)


if not MYPY:
    class RuntimeTemplateEucConfigArgsDict(TypedDict):
        euc_disabled: NotRequired[pulumi.Input[bool]]
        """
        Disable end user credential access for the runtime.
        """
elif False:
    RuntimeTemplateEucConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RuntimeTemplateEucConfigArgs:
    def __init__(__self__, *,
                 euc_disabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] euc_disabled: Disable end user credential access for the runtime.
        """
        if euc_disabled is not None:
            pulumi.set(__self__, "euc_disabled", euc_disabled)

    @property
    @pulumi.getter(name="eucDisabled")
    def euc_disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Disable end user credential access for the runtime.
        """
        return pulumi.get(self, "euc_disabled")

    @euc_disabled.setter
    def euc_disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "euc_disabled", value)


if not MYPY:
    class RuntimeTemplateIamBindingConditionArgsDict(TypedDict):
        expression: pulumi.Input[str]
        title: pulumi.Input[str]
        description: NotRequired[pulumi.Input[str]]
elif False:
    RuntimeTemplateIamBindingConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RuntimeTemplateIamBindingConditionArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 title: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "title", title)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)


if not MYPY:
    class RuntimeTemplateIamMemberConditionArgsDict(TypedDict):
        expression: pulumi.Input[str]
        title: pulumi.Input[str]
        description: NotRequired[pulumi.Input[str]]
elif False:
    RuntimeTemplateIamMemberConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RuntimeTemplateIamMemberConditionArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 title: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "title", title)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)


if not MYPY:
    class RuntimeTemplateIdleShutdownConfigArgsDict(TypedDict):
        idle_timeout: NotRequired[pulumi.Input[str]]
        """
        The duration after which the runtime is automatically shut down. An input of 0s disables the idle shutdown feature, and a valid range is [10m, 24h].
        """
elif False:
    RuntimeTemplateIdleShutdownConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RuntimeTemplateIdleShutdownConfigArgs:
    def __init__(__self__, *,
                 idle_timeout: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] idle_timeout: The duration after which the runtime is automatically shut down. An input of 0s disables the idle shutdown feature, and a valid range is [10m, 24h].
        """
        if idle_timeout is not None:
            pulumi.set(__self__, "idle_timeout", idle_timeout)

    @property
    @pulumi.getter(name="idleTimeout")
    def idle_timeout(self) -> Optional[pulumi.Input[str]]:
        """
        The duration after which the runtime is automatically shut down. An input of 0s disables the idle shutdown feature, and a valid range is [10m, 24h].
        """
        return pulumi.get(self, "idle_timeout")

    @idle_timeout.setter
    def idle_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "idle_timeout", value)


if not MYPY:
    class RuntimeTemplateMachineSpecArgsDict(TypedDict):
        accelerator_count: NotRequired[pulumi.Input[int]]
        """
        The number of accelerators used by the runtime.
        """
        accelerator_type: NotRequired[pulumi.Input[str]]
        """
        The type of hardware accelerator used by the runtime. If specified, acceleratorCount must also be specified.
        """
        machine_type: NotRequired[pulumi.Input[str]]
        """
        The Compute Engine machine type selected for the runtime.
        """
elif False:
    RuntimeTemplateMachineSpecArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RuntimeTemplateMachineSpecArgs:
    def __init__(__self__, *,
                 accelerator_count: Optional[pulumi.Input[int]] = None,
                 accelerator_type: Optional[pulumi.Input[str]] = None,
                 machine_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] accelerator_count: The number of accelerators used by the runtime.
        :param pulumi.Input[str] accelerator_type: The type of hardware accelerator used by the runtime. If specified, acceleratorCount must also be specified.
        :param pulumi.Input[str] machine_type: The Compute Engine machine type selected for the runtime.
        """
        if accelerator_count is not None:
            pulumi.set(__self__, "accelerator_count", accelerator_count)
        if accelerator_type is not None:
            pulumi.set(__self__, "accelerator_type", accelerator_type)
        if machine_type is not None:
            pulumi.set(__self__, "machine_type", machine_type)

    @property
    @pulumi.getter(name="acceleratorCount")
    def accelerator_count(self) -> Optional[pulumi.Input[int]]:
        """
        The number of accelerators used by the runtime.
        """
        return pulumi.get(self, "accelerator_count")

    @accelerator_count.setter
    def accelerator_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "accelerator_count", value)

    @property
    @pulumi.getter(name="acceleratorType")
    def accelerator_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of hardware accelerator used by the runtime. If specified, acceleratorCount must also be specified.
        """
        return pulumi.get(self, "accelerator_type")

    @accelerator_type.setter
    def accelerator_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "accelerator_type", value)

    @property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> Optional[pulumi.Input[str]]:
        """
        The Compute Engine machine type selected for the runtime.
        """
        return pulumi.get(self, "machine_type")

    @machine_type.setter
    def machine_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "machine_type", value)


if not MYPY:
    class RuntimeTemplateNetworkSpecArgsDict(TypedDict):
        enable_internet_access: NotRequired[pulumi.Input[bool]]
        """
        Enable public internet access for the runtime.
        """
        network: NotRequired[pulumi.Input[str]]
        """
        The name of the VPC that this runtime is in.
        """
        subnetwork: NotRequired[pulumi.Input[str]]
        """
        The name of the subnetwork that this runtime is in.
        """
elif False:
    RuntimeTemplateNetworkSpecArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RuntimeTemplateNetworkSpecArgs:
    def __init__(__self__, *,
                 enable_internet_access: Optional[pulumi.Input[bool]] = None,
                 network: Optional[pulumi.Input[str]] = None,
                 subnetwork: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] enable_internet_access: Enable public internet access for the runtime.
        :param pulumi.Input[str] network: The name of the VPC that this runtime is in.
        :param pulumi.Input[str] subnetwork: The name of the subnetwork that this runtime is in.
        """
        if enable_internet_access is not None:
            pulumi.set(__self__, "enable_internet_access", enable_internet_access)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if subnetwork is not None:
            pulumi.set(__self__, "subnetwork", subnetwork)

    @property
    @pulumi.getter(name="enableInternetAccess")
    def enable_internet_access(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable public internet access for the runtime.
        """
        return pulumi.get(self, "enable_internet_access")

    @enable_internet_access.setter
    def enable_internet_access(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_internet_access", value)

    @property
    @pulumi.getter
    def network(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the VPC that this runtime is in.
        """
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter
    def subnetwork(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the subnetwork that this runtime is in.
        """
        return pulumi.get(self, "subnetwork")

    @subnetwork.setter
    def subnetwork(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnetwork", value)


if not MYPY:
    class RuntimeTemplateShieldedVmConfigArgsDict(TypedDict):
        enable_secure_boot: NotRequired[pulumi.Input[bool]]
        """
        Enables secure boot for the runtime.
        """
elif False:
    RuntimeTemplateShieldedVmConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RuntimeTemplateShieldedVmConfigArgs:
    def __init__(__self__, *,
                 enable_secure_boot: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enable_secure_boot: Enables secure boot for the runtime.
        """
        if enable_secure_boot is not None:
            pulumi.set(__self__, "enable_secure_boot", enable_secure_boot)

    @property
    @pulumi.getter(name="enableSecureBoot")
    def enable_secure_boot(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables secure boot for the runtime.
        """
        return pulumi.get(self, "enable_secure_boot")

    @enable_secure_boot.setter
    def enable_secure_boot(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_secure_boot", value)


if not MYPY:
    class RuntimeTemplateSoftwareConfigArgsDict(TypedDict):
        envs: NotRequired[pulumi.Input[Sequence[pulumi.Input['RuntimeTemplateSoftwareConfigEnvArgsDict']]]]
        """
        Environment variables to be passed to the container.
        Structure is documented below.
        """
        post_startup_script_config: NotRequired[pulumi.Input['RuntimeTemplateSoftwareConfigPostStartupScriptConfigArgsDict']]
        """
        Post startup script config.
        Structure is documented below.
        """
elif False:
    RuntimeTemplateSoftwareConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RuntimeTemplateSoftwareConfigArgs:
    def __init__(__self__, *,
                 envs: Optional[pulumi.Input[Sequence[pulumi.Input['RuntimeTemplateSoftwareConfigEnvArgs']]]] = None,
                 post_startup_script_config: Optional[pulumi.Input['RuntimeTemplateSoftwareConfigPostStartupScriptConfigArgs']] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['RuntimeTemplateSoftwareConfigEnvArgs']]] envs: Environment variables to be passed to the container.
               Structure is documented below.
        :param pulumi.Input['RuntimeTemplateSoftwareConfigPostStartupScriptConfigArgs'] post_startup_script_config: Post startup script config.
               Structure is documented below.
        """
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if post_startup_script_config is not None:
            pulumi.set(__self__, "post_startup_script_config", post_startup_script_config)

    @property
    @pulumi.getter
    def envs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RuntimeTemplateSoftwareConfigEnvArgs']]]]:
        """
        Environment variables to be passed to the container.
        Structure is documented below.
        """
        return pulumi.get(self, "envs")

    @envs.setter
    def envs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RuntimeTemplateSoftwareConfigEnvArgs']]]]):
        pulumi.set(self, "envs", value)

    @property
    @pulumi.getter(name="postStartupScriptConfig")
    def post_startup_script_config(self) -> Optional[pulumi.Input['RuntimeTemplateSoftwareConfigPostStartupScriptConfigArgs']]:
        """
        Post startup script config.
        Structure is documented below.
        """
        return pulumi.get(self, "post_startup_script_config")

    @post_startup_script_config.setter
    def post_startup_script_config(self, value: Optional[pulumi.Input['RuntimeTemplateSoftwareConfigPostStartupScriptConfigArgs']]):
        pulumi.set(self, "post_startup_script_config", value)


if not MYPY:
    class RuntimeTemplateSoftwareConfigEnvArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the environment variable. Must be a valid C identifier.
        """
        value: NotRequired[pulumi.Input[str]]
        """
        Variables that reference a $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not.
        """
elif False:
    RuntimeTemplateSoftwareConfigEnvArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RuntimeTemplateSoftwareConfigEnvArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Name of the environment variable. Must be a valid C identifier.
        :param pulumi.Input[str] value: Variables that reference a $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the environment variable. Must be a valid C identifier.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Variables that reference a $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class RuntimeTemplateSoftwareConfigPostStartupScriptConfigArgsDict(TypedDict):
        post_startup_script: NotRequired[pulumi.Input[str]]
        """
        Post startup script to run after runtime is started.
        """
        post_startup_script_behavior: NotRequired[pulumi.Input[str]]
        """
        Post startup script behavior that defines download and execution behavior.
        Possible values are: `RUN_ONCE`, `RUN_EVERY_START`, `DOWNLOAD_AND_RUN_EVERY_START`.
        """
        post_startup_script_url: NotRequired[pulumi.Input[str]]
        """
        Post startup script url to download. Example: https://bucket/script.sh.
        """
elif False:
    RuntimeTemplateSoftwareConfigPostStartupScriptConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RuntimeTemplateSoftwareConfigPostStartupScriptConfigArgs:
    def __init__(__self__, *,
                 post_startup_script: Optional[pulumi.Input[str]] = None,
                 post_startup_script_behavior: Optional[pulumi.Input[str]] = None,
                 post_startup_script_url: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] post_startup_script: Post startup script to run after runtime is started.
        :param pulumi.Input[str] post_startup_script_behavior: Post startup script behavior that defines download and execution behavior.
               Possible values are: `RUN_ONCE`, `RUN_EVERY_START`, `DOWNLOAD_AND_RUN_EVERY_START`.
        :param pulumi.Input[str] post_startup_script_url: Post startup script url to download. Example: https://bucket/script.sh.
        """
        if post_startup_script is not None:
            pulumi.set(__self__, "post_startup_script", post_startup_script)
        if post_startup_script_behavior is not None:
            pulumi.set(__self__, "post_startup_script_behavior", post_startup_script_behavior)
        if post_startup_script_url is not None:
            pulumi.set(__self__, "post_startup_script_url", post_startup_script_url)

    @property
    @pulumi.getter(name="postStartupScript")
    def post_startup_script(self) -> Optional[pulumi.Input[str]]:
        """
        Post startup script to run after runtime is started.
        """
        return pulumi.get(self, "post_startup_script")

    @post_startup_script.setter
    def post_startup_script(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "post_startup_script", value)

    @property
    @pulumi.getter(name="postStartupScriptBehavior")
    def post_startup_script_behavior(self) -> Optional[pulumi.Input[str]]:
        """
        Post startup script behavior that defines download and execution behavior.
        Possible values are: `RUN_ONCE`, `RUN_EVERY_START`, `DOWNLOAD_AND_RUN_EVERY_START`.
        """
        return pulumi.get(self, "post_startup_script_behavior")

    @post_startup_script_behavior.setter
    def post_startup_script_behavior(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "post_startup_script_behavior", value)

    @property
    @pulumi.getter(name="postStartupScriptUrl")
    def post_startup_script_url(self) -> Optional[pulumi.Input[str]]:
        """
        Post startup script url to download. Example: https://bucket/script.sh.
        """
        return pulumi.get(self, "post_startup_script_url")

    @post_startup_script_url.setter
    def post_startup_script_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "post_startup_script_url", value)


if not MYPY:
    class ScheduleCreateNotebookExecutionJobRequestArgsDict(TypedDict):
        notebook_execution_job: pulumi.Input['ScheduleCreateNotebookExecutionJobRequestNotebookExecutionJobArgsDict']
        """
        The NotebookExecutionJob to create.
        Structure is documented below.
        """
elif False:
    ScheduleCreateNotebookExecutionJobRequestArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ScheduleCreateNotebookExecutionJobRequestArgs:
    def __init__(__self__, *,
                 notebook_execution_job: pulumi.Input['ScheduleCreateNotebookExecutionJobRequestNotebookExecutionJobArgs']):
        """
        :param pulumi.Input['ScheduleCreateNotebookExecutionJobRequestNotebookExecutionJobArgs'] notebook_execution_job: The NotebookExecutionJob to create.
               Structure is documented below.
        """
        pulumi.set(__self__, "notebook_execution_job", notebook_execution_job)

    @property
    @pulumi.getter(name="notebookExecutionJob")
    def notebook_execution_job(self) -> pulumi.Input['ScheduleCreateNotebookExecutionJobRequestNotebookExecutionJobArgs']:
        """
        The NotebookExecutionJob to create.
        Structure is documented below.
        """
        return pulumi.get(self, "notebook_execution_job")

    @notebook_execution_job.setter
    def notebook_execution_job(self, value: pulumi.Input['ScheduleCreateNotebookExecutionJobRequestNotebookExecutionJobArgs']):
        pulumi.set(self, "notebook_execution_job", value)


if not MYPY:
    class ScheduleCreateNotebookExecutionJobRequestNotebookExecutionJobArgsDict(TypedDict):
        display_name: pulumi.Input[str]
        """
        Required. The display name of the Notebook Execution.
        """
        gcs_output_uri: pulumi.Input[str]
        """
        The Cloud Storage location to upload the result to. Format:`gs://bucket-name`
        """
        notebook_runtime_template_resource_name: pulumi.Input[str]
        """
        The NotebookRuntimeTemplate to source compute configuration from.
        """
        dataform_repository_source: NotRequired[pulumi.Input['ScheduleCreateNotebookExecutionJobRequestNotebookExecutionJobDataformRepositorySourceArgsDict']]
        """
        The Dataform Repository containing the input notebook.
        Structure is documented below.
        """
        execution_timeout: NotRequired[pulumi.Input[str]]
        """
        Max running time of the execution job in seconds (default 86400s / 24 hrs). A duration in seconds with up to nine fractional digits, ending with "s". Example: "3.5s".
        """
        execution_user: NotRequired[pulumi.Input[str]]
        """
        The user email to run the execution as.
        """
        gcs_notebook_source: NotRequired[pulumi.Input['ScheduleCreateNotebookExecutionJobRequestNotebookExecutionJobGcsNotebookSourceArgsDict']]
        """
        The Cloud Storage uri for the input notebook.
        Structure is documented below.
        """
        service_account: NotRequired[pulumi.Input[str]]
        """
        The service account to run the execution as.
        """
elif False:
    ScheduleCreateNotebookExecutionJobRequestNotebookExecutionJobArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ScheduleCreateNotebookExecutionJobRequestNotebookExecutionJobArgs:
    def __init__(__self__, *,
                 display_name: pulumi.Input[str],
                 gcs_output_uri: pulumi.Input[str],
                 notebook_runtime_template_resource_name: pulumi.Input[str],
                 dataform_repository_source: Optional[pulumi.Input['ScheduleCreateNotebookExecutionJobRequestNotebookExecutionJobDataformRepositorySourceArgs']] = None,
                 execution_timeout: Optional[pulumi.Input[str]] = None,
                 execution_user: Optional[pulumi.Input[str]] = None,
                 gcs_notebook_source: Optional[pulumi.Input['ScheduleCreateNotebookExecutionJobRequestNotebookExecutionJobGcsNotebookSourceArgs']] = None,
                 service_account: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] display_name: Required. The display name of the Notebook Execution.
        :param pulumi.Input[str] gcs_output_uri: The Cloud Storage location to upload the result to. Format:`gs://bucket-name`
        :param pulumi.Input[str] notebook_runtime_template_resource_name: The NotebookRuntimeTemplate to source compute configuration from.
        :param pulumi.Input['ScheduleCreateNotebookExecutionJobRequestNotebookExecutionJobDataformRepositorySourceArgs'] dataform_repository_source: The Dataform Repository containing the input notebook.
               Structure is documented below.
        :param pulumi.Input[str] execution_timeout: Max running time of the execution job in seconds (default 86400s / 24 hrs). A duration in seconds with up to nine fractional digits, ending with "s". Example: "3.5s".
        :param pulumi.Input[str] execution_user: The user email to run the execution as.
        :param pulumi.Input['ScheduleCreateNotebookExecutionJobRequestNotebookExecutionJobGcsNotebookSourceArgs'] gcs_notebook_source: The Cloud Storage uri for the input notebook.
               Structure is documented below.
        :param pulumi.Input[str] service_account: The service account to run the execution as.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "gcs_output_uri", gcs_output_uri)
        pulumi.set(__self__, "notebook_runtime_template_resource_name", notebook_runtime_template_resource_name)
        if dataform_repository_source is not None:
            pulumi.set(__self__, "dataform_repository_source", dataform_repository_source)
        if execution_timeout is not None:
            pulumi.set(__self__, "execution_timeout", execution_timeout)
        if execution_user is not None:
            pulumi.set(__self__, "execution_user", execution_user)
        if gcs_notebook_source is not None:
            pulumi.set(__self__, "gcs_notebook_source", gcs_notebook_source)
        if service_account is not None:
            pulumi.set(__self__, "service_account", service_account)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Input[str]:
        """
        Required. The display name of the Notebook Execution.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="gcsOutputUri")
    def gcs_output_uri(self) -> pulumi.Input[str]:
        """
        The Cloud Storage location to upload the result to. Format:`gs://bucket-name`
        """
        return pulumi.get(self, "gcs_output_uri")

    @gcs_output_uri.setter
    def gcs_output_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "gcs_output_uri", value)

    @property
    @pulumi.getter(name="notebookRuntimeTemplateResourceName")
    def notebook_runtime_template_resource_name(self) -> pulumi.Input[str]:
        """
        The NotebookRuntimeTemplate to source compute configuration from.
        """
        return pulumi.get(self, "notebook_runtime_template_resource_name")

    @notebook_runtime_template_resource_name.setter
    def notebook_runtime_template_resource_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "notebook_runtime_template_resource_name", value)

    @property
    @pulumi.getter(name="dataformRepositorySource")
    def dataform_repository_source(self) -> Optional[pulumi.Input['ScheduleCreateNotebookExecutionJobRequestNotebookExecutionJobDataformRepositorySourceArgs']]:
        """
        The Dataform Repository containing the input notebook.
        Structure is documented below.
        """
        return pulumi.get(self, "dataform_repository_source")

    @dataform_repository_source.setter
    def dataform_repository_source(self, value: Optional[pulumi.Input['ScheduleCreateNotebookExecutionJobRequestNotebookExecutionJobDataformRepositorySourceArgs']]):
        pulumi.set(self, "dataform_repository_source", value)

    @property
    @pulumi.getter(name="executionTimeout")
    def execution_timeout(self) -> Optional[pulumi.Input[str]]:
        """
        Max running time of the execution job in seconds (default 86400s / 24 hrs). A duration in seconds with up to nine fractional digits, ending with "s". Example: "3.5s".
        """
        return pulumi.get(self, "execution_timeout")

    @execution_timeout.setter
    def execution_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "execution_timeout", value)

    @property
    @pulumi.getter(name="executionUser")
    def execution_user(self) -> Optional[pulumi.Input[str]]:
        """
        The user email to run the execution as.
        """
        return pulumi.get(self, "execution_user")

    @execution_user.setter
    def execution_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "execution_user", value)

    @property
    @pulumi.getter(name="gcsNotebookSource")
    def gcs_notebook_source(self) -> Optional[pulumi.Input['ScheduleCreateNotebookExecutionJobRequestNotebookExecutionJobGcsNotebookSourceArgs']]:
        """
        The Cloud Storage uri for the input notebook.
        Structure is documented below.
        """
        return pulumi.get(self, "gcs_notebook_source")

    @gcs_notebook_source.setter
    def gcs_notebook_source(self, value: Optional[pulumi.Input['ScheduleCreateNotebookExecutionJobRequestNotebookExecutionJobGcsNotebookSourceArgs']]):
        pulumi.set(self, "gcs_notebook_source", value)

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> Optional[pulumi.Input[str]]:
        """
        The service account to run the execution as.
        """
        return pulumi.get(self, "service_account")

    @service_account.setter
    def service_account(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account", value)


if not MYPY:
    class ScheduleCreateNotebookExecutionJobRequestNotebookExecutionJobDataformRepositorySourceArgsDict(TypedDict):
        dataform_repository_resource_name: pulumi.Input[str]
        """
        The resource name of the Dataform Repository.
        """
        commit_sha: NotRequired[pulumi.Input[str]]
        """
        The commit SHA to read repository with. If unset, the file will be read at HEAD.
        """
elif False:
    ScheduleCreateNotebookExecutionJobRequestNotebookExecutionJobDataformRepositorySourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ScheduleCreateNotebookExecutionJobRequestNotebookExecutionJobDataformRepositorySourceArgs:
    def __init__(__self__, *,
                 dataform_repository_resource_name: pulumi.Input[str],
                 commit_sha: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] dataform_repository_resource_name: The resource name of the Dataform Repository.
        :param pulumi.Input[str] commit_sha: The commit SHA to read repository with. If unset, the file will be read at HEAD.
        """
        pulumi.set(__self__, "dataform_repository_resource_name", dataform_repository_resource_name)
        if commit_sha is not None:
            pulumi.set(__self__, "commit_sha", commit_sha)

    @property
    @pulumi.getter(name="dataformRepositoryResourceName")
    def dataform_repository_resource_name(self) -> pulumi.Input[str]:
        """
        The resource name of the Dataform Repository.
        """
        return pulumi.get(self, "dataform_repository_resource_name")

    @dataform_repository_resource_name.setter
    def dataform_repository_resource_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "dataform_repository_resource_name", value)

    @property
    @pulumi.getter(name="commitSha")
    def commit_sha(self) -> Optional[pulumi.Input[str]]:
        """
        The commit SHA to read repository with. If unset, the file will be read at HEAD.
        """
        return pulumi.get(self, "commit_sha")

    @commit_sha.setter
    def commit_sha(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "commit_sha", value)


if not MYPY:
    class ScheduleCreateNotebookExecutionJobRequestNotebookExecutionJobGcsNotebookSourceArgsDict(TypedDict):
        uri: pulumi.Input[str]
        """
        The Cloud Storage uri pointing to the ipynb file. Format: gs://bucket/notebook_file.ipynb
        """
        generation: NotRequired[pulumi.Input[str]]
        """
        The version of the Cloud Storage object to read. If unset, the current version of the object is read. See https://cloud.google.com/storage/docs/metadata#generation-number.

        - - -
        """
elif False:
    ScheduleCreateNotebookExecutionJobRequestNotebookExecutionJobGcsNotebookSourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ScheduleCreateNotebookExecutionJobRequestNotebookExecutionJobGcsNotebookSourceArgs:
    def __init__(__self__, *,
                 uri: pulumi.Input[str],
                 generation: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] uri: The Cloud Storage uri pointing to the ipynb file. Format: gs://bucket/notebook_file.ipynb
        :param pulumi.Input[str] generation: The version of the Cloud Storage object to read. If unset, the current version of the object is read. See https://cloud.google.com/storage/docs/metadata#generation-number.
               
               - - -
        """
        pulumi.set(__self__, "uri", uri)
        if generation is not None:
            pulumi.set(__self__, "generation", generation)

    @property
    @pulumi.getter
    def uri(self) -> pulumi.Input[str]:
        """
        The Cloud Storage uri pointing to the ipynb file. Format: gs://bucket/notebook_file.ipynb
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "uri", value)

    @property
    @pulumi.getter
    def generation(self) -> Optional[pulumi.Input[str]]:
        """
        The version of the Cloud Storage object to read. If unset, the current version of the object is read. See https://cloud.google.com/storage/docs/metadata#generation-number.

        - - -
        """
        return pulumi.get(self, "generation")

    @generation.setter
    def generation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "generation", value)


