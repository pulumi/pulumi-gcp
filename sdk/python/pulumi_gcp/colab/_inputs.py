# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'RuntimeNotebookRuntimeTemplateRefArgs',
    'RuntimeNotebookRuntimeTemplateRefArgsDict',
    'RuntimeTemplateDataPersistentDiskSpecArgs',
    'RuntimeTemplateDataPersistentDiskSpecArgsDict',
    'RuntimeTemplateEncryptionSpecArgs',
    'RuntimeTemplateEncryptionSpecArgsDict',
    'RuntimeTemplateEucConfigArgs',
    'RuntimeTemplateEucConfigArgsDict',
    'RuntimeTemplateIamBindingConditionArgs',
    'RuntimeTemplateIamBindingConditionArgsDict',
    'RuntimeTemplateIamMemberConditionArgs',
    'RuntimeTemplateIamMemberConditionArgsDict',
    'RuntimeTemplateIdleShutdownConfigArgs',
    'RuntimeTemplateIdleShutdownConfigArgsDict',
    'RuntimeTemplateMachineSpecArgs',
    'RuntimeTemplateMachineSpecArgsDict',
    'RuntimeTemplateNetworkSpecArgs',
    'RuntimeTemplateNetworkSpecArgsDict',
    'RuntimeTemplateShieldedVmConfigArgs',
    'RuntimeTemplateShieldedVmConfigArgsDict',
]

MYPY = False

if not MYPY:
    class RuntimeNotebookRuntimeTemplateRefArgsDict(TypedDict):
        notebook_runtime_template: pulumi.Input[str]
        """
        The resource name of the NotebookRuntimeTemplate based on which a NotebookRuntime will be created.
        """
elif False:
    RuntimeNotebookRuntimeTemplateRefArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RuntimeNotebookRuntimeTemplateRefArgs:
    def __init__(__self__, *,
                 notebook_runtime_template: pulumi.Input[str]):
        """
        :param pulumi.Input[str] notebook_runtime_template: The resource name of the NotebookRuntimeTemplate based on which a NotebookRuntime will be created.
        """
        pulumi.set(__self__, "notebook_runtime_template", notebook_runtime_template)

    @property
    @pulumi.getter(name="notebookRuntimeTemplate")
    def notebook_runtime_template(self) -> pulumi.Input[str]:
        """
        The resource name of the NotebookRuntimeTemplate based on which a NotebookRuntime will be created.
        """
        return pulumi.get(self, "notebook_runtime_template")

    @notebook_runtime_template.setter
    def notebook_runtime_template(self, value: pulumi.Input[str]):
        pulumi.set(self, "notebook_runtime_template", value)


if not MYPY:
    class RuntimeTemplateDataPersistentDiskSpecArgsDict(TypedDict):
        disk_size_gb: NotRequired[pulumi.Input[str]]
        """
        The disk size of the runtime in GB. If specified, the diskType must also be specified. The minimum size is 10GB and the maximum is 65536GB.
        """
        disk_type: NotRequired[pulumi.Input[str]]
        """
        The type of the persistent disk.
        """
elif False:
    RuntimeTemplateDataPersistentDiskSpecArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RuntimeTemplateDataPersistentDiskSpecArgs:
    def __init__(__self__, *,
                 disk_size_gb: Optional[pulumi.Input[str]] = None,
                 disk_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] disk_size_gb: The disk size of the runtime in GB. If specified, the diskType must also be specified. The minimum size is 10GB and the maximum is 65536GB.
        :param pulumi.Input[str] disk_type: The type of the persistent disk.
        """
        if disk_size_gb is not None:
            pulumi.set(__self__, "disk_size_gb", disk_size_gb)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)

    @property
    @pulumi.getter(name="diskSizeGb")
    def disk_size_gb(self) -> Optional[pulumi.Input[str]]:
        """
        The disk size of the runtime in GB. If specified, the diskType must also be specified. The minimum size is 10GB and the maximum is 65536GB.
        """
        return pulumi.get(self, "disk_size_gb")

    @disk_size_gb.setter
    def disk_size_gb(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_size_gb", value)

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of the persistent disk.
        """
        return pulumi.get(self, "disk_type")

    @disk_type.setter
    def disk_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_type", value)


if not MYPY:
    class RuntimeTemplateEncryptionSpecArgsDict(TypedDict):
        kms_key_name: NotRequired[pulumi.Input[str]]
        """
        The Cloud KMS encryption key (customer-managed encryption key) used to protect the runtime.
        """
elif False:
    RuntimeTemplateEncryptionSpecArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RuntimeTemplateEncryptionSpecArgs:
    def __init__(__self__, *,
                 kms_key_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] kms_key_name: The Cloud KMS encryption key (customer-managed encryption key) used to protect the runtime.
        """
        if kms_key_name is not None:
            pulumi.set(__self__, "kms_key_name", kms_key_name)

    @property
    @pulumi.getter(name="kmsKeyName")
    def kms_key_name(self) -> Optional[pulumi.Input[str]]:
        """
        The Cloud KMS encryption key (customer-managed encryption key) used to protect the runtime.
        """
        return pulumi.get(self, "kms_key_name")

    @kms_key_name.setter
    def kms_key_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_name", value)


if not MYPY:
    class RuntimeTemplateEucConfigArgsDict(TypedDict):
        euc_disabled: NotRequired[pulumi.Input[bool]]
        """
        Disable end user credential access for the runtime.
        """
elif False:
    RuntimeTemplateEucConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RuntimeTemplateEucConfigArgs:
    def __init__(__self__, *,
                 euc_disabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] euc_disabled: Disable end user credential access for the runtime.
        """
        if euc_disabled is not None:
            pulumi.set(__self__, "euc_disabled", euc_disabled)

    @property
    @pulumi.getter(name="eucDisabled")
    def euc_disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Disable end user credential access for the runtime.
        """
        return pulumi.get(self, "euc_disabled")

    @euc_disabled.setter
    def euc_disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "euc_disabled", value)


if not MYPY:
    class RuntimeTemplateIamBindingConditionArgsDict(TypedDict):
        expression: pulumi.Input[str]
        title: pulumi.Input[str]
        description: NotRequired[pulumi.Input[str]]
elif False:
    RuntimeTemplateIamBindingConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RuntimeTemplateIamBindingConditionArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 title: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "title", title)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)


if not MYPY:
    class RuntimeTemplateIamMemberConditionArgsDict(TypedDict):
        expression: pulumi.Input[str]
        title: pulumi.Input[str]
        description: NotRequired[pulumi.Input[str]]
elif False:
    RuntimeTemplateIamMemberConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RuntimeTemplateIamMemberConditionArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 title: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "title", title)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)


if not MYPY:
    class RuntimeTemplateIdleShutdownConfigArgsDict(TypedDict):
        idle_timeout: NotRequired[pulumi.Input[str]]
        """
        The duration after which the runtime is automatically shut down. An input of 0s disables the idle shutdown feature, and a valid range is [10m, 24h].
        """
elif False:
    RuntimeTemplateIdleShutdownConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RuntimeTemplateIdleShutdownConfigArgs:
    def __init__(__self__, *,
                 idle_timeout: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] idle_timeout: The duration after which the runtime is automatically shut down. An input of 0s disables the idle shutdown feature, and a valid range is [10m, 24h].
        """
        if idle_timeout is not None:
            pulumi.set(__self__, "idle_timeout", idle_timeout)

    @property
    @pulumi.getter(name="idleTimeout")
    def idle_timeout(self) -> Optional[pulumi.Input[str]]:
        """
        The duration after which the runtime is automatically shut down. An input of 0s disables the idle shutdown feature, and a valid range is [10m, 24h].
        """
        return pulumi.get(self, "idle_timeout")

    @idle_timeout.setter
    def idle_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "idle_timeout", value)


if not MYPY:
    class RuntimeTemplateMachineSpecArgsDict(TypedDict):
        accelerator_count: NotRequired[pulumi.Input[int]]
        """
        The number of accelerators used by the runtime.
        """
        accelerator_type: NotRequired[pulumi.Input[str]]
        """
        The type of hardware accelerator used by the runtime. If specified, acceleratorCount must also be specified.
        """
        machine_type: NotRequired[pulumi.Input[str]]
        """
        The Compute Engine machine type selected for the runtime.
        """
elif False:
    RuntimeTemplateMachineSpecArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RuntimeTemplateMachineSpecArgs:
    def __init__(__self__, *,
                 accelerator_count: Optional[pulumi.Input[int]] = None,
                 accelerator_type: Optional[pulumi.Input[str]] = None,
                 machine_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] accelerator_count: The number of accelerators used by the runtime.
        :param pulumi.Input[str] accelerator_type: The type of hardware accelerator used by the runtime. If specified, acceleratorCount must also be specified.
        :param pulumi.Input[str] machine_type: The Compute Engine machine type selected for the runtime.
        """
        if accelerator_count is not None:
            pulumi.set(__self__, "accelerator_count", accelerator_count)
        if accelerator_type is not None:
            pulumi.set(__self__, "accelerator_type", accelerator_type)
        if machine_type is not None:
            pulumi.set(__self__, "machine_type", machine_type)

    @property
    @pulumi.getter(name="acceleratorCount")
    def accelerator_count(self) -> Optional[pulumi.Input[int]]:
        """
        The number of accelerators used by the runtime.
        """
        return pulumi.get(self, "accelerator_count")

    @accelerator_count.setter
    def accelerator_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "accelerator_count", value)

    @property
    @pulumi.getter(name="acceleratorType")
    def accelerator_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of hardware accelerator used by the runtime. If specified, acceleratorCount must also be specified.
        """
        return pulumi.get(self, "accelerator_type")

    @accelerator_type.setter
    def accelerator_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "accelerator_type", value)

    @property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> Optional[pulumi.Input[str]]:
        """
        The Compute Engine machine type selected for the runtime.
        """
        return pulumi.get(self, "machine_type")

    @machine_type.setter
    def machine_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "machine_type", value)


if not MYPY:
    class RuntimeTemplateNetworkSpecArgsDict(TypedDict):
        enable_internet_access: NotRequired[pulumi.Input[bool]]
        """
        Enable public internet access for the runtime.
        """
        network: NotRequired[pulumi.Input[str]]
        """
        The name of the VPC that this runtime is in.
        """
        subnetwork: NotRequired[pulumi.Input[str]]
        """
        The name of the subnetwork that this runtime is in.
        """
elif False:
    RuntimeTemplateNetworkSpecArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RuntimeTemplateNetworkSpecArgs:
    def __init__(__self__, *,
                 enable_internet_access: Optional[pulumi.Input[bool]] = None,
                 network: Optional[pulumi.Input[str]] = None,
                 subnetwork: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] enable_internet_access: Enable public internet access for the runtime.
        :param pulumi.Input[str] network: The name of the VPC that this runtime is in.
        :param pulumi.Input[str] subnetwork: The name of the subnetwork that this runtime is in.
        """
        if enable_internet_access is not None:
            pulumi.set(__self__, "enable_internet_access", enable_internet_access)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if subnetwork is not None:
            pulumi.set(__self__, "subnetwork", subnetwork)

    @property
    @pulumi.getter(name="enableInternetAccess")
    def enable_internet_access(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable public internet access for the runtime.
        """
        return pulumi.get(self, "enable_internet_access")

    @enable_internet_access.setter
    def enable_internet_access(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_internet_access", value)

    @property
    @pulumi.getter
    def network(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the VPC that this runtime is in.
        """
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter
    def subnetwork(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the subnetwork that this runtime is in.
        """
        return pulumi.get(self, "subnetwork")

    @subnetwork.setter
    def subnetwork(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnetwork", value)


if not MYPY:
    class RuntimeTemplateShieldedVmConfigArgsDict(TypedDict):
        enable_secure_boot: NotRequired[pulumi.Input[bool]]
        """
        Enables secure boot for the runtime.
        """
elif False:
    RuntimeTemplateShieldedVmConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RuntimeTemplateShieldedVmConfigArgs:
    def __init__(__self__, *,
                 enable_secure_boot: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enable_secure_boot: Enables secure boot for the runtime.
        """
        if enable_secure_boot is not None:
            pulumi.set(__self__, "enable_secure_boot", enable_secure_boot)

    @property
    @pulumi.getter(name="enableSecureBoot")
    def enable_secure_boot(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables secure boot for the runtime.
        """
        return pulumi.get(self, "enable_secure_boot")

    @enable_secure_boot.setter
    def enable_secure_boot(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_secure_boot", value)


