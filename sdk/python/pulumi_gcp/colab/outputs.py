# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'RuntimeTemplateDataPersistentDiskSpec',
    'RuntimeTemplateEncryptionSpec',
    'RuntimeTemplateEucConfig',
    'RuntimeTemplateIdleShutdownConfig',
    'RuntimeTemplateMachineSpec',
    'RuntimeTemplateNetworkSpec',
    'RuntimeTemplateShieldedVmConfig',
]

@pulumi.output_type
class RuntimeTemplateDataPersistentDiskSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskSizeGb":
            suggest = "disk_size_gb"
        elif key == "diskType":
            suggest = "disk_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RuntimeTemplateDataPersistentDiskSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RuntimeTemplateDataPersistentDiskSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RuntimeTemplateDataPersistentDiskSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disk_size_gb: Optional[str] = None,
                 disk_type: Optional[str] = None):
        """
        :param str disk_size_gb: The disk size of the runtime in GB. If specified, the diskType must also be specified. The minimum size is 10GB and the maximum is 65536GB.
        :param str disk_type: The type of the persistent disk.
        """
        if disk_size_gb is not None:
            pulumi.set(__self__, "disk_size_gb", disk_size_gb)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)

    @property
    @pulumi.getter(name="diskSizeGb")
    def disk_size_gb(self) -> Optional[str]:
        """
        The disk size of the runtime in GB. If specified, the diskType must also be specified. The minimum size is 10GB and the maximum is 65536GB.
        """
        return pulumi.get(self, "disk_size_gb")

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[str]:
        """
        The type of the persistent disk.
        """
        return pulumi.get(self, "disk_type")


@pulumi.output_type
class RuntimeTemplateEncryptionSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "kmsKeyName":
            suggest = "kms_key_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RuntimeTemplateEncryptionSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RuntimeTemplateEncryptionSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RuntimeTemplateEncryptionSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 kms_key_name: Optional[str] = None):
        """
        :param str kms_key_name: The Cloud KMS encryption key (customer-managed encryption key) used to protect the runtime.
        """
        if kms_key_name is not None:
            pulumi.set(__self__, "kms_key_name", kms_key_name)

    @property
    @pulumi.getter(name="kmsKeyName")
    def kms_key_name(self) -> Optional[str]:
        """
        The Cloud KMS encryption key (customer-managed encryption key) used to protect the runtime.
        """
        return pulumi.get(self, "kms_key_name")


@pulumi.output_type
class RuntimeTemplateEucConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "eucDisabled":
            suggest = "euc_disabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RuntimeTemplateEucConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RuntimeTemplateEucConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RuntimeTemplateEucConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 euc_disabled: Optional[bool] = None):
        """
        :param bool euc_disabled: Disable end user credential access for the runtime.
        """
        if euc_disabled is not None:
            pulumi.set(__self__, "euc_disabled", euc_disabled)

    @property
    @pulumi.getter(name="eucDisabled")
    def euc_disabled(self) -> Optional[bool]:
        """
        Disable end user credential access for the runtime.
        """
        return pulumi.get(self, "euc_disabled")


@pulumi.output_type
class RuntimeTemplateIdleShutdownConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "idleTimeout":
            suggest = "idle_timeout"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RuntimeTemplateIdleShutdownConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RuntimeTemplateIdleShutdownConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RuntimeTemplateIdleShutdownConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 idle_timeout: Optional[str] = None):
        """
        :param str idle_timeout: The duration after which the runtime is automatically shut down. An input of 0s disables the idle shutdown feature, and a valid range is [10m, 24h].
        """
        if idle_timeout is not None:
            pulumi.set(__self__, "idle_timeout", idle_timeout)

    @property
    @pulumi.getter(name="idleTimeout")
    def idle_timeout(self) -> Optional[str]:
        """
        The duration after which the runtime is automatically shut down. An input of 0s disables the idle shutdown feature, and a valid range is [10m, 24h].
        """
        return pulumi.get(self, "idle_timeout")


@pulumi.output_type
class RuntimeTemplateMachineSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "acceleratorCount":
            suggest = "accelerator_count"
        elif key == "acceleratorType":
            suggest = "accelerator_type"
        elif key == "machineType":
            suggest = "machine_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RuntimeTemplateMachineSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RuntimeTemplateMachineSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RuntimeTemplateMachineSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 accelerator_count: Optional[int] = None,
                 accelerator_type: Optional[str] = None,
                 machine_type: Optional[str] = None):
        """
        :param int accelerator_count: The number of accelerators used by the runtime.
        :param str accelerator_type: The type of hardware accelerator used by the runtime. If specified, acceleratorCount must also be specified.
        :param str machine_type: The Compute Engine machine type selected for the runtime.
        """
        if accelerator_count is not None:
            pulumi.set(__self__, "accelerator_count", accelerator_count)
        if accelerator_type is not None:
            pulumi.set(__self__, "accelerator_type", accelerator_type)
        if machine_type is not None:
            pulumi.set(__self__, "machine_type", machine_type)

    @property
    @pulumi.getter(name="acceleratorCount")
    def accelerator_count(self) -> Optional[int]:
        """
        The number of accelerators used by the runtime.
        """
        return pulumi.get(self, "accelerator_count")

    @property
    @pulumi.getter(name="acceleratorType")
    def accelerator_type(self) -> Optional[str]:
        """
        The type of hardware accelerator used by the runtime. If specified, acceleratorCount must also be specified.
        """
        return pulumi.get(self, "accelerator_type")

    @property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> Optional[str]:
        """
        The Compute Engine machine type selected for the runtime.
        """
        return pulumi.get(self, "machine_type")


@pulumi.output_type
class RuntimeTemplateNetworkSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableInternetAccess":
            suggest = "enable_internet_access"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RuntimeTemplateNetworkSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RuntimeTemplateNetworkSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RuntimeTemplateNetworkSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable_internet_access: Optional[bool] = None,
                 network: Optional[str] = None,
                 subnetwork: Optional[str] = None):
        """
        :param bool enable_internet_access: Enable public internet access for the runtime.
        :param str network: The name of the VPC that this runtime is in.
        :param str subnetwork: The name of the subnetwork that this runtime is in.
        """
        if enable_internet_access is not None:
            pulumi.set(__self__, "enable_internet_access", enable_internet_access)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if subnetwork is not None:
            pulumi.set(__self__, "subnetwork", subnetwork)

    @property
    @pulumi.getter(name="enableInternetAccess")
    def enable_internet_access(self) -> Optional[bool]:
        """
        Enable public internet access for the runtime.
        """
        return pulumi.get(self, "enable_internet_access")

    @property
    @pulumi.getter
    def network(self) -> Optional[str]:
        """
        The name of the VPC that this runtime is in.
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter
    def subnetwork(self) -> Optional[str]:
        """
        The name of the subnetwork that this runtime is in.
        """
        return pulumi.get(self, "subnetwork")


@pulumi.output_type
class RuntimeTemplateShieldedVmConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableSecureBoot":
            suggest = "enable_secure_boot"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RuntimeTemplateShieldedVmConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RuntimeTemplateShieldedVmConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RuntimeTemplateShieldedVmConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable_secure_boot: Optional[bool] = None):
        """
        :param bool enable_secure_boot: Enables secure boot for the runtime.
        """
        if enable_secure_boot is not None:
            pulumi.set(__self__, "enable_secure_boot", enable_secure_boot)

    @property
    @pulumi.getter(name="enableSecureBoot")
    def enable_secure_boot(self) -> Optional[bool]:
        """
        Enables secure boot for the runtime.
        """
        return pulumi.get(self, "enable_secure_boot")


