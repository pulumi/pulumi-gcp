# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['RestorePlanIamPolicyArgs', 'RestorePlanIamPolicy']

@pulumi.input_type
class RestorePlanIamPolicyArgs:
    def __init__(__self__, *,
                 policy_data: pulumi.Input[str],
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a RestorePlanIamPolicy resource.
        :param pulumi.Input[str] location: The region of the Restore Plan.
        :param pulumi.Input[str] name: The full name of the BackupPlan Resource.
        :param pulumi.Input[str] project: The ID of the project in which the resource belongs.
               If it is not provided, the provider project is used.
        """
        pulumi.set(__self__, "policy_data", policy_data)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if project is not None:
            pulumi.set(__self__, "project", project)

    @property
    @pulumi.getter(name="policyData")
    def policy_data(self) -> pulumi.Input[str]:
        return pulumi.get(self, "policy_data")

    @policy_data.setter
    def policy_data(self, value: pulumi.Input[str]):
        pulumi.set(self, "policy_data", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        The region of the Restore Plan.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The full name of the BackupPlan Resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the project in which the resource belongs.
        If it is not provided, the provider project is used.
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)


@pulumi.input_type
class _RestorePlanIamPolicyState:
    def __init__(__self__, *,
                 etag: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 policy_data: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering RestorePlanIamPolicy resources.
        :param pulumi.Input[str] location: The region of the Restore Plan.
        :param pulumi.Input[str] name: The full name of the BackupPlan Resource.
        :param pulumi.Input[str] project: The ID of the project in which the resource belongs.
               If it is not provided, the provider project is used.
        """
        if etag is not None:
            pulumi.set(__self__, "etag", etag)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if policy_data is not None:
            pulumi.set(__self__, "policy_data", policy_data)
        if project is not None:
            pulumi.set(__self__, "project", project)

    @property
    @pulumi.getter
    def etag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "etag")

    @etag.setter
    def etag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "etag", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        The region of the Restore Plan.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The full name of the BackupPlan Resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="policyData")
    def policy_data(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "policy_data")

    @policy_data.setter
    def policy_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_data", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the project in which the resource belongs.
        If it is not provided, the provider project is used.
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)


class RestorePlanIamPolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 policy_data: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Represents a Restore Plan instance.

        To get more information about RestorePlan, see:

        * [API documentation](https://cloud.google.com/kubernetes-engine/docs/add-on/backup-for-gke/reference/rest/v1/projects.locations.restorePlans)
        * How-to Guides
            * [Official Documentation](https://cloud.google.com/kubernetes-engine/docs/add-on/backup-for-gke)

        ## Example Usage
        ### Gkebackup Restoreplan All Namespaces

        ```python
        import pulumi
        import pulumi_gcp as gcp

        primary = gcp.container.Cluster("primary",
            location="us-central1",
            initial_node_count=1,
            workload_identity_config=gcp.container.ClusterWorkloadIdentityConfigArgs(
                workload_pool="my-project-name.svc.id.goog",
            ),
            addons_config=gcp.container.ClusterAddonsConfigArgs(
                gke_backup_agent_config=gcp.container.ClusterAddonsConfigGkeBackupAgentConfigArgs(
                    enabled=True,
                ),
            ))
        basic = gcp.gkebackup.BackupPlan("basic",
            cluster=primary.id,
            location="us-central1",
            backup_config=gcp.gkebackup.BackupPlanBackupConfigArgs(
                include_volume_data=True,
                include_secrets=True,
                all_namespaces=True,
            ))
        all_ns = gcp.gkebackup.RestorePlan("allNs",
            location="us-central1",
            backup_plan=basic.id,
            cluster=primary.id,
            restore_config=gcp.gkebackup.RestorePlanRestoreConfigArgs(
                all_namespaces=True,
                namespaced_resource_restore_mode="FAIL_ON_CONFLICT",
                volume_data_restore_policy="RESTORE_VOLUME_DATA_FROM_BACKUP",
                cluster_resource_restore_scope=gcp.gkebackup.RestorePlanRestoreConfigClusterResourceRestoreScopeArgs(
                    all_group_kinds=True,
                ),
                cluster_resource_conflict_policy="USE_EXISTING_VERSION",
            ))
        ```
        ### Gkebackup Restoreplan Rollback Namespace

        ```python
        import pulumi
        import pulumi_gcp as gcp

        primary = gcp.container.Cluster("primary",
            location="us-central1",
            initial_node_count=1,
            workload_identity_config=gcp.container.ClusterWorkloadIdentityConfigArgs(
                workload_pool="my-project-name.svc.id.goog",
            ),
            addons_config=gcp.container.ClusterAddonsConfigArgs(
                gke_backup_agent_config=gcp.container.ClusterAddonsConfigGkeBackupAgentConfigArgs(
                    enabled=True,
                ),
            ))
        basic = gcp.gkebackup.BackupPlan("basic",
            cluster=primary.id,
            location="us-central1",
            backup_config=gcp.gkebackup.BackupPlanBackupConfigArgs(
                include_volume_data=True,
                include_secrets=True,
                all_namespaces=True,
            ))
        rollback_ns = gcp.gkebackup.RestorePlan("rollbackNs",
            location="us-central1",
            backup_plan=basic.id,
            cluster=primary.id,
            restore_config=gcp.gkebackup.RestorePlanRestoreConfigArgs(
                selected_namespaces=gcp.gkebackup.RestorePlanRestoreConfigSelectedNamespacesArgs(
                    namespaces=["my-ns"],
                ),
                namespaced_resource_restore_mode="DELETE_AND_RESTORE",
                volume_data_restore_policy="RESTORE_VOLUME_DATA_FROM_BACKUP",
                cluster_resource_restore_scope=gcp.gkebackup.RestorePlanRestoreConfigClusterResourceRestoreScopeArgs(
                    selected_group_kinds=[
                        gcp.gkebackup.RestorePlanRestoreConfigClusterResourceRestoreScopeSelectedGroupKindArgs(
                            resource_group="apiextension.k8s.io",
                            resource_kind="CustomResourceDefinition",
                        ),
                        gcp.gkebackup.RestorePlanRestoreConfigClusterResourceRestoreScopeSelectedGroupKindArgs(
                            resource_group="storage.k8s.io",
                            resource_kind="StorageClass",
                        ),
                    ],
                ),
                cluster_resource_conflict_policy="USE_EXISTING_VERSION",
            ))
        ```
        ### Gkebackup Restoreplan Protected Application

        ```python
        import pulumi
        import pulumi_gcp as gcp

        primary = gcp.container.Cluster("primary",
            location="us-central1",
            initial_node_count=1,
            workload_identity_config=gcp.container.ClusterWorkloadIdentityConfigArgs(
                workload_pool="my-project-name.svc.id.goog",
            ),
            addons_config=gcp.container.ClusterAddonsConfigArgs(
                gke_backup_agent_config=gcp.container.ClusterAddonsConfigGkeBackupAgentConfigArgs(
                    enabled=True,
                ),
            ))
        basic = gcp.gkebackup.BackupPlan("basic",
            cluster=primary.id,
            location="us-central1",
            backup_config=gcp.gkebackup.BackupPlanBackupConfigArgs(
                include_volume_data=True,
                include_secrets=True,
                all_namespaces=True,
            ))
        rollback_app = gcp.gkebackup.RestorePlan("rollbackApp",
            location="us-central1",
            backup_plan=basic.id,
            cluster=primary.id,
            restore_config=gcp.gkebackup.RestorePlanRestoreConfigArgs(
                selected_applications=gcp.gkebackup.RestorePlanRestoreConfigSelectedApplicationsArgs(
                    namespaced_names=[gcp.gkebackup.RestorePlanRestoreConfigSelectedApplicationsNamespacedNameArgs(
                        name="my-app",
                        namespace="my-ns",
                    )],
                ),
                namespaced_resource_restore_mode="DELETE_AND_RESTORE",
                volume_data_restore_policy="REUSE_VOLUME_HANDLE_FROM_BACKUP",
                cluster_resource_restore_scope=gcp.gkebackup.RestorePlanRestoreConfigClusterResourceRestoreScopeArgs(
                    no_group_kinds=True,
                ),
            ))
        ```
        ### Gkebackup Restoreplan All Cluster Resources

        ```python
        import pulumi
        import pulumi_gcp as gcp

        primary = gcp.container.Cluster("primary",
            location="us-central1",
            initial_node_count=1,
            workload_identity_config=gcp.container.ClusterWorkloadIdentityConfigArgs(
                workload_pool="my-project-name.svc.id.goog",
            ),
            addons_config=gcp.container.ClusterAddonsConfigArgs(
                gke_backup_agent_config=gcp.container.ClusterAddonsConfigGkeBackupAgentConfigArgs(
                    enabled=True,
                ),
            ))
        basic = gcp.gkebackup.BackupPlan("basic",
            cluster=primary.id,
            location="us-central1",
            backup_config=gcp.gkebackup.BackupPlanBackupConfigArgs(
                include_volume_data=True,
                include_secrets=True,
                all_namespaces=True,
            ))
        all_cluster_resources = gcp.gkebackup.RestorePlan("allClusterResources",
            location="us-central1",
            backup_plan=basic.id,
            cluster=primary.id,
            restore_config=gcp.gkebackup.RestorePlanRestoreConfigArgs(
                no_namespaces=True,
                namespaced_resource_restore_mode="FAIL_ON_CONFLICT",
                cluster_resource_restore_scope=gcp.gkebackup.RestorePlanRestoreConfigClusterResourceRestoreScopeArgs(
                    all_group_kinds=True,
                ),
                cluster_resource_conflict_policy="USE_EXISTING_VERSION",
            ))
        ```
        ### Gkebackup Restoreplan Rename Namespace

        ```python
        import pulumi
        import pulumi_gcp as gcp

        primary = gcp.container.Cluster("primary",
            location="us-central1",
            initial_node_count=1,
            workload_identity_config=gcp.container.ClusterWorkloadIdentityConfigArgs(
                workload_pool="my-project-name.svc.id.goog",
            ),
            addons_config=gcp.container.ClusterAddonsConfigArgs(
                gke_backup_agent_config=gcp.container.ClusterAddonsConfigGkeBackupAgentConfigArgs(
                    enabled=True,
                ),
            ))
        basic = gcp.gkebackup.BackupPlan("basic",
            cluster=primary.id,
            location="us-central1",
            backup_config=gcp.gkebackup.BackupPlanBackupConfigArgs(
                include_volume_data=True,
                include_secrets=True,
                all_namespaces=True,
            ))
        rename_ns = gcp.gkebackup.RestorePlan("renameNs",
            location="us-central1",
            backup_plan=basic.id,
            cluster=primary.id,
            restore_config=gcp.gkebackup.RestorePlanRestoreConfigArgs(
                selected_namespaces=gcp.gkebackup.RestorePlanRestoreConfigSelectedNamespacesArgs(
                    namespaces=["ns1"],
                ),
                namespaced_resource_restore_mode="FAIL_ON_CONFLICT",
                volume_data_restore_policy="REUSE_VOLUME_HANDLE_FROM_BACKUP",
                cluster_resource_restore_scope=gcp.gkebackup.RestorePlanRestoreConfigClusterResourceRestoreScopeArgs(
                    no_group_kinds=True,
                ),
                transformation_rules=[
                    gcp.gkebackup.RestorePlanRestoreConfigTransformationRuleArgs(
                        description="rename namespace from ns1 to ns2",
                        resource_filter=gcp.gkebackup.RestorePlanRestoreConfigTransformationRuleResourceFilterArgs(
                            group_kinds=[gcp.gkebackup.RestorePlanRestoreConfigTransformationRuleResourceFilterGroupKindArgs(
                                resource_kind="Namespace",
                            )],
                            json_path=".metadata[?(@.name == 'ns1')]",
                        ),
                        field_actions=[gcp.gkebackup.RestorePlanRestoreConfigTransformationRuleFieldActionArgs(
                            op="REPLACE",
                            path="/metadata/name",
                            value="ns2",
                        )],
                    ),
                    gcp.gkebackup.RestorePlanRestoreConfigTransformationRuleArgs(
                        description="move all resources from ns1 to ns2",
                        resource_filter=gcp.gkebackup.RestorePlanRestoreConfigTransformationRuleResourceFilterArgs(
                            namespaces=["ns1"],
                        ),
                        field_actions=[gcp.gkebackup.RestorePlanRestoreConfigTransformationRuleFieldActionArgs(
                            op="REPLACE",
                            path="/metadata/namespace",
                            value="ns2",
                        )],
                    ),
                ],
            ))
        ```
        ### Gkebackup Restoreplan Second Transformation

        ```python
        import pulumi
        import pulumi_gcp as gcp

        primary = gcp.container.Cluster("primary",
            location="us-central1",
            initial_node_count=1,
            workload_identity_config=gcp.container.ClusterWorkloadIdentityConfigArgs(
                workload_pool="my-project-name.svc.id.goog",
            ),
            addons_config=gcp.container.ClusterAddonsConfigArgs(
                gke_backup_agent_config=gcp.container.ClusterAddonsConfigGkeBackupAgentConfigArgs(
                    enabled=True,
                ),
            ))
        basic = gcp.gkebackup.BackupPlan("basic",
            cluster=primary.id,
            location="us-central1",
            backup_config=gcp.gkebackup.BackupPlanBackupConfigArgs(
                include_volume_data=True,
                include_secrets=True,
                all_namespaces=True,
            ))
        transform_rule = gcp.gkebackup.RestorePlan("transformRule",
            description="copy nginx env variables",
            labels={
                "app": "nginx",
            },
            location="us-central1",
            backup_plan=basic.id,
            cluster=primary.id,
            restore_config=gcp.gkebackup.RestorePlanRestoreConfigArgs(
                excluded_namespaces=gcp.gkebackup.RestorePlanRestoreConfigExcludedNamespacesArgs(
                    namespaces=["my-ns"],
                ),
                namespaced_resource_restore_mode="DELETE_AND_RESTORE",
                volume_data_restore_policy="RESTORE_VOLUME_DATA_FROM_BACKUP",
                cluster_resource_restore_scope=gcp.gkebackup.RestorePlanRestoreConfigClusterResourceRestoreScopeArgs(
                    excluded_group_kinds=[gcp.gkebackup.RestorePlanRestoreConfigClusterResourceRestoreScopeExcludedGroupKindArgs(
                        resource_group="apiextension.k8s.io",
                        resource_kind="CustomResourceDefinition",
                    )],
                ),
                cluster_resource_conflict_policy="USE_EXISTING_VERSION",
                transformation_rules=[gcp.gkebackup.RestorePlanRestoreConfigTransformationRuleArgs(
                    description="Copy environment variables from the nginx container to the install init container.",
                    resource_filter=gcp.gkebackup.RestorePlanRestoreConfigTransformationRuleResourceFilterArgs(
                        group_kinds=[gcp.gkebackup.RestorePlanRestoreConfigTransformationRuleResourceFilterGroupKindArgs(
                            resource_kind="Pod",
                            resource_group="",
                        )],
                        json_path=".metadata[?(@.name == 'nginx')]",
                    ),
                    field_actions=[gcp.gkebackup.RestorePlanRestoreConfigTransformationRuleFieldActionArgs(
                        op="COPY",
                        path="/spec/initContainers/0/env",
                        from_path="/spec/containers/0/env",
                    )],
                )],
            ))
        ```

        ## Import

        RestorePlan can be imported using any of these accepted formats

        ```sh
         $ pulumi import gcp:gkebackup/restorePlanIamPolicy:RestorePlanIamPolicy default projects/{{project}}/locations/{{location}}/restorePlans/{{name}}
        ```

        ```sh
         $ pulumi import gcp:gkebackup/restorePlanIamPolicy:RestorePlanIamPolicy default {{project}}/{{location}}/{{name}}
        ```

        ```sh
         $ pulumi import gcp:gkebackup/restorePlanIamPolicy:RestorePlanIamPolicy default {{location}}/{{name}}
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] location: The region of the Restore Plan.
        :param pulumi.Input[str] name: The full name of the BackupPlan Resource.
        :param pulumi.Input[str] project: The ID of the project in which the resource belongs.
               If it is not provided, the provider project is used.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RestorePlanIamPolicyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Represents a Restore Plan instance.

        To get more information about RestorePlan, see:

        * [API documentation](https://cloud.google.com/kubernetes-engine/docs/add-on/backup-for-gke/reference/rest/v1/projects.locations.restorePlans)
        * How-to Guides
            * [Official Documentation](https://cloud.google.com/kubernetes-engine/docs/add-on/backup-for-gke)

        ## Example Usage
        ### Gkebackup Restoreplan All Namespaces

        ```python
        import pulumi
        import pulumi_gcp as gcp

        primary = gcp.container.Cluster("primary",
            location="us-central1",
            initial_node_count=1,
            workload_identity_config=gcp.container.ClusterWorkloadIdentityConfigArgs(
                workload_pool="my-project-name.svc.id.goog",
            ),
            addons_config=gcp.container.ClusterAddonsConfigArgs(
                gke_backup_agent_config=gcp.container.ClusterAddonsConfigGkeBackupAgentConfigArgs(
                    enabled=True,
                ),
            ))
        basic = gcp.gkebackup.BackupPlan("basic",
            cluster=primary.id,
            location="us-central1",
            backup_config=gcp.gkebackup.BackupPlanBackupConfigArgs(
                include_volume_data=True,
                include_secrets=True,
                all_namespaces=True,
            ))
        all_ns = gcp.gkebackup.RestorePlan("allNs",
            location="us-central1",
            backup_plan=basic.id,
            cluster=primary.id,
            restore_config=gcp.gkebackup.RestorePlanRestoreConfigArgs(
                all_namespaces=True,
                namespaced_resource_restore_mode="FAIL_ON_CONFLICT",
                volume_data_restore_policy="RESTORE_VOLUME_DATA_FROM_BACKUP",
                cluster_resource_restore_scope=gcp.gkebackup.RestorePlanRestoreConfigClusterResourceRestoreScopeArgs(
                    all_group_kinds=True,
                ),
                cluster_resource_conflict_policy="USE_EXISTING_VERSION",
            ))
        ```
        ### Gkebackup Restoreplan Rollback Namespace

        ```python
        import pulumi
        import pulumi_gcp as gcp

        primary = gcp.container.Cluster("primary",
            location="us-central1",
            initial_node_count=1,
            workload_identity_config=gcp.container.ClusterWorkloadIdentityConfigArgs(
                workload_pool="my-project-name.svc.id.goog",
            ),
            addons_config=gcp.container.ClusterAddonsConfigArgs(
                gke_backup_agent_config=gcp.container.ClusterAddonsConfigGkeBackupAgentConfigArgs(
                    enabled=True,
                ),
            ))
        basic = gcp.gkebackup.BackupPlan("basic",
            cluster=primary.id,
            location="us-central1",
            backup_config=gcp.gkebackup.BackupPlanBackupConfigArgs(
                include_volume_data=True,
                include_secrets=True,
                all_namespaces=True,
            ))
        rollback_ns = gcp.gkebackup.RestorePlan("rollbackNs",
            location="us-central1",
            backup_plan=basic.id,
            cluster=primary.id,
            restore_config=gcp.gkebackup.RestorePlanRestoreConfigArgs(
                selected_namespaces=gcp.gkebackup.RestorePlanRestoreConfigSelectedNamespacesArgs(
                    namespaces=["my-ns"],
                ),
                namespaced_resource_restore_mode="DELETE_AND_RESTORE",
                volume_data_restore_policy="RESTORE_VOLUME_DATA_FROM_BACKUP",
                cluster_resource_restore_scope=gcp.gkebackup.RestorePlanRestoreConfigClusterResourceRestoreScopeArgs(
                    selected_group_kinds=[
                        gcp.gkebackup.RestorePlanRestoreConfigClusterResourceRestoreScopeSelectedGroupKindArgs(
                            resource_group="apiextension.k8s.io",
                            resource_kind="CustomResourceDefinition",
                        ),
                        gcp.gkebackup.RestorePlanRestoreConfigClusterResourceRestoreScopeSelectedGroupKindArgs(
                            resource_group="storage.k8s.io",
                            resource_kind="StorageClass",
                        ),
                    ],
                ),
                cluster_resource_conflict_policy="USE_EXISTING_VERSION",
            ))
        ```
        ### Gkebackup Restoreplan Protected Application

        ```python
        import pulumi
        import pulumi_gcp as gcp

        primary = gcp.container.Cluster("primary",
            location="us-central1",
            initial_node_count=1,
            workload_identity_config=gcp.container.ClusterWorkloadIdentityConfigArgs(
                workload_pool="my-project-name.svc.id.goog",
            ),
            addons_config=gcp.container.ClusterAddonsConfigArgs(
                gke_backup_agent_config=gcp.container.ClusterAddonsConfigGkeBackupAgentConfigArgs(
                    enabled=True,
                ),
            ))
        basic = gcp.gkebackup.BackupPlan("basic",
            cluster=primary.id,
            location="us-central1",
            backup_config=gcp.gkebackup.BackupPlanBackupConfigArgs(
                include_volume_data=True,
                include_secrets=True,
                all_namespaces=True,
            ))
        rollback_app = gcp.gkebackup.RestorePlan("rollbackApp",
            location="us-central1",
            backup_plan=basic.id,
            cluster=primary.id,
            restore_config=gcp.gkebackup.RestorePlanRestoreConfigArgs(
                selected_applications=gcp.gkebackup.RestorePlanRestoreConfigSelectedApplicationsArgs(
                    namespaced_names=[gcp.gkebackup.RestorePlanRestoreConfigSelectedApplicationsNamespacedNameArgs(
                        name="my-app",
                        namespace="my-ns",
                    )],
                ),
                namespaced_resource_restore_mode="DELETE_AND_RESTORE",
                volume_data_restore_policy="REUSE_VOLUME_HANDLE_FROM_BACKUP",
                cluster_resource_restore_scope=gcp.gkebackup.RestorePlanRestoreConfigClusterResourceRestoreScopeArgs(
                    no_group_kinds=True,
                ),
            ))
        ```
        ### Gkebackup Restoreplan All Cluster Resources

        ```python
        import pulumi
        import pulumi_gcp as gcp

        primary = gcp.container.Cluster("primary",
            location="us-central1",
            initial_node_count=1,
            workload_identity_config=gcp.container.ClusterWorkloadIdentityConfigArgs(
                workload_pool="my-project-name.svc.id.goog",
            ),
            addons_config=gcp.container.ClusterAddonsConfigArgs(
                gke_backup_agent_config=gcp.container.ClusterAddonsConfigGkeBackupAgentConfigArgs(
                    enabled=True,
                ),
            ))
        basic = gcp.gkebackup.BackupPlan("basic",
            cluster=primary.id,
            location="us-central1",
            backup_config=gcp.gkebackup.BackupPlanBackupConfigArgs(
                include_volume_data=True,
                include_secrets=True,
                all_namespaces=True,
            ))
        all_cluster_resources = gcp.gkebackup.RestorePlan("allClusterResources",
            location="us-central1",
            backup_plan=basic.id,
            cluster=primary.id,
            restore_config=gcp.gkebackup.RestorePlanRestoreConfigArgs(
                no_namespaces=True,
                namespaced_resource_restore_mode="FAIL_ON_CONFLICT",
                cluster_resource_restore_scope=gcp.gkebackup.RestorePlanRestoreConfigClusterResourceRestoreScopeArgs(
                    all_group_kinds=True,
                ),
                cluster_resource_conflict_policy="USE_EXISTING_VERSION",
            ))
        ```
        ### Gkebackup Restoreplan Rename Namespace

        ```python
        import pulumi
        import pulumi_gcp as gcp

        primary = gcp.container.Cluster("primary",
            location="us-central1",
            initial_node_count=1,
            workload_identity_config=gcp.container.ClusterWorkloadIdentityConfigArgs(
                workload_pool="my-project-name.svc.id.goog",
            ),
            addons_config=gcp.container.ClusterAddonsConfigArgs(
                gke_backup_agent_config=gcp.container.ClusterAddonsConfigGkeBackupAgentConfigArgs(
                    enabled=True,
                ),
            ))
        basic = gcp.gkebackup.BackupPlan("basic",
            cluster=primary.id,
            location="us-central1",
            backup_config=gcp.gkebackup.BackupPlanBackupConfigArgs(
                include_volume_data=True,
                include_secrets=True,
                all_namespaces=True,
            ))
        rename_ns = gcp.gkebackup.RestorePlan("renameNs",
            location="us-central1",
            backup_plan=basic.id,
            cluster=primary.id,
            restore_config=gcp.gkebackup.RestorePlanRestoreConfigArgs(
                selected_namespaces=gcp.gkebackup.RestorePlanRestoreConfigSelectedNamespacesArgs(
                    namespaces=["ns1"],
                ),
                namespaced_resource_restore_mode="FAIL_ON_CONFLICT",
                volume_data_restore_policy="REUSE_VOLUME_HANDLE_FROM_BACKUP",
                cluster_resource_restore_scope=gcp.gkebackup.RestorePlanRestoreConfigClusterResourceRestoreScopeArgs(
                    no_group_kinds=True,
                ),
                transformation_rules=[
                    gcp.gkebackup.RestorePlanRestoreConfigTransformationRuleArgs(
                        description="rename namespace from ns1 to ns2",
                        resource_filter=gcp.gkebackup.RestorePlanRestoreConfigTransformationRuleResourceFilterArgs(
                            group_kinds=[gcp.gkebackup.RestorePlanRestoreConfigTransformationRuleResourceFilterGroupKindArgs(
                                resource_kind="Namespace",
                            )],
                            json_path=".metadata[?(@.name == 'ns1')]",
                        ),
                        field_actions=[gcp.gkebackup.RestorePlanRestoreConfigTransformationRuleFieldActionArgs(
                            op="REPLACE",
                            path="/metadata/name",
                            value="ns2",
                        )],
                    ),
                    gcp.gkebackup.RestorePlanRestoreConfigTransformationRuleArgs(
                        description="move all resources from ns1 to ns2",
                        resource_filter=gcp.gkebackup.RestorePlanRestoreConfigTransformationRuleResourceFilterArgs(
                            namespaces=["ns1"],
                        ),
                        field_actions=[gcp.gkebackup.RestorePlanRestoreConfigTransformationRuleFieldActionArgs(
                            op="REPLACE",
                            path="/metadata/namespace",
                            value="ns2",
                        )],
                    ),
                ],
            ))
        ```
        ### Gkebackup Restoreplan Second Transformation

        ```python
        import pulumi
        import pulumi_gcp as gcp

        primary = gcp.container.Cluster("primary",
            location="us-central1",
            initial_node_count=1,
            workload_identity_config=gcp.container.ClusterWorkloadIdentityConfigArgs(
                workload_pool="my-project-name.svc.id.goog",
            ),
            addons_config=gcp.container.ClusterAddonsConfigArgs(
                gke_backup_agent_config=gcp.container.ClusterAddonsConfigGkeBackupAgentConfigArgs(
                    enabled=True,
                ),
            ))
        basic = gcp.gkebackup.BackupPlan("basic",
            cluster=primary.id,
            location="us-central1",
            backup_config=gcp.gkebackup.BackupPlanBackupConfigArgs(
                include_volume_data=True,
                include_secrets=True,
                all_namespaces=True,
            ))
        transform_rule = gcp.gkebackup.RestorePlan("transformRule",
            description="copy nginx env variables",
            labels={
                "app": "nginx",
            },
            location="us-central1",
            backup_plan=basic.id,
            cluster=primary.id,
            restore_config=gcp.gkebackup.RestorePlanRestoreConfigArgs(
                excluded_namespaces=gcp.gkebackup.RestorePlanRestoreConfigExcludedNamespacesArgs(
                    namespaces=["my-ns"],
                ),
                namespaced_resource_restore_mode="DELETE_AND_RESTORE",
                volume_data_restore_policy="RESTORE_VOLUME_DATA_FROM_BACKUP",
                cluster_resource_restore_scope=gcp.gkebackup.RestorePlanRestoreConfigClusterResourceRestoreScopeArgs(
                    excluded_group_kinds=[gcp.gkebackup.RestorePlanRestoreConfigClusterResourceRestoreScopeExcludedGroupKindArgs(
                        resource_group="apiextension.k8s.io",
                        resource_kind="CustomResourceDefinition",
                    )],
                ),
                cluster_resource_conflict_policy="USE_EXISTING_VERSION",
                transformation_rules=[gcp.gkebackup.RestorePlanRestoreConfigTransformationRuleArgs(
                    description="Copy environment variables from the nginx container to the install init container.",
                    resource_filter=gcp.gkebackup.RestorePlanRestoreConfigTransformationRuleResourceFilterArgs(
                        group_kinds=[gcp.gkebackup.RestorePlanRestoreConfigTransformationRuleResourceFilterGroupKindArgs(
                            resource_kind="Pod",
                            resource_group="",
                        )],
                        json_path=".metadata[?(@.name == 'nginx')]",
                    ),
                    field_actions=[gcp.gkebackup.RestorePlanRestoreConfigTransformationRuleFieldActionArgs(
                        op="COPY",
                        path="/spec/initContainers/0/env",
                        from_path="/spec/containers/0/env",
                    )],
                )],
            ))
        ```

        ## Import

        RestorePlan can be imported using any of these accepted formats

        ```sh
         $ pulumi import gcp:gkebackup/restorePlanIamPolicy:RestorePlanIamPolicy default projects/{{project}}/locations/{{location}}/restorePlans/{{name}}
        ```

        ```sh
         $ pulumi import gcp:gkebackup/restorePlanIamPolicy:RestorePlanIamPolicy default {{project}}/{{location}}/{{name}}
        ```

        ```sh
         $ pulumi import gcp:gkebackup/restorePlanIamPolicy:RestorePlanIamPolicy default {{location}}/{{name}}
        ```

        :param str resource_name: The name of the resource.
        :param RestorePlanIamPolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RestorePlanIamPolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 policy_data: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RestorePlanIamPolicyArgs.__new__(RestorePlanIamPolicyArgs)

            __props__.__dict__["location"] = location
            __props__.__dict__["name"] = name
            if policy_data is None and not opts.urn:
                raise TypeError("Missing required property 'policy_data'")
            __props__.__dict__["policy_data"] = policy_data
            __props__.__dict__["project"] = project
            __props__.__dict__["etag"] = None
        super(RestorePlanIamPolicy, __self__).__init__(
            'gcp:gkebackup/restorePlanIamPolicy:RestorePlanIamPolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            etag: Optional[pulumi.Input[str]] = None,
            location: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            policy_data: Optional[pulumi.Input[str]] = None,
            project: Optional[pulumi.Input[str]] = None) -> 'RestorePlanIamPolicy':
        """
        Get an existing RestorePlanIamPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] location: The region of the Restore Plan.
        :param pulumi.Input[str] name: The full name of the BackupPlan Resource.
        :param pulumi.Input[str] project: The ID of the project in which the resource belongs.
               If it is not provided, the provider project is used.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RestorePlanIamPolicyState.__new__(_RestorePlanIamPolicyState)

        __props__.__dict__["etag"] = etag
        __props__.__dict__["location"] = location
        __props__.__dict__["name"] = name
        __props__.__dict__["policy_data"] = policy_data
        __props__.__dict__["project"] = project
        return RestorePlanIamPolicy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def etag(self) -> pulumi.Output[str]:
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        """
        The region of the Restore Plan.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The full name of the BackupPlan Resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="policyData")
    def policy_data(self) -> pulumi.Output[str]:
        return pulumi.get(self, "policy_data")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[str]:
        """
        The ID of the project in which the resource belongs.
        If it is not provided, the provider project is used.
        """
        return pulumi.get(self, "project")

