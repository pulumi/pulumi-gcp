# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities

class Attestor(pulumi.CustomResource):
    def __init__(__self__, __name__, __opts__=None, attestation_authority_note=None, description=None, name=None, project=None):
        """Create a Attestor resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if not attestation_authority_note:
            raise TypeError('Missing required property attestation_authority_note')
        elif not isinstance(attestation_authority_note, dict):
            raise TypeError('Expected property attestation_authority_note to be a dict')
        __self__.attestation_authority_note = attestation_authority_note
        __props__['attestationAuthorityNote'] = attestation_authority_note

        if description and not isinstance(description, basestring):
            raise TypeError('Expected property description to be a basestring')
        __self__.description = description
        __props__['description'] = description

        if name and not isinstance(name, basestring):
            raise TypeError('Expected property name to be a basestring')
        __self__.name = name
        __props__['name'] = name

        if project and not isinstance(project, basestring):
            raise TypeError('Expected property project to be a basestring')
        __self__.project = project
        __props__['project'] = project

        super(Attestor, __self__).__init__(
            'gcp:binaryauthorization/attestor:Attestor',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'attestationAuthorityNote' in outs:
            self.attestation_authority_note = outs['attestationAuthorityNote']
        if 'description' in outs:
            self.description = outs['description']
        if 'name' in outs:
            self.name = outs['name']
        if 'project' in outs:
            self.project = outs['project']
