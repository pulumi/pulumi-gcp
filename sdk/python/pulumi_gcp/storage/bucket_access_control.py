# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from .. import _utilities, _tables

__all__ = ['BucketAccessControl']


class BucketAccessControl(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bucket: Optional[pulumi.Input[str]] = None,
                 entity: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        Bucket ACLs can be managed authoritatively using the
        `storage_bucket_acl` resource. Do not use these two resources in conjunction to manage the same bucket.

        The BucketAccessControls resource manages the Access Control List
        (ACLs) for a single entity/role pairing on a bucket. ACLs let you specify who
        has access to your data and to what extent.

        There are three roles that can be assigned to an entity:

        READERs can get the bucket, though no acl property will be returned, and
        list the bucket's objects.  WRITERs are READERs, and they can insert
        objects into the bucket and delete the bucket's objects.  OWNERs are
        WRITERs, and they can get the acl property of a bucket, update a bucket,
        and call all BucketAccessControls methods on the bucket.  For more
        information, see Access Control, with the caveat that this API uses
        READER, WRITER, and OWNER instead of READ, WRITE, and FULL_CONTROL.

        To get more information about BucketAccessControl, see:

        * [API documentation](https://cloud.google.com/storage/docs/json_api/v1/bucketAccessControls)
        * How-to Guides
            * [Official Documentation](https://cloud.google.com/storage/docs/access-control/lists)

        ## Example Usage
        ### Storage Bucket Access Control Public Bucket

        ```python
        import pulumi
        import pulumi_gcp as gcp

        bucket = gcp.storage.Bucket("bucket")
        public_rule = gcp.storage.BucketAccessControl("publicRule",
            bucket=bucket.name,
            role="READER",
            entity="allUsers")
        ```

        ## Import

        BucketAccessControl can be imported using any of these accepted formats

        ```sh
         $ pulumi import gcp:storage/bucketAccessControl:BucketAccessControl default {{bucket}}/{{entity}}
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] bucket: The name of the bucket.
        :param pulumi.Input[str] entity: The entity holding the permission, in one of the following forms:
               user-userId
               user-email
               group-groupId
               group-email
               domain-domain
               project-team-projectId
               allUsers
               allAuthenticatedUsers
               Examples:
               The user liz@example.com would be user-liz@example.com.
               The group example@googlegroups.com would be
               group-example@googlegroups.com.
               To refer to all members of the Google Apps for Business domain
               example.com, the entity would be domain-example.com.
        :param pulumi.Input[str] role: The access permission for the entity.
               Possible values are `OWNER`, `READER`, and `WRITER`.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if bucket is None and not opts.urn:
                raise TypeError("Missing required property 'bucket'")
            __props__['bucket'] = bucket
            if entity is None and not opts.urn:
                raise TypeError("Missing required property 'entity'")
            __props__['entity'] = entity
            __props__['role'] = role
            __props__['domain'] = None
            __props__['email'] = None
        super(BucketAccessControl, __self__).__init__(
            'gcp:storage/bucketAccessControl:BucketAccessControl',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            bucket: Optional[pulumi.Input[str]] = None,
            domain: Optional[pulumi.Input[str]] = None,
            email: Optional[pulumi.Input[str]] = None,
            entity: Optional[pulumi.Input[str]] = None,
            role: Optional[pulumi.Input[str]] = None) -> 'BucketAccessControl':
        """
        Get an existing BucketAccessControl resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] bucket: The name of the bucket.
        :param pulumi.Input[str] domain: The domain associated with the entity.
        :param pulumi.Input[str] email: The email address associated with the entity.
        :param pulumi.Input[str] entity: The entity holding the permission, in one of the following forms:
               user-userId
               user-email
               group-groupId
               group-email
               domain-domain
               project-team-projectId
               allUsers
               allAuthenticatedUsers
               Examples:
               The user liz@example.com would be user-liz@example.com.
               The group example@googlegroups.com would be
               group-example@googlegroups.com.
               To refer to all members of the Google Apps for Business domain
               example.com, the entity would be domain-example.com.
        :param pulumi.Input[str] role: The access permission for the entity.
               Possible values are `OWNER`, `READER`, and `WRITER`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["bucket"] = bucket
        __props__["domain"] = domain
        __props__["email"] = email
        __props__["entity"] = entity
        __props__["role"] = role
        return BucketAccessControl(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Output[str]:
        """
        The name of the bucket.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Output[str]:
        """
        The domain associated with the entity.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def email(self) -> pulumi.Output[str]:
        """
        The email address associated with the entity.
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def entity(self) -> pulumi.Output[str]:
        """
        The entity holding the permission, in one of the following forms:
        user-userId
        user-email
        group-groupId
        group-email
        domain-domain
        project-team-projectId
        allUsers
        allAuthenticatedUsers
        Examples:
        The user liz@example.com would be user-liz@example.com.
        The group example@googlegroups.com would be
        group-example@googlegroups.com.
        To refer to all members of the Google Apps for Business domain
        example.com, the entity would be domain-example.com.
        """
        return pulumi.get(self, "entity")

    @property
    @pulumi.getter
    def role(self) -> pulumi.Output[Optional[str]]:
        """
        The access permission for the entity.
        Possible values are `OWNER`, `READER`, and `WRITER`.
        """
        return pulumi.get(self, "role")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

