# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetControlFolderIntelligenceConfigResult',
    'AwaitableGetControlFolderIntelligenceConfigResult',
    'get_control_folder_intelligence_config',
    'get_control_folder_intelligence_config_output',
]

@pulumi.output_type
class GetControlFolderIntelligenceConfigResult:
    """
    A collection of values returned by getControlFolderIntelligenceConfig.
    """
    def __init__(__self__, edition_config=None, effective_intelligence_configs=None, filters=None, id=None, name=None, update_time=None):
        if edition_config and not isinstance(edition_config, str):
            raise TypeError("Expected argument 'edition_config' to be a str")
        pulumi.set(__self__, "edition_config", edition_config)
        if effective_intelligence_configs and not isinstance(effective_intelligence_configs, list):
            raise TypeError("Expected argument 'effective_intelligence_configs' to be a list")
        pulumi.set(__self__, "effective_intelligence_configs", effective_intelligence_configs)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="editionConfig")
    def edition_config(self) -> builtins.str:
        return pulumi.get(self, "edition_config")

    @property
    @pulumi.getter(name="effectiveIntelligenceConfigs")
    def effective_intelligence_configs(self) -> Sequence['outputs.GetControlFolderIntelligenceConfigEffectiveIntelligenceConfigResult']:
        return pulumi.get(self, "effective_intelligence_configs")

    @property
    @pulumi.getter
    def filters(self) -> Sequence['outputs.GetControlFolderIntelligenceConfigFilterResult']:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> builtins.str:
        return pulumi.get(self, "update_time")


class AwaitableGetControlFolderIntelligenceConfigResult(GetControlFolderIntelligenceConfigResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetControlFolderIntelligenceConfigResult(
            edition_config=self.edition_config,
            effective_intelligence_configs=self.effective_intelligence_configs,
            filters=self.filters,
            id=self.id,
            name=self.name,
            update_time=self.update_time)


def get_control_folder_intelligence_config(name: Optional[builtins.str] = None,
                                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetControlFolderIntelligenceConfigResult:
    """
    Use this data source to get information about a Folder Storage Intelligence config resource.
    See [the official documentation](https://cloud.google.com/storage/docs/storage-intelligence/overview#resource)
    and
    [API](https://cloud.google.com/storage/docs/json_api/v1/intelligenceConfig).

    ## Example Usage

    ```python
    import pulumi
    import pulumi_gcp as gcp

    sample_config = gcp.storage.get_control_folder_intelligence_config(name="123456789")
    ```


    :param builtins.str name: The number of GCP folder.
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('gcp:storage/getControlFolderIntelligenceConfig:getControlFolderIntelligenceConfig', __args__, opts=opts, typ=GetControlFolderIntelligenceConfigResult).value

    return AwaitableGetControlFolderIntelligenceConfigResult(
        edition_config=pulumi.get(__ret__, 'edition_config'),
        effective_intelligence_configs=pulumi.get(__ret__, 'effective_intelligence_configs'),
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        update_time=pulumi.get(__ret__, 'update_time'))
def get_control_folder_intelligence_config_output(name: Optional[pulumi.Input[builtins.str]] = None,
                                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetControlFolderIntelligenceConfigResult]:
    """
    Use this data source to get information about a Folder Storage Intelligence config resource.
    See [the official documentation](https://cloud.google.com/storage/docs/storage-intelligence/overview#resource)
    and
    [API](https://cloud.google.com/storage/docs/json_api/v1/intelligenceConfig).

    ## Example Usage

    ```python
    import pulumi
    import pulumi_gcp as gcp

    sample_config = gcp.storage.get_control_folder_intelligence_config(name="123456789")
    ```


    :param builtins.str name: The number of GCP folder.
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('gcp:storage/getControlFolderIntelligenceConfig:getControlFolderIntelligenceConfig', __args__, opts=opts, typ=GetControlFolderIntelligenceConfigResult)
    return __ret__.apply(lambda __response__: GetControlFolderIntelligenceConfigResult(
        edition_config=pulumi.get(__response__, 'edition_config'),
        effective_intelligence_configs=pulumi.get(__response__, 'effective_intelligence_configs'),
        filters=pulumi.get(__response__, 'filters'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        update_time=pulumi.get(__response__, 'update_time')))
