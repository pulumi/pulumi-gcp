# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetInsightsDatasetConfigResult',
    'AwaitableGetInsightsDatasetConfigResult',
    'get_insights_dataset_config',
    'get_insights_dataset_config_output',
]

@pulumi.output_type
class GetInsightsDatasetConfigResult:
    """
    A collection of values returned by getInsightsDatasetConfig.
    """
    def __init__(__self__, create_time=None, dataset_config_id=None, dataset_config_state=None, description=None, exclude_cloud_storage_buckets=None, exclude_cloud_storage_locations=None, id=None, identities=None, include_cloud_storage_buckets=None, include_cloud_storage_locations=None, include_newly_created_buckets=None, link_dataset=None, links=None, location=None, name=None, organization_number=None, organization_scope=None, project=None, retention_period_days=None, source_folders=None, source_projects=None, uid=None, update_time=None):
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if dataset_config_id and not isinstance(dataset_config_id, str):
            raise TypeError("Expected argument 'dataset_config_id' to be a str")
        pulumi.set(__self__, "dataset_config_id", dataset_config_id)
        if dataset_config_state and not isinstance(dataset_config_state, str):
            raise TypeError("Expected argument 'dataset_config_state' to be a str")
        pulumi.set(__self__, "dataset_config_state", dataset_config_state)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if exclude_cloud_storage_buckets and not isinstance(exclude_cloud_storage_buckets, list):
            raise TypeError("Expected argument 'exclude_cloud_storage_buckets' to be a list")
        pulumi.set(__self__, "exclude_cloud_storage_buckets", exclude_cloud_storage_buckets)
        if exclude_cloud_storage_locations and not isinstance(exclude_cloud_storage_locations, list):
            raise TypeError("Expected argument 'exclude_cloud_storage_locations' to be a list")
        pulumi.set(__self__, "exclude_cloud_storage_locations", exclude_cloud_storage_locations)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if identities and not isinstance(identities, list):
            raise TypeError("Expected argument 'identities' to be a list")
        pulumi.set(__self__, "identities", identities)
        if include_cloud_storage_buckets and not isinstance(include_cloud_storage_buckets, list):
            raise TypeError("Expected argument 'include_cloud_storage_buckets' to be a list")
        pulumi.set(__self__, "include_cloud_storage_buckets", include_cloud_storage_buckets)
        if include_cloud_storage_locations and not isinstance(include_cloud_storage_locations, list):
            raise TypeError("Expected argument 'include_cloud_storage_locations' to be a list")
        pulumi.set(__self__, "include_cloud_storage_locations", include_cloud_storage_locations)
        if include_newly_created_buckets and not isinstance(include_newly_created_buckets, bool):
            raise TypeError("Expected argument 'include_newly_created_buckets' to be a bool")
        pulumi.set(__self__, "include_newly_created_buckets", include_newly_created_buckets)
        if link_dataset and not isinstance(link_dataset, bool):
            raise TypeError("Expected argument 'link_dataset' to be a bool")
        pulumi.set(__self__, "link_dataset", link_dataset)
        if links and not isinstance(links, list):
            raise TypeError("Expected argument 'links' to be a list")
        pulumi.set(__self__, "links", links)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if organization_number and not isinstance(organization_number, str):
            raise TypeError("Expected argument 'organization_number' to be a str")
        pulumi.set(__self__, "organization_number", organization_number)
        if organization_scope and not isinstance(organization_scope, bool):
            raise TypeError("Expected argument 'organization_scope' to be a bool")
        pulumi.set(__self__, "organization_scope", organization_scope)
        if project and not isinstance(project, str):
            raise TypeError("Expected argument 'project' to be a str")
        pulumi.set(__self__, "project", project)
        if retention_period_days and not isinstance(retention_period_days, int):
            raise TypeError("Expected argument 'retention_period_days' to be a int")
        pulumi.set(__self__, "retention_period_days", retention_period_days)
        if source_folders and not isinstance(source_folders, list):
            raise TypeError("Expected argument 'source_folders' to be a list")
        pulumi.set(__self__, "source_folders", source_folders)
        if source_projects and not isinstance(source_projects, list):
            raise TypeError("Expected argument 'source_projects' to be a list")
        pulumi.set(__self__, "source_projects", source_projects)
        if uid and not isinstance(uid, str):
            raise TypeError("Expected argument 'uid' to be a str")
        pulumi.set(__self__, "uid", uid)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)

    @_builtins.property
    @pulumi.getter(name="createTime")
    def create_time(self) -> _builtins.str:
        return pulumi.get(self, "create_time")

    @_builtins.property
    @pulumi.getter(name="datasetConfigId")
    def dataset_config_id(self) -> _builtins.str:
        return pulumi.get(self, "dataset_config_id")

    @_builtins.property
    @pulumi.getter(name="datasetConfigState")
    def dataset_config_state(self) -> _builtins.str:
        return pulumi.get(self, "dataset_config_state")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="excludeCloudStorageBuckets")
    def exclude_cloud_storage_buckets(self) -> Sequence['outputs.GetInsightsDatasetConfigExcludeCloudStorageBucketResult']:
        return pulumi.get(self, "exclude_cloud_storage_buckets")

    @_builtins.property
    @pulumi.getter(name="excludeCloudStorageLocations")
    def exclude_cloud_storage_locations(self) -> Sequence['outputs.GetInsightsDatasetConfigExcludeCloudStorageLocationResult']:
        return pulumi.get(self, "exclude_cloud_storage_locations")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def identities(self) -> Sequence['outputs.GetInsightsDatasetConfigIdentityResult']:
        return pulumi.get(self, "identities")

    @_builtins.property
    @pulumi.getter(name="includeCloudStorageBuckets")
    def include_cloud_storage_buckets(self) -> Sequence['outputs.GetInsightsDatasetConfigIncludeCloudStorageBucketResult']:
        return pulumi.get(self, "include_cloud_storage_buckets")

    @_builtins.property
    @pulumi.getter(name="includeCloudStorageLocations")
    def include_cloud_storage_locations(self) -> Sequence['outputs.GetInsightsDatasetConfigIncludeCloudStorageLocationResult']:
        return pulumi.get(self, "include_cloud_storage_locations")

    @_builtins.property
    @pulumi.getter(name="includeNewlyCreatedBuckets")
    def include_newly_created_buckets(self) -> _builtins.bool:
        return pulumi.get(self, "include_newly_created_buckets")

    @_builtins.property
    @pulumi.getter(name="linkDataset")
    def link_dataset(self) -> _builtins.bool:
        return pulumi.get(self, "link_dataset")

    @_builtins.property
    @pulumi.getter
    def links(self) -> Sequence['outputs.GetInsightsDatasetConfigLinkResult']:
        return pulumi.get(self, "links")

    @_builtins.property
    @pulumi.getter
    def location(self) -> _builtins.str:
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="organizationNumber")
    def organization_number(self) -> _builtins.str:
        return pulumi.get(self, "organization_number")

    @_builtins.property
    @pulumi.getter(name="organizationScope")
    def organization_scope(self) -> _builtins.bool:
        return pulumi.get(self, "organization_scope")

    @_builtins.property
    @pulumi.getter
    def project(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "project")

    @_builtins.property
    @pulumi.getter(name="retentionPeriodDays")
    def retention_period_days(self) -> _builtins.int:
        return pulumi.get(self, "retention_period_days")

    @_builtins.property
    @pulumi.getter(name="sourceFolders")
    def source_folders(self) -> Sequence['outputs.GetInsightsDatasetConfigSourceFolderResult']:
        return pulumi.get(self, "source_folders")

    @_builtins.property
    @pulumi.getter(name="sourceProjects")
    def source_projects(self) -> Sequence['outputs.GetInsightsDatasetConfigSourceProjectResult']:
        return pulumi.get(self, "source_projects")

    @_builtins.property
    @pulumi.getter
    def uid(self) -> _builtins.str:
        return pulumi.get(self, "uid")

    @_builtins.property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> _builtins.str:
        return pulumi.get(self, "update_time")


class AwaitableGetInsightsDatasetConfigResult(GetInsightsDatasetConfigResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetInsightsDatasetConfigResult(
            create_time=self.create_time,
            dataset_config_id=self.dataset_config_id,
            dataset_config_state=self.dataset_config_state,
            description=self.description,
            exclude_cloud_storage_buckets=self.exclude_cloud_storage_buckets,
            exclude_cloud_storage_locations=self.exclude_cloud_storage_locations,
            id=self.id,
            identities=self.identities,
            include_cloud_storage_buckets=self.include_cloud_storage_buckets,
            include_cloud_storage_locations=self.include_cloud_storage_locations,
            include_newly_created_buckets=self.include_newly_created_buckets,
            link_dataset=self.link_dataset,
            links=self.links,
            location=self.location,
            name=self.name,
            organization_number=self.organization_number,
            organization_scope=self.organization_scope,
            project=self.project,
            retention_period_days=self.retention_period_days,
            source_folders=self.source_folders,
            source_projects=self.source_projects,
            uid=self.uid,
            update_time=self.update_time)


def get_insights_dataset_config(dataset_config_id: Optional[_builtins.str] = None,
                                location: Optional[_builtins.str] = None,
                                project: Optional[_builtins.str] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetInsightsDatasetConfigResult:
    """
    Use this data source to get information about a Storage Insights Dataset Config resource.
    See [the official documentation](https://cloud.google.com/storage/docs/insights/datasets)
    and
    [API](https://cloud.google.com/storage/docs/insights/reference/rest/v1/projects.locations.datasetConfigs).

    ## Example Usage

    ```python
    import pulumi
    import pulumi_gcp as gcp

    sample_config = gcp.storage.get_insights_dataset_config(project="sample_project",
        location="sample_location",
        dataset_config_id="sample_dataset_config_id")
    ```


    :param _builtins.str dataset_config_id: The user-defined ID of the DatasetConfig
    :param _builtins.str location: The location of the Dataset Config.
    :param _builtins.str project: The name of the GCP project in which dataset config exists. Can be configured through config as well.
    """
    __args__ = dict()
    __args__['datasetConfigId'] = dataset_config_id
    __args__['location'] = location
    __args__['project'] = project
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('gcp:storage/getInsightsDatasetConfig:getInsightsDatasetConfig', __args__, opts=opts, typ=GetInsightsDatasetConfigResult).value

    return AwaitableGetInsightsDatasetConfigResult(
        create_time=pulumi.get(__ret__, 'create_time'),
        dataset_config_id=pulumi.get(__ret__, 'dataset_config_id'),
        dataset_config_state=pulumi.get(__ret__, 'dataset_config_state'),
        description=pulumi.get(__ret__, 'description'),
        exclude_cloud_storage_buckets=pulumi.get(__ret__, 'exclude_cloud_storage_buckets'),
        exclude_cloud_storage_locations=pulumi.get(__ret__, 'exclude_cloud_storage_locations'),
        id=pulumi.get(__ret__, 'id'),
        identities=pulumi.get(__ret__, 'identities'),
        include_cloud_storage_buckets=pulumi.get(__ret__, 'include_cloud_storage_buckets'),
        include_cloud_storage_locations=pulumi.get(__ret__, 'include_cloud_storage_locations'),
        include_newly_created_buckets=pulumi.get(__ret__, 'include_newly_created_buckets'),
        link_dataset=pulumi.get(__ret__, 'link_dataset'),
        links=pulumi.get(__ret__, 'links'),
        location=pulumi.get(__ret__, 'location'),
        name=pulumi.get(__ret__, 'name'),
        organization_number=pulumi.get(__ret__, 'organization_number'),
        organization_scope=pulumi.get(__ret__, 'organization_scope'),
        project=pulumi.get(__ret__, 'project'),
        retention_period_days=pulumi.get(__ret__, 'retention_period_days'),
        source_folders=pulumi.get(__ret__, 'source_folders'),
        source_projects=pulumi.get(__ret__, 'source_projects'),
        uid=pulumi.get(__ret__, 'uid'),
        update_time=pulumi.get(__ret__, 'update_time'))
def get_insights_dataset_config_output(dataset_config_id: Optional[pulumi.Input[_builtins.str]] = None,
                                       location: Optional[pulumi.Input[_builtins.str]] = None,
                                       project: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetInsightsDatasetConfigResult]:
    """
    Use this data source to get information about a Storage Insights Dataset Config resource.
    See [the official documentation](https://cloud.google.com/storage/docs/insights/datasets)
    and
    [API](https://cloud.google.com/storage/docs/insights/reference/rest/v1/projects.locations.datasetConfigs).

    ## Example Usage

    ```python
    import pulumi
    import pulumi_gcp as gcp

    sample_config = gcp.storage.get_insights_dataset_config(project="sample_project",
        location="sample_location",
        dataset_config_id="sample_dataset_config_id")
    ```


    :param _builtins.str dataset_config_id: The user-defined ID of the DatasetConfig
    :param _builtins.str location: The location of the Dataset Config.
    :param _builtins.str project: The name of the GCP project in which dataset config exists. Can be configured through config as well.
    """
    __args__ = dict()
    __args__['datasetConfigId'] = dataset_config_id
    __args__['location'] = location
    __args__['project'] = project
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('gcp:storage/getInsightsDatasetConfig:getInsightsDatasetConfig', __args__, opts=opts, typ=GetInsightsDatasetConfigResult)
    return __ret__.apply(lambda __response__: GetInsightsDatasetConfigResult(
        create_time=pulumi.get(__response__, 'create_time'),
        dataset_config_id=pulumi.get(__response__, 'dataset_config_id'),
        dataset_config_state=pulumi.get(__response__, 'dataset_config_state'),
        description=pulumi.get(__response__, 'description'),
        exclude_cloud_storage_buckets=pulumi.get(__response__, 'exclude_cloud_storage_buckets'),
        exclude_cloud_storage_locations=pulumi.get(__response__, 'exclude_cloud_storage_locations'),
        id=pulumi.get(__response__, 'id'),
        identities=pulumi.get(__response__, 'identities'),
        include_cloud_storage_buckets=pulumi.get(__response__, 'include_cloud_storage_buckets'),
        include_cloud_storage_locations=pulumi.get(__response__, 'include_cloud_storage_locations'),
        include_newly_created_buckets=pulumi.get(__response__, 'include_newly_created_buckets'),
        link_dataset=pulumi.get(__response__, 'link_dataset'),
        links=pulumi.get(__response__, 'links'),
        location=pulumi.get(__response__, 'location'),
        name=pulumi.get(__response__, 'name'),
        organization_number=pulumi.get(__response__, 'organization_number'),
        organization_scope=pulumi.get(__response__, 'organization_scope'),
        project=pulumi.get(__response__, 'project'),
        retention_period_days=pulumi.get(__response__, 'retention_period_days'),
        source_folders=pulumi.get(__response__, 'source_folders'),
        source_projects=pulumi.get(__response__, 'source_projects'),
        uid=pulumi.get(__response__, 'uid'),
        update_time=pulumi.get(__response__, 'update_time')))
