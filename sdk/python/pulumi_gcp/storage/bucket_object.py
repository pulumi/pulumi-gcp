# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime

class BucketObject(pulumi.CustomResource):
    """
    Creates a new object inside an existing bucket in Google cloud storage service (GCS). 
    [ACLs](https://cloud.google.com/storage/docs/access-control/lists) can be applied using the `google_storage_object_acl` resource.
     For more information see 
    [the official documentation](https://cloud.google.com/storage/docs/key-terms#objects) 
    and 
    [API](https://cloud.google.com/storage/docs/json_api/v1/objects).
    
    """
    def __init__(__self__, __name__, __opts__=None, bucket=None, cache_control=None, content=None, content_disposition=None, content_encoding=None, content_language=None, content_type=None, detect_md5hash=None, name=None, source=None, storage_class=None):
        """Create a BucketObject resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if not bucket:
            raise TypeError('Missing required property bucket')
        elif not isinstance(bucket, basestring):
            raise TypeError('Expected property bucket to be a basestring')
        __self__.bucket = bucket
        """
        The name of the containing bucket.
        """
        __props__['bucket'] = bucket

        if cache_control and not isinstance(cache_control, basestring):
            raise TypeError('Expected property cache_control to be a basestring')
        __self__.cache_control = cache_control
        """
        [Cache-Control](https://tools.ietf.org/html/rfc7234#section-5.2)
        directive to specify caching behavior of object data. If omitted and object is accessible to all anonymous users, the default will be public, max-age=3600
        """
        __props__['cacheControl'] = cache_control

        if content and not isinstance(content, basestring):
            raise TypeError('Expected property content to be a basestring')
        __self__.content = content
        """
        Data as `string` to be uploaded. Must be defined if
        `source` is not.
        """
        __props__['content'] = content

        if content_disposition and not isinstance(content_disposition, basestring):
            raise TypeError('Expected property content_disposition to be a basestring')
        __self__.content_disposition = content_disposition
        """
        [Content-Disposition](https://tools.ietf.org/html/rfc6266) of the object data.
        """
        __props__['contentDisposition'] = content_disposition

        if content_encoding and not isinstance(content_encoding, basestring):
            raise TypeError('Expected property content_encoding to be a basestring')
        __self__.content_encoding = content_encoding
        """
        [Content-Encoding](https://tools.ietf.org/html/rfc7231#section-3.1.2.2) of the object data.
        """
        __props__['contentEncoding'] = content_encoding

        if content_language and not isinstance(content_language, basestring):
            raise TypeError('Expected property content_language to be a basestring')
        __self__.content_language = content_language
        """
        [Content-Language](https://tools.ietf.org/html/rfc7231#section-3.1.3.2) of the object data.
        """
        __props__['contentLanguage'] = content_language

        if content_type and not isinstance(content_type, basestring):
            raise TypeError('Expected property content_type to be a basestring')
        __self__.content_type = content_type
        """
        [Content-Type](https://tools.ietf.org/html/rfc7231#section-3.1.1.5) of the object data. Defaults to "application/octet-stream" or "text/plain; charset=utf-8".
        """
        __props__['contentType'] = content_type

        if detect_md5hash and not isinstance(detect_md5hash, basestring):
            raise TypeError('Expected property detect_md5hash to be a basestring')
        __self__.detect_md5hash = detect_md5hash
        __props__['detectMd5hash'] = detect_md5hash

        if name and not isinstance(name, basestring):
            raise TypeError('Expected property name to be a basestring')
        __self__.name = name
        """
        The name of the object.
        """
        __props__['name'] = name

        if source and not isinstance(source, basestring):
            raise TypeError('Expected property source to be a basestring')
        __self__.source = source
        """
        A path to the data you want to upload. Must be defined
        if `content` is not.
        """
        __props__['source'] = source

        if storage_class and not isinstance(storage_class, basestring):
            raise TypeError('Expected property storage_class to be a basestring')
        __self__.storage_class = storage_class
        """
        The [StorageClass](https://cloud.google.com/storage/docs/storage-classes) of the new bucket object.
        Supported values include: `MULTI_REGIONAL`, `REGIONAL`, `NEARLINE`, `COLDLINE`. If not provided, this defaults to the bucket's default
        storage class or to a [standard](https://cloud.google.com/storage/docs/storage-classes#standard) class.
        """
        __props__['storageClass'] = storage_class

        __self__.crc32c = pulumi.runtime.UNKNOWN
        """
        (Computed) Base 64 CRC32 hash of the uploaded data.
        """
        __self__.md5hash = pulumi.runtime.UNKNOWN
        """
        (Computed) Base 64 MD5 hash of the uploaded data.
        """

        super(BucketObject, __self__).__init__(
            'gcp:storage/bucketObject:BucketObject',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'bucket' in outs:
            self.bucket = outs['bucket']
        if 'cacheControl' in outs:
            self.cache_control = outs['cacheControl']
        if 'content' in outs:
            self.content = outs['content']
        if 'contentDisposition' in outs:
            self.content_disposition = outs['contentDisposition']
        if 'contentEncoding' in outs:
            self.content_encoding = outs['contentEncoding']
        if 'contentLanguage' in outs:
            self.content_language = outs['contentLanguage']
        if 'contentType' in outs:
            self.content_type = outs['contentType']
        if 'crc32c' in outs:
            self.crc32c = outs['crc32c']
        if 'detectMd5hash' in outs:
            self.detect_md5hash = outs['detectMd5hash']
        if 'md5hash' in outs:
            self.md5hash = outs['md5hash']
        if 'name' in outs:
            self.name = outs['name']
        if 'source' in outs:
            self.source = outs['source']
        if 'storageClass' in outs:
            self.storage_class = outs['storageClass']
