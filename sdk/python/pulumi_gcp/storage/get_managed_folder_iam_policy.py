# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetManagedFolderIamPolicyResult',
    'AwaitableGetManagedFolderIamPolicyResult',
    'get_managed_folder_iam_policy',
    'get_managed_folder_iam_policy_output',
]

@pulumi.output_type
class GetManagedFolderIamPolicyResult:
    """
    A collection of values returned by getManagedFolderIamPolicy.
    """
    def __init__(__self__, bucket=None, etag=None, id=None, managed_folder=None, policy_data=None):
        if bucket and not isinstance(bucket, str):
            raise TypeError("Expected argument 'bucket' to be a str")
        pulumi.set(__self__, "bucket", bucket)
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        pulumi.set(__self__, "etag", etag)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if managed_folder and not isinstance(managed_folder, str):
            raise TypeError("Expected argument 'managed_folder' to be a str")
        pulumi.set(__self__, "managed_folder", managed_folder)
        if policy_data and not isinstance(policy_data, str):
            raise TypeError("Expected argument 'policy_data' to be a str")
        pulumi.set(__self__, "policy_data", policy_data)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def etag(self) -> str:
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="managedFolder")
    def managed_folder(self) -> str:
        return pulumi.get(self, "managed_folder")

    @property
    @pulumi.getter(name="policyData")
    def policy_data(self) -> str:
        return pulumi.get(self, "policy_data")


class AwaitableGetManagedFolderIamPolicyResult(GetManagedFolderIamPolicyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetManagedFolderIamPolicyResult(
            bucket=self.bucket,
            etag=self.etag,
            id=self.id,
            managed_folder=self.managed_folder,
            policy_data=self.policy_data)


def get_managed_folder_iam_policy(bucket: Optional[str] = None,
                                  managed_folder: Optional[str] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetManagedFolderIamPolicyResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['bucket'] = bucket
    __args__['managedFolder'] = managed_folder
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('gcp:storage/getManagedFolderIamPolicy:getManagedFolderIamPolicy', __args__, opts=opts, typ=GetManagedFolderIamPolicyResult).value

    return AwaitableGetManagedFolderIamPolicyResult(
        bucket=pulumi.get(__ret__, 'bucket'),
        etag=pulumi.get(__ret__, 'etag'),
        id=pulumi.get(__ret__, 'id'),
        managed_folder=pulumi.get(__ret__, 'managed_folder'),
        policy_data=pulumi.get(__ret__, 'policy_data'))


@_utilities.lift_output_func(get_managed_folder_iam_policy)
def get_managed_folder_iam_policy_output(bucket: Optional[pulumi.Input[str]] = None,
                                         managed_folder: Optional[pulumi.Input[str]] = None,
                                         opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetManagedFolderIamPolicyResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
