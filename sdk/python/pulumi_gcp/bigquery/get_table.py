# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetTableResult',
    'AwaitableGetTableResult',
    'get_table',
    'get_table_output',
]

@pulumi.output_type
class GetTableResult:
    """
    A collection of values returned by getTable.
    """
    def __init__(__self__, biglake_configurations=None, clusterings=None, creation_time=None, dataset_id=None, deletion_protection=None, description=None, effective_labels=None, encryption_configurations=None, etag=None, expiration_time=None, external_catalog_table_options=None, external_data_configurations=None, friendly_name=None, id=None, labels=None, last_modified_time=None, location=None, materialized_views=None, max_staleness=None, num_bytes=None, num_long_term_bytes=None, num_rows=None, project=None, pulumi_labels=None, range_partitionings=None, require_partition_filter=None, resource_tags=None, schema=None, schema_foreign_type_infos=None, self_link=None, table_constraints=None, table_id=None, table_metadata_view=None, table_replication_infos=None, time_partitionings=None, type=None, views=None):
        if biglake_configurations and not isinstance(biglake_configurations, list):
            raise TypeError("Expected argument 'biglake_configurations' to be a list")
        pulumi.set(__self__, "biglake_configurations", biglake_configurations)
        if clusterings and not isinstance(clusterings, list):
            raise TypeError("Expected argument 'clusterings' to be a list")
        pulumi.set(__self__, "clusterings", clusterings)
        if creation_time and not isinstance(creation_time, int):
            raise TypeError("Expected argument 'creation_time' to be a int")
        pulumi.set(__self__, "creation_time", creation_time)
        if dataset_id and not isinstance(dataset_id, str):
            raise TypeError("Expected argument 'dataset_id' to be a str")
        pulumi.set(__self__, "dataset_id", dataset_id)
        if deletion_protection and not isinstance(deletion_protection, bool):
            raise TypeError("Expected argument 'deletion_protection' to be a bool")
        pulumi.set(__self__, "deletion_protection", deletion_protection)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if effective_labels and not isinstance(effective_labels, dict):
            raise TypeError("Expected argument 'effective_labels' to be a dict")
        pulumi.set(__self__, "effective_labels", effective_labels)
        if encryption_configurations and not isinstance(encryption_configurations, list):
            raise TypeError("Expected argument 'encryption_configurations' to be a list")
        pulumi.set(__self__, "encryption_configurations", encryption_configurations)
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        pulumi.set(__self__, "etag", etag)
        if expiration_time and not isinstance(expiration_time, int):
            raise TypeError("Expected argument 'expiration_time' to be a int")
        pulumi.set(__self__, "expiration_time", expiration_time)
        if external_catalog_table_options and not isinstance(external_catalog_table_options, list):
            raise TypeError("Expected argument 'external_catalog_table_options' to be a list")
        pulumi.set(__self__, "external_catalog_table_options", external_catalog_table_options)
        if external_data_configurations and not isinstance(external_data_configurations, list):
            raise TypeError("Expected argument 'external_data_configurations' to be a list")
        pulumi.set(__self__, "external_data_configurations", external_data_configurations)
        if friendly_name and not isinstance(friendly_name, str):
            raise TypeError("Expected argument 'friendly_name' to be a str")
        pulumi.set(__self__, "friendly_name", friendly_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        pulumi.set(__self__, "labels", labels)
        if last_modified_time and not isinstance(last_modified_time, int):
            raise TypeError("Expected argument 'last_modified_time' to be a int")
        pulumi.set(__self__, "last_modified_time", last_modified_time)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if materialized_views and not isinstance(materialized_views, list):
            raise TypeError("Expected argument 'materialized_views' to be a list")
        pulumi.set(__self__, "materialized_views", materialized_views)
        if max_staleness and not isinstance(max_staleness, str):
            raise TypeError("Expected argument 'max_staleness' to be a str")
        pulumi.set(__self__, "max_staleness", max_staleness)
        if num_bytes and not isinstance(num_bytes, int):
            raise TypeError("Expected argument 'num_bytes' to be a int")
        pulumi.set(__self__, "num_bytes", num_bytes)
        if num_long_term_bytes and not isinstance(num_long_term_bytes, int):
            raise TypeError("Expected argument 'num_long_term_bytes' to be a int")
        pulumi.set(__self__, "num_long_term_bytes", num_long_term_bytes)
        if num_rows and not isinstance(num_rows, int):
            raise TypeError("Expected argument 'num_rows' to be a int")
        pulumi.set(__self__, "num_rows", num_rows)
        if project and not isinstance(project, str):
            raise TypeError("Expected argument 'project' to be a str")
        pulumi.set(__self__, "project", project)
        if pulumi_labels and not isinstance(pulumi_labels, dict):
            raise TypeError("Expected argument 'pulumi_labels' to be a dict")
        pulumi.set(__self__, "pulumi_labels", pulumi_labels)
        if range_partitionings and not isinstance(range_partitionings, list):
            raise TypeError("Expected argument 'range_partitionings' to be a list")
        pulumi.set(__self__, "range_partitionings", range_partitionings)
        if require_partition_filter and not isinstance(require_partition_filter, bool):
            raise TypeError("Expected argument 'require_partition_filter' to be a bool")
        pulumi.set(__self__, "require_partition_filter", require_partition_filter)
        if resource_tags and not isinstance(resource_tags, dict):
            raise TypeError("Expected argument 'resource_tags' to be a dict")
        pulumi.set(__self__, "resource_tags", resource_tags)
        if schema and not isinstance(schema, str):
            raise TypeError("Expected argument 'schema' to be a str")
        pulumi.set(__self__, "schema", schema)
        if schema_foreign_type_infos and not isinstance(schema_foreign_type_infos, list):
            raise TypeError("Expected argument 'schema_foreign_type_infos' to be a list")
        pulumi.set(__self__, "schema_foreign_type_infos", schema_foreign_type_infos)
        if self_link and not isinstance(self_link, str):
            raise TypeError("Expected argument 'self_link' to be a str")
        pulumi.set(__self__, "self_link", self_link)
        if table_constraints and not isinstance(table_constraints, list):
            raise TypeError("Expected argument 'table_constraints' to be a list")
        pulumi.set(__self__, "table_constraints", table_constraints)
        if table_id and not isinstance(table_id, str):
            raise TypeError("Expected argument 'table_id' to be a str")
        pulumi.set(__self__, "table_id", table_id)
        if table_metadata_view and not isinstance(table_metadata_view, str):
            raise TypeError("Expected argument 'table_metadata_view' to be a str")
        pulumi.set(__self__, "table_metadata_view", table_metadata_view)
        if table_replication_infos and not isinstance(table_replication_infos, list):
            raise TypeError("Expected argument 'table_replication_infos' to be a list")
        pulumi.set(__self__, "table_replication_infos", table_replication_infos)
        if time_partitionings and not isinstance(time_partitionings, list):
            raise TypeError("Expected argument 'time_partitionings' to be a list")
        pulumi.set(__self__, "time_partitionings", time_partitionings)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if views and not isinstance(views, list):
            raise TypeError("Expected argument 'views' to be a list")
        pulumi.set(__self__, "views", views)

    @property
    @pulumi.getter(name="biglakeConfigurations")
    def biglake_configurations(self) -> Sequence['outputs.GetTableBiglakeConfigurationResult']:
        return pulumi.get(self, "biglake_configurations")

    @property
    @pulumi.getter
    def clusterings(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "clusterings")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> builtins.int:
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter(name="datasetId")
    def dataset_id(self) -> builtins.str:
        return pulumi.get(self, "dataset_id")

    @property
    @pulumi.getter(name="deletionProtection")
    def deletion_protection(self) -> builtins.bool:
        return pulumi.get(self, "deletion_protection")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="effectiveLabels")
    def effective_labels(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "effective_labels")

    @property
    @pulumi.getter(name="encryptionConfigurations")
    def encryption_configurations(self) -> Sequence['outputs.GetTableEncryptionConfigurationResult']:
        return pulumi.get(self, "encryption_configurations")

    @property
    @pulumi.getter
    def etag(self) -> builtins.str:
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter(name="expirationTime")
    def expiration_time(self) -> builtins.int:
        return pulumi.get(self, "expiration_time")

    @property
    @pulumi.getter(name="externalCatalogTableOptions")
    def external_catalog_table_options(self) -> Sequence['outputs.GetTableExternalCatalogTableOptionResult']:
        return pulumi.get(self, "external_catalog_table_options")

    @property
    @pulumi.getter(name="externalDataConfigurations")
    def external_data_configurations(self) -> Sequence['outputs.GetTableExternalDataConfigurationResult']:
        return pulumi.get(self, "external_data_configurations")

    @property
    @pulumi.getter(name="friendlyName")
    def friendly_name(self) -> builtins.str:
        return pulumi.get(self, "friendly_name")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="lastModifiedTime")
    def last_modified_time(self) -> builtins.int:
        return pulumi.get(self, "last_modified_time")

    @property
    @pulumi.getter
    def location(self) -> builtins.str:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="materializedViews")
    def materialized_views(self) -> Sequence['outputs.GetTableMaterializedViewResult']:
        return pulumi.get(self, "materialized_views")

    @property
    @pulumi.getter(name="maxStaleness")
    def max_staleness(self) -> builtins.str:
        return pulumi.get(self, "max_staleness")

    @property
    @pulumi.getter(name="numBytes")
    def num_bytes(self) -> builtins.int:
        return pulumi.get(self, "num_bytes")

    @property
    @pulumi.getter(name="numLongTermBytes")
    def num_long_term_bytes(self) -> builtins.int:
        return pulumi.get(self, "num_long_term_bytes")

    @property
    @pulumi.getter(name="numRows")
    def num_rows(self) -> builtins.int:
        return pulumi.get(self, "num_rows")

    @property
    @pulumi.getter
    def project(self) -> Optional[builtins.str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="pulumiLabels")
    def pulumi_labels(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "pulumi_labels")

    @property
    @pulumi.getter(name="rangePartitionings")
    def range_partitionings(self) -> Sequence['outputs.GetTableRangePartitioningResult']:
        return pulumi.get(self, "range_partitionings")

    @property
    @pulumi.getter(name="requirePartitionFilter")
    def require_partition_filter(self) -> builtins.bool:
        return pulumi.get(self, "require_partition_filter")

    @property
    @pulumi.getter(name="resourceTags")
    def resource_tags(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "resource_tags")

    @property
    @pulumi.getter
    def schema(self) -> builtins.str:
        return pulumi.get(self, "schema")

    @property
    @pulumi.getter(name="schemaForeignTypeInfos")
    def schema_foreign_type_infos(self) -> Sequence['outputs.GetTableSchemaForeignTypeInfoResult']:
        return pulumi.get(self, "schema_foreign_type_infos")

    @property
    @pulumi.getter(name="selfLink")
    def self_link(self) -> builtins.str:
        return pulumi.get(self, "self_link")

    @property
    @pulumi.getter(name="tableConstraints")
    def table_constraints(self) -> Sequence['outputs.GetTableTableConstraintResult']:
        return pulumi.get(self, "table_constraints")

    @property
    @pulumi.getter(name="tableId")
    def table_id(self) -> builtins.str:
        return pulumi.get(self, "table_id")

    @property
    @pulumi.getter(name="tableMetadataView")
    def table_metadata_view(self) -> builtins.str:
        return pulumi.get(self, "table_metadata_view")

    @property
    @pulumi.getter(name="tableReplicationInfos")
    def table_replication_infos(self) -> Sequence['outputs.GetTableTableReplicationInfoResult']:
        return pulumi.get(self, "table_replication_infos")

    @property
    @pulumi.getter(name="timePartitionings")
    def time_partitionings(self) -> Sequence['outputs.GetTableTimePartitioningResult']:
        return pulumi.get(self, "time_partitionings")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def views(self) -> Sequence['outputs.GetTableViewResult']:
        return pulumi.get(self, "views")


class AwaitableGetTableResult(GetTableResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTableResult(
            biglake_configurations=self.biglake_configurations,
            clusterings=self.clusterings,
            creation_time=self.creation_time,
            dataset_id=self.dataset_id,
            deletion_protection=self.deletion_protection,
            description=self.description,
            effective_labels=self.effective_labels,
            encryption_configurations=self.encryption_configurations,
            etag=self.etag,
            expiration_time=self.expiration_time,
            external_catalog_table_options=self.external_catalog_table_options,
            external_data_configurations=self.external_data_configurations,
            friendly_name=self.friendly_name,
            id=self.id,
            labels=self.labels,
            last_modified_time=self.last_modified_time,
            location=self.location,
            materialized_views=self.materialized_views,
            max_staleness=self.max_staleness,
            num_bytes=self.num_bytes,
            num_long_term_bytes=self.num_long_term_bytes,
            num_rows=self.num_rows,
            project=self.project,
            pulumi_labels=self.pulumi_labels,
            range_partitionings=self.range_partitionings,
            require_partition_filter=self.require_partition_filter,
            resource_tags=self.resource_tags,
            schema=self.schema,
            schema_foreign_type_infos=self.schema_foreign_type_infos,
            self_link=self.self_link,
            table_constraints=self.table_constraints,
            table_id=self.table_id,
            table_metadata_view=self.table_metadata_view,
            table_replication_infos=self.table_replication_infos,
            time_partitionings=self.time_partitionings,
            type=self.type,
            views=self.views)


def get_table(dataset_id: Optional[builtins.str] = None,
              project: Optional[builtins.str] = None,
              table_id: Optional[builtins.str] = None,
              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTableResult:
    """
    Get a specific table in a BigQuery dataset. For more information see
    the [official documentation](https://cloud.google.com/bigquery/docs)
    and [API](https://cloud.google.com/bigquery/docs/reference/rest/v2/tables/get).

    ## Example Usage

    ```python
    import pulumi
    import pulumi_gcp as gcp

    table = gcp.bigquery.get_table(project="my-project",
        dataset_id="my-bq-dataset",
        table_id="my-table")
    ```


    :param builtins.str dataset_id: The dataset ID.
    :param builtins.str project: The ID of the project in which the resource belongs.
           If it is not provided, the provider project is used.
    :param builtins.str table_id: The table ID.
    """
    __args__ = dict()
    __args__['datasetId'] = dataset_id
    __args__['project'] = project
    __args__['tableId'] = table_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('gcp:bigquery/getTable:getTable', __args__, opts=opts, typ=GetTableResult).value

    return AwaitableGetTableResult(
        biglake_configurations=pulumi.get(__ret__, 'biglake_configurations'),
        clusterings=pulumi.get(__ret__, 'clusterings'),
        creation_time=pulumi.get(__ret__, 'creation_time'),
        dataset_id=pulumi.get(__ret__, 'dataset_id'),
        deletion_protection=pulumi.get(__ret__, 'deletion_protection'),
        description=pulumi.get(__ret__, 'description'),
        effective_labels=pulumi.get(__ret__, 'effective_labels'),
        encryption_configurations=pulumi.get(__ret__, 'encryption_configurations'),
        etag=pulumi.get(__ret__, 'etag'),
        expiration_time=pulumi.get(__ret__, 'expiration_time'),
        external_catalog_table_options=pulumi.get(__ret__, 'external_catalog_table_options'),
        external_data_configurations=pulumi.get(__ret__, 'external_data_configurations'),
        friendly_name=pulumi.get(__ret__, 'friendly_name'),
        id=pulumi.get(__ret__, 'id'),
        labels=pulumi.get(__ret__, 'labels'),
        last_modified_time=pulumi.get(__ret__, 'last_modified_time'),
        location=pulumi.get(__ret__, 'location'),
        materialized_views=pulumi.get(__ret__, 'materialized_views'),
        max_staleness=pulumi.get(__ret__, 'max_staleness'),
        num_bytes=pulumi.get(__ret__, 'num_bytes'),
        num_long_term_bytes=pulumi.get(__ret__, 'num_long_term_bytes'),
        num_rows=pulumi.get(__ret__, 'num_rows'),
        project=pulumi.get(__ret__, 'project'),
        pulumi_labels=pulumi.get(__ret__, 'pulumi_labels'),
        range_partitionings=pulumi.get(__ret__, 'range_partitionings'),
        require_partition_filter=pulumi.get(__ret__, 'require_partition_filter'),
        resource_tags=pulumi.get(__ret__, 'resource_tags'),
        schema=pulumi.get(__ret__, 'schema'),
        schema_foreign_type_infos=pulumi.get(__ret__, 'schema_foreign_type_infos'),
        self_link=pulumi.get(__ret__, 'self_link'),
        table_constraints=pulumi.get(__ret__, 'table_constraints'),
        table_id=pulumi.get(__ret__, 'table_id'),
        table_metadata_view=pulumi.get(__ret__, 'table_metadata_view'),
        table_replication_infos=pulumi.get(__ret__, 'table_replication_infos'),
        time_partitionings=pulumi.get(__ret__, 'time_partitionings'),
        type=pulumi.get(__ret__, 'type'),
        views=pulumi.get(__ret__, 'views'))
def get_table_output(dataset_id: Optional[pulumi.Input[builtins.str]] = None,
                     project: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                     table_id: Optional[pulumi.Input[builtins.str]] = None,
                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetTableResult]:
    """
    Get a specific table in a BigQuery dataset. For more information see
    the [official documentation](https://cloud.google.com/bigquery/docs)
    and [API](https://cloud.google.com/bigquery/docs/reference/rest/v2/tables/get).

    ## Example Usage

    ```python
    import pulumi
    import pulumi_gcp as gcp

    table = gcp.bigquery.get_table(project="my-project",
        dataset_id="my-bq-dataset",
        table_id="my-table")
    ```


    :param builtins.str dataset_id: The dataset ID.
    :param builtins.str project: The ID of the project in which the resource belongs.
           If it is not provided, the provider project is used.
    :param builtins.str table_id: The table ID.
    """
    __args__ = dict()
    __args__['datasetId'] = dataset_id
    __args__['project'] = project
    __args__['tableId'] = table_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('gcp:bigquery/getTable:getTable', __args__, opts=opts, typ=GetTableResult)
    return __ret__.apply(lambda __response__: GetTableResult(
        biglake_configurations=pulumi.get(__response__, 'biglake_configurations'),
        clusterings=pulumi.get(__response__, 'clusterings'),
        creation_time=pulumi.get(__response__, 'creation_time'),
        dataset_id=pulumi.get(__response__, 'dataset_id'),
        deletion_protection=pulumi.get(__response__, 'deletion_protection'),
        description=pulumi.get(__response__, 'description'),
        effective_labels=pulumi.get(__response__, 'effective_labels'),
        encryption_configurations=pulumi.get(__response__, 'encryption_configurations'),
        etag=pulumi.get(__response__, 'etag'),
        expiration_time=pulumi.get(__response__, 'expiration_time'),
        external_catalog_table_options=pulumi.get(__response__, 'external_catalog_table_options'),
        external_data_configurations=pulumi.get(__response__, 'external_data_configurations'),
        friendly_name=pulumi.get(__response__, 'friendly_name'),
        id=pulumi.get(__response__, 'id'),
        labels=pulumi.get(__response__, 'labels'),
        last_modified_time=pulumi.get(__response__, 'last_modified_time'),
        location=pulumi.get(__response__, 'location'),
        materialized_views=pulumi.get(__response__, 'materialized_views'),
        max_staleness=pulumi.get(__response__, 'max_staleness'),
        num_bytes=pulumi.get(__response__, 'num_bytes'),
        num_long_term_bytes=pulumi.get(__response__, 'num_long_term_bytes'),
        num_rows=pulumi.get(__response__, 'num_rows'),
        project=pulumi.get(__response__, 'project'),
        pulumi_labels=pulumi.get(__response__, 'pulumi_labels'),
        range_partitionings=pulumi.get(__response__, 'range_partitionings'),
        require_partition_filter=pulumi.get(__response__, 'require_partition_filter'),
        resource_tags=pulumi.get(__response__, 'resource_tags'),
        schema=pulumi.get(__response__, 'schema'),
        schema_foreign_type_infos=pulumi.get(__response__, 'schema_foreign_type_infos'),
        self_link=pulumi.get(__response__, 'self_link'),
        table_constraints=pulumi.get(__response__, 'table_constraints'),
        table_id=pulumi.get(__response__, 'table_id'),
        table_metadata_view=pulumi.get(__response__, 'table_metadata_view'),
        table_replication_infos=pulumi.get(__response__, 'table_replication_infos'),
        time_partitionings=pulumi.get(__response__, 'time_partitionings'),
        type=pulumi.get(__response__, 'type'),
        views=pulumi.get(__response__, 'views')))
