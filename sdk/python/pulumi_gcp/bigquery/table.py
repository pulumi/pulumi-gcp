# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime

class Table(pulumi.CustomResource):
    """
    Creates a table resource in a dataset for Google BigQuery. For more information see
    [the official documentation](https://cloud.google.com/bigquery/docs/) and
    [API](https://cloud.google.com/bigquery/docs/reference/rest/v2/tables).
    
    """
    def __init__(__self__, __name__, __opts__=None, dataset_id=None, description=None, expiration_time=None, friendly_name=None, labels=None, project=None, schema=None, table_id=None, time_partitioning=None, view=None):
        """Create a Table resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, basestring):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if not dataset_id:
            raise TypeError('Missing required property dataset_id')
        elif not isinstance(dataset_id, basestring):
            raise TypeError('Expected property dataset_id to be a basestring')
        __self__.dataset_id = dataset_id
        """
        The dataset ID to create the table in.
        Changing this forces a new resource to be created.
        """
        __props__['datasetId'] = dataset_id

        if description and not isinstance(description, basestring):
            raise TypeError('Expected property description to be a basestring')
        __self__.description = description
        """
        The field description.
        """
        __props__['description'] = description

        if expiration_time and not isinstance(expiration_time, int):
            raise TypeError('Expected property expiration_time to be a int')
        __self__.expiration_time = expiration_time
        """
        The time when this table expires, in
        milliseconds since the epoch. If not present, the table will persist
        indefinitely. Expired tables will be deleted and their storage
        reclaimed.
        """
        __props__['expirationTime'] = expiration_time

        if friendly_name and not isinstance(friendly_name, basestring):
            raise TypeError('Expected property friendly_name to be a basestring')
        __self__.friendly_name = friendly_name
        """
        A descriptive name for the table.
        """
        __props__['friendlyName'] = friendly_name

        if labels and not isinstance(labels, dict):
            raise TypeError('Expected property labels to be a dict')
        __self__.labels = labels
        """
        A mapping of labels to assign to the resource.
        """
        __props__['labels'] = labels

        if project and not isinstance(project, basestring):
            raise TypeError('Expected property project to be a basestring')
        __self__.project = project
        """
        The ID of the project in which the resource belongs. If it
        is not provided, the provider project is used.
        """
        __props__['project'] = project

        if schema and not isinstance(schema, basestring):
            raise TypeError('Expected property schema to be a basestring')
        __self__.schema = schema
        """
        A JSON schema for the table.
        """
        __props__['schema'] = schema

        if not table_id:
            raise TypeError('Missing required property table_id')
        elif not isinstance(table_id, basestring):
            raise TypeError('Expected property table_id to be a basestring')
        __self__.table_id = table_id
        """
        A unique ID for the resource.
        Changing this forces a new resource to be created.
        """
        __props__['tableId'] = table_id

        if time_partitioning and not isinstance(time_partitioning, dict):
            raise TypeError('Expected property time_partitioning to be a dict')
        __self__.time_partitioning = time_partitioning
        """
        If specified, configures time-based
        partitioning for this table. Structure is documented below.
        """
        __props__['timePartitioning'] = time_partitioning

        if view and not isinstance(view, dict):
            raise TypeError('Expected property view to be a dict')
        __self__.view = view
        """
        If specified, configures this table as a view.
        Structure is documented below.
        """
        __props__['view'] = view

        __self__.creation_time = pulumi.runtime.UNKNOWN
        """
        The time when this table was created, in milliseconds since the epoch.
        """
        __self__.etag = pulumi.runtime.UNKNOWN
        """
        A hash of the resource.
        """
        __self__.last_modified_time = pulumi.runtime.UNKNOWN
        """
        The time when this table was last modified, in milliseconds since the epoch.
        """
        __self__.location = pulumi.runtime.UNKNOWN
        """
        The geographic location where the table resides. This value is inherited from the dataset.
        """
        __self__.num_bytes = pulumi.runtime.UNKNOWN
        """
        The size of this table in bytes, excluding any data in the streaming buffer.
        """
        __self__.num_long_term_bytes = pulumi.runtime.UNKNOWN
        """
        The number of bytes in the table that are considered "long-term storage".
        """
        __self__.num_rows = pulumi.runtime.UNKNOWN
        """
        The number of rows of data in this table, excluding any data in the streaming buffer.
        """
        __self__.self_link = pulumi.runtime.UNKNOWN
        """
        The URI of the created resource.
        """
        __self__.type = pulumi.runtime.UNKNOWN
        """
        Describes the table type.
        """

        super(Table, __self__).__init__(
            'gcp:bigquery/table:Table',
            __name__,
            __props__,
            __opts__)

    def set_outputs(self, outs):
        if 'creationTime' in outs:
            self.creation_time = outs['creationTime']
        if 'datasetId' in outs:
            self.dataset_id = outs['datasetId']
        if 'description' in outs:
            self.description = outs['description']
        if 'etag' in outs:
            self.etag = outs['etag']
        if 'expirationTime' in outs:
            self.expiration_time = outs['expirationTime']
        if 'friendlyName' in outs:
            self.friendly_name = outs['friendlyName']
        if 'labels' in outs:
            self.labels = outs['labels']
        if 'lastModifiedTime' in outs:
            self.last_modified_time = outs['lastModifiedTime']
        if 'location' in outs:
            self.location = outs['location']
        if 'numBytes' in outs:
            self.num_bytes = outs['numBytes']
        if 'numLongTermBytes' in outs:
            self.num_long_term_bytes = outs['numLongTermBytes']
        if 'numRows' in outs:
            self.num_rows = outs['numRows']
        if 'project' in outs:
            self.project = outs['project']
        if 'schema' in outs:
            self.schema = outs['schema']
        if 'selfLink' in outs:
            self.self_link = outs['selfLink']
        if 'tableId' in outs:
            self.table_id = outs['tableId']
        if 'timePartitioning' in outs:
            self.time_partitioning = outs['timePartitioning']
        if 'type' in outs:
            self.type = outs['type']
        if 'view' in outs:
            self.view = outs['view']
