# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetSecurityGatewayApplicationIamPolicyResult',
    'AwaitableGetSecurityGatewayApplicationIamPolicyResult',
    'get_security_gateway_application_iam_policy',
    'get_security_gateway_application_iam_policy_output',
]

@pulumi.output_type
class GetSecurityGatewayApplicationIamPolicyResult:
    """
    A collection of values returned by getSecurityGatewayApplicationIamPolicy.
    """
    def __init__(__self__, application_id=None, etag=None, id=None, policy_data=None, project=None, security_gateway_id=None):
        if application_id and not isinstance(application_id, str):
            raise TypeError("Expected argument 'application_id' to be a str")
        pulumi.set(__self__, "application_id", application_id)
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        pulumi.set(__self__, "etag", etag)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if policy_data and not isinstance(policy_data, str):
            raise TypeError("Expected argument 'policy_data' to be a str")
        pulumi.set(__self__, "policy_data", policy_data)
        if project and not isinstance(project, str):
            raise TypeError("Expected argument 'project' to be a str")
        pulumi.set(__self__, "project", project)
        if security_gateway_id and not isinstance(security_gateway_id, str):
            raise TypeError("Expected argument 'security_gateway_id' to be a str")
        pulumi.set(__self__, "security_gateway_id", security_gateway_id)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> builtins.str:
        return pulumi.get(self, "application_id")

    @property
    @pulumi.getter
    def etag(self) -> builtins.str:
        """
        (Computed) The etag of the IAM policy.
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="policyData")
    def policy_data(self) -> builtins.str:
        """
        (Required only by `beyondcorp.SecurityGatewayApplicationIamPolicy`) The policy data generated by
        a `organizations_get_iam_policy` data source.
        """
        return pulumi.get(self, "policy_data")

    @property
    @pulumi.getter
    def project(self) -> builtins.str:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="securityGatewayId")
    def security_gateway_id(self) -> builtins.str:
        return pulumi.get(self, "security_gateway_id")


class AwaitableGetSecurityGatewayApplicationIamPolicyResult(GetSecurityGatewayApplicationIamPolicyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSecurityGatewayApplicationIamPolicyResult(
            application_id=self.application_id,
            etag=self.etag,
            id=self.id,
            policy_data=self.policy_data,
            project=self.project,
            security_gateway_id=self.security_gateway_id)


def get_security_gateway_application_iam_policy(application_id: Optional[builtins.str] = None,
                                                project: Optional[builtins.str] = None,
                                                security_gateway_id: Optional[builtins.str] = None,
                                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSecurityGatewayApplicationIamPolicyResult:
    """
    Retrieves the current IAM policy data for securitygatewayapplication

    ## Example Usage

    ```python
    import pulumi
    import pulumi_gcp as gcp

    policy = gcp.beyondcorp.get_security_gateway_application_iam_policy(project=example["project"],
        security_gateway_id=example["securityGatewayId"],
        application_id=example["applicationId"])
    ```


    :param builtins.str application_id: Used to find the parent resource to bind the IAM policy to
    :param builtins.str project: The ID of the project in which the resource belongs.
           If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
    :param builtins.str security_gateway_id: ID of the Security Gateway resource this belongs to. Used to find the parent resource to bind the IAM policy to
    """
    __args__ = dict()
    __args__['applicationId'] = application_id
    __args__['project'] = project
    __args__['securityGatewayId'] = security_gateway_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('gcp:beyondcorp/getSecurityGatewayApplicationIamPolicy:getSecurityGatewayApplicationIamPolicy', __args__, opts=opts, typ=GetSecurityGatewayApplicationIamPolicyResult).value

    return AwaitableGetSecurityGatewayApplicationIamPolicyResult(
        application_id=pulumi.get(__ret__, 'application_id'),
        etag=pulumi.get(__ret__, 'etag'),
        id=pulumi.get(__ret__, 'id'),
        policy_data=pulumi.get(__ret__, 'policy_data'),
        project=pulumi.get(__ret__, 'project'),
        security_gateway_id=pulumi.get(__ret__, 'security_gateway_id'))
def get_security_gateway_application_iam_policy_output(application_id: Optional[pulumi.Input[builtins.str]] = None,
                                                       project: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                                                       security_gateway_id: Optional[pulumi.Input[builtins.str]] = None,
                                                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSecurityGatewayApplicationIamPolicyResult]:
    """
    Retrieves the current IAM policy data for securitygatewayapplication

    ## Example Usage

    ```python
    import pulumi
    import pulumi_gcp as gcp

    policy = gcp.beyondcorp.get_security_gateway_application_iam_policy(project=example["project"],
        security_gateway_id=example["securityGatewayId"],
        application_id=example["applicationId"])
    ```


    :param builtins.str application_id: Used to find the parent resource to bind the IAM policy to
    :param builtins.str project: The ID of the project in which the resource belongs.
           If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.
    :param builtins.str security_gateway_id: ID of the Security Gateway resource this belongs to. Used to find the parent resource to bind the IAM policy to
    """
    __args__ = dict()
    __args__['applicationId'] = application_id
    __args__['project'] = project
    __args__['securityGatewayId'] = security_gateway_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('gcp:beyondcorp/getSecurityGatewayApplicationIamPolicy:getSecurityGatewayApplicationIamPolicy', __args__, opts=opts, typ=GetSecurityGatewayApplicationIamPolicyResult)
    return __ret__.apply(lambda __response__: GetSecurityGatewayApplicationIamPolicyResult(
        application_id=pulumi.get(__response__, 'application_id'),
        etag=pulumi.get(__response__, 'etag'),
        id=pulumi.get(__response__, 'id'),
        policy_data=pulumi.get(__response__, 'policy_data'),
        project=pulumi.get(__response__, 'project'),
        security_gateway_id=pulumi.get(__response__, 'security_gateway_id')))
