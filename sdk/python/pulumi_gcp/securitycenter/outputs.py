# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'FolderCustomModuleCustomConfig',
    'FolderCustomModuleCustomConfigCustomOutput',
    'FolderCustomModuleCustomConfigCustomOutputProperty',
    'FolderCustomModuleCustomConfigCustomOutputPropertyValueExpression',
    'FolderCustomModuleCustomConfigPredicate',
    'FolderCustomModuleCustomConfigResourceSelector',
    'InstanceIamBindingCondition',
    'InstanceIamMemberCondition',
    'NotificationConfigStreamingConfig',
    'OrganizationCustomModuleCustomConfig',
    'OrganizationCustomModuleCustomConfigCustomOutput',
    'OrganizationCustomModuleCustomConfigCustomOutputProperty',
    'OrganizationCustomModuleCustomConfigCustomOutputPropertyValueExpression',
    'OrganizationCustomModuleCustomConfigPredicate',
    'OrganizationCustomModuleCustomConfigResourceSelector',
    'ProjectCustomModuleCustomConfig',
    'ProjectCustomModuleCustomConfigCustomOutput',
    'ProjectCustomModuleCustomConfigCustomOutputProperty',
    'ProjectCustomModuleCustomConfigCustomOutputPropertyValueExpression',
    'ProjectCustomModuleCustomConfigPredicate',
    'ProjectCustomModuleCustomConfigResourceSelector',
    'SourceIamBindingCondition',
    'SourceIamMemberCondition',
]

@pulumi.output_type
calass FolderCustomModuleCustomConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceSelector":
            suggest = "resource_selector"
        elif key == "customOutput":
            suggest = "custom_output"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FolderCustomModuleCustomConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FolderCustomModuleCustomConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FolderCustomModuleCustomConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 predicate: 'outputs.FolderCustomModuleCustomConfigPredicate',
                 recommendation: str,
                 resource_selector: 'outputs.FolderCustomModuleCustomConfigResourceSelector',
                 severity: str,
                 custom_output: Optional['outputs.FolderCustomModuleCustomConfigCustomOutput'] = None,
                 description: Optional[str] = None):
        """
        :param 'FolderCustomModuleCustomConfigPredicateArrgs' predicate: The CEL expression to evaluate to produce findings. When the expression evaluates
               to true against a resource, a finding is generated.
               Structure is documented below.
        :param str recommendation: An explanation of the recommended steps that security teams can take to resolve
               the detected issue. This explanation is returned with each finding generated by
               this module in the nextSteps property of the finding JSON.
        :param 'FolderCustomModuleCustomConfigResourceSelectorArrgs' resource_selector: The resource types that the custom module operates on. Each custom module
               can specify up to 5 resource types.
               Structure is documented below.
        :param str severity: The severity to assign to findings generated by the module.
               Possible values are: `CRITICAL`, `HIGH`, `MEDIUM`, `LOW`.
        :param 'FolderCustomModuleCustomConfigCustomOutputArrgs' custom_output: Custom output properties.
               Structure is documented below.
        :param str description: Text that describes the vulnerability or misconfiguration that the custom
               module detects. This explanation is returned with each finding instance to
               help investigators understand the detected issue. The text must be enclosed in quotation marks.
        """
        pulumi.set(__self__, "predicate", predicate)
        pulumi.set(__self__, "recommendation", recommendation)
        pulumi.set(__self__, "resource_selector", resource_selector)
        pulumi.set(__self__, "severity", severity)
        if custom_output is not None:
            pulumi.set(__self__, "custom_output", custom_output)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter
    def predicate(self) -> 'outputs.FolderCustomModuleCustomConfigPredicate':
        """
        The CEL expression to evaluate to produce findings. When the expression evaluates
        to true against a resource, a finding is generated.
        Structure is documented below.
        """
        return pulumi.get(self, "predicate")

    @property
    @pulumi.getter
    def recommendation(self) -> str:
        """
        An explanation of the recommended steps that security teams can take to resolve
        the detected issue. This explanation is returned with each finding generated by
        this module in the nextSteps property of the finding JSON.
        """
        return pulumi.get(self, "recommendation")

    @property
    @pulumi.getter(name="resourceSelector")
    def resource_selector(self) -> 'outputs.FolderCustomModuleCustomConfigResourceSelector':
        """
        The resource types that the custom module operates on. Each custom module
        can specify up to 5 resource types.
        Structure is documented below.
        """
        return pulumi.get(self, "resource_selector")

    @property
    @pulumi.getter
    def severity(self) -> str:
        """
        The severity to assign to findings generated by the module.
        Possible values are: `CRITICAL`, `HIGH`, `MEDIUM`, `LOW`.
        """
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter(name="customOutput")
    def custom_output(self) -> Optional['outputs.FolderCustomModuleCustomConfigCustomOutput']:
        """
        Custom output properties.
        Structure is documented below.
        """
        return pulumi.get(self, "custom_output")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Text that describes the vulnerability or misconfiguration that the custom
        module detects. This explanation is returned with each finding instance to
        help investigators understand the detected issue. The text must be enclosed in quotation marks.
        """
        return pulumi.get(self, "description")


@pulumi.output_type
calass FolderCustomModuleCustomConfigCustomOutput(dict):
    def __init__(__self__, *,
                 properties: Optional[Sequence['outputs.FolderCustomModuleCustomConfigCustomOutputProperty']] = None):
        """
        :param Sequence['FolderCustomModuleCustomConfigCustomOutputPropertyArrgs'] properties: A list of custom output properties to add to the finding.
               Structure is documented below.
        """
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter
    def properties(self) -> Optional[Sequence['outputs.FolderCustomModuleCustomConfigCustomOutputProperty']]:
        """
        A list of custom output properties to add to the finding.
        Structure is documented below.
        """
        return pulumi.get(self, "properties")


@pulumi.output_type
calass FolderCustomModuleCustomConfigCustomOutputProperty(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "valueExpression":
            suggest = "value_expression"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FolderCustomModuleCustomConfigCustomOutputProperty. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FolderCustomModuleCustomConfigCustomOutputProperty.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FolderCustomModuleCustomConfigCustomOutputProperty.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value_expression: Optional['outputs.FolderCustomModuleCustomConfigCustomOutputPropertyValueExpression'] = None):
        """
        :param str name: Name of the property for the custom output.
        :param 'FolderCustomModuleCustomConfigCustomOutputPropertyValueExpressionArrgs' value_expression: The CEL expression for the custom output. A resource property can be specified
               to return the value of the property or a text string enclosed in quotation marks.
               Structure is documented below.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value_expression is not None:
            pulumi.set(__self__, "value_expression", value_expression)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the property for the custom output.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="valueExpression")
    def value_expression(self) -> Optional['outputs.FolderCustomModuleCustomConfigCustomOutputPropertyValueExpression']:
        """
        The CEL expression for the custom output. A resource property can be specified
        to return the value of the property or a text string enclosed in quotation marks.
        Structure is documented below.
        """
        return pulumi.get(self, "value_expression")


@pulumi.output_type
calass FolderCustomModuleCustomConfigCustomOutputPropertyValueExpression(dict):
    def __init__(__self__, *,
                 expression: str,
                 description: Optional[str] = None,
                 location: Optional[str] = None,
                 title: Optional[str] = None):
        """
        :param str expression: Textual representation of an expression in Common Expression Language syntax.
        :param str description: Description of the expression. This is a longer text which describes the
               expression, e.g. when hovered over it in a UI.
        :param str location: String indicating the location of the expression for error reporting, e.g. a
               file name and a position in the file.
        :param str title: Title for the expression, i.e. a short string describing its purpose. This can
               be used e.g. in UIs which allow to enter the expression.
        """
        pulumi.set(__self__, "expression", expression)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def expression(self) -> str:
        """
        Textual representation of an expression in Common Expression Language syntax.
        """
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description of the expression. This is a longer text which describes the
        expression, e.g. when hovered over it in a UI.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        """
        String indicating the location of the expression for error reporting, e.g. a
        file name and a position in the file.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        Title for the expression, i.e. a short string describing its purpose. This can
        be used e.g. in UIs which allow to enter the expression.
        """
        return pulumi.get(self, "title")


@pulumi.output_type
calass FolderCustomModuleCustomConfigPredicate(dict):
    def __init__(__self__, *,
                 expression: str,
                 description: Optional[str] = None,
                 location: Optional[str] = None,
                 title: Optional[str] = None):
        """
        :param str expression: Textual representation of an expression in Common Expression Language syntax.
        :param str description: Description of the expression. This is a longer text which describes the
               expression, e.g. when hovered over it in a UI.
        :param str location: String indicating the location of the expression for error reporting, e.g. a
               file name and a position in the file.
        :param str title: Title for the expression, i.e. a short string describing its purpose. This can
               be used e.g. in UIs which allow to enter the expression.
        """
        pulumi.set(__self__, "expression", expression)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def expression(self) -> str:
        """
        Textual representation of an expression in Common Expression Language syntax.
        """
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description of the expression. This is a longer text which describes the
        expression, e.g. when hovered over it in a UI.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        """
        String indicating the location of the expression for error reporting, e.g. a
        file name and a position in the file.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        Title for the expression, i.e. a short string describing its purpose. This can
        be used e.g. in UIs which allow to enter the expression.
        """
        return pulumi.get(self, "title")


@pulumi.output_type
calass FolderCustomModuleCustomConfigResourceSelector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceTypes":
            suggest = "resource_types"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FolderCustomModuleCustomConfigResourceSelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FolderCustomModuleCustomConfigResourceSelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FolderCustomModuleCustomConfigResourceSelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resource_types: Sequence[str]):
        """
        :param Sequence[str] resource_types: The resource types to run the detector on.
               
               - - -
        """
        pulumi.set(__self__, "resource_types", resource_types)

    @property
    @pulumi.getter(name="resourceTypes")
    def resource_types(self) -> Sequence[str]:
        """
        The resource types to run the detector on.

        - - -
        """
        return pulumi.get(self, "resource_types")


@pulumi.output_type
calass InstanceIamBindingCondition(dict):
    def __init__(__self__, *,
                 expression: str,
                 title: str,
                 description: Optional[str] = None):
        """
        :param str description: An optional description of the instance.
        """
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "title", title)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def title(self) -> str:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        An optional description of the instance.
        """
        return pulumi.get(self, "description")


@pulumi.output_type
calass InstanceIamMemberCondition(dict):
    def __init__(__self__, *,
                 expression: str,
                 title: str,
                 description: Optional[str] = None):
        """
        :param str description: An optional description of the instance.
        """
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "title", title)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def title(self) -> str:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        An optional description of the instance.
        """
        return pulumi.get(self, "description")


@pulumi.output_type
calass NotificationConfigStreamingConfig(dict):
    def __init__(__self__, *,
                 filter: str):
        """
        :param str filter: Expression that defines the filter to apply across create/update
               events of assets or findings as specified by the event type. The
               expression is a list of zero or more restrictions combined via
               logical operators AND and OR. Parentheses are supported, and OR
               has higher precedence than AND.
               Restrictions have the form <field> <operator> <value> and may have
               a - character in front of them to indicate negation. The fields
               map to those defined in the corresponding resource.
               The supported operators are:
               * = for all value types.
               * >, <, >=, <= for integer values.
               * :, meaning substring matching, for strings.
               The supported value types are:
               * string literals in quotes.
               * integer literals without quotes.
               * boolean literals true and false without quotes.
               See
               [Filtering notifications](https://cloud.google.com/security-command-center/docs/how-to-api-filter-notifications)
               for information on how to write a filter.
               
               - - -
        """
        pulumi.set(__self__, "filter", filter)

    @property
    @pulumi.getter
    def filter(self) -> str:
        """
        Expression that defines the filter to apply across create/update
        events of assets or findings as specified by the event type. The
        expression is a list of zero or more restrictions combined via
        logical operators AND and OR. Parentheses are supported, and OR
        has higher precedence than AND.
        Restrictions have the form <field> <operator> <value> and may have
        a - character in front of them to indicate negation. The fields
        map to those defined in the corresponding resource.
        The supported operators are:
        * = for all value types.
        * >, <, >=, <= for integer values.
        * :, meaning substring matching, for strings.
        The supported value types are:
        * string literals in quotes.
        * integer literals without quotes.
        * boolean literals true and false without quotes.
        See
        [Filtering notifications](https://cloud.google.com/security-command-center/docs/how-to-api-filter-notifications)
        for information on how to write a filter.

        - - -
        """
        return pulumi.get(self, "filter")


@pulumi.output_type
calass OrganizationCustomModuleCustomConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceSelector":
            suggest = "resource_selector"
        elif key == "customOutput":
            suggest = "custom_output"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OrganizationCustomModuleCustomConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OrganizationCustomModuleCustomConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OrganizationCustomModuleCustomConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 predicate: 'outputs.OrganizationCustomModuleCustomConfigPredicate',
                 recommendation: str,
                 resource_selector: 'outputs.OrganizationCustomModuleCustomConfigResourceSelector',
                 severity: str,
                 custom_output: Optional['outputs.OrganizationCustomModuleCustomConfigCustomOutput'] = None,
                 description: Optional[str] = None):
        """
        :param 'OrganizationCustomModuleCustomConfigPredicateArrgs' predicate: The CEL expression to evaluate to produce findings. When the expression evaluates
               to true against a resource, a finding is generated.
               Structure is documented below.
        :param str recommendation: An explanation of the recommended steps that security teams can take to resolve
               the detected issue. This explanation is returned with each finding generated by
               this module in the nextSteps property of the finding JSON.
        :param 'OrganizationCustomModuleCustomConfigResourceSelectorArrgs' resource_selector: The resource types that the custom module operates on. Each custom module
               can specify up to 5 resource types.
               Structure is documented below.
        :param str severity: The severity to assign to findings generated by the module.
               Possible values are: `CRITICAL`, `HIGH`, `MEDIUM`, `LOW`.
        :param 'OrganizationCustomModuleCustomConfigCustomOutputArrgs' custom_output: Custom output properties.
               Structure is documented below.
        :param str description: Text that describes the vulnerability or misconfiguration that the custom
               module detects. This explanation is returned with each finding instance to
               help investigators understand the detected issue. The text must be enclosed in quotation marks.
        """
        pulumi.set(__self__, "predicate", predicate)
        pulumi.set(__self__, "recommendation", recommendation)
        pulumi.set(__self__, "resource_selector", resource_selector)
        pulumi.set(__self__, "severity", severity)
        if custom_output is not None:
            pulumi.set(__self__, "custom_output", custom_output)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter
    def predicate(self) -> 'outputs.OrganizationCustomModuleCustomConfigPredicate':
        """
        The CEL expression to evaluate to produce findings. When the expression evaluates
        to true against a resource, a finding is generated.
        Structure is documented below.
        """
        return pulumi.get(self, "predicate")

    @property
    @pulumi.getter
    def recommendation(self) -> str:
        """
        An explanation of the recommended steps that security teams can take to resolve
        the detected issue. This explanation is returned with each finding generated by
        this module in the nextSteps property of the finding JSON.
        """
        return pulumi.get(self, "recommendation")

    @property
    @pulumi.getter(name="resourceSelector")
    def resource_selector(self) -> 'outputs.OrganizationCustomModuleCustomConfigResourceSelector':
        """
        The resource types that the custom module operates on. Each custom module
        can specify up to 5 resource types.
        Structure is documented below.
        """
        return pulumi.get(self, "resource_selector")

    @property
    @pulumi.getter
    def severity(self) -> str:
        """
        The severity to assign to findings generated by the module.
        Possible values are: `CRITICAL`, `HIGH`, `MEDIUM`, `LOW`.
        """
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter(name="customOutput")
    def custom_output(self) -> Optional['outputs.OrganizationCustomModuleCustomConfigCustomOutput']:
        """
        Custom output properties.
        Structure is documented below.
        """
        return pulumi.get(self, "custom_output")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Text that describes the vulnerability or misconfiguration that the custom
        module detects. This explanation is returned with each finding instance to
        help investigators understand the detected issue. The text must be enclosed in quotation marks.
        """
        return pulumi.get(self, "description")


@pulumi.output_type
calass OrganizationCustomModuleCustomConfigCustomOutput(dict):
    def __init__(__self__, *,
                 properties: Optional[Sequence['outputs.OrganizationCustomModuleCustomConfigCustomOutputProperty']] = None):
        """
        :param Sequence['OrganizationCustomModuleCustomConfigCustomOutputPropertyArrgs'] properties: A list of custom output properties to add to the finding.
               Structure is documented below.
        """
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter
    def properties(self) -> Optional[Sequence['outputs.OrganizationCustomModuleCustomConfigCustomOutputProperty']]:
        """
        A list of custom output properties to add to the finding.
        Structure is documented below.
        """
        return pulumi.get(self, "properties")


@pulumi.output_type
calass OrganizationCustomModuleCustomConfigCustomOutputProperty(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "valueExpression":
            suggest = "value_expression"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OrganizationCustomModuleCustomConfigCustomOutputProperty. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OrganizationCustomModuleCustomConfigCustomOutputProperty.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OrganizationCustomModuleCustomConfigCustomOutputProperty.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value_expression: Optional['outputs.OrganizationCustomModuleCustomConfigCustomOutputPropertyValueExpression'] = None):
        """
        :param str name: Name of the property for the custom output.
        :param 'OrganizationCustomModuleCustomConfigCustomOutputPropertyValueExpressionArrgs' value_expression: The CEL expression for the custom output. A resource property can be specified
               to return the value of the property or a text string enclosed in quotation marks.
               Structure is documented below.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value_expression is not None:
            pulumi.set(__self__, "value_expression", value_expression)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the property for the custom output.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="valueExpression")
    def value_expression(self) -> Optional['outputs.OrganizationCustomModuleCustomConfigCustomOutputPropertyValueExpression']:
        """
        The CEL expression for the custom output. A resource property can be specified
        to return the value of the property or a text string enclosed in quotation marks.
        Structure is documented below.
        """
        return pulumi.get(self, "value_expression")


@pulumi.output_type
calass OrganizationCustomModuleCustomConfigCustomOutputPropertyValueExpression(dict):
    def __init__(__self__, *,
                 expression: str,
                 description: Optional[str] = None,
                 location: Optional[str] = None,
                 title: Optional[str] = None):
        """
        :param str expression: Textual representation of an expression in Common Expression Language syntax.
        :param str description: Description of the expression. This is a longer text which describes the
               expression, e.g. when hovered over it in a UI.
        :param str location: String indicating the location of the expression for error reporting, e.g. a
               file name and a position in the file.
        :param str title: Title for the expression, i.e. a short string describing its purpose. This can
               be used e.g. in UIs which allow to enter the expression.
        """
        pulumi.set(__self__, "expression", expression)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def expression(self) -> str:
        """
        Textual representation of an expression in Common Expression Language syntax.
        """
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description of the expression. This is a longer text which describes the
        expression, e.g. when hovered over it in a UI.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        """
        String indicating the location of the expression for error reporting, e.g. a
        file name and a position in the file.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        Title for the expression, i.e. a short string describing its purpose. This can
        be used e.g. in UIs which allow to enter the expression.
        """
        return pulumi.get(self, "title")


@pulumi.output_type
calass OrganizationCustomModuleCustomConfigPredicate(dict):
    def __init__(__self__, *,
                 expression: str,
                 description: Optional[str] = None,
                 location: Optional[str] = None,
                 title: Optional[str] = None):
        """
        :param str expression: Textual representation of an expression in Common Expression Language syntax.
        :param str description: Description of the expression. This is a longer text which describes the
               expression, e.g. when hovered over it in a UI.
        :param str location: String indicating the location of the expression for error reporting, e.g. a
               file name and a position in the file.
        :param str title: Title for the expression, i.e. a short string describing its purpose. This can
               be used e.g. in UIs which allow to enter the expression.
        """
        pulumi.set(__self__, "expression", expression)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def expression(self) -> str:
        """
        Textual representation of an expression in Common Expression Language syntax.
        """
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description of the expression. This is a longer text which describes the
        expression, e.g. when hovered over it in a UI.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        """
        String indicating the location of the expression for error reporting, e.g. a
        file name and a position in the file.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        Title for the expression, i.e. a short string describing its purpose. This can
        be used e.g. in UIs which allow to enter the expression.
        """
        return pulumi.get(self, "title")


@pulumi.output_type
calass OrganizationCustomModuleCustomConfigResourceSelector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceTypes":
            suggest = "resource_types"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OrganizationCustomModuleCustomConfigResourceSelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OrganizationCustomModuleCustomConfigResourceSelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OrganizationCustomModuleCustomConfigResourceSelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resource_types: Sequence[str]):
        """
        :param Sequence[str] resource_types: The resource types to run the detector on.
               
               - - -
        """
        pulumi.set(__self__, "resource_types", resource_types)

    @property
    @pulumi.getter(name="resourceTypes")
    def resource_types(self) -> Sequence[str]:
        """
        The resource types to run the detector on.

        - - -
        """
        return pulumi.get(self, "resource_types")


@pulumi.output_type
calass ProjectCustomModuleCustomConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceSelector":
            suggest = "resource_selector"
        elif key == "customOutput":
            suggest = "custom_output"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProjectCustomModuleCustomConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProjectCustomModuleCustomConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProjectCustomModuleCustomConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 predicate: 'outputs.ProjectCustomModuleCustomConfigPredicate',
                 recommendation: str,
                 resource_selector: 'outputs.ProjectCustomModuleCustomConfigResourceSelector',
                 severity: str,
                 custom_output: Optional['outputs.ProjectCustomModuleCustomConfigCustomOutput'] = None,
                 description: Optional[str] = None):
        """
        :param 'ProjectCustomModuleCustomConfigPredicateArrgs' predicate: The CEL expression to evaluate to produce findings. When the expression evaluates
               to true against a resource, a finding is generated.
               Structure is documented below.
        :param str recommendation: An explanation of the recommended steps that security teams can take to resolve
               the detected issue. This explanation is returned with each finding generated by
               this module in the nextSteps property of the finding JSON.
        :param 'ProjectCustomModuleCustomConfigResourceSelectorArrgs' resource_selector: The resource types that the custom module operates on. Each custom module
               can specify up to 5 resource types.
               Structure is documented below.
        :param str severity: The severity to assign to findings generated by the module.
               Possible values are: `CRITICAL`, `HIGH`, `MEDIUM`, `LOW`.
        :param 'ProjectCustomModuleCustomConfigCustomOutputArrgs' custom_output: Custom output properties.
               Structure is documented below.
        :param str description: Text that describes the vulnerability or misconfiguration that the custom
               module detects. This explanation is returned with each finding instance to
               help investigators understand the detected issue. The text must be enclosed in quotation marks.
        """
        pulumi.set(__self__, "predicate", predicate)
        pulumi.set(__self__, "recommendation", recommendation)
        pulumi.set(__self__, "resource_selector", resource_selector)
        pulumi.set(__self__, "severity", severity)
        if custom_output is not None:
            pulumi.set(__self__, "custom_output", custom_output)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter
    def predicate(self) -> 'outputs.ProjectCustomModuleCustomConfigPredicate':
        """
        The CEL expression to evaluate to produce findings. When the expression evaluates
        to true against a resource, a finding is generated.
        Structure is documented below.
        """
        return pulumi.get(self, "predicate")

    @property
    @pulumi.getter
    def recommendation(self) -> str:
        """
        An explanation of the recommended steps that security teams can take to resolve
        the detected issue. This explanation is returned with each finding generated by
        this module in the nextSteps property of the finding JSON.
        """
        return pulumi.get(self, "recommendation")

    @property
    @pulumi.getter(name="resourceSelector")
    def resource_selector(self) -> 'outputs.ProjectCustomModuleCustomConfigResourceSelector':
        """
        The resource types that the custom module operates on. Each custom module
        can specify up to 5 resource types.
        Structure is documented below.
        """
        return pulumi.get(self, "resource_selector")

    @property
    @pulumi.getter
    def severity(self) -> str:
        """
        The severity to assign to findings generated by the module.
        Possible values are: `CRITICAL`, `HIGH`, `MEDIUM`, `LOW`.
        """
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter(name="customOutput")
    def custom_output(self) -> Optional['outputs.ProjectCustomModuleCustomConfigCustomOutput']:
        """
        Custom output properties.
        Structure is documented below.
        """
        return pulumi.get(self, "custom_output")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Text that describes the vulnerability or misconfiguration that the custom
        module detects. This explanation is returned with each finding instance to
        help investigators understand the detected issue. The text must be enclosed in quotation marks.
        """
        return pulumi.get(self, "description")


@pulumi.output_type
calass ProjectCustomModuleCustomConfigCustomOutput(dict):
    def __init__(__self__, *,
                 properties: Optional[Sequence['outputs.ProjectCustomModuleCustomConfigCustomOutputProperty']] = None):
        """
        :param Sequence['ProjectCustomModuleCustomConfigCustomOutputPropertyArrgs'] properties: A list of custom output properties to add to the finding.
               Structure is documented below.
        """
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter
    def properties(self) -> Optional[Sequence['outputs.ProjectCustomModuleCustomConfigCustomOutputProperty']]:
        """
        A list of custom output properties to add to the finding.
        Structure is documented below.
        """
        return pulumi.get(self, "properties")


@pulumi.output_type
calass ProjectCustomModuleCustomConfigCustomOutputProperty(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "valueExpression":
            suggest = "value_expression"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProjectCustomModuleCustomConfigCustomOutputProperty. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProjectCustomModuleCustomConfigCustomOutputProperty.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProjectCustomModuleCustomConfigCustomOutputProperty.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value_expression: Optional['outputs.ProjectCustomModuleCustomConfigCustomOutputPropertyValueExpression'] = None):
        """
        :param str name: Name of the property for the custom output.
        :param 'ProjectCustomModuleCustomConfigCustomOutputPropertyValueExpressionArrgs' value_expression: The CEL expression for the custom output. A resource property can be specified
               to return the value of the property or a text string enclosed in quotation marks.
               Structure is documented below.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value_expression is not None:
            pulumi.set(__self__, "value_expression", value_expression)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the property for the custom output.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="valueExpression")
    def value_expression(self) -> Optional['outputs.ProjectCustomModuleCustomConfigCustomOutputPropertyValueExpression']:
        """
        The CEL expression for the custom output. A resource property can be specified
        to return the value of the property or a text string enclosed in quotation marks.
        Structure is documented below.
        """
        return pulumi.get(self, "value_expression")


@pulumi.output_type
calass ProjectCustomModuleCustomConfigCustomOutputPropertyValueExpression(dict):
    def __init__(__self__, *,
                 expression: str,
                 description: Optional[str] = None,
                 location: Optional[str] = None,
                 title: Optional[str] = None):
        """
        :param str expression: Textual representation of an expression in Common Expression Language syntax.
        :param str description: Description of the expression. This is a longer text which describes the
               expression, e.g. when hovered over it in a UI.
        :param str location: String indicating the location of the expression for error reporting, e.g. a
               file name and a position in the file.
        :param str title: Title for the expression, i.e. a short string describing its purpose. This can
               be used e.g. in UIs which allow to enter the expression.
        """
        pulumi.set(__self__, "expression", expression)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def expression(self) -> str:
        """
        Textual representation of an expression in Common Expression Language syntax.
        """
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description of the expression. This is a longer text which describes the
        expression, e.g. when hovered over it in a UI.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        """
        String indicating the location of the expression for error reporting, e.g. a
        file name and a position in the file.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        Title for the expression, i.e. a short string describing its purpose. This can
        be used e.g. in UIs which allow to enter the expression.
        """
        return pulumi.get(self, "title")


@pulumi.output_type
calass ProjectCustomModuleCustomConfigPredicate(dict):
    def __init__(__self__, *,
                 expression: str,
                 description: Optional[str] = None,
                 location: Optional[str] = None,
                 title: Optional[str] = None):
        """
        :param str expression: Textual representation of an expression in Common Expression Language syntax.
        :param str description: Description of the expression. This is a longer text which describes the
               expression, e.g. when hovered over it in a UI.
        :param str location: String indicating the location of the expression for error reporting, e.g. a
               file name and a position in the file.
        :param str title: Title for the expression, i.e. a short string describing its purpose. This can
               be used e.g. in UIs which allow to enter the expression.
        """
        pulumi.set(__self__, "expression", expression)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def expression(self) -> str:
        """
        Textual representation of an expression in Common Expression Language syntax.
        """
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description of the expression. This is a longer text which describes the
        expression, e.g. when hovered over it in a UI.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        """
        String indicating the location of the expression for error reporting, e.g. a
        file name and a position in the file.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        Title for the expression, i.e. a short string describing its purpose. This can
        be used e.g. in UIs which allow to enter the expression.
        """
        return pulumi.get(self, "title")


@pulumi.output_type
calass ProjectCustomModuleCustomConfigResourceSelector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceTypes":
            suggest = "resource_types"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProjectCustomModuleCustomConfigResourceSelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProjectCustomModuleCustomConfigResourceSelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProjectCustomModuleCustomConfigResourceSelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resource_types: Sequence[str]):
        """
        :param Sequence[str] resource_types: The resource types to run the detector on.
               
               - - -
        """
        pulumi.set(__self__, "resource_types", resource_types)

    @property
    @pulumi.getter(name="resourceTypes")
    def resource_types(self) -> Sequence[str]:
        """
        The resource types to run the detector on.

        - - -
        """
        return pulumi.get(self, "resource_types")


@pulumi.output_type
calass SourceIamBindingCondition(dict):
    def __init__(__self__, *,
                 expression: str,
                 title: str,
                 description: Optional[str] = None):
        """
        :param str description: The description of the source (max of 1024 characters).
        """
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "title", title)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def title(self) -> str:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        The description of the source (max of 1024 characters).
        """
        return pulumi.get(self, "description")


@pulumi.output_type
calass SourceIamMemberCondition(dict):
    def __init__(__self__, *,
                 expression: str,
                 title: str,
                 description: Optional[str] = None):
        """
        :param str description: The description of the source (max of 1024 characters).
        """
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "title", title)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def title(self) -> str:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        The description of the source (max of 1024 characters).
        """
        return pulumi.get(self, "description")


