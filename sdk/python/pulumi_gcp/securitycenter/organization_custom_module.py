# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['OrganizationCustomModuleArgs', 'OrganizationCustomModule']

@pulumi.input_type
class OrganizationCustomModuleArgs:
    def __init__(__self__, *,
                 custom_config: pulumi.Input['OrganizationCustomModuleCustomConfigArgs'],
                 display_name: pulumi.Input[str],
                 enablement_state: pulumi.Input[str],
                 organization: pulumi.Input[str]):
        """
        The set of arguments for constructing a OrganizationCustomModule resource.
        :param pulumi.Input['OrganizationCustomModuleCustomConfigArgs'] custom_config: The user specified custom configuration for the module.
               Structure is documented below.
        :param pulumi.Input[str] display_name: The display name of the Security Health Analytics custom module. This
               display name becomes the finding category for all findings that are
               returned by this custom module. The display name must be between 1 and
               128 characters, start with a lowercase letter, and contain alphanumeric
               characters or underscores only.
        :param pulumi.Input[str] enablement_state: The enablement state of the custom module.
               Possible values are: `ENABLED`, `DISABLED`.
        :param pulumi.Input[str] organization: Numerical ID of the parent organization.
        """
        pulumi.set(__self__, "custom_config", custom_config)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "enablement_state", enablement_state)
        pulumi.set(__self__, "organization", organization)

    @property
    @pulumi.getter(name="customConfig")
    def custom_config(self) -> pulumi.Input['OrganizationCustomModuleCustomConfigArgs']:
        """
        The user specified custom configuration for the module.
        Structure is documented below.
        """
        return pulumi.get(self, "custom_config")

    @custom_config.setter
    def custom_config(self, value: pulumi.Input['OrganizationCustomModuleCustomConfigArgs']):
        pulumi.set(self, "custom_config", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Input[str]:
        """
        The display name of the Security Health Analytics custom module. This
        display name becomes the finding category for all findings that are
        returned by this custom module. The display name must be between 1 and
        128 characters, start with a lowercase letter, and contain alphanumeric
        characters or underscores only.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="enablementState")
    def enablement_state(self) -> pulumi.Input[str]:
        """
        The enablement state of the custom module.
        Possible values are: `ENABLED`, `DISABLED`.
        """
        return pulumi.get(self, "enablement_state")

    @enablement_state.setter
    def enablement_state(self, value: pulumi.Input[str]):
        pulumi.set(self, "enablement_state", value)

    @property
    @pulumi.getter
    def organization(self) -> pulumi.Input[str]:
        """
        Numerical ID of the parent organization.
        """
        return pulumi.get(self, "organization")

    @organization.setter
    def organization(self, value: pulumi.Input[str]):
        pulumi.set(self, "organization", value)


@pulumi.input_type
class _OrganizationCustomModuleState:
    def __init__(__self__, *,
                 ancestor_module: Optional[pulumi.Input[str]] = None,
                 custom_config: Optional[pulumi.Input['OrganizationCustomModuleCustomConfigArgs']] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 enablement_state: Optional[pulumi.Input[str]] = None,
                 last_editor: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 organization: Optional[pulumi.Input[str]] = None,
                 update_time: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering OrganizationCustomModule resources.
        :param pulumi.Input[str] ancestor_module: If empty, indicates that the custom module was created in the organization, folder,
               or project in which you are viewing the custom module. Otherwise, ancestor_module
               specifies the organization or folder from which the custom module is inherited.
        :param pulumi.Input['OrganizationCustomModuleCustomConfigArgs'] custom_config: The user specified custom configuration for the module.
               Structure is documented below.
        :param pulumi.Input[str] display_name: The display name of the Security Health Analytics custom module. This
               display name becomes the finding category for all findings that are
               returned by this custom module. The display name must be between 1 and
               128 characters, start with a lowercase letter, and contain alphanumeric
               characters or underscores only.
        :param pulumi.Input[str] enablement_state: The enablement state of the custom module.
               Possible values are: `ENABLED`, `DISABLED`.
        :param pulumi.Input[str] last_editor: The editor that last updated the custom module.
        :param pulumi.Input[str] name: Name of the property for the custom output.
        :param pulumi.Input[str] organization: Numerical ID of the parent organization.
        :param pulumi.Input[str] update_time: The time at which the custom module was last updated.
               A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and
               up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
        """
        if ancestor_module is not None:
            pulumi.set(__self__, "ancestor_module", ancestor_module)
        if custom_config is not None:
            pulumi.set(__self__, "custom_config", custom_config)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if enablement_state is not None:
            pulumi.set(__self__, "enablement_state", enablement_state)
        if last_editor is not None:
            pulumi.set(__self__, "last_editor", last_editor)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="ancestorModule")
    def ancestor_module(self) -> Optional[pulumi.Input[str]]:
        """
        If empty, indicates that the custom module was created in the organization, folder,
        or project in which you are viewing the custom module. Otherwise, ancestor_module
        specifies the organization or folder from which the custom module is inherited.
        """
        return pulumi.get(self, "ancestor_module")

    @ancestor_module.setter
    def ancestor_module(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ancestor_module", value)

    @property
    @pulumi.getter(name="customConfig")
    def custom_config(self) -> Optional[pulumi.Input['OrganizationCustomModuleCustomConfigArgs']]:
        """
        The user specified custom configuration for the module.
        Structure is documented below.
        """
        return pulumi.get(self, "custom_config")

    @custom_config.setter
    def custom_config(self, value: Optional[pulumi.Input['OrganizationCustomModuleCustomConfigArgs']]):
        pulumi.set(self, "custom_config", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        The display name of the Security Health Analytics custom module. This
        display name becomes the finding category for all findings that are
        returned by this custom module. The display name must be between 1 and
        128 characters, start with a lowercase letter, and contain alphanumeric
        characters or underscores only.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="enablementState")
    def enablement_state(self) -> Optional[pulumi.Input[str]]:
        """
        The enablement state of the custom module.
        Possible values are: `ENABLED`, `DISABLED`.
        """
        return pulumi.get(self, "enablement_state")

    @enablement_state.setter
    def enablement_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enablement_state", value)

    @property
    @pulumi.getter(name="lastEditor")
    def last_editor(self) -> Optional[pulumi.Input[str]]:
        """
        The editor that last updated the custom module.
        """
        return pulumi.get(self, "last_editor")

    @last_editor.setter
    def last_editor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_editor", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the property for the custom output.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def organization(self) -> Optional[pulumi.Input[str]]:
        """
        Numerical ID of the parent organization.
        """
        return pulumi.get(self, "organization")

    @organization.setter
    def organization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "organization", value)

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[str]]:
        """
        The time at which the custom module was last updated.
        A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and
        up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
        """
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_time", value)


class OrganizationCustomModule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 custom_config: Optional[pulumi.Input[pulumi.InputType['OrganizationCustomModuleCustomConfigArgs']]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 enablement_state: Optional[pulumi.Input[str]] = None,
                 organization: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Represents an instance of a Security Health Analytics custom module, including
        its full module name, display name, enablement state, and last updated time.
        You can create a custom module at the organization, folder, or project level.
        Custom modules that you create at the organization or folder level are inherited
        by the child folders and projects.

        To get more information about OrganizationCustomModule, see:

        * [API documentation](https://cloud.google.com/security-command-center/docs/reference/rest/v1/organizations.securityHealthAnalyticsSettings.customModules)
        * How-to Guides
            * [Overview of custom modules for Security Health Analytics](https://cloud.google.com/security-command-center/docs/custom-modules-sha-overview)

        ## Example Usage
        ### Scc Organization Custom Module Basic

        ```python
        import pulumi
        import pulumi_gcp as gcp

        example = gcp.securitycenter.OrganizationCustomModule("example",
            custom_config=gcp.securitycenter.OrganizationCustomModuleCustomConfigArgs(
                description="The rotation period of the identified cryptokey resource exceeds 30 days.",
                predicate=gcp.securitycenter.OrganizationCustomModuleCustomConfigPredicateArgs(
                    expression="resource.rotationPeriod > duration(\\"2592000s\\")",
                ),
                recommendation="Set the rotation period to at most 30 days.",
                resource_selector=gcp.securitycenter.OrganizationCustomModuleCustomConfigResourceSelectorArgs(
                    resource_types=["cloudkms.googleapis.com/CryptoKey"],
                ),
                severity="MEDIUM",
            ),
            display_name="basic_custom_module",
            enablement_state="ENABLED",
            organization="123456789")
        ```
        ### Scc Organization Custom Module Full

        ```python
        import pulumi
        import pulumi_gcp as gcp

        example = gcp.securitycenter.OrganizationCustomModule("example",
            custom_config=gcp.securitycenter.OrganizationCustomModuleCustomConfigArgs(
                custom_output=gcp.securitycenter.OrganizationCustomModuleCustomConfigCustomOutputArgs(
                    properties=[gcp.securitycenter.OrganizationCustomModuleCustomConfigCustomOutputPropertyArgs(
                        name="duration",
                        value_expression=gcp.securitycenter.OrganizationCustomModuleCustomConfigCustomOutputPropertyValueExpressionArgs(
                            description="description of the expression",
                            expression="resource.rotationPeriod",
                            location="location of the expression",
                            title="Purpose of the expression",
                        ),
                    )],
                ),
                description="Description of the custom module",
                predicate=gcp.securitycenter.OrganizationCustomModuleCustomConfigPredicateArgs(
                    description="description of the expression",
                    expression="resource.rotationPeriod > duration(\\"2592000s\\")",
                    location="location of the expression",
                    title="Purpose of the expression",
                ),
                recommendation="Steps to resolve violation",
                resource_selector=gcp.securitycenter.OrganizationCustomModuleCustomConfigResourceSelectorArgs(
                    resource_types=["cloudkms.googleapis.com/CryptoKey"],
                ),
                severity="LOW",
            ),
            display_name="full_custom_module",
            enablement_state="ENABLED",
            organization="123456789")
        ```

        ## Import

        OrganizationCustomModule can be imported using any of these accepted formats:

         * `organizations/{{organization}}/securityHealthAnalyticsSettings/customModules/{{name}}`

         * `{{organization}}/{{name}}`

         When using the `pulumi import` command, OrganizationCustomModule can be imported using one of the formats above. For example:

        ```sh
        $ pulumi import gcp:securitycenter/organizationCustomModule:OrganizationCustomModule default organizations/{{organization}}/securityHealthAnalyticsSettings/customModules/{{name}}
        ```

        ```sh
        $ pulumi import gcp:securitycenter/organizationCustomModule:OrganizationCustomModule default {{organization}}/{{name}}
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['OrganizationCustomModuleCustomConfigArgs']] custom_config: The user specified custom configuration for the module.
               Structure is documented below.
        :param pulumi.Input[str] display_name: The display name of the Security Health Analytics custom module. This
               display name becomes the finding category for all findings that are
               returned by this custom module. The display name must be between 1 and
               128 characters, start with a lowercase letter, and contain alphanumeric
               characters or underscores only.
        :param pulumi.Input[str] enablement_state: The enablement state of the custom module.
               Possible values are: `ENABLED`, `DISABLED`.
        :param pulumi.Input[str] organization: Numerical ID of the parent organization.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: OrganizationCustomModuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Represents an instance of a Security Health Analytics custom module, including
        its full module name, display name, enablement state, and last updated time.
        You can create a custom module at the organization, folder, or project level.
        Custom modules that you create at the organization or folder level are inherited
        by the child folders and projects.

        To get more information about OrganizationCustomModule, see:

        * [API documentation](https://cloud.google.com/security-command-center/docs/reference/rest/v1/organizations.securityHealthAnalyticsSettings.customModules)
        * How-to Guides
            * [Overview of custom modules for Security Health Analytics](https://cloud.google.com/security-command-center/docs/custom-modules-sha-overview)

        ## Example Usage
        ### Scc Organization Custom Module Basic

        ```python
        import pulumi
        import pulumi_gcp as gcp

        example = gcp.securitycenter.OrganizationCustomModule("example",
            custom_config=gcp.securitycenter.OrganizationCustomModuleCustomConfigArgs(
                description="The rotation period of the identified cryptokey resource exceeds 30 days.",
                predicate=gcp.securitycenter.OrganizationCustomModuleCustomConfigPredicateArgs(
                    expression="resource.rotationPeriod > duration(\\"2592000s\\")",
                ),
                recommendation="Set the rotation period to at most 30 days.",
                resource_selector=gcp.securitycenter.OrganizationCustomModuleCustomConfigResourceSelectorArgs(
                    resource_types=["cloudkms.googleapis.com/CryptoKey"],
                ),
                severity="MEDIUM",
            ),
            display_name="basic_custom_module",
            enablement_state="ENABLED",
            organization="123456789")
        ```
        ### Scc Organization Custom Module Full

        ```python
        import pulumi
        import pulumi_gcp as gcp

        example = gcp.securitycenter.OrganizationCustomModule("example",
            custom_config=gcp.securitycenter.OrganizationCustomModuleCustomConfigArgs(
                custom_output=gcp.securitycenter.OrganizationCustomModuleCustomConfigCustomOutputArgs(
                    properties=[gcp.securitycenter.OrganizationCustomModuleCustomConfigCustomOutputPropertyArgs(
                        name="duration",
                        value_expression=gcp.securitycenter.OrganizationCustomModuleCustomConfigCustomOutputPropertyValueExpressionArgs(
                            description="description of the expression",
                            expression="resource.rotationPeriod",
                            location="location of the expression",
                            title="Purpose of the expression",
                        ),
                    )],
                ),
                description="Description of the custom module",
                predicate=gcp.securitycenter.OrganizationCustomModuleCustomConfigPredicateArgs(
                    description="description of the expression",
                    expression="resource.rotationPeriod > duration(\\"2592000s\\")",
                    location="location of the expression",
                    title="Purpose of the expression",
                ),
                recommendation="Steps to resolve violation",
                resource_selector=gcp.securitycenter.OrganizationCustomModuleCustomConfigResourceSelectorArgs(
                    resource_types=["cloudkms.googleapis.com/CryptoKey"],
                ),
                severity="LOW",
            ),
            display_name="full_custom_module",
            enablement_state="ENABLED",
            organization="123456789")
        ```

        ## Import

        OrganizationCustomModule can be imported using any of these accepted formats:

         * `organizations/{{organization}}/securityHealthAnalyticsSettings/customModules/{{name}}`

         * `{{organization}}/{{name}}`

         When using the `pulumi import` command, OrganizationCustomModule can be imported using one of the formats above. For example:

        ```sh
        $ pulumi import gcp:securitycenter/organizationCustomModule:OrganizationCustomModule default organizations/{{organization}}/securityHealthAnalyticsSettings/customModules/{{name}}
        ```

        ```sh
        $ pulumi import gcp:securitycenter/organizationCustomModule:OrganizationCustomModule default {{organization}}/{{name}}
        ```

        :param str resource_name: The name of the resource.
        :param OrganizationCustomModuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(OrganizationCustomModuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 custom_config: Optional[pulumi.Input[pulumi.InputType['OrganizationCustomModuleCustomConfigArgs']]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 enablement_state: Optional[pulumi.Input[str]] = None,
                 organization: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = OrganizationCustomModuleArgs.__new__(OrganizationCustomModuleArgs)

            if custom_config is None and not opts.urn:
                raise TypeError("Missing required property 'custom_config'")
            __props__.__dict__["custom_config"] = custom_config
            if display_name is None and not opts.urn:
                raise TypeError("Missing required property 'display_name'")
            __props__.__dict__["display_name"] = display_name
            if enablement_state is None and not opts.urn:
                raise TypeError("Missing required property 'enablement_state'")
            __props__.__dict__["enablement_state"] = enablement_state
            if organization is None and not opts.urn:
                raise TypeError("Missing required property 'organization'")
            __props__.__dict__["organization"] = organization
            __props__.__dict__["ancestor_module"] = None
            __props__.__dict__["last_editor"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["update_time"] = None
        super(OrganizationCustomModule, __self__).__init__(
            'gcp:securitycenter/organizationCustomModule:OrganizationCustomModule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            ancestor_module: Optional[pulumi.Input[str]] = None,
            custom_config: Optional[pulumi.Input[pulumi.InputType['OrganizationCustomModuleCustomConfigArgs']]] = None,
            display_name: Optional[pulumi.Input[str]] = None,
            enablement_state: Optional[pulumi.Input[str]] = None,
            last_editor: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            organization: Optional[pulumi.Input[str]] = None,
            update_time: Optional[pulumi.Input[str]] = None) -> 'OrganizationCustomModule':
        """
        Get an existing OrganizationCustomModule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] ancestor_module: If empty, indicates that the custom module was created in the organization, folder,
               or project in which you are viewing the custom module. Otherwise, ancestor_module
               specifies the organization or folder from which the custom module is inherited.
        :param pulumi.Input[pulumi.InputType['OrganizationCustomModuleCustomConfigArgs']] custom_config: The user specified custom configuration for the module.
               Structure is documented below.
        :param pulumi.Input[str] display_name: The display name of the Security Health Analytics custom module. This
               display name becomes the finding category for all findings that are
               returned by this custom module. The display name must be between 1 and
               128 characters, start with a lowercase letter, and contain alphanumeric
               characters or underscores only.
        :param pulumi.Input[str] enablement_state: The enablement state of the custom module.
               Possible values are: `ENABLED`, `DISABLED`.
        :param pulumi.Input[str] last_editor: The editor that last updated the custom module.
        :param pulumi.Input[str] name: Name of the property for the custom output.
        :param pulumi.Input[str] organization: Numerical ID of the parent organization.
        :param pulumi.Input[str] update_time: The time at which the custom module was last updated.
               A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and
               up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _OrganizationCustomModuleState.__new__(_OrganizationCustomModuleState)

        __props__.__dict__["ancestor_module"] = ancestor_module
        __props__.__dict__["custom_config"] = custom_config
        __props__.__dict__["display_name"] = display_name
        __props__.__dict__["enablement_state"] = enablement_state
        __props__.__dict__["last_editor"] = last_editor
        __props__.__dict__["name"] = name
        __props__.__dict__["organization"] = organization
        __props__.__dict__["update_time"] = update_time
        return OrganizationCustomModule(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="ancestorModule")
    def ancestor_module(self) -> pulumi.Output[str]:
        """
        If empty, indicates that the custom module was created in the organization, folder,
        or project in which you are viewing the custom module. Otherwise, ancestor_module
        specifies the organization or folder from which the custom module is inherited.
        """
        return pulumi.get(self, "ancestor_module")

    @property
    @pulumi.getter(name="customConfig")
    def custom_config(self) -> pulumi.Output['outputs.OrganizationCustomModuleCustomConfig']:
        """
        The user specified custom configuration for the module.
        Structure is documented below.
        """
        return pulumi.get(self, "custom_config")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[str]:
        """
        The display name of the Security Health Analytics custom module. This
        display name becomes the finding category for all findings that are
        returned by this custom module. The display name must be between 1 and
        128 characters, start with a lowercase letter, and contain alphanumeric
        characters or underscores only.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="enablementState")
    def enablement_state(self) -> pulumi.Output[str]:
        """
        The enablement state of the custom module.
        Possible values are: `ENABLED`, `DISABLED`.
        """
        return pulumi.get(self, "enablement_state")

    @property
    @pulumi.getter(name="lastEditor")
    def last_editor(self) -> pulumi.Output[str]:
        """
        The editor that last updated the custom module.
        """
        return pulumi.get(self, "last_editor")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the property for the custom output.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def organization(self) -> pulumi.Output[str]:
        """
        Numerical ID of the parent organization.
        """
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[str]:
        """
        The time at which the custom module was last updated.
        A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and
        up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
        """
        return pulumi.get(self, "update_time")

