# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'InstanceIamBindingConditionArgs',
    'InstanceIamMemberConditionArgs',
    'NotificationConfigStreamingConfigArgs',
    'ProjectCustomModuleCustomConfigArgs',
    'ProjectCustomModuleCustomConfigCustomOutputArgs',
    'ProjectCustomModuleCustomConfigCustomOutputPropertyArgs',
    'ProjectCustomModuleCustomConfigCustomOutputPropertyValueExpressionArgs',
    'ProjectCustomModuleCustomConfigPredicateArgs',
    'ProjectCustomModuleCustomConfigResourceSelectorArgs',
    'SourceIamBindingConditionArgs',
    'SourceIamMemberConditionArgs',
]

@pulumi.input_type
class InstanceIamBindingConditionArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 title: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] description: An optional description of the instance.
        """
        InstanceIamBindingConditionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            expression=expression,
            title=title,
            description=description,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             expression: pulumi.Input[str],
             title: pulumi.Input[str],
             description: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("expression", expression)
        _setter("title", title)
        if description is not None:
            _setter("description", description)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        An optional description of the instance.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)


@pulumi.input_type
class InstanceIamMemberConditionArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 title: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] description: An optional description of the instance.
        """
        InstanceIamMemberConditionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            expression=expression,
            title=title,
            description=description,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             expression: pulumi.Input[str],
             title: pulumi.Input[str],
             description: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("expression", expression)
        _setter("title", title)
        if description is not None:
            _setter("description", description)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        An optional description of the instance.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)


@pulumi.input_type
class NotificationConfigStreamingConfigArgs:
    def __init__(__self__, *,
                 filter: pulumi.Input[str]):
        """
        :param pulumi.Input[str] filter: Expression that defines the filter to apply across create/update
               events of assets or findings as specified by the event type. The
               expression is a list of zero or more restrictions combined via
               logical operators AND and OR. Parentheses are supported, and OR
               has higher precedence than AND.
               Restrictions have the form <field> <operator> <value> and may have
               a - character in front of them to indicate negation. The fields
               map to those defined in the corresponding resource.
               The supported operators are:
               * = for all value types.
               * >, <, >=, <= for integer values.
               * :, meaning substring matching, for strings.
               The supported value types are:
               * string literals in quotes.
               * integer literals without quotes.
               * boolean literals true and false without quotes.
               See
               [Filtering notifications](https://cloud.google.com/security-command-center/docs/how-to-api-filter-notifications)
               for information on how to write a filter.
               
               - - -
        """
        NotificationConfigStreamingConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            filter=filter,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             filter: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("filter", filter)

    @property
    @pulumi.getter
    def filter(self) -> pulumi.Input[str]:
        """
        Expression that defines the filter to apply across create/update
        events of assets or findings as specified by the event type. The
        expression is a list of zero or more restrictions combined via
        logical operators AND and OR. Parentheses are supported, and OR
        has higher precedence than AND.
        Restrictions have the form <field> <operator> <value> and may have
        a - character in front of them to indicate negation. The fields
        map to those defined in the corresponding resource.
        The supported operators are:
        * = for all value types.
        * >, <, >=, <= for integer values.
        * :, meaning substring matching, for strings.
        The supported value types are:
        * string literals in quotes.
        * integer literals without quotes.
        * boolean literals true and false without quotes.
        See
        [Filtering notifications](https://cloud.google.com/security-command-center/docs/how-to-api-filter-notifications)
        for information on how to write a filter.

        - - -
        """
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter", value)


@pulumi.input_type
class ProjectCustomModuleCustomConfigArgs:
    def __init__(__self__, *,
                 predicate: pulumi.Input['ProjectCustomModuleCustomConfigPredicateArgs'],
                 recommendation: pulumi.Input[str],
                 resource_selector: pulumi.Input['ProjectCustomModuleCustomConfigResourceSelectorArgs'],
                 severity: pulumi.Input[str],
                 custom_output: Optional[pulumi.Input['ProjectCustomModuleCustomConfigCustomOutputArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['ProjectCustomModuleCustomConfigPredicateArgs'] predicate: The CEL expression to evaluate to produce findings. When the expression evaluates
               to true against a resource, a finding is generated.
               Structure is documented below.
        :param pulumi.Input[str] recommendation: An explanation of the recommended steps that security teams can take to resolve
               the detected issue. This explanation is returned with each finding generated by
               this module in the nextSteps property of the finding JSON.
        :param pulumi.Input['ProjectCustomModuleCustomConfigResourceSelectorArgs'] resource_selector: The resource types that the custom module operates on. Each custom module
               can specify up to 5 resource types.
               Structure is documented below.
        :param pulumi.Input[str] severity: The severity to assign to findings generated by the module.
               Possible values are: `CRITICAL`, `HIGH`, `MEDIUM`, `LOW`.
        :param pulumi.Input['ProjectCustomModuleCustomConfigCustomOutputArgs'] custom_output: Custom output properties.
               Structure is documented below.
        :param pulumi.Input[str] description: Text that describes the vulnerability or misconfiguration that the custom
               module detects. This explanation is returned with each finding instance to
               help investigators understand the detected issue. The text must be enclosed in quotation marks.
        """
        ProjectCustomModuleCustomConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            predicate=predicate,
            recommendation=recommendation,
            resource_selector=resource_selector,
            severity=severity,
            custom_output=custom_output,
            description=description,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             predicate: pulumi.Input['ProjectCustomModuleCustomConfigPredicateArgs'],
             recommendation: pulumi.Input[str],
             resource_selector: pulumi.Input['ProjectCustomModuleCustomConfigResourceSelectorArgs'],
             severity: pulumi.Input[str],
             custom_output: Optional[pulumi.Input['ProjectCustomModuleCustomConfigCustomOutputArgs']] = None,
             description: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("predicate", predicate)
        _setter("recommendation", recommendation)
        _setter("resource_selector", resource_selector)
        _setter("severity", severity)
        if custom_output is not None:
            _setter("custom_output", custom_output)
        if description is not None:
            _setter("description", description)

    @property
    @pulumi.getter
    def predicate(self) -> pulumi.Input['ProjectCustomModuleCustomConfigPredicateArgs']:
        """
        The CEL expression to evaluate to produce findings. When the expression evaluates
        to true against a resource, a finding is generated.
        Structure is documented below.
        """
        return pulumi.get(self, "predicate")

    @predicate.setter
    def predicate(self, value: pulumi.Input['ProjectCustomModuleCustomConfigPredicateArgs']):
        pulumi.set(self, "predicate", value)

    @property
    @pulumi.getter
    def recommendation(self) -> pulumi.Input[str]:
        """
        An explanation of the recommended steps that security teams can take to resolve
        the detected issue. This explanation is returned with each finding generated by
        this module in the nextSteps property of the finding JSON.
        """
        return pulumi.get(self, "recommendation")

    @recommendation.setter
    def recommendation(self, value: pulumi.Input[str]):
        pulumi.set(self, "recommendation", value)

    @property
    @pulumi.getter(name="resourceSelector")
    def resource_selector(self) -> pulumi.Input['ProjectCustomModuleCustomConfigResourceSelectorArgs']:
        """
        The resource types that the custom module operates on. Each custom module
        can specify up to 5 resource types.
        Structure is documented below.
        """
        return pulumi.get(self, "resource_selector")

    @resource_selector.setter
    def resource_selector(self, value: pulumi.Input['ProjectCustomModuleCustomConfigResourceSelectorArgs']):
        pulumi.set(self, "resource_selector", value)

    @property
    @pulumi.getter
    def severity(self) -> pulumi.Input[str]:
        """
        The severity to assign to findings generated by the module.
        Possible values are: `CRITICAL`, `HIGH`, `MEDIUM`, `LOW`.
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: pulumi.Input[str]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter(name="customOutput")
    def custom_output(self) -> Optional[pulumi.Input['ProjectCustomModuleCustomConfigCustomOutputArgs']]:
        """
        Custom output properties.
        Structure is documented below.
        """
        return pulumi.get(self, "custom_output")

    @custom_output.setter
    def custom_output(self, value: Optional[pulumi.Input['ProjectCustomModuleCustomConfigCustomOutputArgs']]):
        pulumi.set(self, "custom_output", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Text that describes the vulnerability or misconfiguration that the custom
        module detects. This explanation is returned with each finding instance to
        help investigators understand the detected issue. The text must be enclosed in quotation marks.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)


@pulumi.input_type
class ProjectCustomModuleCustomConfigCustomOutputArgs:
    def __init__(__self__, *,
                 properties: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectCustomModuleCustomConfigCustomOutputPropertyArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ProjectCustomModuleCustomConfigCustomOutputPropertyArgs']]] properties: A list of custom output properties to add to the finding.
               Structure is documented below.
        """
        ProjectCustomModuleCustomConfigCustomOutputArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            properties=properties,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             properties: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectCustomModuleCustomConfigCustomOutputPropertyArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if properties is not None:
            _setter("properties", properties)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProjectCustomModuleCustomConfigCustomOutputPropertyArgs']]]]:
        """
        A list of custom output properties to add to the finding.
        Structure is documented below.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectCustomModuleCustomConfigCustomOutputPropertyArgs']]]]):
        pulumi.set(self, "properties", value)


@pulumi.input_type
class ProjectCustomModuleCustomConfigCustomOutputPropertyArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value_expression: Optional[pulumi.Input['ProjectCustomModuleCustomConfigCustomOutputPropertyValueExpressionArgs']] = None):
        """
        :param pulumi.Input[str] name: Name of the property for the custom output.
        :param pulumi.Input['ProjectCustomModuleCustomConfigCustomOutputPropertyValueExpressionArgs'] value_expression: The CEL expression for the custom output. A resource property can be specified
               to return the value of the property or a text string enclosed in quotation marks.
               Structure is documented below.
        """
        ProjectCustomModuleCustomConfigCustomOutputPropertyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            value_expression=value_expression,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[pulumi.Input[str]] = None,
             value_expression: Optional[pulumi.Input['ProjectCustomModuleCustomConfigCustomOutputPropertyValueExpressionArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if name is not None:
            _setter("name", name)
        if value_expression is not None:
            _setter("value_expression", value_expression)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the property for the custom output.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="valueExpression")
    def value_expression(self) -> Optional[pulumi.Input['ProjectCustomModuleCustomConfigCustomOutputPropertyValueExpressionArgs']]:
        """
        The CEL expression for the custom output. A resource property can be specified
        to return the value of the property or a text string enclosed in quotation marks.
        Structure is documented below.
        """
        return pulumi.get(self, "value_expression")

    @value_expression.setter
    def value_expression(self, value: Optional[pulumi.Input['ProjectCustomModuleCustomConfigCustomOutputPropertyValueExpressionArgs']]):
        pulumi.set(self, "value_expression", value)


@pulumi.input_type
class ProjectCustomModuleCustomConfigCustomOutputPropertyValueExpressionArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] expression: Textual representation of an expression in Common Expression Language syntax.
        :param pulumi.Input[str] description: Description of the expression. This is a longer text which describes the
               expression, e.g. when hovered over it in a UI.
        :param pulumi.Input[str] location: String indicating the location of the expression for error reporting, e.g. a
               file name and a position in the file.
        :param pulumi.Input[str] title: Title for the expression, i.e. a short string describing its purpose. This can
               be used e.g. in UIs which allow to enter the expression.
        """
        ProjectCustomModuleCustomConfigCustomOutputPropertyValueExpressionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            expression=expression,
            description=description,
            location=location,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             expression: pulumi.Input[str],
             description: Optional[pulumi.Input[str]] = None,
             location: Optional[pulumi.Input[str]] = None,
             title: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("expression", expression)
        if description is not None:
            _setter("description", description)
        if location is not None:
            _setter("location", location)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        """
        Textual representation of an expression in Common Expression Language syntax.
        """
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the expression. This is a longer text which describes the
        expression, e.g. when hovered over it in a UI.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        String indicating the location of the expression for error reporting, e.g. a
        file name and a position in the file.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        Title for the expression, i.e. a short string describing its purpose. This can
        be used e.g. in UIs which allow to enter the expression.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class ProjectCustomModuleCustomConfigPredicateArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] expression: Textual representation of an expression in Common Expression Language syntax.
        :param pulumi.Input[str] description: Description of the expression. This is a longer text which describes the
               expression, e.g. when hovered over it in a UI.
        :param pulumi.Input[str] location: String indicating the location of the expression for error reporting, e.g. a
               file name and a position in the file.
        :param pulumi.Input[str] title: Title for the expression, i.e. a short string describing its purpose. This can
               be used e.g. in UIs which allow to enter the expression.
        """
        ProjectCustomModuleCustomConfigPredicateArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            expression=expression,
            description=description,
            location=location,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             expression: pulumi.Input[str],
             description: Optional[pulumi.Input[str]] = None,
             location: Optional[pulumi.Input[str]] = None,
             title: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("expression", expression)
        if description is not None:
            _setter("description", description)
        if location is not None:
            _setter("location", location)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        """
        Textual representation of an expression in Common Expression Language syntax.
        """
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the expression. This is a longer text which describes the
        expression, e.g. when hovered over it in a UI.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        String indicating the location of the expression for error reporting, e.g. a
        file name and a position in the file.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        Title for the expression, i.e. a short string describing its purpose. This can
        be used e.g. in UIs which allow to enter the expression.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class ProjectCustomModuleCustomConfigResourceSelectorArgs:
    def __init__(__self__, *,
                 resource_types: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] resource_types: The resource types to run the detector on.
               
               - - -
        """
        ProjectCustomModuleCustomConfigResourceSelectorArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            resource_types=resource_types,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             resource_types: pulumi.Input[Sequence[pulumi.Input[str]]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("resource_types", resource_types)

    @property
    @pulumi.getter(name="resourceTypes")
    def resource_types(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The resource types to run the detector on.

        - - -
        """
        return pulumi.get(self, "resource_types")

    @resource_types.setter
    def resource_types(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "resource_types", value)


@pulumi.input_type
class SourceIamBindingConditionArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 title: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] description: The description of the source (max of 1024 characters).
        """
        SourceIamBindingConditionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            expression=expression,
            title=title,
            description=description,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             expression: pulumi.Input[str],
             title: pulumi.Input[str],
             description: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("expression", expression)
        _setter("title", title)
        if description is not None:
            _setter("description", description)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the source (max of 1024 characters).
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)


@pulumi.input_type
class SourceIamMemberConditionArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 title: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] description: The description of the source (max of 1024 characters).
        """
        SourceIamMemberConditionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            expression=expression,
            title=title,
            description=description,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             expression: pulumi.Input[str],
             title: pulumi.Input[str],
             description: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("expression", expression)
        _setter("title", title)
        if description is not None:
            _setter("description", description)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the source (max of 1024 characters).
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)


