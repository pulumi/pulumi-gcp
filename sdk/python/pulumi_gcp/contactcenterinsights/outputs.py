# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'AnalysisRuleAnnotatorSelector',
    'AnalysisRuleAnnotatorSelectorQaConfig',
    'AnalysisRuleAnnotatorSelectorQaConfigScorecardList',
    'AnalysisRuleAnnotatorSelectorSummarizationConfig',
]

@pulumi.output_type
class AnalysisRuleAnnotatorSelector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "issueModels":
            suggest = "issue_models"
        elif key == "phraseMatchers":
            suggest = "phrase_matchers"
        elif key == "qaConfig":
            suggest = "qa_config"
        elif key == "runEntityAnnotator":
            suggest = "run_entity_annotator"
        elif key == "runIntentAnnotator":
            suggest = "run_intent_annotator"
        elif key == "runInterruptionAnnotator":
            suggest = "run_interruption_annotator"
        elif key == "runIssueModelAnnotator":
            suggest = "run_issue_model_annotator"
        elif key == "runPhraseMatcherAnnotator":
            suggest = "run_phrase_matcher_annotator"
        elif key == "runQaAnnotator":
            suggest = "run_qa_annotator"
        elif key == "runSentimentAnnotator":
            suggest = "run_sentiment_annotator"
        elif key == "runSilenceAnnotator":
            suggest = "run_silence_annotator"
        elif key == "runSummarizationAnnotator":
            suggest = "run_summarization_annotator"
        elif key == "summarizationConfig":
            suggest = "summarization_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AnalysisRuleAnnotatorSelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AnalysisRuleAnnotatorSelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AnalysisRuleAnnotatorSelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 issue_models: Optional[Sequence[builtins.str]] = None,
                 phrase_matchers: Optional[Sequence[builtins.str]] = None,
                 qa_config: Optional['outputs.AnalysisRuleAnnotatorSelectorQaConfig'] = None,
                 run_entity_annotator: Optional[builtins.bool] = None,
                 run_intent_annotator: Optional[builtins.bool] = None,
                 run_interruption_annotator: Optional[builtins.bool] = None,
                 run_issue_model_annotator: Optional[builtins.bool] = None,
                 run_phrase_matcher_annotator: Optional[builtins.bool] = None,
                 run_qa_annotator: Optional[builtins.bool] = None,
                 run_sentiment_annotator: Optional[builtins.bool] = None,
                 run_silence_annotator: Optional[builtins.bool] = None,
                 run_summarization_annotator: Optional[builtins.bool] = None,
                 summarization_config: Optional['outputs.AnalysisRuleAnnotatorSelectorSummarizationConfig'] = None):
        """
        :param Sequence[builtins.str] issue_models: The issue model to run. If not provided, the most recently deployed topic
               model will be used. The provided issue model will only be used for
               inference if the issue model is deployed and if run_issue_model_annotator
               is set to true. If more than one issue model is provided, only the first
               provided issue model will be used for inference.
        :param Sequence[builtins.str] phrase_matchers: The list of phrase matchers to run. If not provided, all active phrase
               matchers will be used. If inactive phrase matchers are provided, they will
               not be used. Phrase matchers will be run only if
               run_phrase_matcher_annotator is set to true. Format:
               projects/{project}/locations/{location}/phraseMatchers/{phrase_matcher}
        :param 'AnalysisRuleAnnotatorSelectorQaConfigArgs' qa_config: Configuration for the QA feature.
               Structure is documented below.
        :param builtins.bool run_entity_annotator: Whether to run the entity annotator.
        :param builtins.bool run_intent_annotator: Whether to run the intent annotator.
        :param builtins.bool run_interruption_annotator: Whether to run the interruption annotator.
        :param builtins.bool run_issue_model_annotator: Whether to run the issue model annotator. A model should have already been
               deployed for this to take effect.
        :param builtins.bool run_phrase_matcher_annotator: Whether to run the active phrase matcher annotator(s).
        :param builtins.bool run_qa_annotator: Whether to run the QA annotator.
        :param builtins.bool run_sentiment_annotator: Whether to run the sentiment annotator.
        :param builtins.bool run_silence_annotator: Whether to run the silence annotator.
        :param builtins.bool run_summarization_annotator: Whether to run the summarization annotator.
        :param 'AnalysisRuleAnnotatorSelectorSummarizationConfigArgs' summarization_config: Configuration for summarization.
               Structure is documented below.
        """
        if issue_models is not None:
            pulumi.set(__self__, "issue_models", issue_models)
        if phrase_matchers is not None:
            pulumi.set(__self__, "phrase_matchers", phrase_matchers)
        if qa_config is not None:
            pulumi.set(__self__, "qa_config", qa_config)
        if run_entity_annotator is not None:
            pulumi.set(__self__, "run_entity_annotator", run_entity_annotator)
        if run_intent_annotator is not None:
            pulumi.set(__self__, "run_intent_annotator", run_intent_annotator)
        if run_interruption_annotator is not None:
            pulumi.set(__self__, "run_interruption_annotator", run_interruption_annotator)
        if run_issue_model_annotator is not None:
            pulumi.set(__self__, "run_issue_model_annotator", run_issue_model_annotator)
        if run_phrase_matcher_annotator is not None:
            pulumi.set(__self__, "run_phrase_matcher_annotator", run_phrase_matcher_annotator)
        if run_qa_annotator is not None:
            pulumi.set(__self__, "run_qa_annotator", run_qa_annotator)
        if run_sentiment_annotator is not None:
            pulumi.set(__self__, "run_sentiment_annotator", run_sentiment_annotator)
        if run_silence_annotator is not None:
            pulumi.set(__self__, "run_silence_annotator", run_silence_annotator)
        if run_summarization_annotator is not None:
            pulumi.set(__self__, "run_summarization_annotator", run_summarization_annotator)
        if summarization_config is not None:
            pulumi.set(__self__, "summarization_config", summarization_config)

    @property
    @pulumi.getter(name="issueModels")
    def issue_models(self) -> Optional[Sequence[builtins.str]]:
        """
        The issue model to run. If not provided, the most recently deployed topic
        model will be used. The provided issue model will only be used for
        inference if the issue model is deployed and if run_issue_model_annotator
        is set to true. If more than one issue model is provided, only the first
        provided issue model will be used for inference.
        """
        return pulumi.get(self, "issue_models")

    @property
    @pulumi.getter(name="phraseMatchers")
    def phrase_matchers(self) -> Optional[Sequence[builtins.str]]:
        """
        The list of phrase matchers to run. If not provided, all active phrase
        matchers will be used. If inactive phrase matchers are provided, they will
        not be used. Phrase matchers will be run only if
        run_phrase_matcher_annotator is set to true. Format:
        projects/{project}/locations/{location}/phraseMatchers/{phrase_matcher}
        """
        return pulumi.get(self, "phrase_matchers")

    @property
    @pulumi.getter(name="qaConfig")
    def qa_config(self) -> Optional['outputs.AnalysisRuleAnnotatorSelectorQaConfig']:
        """
        Configuration for the QA feature.
        Structure is documented below.
        """
        return pulumi.get(self, "qa_config")

    @property
    @pulumi.getter(name="runEntityAnnotator")
    def run_entity_annotator(self) -> Optional[builtins.bool]:
        """
        Whether to run the entity annotator.
        """
        return pulumi.get(self, "run_entity_annotator")

    @property
    @pulumi.getter(name="runIntentAnnotator")
    def run_intent_annotator(self) -> Optional[builtins.bool]:
        """
        Whether to run the intent annotator.
        """
        return pulumi.get(self, "run_intent_annotator")

    @property
    @pulumi.getter(name="runInterruptionAnnotator")
    def run_interruption_annotator(self) -> Optional[builtins.bool]:
        """
        Whether to run the interruption annotator.
        """
        return pulumi.get(self, "run_interruption_annotator")

    @property
    @pulumi.getter(name="runIssueModelAnnotator")
    def run_issue_model_annotator(self) -> Optional[builtins.bool]:
        """
        Whether to run the issue model annotator. A model should have already been
        deployed for this to take effect.
        """
        return pulumi.get(self, "run_issue_model_annotator")

    @property
    @pulumi.getter(name="runPhraseMatcherAnnotator")
    def run_phrase_matcher_annotator(self) -> Optional[builtins.bool]:
        """
        Whether to run the active phrase matcher annotator(s).
        """
        return pulumi.get(self, "run_phrase_matcher_annotator")

    @property
    @pulumi.getter(name="runQaAnnotator")
    def run_qa_annotator(self) -> Optional[builtins.bool]:
        """
        Whether to run the QA annotator.
        """
        return pulumi.get(self, "run_qa_annotator")

    @property
    @pulumi.getter(name="runSentimentAnnotator")
    def run_sentiment_annotator(self) -> Optional[builtins.bool]:
        """
        Whether to run the sentiment annotator.
        """
        return pulumi.get(self, "run_sentiment_annotator")

    @property
    @pulumi.getter(name="runSilenceAnnotator")
    def run_silence_annotator(self) -> Optional[builtins.bool]:
        """
        Whether to run the silence annotator.
        """
        return pulumi.get(self, "run_silence_annotator")

    @property
    @pulumi.getter(name="runSummarizationAnnotator")
    def run_summarization_annotator(self) -> Optional[builtins.bool]:
        """
        Whether to run the summarization annotator.
        """
        return pulumi.get(self, "run_summarization_annotator")

    @property
    @pulumi.getter(name="summarizationConfig")
    def summarization_config(self) -> Optional['outputs.AnalysisRuleAnnotatorSelectorSummarizationConfig']:
        """
        Configuration for summarization.
        Structure is documented below.
        """
        return pulumi.get(self, "summarization_config")


@pulumi.output_type
class AnalysisRuleAnnotatorSelectorQaConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "scorecardList":
            suggest = "scorecard_list"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AnalysisRuleAnnotatorSelectorQaConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AnalysisRuleAnnotatorSelectorQaConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AnalysisRuleAnnotatorSelectorQaConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 scorecard_list: Optional['outputs.AnalysisRuleAnnotatorSelectorQaConfigScorecardList'] = None):
        """
        :param 'AnalysisRuleAnnotatorSelectorQaConfigScorecardListArgs' scorecard_list: Container for a list of scorecards.
               Structure is documented below.
        """
        if scorecard_list is not None:
            pulumi.set(__self__, "scorecard_list", scorecard_list)

    @property
    @pulumi.getter(name="scorecardList")
    def scorecard_list(self) -> Optional['outputs.AnalysisRuleAnnotatorSelectorQaConfigScorecardList']:
        """
        Container for a list of scorecards.
        Structure is documented below.
        """
        return pulumi.get(self, "scorecard_list")


@pulumi.output_type
class AnalysisRuleAnnotatorSelectorQaConfigScorecardList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "qaScorecardRevisions":
            suggest = "qa_scorecard_revisions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AnalysisRuleAnnotatorSelectorQaConfigScorecardList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AnalysisRuleAnnotatorSelectorQaConfigScorecardList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AnalysisRuleAnnotatorSelectorQaConfigScorecardList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 qa_scorecard_revisions: Optional[Sequence[builtins.str]] = None):
        """
        :param Sequence[builtins.str] qa_scorecard_revisions: List of QaScorecardRevisions.
        """
        if qa_scorecard_revisions is not None:
            pulumi.set(__self__, "qa_scorecard_revisions", qa_scorecard_revisions)

    @property
    @pulumi.getter(name="qaScorecardRevisions")
    def qa_scorecard_revisions(self) -> Optional[Sequence[builtins.str]]:
        """
        List of QaScorecardRevisions.
        """
        return pulumi.get(self, "qa_scorecard_revisions")


@pulumi.output_type
class AnalysisRuleAnnotatorSelectorSummarizationConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "conversationProfile":
            suggest = "conversation_profile"
        elif key == "summarizationModel":
            suggest = "summarization_model"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AnalysisRuleAnnotatorSelectorSummarizationConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AnalysisRuleAnnotatorSelectorSummarizationConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AnalysisRuleAnnotatorSelectorSummarizationConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 conversation_profile: Optional[builtins.str] = None,
                 summarization_model: Optional[builtins.str] = None):
        """
        :param builtins.str conversation_profile: Resource name of the Dialogflow conversation profile.
               Format:
               projects/{project}/locations/{location}/conversationProfiles/{conversation_profile}
        :param builtins.str summarization_model: Default summarization model to be used.
               Possible values:
               SUMMARIZATION_MODEL_UNSPECIFIED
               BASELINE_MODEL
               BASELINE_MODEL_V2_0
               Possible values are: `BASELINE_MODEL`, `BASELINE_MODEL_V2_0`.
        """
        if conversation_profile is not None:
            pulumi.set(__self__, "conversation_profile", conversation_profile)
        if summarization_model is not None:
            pulumi.set(__self__, "summarization_model", summarization_model)

    @property
    @pulumi.getter(name="conversationProfile")
    def conversation_profile(self) -> Optional[builtins.str]:
        """
        Resource name of the Dialogflow conversation profile.
        Format:
        projects/{project}/locations/{location}/conversationProfiles/{conversation_profile}
        """
        return pulumi.get(self, "conversation_profile")

    @property
    @pulumi.getter(name="summarizationModel")
    def summarization_model(self) -> Optional[builtins.str]:
        """
        Default summarization model to be used.
        Possible values:
        SUMMARIZATION_MODEL_UNSPECIFIED
        BASELINE_MODEL
        BASELINE_MODEL_V2_0
        Possible values are: `BASELINE_MODEL`, `BASELINE_MODEL_V2_0`.
        """
        return pulumi.get(self, "summarization_model")


