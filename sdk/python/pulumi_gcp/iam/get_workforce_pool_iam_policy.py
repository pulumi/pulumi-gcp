# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetWorkforcePoolIamPolicyResult',
    'AwaitableGetWorkforcePoolIamPolicyResult',
    'get_workforce_pool_iam_policy',
    'get_workforce_pool_iam_policy_output',
]

@pulumi.output_type
class GetWorkforcePoolIamPolicyResult:
    """
    A collection of values returned by getWorkforcePoolIamPolicy.
    """
    def __init__(__self__, etag=None, id=None, location=None, policy_data=None, workforce_pool_id=None):
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        pulumi.set(__self__, "etag", etag)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if policy_data and not isinstance(policy_data, str):
            raise TypeError("Expected argument 'policy_data' to be a str")
        pulumi.set(__self__, "policy_data", policy_data)
        if workforce_pool_id and not isinstance(workforce_pool_id, str):
            raise TypeError("Expected argument 'workforce_pool_id' to be a str")
        pulumi.set(__self__, "workforce_pool_id", workforce_pool_id)

    @_builtins.property
    @pulumi.getter
    def etag(self) -> _builtins.str:
        """
        (Computed) The etag of the IAM policy.
        """
        return pulumi.get(self, "etag")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def location(self) -> _builtins.str:
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter(name="policyData")
    def policy_data(self) -> _builtins.str:
        """
        (Required only by `iam.WorkforcePoolIamPolicy`) The policy data generated by
        a `organizations_get_iam_policy` data source.
        """
        return pulumi.get(self, "policy_data")

    @_builtins.property
    @pulumi.getter(name="workforcePoolId")
    def workforce_pool_id(self) -> _builtins.str:
        return pulumi.get(self, "workforce_pool_id")


class AwaitableGetWorkforcePoolIamPolicyResult(GetWorkforcePoolIamPolicyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetWorkforcePoolIamPolicyResult(
            etag=self.etag,
            id=self.id,
            location=self.location,
            policy_data=self.policy_data,
            workforce_pool_id=self.workforce_pool_id)


def get_workforce_pool_iam_policy(location: Optional[_builtins.str] = None,
                                  workforce_pool_id: Optional[_builtins.str] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetWorkforcePoolIamPolicyResult:
    """
    Retrieves the current IAM policy data for workforcepool

    ## Example Usage

    ```python
    import pulumi
    import pulumi_gcp as gcp

    policy = gcp.iam.get_workforce_pool_iam_policy(location=example["location"],
        workforce_pool_id=example["workforcePoolId"])
    ```


    :param _builtins.str location: The location for the resource. Used to find the parent resource to bind the IAM policy to. If not specified,
           the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
           location is specified, it is taken from the provider configuration.
    :param _builtins.str workforce_pool_id: Used to find the parent resource to bind the IAM policy to
    """
    __args__ = dict()
    __args__['location'] = location
    __args__['workforcePoolId'] = workforce_pool_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('gcp:iam/getWorkforcePoolIamPolicy:getWorkforcePoolIamPolicy', __args__, opts=opts, typ=GetWorkforcePoolIamPolicyResult).value

    return AwaitableGetWorkforcePoolIamPolicyResult(
        etag=pulumi.get(__ret__, 'etag'),
        id=pulumi.get(__ret__, 'id'),
        location=pulumi.get(__ret__, 'location'),
        policy_data=pulumi.get(__ret__, 'policy_data'),
        workforce_pool_id=pulumi.get(__ret__, 'workforce_pool_id'))
def get_workforce_pool_iam_policy_output(location: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                         workforce_pool_id: Optional[pulumi.Input[_builtins.str]] = None,
                                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetWorkforcePoolIamPolicyResult]:
    """
    Retrieves the current IAM policy data for workforcepool

    ## Example Usage

    ```python
    import pulumi
    import pulumi_gcp as gcp

    policy = gcp.iam.get_workforce_pool_iam_policy(location=example["location"],
        workforce_pool_id=example["workforcePoolId"])
    ```


    :param _builtins.str location: The location for the resource. Used to find the parent resource to bind the IAM policy to. If not specified,
           the value will be parsed from the identifier of the parent resource. If no location is provided in the parent identifier and no
           location is specified, it is taken from the provider configuration.
    :param _builtins.str workforce_pool_id: Used to find the parent resource to bind the IAM policy to
    """
    __args__ = dict()
    __args__['location'] = location
    __args__['workforcePoolId'] = workforce_pool_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('gcp:iam/getWorkforcePoolIamPolicy:getWorkforcePoolIamPolicy', __args__, opts=opts, typ=GetWorkforcePoolIamPolicyResult)
    return __ret__.apply(lambda __response__: GetWorkforcePoolIamPolicyResult(
        etag=pulumi.get(__response__, 'etag'),
        id=pulumi.get(__response__, 'id'),
        location=pulumi.get(__response__, 'location'),
        policy_data=pulumi.get(__response__, 'policy_data'),
        workforce_pool_id=pulumi.get(__response__, 'workforce_pool_id')))
