# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'RepositoryGroupIamBindingConditionArgs',
    'RepositoryGroupIamBindingConditionArgsDict',
    'RepositoryGroupIamMemberConditionArgs',
    'RepositoryGroupIamMemberConditionArgsDict',
    'RepositoryGroupRepositoryArgs',
    'RepositoryGroupRepositoryArgsDict',
]

MYPY = False

if not MYPY:
    class RepositoryGroupIamBindingConditionArgsDict(TypedDict):
        expression: pulumi.Input[builtins.str]
        title: pulumi.Input[builtins.str]
        description: NotRequired[pulumi.Input[builtins.str]]
elif False:
    RepositoryGroupIamBindingConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RepositoryGroupIamBindingConditionArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[builtins.str],
                 title: pulumi.Input[builtins.str],
                 description: Optional[pulumi.Input[builtins.str]] = None):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "title", title)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)


if not MYPY:
    class RepositoryGroupIamMemberConditionArgsDict(TypedDict):
        expression: pulumi.Input[builtins.str]
        title: pulumi.Input[builtins.str]
        description: NotRequired[pulumi.Input[builtins.str]]
elif False:
    RepositoryGroupIamMemberConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RepositoryGroupIamMemberConditionArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[builtins.str],
                 title: pulumi.Input[builtins.str],
                 description: Optional[pulumi.Input[builtins.str]] = None):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "title", title)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)


if not MYPY:
    class RepositoryGroupRepositoryArgsDict(TypedDict):
        branch_pattern: pulumi.Input[builtins.str]
        """
        Required. The Git branch pattern used for indexing in RE2 syntax.
        See https://github.com/google/re2/wiki/syntax for syntax.

        - - -
        """
        resource: pulumi.Input[builtins.str]
        """
        Required. The DeveloperConnect repository full resource name, relative resource name
        or resource URL to be indexed.
        """
elif False:
    RepositoryGroupRepositoryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RepositoryGroupRepositoryArgs:
    def __init__(__self__, *,
                 branch_pattern: pulumi.Input[builtins.str],
                 resource: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] branch_pattern: Required. The Git branch pattern used for indexing in RE2 syntax.
               See https://github.com/google/re2/wiki/syntax for syntax.
               
               - - -
        :param pulumi.Input[builtins.str] resource: Required. The DeveloperConnect repository full resource name, relative resource name
               or resource URL to be indexed.
        """
        pulumi.set(__self__, "branch_pattern", branch_pattern)
        pulumi.set(__self__, "resource", resource)

    @property
    @pulumi.getter(name="branchPattern")
    def branch_pattern(self) -> pulumi.Input[builtins.str]:
        """
        Required. The Git branch pattern used for indexing in RE2 syntax.
        See https://github.com/google/re2/wiki/syntax for syntax.

        - - -
        """
        return pulumi.get(self, "branch_pattern")

    @branch_pattern.setter
    def branch_pattern(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "branch_pattern", value)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[builtins.str]:
        """
        Required. The DeveloperConnect repository full resource name, relative resource name
        or resource URL to be indexed.
        """
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "resource", value)


