# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'CodeToolsSettingEnabledToolArgs',
    'CodeToolsSettingEnabledToolArgsDict',
    'CodeToolsSettingEnabledToolConfigArgs',
    'CodeToolsSettingEnabledToolConfigArgsDict',
    'RepositoryGroupIamBindingConditionArgs',
    'RepositoryGroupIamBindingConditionArgsDict',
    'RepositoryGroupIamMemberConditionArgs',
    'RepositoryGroupIamMemberConditionArgsDict',
    'RepositoryGroupRepositoryArgs',
    'RepositoryGroupRepositoryArgsDict',
]

MYPY = False

if not MYPY:
    class CodeToolsSettingEnabledToolArgsDict(TypedDict):
        handle: pulumi.Input[_builtins.str]
        """
        Handle used to invoke the tool.
        """
        tool: pulumi.Input[_builtins.str]
        """
        Link to the Tool
        """
        account_connector: NotRequired[pulumi.Input[_builtins.str]]
        """
        Link to the Dev Connect Account Connector that holds the user credentials.
        projects/{project}/locations/{location}/accountConnectors/{account_connector_id}
        """
        configs: NotRequired[pulumi.Input[Sequence[pulumi.Input['CodeToolsSettingEnabledToolConfigArgsDict']]]]
        """
        Configuration parameters for the tool.
        Structure is documented below.
        """
        uri_override: NotRequired[pulumi.Input[_builtins.str]]
        """
        Overridden URI, if allowed by Tool.
        """
elif False:
    CodeToolsSettingEnabledToolArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CodeToolsSettingEnabledToolArgs:
    def __init__(__self__, *,
                 handle: pulumi.Input[_builtins.str],
                 tool: pulumi.Input[_builtins.str],
                 account_connector: Optional[pulumi.Input[_builtins.str]] = None,
                 configs: Optional[pulumi.Input[Sequence[pulumi.Input['CodeToolsSettingEnabledToolConfigArgs']]]] = None,
                 uri_override: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] handle: Handle used to invoke the tool.
        :param pulumi.Input[_builtins.str] tool: Link to the Tool
        :param pulumi.Input[_builtins.str] account_connector: Link to the Dev Connect Account Connector that holds the user credentials.
               projects/{project}/locations/{location}/accountConnectors/{account_connector_id}
        :param pulumi.Input[Sequence[pulumi.Input['CodeToolsSettingEnabledToolConfigArgs']]] configs: Configuration parameters for the tool.
               Structure is documented below.
        :param pulumi.Input[_builtins.str] uri_override: Overridden URI, if allowed by Tool.
        """
        pulumi.set(__self__, "handle", handle)
        pulumi.set(__self__, "tool", tool)
        if account_connector is not None:
            pulumi.set(__self__, "account_connector", account_connector)
        if configs is not None:
            pulumi.set(__self__, "configs", configs)
        if uri_override is not None:
            pulumi.set(__self__, "uri_override", uri_override)

    @_builtins.property
    @pulumi.getter
    def handle(self) -> pulumi.Input[_builtins.str]:
        """
        Handle used to invoke the tool.
        """
        return pulumi.get(self, "handle")

    @handle.setter
    def handle(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "handle", value)

    @_builtins.property
    @pulumi.getter
    def tool(self) -> pulumi.Input[_builtins.str]:
        """
        Link to the Tool
        """
        return pulumi.get(self, "tool")

    @tool.setter
    def tool(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "tool", value)

    @_builtins.property
    @pulumi.getter(name="accountConnector")
    def account_connector(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Link to the Dev Connect Account Connector that holds the user credentials.
        projects/{project}/locations/{location}/accountConnectors/{account_connector_id}
        """
        return pulumi.get(self, "account_connector")

    @account_connector.setter
    def account_connector(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "account_connector", value)

    @_builtins.property
    @pulumi.getter
    def configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CodeToolsSettingEnabledToolConfigArgs']]]]:
        """
        Configuration parameters for the tool.
        Structure is documented below.
        """
        return pulumi.get(self, "configs")

    @configs.setter
    def configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CodeToolsSettingEnabledToolConfigArgs']]]]):
        pulumi.set(self, "configs", value)

    @_builtins.property
    @pulumi.getter(name="uriOverride")
    def uri_override(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Overridden URI, if allowed by Tool.
        """
        return pulumi.get(self, "uri_override")

    @uri_override.setter
    def uri_override(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "uri_override", value)


if not MYPY:
    class CodeToolsSettingEnabledToolConfigArgsDict(TypedDict):
        key: pulumi.Input[_builtins.str]
        """
        Key of the configuration item.
        """
        value: pulumi.Input[_builtins.str]
        """
        Value of the configuration item.
        """
elif False:
    CodeToolsSettingEnabledToolConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CodeToolsSettingEnabledToolConfigArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[_builtins.str],
                 value: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] key: Key of the configuration item.
        :param pulumi.Input[_builtins.str] value: Value of the configuration item.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> pulumi.Input[_builtins.str]:
        """
        Key of the configuration item.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "key", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Input[_builtins.str]:
        """
        Value of the configuration item.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class RepositoryGroupIamBindingConditionArgsDict(TypedDict):
        expression: pulumi.Input[_builtins.str]
        title: pulumi.Input[_builtins.str]
        description: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    RepositoryGroupIamBindingConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RepositoryGroupIamBindingConditionArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[_builtins.str],
                 title: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "title", title)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @_builtins.property
    @pulumi.getter
    def expression(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "expression", value)

    @_builtins.property
    @pulumi.getter
    def title(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "title", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)


if not MYPY:
    class RepositoryGroupIamMemberConditionArgsDict(TypedDict):
        expression: pulumi.Input[_builtins.str]
        title: pulumi.Input[_builtins.str]
        description: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    RepositoryGroupIamMemberConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RepositoryGroupIamMemberConditionArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[_builtins.str],
                 title: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "title", title)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @_builtins.property
    @pulumi.getter
    def expression(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "expression", value)

    @_builtins.property
    @pulumi.getter
    def title(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "title", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)


if not MYPY:
    class RepositoryGroupRepositoryArgsDict(TypedDict):
        branch_pattern: pulumi.Input[_builtins.str]
        """
        Required. The Git branch pattern used for indexing in RE2 syntax.
        See https://github.com/google/re2/wiki/syntax for syntax.
        """
        resource: pulumi.Input[_builtins.str]
        """
        Required. The DeveloperConnect repository full resource name, relative resource name
        or resource URL to be indexed.
        """
elif False:
    RepositoryGroupRepositoryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RepositoryGroupRepositoryArgs:
    def __init__(__self__, *,
                 branch_pattern: pulumi.Input[_builtins.str],
                 resource: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] branch_pattern: Required. The Git branch pattern used for indexing in RE2 syntax.
               See https://github.com/google/re2/wiki/syntax for syntax.
        :param pulumi.Input[_builtins.str] resource: Required. The DeveloperConnect repository full resource name, relative resource name
               or resource URL to be indexed.
        """
        pulumi.set(__self__, "branch_pattern", branch_pattern)
        pulumi.set(__self__, "resource", resource)

    @_builtins.property
    @pulumi.getter(name="branchPattern")
    def branch_pattern(self) -> pulumi.Input[_builtins.str]:
        """
        Required. The Git branch pattern used for indexing in RE2 syntax.
        See https://github.com/google/re2/wiki/syntax for syntax.
        """
        return pulumi.get(self, "branch_pattern")

    @branch_pattern.setter
    def branch_pattern(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "branch_pattern", value)

    @_builtins.property
    @pulumi.getter
    def resource(self) -> pulumi.Input[_builtins.str]:
        """
        Required. The DeveloperConnect repository full resource name, relative resource name
        or resource URL to be indexed.
        """
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "resource", value)


