# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'RepositoryGroupIamBindingCondition',
    'RepositoryGroupIamMemberCondition',
    'RepositoryGroupRepository',
]

@pulumi.output_type
class RepositoryGroupIamBindingCondition(dict):
    def __init__(__self__, *,
                 expression: str,
                 title: str,
                 description: Optional[str] = None):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "title", title)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def title(self) -> str:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")


@pulumi.output_type
class RepositoryGroupIamMemberCondition(dict):
    def __init__(__self__, *,
                 expression: str,
                 title: str,
                 description: Optional[str] = None):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "title", title)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def title(self) -> str:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")


@pulumi.output_type
class RepositoryGroupRepository(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "branchPattern":
            suggest = "branch_pattern"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RepositoryGroupRepository. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RepositoryGroupRepository.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RepositoryGroupRepository.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 branch_pattern: str,
                 resource: str):
        """
        :param str branch_pattern: Required. The Git branch pattern used for indexing in RE2 syntax.
               See https://github.com/google/re2/wiki/syntax for syntax.
               
               - - -
        :param str resource: Required. The DeveloperConnect repository full resource name, relative resource name
               or resource URL to be indexed.
        """
        pulumi.set(__self__, "branch_pattern", branch_pattern)
        pulumi.set(__self__, "resource", resource)

    @property
    @pulumi.getter(name="branchPattern")
    def branch_pattern(self) -> str:
        """
        Required. The Git branch pattern used for indexing in RE2 syntax.
        See https://github.com/google/re2/wiki/syntax for syntax.

        - - -
        """
        return pulumi.get(self, "branch_pattern")

    @property
    @pulumi.getter
    def resource(self) -> str:
        """
        Required. The DeveloperConnect repository full resource name, relative resource name
        or resource URL to be indexed.
        """
        return pulumi.get(self, "resource")


