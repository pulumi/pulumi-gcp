# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['RepositoryGroupArgs', 'RepositoryGroup']

@pulumi.input_type
class RepositoryGroupArgs:
    def __init__(__self__, *,
                 code_repository_index: pulumi.Input[str],
                 location: pulumi.Input[str],
                 repositories: pulumi.Input[Sequence[pulumi.Input['RepositoryGroupRepositoryArgs']]],
                 repository_group_id: pulumi.Input[str],
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 project: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a RepositoryGroup resource.
        :param pulumi.Input[str] code_repository_index: Required. Id of the Code Repository Index.
        :param pulumi.Input[str] location: The location of the Code Repository Index, for example `us-central1`.
        :param pulumi.Input[Sequence[pulumi.Input['RepositoryGroupRepositoryArgs']]] repositories: Required. List of repositories to group
               Structure is documented below.
        :param pulumi.Input[str] repository_group_id: Required. Id of the Repository Group.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Optional. Labels as key value pairs **Note**: This field is non-authoritative, and will only manage the labels present
               in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
        """
        pulumi.set(__self__, "code_repository_index", code_repository_index)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "repositories", repositories)
        pulumi.set(__self__, "repository_group_id", repository_group_id)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if project is not None:
            pulumi.set(__self__, "project", project)

    @property
    @pulumi.getter(name="codeRepositoryIndex")
    def code_repository_index(self) -> pulumi.Input[str]:
        """
        Required. Id of the Code Repository Index.
        """
        return pulumi.get(self, "code_repository_index")

    @code_repository_index.setter
    def code_repository_index(self, value: pulumi.Input[str]):
        pulumi.set(self, "code_repository_index", value)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input[str]:
        """
        The location of the Code Repository Index, for example `us-central1`.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[str]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def repositories(self) -> pulumi.Input[Sequence[pulumi.Input['RepositoryGroupRepositoryArgs']]]:
        """
        Required. List of repositories to group
        Structure is documented below.
        """
        return pulumi.get(self, "repositories")

    @repositories.setter
    def repositories(self, value: pulumi.Input[Sequence[pulumi.Input['RepositoryGroupRepositoryArgs']]]):
        pulumi.set(self, "repositories", value)

    @property
    @pulumi.getter(name="repositoryGroupId")
    def repository_group_id(self) -> pulumi.Input[str]:
        """
        Required. Id of the Repository Group.
        """
        return pulumi.get(self, "repository_group_id")

    @repository_group_id.setter
    def repository_group_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "repository_group_id", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Optional. Labels as key value pairs **Note**: This field is non-authoritative, and will only manage the labels present
        in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)


@pulumi.input_type
class _RepositoryGroupState:
    def __init__(__self__, *,
                 code_repository_index: Optional[pulumi.Input[str]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 effective_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 pulumi_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 repositories: Optional[pulumi.Input[Sequence[pulumi.Input['RepositoryGroupRepositoryArgs']]]] = None,
                 repository_group_id: Optional[pulumi.Input[str]] = None,
                 update_time: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering RepositoryGroup resources.
        :param pulumi.Input[str] code_repository_index: Required. Id of the Code Repository Index.
        :param pulumi.Input[str] create_time: Output only. Create time stamp
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] effective_labels: All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Optional. Labels as key value pairs **Note**: This field is non-authoritative, and will only manage the labels present
               in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
        :param pulumi.Input[str] location: The location of the Code Repository Index, for example `us-central1`.
        :param pulumi.Input[str] name: Immutable. Identifier. name of resource
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] pulumi_labels: The combination of labels configured directly on the resource
               and default labels configured on the provider.
        :param pulumi.Input[Sequence[pulumi.Input['RepositoryGroupRepositoryArgs']]] repositories: Required. List of repositories to group
               Structure is documented below.
        :param pulumi.Input[str] repository_group_id: Required. Id of the Repository Group.
        :param pulumi.Input[str] update_time: Output only. Update time stamp
        """
        if code_repository_index is not None:
            pulumi.set(__self__, "code_repository_index", code_repository_index)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if effective_labels is not None:
            pulumi.set(__self__, "effective_labels", effective_labels)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if pulumi_labels is not None:
            pulumi.set(__self__, "pulumi_labels", pulumi_labels)
        if repositories is not None:
            pulumi.set(__self__, "repositories", repositories)
        if repository_group_id is not None:
            pulumi.set(__self__, "repository_group_id", repository_group_id)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="codeRepositoryIndex")
    def code_repository_index(self) -> Optional[pulumi.Input[str]]:
        """
        Required. Id of the Code Repository Index.
        """
        return pulumi.get(self, "code_repository_index")

    @code_repository_index.setter
    def code_repository_index(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "code_repository_index", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        Output only. Create time stamp
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="effectiveLabels")
    def effective_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        """
        return pulumi.get(self, "effective_labels")

    @effective_labels.setter
    def effective_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "effective_labels", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Optional. Labels as key value pairs **Note**: This field is non-authoritative, and will only manage the labels present
        in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        The location of the Code Repository Index, for example `us-central1`.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Immutable. Identifier. name of resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="pulumiLabels")
    def pulumi_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The combination of labels configured directly on the resource
        and default labels configured on the provider.
        """
        return pulumi.get(self, "pulumi_labels")

    @pulumi_labels.setter
    def pulumi_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "pulumi_labels", value)

    @property
    @pulumi.getter
    def repositories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RepositoryGroupRepositoryArgs']]]]:
        """
        Required. List of repositories to group
        Structure is documented below.
        """
        return pulumi.get(self, "repositories")

    @repositories.setter
    def repositories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RepositoryGroupRepositoryArgs']]]]):
        pulumi.set(self, "repositories", value)

    @property
    @pulumi.getter(name="repositoryGroupId")
    def repository_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        Required. Id of the Repository Group.
        """
        return pulumi.get(self, "repository_group_id")

    @repository_group_id.setter
    def repository_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository_group_id", value)

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[str]]:
        """
        Output only. Update time stamp
        """
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_time", value)


class RepositoryGroup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 code_repository_index: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 repositories: Optional[pulumi.Input[Sequence[pulumi.Input[Union['RepositoryGroupRepositoryArgs', 'RepositoryGroupRepositoryArgsDict']]]]] = None,
                 repository_group_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## Example Usage

        ## Import

        RepositoryGroup can be imported using any of these accepted formats:

        * `projects/{{project}}/locations/{{location}}/codeRepositoryIndexes/{{code_repository_index}}/repositoryGroups/{{repository_group_id}}`

        * `{{project}}/{{location}}/{{code_repository_index}}/{{repository_group_id}}`

        * `{{location}}/{{code_repository_index}}/{{repository_group_id}}`

        When using the `pulumi import` command, RepositoryGroup can be imported using one of the formats above. For example:

        ```sh
        $ pulumi import gcp:gemini/repositoryGroup:RepositoryGroup default projects/{{project}}/locations/{{location}}/codeRepositoryIndexes/{{code_repository_index}}/repositoryGroups/{{repository_group_id}}
        ```

        ```sh
        $ pulumi import gcp:gemini/repositoryGroup:RepositoryGroup default {{project}}/{{location}}/{{code_repository_index}}/{{repository_group_id}}
        ```

        ```sh
        $ pulumi import gcp:gemini/repositoryGroup:RepositoryGroup default {{location}}/{{code_repository_index}}/{{repository_group_id}}
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] code_repository_index: Required. Id of the Code Repository Index.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Optional. Labels as key value pairs **Note**: This field is non-authoritative, and will only manage the labels present
               in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
        :param pulumi.Input[str] location: The location of the Code Repository Index, for example `us-central1`.
        :param pulumi.Input[Sequence[pulumi.Input[Union['RepositoryGroupRepositoryArgs', 'RepositoryGroupRepositoryArgsDict']]]] repositories: Required. List of repositories to group
               Structure is documented below.
        :param pulumi.Input[str] repository_group_id: Required. Id of the Repository Group.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RepositoryGroupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ## Import

        RepositoryGroup can be imported using any of these accepted formats:

        * `projects/{{project}}/locations/{{location}}/codeRepositoryIndexes/{{code_repository_index}}/repositoryGroups/{{repository_group_id}}`

        * `{{project}}/{{location}}/{{code_repository_index}}/{{repository_group_id}}`

        * `{{location}}/{{code_repository_index}}/{{repository_group_id}}`

        When using the `pulumi import` command, RepositoryGroup can be imported using one of the formats above. For example:

        ```sh
        $ pulumi import gcp:gemini/repositoryGroup:RepositoryGroup default projects/{{project}}/locations/{{location}}/codeRepositoryIndexes/{{code_repository_index}}/repositoryGroups/{{repository_group_id}}
        ```

        ```sh
        $ pulumi import gcp:gemini/repositoryGroup:RepositoryGroup default {{project}}/{{location}}/{{code_repository_index}}/{{repository_group_id}}
        ```

        ```sh
        $ pulumi import gcp:gemini/repositoryGroup:RepositoryGroup default {{location}}/{{code_repository_index}}/{{repository_group_id}}
        ```

        :param str resource_name: The name of the resource.
        :param RepositoryGroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RepositoryGroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 code_repository_index: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 repositories: Optional[pulumi.Input[Sequence[pulumi.Input[Union['RepositoryGroupRepositoryArgs', 'RepositoryGroupRepositoryArgsDict']]]]] = None,
                 repository_group_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RepositoryGroupArgs.__new__(RepositoryGroupArgs)

            if code_repository_index is None and not opts.urn:
                raise TypeError("Missing required property 'code_repository_index'")
            __props__.__dict__["code_repository_index"] = code_repository_index
            __props__.__dict__["labels"] = labels
            if location is None and not opts.urn:
                raise TypeError("Missing required property 'location'")
            __props__.__dict__["location"] = location
            __props__.__dict__["project"] = project
            if repositories is None and not opts.urn:
                raise TypeError("Missing required property 'repositories'")
            __props__.__dict__["repositories"] = repositories
            if repository_group_id is None and not opts.urn:
                raise TypeError("Missing required property 'repository_group_id'")
            __props__.__dict__["repository_group_id"] = repository_group_id
            __props__.__dict__["create_time"] = None
            __props__.__dict__["effective_labels"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["pulumi_labels"] = None
            __props__.__dict__["update_time"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["effectiveLabels", "pulumiLabels"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(RepositoryGroup, __self__).__init__(
            'gcp:gemini/repositoryGroup:RepositoryGroup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            code_repository_index: Optional[pulumi.Input[str]] = None,
            create_time: Optional[pulumi.Input[str]] = None,
            effective_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            location: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            project: Optional[pulumi.Input[str]] = None,
            pulumi_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            repositories: Optional[pulumi.Input[Sequence[pulumi.Input[Union['RepositoryGroupRepositoryArgs', 'RepositoryGroupRepositoryArgsDict']]]]] = None,
            repository_group_id: Optional[pulumi.Input[str]] = None,
            update_time: Optional[pulumi.Input[str]] = None) -> 'RepositoryGroup':
        """
        Get an existing RepositoryGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] code_repository_index: Required. Id of the Code Repository Index.
        :param pulumi.Input[str] create_time: Output only. Create time stamp
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] effective_labels: All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Optional. Labels as key value pairs **Note**: This field is non-authoritative, and will only manage the labels present
               in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
        :param pulumi.Input[str] location: The location of the Code Repository Index, for example `us-central1`.
        :param pulumi.Input[str] name: Immutable. Identifier. name of resource
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] pulumi_labels: The combination of labels configured directly on the resource
               and default labels configured on the provider.
        :param pulumi.Input[Sequence[pulumi.Input[Union['RepositoryGroupRepositoryArgs', 'RepositoryGroupRepositoryArgsDict']]]] repositories: Required. List of repositories to group
               Structure is documented below.
        :param pulumi.Input[str] repository_group_id: Required. Id of the Repository Group.
        :param pulumi.Input[str] update_time: Output only. Update time stamp
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RepositoryGroupState.__new__(_RepositoryGroupState)

        __props__.__dict__["code_repository_index"] = code_repository_index
        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["effective_labels"] = effective_labels
        __props__.__dict__["labels"] = labels
        __props__.__dict__["location"] = location
        __props__.__dict__["name"] = name
        __props__.__dict__["project"] = project
        __props__.__dict__["pulumi_labels"] = pulumi_labels
        __props__.__dict__["repositories"] = repositories
        __props__.__dict__["repository_group_id"] = repository_group_id
        __props__.__dict__["update_time"] = update_time
        return RepositoryGroup(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="codeRepositoryIndex")
    def code_repository_index(self) -> pulumi.Output[str]:
        """
        Required. Id of the Code Repository Index.
        """
        return pulumi.get(self, "code_repository_index")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        Output only. Create time stamp
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="effectiveLabels")
    def effective_labels(self) -> pulumi.Output[Mapping[str, str]]:
        """
        All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Pulumi, other clients and services.
        """
        return pulumi.get(self, "effective_labels")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Optional. Labels as key value pairs **Note**: This field is non-authoritative, and will only manage the labels present
        in your configuration. Please refer to the field 'effective_labels' for all of the labels present on the resource.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        """
        The location of the Code Repository Index, for example `us-central1`.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Immutable. Identifier. name of resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[str]:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="pulumiLabels")
    def pulumi_labels(self) -> pulumi.Output[Mapping[str, str]]:
        """
        The combination of labels configured directly on the resource
        and default labels configured on the provider.
        """
        return pulumi.get(self, "pulumi_labels")

    @property
    @pulumi.getter
    def repositories(self) -> pulumi.Output[Sequence['outputs.RepositoryGroupRepository']]:
        """
        Required. List of repositories to group
        Structure is documented below.
        """
        return pulumi.get(self, "repositories")

    @property
    @pulumi.getter(name="repositoryGroupId")
    def repository_group_id(self) -> pulumi.Output[str]:
        """
        Required. Id of the Repository Group.
        """
        return pulumi.get(self, "repository_group_id")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[str]:
        """
        Output only. Update time stamp
        """
        return pulumi.get(self, "update_time")

