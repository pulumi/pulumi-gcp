# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GroupAdditionalGroupKeyArgs',
    'GroupGroupKeyArgs',
    'GroupMembershipMemberKeyArgs',
    'GroupMembershipPreferredMemberKeyArgs',
    'GroupMembershipRoleArgs',
    'GroupMembershipRoleExpiryDetailArgs',
    'GetGroupLookupGroupKeyArgs',
]

@pulumi.input_type
class GroupAdditionalGroupKeyArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: The ID of the entity.
               For Google-managed entities, the id must be the email address of an existing
               group or user.
               For external-identity-mapped entities, the id must be a string conforming
               to the Identity Source's requirements.
               Must be unique within a namespace.
        :param pulumi.Input[str] namespace: The namespace in which the entity exists.
               If not specified, the EntityKey represents a Google-managed entity
               such as a Google user or a Google Group.
               If specified, the EntityKey represents an external-identity-mapped group.
               The namespace must correspond to an identity source created in Admin Console
               and must be in the form of `identitysources/{identity_source_id}`.
               
               - - -
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the entity.
        For Google-managed entities, the id must be the email address of an existing
        group or user.
        For external-identity-mapped entities, the id must be a string conforming
        to the Identity Source's requirements.
        Must be unique within a namespace.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        The namespace in which the entity exists.
        If not specified, the EntityKey represents a Google-managed entity
        such as a Google user or a Google Group.
        If specified, the EntityKey represents an external-identity-mapped group.
        The namespace must correspond to an identity source created in Admin Console
        and must be in the form of `identitysources/{identity_source_id}`.

        - - -
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class GroupGroupKeyArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 namespace: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: The ID of the entity.
               For Google-managed entities, the id must be the email address of an existing
               group or user.
               For external-identity-mapped entities, the id must be a string conforming
               to the Identity Source's requirements.
               Must be unique within a namespace.
        :param pulumi.Input[str] namespace: The namespace in which the entity exists.
               If not specified, the EntityKey represents a Google-managed entity
               such as a Google user or a Google Group.
               If specified, the EntityKey represents an external-identity-mapped group.
               The namespace must correspond to an identity source created in Admin Console
               and must be in the form of `identitysources/{identity_source_id}`.
               
               - - -
        """
        pulumi.set(__self__, "id", id)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        The ID of the entity.
        For Google-managed entities, the id must be the email address of an existing
        group or user.
        For external-identity-mapped entities, the id must be a string conforming
        to the Identity Source's requirements.
        Must be unique within a namespace.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        The namespace in which the entity exists.
        If not specified, the EntityKey represents a Google-managed entity
        such as a Google user or a Google Group.
        If specified, the EntityKey represents an external-identity-mapped group.
        The namespace must correspond to an identity source created in Admin Console
        and must be in the form of `identitysources/{identity_source_id}`.

        - - -
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class GroupMembershipMemberKeyArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 namespace: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: The ID of the entity.
               For Google-managed entities, the id must be the email address of an existing
               group or user.
               For external-identity-mapped entities, the id must be a string conforming
               to the Identity Source's requirements.
               Must be unique within a namespace.
        :param pulumi.Input[str] namespace: The namespace in which the entity exists.
               If not specified, the EntityKey represents a Google-managed entity
               such as a Google user or a Google Group.
               If specified, the EntityKey represents an external-identity-mapped group.
               The namespace must correspond to an identity source created in Admin Console
               and must be in the form of `identitysources/{identity_source_id}`.
        """
        pulumi.set(__self__, "id", id)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        The ID of the entity.
        For Google-managed entities, the id must be the email address of an existing
        group or user.
        For external-identity-mapped entities, the id must be a string conforming
        to the Identity Source's requirements.
        Must be unique within a namespace.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        The namespace in which the entity exists.
        If not specified, the EntityKey represents a Google-managed entity
        such as a Google user or a Google Group.
        If specified, the EntityKey represents an external-identity-mapped group.
        The namespace must correspond to an identity source created in Admin Console
        and must be in the form of `identitysources/{identity_source_id}`.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class GroupMembershipPreferredMemberKeyArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 namespace: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: The ID of the entity.
               For Google-managed entities, the id must be the email address of an existing
               group or user.
               For external-identity-mapped entities, the id must be a string conforming
               to the Identity Source's requirements.
               Must be unique within a namespace.
        :param pulumi.Input[str] namespace: The namespace in which the entity exists.
               If not specified, the EntityKey represents a Google-managed entity
               such as a Google user or a Google Group.
               If specified, the EntityKey represents an external-identity-mapped group.
               The namespace must correspond to an identity source created in Admin Console
               and must be in the form of `identitysources/{identity_source_id}`.
        """
        pulumi.set(__self__, "id", id)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        The ID of the entity.
        For Google-managed entities, the id must be the email address of an existing
        group or user.
        For external-identity-mapped entities, the id must be a string conforming
        to the Identity Source's requirements.
        Must be unique within a namespace.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        The namespace in which the entity exists.
        If not specified, the EntityKey represents a Google-managed entity
        such as a Google user or a Google Group.
        If specified, the EntityKey represents an external-identity-mapped group.
        The namespace must correspond to an identity source created in Admin Console
        and must be in the form of `identitysources/{identity_source_id}`.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class GroupMembershipRoleArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 expiry_detail: Optional[pulumi.Input['GroupMembershipRoleExpiryDetailArgs']] = None):
        """
        :param pulumi.Input[str] name: The name of the MembershipRole. Must be one of OWNER, MANAGER, MEMBER.
               Possible values are: `OWNER`, `MANAGER`, `MEMBER`.
        :param pulumi.Input['GroupMembershipRoleExpiryDetailArgs'] expiry_detail: The MembershipRole expiry details, only supported for MEMBER role.
               Other roles cannot be accompanied with MEMBER role having expiry.
               Structure is documented below.
        """
        pulumi.set(__self__, "name", name)
        if expiry_detail is not None:
            pulumi.set(__self__, "expiry_detail", expiry_detail)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the MembershipRole. Must be one of OWNER, MANAGER, MEMBER.
        Possible values are: `OWNER`, `MANAGER`, `MEMBER`.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="expiryDetail")
    def expiry_detail(self) -> Optional[pulumi.Input['GroupMembershipRoleExpiryDetailArgs']]:
        """
        The MembershipRole expiry details, only supported for MEMBER role.
        Other roles cannot be accompanied with MEMBER role having expiry.
        Structure is documented below.
        """
        return pulumi.get(self, "expiry_detail")

    @expiry_detail.setter
    def expiry_detail(self, value: Optional[pulumi.Input['GroupMembershipRoleExpiryDetailArgs']]):
        pulumi.set(self, "expiry_detail", value)


@pulumi.input_type
class GroupMembershipRoleExpiryDetailArgs:
    def __init__(__self__, *,
                 expire_time: pulumi.Input[str]):
        """
        :param pulumi.Input[str] expire_time: The time at which the MembershipRole will expire.
               A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
               resolution and up to nine fractional digits.
               Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
               
               - - -
        """
        pulumi.set(__self__, "expire_time", expire_time)

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> pulumi.Input[str]:
        """
        The time at which the MembershipRole will expire.
        A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
        resolution and up to nine fractional digits.
        Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".

        - - -
        """
        return pulumi.get(self, "expire_time")

    @expire_time.setter
    def expire_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "expire_time", value)


@pulumi.input_type
class GetGroupLookupGroupKeyArgs:
    def __init__(__self__, *,
                 id: str,
                 namespace: Optional[str] = None):
        """
        :param str id: (Required) The ID of the entity.
               For Google-managed entities, the id is the email address of an existing group or user.
               For external-identity-mapped entities, the id is a string conforming
               to the Identity Source's requirements.
        :param str namespace: (Optional) The namespace in which the entity exists.
               If not populated, the EntityKey represents a Google-managed entity
               such as a Google user or a Google Group.
               If populated, the EntityKey represents an external-identity-mapped group.
               The namespace must correspond to an identity source created in Admin Console
               and must be in the form of `identitysources/{identity_source_id}`.
        """
        pulumi.set(__self__, "id", id)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        (Required) The ID of the entity.
        For Google-managed entities, the id is the email address of an existing group or user.
        For external-identity-mapped entities, the id is a string conforming
        to the Identity Source's requirements.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: str):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        (Optional) The namespace in which the entity exists.
        If not populated, the EntityKey represents a Google-managed entity
        such as a Google user or a Google Group.
        If populated, the EntityKey represents an external-identity-mapped group.
        The namespace must correspond to an identity source created in Admin Console
        and must be in the form of `identitysources/{identity_source_id}`.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[str]):
        pulumi.set(self, "namespace", value)


