# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'BlockchainNodesConnectionInfoArgs',
    'BlockchainNodesConnectionInfoEndpointInfoArgs',
    'BlockchainNodesEthereumDetailsArgs',
    'BlockchainNodesEthereumDetailsAdditionalEndpointArgs',
    'BlockchainNodesEthereumDetailsGethDetailsArgs',
    'BlockchainNodesEthereumDetailsValidatorConfigArgs',
]

@pulumi.input_type
class BlockchainNodesConnectionInfoArgs:
    def __init__(__self__, *,
                 endpoint_infos: Optional[pulumi.Input[Sequence[pulumi.Input['BlockchainNodesConnectionInfoEndpointInfoArgs']]]] = None,
                 service_attachment: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['BlockchainNodesConnectionInfoEndpointInfoArgs']]] endpoint_infos: (Output)
               The endpoint information through which to interact with a blockchain node.
               Structure is documented below.
        :param pulumi.Input[str] service_attachment: (Output)
               A service attachment that exposes a node, and has the following format: projects/{project}/regions/{region}/serviceAttachments/{service_attachment_name}
        """
        if endpoint_infos is not None:
            pulumi.set(__self__, "endpoint_infos", endpoint_infos)
        if service_attachment is not None:
            pulumi.set(__self__, "service_attachment", service_attachment)

    @property
    @pulumi.getter(name="endpointInfos")
    def endpoint_infos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BlockchainNodesConnectionInfoEndpointInfoArgs']]]]:
        """
        (Output)
        The endpoint information through which to interact with a blockchain node.
        Structure is documented below.
        """
        return pulumi.get(self, "endpoint_infos")

    @endpoint_infos.setter
    def endpoint_infos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BlockchainNodesConnectionInfoEndpointInfoArgs']]]]):
        pulumi.set(self, "endpoint_infos", value)

    @property
    @pulumi.getter(name="serviceAttachment")
    def service_attachment(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        A service attachment that exposes a node, and has the following format: projects/{project}/regions/{region}/serviceAttachments/{service_attachment_name}
        """
        return pulumi.get(self, "service_attachment")

    @service_attachment.setter
    def service_attachment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_attachment", value)


@pulumi.input_type
class BlockchainNodesConnectionInfoEndpointInfoArgs:
    def __init__(__self__, *,
                 json_rpc_api_endpoint: Optional[pulumi.Input[str]] = None,
                 websockets_api_endpoint: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] json_rpc_api_endpoint: (Output)
               The assigned URL for the node JSON-RPC API endpoint.
        :param pulumi.Input[str] websockets_api_endpoint: (Output)
               The assigned URL for the node WebSockets API endpoint.
        """
        if json_rpc_api_endpoint is not None:
            pulumi.set(__self__, "json_rpc_api_endpoint", json_rpc_api_endpoint)
        if websockets_api_endpoint is not None:
            pulumi.set(__self__, "websockets_api_endpoint", websockets_api_endpoint)

    @property
    @pulumi.getter(name="jsonRpcApiEndpoint")
    def json_rpc_api_endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        The assigned URL for the node JSON-RPC API endpoint.
        """
        return pulumi.get(self, "json_rpc_api_endpoint")

    @json_rpc_api_endpoint.setter
    def json_rpc_api_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "json_rpc_api_endpoint", value)

    @property
    @pulumi.getter(name="websocketsApiEndpoint")
    def websockets_api_endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        The assigned URL for the node WebSockets API endpoint.
        """
        return pulumi.get(self, "websockets_api_endpoint")

    @websockets_api_endpoint.setter
    def websockets_api_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "websockets_api_endpoint", value)


@pulumi.input_type
class BlockchainNodesEthereumDetailsArgs:
    def __init__(__self__, *,
                 additional_endpoints: Optional[pulumi.Input[Sequence[pulumi.Input['BlockchainNodesEthereumDetailsAdditionalEndpointArgs']]]] = None,
                 api_enable_admin: Optional[pulumi.Input[bool]] = None,
                 api_enable_debug: Optional[pulumi.Input[bool]] = None,
                 consensus_client: Optional[pulumi.Input[str]] = None,
                 execution_client: Optional[pulumi.Input[str]] = None,
                 geth_details: Optional[pulumi.Input['BlockchainNodesEthereumDetailsGethDetailsArgs']] = None,
                 network: Optional[pulumi.Input[str]] = None,
                 node_type: Optional[pulumi.Input[str]] = None,
                 validator_config: Optional[pulumi.Input['BlockchainNodesEthereumDetailsValidatorConfigArgs']] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['BlockchainNodesEthereumDetailsAdditionalEndpointArgs']]] additional_endpoints: (Output)
               User-provided key-value pairs
               Structure is documented below.
        :param pulumi.Input[bool] api_enable_admin: Enables JSON-RPC access to functions in the admin namespace. Defaults to false.
        :param pulumi.Input[bool] api_enable_debug: Enables JSON-RPC access to functions in the debug namespace. Defaults to false.
        :param pulumi.Input[str] consensus_client: The consensus client
               Possible values are: `CONSENSUS_CLIENT_UNSPECIFIED`, `LIGHTHOUSE`.
        :param pulumi.Input[str] execution_client: The execution client
               Possible values are: `EXECUTION_CLIENT_UNSPECIFIED`, `GETH`, `ERIGON`.
        :param pulumi.Input['BlockchainNodesEthereumDetailsGethDetailsArgs'] geth_details: User-provided key-value pairs
               Structure is documented below.
        :param pulumi.Input[str] network: The Ethereum environment being accessed.
               Possible values are: `MAINNET`, `TESTNET_GOERLI_PRATER`, `TESTNET_SEPOLIA`.
        :param pulumi.Input[str] node_type: The type of Ethereum node.
               Possible values are: `LIGHT`, `FULL`, `ARCHIVE`.
        :param pulumi.Input['BlockchainNodesEthereumDetailsValidatorConfigArgs'] validator_config: Configuration for validator-related parameters on the beacon client, and for any managed validator client.
               Structure is documented below.
        """
        if additional_endpoints is not None:
            pulumi.set(__self__, "additional_endpoints", additional_endpoints)
        if api_enable_admin is not None:
            pulumi.set(__self__, "api_enable_admin", api_enable_admin)
        if api_enable_debug is not None:
            pulumi.set(__self__, "api_enable_debug", api_enable_debug)
        if consensus_client is not None:
            pulumi.set(__self__, "consensus_client", consensus_client)
        if execution_client is not None:
            pulumi.set(__self__, "execution_client", execution_client)
        if geth_details is not None:
            pulumi.set(__self__, "geth_details", geth_details)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if node_type is not None:
            pulumi.set(__self__, "node_type", node_type)
        if validator_config is not None:
            pulumi.set(__self__, "validator_config", validator_config)

    @property
    @pulumi.getter(name="additionalEndpoints")
    def additional_endpoints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BlockchainNodesEthereumDetailsAdditionalEndpointArgs']]]]:
        """
        (Output)
        User-provided key-value pairs
        Structure is documented below.
        """
        return pulumi.get(self, "additional_endpoints")

    @additional_endpoints.setter
    def additional_endpoints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BlockchainNodesEthereumDetailsAdditionalEndpointArgs']]]]):
        pulumi.set(self, "additional_endpoints", value)

    @property
    @pulumi.getter(name="apiEnableAdmin")
    def api_enable_admin(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables JSON-RPC access to functions in the admin namespace. Defaults to false.
        """
        return pulumi.get(self, "api_enable_admin")

    @api_enable_admin.setter
    def api_enable_admin(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "api_enable_admin", value)

    @property
    @pulumi.getter(name="apiEnableDebug")
    def api_enable_debug(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables JSON-RPC access to functions in the debug namespace. Defaults to false.
        """
        return pulumi.get(self, "api_enable_debug")

    @api_enable_debug.setter
    def api_enable_debug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "api_enable_debug", value)

    @property
    @pulumi.getter(name="consensusClient")
    def consensus_client(self) -> Optional[pulumi.Input[str]]:
        """
        The consensus client
        Possible values are: `CONSENSUS_CLIENT_UNSPECIFIED`, `LIGHTHOUSE`.
        """
        return pulumi.get(self, "consensus_client")

    @consensus_client.setter
    def consensus_client(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consensus_client", value)

    @property
    @pulumi.getter(name="executionClient")
    def execution_client(self) -> Optional[pulumi.Input[str]]:
        """
        The execution client
        Possible values are: `EXECUTION_CLIENT_UNSPECIFIED`, `GETH`, `ERIGON`.
        """
        return pulumi.get(self, "execution_client")

    @execution_client.setter
    def execution_client(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "execution_client", value)

    @property
    @pulumi.getter(name="gethDetails")
    def geth_details(self) -> Optional[pulumi.Input['BlockchainNodesEthereumDetailsGethDetailsArgs']]:
        """
        User-provided key-value pairs
        Structure is documented below.
        """
        return pulumi.get(self, "geth_details")

    @geth_details.setter
    def geth_details(self, value: Optional[pulumi.Input['BlockchainNodesEthereumDetailsGethDetailsArgs']]):
        pulumi.set(self, "geth_details", value)

    @property
    @pulumi.getter
    def network(self) -> Optional[pulumi.Input[str]]:
        """
        The Ethereum environment being accessed.
        Possible values are: `MAINNET`, `TESTNET_GOERLI_PRATER`, `TESTNET_SEPOLIA`.
        """
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter(name="nodeType")
    def node_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of Ethereum node.
        Possible values are: `LIGHT`, `FULL`, `ARCHIVE`.
        """
        return pulumi.get(self, "node_type")

    @node_type.setter
    def node_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_type", value)

    @property
    @pulumi.getter(name="validatorConfig")
    def validator_config(self) -> Optional[pulumi.Input['BlockchainNodesEthereumDetailsValidatorConfigArgs']]:
        """
        Configuration for validator-related parameters on the beacon client, and for any managed validator client.
        Structure is documented below.
        """
        return pulumi.get(self, "validator_config")

    @validator_config.setter
    def validator_config(self, value: Optional[pulumi.Input['BlockchainNodesEthereumDetailsValidatorConfigArgs']]):
        pulumi.set(self, "validator_config", value)


@pulumi.input_type
class BlockchainNodesEthereumDetailsAdditionalEndpointArgs:
    def __init__(__self__, *,
                 beacon_api_endpoint: Optional[pulumi.Input[str]] = None,
                 beacon_prometheus_metrics_api_endpoint: Optional[pulumi.Input[str]] = None,
                 execution_client_prometheus_metrics_api_endpoint: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] beacon_api_endpoint: (Output)
               The assigned URL for the node's Beacon API endpoint.
        :param pulumi.Input[str] beacon_prometheus_metrics_api_endpoint: (Output)
               The assigned URL for the node's Beacon Prometheus metrics endpoint.
        :param pulumi.Input[str] execution_client_prometheus_metrics_api_endpoint: (Output)
               The assigned URL for the node's execution client's Prometheus metrics endpoint.
        """
        if beacon_api_endpoint is not None:
            pulumi.set(__self__, "beacon_api_endpoint", beacon_api_endpoint)
        if beacon_prometheus_metrics_api_endpoint is not None:
            pulumi.set(__self__, "beacon_prometheus_metrics_api_endpoint", beacon_prometheus_metrics_api_endpoint)
        if execution_client_prometheus_metrics_api_endpoint is not None:
            pulumi.set(__self__, "execution_client_prometheus_metrics_api_endpoint", execution_client_prometheus_metrics_api_endpoint)

    @property
    @pulumi.getter(name="beaconApiEndpoint")
    def beacon_api_endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        The assigned URL for the node's Beacon API endpoint.
        """
        return pulumi.get(self, "beacon_api_endpoint")

    @beacon_api_endpoint.setter
    def beacon_api_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "beacon_api_endpoint", value)

    @property
    @pulumi.getter(name="beaconPrometheusMetricsApiEndpoint")
    def beacon_prometheus_metrics_api_endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        The assigned URL for the node's Beacon Prometheus metrics endpoint.
        """
        return pulumi.get(self, "beacon_prometheus_metrics_api_endpoint")

    @beacon_prometheus_metrics_api_endpoint.setter
    def beacon_prometheus_metrics_api_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "beacon_prometheus_metrics_api_endpoint", value)

    @property
    @pulumi.getter(name="executionClientPrometheusMetricsApiEndpoint")
    def execution_client_prometheus_metrics_api_endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        The assigned URL for the node's execution client's Prometheus metrics endpoint.
        """
        return pulumi.get(self, "execution_client_prometheus_metrics_api_endpoint")

    @execution_client_prometheus_metrics_api_endpoint.setter
    def execution_client_prometheus_metrics_api_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "execution_client_prometheus_metrics_api_endpoint", value)


@pulumi.input_type
class BlockchainNodesEthereumDetailsGethDetailsArgs:
    def __init__(__self__, *,
                 garbage_collection_mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] garbage_collection_mode: Blockchain garbage collection modes. Only applicable when NodeType is FULL or ARCHIVE.
               Possible values are: `FULL`, `ARCHIVE`.
               
               <a name="nested_additional_endpoints"></a>The `additional_endpoints` block contains:
        """
        if garbage_collection_mode is not None:
            pulumi.set(__self__, "garbage_collection_mode", garbage_collection_mode)

    @property
    @pulumi.getter(name="garbageCollectionMode")
    def garbage_collection_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Blockchain garbage collection modes. Only applicable when NodeType is FULL or ARCHIVE.
        Possible values are: `FULL`, `ARCHIVE`.

        <a name="nested_additional_endpoints"></a>The `additional_endpoints` block contains:
        """
        return pulumi.get(self, "garbage_collection_mode")

    @garbage_collection_mode.setter
    def garbage_collection_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "garbage_collection_mode", value)


@pulumi.input_type
class BlockchainNodesEthereumDetailsValidatorConfigArgs:
    def __init__(__self__, *,
                 mev_relay_urls: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] mev_relay_urls: URLs for MEV-relay services to use for block building. When set, a managed MEV-boost service is configured on the beacon client.
        """
        if mev_relay_urls is not None:
            pulumi.set(__self__, "mev_relay_urls", mev_relay_urls)

    @property
    @pulumi.getter(name="mevRelayUrls")
    def mev_relay_urls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        URLs for MEV-relay services to use for block building. When set, a managed MEV-boost service is configured on the beacon client.
        """
        return pulumi.get(self, "mev_relay_urls")

    @mev_relay_urls.setter
    def mev_relay_urls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "mev_relay_urls", value)


