# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'AutonomousDatabaseProperties',
    'AutonomousDatabasePropertiesApexDetail',
    'AutonomousDatabasePropertiesConnectionString',
    'AutonomousDatabasePropertiesConnectionStringAllConnectionString',
    'AutonomousDatabasePropertiesConnectionStringProfile',
    'AutonomousDatabasePropertiesConnectionUrl',
    'AutonomousDatabasePropertiesCustomerContact',
    'AutonomousDatabasePropertiesLocalStandbyDb',
    'AutonomousDatabasePropertiesScheduledOperationDetail',
    'AutonomousDatabasePropertiesScheduledOperationDetailStartTime',
    'AutonomousDatabasePropertiesScheduledOperationDetailStopTime',
    'CloudExadataInfrastructureProperties',
    'CloudExadataInfrastructurePropertiesCustomerContact',
    'CloudExadataInfrastructurePropertiesMaintenanceWindow',
    'CloudVmClusterProperties',
    'CloudVmClusterPropertiesDiagnosticsDataCollectionOptions',
    'CloudVmClusterPropertiesTimeZone',
    'GetAutonomousDatabasePropertyResult',
    'GetAutonomousDatabasePropertyApexDetailResult',
    'GetAutonomousDatabasePropertyConnectionStringResult',
    'GetAutonomousDatabasePropertyConnectionStringAllConnectionStringResult',
    'GetAutonomousDatabasePropertyConnectionStringProfileResult',
    'GetAutonomousDatabasePropertyConnectionUrlResult',
    'GetAutonomousDatabasePropertyCustomerContactResult',
    'GetAutonomousDatabasePropertyLocalStandbyDbResult',
    'GetAutonomousDatabasePropertyScheduledOperationDetailResult',
    'GetAutonomousDatabasePropertyScheduledOperationDetailStartTimeResult',
    'GetAutonomousDatabasePropertyScheduledOperationDetailStopTimeResult',
    'GetAutonomousDatabasesAutonomousDatabaseResult',
    'GetAutonomousDatabasesAutonomousDatabasePropertyResult',
    'GetAutonomousDatabasesAutonomousDatabasePropertyApexDetailResult',
    'GetAutonomousDatabasesAutonomousDatabasePropertyConnectionStringResult',
    'GetAutonomousDatabasesAutonomousDatabasePropertyConnectionStringAllConnectionStringResult',
    'GetAutonomousDatabasesAutonomousDatabasePropertyConnectionStringProfileResult',
    'GetAutonomousDatabasesAutonomousDatabasePropertyConnectionUrlResult',
    'GetAutonomousDatabasesAutonomousDatabasePropertyCustomerContactResult',
    'GetAutonomousDatabasesAutonomousDatabasePropertyLocalStandbyDbResult',
    'GetAutonomousDatabasesAutonomousDatabasePropertyScheduledOperationDetailResult',
    'GetAutonomousDatabasesAutonomousDatabasePropertyScheduledOperationDetailStartTimeResult',
    'GetAutonomousDatabasesAutonomousDatabasePropertyScheduledOperationDetailStopTimeResult',
    'GetCloudExadataInfrastructurePropertyResult',
    'GetCloudExadataInfrastructurePropertyCustomerContactResult',
    'GetCloudExadataInfrastructurePropertyMaintenanceWindowResult',
    'GetCloudExadataInfrastructuresCloudExadataInfrastructureResult',
    'GetCloudExadataInfrastructuresCloudExadataInfrastructurePropertyResult',
    'GetCloudExadataInfrastructuresCloudExadataInfrastructurePropertyCustomerContactResult',
    'GetCloudExadataInfrastructuresCloudExadataInfrastructurePropertyMaintenanceWindowResult',
    'GetCloudVmClusterPropertyResult',
    'GetCloudVmClusterPropertyDiagnosticsDataCollectionOptionResult',
    'GetCloudVmClusterPropertyTimeZoneResult',
    'GetCloudVmClustersCloudVmClusterResult',
    'GetCloudVmClustersCloudVmClusterPropertyResult',
    'GetCloudVmClustersCloudVmClusterPropertyDiagnosticsDataCollectionOptionResult',
    'GetCloudVmClustersCloudVmClusterPropertyTimeZoneResult',
    'GetDbNodesDbNodeResult',
    'GetDbNodesDbNodePropertyResult',
    'GetDbServersDbServerResult',
    'GetDbServersDbServerPropertyResult',
]

@pulumi.output_type
class AutonomousDatabaseProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dbWorkload":
            suggest = "db_workload"
        elif key == "licenseType":
            suggest = "license_type"
        elif key == "actualUsedDataStorageSizeTb":
            suggest = "actual_used_data_storage_size_tb"
        elif key == "allocatedStorageSizeTb":
            suggest = "allocated_storage_size_tb"
        elif key == "apexDetails":
            suggest = "apex_details"
        elif key == "arePrimaryAllowlistedIpsUsed":
            suggest = "are_primary_allowlisted_ips_used"
        elif key == "autonomousContainerDatabaseId":
            suggest = "autonomous_container_database_id"
        elif key == "availableUpgradeVersions":
            suggest = "available_upgrade_versions"
        elif key == "backupRetentionPeriodDays":
            suggest = "backup_retention_period_days"
        elif key == "characterSet":
            suggest = "character_set"
        elif key == "computeCount":
            suggest = "compute_count"
        elif key == "connectionStrings":
            suggest = "connection_strings"
        elif key == "connectionUrls":
            suggest = "connection_urls"
        elif key == "customerContacts":
            suggest = "customer_contacts"
        elif key == "dataSafeState":
            suggest = "data_safe_state"
        elif key == "dataStorageSizeGb":
            suggest = "data_storage_size_gb"
        elif key == "dataStorageSizeTb":
            suggest = "data_storage_size_tb"
        elif key == "databaseManagementState":
            suggest = "database_management_state"
        elif key == "dbEdition":
            suggest = "db_edition"
        elif key == "dbVersion":
            suggest = "db_version"
        elif key == "failedDataRecoveryDuration":
            suggest = "failed_data_recovery_duration"
        elif key == "isAutoScalingEnabled":
            suggest = "is_auto_scaling_enabled"
        elif key == "isLocalDataGuardEnabled":
            suggest = "is_local_data_guard_enabled"
        elif key == "isStorageAutoScalingEnabled":
            suggest = "is_storage_auto_scaling_enabled"
        elif key == "lifecycleDetails":
            suggest = "lifecycle_details"
        elif key == "localAdgAutoFailoverMaxDataLossLimit":
            suggest = "local_adg_auto_failover_max_data_loss_limit"
        elif key == "localDisasterRecoveryType":
            suggest = "local_disaster_recovery_type"
        elif key == "localStandbyDbs":
            suggest = "local_standby_dbs"
        elif key == "maintenanceBeginTime":
            suggest = "maintenance_begin_time"
        elif key == "maintenanceEndTime":
            suggest = "maintenance_end_time"
        elif key == "maintenanceScheduleType":
            suggest = "maintenance_schedule_type"
        elif key == "memoryPerOracleComputeUnitGbs":
            suggest = "memory_per_oracle_compute_unit_gbs"
        elif key == "memoryTableGbs":
            suggest = "memory_table_gbs"
        elif key == "mtlsConnectionRequired":
            suggest = "mtls_connection_required"
        elif key == "nCharacterSet":
            suggest = "n_character_set"
        elif key == "nextLongTermBackupTime":
            suggest = "next_long_term_backup_time"
        elif key == "ociUrl":
            suggest = "oci_url"
        elif key == "openMode":
            suggest = "open_mode"
        elif key == "operationsInsightsState":
            suggest = "operations_insights_state"
        elif key == "peerDbIds":
            suggest = "peer_db_ids"
        elif key == "permissionLevel":
            suggest = "permission_level"
        elif key == "privateEndpoint":
            suggest = "private_endpoint"
        elif key == "privateEndpointIp":
            suggest = "private_endpoint_ip"
        elif key == "privateEndpointLabel":
            suggest = "private_endpoint_label"
        elif key == "refreshableMode":
            suggest = "refreshable_mode"
        elif key == "refreshableState":
            suggest = "refreshable_state"
        elif key == "scheduledOperationDetails":
            suggest = "scheduled_operation_details"
        elif key == "sqlWebDeveloperUrl":
            suggest = "sql_web_developer_url"
        elif key == "supportedCloneRegions":
            suggest = "supported_clone_regions"
        elif key == "totalAutoBackupStorageSizeGbs":
            suggest = "total_auto_backup_storage_size_gbs"
        elif key == "usedDataStorageSizeTbs":
            suggest = "used_data_storage_size_tbs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AutonomousDatabaseProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AutonomousDatabaseProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AutonomousDatabaseProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 db_workload: str,
                 license_type: str,
                 actual_used_data_storage_size_tb: Optional[float] = None,
                 allocated_storage_size_tb: Optional[float] = None,
                 apex_details: Optional[Sequence['outputs.AutonomousDatabasePropertiesApexDetail']] = None,
                 are_primary_allowlisted_ips_used: Optional[bool] = None,
                 autonomous_container_database_id: Optional[str] = None,
                 available_upgrade_versions: Optional[Sequence[str]] = None,
                 backup_retention_period_days: Optional[int] = None,
                 character_set: Optional[str] = None,
                 compute_count: Optional[float] = None,
                 connection_strings: Optional[Sequence['outputs.AutonomousDatabasePropertiesConnectionString']] = None,
                 connection_urls: Optional[Sequence['outputs.AutonomousDatabasePropertiesConnectionUrl']] = None,
                 customer_contacts: Optional[Sequence['outputs.AutonomousDatabasePropertiesCustomerContact']] = None,
                 data_safe_state: Optional[str] = None,
                 data_storage_size_gb: Optional[int] = None,
                 data_storage_size_tb: Optional[int] = None,
                 database_management_state: Optional[str] = None,
                 db_edition: Optional[str] = None,
                 db_version: Optional[str] = None,
                 failed_data_recovery_duration: Optional[str] = None,
                 is_auto_scaling_enabled: Optional[bool] = None,
                 is_local_data_guard_enabled: Optional[bool] = None,
                 is_storage_auto_scaling_enabled: Optional[bool] = None,
                 lifecycle_details: Optional[str] = None,
                 local_adg_auto_failover_max_data_loss_limit: Optional[int] = None,
                 local_disaster_recovery_type: Optional[str] = None,
                 local_standby_dbs: Optional[Sequence['outputs.AutonomousDatabasePropertiesLocalStandbyDb']] = None,
                 maintenance_begin_time: Optional[str] = None,
                 maintenance_end_time: Optional[str] = None,
                 maintenance_schedule_type: Optional[str] = None,
                 memory_per_oracle_compute_unit_gbs: Optional[int] = None,
                 memory_table_gbs: Optional[int] = None,
                 mtls_connection_required: Optional[bool] = None,
                 n_character_set: Optional[str] = None,
                 next_long_term_backup_time: Optional[str] = None,
                 oci_url: Optional[str] = None,
                 ocid: Optional[str] = None,
                 open_mode: Optional[str] = None,
                 operations_insights_state: Optional[str] = None,
                 peer_db_ids: Optional[Sequence[str]] = None,
                 permission_level: Optional[str] = None,
                 private_endpoint: Optional[str] = None,
                 private_endpoint_ip: Optional[str] = None,
                 private_endpoint_label: Optional[str] = None,
                 refreshable_mode: Optional[str] = None,
                 refreshable_state: Optional[str] = None,
                 role: Optional[str] = None,
                 scheduled_operation_details: Optional[Sequence['outputs.AutonomousDatabasePropertiesScheduledOperationDetail']] = None,
                 sql_web_developer_url: Optional[str] = None,
                 state: Optional[str] = None,
                 supported_clone_regions: Optional[Sequence[str]] = None,
                 total_auto_backup_storage_size_gbs: Optional[float] = None,
                 used_data_storage_size_tbs: Optional[int] = None):
        """
        :param str db_workload: Possible values:
               DB_WORKLOAD_UNSPECIFIED
               OLTP
               DW
               AJD
               APEX
        :param str license_type: The license type used for the Autonomous Database.
               Possible values:
               LICENSE_TYPE_UNSPECIFIED
               LICENSE_INCLUDED
               BRING_YOUR_OWN_LICENSE
        :param float actual_used_data_storage_size_tb: (Output)
               The amount of storage currently being used for user and system data, in
               terabytes.
        :param float allocated_storage_size_tb: (Output)
               The amount of storage currently allocated for the database tables and
               billed for, rounded up in terabytes.
        :param Sequence['AutonomousDatabasePropertiesApexDetailArgs'] apex_details: (Output)
               Oracle APEX Application Development.
               https://docs.oracle.com/en-us/iaas/api/#/en/database/20160918/datatypes/AutonomousDatabaseApex
               Structure is documented below.
        :param bool are_primary_allowlisted_ips_used: (Output)
               This field indicates the status of Data Guard and Access control for the
               Autonomous Database. The field's value is null if Data Guard is disabled
               or Access Control is disabled. The field's value is TRUE if both Data Guard
               and Access Control are enabled, and the Autonomous Database is using
               primary IP access control list (ACL) for standby. The field's value is
               FALSE if both Data Guard and Access Control are enabled, and the Autonomous
               Database is using a different IP access control list (ACL) for standby
               compared to primary.
        :param str autonomous_container_database_id: (Output)
               The Autonomous Container Database OCID.
        :param Sequence[str] available_upgrade_versions: (Output)
               The list of available Oracle Database upgrade versions for an Autonomous
               Database.
        :param int backup_retention_period_days: The retention period for the Autonomous Database. This field is specified
               in days, can range from 1 day to 60 days, and has a default value of
               60 days.
        :param str character_set: The character set for the Autonomous Database. The default is AL32UTF8.
        :param float compute_count: The number of compute servers for the Autonomous Database.
        :param Sequence['AutonomousDatabasePropertiesConnectionStringArgs'] connection_strings: (Output)
               The connection string used to connect to the Autonomous Database.
               https://docs.oracle.com/en-us/iaas/api/#/en/database/20160918/datatypes/AutonomousDatabaseConnectionStrings
               Structure is documented below.
        :param Sequence['AutonomousDatabasePropertiesConnectionUrlArgs'] connection_urls: (Output)
               The URLs for accessing Oracle Application Express (APEX) and SQL Developer
               Web with a browser from a Compute instance.
               https://docs.oracle.com/en-us/iaas/api/#/en/database/20160918/datatypes/AutonomousDatabaseConnectionUrls
               Structure is documented below.
        :param Sequence['AutonomousDatabasePropertiesCustomerContactArgs'] customer_contacts: The list of customer contacts.
               Structure is documented below.
        :param str data_safe_state: (Output)
               The current state of the Data Safe registration for the
               Autonomous Database.
               Possible values:
               DATA_SAFE_STATE_UNSPECIFIED
               REGISTERING
               REGISTERED
               DEREGISTERING
               NOT_REGISTERED
               FAILED
        :param int data_storage_size_gb: The size of the data stored in the database, in gigabytes.
        :param int data_storage_size_tb: The size of the data stored in the database, in terabytes.
        :param str database_management_state: (Output)
               The current state of database management for the Autonomous Database.
               Possible values:
               DATABASE_MANAGEMENT_STATE_UNSPECIFIED
               ENABLING
               ENABLED
               DISABLING
               NOT_ENABLED
               FAILED_ENABLING
               FAILED_DISABLING
        :param str db_edition: The edition of the Autonomous Databases.
               Possible values:
               DATABASE_EDITION_UNSPECIFIED
               STANDARD_EDITION
               ENTERPRISE_EDITION
        :param str db_version: The Oracle Database version for the Autonomous Database.
        :param str failed_data_recovery_duration: (Output)
               This field indicates the number of seconds of data loss during a Data
               Guard failover.
        :param bool is_auto_scaling_enabled: This field indicates if auto scaling is enabled for the Autonomous Database
               CPU core count.
        :param bool is_local_data_guard_enabled: (Output)
               This field indicates whether the Autonomous Database has local (in-region)
               Data Guard enabled.
        :param bool is_storage_auto_scaling_enabled: This field indicates if auto scaling is enabled for the Autonomous Database
               storage.
        :param str lifecycle_details: (Output)
               The details of the current lifestyle state of the Autonomous Database.
        :param int local_adg_auto_failover_max_data_loss_limit: (Output)
               This field indicates the maximum data loss limit for an Autonomous
               Database, in seconds.
        :param str local_disaster_recovery_type: (Output)
               This field indicates the local disaster recovery (DR) type of an
               Autonomous Database.
               Possible values:
               LOCAL_DISASTER_RECOVERY_TYPE_UNSPECIFIED
               ADG
               BACKUP_BASED
        :param Sequence['AutonomousDatabasePropertiesLocalStandbyDbArgs'] local_standby_dbs: (Output)
               Autonomous Data Guard standby database details.
               https://docs.oracle.com/en-us/iaas/api/#/en/database/20160918/datatypes/AutonomousDatabaseStandbySummary
               Structure is documented below.
        :param str maintenance_begin_time: (Output)
               The date and time when maintenance will begin.
        :param str maintenance_end_time: (Output)
               The date and time when maintenance will end.
        :param str maintenance_schedule_type: The maintenance schedule of the Autonomous Database.
               Possible values:
               MAINTENANCE_SCHEDULE_TYPE_UNSPECIFIED
               EARLY
               REGULAR
        :param int memory_per_oracle_compute_unit_gbs: (Output)
               The amount of memory enabled per ECPU, in gigabytes.
        :param int memory_table_gbs: (Output)
               The memory assigned to in-memory tables in an Autonomous Database.
        :param bool mtls_connection_required: This field specifies if the Autonomous Database requires mTLS connections.
        :param str n_character_set: The national character set for the Autonomous Database. The default is
               AL16UTF16.
        :param str next_long_term_backup_time: (Output)
               The long term backup schedule of the Autonomous Database.
        :param str oci_url: (Output)
               The Oracle Cloud Infrastructure link for the Autonomous Database.
        :param str ocid: (Output)
               OCID of the Autonomous Database.
               https://docs.oracle.com/en-us/iaas/Content/General/Concepts/identifiers.htm#Oracle
        :param str open_mode: (Output)
               This field indicates the current mode of the Autonomous Database.
               Possible values:
               OPEN_MODE_UNSPECIFIED
               READ_ONLY
               READ_WRITE
        :param str operations_insights_state: Possible values:
               OPERATIONS_INSIGHTS_STATE_UNSPECIFIED
               ENABLING
               ENABLED
               DISABLING
               NOT_ENABLED
               FAILED_ENABLING
               FAILED_DISABLING
        :param Sequence[str] peer_db_ids: (Output)
               The list of OCIDs of standby databases located in Autonomous Data Guard
               remote regions that are associated with the source database.
        :param str permission_level: (Output)
               The permission level of the Autonomous Database.
               Possible values:
               PERMISSION_LEVEL_UNSPECIFIED
               RESTRICTED
               UNRESTRICTED
        :param str private_endpoint: (Output)
               The private endpoint for the Autonomous Database.
        :param str private_endpoint_ip: The private endpoint IP address for the Autonomous Database.
        :param str private_endpoint_label: The private endpoint label for the Autonomous Database.
        :param str refreshable_mode: (Output)
               The refresh mode of the cloned Autonomous Database.
               Possible values:
               REFRESHABLE_MODE_UNSPECIFIED
               AUTOMATIC
               MANUAL
        :param str refreshable_state: (Output)
               The refresh State of the clone.
               Possible values:
               REFRESHABLE_STATE_UNSPECIFIED
               REFRESHING
               NOT_REFRESHING
        :param str role: (Output)
               The Data Guard role of the Autonomous Database.
               Possible values:
               ROLE_UNSPECIFIED
               PRIMARY
               STANDBY
               DISABLED_STANDBY
               BACKUP_COPY
               SNAPSHOT_STANDBY
        :param Sequence['AutonomousDatabasePropertiesScheduledOperationDetailArgs'] scheduled_operation_details: (Output)
               The list and details of the scheduled operations of the Autonomous
               Database.
               Structure is documented below.
        :param str sql_web_developer_url: (Output)
               The SQL Web Developer URL for the Autonomous Database.
        :param str state: (Output)
               Possible values:
               STATE_UNSPECIFIED
               PROVISIONING
               AVAILABLE
               STOPPING
               STOPPED
               STARTING
               TERMINATING
               TERMINATED
               UNAVAILABLE
               RESTORE_IN_PROGRESS
               RESTORE_FAILED
               BACKUP_IN_PROGRESS
               SCALE_IN_PROGRESS
               AVAILABLE_NEEDS_ATTENTION
               UPDATING
               MAINTENANCE_IN_PROGRESS
               RESTARTING
               RECREATING
               ROLE_CHANGE_IN_PROGRESS
               UPGRADING
               INACCESSIBLE
               STANDBY
        :param Sequence[str] supported_clone_regions: (Output)
               The list of available regions that can be used to create a clone for the
               Autonomous Database.
        :param float total_auto_backup_storage_size_gbs: (Output)
               The storage space used by automatic backups of Autonomous Database, in
               gigabytes.
        :param int used_data_storage_size_tbs: (Output)
               The storage space used by Autonomous Database, in gigabytes.
        """
        pulumi.set(__self__, "db_workload", db_workload)
        pulumi.set(__self__, "license_type", license_type)
        if actual_used_data_storage_size_tb is not None:
            pulumi.set(__self__, "actual_used_data_storage_size_tb", actual_used_data_storage_size_tb)
        if allocated_storage_size_tb is not None:
            pulumi.set(__self__, "allocated_storage_size_tb", allocated_storage_size_tb)
        if apex_details is not None:
            pulumi.set(__self__, "apex_details", apex_details)
        if are_primary_allowlisted_ips_used is not None:
            pulumi.set(__self__, "are_primary_allowlisted_ips_used", are_primary_allowlisted_ips_used)
        if autonomous_container_database_id is not None:
            pulumi.set(__self__, "autonomous_container_database_id", autonomous_container_database_id)
        if available_upgrade_versions is not None:
            pulumi.set(__self__, "available_upgrade_versions", available_upgrade_versions)
        if backup_retention_period_days is not None:
            pulumi.set(__self__, "backup_retention_period_days", backup_retention_period_days)
        if character_set is not None:
            pulumi.set(__self__, "character_set", character_set)
        if compute_count is not None:
            pulumi.set(__self__, "compute_count", compute_count)
        if connection_strings is not None:
            pulumi.set(__self__, "connection_strings", connection_strings)
        if connection_urls is not None:
            pulumi.set(__self__, "connection_urls", connection_urls)
        if customer_contacts is not None:
            pulumi.set(__self__, "customer_contacts", customer_contacts)
        if data_safe_state is not None:
            pulumi.set(__self__, "data_safe_state", data_safe_state)
        if data_storage_size_gb is not None:
            pulumi.set(__self__, "data_storage_size_gb", data_storage_size_gb)
        if data_storage_size_tb is not None:
            pulumi.set(__self__, "data_storage_size_tb", data_storage_size_tb)
        if database_management_state is not None:
            pulumi.set(__self__, "database_management_state", database_management_state)
        if db_edition is not None:
            pulumi.set(__self__, "db_edition", db_edition)
        if db_version is not None:
            pulumi.set(__self__, "db_version", db_version)
        if failed_data_recovery_duration is not None:
            pulumi.set(__self__, "failed_data_recovery_duration", failed_data_recovery_duration)
        if is_auto_scaling_enabled is not None:
            pulumi.set(__self__, "is_auto_scaling_enabled", is_auto_scaling_enabled)
        if is_local_data_guard_enabled is not None:
            pulumi.set(__self__, "is_local_data_guard_enabled", is_local_data_guard_enabled)
        if is_storage_auto_scaling_enabled is not None:
            pulumi.set(__self__, "is_storage_auto_scaling_enabled", is_storage_auto_scaling_enabled)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if local_adg_auto_failover_max_data_loss_limit is not None:
            pulumi.set(__self__, "local_adg_auto_failover_max_data_loss_limit", local_adg_auto_failover_max_data_loss_limit)
        if local_disaster_recovery_type is not None:
            pulumi.set(__self__, "local_disaster_recovery_type", local_disaster_recovery_type)
        if local_standby_dbs is not None:
            pulumi.set(__self__, "local_standby_dbs", local_standby_dbs)
        if maintenance_begin_time is not None:
            pulumi.set(__self__, "maintenance_begin_time", maintenance_begin_time)
        if maintenance_end_time is not None:
            pulumi.set(__self__, "maintenance_end_time", maintenance_end_time)
        if maintenance_schedule_type is not None:
            pulumi.set(__self__, "maintenance_schedule_type", maintenance_schedule_type)
        if memory_per_oracle_compute_unit_gbs is not None:
            pulumi.set(__self__, "memory_per_oracle_compute_unit_gbs", memory_per_oracle_compute_unit_gbs)
        if memory_table_gbs is not None:
            pulumi.set(__self__, "memory_table_gbs", memory_table_gbs)
        if mtls_connection_required is not None:
            pulumi.set(__self__, "mtls_connection_required", mtls_connection_required)
        if n_character_set is not None:
            pulumi.set(__self__, "n_character_set", n_character_set)
        if next_long_term_backup_time is not None:
            pulumi.set(__self__, "next_long_term_backup_time", next_long_term_backup_time)
        if oci_url is not None:
            pulumi.set(__self__, "oci_url", oci_url)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if open_mode is not None:
            pulumi.set(__self__, "open_mode", open_mode)
        if operations_insights_state is not None:
            pulumi.set(__self__, "operations_insights_state", operations_insights_state)
        if peer_db_ids is not None:
            pulumi.set(__self__, "peer_db_ids", peer_db_ids)
        if permission_level is not None:
            pulumi.set(__self__, "permission_level", permission_level)
        if private_endpoint is not None:
            pulumi.set(__self__, "private_endpoint", private_endpoint)
        if private_endpoint_ip is not None:
            pulumi.set(__self__, "private_endpoint_ip", private_endpoint_ip)
        if private_endpoint_label is not None:
            pulumi.set(__self__, "private_endpoint_label", private_endpoint_label)
        if refreshable_mode is not None:
            pulumi.set(__self__, "refreshable_mode", refreshable_mode)
        if refreshable_state is not None:
            pulumi.set(__self__, "refreshable_state", refreshable_state)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if scheduled_operation_details is not None:
            pulumi.set(__self__, "scheduled_operation_details", scheduled_operation_details)
        if sql_web_developer_url is not None:
            pulumi.set(__self__, "sql_web_developer_url", sql_web_developer_url)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if supported_clone_regions is not None:
            pulumi.set(__self__, "supported_clone_regions", supported_clone_regions)
        if total_auto_backup_storage_size_gbs is not None:
            pulumi.set(__self__, "total_auto_backup_storage_size_gbs", total_auto_backup_storage_size_gbs)
        if used_data_storage_size_tbs is not None:
            pulumi.set(__self__, "used_data_storage_size_tbs", used_data_storage_size_tbs)

    @property
    @pulumi.getter(name="dbWorkload")
    def db_workload(self) -> str:
        """
        Possible values:
        DB_WORKLOAD_UNSPECIFIED
        OLTP
        DW
        AJD
        APEX
        """
        return pulumi.get(self, "db_workload")

    @property
    @pulumi.getter(name="licenseType")
    def license_type(self) -> str:
        """
        The license type used for the Autonomous Database.
        Possible values:
        LICENSE_TYPE_UNSPECIFIED
        LICENSE_INCLUDED
        BRING_YOUR_OWN_LICENSE
        """
        return pulumi.get(self, "license_type")

    @property
    @pulumi.getter(name="actualUsedDataStorageSizeTb")
    def actual_used_data_storage_size_tb(self) -> Optional[float]:
        """
        (Output)
        The amount of storage currently being used for user and system data, in
        terabytes.
        """
        return pulumi.get(self, "actual_used_data_storage_size_tb")

    @property
    @pulumi.getter(name="allocatedStorageSizeTb")
    def allocated_storage_size_tb(self) -> Optional[float]:
        """
        (Output)
        The amount of storage currently allocated for the database tables and
        billed for, rounded up in terabytes.
        """
        return pulumi.get(self, "allocated_storage_size_tb")

    @property
    @pulumi.getter(name="apexDetails")
    def apex_details(self) -> Optional[Sequence['outputs.AutonomousDatabasePropertiesApexDetail']]:
        """
        (Output)
        Oracle APEX Application Development.
        https://docs.oracle.com/en-us/iaas/api/#/en/database/20160918/datatypes/AutonomousDatabaseApex
        Structure is documented below.
        """
        return pulumi.get(self, "apex_details")

    @property
    @pulumi.getter(name="arePrimaryAllowlistedIpsUsed")
    def are_primary_allowlisted_ips_used(self) -> Optional[bool]:
        """
        (Output)
        This field indicates the status of Data Guard and Access control for the
        Autonomous Database. The field's value is null if Data Guard is disabled
        or Access Control is disabled. The field's value is TRUE if both Data Guard
        and Access Control are enabled, and the Autonomous Database is using
        primary IP access control list (ACL) for standby. The field's value is
        FALSE if both Data Guard and Access Control are enabled, and the Autonomous
        Database is using a different IP access control list (ACL) for standby
        compared to primary.
        """
        return pulumi.get(self, "are_primary_allowlisted_ips_used")

    @property
    @pulumi.getter(name="autonomousContainerDatabaseId")
    def autonomous_container_database_id(self) -> Optional[str]:
        """
        (Output)
        The Autonomous Container Database OCID.
        """
        return pulumi.get(self, "autonomous_container_database_id")

    @property
    @pulumi.getter(name="availableUpgradeVersions")
    def available_upgrade_versions(self) -> Optional[Sequence[str]]:
        """
        (Output)
        The list of available Oracle Database upgrade versions for an Autonomous
        Database.
        """
        return pulumi.get(self, "available_upgrade_versions")

    @property
    @pulumi.getter(name="backupRetentionPeriodDays")
    def backup_retention_period_days(self) -> Optional[int]:
        """
        The retention period for the Autonomous Database. This field is specified
        in days, can range from 1 day to 60 days, and has a default value of
        60 days.
        """
        return pulumi.get(self, "backup_retention_period_days")

    @property
    @pulumi.getter(name="characterSet")
    def character_set(self) -> Optional[str]:
        """
        The character set for the Autonomous Database. The default is AL32UTF8.
        """
        return pulumi.get(self, "character_set")

    @property
    @pulumi.getter(name="computeCount")
    def compute_count(self) -> Optional[float]:
        """
        The number of compute servers for the Autonomous Database.
        """
        return pulumi.get(self, "compute_count")

    @property
    @pulumi.getter(name="connectionStrings")
    def connection_strings(self) -> Optional[Sequence['outputs.AutonomousDatabasePropertiesConnectionString']]:
        """
        (Output)
        The connection string used to connect to the Autonomous Database.
        https://docs.oracle.com/en-us/iaas/api/#/en/database/20160918/datatypes/AutonomousDatabaseConnectionStrings
        Structure is documented below.
        """
        return pulumi.get(self, "connection_strings")

    @property
    @pulumi.getter(name="connectionUrls")
    def connection_urls(self) -> Optional[Sequence['outputs.AutonomousDatabasePropertiesConnectionUrl']]:
        """
        (Output)
        The URLs for accessing Oracle Application Express (APEX) and SQL Developer
        Web with a browser from a Compute instance.
        https://docs.oracle.com/en-us/iaas/api/#/en/database/20160918/datatypes/AutonomousDatabaseConnectionUrls
        Structure is documented below.
        """
        return pulumi.get(self, "connection_urls")

    @property
    @pulumi.getter(name="customerContacts")
    def customer_contacts(self) -> Optional[Sequence['outputs.AutonomousDatabasePropertiesCustomerContact']]:
        """
        The list of customer contacts.
        Structure is documented below.
        """
        return pulumi.get(self, "customer_contacts")

    @property
    @pulumi.getter(name="dataSafeState")
    def data_safe_state(self) -> Optional[str]:
        """
        (Output)
        The current state of the Data Safe registration for the
        Autonomous Database.
        Possible values:
        DATA_SAFE_STATE_UNSPECIFIED
        REGISTERING
        REGISTERED
        DEREGISTERING
        NOT_REGISTERED
        FAILED
        """
        return pulumi.get(self, "data_safe_state")

    @property
    @pulumi.getter(name="dataStorageSizeGb")
    def data_storage_size_gb(self) -> Optional[int]:
        """
        The size of the data stored in the database, in gigabytes.
        """
        return pulumi.get(self, "data_storage_size_gb")

    @property
    @pulumi.getter(name="dataStorageSizeTb")
    def data_storage_size_tb(self) -> Optional[int]:
        """
        The size of the data stored in the database, in terabytes.
        """
        return pulumi.get(self, "data_storage_size_tb")

    @property
    @pulumi.getter(name="databaseManagementState")
    def database_management_state(self) -> Optional[str]:
        """
        (Output)
        The current state of database management for the Autonomous Database.
        Possible values:
        DATABASE_MANAGEMENT_STATE_UNSPECIFIED
        ENABLING
        ENABLED
        DISABLING
        NOT_ENABLED
        FAILED_ENABLING
        FAILED_DISABLING
        """
        return pulumi.get(self, "database_management_state")

    @property
    @pulumi.getter(name="dbEdition")
    def db_edition(self) -> Optional[str]:
        """
        The edition of the Autonomous Databases.
        Possible values:
        DATABASE_EDITION_UNSPECIFIED
        STANDARD_EDITION
        ENTERPRISE_EDITION
        """
        return pulumi.get(self, "db_edition")

    @property
    @pulumi.getter(name="dbVersion")
    def db_version(self) -> Optional[str]:
        """
        The Oracle Database version for the Autonomous Database.
        """
        return pulumi.get(self, "db_version")

    @property
    @pulumi.getter(name="failedDataRecoveryDuration")
    def failed_data_recovery_duration(self) -> Optional[str]:
        """
        (Output)
        This field indicates the number of seconds of data loss during a Data
        Guard failover.
        """
        return pulumi.get(self, "failed_data_recovery_duration")

    @property
    @pulumi.getter(name="isAutoScalingEnabled")
    def is_auto_scaling_enabled(self) -> Optional[bool]:
        """
        This field indicates if auto scaling is enabled for the Autonomous Database
        CPU core count.
        """
        return pulumi.get(self, "is_auto_scaling_enabled")

    @property
    @pulumi.getter(name="isLocalDataGuardEnabled")
    def is_local_data_guard_enabled(self) -> Optional[bool]:
        """
        (Output)
        This field indicates whether the Autonomous Database has local (in-region)
        Data Guard enabled.
        """
        return pulumi.get(self, "is_local_data_guard_enabled")

    @property
    @pulumi.getter(name="isStorageAutoScalingEnabled")
    def is_storage_auto_scaling_enabled(self) -> Optional[bool]:
        """
        This field indicates if auto scaling is enabled for the Autonomous Database
        storage.
        """
        return pulumi.get(self, "is_storage_auto_scaling_enabled")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        """
        (Output)
        The details of the current lifestyle state of the Autonomous Database.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="localAdgAutoFailoverMaxDataLossLimit")
    def local_adg_auto_failover_max_data_loss_limit(self) -> Optional[int]:
        """
        (Output)
        This field indicates the maximum data loss limit for an Autonomous
        Database, in seconds.
        """
        return pulumi.get(self, "local_adg_auto_failover_max_data_loss_limit")

    @property
    @pulumi.getter(name="localDisasterRecoveryType")
    def local_disaster_recovery_type(self) -> Optional[str]:
        """
        (Output)
        This field indicates the local disaster recovery (DR) type of an
        Autonomous Database.
        Possible values:
        LOCAL_DISASTER_RECOVERY_TYPE_UNSPECIFIED
        ADG
        BACKUP_BASED
        """
        return pulumi.get(self, "local_disaster_recovery_type")

    @property
    @pulumi.getter(name="localStandbyDbs")
    def local_standby_dbs(self) -> Optional[Sequence['outputs.AutonomousDatabasePropertiesLocalStandbyDb']]:
        """
        (Output)
        Autonomous Data Guard standby database details.
        https://docs.oracle.com/en-us/iaas/api/#/en/database/20160918/datatypes/AutonomousDatabaseStandbySummary
        Structure is documented below.
        """
        return pulumi.get(self, "local_standby_dbs")

    @property
    @pulumi.getter(name="maintenanceBeginTime")
    def maintenance_begin_time(self) -> Optional[str]:
        """
        (Output)
        The date and time when maintenance will begin.
        """
        return pulumi.get(self, "maintenance_begin_time")

    @property
    @pulumi.getter(name="maintenanceEndTime")
    def maintenance_end_time(self) -> Optional[str]:
        """
        (Output)
        The date and time when maintenance will end.
        """
        return pulumi.get(self, "maintenance_end_time")

    @property
    @pulumi.getter(name="maintenanceScheduleType")
    def maintenance_schedule_type(self) -> Optional[str]:
        """
        The maintenance schedule of the Autonomous Database.
        Possible values:
        MAINTENANCE_SCHEDULE_TYPE_UNSPECIFIED
        EARLY
        REGULAR
        """
        return pulumi.get(self, "maintenance_schedule_type")

    @property
    @pulumi.getter(name="memoryPerOracleComputeUnitGbs")
    def memory_per_oracle_compute_unit_gbs(self) -> Optional[int]:
        """
        (Output)
        The amount of memory enabled per ECPU, in gigabytes.
        """
        return pulumi.get(self, "memory_per_oracle_compute_unit_gbs")

    @property
    @pulumi.getter(name="memoryTableGbs")
    def memory_table_gbs(self) -> Optional[int]:
        """
        (Output)
        The memory assigned to in-memory tables in an Autonomous Database.
        """
        return pulumi.get(self, "memory_table_gbs")

    @property
    @pulumi.getter(name="mtlsConnectionRequired")
    def mtls_connection_required(self) -> Optional[bool]:
        """
        This field specifies if the Autonomous Database requires mTLS connections.
        """
        return pulumi.get(self, "mtls_connection_required")

    @property
    @pulumi.getter(name="nCharacterSet")
    def n_character_set(self) -> Optional[str]:
        """
        The national character set for the Autonomous Database. The default is
        AL16UTF16.
        """
        return pulumi.get(self, "n_character_set")

    @property
    @pulumi.getter(name="nextLongTermBackupTime")
    def next_long_term_backup_time(self) -> Optional[str]:
        """
        (Output)
        The long term backup schedule of the Autonomous Database.
        """
        return pulumi.get(self, "next_long_term_backup_time")

    @property
    @pulumi.getter(name="ociUrl")
    def oci_url(self) -> Optional[str]:
        """
        (Output)
        The Oracle Cloud Infrastructure link for the Autonomous Database.
        """
        return pulumi.get(self, "oci_url")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        """
        (Output)
        OCID of the Autonomous Database.
        https://docs.oracle.com/en-us/iaas/Content/General/Concepts/identifiers.htm#Oracle
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter(name="openMode")
    def open_mode(self) -> Optional[str]:
        """
        (Output)
        This field indicates the current mode of the Autonomous Database.
        Possible values:
        OPEN_MODE_UNSPECIFIED
        READ_ONLY
        READ_WRITE
        """
        return pulumi.get(self, "open_mode")

    @property
    @pulumi.getter(name="operationsInsightsState")
    def operations_insights_state(self) -> Optional[str]:
        """
        Possible values:
        OPERATIONS_INSIGHTS_STATE_UNSPECIFIED
        ENABLING
        ENABLED
        DISABLING
        NOT_ENABLED
        FAILED_ENABLING
        FAILED_DISABLING
        """
        return pulumi.get(self, "operations_insights_state")

    @property
    @pulumi.getter(name="peerDbIds")
    def peer_db_ids(self) -> Optional[Sequence[str]]:
        """
        (Output)
        The list of OCIDs of standby databases located in Autonomous Data Guard
        remote regions that are associated with the source database.
        """
        return pulumi.get(self, "peer_db_ids")

    @property
    @pulumi.getter(name="permissionLevel")
    def permission_level(self) -> Optional[str]:
        """
        (Output)
        The permission level of the Autonomous Database.
        Possible values:
        PERMISSION_LEVEL_UNSPECIFIED
        RESTRICTED
        UNRESTRICTED
        """
        return pulumi.get(self, "permission_level")

    @property
    @pulumi.getter(name="privateEndpoint")
    def private_endpoint(self) -> Optional[str]:
        """
        (Output)
        The private endpoint for the Autonomous Database.
        """
        return pulumi.get(self, "private_endpoint")

    @property
    @pulumi.getter(name="privateEndpointIp")
    def private_endpoint_ip(self) -> Optional[str]:
        """
        The private endpoint IP address for the Autonomous Database.
        """
        return pulumi.get(self, "private_endpoint_ip")

    @property
    @pulumi.getter(name="privateEndpointLabel")
    def private_endpoint_label(self) -> Optional[str]:
        """
        The private endpoint label for the Autonomous Database.
        """
        return pulumi.get(self, "private_endpoint_label")

    @property
    @pulumi.getter(name="refreshableMode")
    def refreshable_mode(self) -> Optional[str]:
        """
        (Output)
        The refresh mode of the cloned Autonomous Database.
        Possible values:
        REFRESHABLE_MODE_UNSPECIFIED
        AUTOMATIC
        MANUAL
        """
        return pulumi.get(self, "refreshable_mode")

    @property
    @pulumi.getter(name="refreshableState")
    def refreshable_state(self) -> Optional[str]:
        """
        (Output)
        The refresh State of the clone.
        Possible values:
        REFRESHABLE_STATE_UNSPECIFIED
        REFRESHING
        NOT_REFRESHING
        """
        return pulumi.get(self, "refreshable_state")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        """
        (Output)
        The Data Guard role of the Autonomous Database.
        Possible values:
        ROLE_UNSPECIFIED
        PRIMARY
        STANDBY
        DISABLED_STANDBY
        BACKUP_COPY
        SNAPSHOT_STANDBY
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="scheduledOperationDetails")
    def scheduled_operation_details(self) -> Optional[Sequence['outputs.AutonomousDatabasePropertiesScheduledOperationDetail']]:
        """
        (Output)
        The list and details of the scheduled operations of the Autonomous
        Database.
        Structure is documented below.
        """
        return pulumi.get(self, "scheduled_operation_details")

    @property
    @pulumi.getter(name="sqlWebDeveloperUrl")
    def sql_web_developer_url(self) -> Optional[str]:
        """
        (Output)
        The SQL Web Developer URL for the Autonomous Database.
        """
        return pulumi.get(self, "sql_web_developer_url")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        """
        (Output)
        Possible values:
        STATE_UNSPECIFIED
        PROVISIONING
        AVAILABLE
        STOPPING
        STOPPED
        STARTING
        TERMINATING
        TERMINATED
        UNAVAILABLE
        RESTORE_IN_PROGRESS
        RESTORE_FAILED
        BACKUP_IN_PROGRESS
        SCALE_IN_PROGRESS
        AVAILABLE_NEEDS_ATTENTION
        UPDATING
        MAINTENANCE_IN_PROGRESS
        RESTARTING
        RECREATING
        ROLE_CHANGE_IN_PROGRESS
        UPGRADING
        INACCESSIBLE
        STANDBY
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="supportedCloneRegions")
    def supported_clone_regions(self) -> Optional[Sequence[str]]:
        """
        (Output)
        The list of available regions that can be used to create a clone for the
        Autonomous Database.
        """
        return pulumi.get(self, "supported_clone_regions")

    @property
    @pulumi.getter(name="totalAutoBackupStorageSizeGbs")
    def total_auto_backup_storage_size_gbs(self) -> Optional[float]:
        """
        (Output)
        The storage space used by automatic backups of Autonomous Database, in
        gigabytes.
        """
        return pulumi.get(self, "total_auto_backup_storage_size_gbs")

    @property
    @pulumi.getter(name="usedDataStorageSizeTbs")
    def used_data_storage_size_tbs(self) -> Optional[int]:
        """
        (Output)
        The storage space used by Autonomous Database, in gigabytes.
        """
        return pulumi.get(self, "used_data_storage_size_tbs")


@pulumi.output_type
class AutonomousDatabasePropertiesApexDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apexVersion":
            suggest = "apex_version"
        elif key == "ordsVersion":
            suggest = "ords_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AutonomousDatabasePropertiesApexDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AutonomousDatabasePropertiesApexDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AutonomousDatabasePropertiesApexDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 apex_version: Optional[str] = None,
                 ords_version: Optional[str] = None):
        """
        :param str apex_version: The Oracle APEX Application Development version.
        :param str ords_version: The Oracle REST Data Services (ORDS) version.
        """
        if apex_version is not None:
            pulumi.set(__self__, "apex_version", apex_version)
        if ords_version is not None:
            pulumi.set(__self__, "ords_version", ords_version)

    @property
    @pulumi.getter(name="apexVersion")
    def apex_version(self) -> Optional[str]:
        """
        The Oracle APEX Application Development version.
        """
        return pulumi.get(self, "apex_version")

    @property
    @pulumi.getter(name="ordsVersion")
    def ords_version(self) -> Optional[str]:
        """
        The Oracle REST Data Services (ORDS) version.
        """
        return pulumi.get(self, "ords_version")


@pulumi.output_type
class AutonomousDatabasePropertiesConnectionString(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allConnectionStrings":
            suggest = "all_connection_strings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AutonomousDatabasePropertiesConnectionString. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AutonomousDatabasePropertiesConnectionString.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AutonomousDatabasePropertiesConnectionString.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 all_connection_strings: Optional[Sequence['outputs.AutonomousDatabasePropertiesConnectionStringAllConnectionString']] = None,
                 dedicated: Optional[str] = None,
                 high: Optional[str] = None,
                 low: Optional[str] = None,
                 medium: Optional[str] = None,
                 profiles: Optional[Sequence['outputs.AutonomousDatabasePropertiesConnectionStringProfile']] = None):
        """
        :param Sequence['AutonomousDatabasePropertiesConnectionStringAllConnectionStringArgs'] all_connection_strings: A list of all connection strings that can be used to connect to the
               Autonomous Database.
        :param str dedicated: The database service provides the least level of resources to each SQL
               statement, but supports the most number of concurrent SQL statements.
        :param str high: The database service provides the highest level of resources to each SQL
               statement.
        :param str low: The database service provides the least level of resources to each SQL
               statement.
        :param str medium: The database service provides a lower level of resources to each SQL
               statement.
        :param Sequence['AutonomousDatabasePropertiesConnectionStringProfileArgs'] profiles: A list of connection string profiles to allow clients to group, filter, and
               select values based on the structured metadata.
        """
        if all_connection_strings is not None:
            pulumi.set(__self__, "all_connection_strings", all_connection_strings)
        if dedicated is not None:
            pulumi.set(__self__, "dedicated", dedicated)
        if high is not None:
            pulumi.set(__self__, "high", high)
        if low is not None:
            pulumi.set(__self__, "low", low)
        if medium is not None:
            pulumi.set(__self__, "medium", medium)
        if profiles is not None:
            pulumi.set(__self__, "profiles", profiles)

    @property
    @pulumi.getter(name="allConnectionStrings")
    def all_connection_strings(self) -> Optional[Sequence['outputs.AutonomousDatabasePropertiesConnectionStringAllConnectionString']]:
        """
        A list of all connection strings that can be used to connect to the
        Autonomous Database.
        """
        return pulumi.get(self, "all_connection_strings")

    @property
    @pulumi.getter
    def dedicated(self) -> Optional[str]:
        """
        The database service provides the least level of resources to each SQL
        statement, but supports the most number of concurrent SQL statements.
        """
        return pulumi.get(self, "dedicated")

    @property
    @pulumi.getter
    def high(self) -> Optional[str]:
        """
        The database service provides the highest level of resources to each SQL
        statement.
        """
        return pulumi.get(self, "high")

    @property
    @pulumi.getter
    def low(self) -> Optional[str]:
        """
        The database service provides the least level of resources to each SQL
        statement.
        """
        return pulumi.get(self, "low")

    @property
    @pulumi.getter
    def medium(self) -> Optional[str]:
        """
        The database service provides a lower level of resources to each SQL
        statement.
        """
        return pulumi.get(self, "medium")

    @property
    @pulumi.getter
    def profiles(self) -> Optional[Sequence['outputs.AutonomousDatabasePropertiesConnectionStringProfile']]:
        """
        A list of connection string profiles to allow clients to group, filter, and
        select values based on the structured metadata.
        """
        return pulumi.get(self, "profiles")


@pulumi.output_type
class AutonomousDatabasePropertiesConnectionStringAllConnectionString(dict):
    def __init__(__self__, *,
                 high: Optional[str] = None,
                 low: Optional[str] = None,
                 medium: Optional[str] = None):
        """
        :param str high: The database service provides the highest level of resources to each SQL
               statement.
        :param str low: The database service provides the least level of resources to each SQL
               statement.
        :param str medium: The database service provides a lower level of resources to each SQL
               statement.
        """
        if high is not None:
            pulumi.set(__self__, "high", high)
        if low is not None:
            pulumi.set(__self__, "low", low)
        if medium is not None:
            pulumi.set(__self__, "medium", medium)

    @property
    @pulumi.getter
    def high(self) -> Optional[str]:
        """
        The database service provides the highest level of resources to each SQL
        statement.
        """
        return pulumi.get(self, "high")

    @property
    @pulumi.getter
    def low(self) -> Optional[str]:
        """
        The database service provides the least level of resources to each SQL
        statement.
        """
        return pulumi.get(self, "low")

    @property
    @pulumi.getter
    def medium(self) -> Optional[str]:
        """
        The database service provides a lower level of resources to each SQL
        statement.
        """
        return pulumi.get(self, "medium")


@pulumi.output_type
class AutonomousDatabasePropertiesConnectionStringProfile(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "consumerGroup":
            suggest = "consumer_group"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "hostFormat":
            suggest = "host_format"
        elif key == "isRegional":
            suggest = "is_regional"
        elif key == "sessionMode":
            suggest = "session_mode"
        elif key == "syntaxFormat":
            suggest = "syntax_format"
        elif key == "tlsAuthentication":
            suggest = "tls_authentication"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AutonomousDatabasePropertiesConnectionStringProfile. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AutonomousDatabasePropertiesConnectionStringProfile.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AutonomousDatabasePropertiesConnectionStringProfile.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 consumer_group: Optional[str] = None,
                 display_name: Optional[str] = None,
                 host_format: Optional[str] = None,
                 is_regional: Optional[bool] = None,
                 protocol: Optional[str] = None,
                 session_mode: Optional[str] = None,
                 syntax_format: Optional[str] = None,
                 tls_authentication: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str consumer_group: The current consumer group being used by the connection. 
                Possible values:
                CONSUMER_GROUP_UNSPECIFIED
               HIGH
               MEDIUM
               LOW
               TP
               TPURGENT
        :param str display_name: The display name for the database connection.
        :param str host_format: The host name format being currently used in connection string. 
                Possible values:
                HOST_FORMAT_UNSPECIFIED
               FQDN
               IP
        :param bool is_regional: This field indicates if the connection string is regional and is only
               applicable for cross-region Data Guard.
        :param str protocol: The protocol being used by the connection. 
                Possible values:
                PROTOCOL_UNSPECIFIED
               TCP
               TCPS
        :param str session_mode: The current session mode of the connection. 
                Possible values:
                SESSION_MODE_UNSPECIFIED
               DIRECT
               INDIRECT
        :param str syntax_format: The syntax of the connection string. 
                Possible values:
                SYNTAX_FORMAT_UNSPECIFIED
               LONG
               EZCONNECT
               EZCONNECTPLUS
        :param str tls_authentication: This field indicates the TLS authentication type of the connection. 
                Possible values:
                TLS_AUTHENTICATION_UNSPECIFIED
               SERVER
               MUTUAL
        :param str value: The value of the connection string.
        """
        if consumer_group is not None:
            pulumi.set(__self__, "consumer_group", consumer_group)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if host_format is not None:
            pulumi.set(__self__, "host_format", host_format)
        if is_regional is not None:
            pulumi.set(__self__, "is_regional", is_regional)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if session_mode is not None:
            pulumi.set(__self__, "session_mode", session_mode)
        if syntax_format is not None:
            pulumi.set(__self__, "syntax_format", syntax_format)
        if tls_authentication is not None:
            pulumi.set(__self__, "tls_authentication", tls_authentication)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="consumerGroup")
    def consumer_group(self) -> Optional[str]:
        """
        The current consumer group being used by the connection. 
         Possible values:
         CONSUMER_GROUP_UNSPECIFIED
        HIGH
        MEDIUM
        LOW
        TP
        TPURGENT
        """
        return pulumi.get(self, "consumer_group")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        The display name for the database connection.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="hostFormat")
    def host_format(self) -> Optional[str]:
        """
        The host name format being currently used in connection string. 
         Possible values:
         HOST_FORMAT_UNSPECIFIED
        FQDN
        IP
        """
        return pulumi.get(self, "host_format")

    @property
    @pulumi.getter(name="isRegional")
    def is_regional(self) -> Optional[bool]:
        """
        This field indicates if the connection string is regional and is only
        applicable for cross-region Data Guard.
        """
        return pulumi.get(self, "is_regional")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        """
        The protocol being used by the connection. 
         Possible values:
         PROTOCOL_UNSPECIFIED
        TCP
        TCPS
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="sessionMode")
    def session_mode(self) -> Optional[str]:
        """
        The current session mode of the connection. 
         Possible values:
         SESSION_MODE_UNSPECIFIED
        DIRECT
        INDIRECT
        """
        return pulumi.get(self, "session_mode")

    @property
    @pulumi.getter(name="syntaxFormat")
    def syntax_format(self) -> Optional[str]:
        """
        The syntax of the connection string. 
         Possible values:
         SYNTAX_FORMAT_UNSPECIFIED
        LONG
        EZCONNECT
        EZCONNECTPLUS
        """
        return pulumi.get(self, "syntax_format")

    @property
    @pulumi.getter(name="tlsAuthentication")
    def tls_authentication(self) -> Optional[str]:
        """
        This field indicates the TLS authentication type of the connection. 
         Possible values:
         TLS_AUTHENTICATION_UNSPECIFIED
        SERVER
        MUTUAL
        """
        return pulumi.get(self, "tls_authentication")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        The value of the connection string.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class AutonomousDatabasePropertiesConnectionUrl(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apexUri":
            suggest = "apex_uri"
        elif key == "databaseTransformsUri":
            suggest = "database_transforms_uri"
        elif key == "graphStudioUri":
            suggest = "graph_studio_uri"
        elif key == "machineLearningNotebookUri":
            suggest = "machine_learning_notebook_uri"
        elif key == "machineLearningUserManagementUri":
            suggest = "machine_learning_user_management_uri"
        elif key == "mongoDbUri":
            suggest = "mongo_db_uri"
        elif key == "ordsUri":
            suggest = "ords_uri"
        elif key == "sqlDevWebUri":
            suggest = "sql_dev_web_uri"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AutonomousDatabasePropertiesConnectionUrl. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AutonomousDatabasePropertiesConnectionUrl.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AutonomousDatabasePropertiesConnectionUrl.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 apex_uri: Optional[str] = None,
                 database_transforms_uri: Optional[str] = None,
                 graph_studio_uri: Optional[str] = None,
                 machine_learning_notebook_uri: Optional[str] = None,
                 machine_learning_user_management_uri: Optional[str] = None,
                 mongo_db_uri: Optional[str] = None,
                 ords_uri: Optional[str] = None,
                 sql_dev_web_uri: Optional[str] = None):
        """
        :param str apex_uri: Oracle Application Express (APEX) URL.
        :param str database_transforms_uri: The URL of the Database Transforms for the Autonomous Database.
        :param str graph_studio_uri: The URL of the Graph Studio for the Autonomous Database.
        :param str machine_learning_notebook_uri: The URL of the Oracle Machine Learning (OML) Notebook for the Autonomous
               Database.
        :param str machine_learning_user_management_uri: The URL of Machine Learning user management the Autonomous Database.
        :param str mongo_db_uri: The URL of the MongoDB API for the Autonomous Database.
        :param str ords_uri: The Oracle REST Data Services (ORDS) URL of the Web Access for the
               Autonomous Database.
        :param str sql_dev_web_uri: The URL of the Oracle SQL Developer Web for the Autonomous Database.
        """
        if apex_uri is not None:
            pulumi.set(__self__, "apex_uri", apex_uri)
        if database_transforms_uri is not None:
            pulumi.set(__self__, "database_transforms_uri", database_transforms_uri)
        if graph_studio_uri is not None:
            pulumi.set(__self__, "graph_studio_uri", graph_studio_uri)
        if machine_learning_notebook_uri is not None:
            pulumi.set(__self__, "machine_learning_notebook_uri", machine_learning_notebook_uri)
        if machine_learning_user_management_uri is not None:
            pulumi.set(__self__, "machine_learning_user_management_uri", machine_learning_user_management_uri)
        if mongo_db_uri is not None:
            pulumi.set(__self__, "mongo_db_uri", mongo_db_uri)
        if ords_uri is not None:
            pulumi.set(__self__, "ords_uri", ords_uri)
        if sql_dev_web_uri is not None:
            pulumi.set(__self__, "sql_dev_web_uri", sql_dev_web_uri)

    @property
    @pulumi.getter(name="apexUri")
    def apex_uri(self) -> Optional[str]:
        """
        Oracle Application Express (APEX) URL.
        """
        return pulumi.get(self, "apex_uri")

    @property
    @pulumi.getter(name="databaseTransformsUri")
    def database_transforms_uri(self) -> Optional[str]:
        """
        The URL of the Database Transforms for the Autonomous Database.
        """
        return pulumi.get(self, "database_transforms_uri")

    @property
    @pulumi.getter(name="graphStudioUri")
    def graph_studio_uri(self) -> Optional[str]:
        """
        The URL of the Graph Studio for the Autonomous Database.
        """
        return pulumi.get(self, "graph_studio_uri")

    @property
    @pulumi.getter(name="machineLearningNotebookUri")
    def machine_learning_notebook_uri(self) -> Optional[str]:
        """
        The URL of the Oracle Machine Learning (OML) Notebook for the Autonomous
        Database.
        """
        return pulumi.get(self, "machine_learning_notebook_uri")

    @property
    @pulumi.getter(name="machineLearningUserManagementUri")
    def machine_learning_user_management_uri(self) -> Optional[str]:
        """
        The URL of Machine Learning user management the Autonomous Database.
        """
        return pulumi.get(self, "machine_learning_user_management_uri")

    @property
    @pulumi.getter(name="mongoDbUri")
    def mongo_db_uri(self) -> Optional[str]:
        """
        The URL of the MongoDB API for the Autonomous Database.
        """
        return pulumi.get(self, "mongo_db_uri")

    @property
    @pulumi.getter(name="ordsUri")
    def ords_uri(self) -> Optional[str]:
        """
        The Oracle REST Data Services (ORDS) URL of the Web Access for the
        Autonomous Database.
        """
        return pulumi.get(self, "ords_uri")

    @property
    @pulumi.getter(name="sqlDevWebUri")
    def sql_dev_web_uri(self) -> Optional[str]:
        """
        The URL of the Oracle SQL Developer Web for the Autonomous Database.
        """
        return pulumi.get(self, "sql_dev_web_uri")


@pulumi.output_type
class AutonomousDatabasePropertiesCustomerContact(dict):
    def __init__(__self__, *,
                 email: str):
        """
        :param str email: The email address used by Oracle to send notifications regarding databases
               and infrastructure.
               
               <a name="nested_apex_details"></a>The `apex_details` block contains:
        """
        pulumi.set(__self__, "email", email)

    @property
    @pulumi.getter
    def email(self) -> str:
        """
        The email address used by Oracle to send notifications regarding databases
        and infrastructure.

        <a name="nested_apex_details"></a>The `apex_details` block contains:
        """
        return pulumi.get(self, "email")


@pulumi.output_type
class AutonomousDatabasePropertiesLocalStandbyDb(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataGuardRoleChangedTime":
            suggest = "data_guard_role_changed_time"
        elif key == "disasterRecoveryRoleChangedTime":
            suggest = "disaster_recovery_role_changed_time"
        elif key == "lagTimeDuration":
            suggest = "lag_time_duration"
        elif key == "lifecycleDetails":
            suggest = "lifecycle_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AutonomousDatabasePropertiesLocalStandbyDb. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AutonomousDatabasePropertiesLocalStandbyDb.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AutonomousDatabasePropertiesLocalStandbyDb.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_guard_role_changed_time: Optional[str] = None,
                 disaster_recovery_role_changed_time: Optional[str] = None,
                 lag_time_duration: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 state: Optional[str] = None):
        """
        :param str data_guard_role_changed_time: The date and time the Autonomous Data Guard role was switched for the
               standby Autonomous Database.
        :param str disaster_recovery_role_changed_time: The date and time the Disaster Recovery role was switched for the standby
               Autonomous Database.
        :param str lag_time_duration: The amount of time, in seconds, that the data of the standby database lags
               in comparison to the data of the primary database.
        :param str lifecycle_details: The additional details about the current lifecycle state of the
               Autonomous Database.
        :param str state: Possible values:
                STATE_UNSPECIFIED
               PROVISIONING
               AVAILABLE
               STOPPING
               STOPPED
               STARTING
               TERMINATING
               TERMINATED
               UNAVAILABLE
               RESTORE_IN_PROGRESS
               RESTORE_FAILED
               BACKUP_IN_PROGRESS
               SCALE_IN_PROGRESS
               AVAILABLE_NEEDS_ATTENTION
               UPDATING
               MAINTENANCE_IN_PROGRESS
               RESTARTING
               RECREATING
               ROLE_CHANGE_IN_PROGRESS
               UPGRADING
               INACCESSIBLE
               STANDBY
        """
        if data_guard_role_changed_time is not None:
            pulumi.set(__self__, "data_guard_role_changed_time", data_guard_role_changed_time)
        if disaster_recovery_role_changed_time is not None:
            pulumi.set(__self__, "disaster_recovery_role_changed_time", disaster_recovery_role_changed_time)
        if lag_time_duration is not None:
            pulumi.set(__self__, "lag_time_duration", lag_time_duration)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="dataGuardRoleChangedTime")
    def data_guard_role_changed_time(self) -> Optional[str]:
        """
        The date and time the Autonomous Data Guard role was switched for the
        standby Autonomous Database.
        """
        return pulumi.get(self, "data_guard_role_changed_time")

    @property
    @pulumi.getter(name="disasterRecoveryRoleChangedTime")
    def disaster_recovery_role_changed_time(self) -> Optional[str]:
        """
        The date and time the Disaster Recovery role was switched for the standby
        Autonomous Database.
        """
        return pulumi.get(self, "disaster_recovery_role_changed_time")

    @property
    @pulumi.getter(name="lagTimeDuration")
    def lag_time_duration(self) -> Optional[str]:
        """
        The amount of time, in seconds, that the data of the standby database lags
        in comparison to the data of the primary database.
        """
        return pulumi.get(self, "lag_time_duration")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        """
        The additional details about the current lifecycle state of the
        Autonomous Database.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        """
        Possible values:
         STATE_UNSPECIFIED
        PROVISIONING
        AVAILABLE
        STOPPING
        STOPPED
        STARTING
        TERMINATING
        TERMINATED
        UNAVAILABLE
        RESTORE_IN_PROGRESS
        RESTORE_FAILED
        BACKUP_IN_PROGRESS
        SCALE_IN_PROGRESS
        AVAILABLE_NEEDS_ATTENTION
        UPDATING
        MAINTENANCE_IN_PROGRESS
        RESTARTING
        RECREATING
        ROLE_CHANGE_IN_PROGRESS
        UPGRADING
        INACCESSIBLE
        STANDBY
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class AutonomousDatabasePropertiesScheduledOperationDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dayOfWeek":
            suggest = "day_of_week"
        elif key == "startTimes":
            suggest = "start_times"
        elif key == "stopTimes":
            suggest = "stop_times"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AutonomousDatabasePropertiesScheduledOperationDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AutonomousDatabasePropertiesScheduledOperationDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AutonomousDatabasePropertiesScheduledOperationDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 day_of_week: Optional[str] = None,
                 start_times: Optional[Sequence['outputs.AutonomousDatabasePropertiesScheduledOperationDetailStartTime']] = None,
                 stop_times: Optional[Sequence['outputs.AutonomousDatabasePropertiesScheduledOperationDetailStopTime']] = None):
        """
        :param str day_of_week: Possible values:
                DAY_OF_WEEK_UNSPECIFIED
               MONDAY
               TUESDAY
               WEDNESDAY
               THURSDAY
               FRIDAY
               SATURDAY
               SUNDAY
        :param Sequence['AutonomousDatabasePropertiesScheduledOperationDetailStartTimeArgs'] start_times: Represents a time of day. The date and time zone are either not significant
               or are specified elsewhere. An API may choose to allow leap seconds. Related
               types are google.type.Date and 'google.protobuf.Timestamp'.
        :param Sequence['AutonomousDatabasePropertiesScheduledOperationDetailStopTimeArgs'] stop_times: Represents a time of day. The date and time zone are either not significant
               or are specified elsewhere. An API may choose to allow leap seconds. Related
               types are google.type.Date and 'google.protobuf.Timestamp'.
        """
        if day_of_week is not None:
            pulumi.set(__self__, "day_of_week", day_of_week)
        if start_times is not None:
            pulumi.set(__self__, "start_times", start_times)
        if stop_times is not None:
            pulumi.set(__self__, "stop_times", stop_times)

    @property
    @pulumi.getter(name="dayOfWeek")
    def day_of_week(self) -> Optional[str]:
        """
        Possible values:
         DAY_OF_WEEK_UNSPECIFIED
        MONDAY
        TUESDAY
        WEDNESDAY
        THURSDAY
        FRIDAY
        SATURDAY
        SUNDAY
        """
        return pulumi.get(self, "day_of_week")

    @property
    @pulumi.getter(name="startTimes")
    def start_times(self) -> Optional[Sequence['outputs.AutonomousDatabasePropertiesScheduledOperationDetailStartTime']]:
        """
        Represents a time of day. The date and time zone are either not significant
        or are specified elsewhere. An API may choose to allow leap seconds. Related
        types are google.type.Date and 'google.protobuf.Timestamp'.
        """
        return pulumi.get(self, "start_times")

    @property
    @pulumi.getter(name="stopTimes")
    def stop_times(self) -> Optional[Sequence['outputs.AutonomousDatabasePropertiesScheduledOperationDetailStopTime']]:
        """
        Represents a time of day. The date and time zone are either not significant
        or are specified elsewhere. An API may choose to allow leap seconds. Related
        types are google.type.Date and 'google.protobuf.Timestamp'.
        """
        return pulumi.get(self, "stop_times")


@pulumi.output_type
class AutonomousDatabasePropertiesScheduledOperationDetailStartTime(dict):
    def __init__(__self__, *,
                 hours: Optional[int] = None,
                 minutes: Optional[int] = None,
                 nanos: Optional[int] = None,
                 seconds: Optional[int] = None):
        """
        :param int hours: Hours of day in 24 hour format. Should be from 0 to 23. An API may choose
               to allow the value "24:00:00" for scenarios like business closing time.
        :param int minutes: Minutes of hour of day. Must be from 0 to 59.
        :param int nanos: Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
        :param int seconds: Seconds of minutes of the time. Must normally be from 0 to 59. An API may
               allow the value 60 if it allows leap-seconds.
        """
        if hours is not None:
            pulumi.set(__self__, "hours", hours)
        if minutes is not None:
            pulumi.set(__self__, "minutes", minutes)
        if nanos is not None:
            pulumi.set(__self__, "nanos", nanos)
        if seconds is not None:
            pulumi.set(__self__, "seconds", seconds)

    @property
    @pulumi.getter
    def hours(self) -> Optional[int]:
        """
        Hours of day in 24 hour format. Should be from 0 to 23. An API may choose
        to allow the value "24:00:00" for scenarios like business closing time.
        """
        return pulumi.get(self, "hours")

    @property
    @pulumi.getter
    def minutes(self) -> Optional[int]:
        """
        Minutes of hour of day. Must be from 0 to 59.
        """
        return pulumi.get(self, "minutes")

    @property
    @pulumi.getter
    def nanos(self) -> Optional[int]:
        """
        Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
        """
        return pulumi.get(self, "nanos")

    @property
    @pulumi.getter
    def seconds(self) -> Optional[int]:
        """
        Seconds of minutes of the time. Must normally be from 0 to 59. An API may
        allow the value 60 if it allows leap-seconds.
        """
        return pulumi.get(self, "seconds")


@pulumi.output_type
class AutonomousDatabasePropertiesScheduledOperationDetailStopTime(dict):
    def __init__(__self__, *,
                 hours: Optional[int] = None,
                 minutes: Optional[int] = None,
                 nanos: Optional[int] = None,
                 seconds: Optional[int] = None):
        """
        :param int hours: Hours of day in 24 hour format. Should be from 0 to 23. An API may choose
               to allow the value "24:00:00" for scenarios like business closing time.
        :param int minutes: Minutes of hour of day. Must be from 0 to 59.
        :param int nanos: Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
        :param int seconds: Seconds of minutes of the time. Must normally be from 0 to 59. An API may
               allow the value 60 if it allows leap-seconds.
        """
        if hours is not None:
            pulumi.set(__self__, "hours", hours)
        if minutes is not None:
            pulumi.set(__self__, "minutes", minutes)
        if nanos is not None:
            pulumi.set(__self__, "nanos", nanos)
        if seconds is not None:
            pulumi.set(__self__, "seconds", seconds)

    @property
    @pulumi.getter
    def hours(self) -> Optional[int]:
        """
        Hours of day in 24 hour format. Should be from 0 to 23. An API may choose
        to allow the value "24:00:00" for scenarios like business closing time.
        """
        return pulumi.get(self, "hours")

    @property
    @pulumi.getter
    def minutes(self) -> Optional[int]:
        """
        Minutes of hour of day. Must be from 0 to 59.
        """
        return pulumi.get(self, "minutes")

    @property
    @pulumi.getter
    def nanos(self) -> Optional[int]:
        """
        Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
        """
        return pulumi.get(self, "nanos")

    @property
    @pulumi.getter
    def seconds(self) -> Optional[int]:
        """
        Seconds of minutes of the time. Must normally be from 0 to 59. An API may
        allow the value 60 if it allows leap-seconds.
        """
        return pulumi.get(self, "seconds")


@pulumi.output_type
class CloudExadataInfrastructureProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "activatedStorageCount":
            suggest = "activated_storage_count"
        elif key == "additionalStorageCount":
            suggest = "additional_storage_count"
        elif key == "availableStorageSizeGb":
            suggest = "available_storage_size_gb"
        elif key == "computeCount":
            suggest = "compute_count"
        elif key == "cpuCount":
            suggest = "cpu_count"
        elif key == "customerContacts":
            suggest = "customer_contacts"
        elif key == "dataStorageSizeTb":
            suggest = "data_storage_size_tb"
        elif key == "dbNodeStorageSizeGb":
            suggest = "db_node_storage_size_gb"
        elif key == "dbServerVersion":
            suggest = "db_server_version"
        elif key == "maintenanceWindow":
            suggest = "maintenance_window"
        elif key == "maxCpuCount":
            suggest = "max_cpu_count"
        elif key == "maxDataStorageTb":
            suggest = "max_data_storage_tb"
        elif key == "maxDbNodeStorageSizeGb":
            suggest = "max_db_node_storage_size_gb"
        elif key == "maxMemoryGb":
            suggest = "max_memory_gb"
        elif key == "memorySizeGb":
            suggest = "memory_size_gb"
        elif key == "monthlyDbServerVersion":
            suggest = "monthly_db_server_version"
        elif key == "monthlyStorageServerVersion":
            suggest = "monthly_storage_server_version"
        elif key == "nextMaintenanceRunId":
            suggest = "next_maintenance_run_id"
        elif key == "nextMaintenanceRunTime":
            suggest = "next_maintenance_run_time"
        elif key == "nextSecurityMaintenanceRunTime":
            suggest = "next_security_maintenance_run_time"
        elif key == "ociUrl":
            suggest = "oci_url"
        elif key == "storageCount":
            suggest = "storage_count"
        elif key == "storageServerVersion":
            suggest = "storage_server_version"
        elif key == "totalStorageSizeGb":
            suggest = "total_storage_size_gb"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloudExadataInfrastructureProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloudExadataInfrastructureProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloudExadataInfrastructureProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 shape: str,
                 activated_storage_count: Optional[int] = None,
                 additional_storage_count: Optional[int] = None,
                 available_storage_size_gb: Optional[int] = None,
                 compute_count: Optional[int] = None,
                 cpu_count: Optional[int] = None,
                 customer_contacts: Optional[Sequence['outputs.CloudExadataInfrastructurePropertiesCustomerContact']] = None,
                 data_storage_size_tb: Optional[float] = None,
                 db_node_storage_size_gb: Optional[int] = None,
                 db_server_version: Optional[str] = None,
                 maintenance_window: Optional['outputs.CloudExadataInfrastructurePropertiesMaintenanceWindow'] = None,
                 max_cpu_count: Optional[int] = None,
                 max_data_storage_tb: Optional[float] = None,
                 max_db_node_storage_size_gb: Optional[int] = None,
                 max_memory_gb: Optional[int] = None,
                 memory_size_gb: Optional[int] = None,
                 monthly_db_server_version: Optional[str] = None,
                 monthly_storage_server_version: Optional[str] = None,
                 next_maintenance_run_id: Optional[str] = None,
                 next_maintenance_run_time: Optional[str] = None,
                 next_security_maintenance_run_time: Optional[str] = None,
                 oci_url: Optional[str] = None,
                 ocid: Optional[str] = None,
                 state: Optional[str] = None,
                 storage_count: Optional[int] = None,
                 storage_server_version: Optional[str] = None,
                 total_storage_size_gb: Optional[int] = None):
        """
        :param str shape: The shape of the Exadata Infrastructure. The shape determines the
               amount of CPU, storage, and memory resources allocated to the instance.
        :param int activated_storage_count: (Output)
               The requested number of additional storage servers activated for the
               Exadata Infrastructure.
        :param int additional_storage_count: (Output)
               The requested number of additional storage servers for the Exadata
               Infrastructure.
        :param int available_storage_size_gb: (Output)
               The available storage can be allocated to the Exadata Infrastructure
               resource, in gigabytes (GB).
        :param int compute_count: The number of compute servers for the Exadata Infrastructure.
        :param int cpu_count: (Output)
               The number of enabled CPU cores.
        :param Sequence['CloudExadataInfrastructurePropertiesCustomerContactArgs'] customer_contacts: The list of customer contacts.
               Structure is documented below.
        :param float data_storage_size_tb: (Output)
               Size, in terabytes, of the DATA disk group.
        :param int db_node_storage_size_gb: (Output)
               The local node storage allocated in GBs.
        :param str db_server_version: (Output)
               The software version of the database servers (dom0) in the Exadata
               Infrastructure.
        :param 'CloudExadataInfrastructurePropertiesMaintenanceWindowArgs' maintenance_window: Maintenance window as defined by Oracle.
               https://docs.oracle.com/en-us/iaas/api/#/en/database/20160918/datatypes/MaintenanceWindow
               Structure is documented below.
        :param int max_cpu_count: (Output)
               The total number of CPU cores available.
        :param float max_data_storage_tb: (Output)
               The total available DATA disk group size.
        :param int max_db_node_storage_size_gb: (Output)
               The total local node storage available in GBs.
        :param int max_memory_gb: (Output)
               The total memory available in GBs.
        :param int memory_size_gb: (Output)
               The memory allocated in GBs.
        :param str monthly_db_server_version: (Output)
               The monthly software version of the database servers (dom0)
               in the Exadata Infrastructure. Example: 20.1.15
        :param str monthly_storage_server_version: (Output)
               The monthly software version of the storage servers (cells)
               in the Exadata Infrastructure. Example: 20.1.15
        :param str next_maintenance_run_id: (Output)
               The OCID of the next maintenance run.
        :param str next_maintenance_run_time: (Output)
               The time when the next maintenance run will occur.
        :param str next_security_maintenance_run_time: (Output)
               The time when the next security maintenance run will occur.
        :param str oci_url: (Output)
               Deep link to the OCI console to view this resource.
        :param str ocid: (Output)
               OCID of created infra.
               https://docs.oracle.com/en-us/iaas/Content/General/Concepts/identifiers.htm#Oracle
        :param str state: (Output)
               The current lifecycle state of the Exadata Infrastructure.
               Possible values:
               STATE_UNSPECIFIED
               PROVISIONING
               AVAILABLE
               UPDATING
               TERMINATING
               TERMINATED
               FAILED
               MAINTENANCE_IN_PROGRESS
        :param int storage_count: The number of Cloud Exadata storage servers for the Exadata Infrastructure.
        :param str storage_server_version: (Output)
               The software version of the storage servers (cells) in the Exadata
               Infrastructure.
        :param int total_storage_size_gb: The total storage allocated to the Exadata Infrastructure
               resource, in gigabytes (GB).
        """
        pulumi.set(__self__, "shape", shape)
        if activated_storage_count is not None:
            pulumi.set(__self__, "activated_storage_count", activated_storage_count)
        if additional_storage_count is not None:
            pulumi.set(__self__, "additional_storage_count", additional_storage_count)
        if available_storage_size_gb is not None:
            pulumi.set(__self__, "available_storage_size_gb", available_storage_size_gb)
        if compute_count is not None:
            pulumi.set(__self__, "compute_count", compute_count)
        if cpu_count is not None:
            pulumi.set(__self__, "cpu_count", cpu_count)
        if customer_contacts is not None:
            pulumi.set(__self__, "customer_contacts", customer_contacts)
        if data_storage_size_tb is not None:
            pulumi.set(__self__, "data_storage_size_tb", data_storage_size_tb)
        if db_node_storage_size_gb is not None:
            pulumi.set(__self__, "db_node_storage_size_gb", db_node_storage_size_gb)
        if db_server_version is not None:
            pulumi.set(__self__, "db_server_version", db_server_version)
        if maintenance_window is not None:
            pulumi.set(__self__, "maintenance_window", maintenance_window)
        if max_cpu_count is not None:
            pulumi.set(__self__, "max_cpu_count", max_cpu_count)
        if max_data_storage_tb is not None:
            pulumi.set(__self__, "max_data_storage_tb", max_data_storage_tb)
        if max_db_node_storage_size_gb is not None:
            pulumi.set(__self__, "max_db_node_storage_size_gb", max_db_node_storage_size_gb)
        if max_memory_gb is not None:
            pulumi.set(__self__, "max_memory_gb", max_memory_gb)
        if memory_size_gb is not None:
            pulumi.set(__self__, "memory_size_gb", memory_size_gb)
        if monthly_db_server_version is not None:
            pulumi.set(__self__, "monthly_db_server_version", monthly_db_server_version)
        if monthly_storage_server_version is not None:
            pulumi.set(__self__, "monthly_storage_server_version", monthly_storage_server_version)
        if next_maintenance_run_id is not None:
            pulumi.set(__self__, "next_maintenance_run_id", next_maintenance_run_id)
        if next_maintenance_run_time is not None:
            pulumi.set(__self__, "next_maintenance_run_time", next_maintenance_run_time)
        if next_security_maintenance_run_time is not None:
            pulumi.set(__self__, "next_security_maintenance_run_time", next_security_maintenance_run_time)
        if oci_url is not None:
            pulumi.set(__self__, "oci_url", oci_url)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if storage_count is not None:
            pulumi.set(__self__, "storage_count", storage_count)
        if storage_server_version is not None:
            pulumi.set(__self__, "storage_server_version", storage_server_version)
        if total_storage_size_gb is not None:
            pulumi.set(__self__, "total_storage_size_gb", total_storage_size_gb)

    @property
    @pulumi.getter
    def shape(self) -> str:
        """
        The shape of the Exadata Infrastructure. The shape determines the
        amount of CPU, storage, and memory resources allocated to the instance.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="activatedStorageCount")
    def activated_storage_count(self) -> Optional[int]:
        """
        (Output)
        The requested number of additional storage servers activated for the
        Exadata Infrastructure.
        """
        return pulumi.get(self, "activated_storage_count")

    @property
    @pulumi.getter(name="additionalStorageCount")
    def additional_storage_count(self) -> Optional[int]:
        """
        (Output)
        The requested number of additional storage servers for the Exadata
        Infrastructure.
        """
        return pulumi.get(self, "additional_storage_count")

    @property
    @pulumi.getter(name="availableStorageSizeGb")
    def available_storage_size_gb(self) -> Optional[int]:
        """
        (Output)
        The available storage can be allocated to the Exadata Infrastructure
        resource, in gigabytes (GB).
        """
        return pulumi.get(self, "available_storage_size_gb")

    @property
    @pulumi.getter(name="computeCount")
    def compute_count(self) -> Optional[int]:
        """
        The number of compute servers for the Exadata Infrastructure.
        """
        return pulumi.get(self, "compute_count")

    @property
    @pulumi.getter(name="cpuCount")
    def cpu_count(self) -> Optional[int]:
        """
        (Output)
        The number of enabled CPU cores.
        """
        return pulumi.get(self, "cpu_count")

    @property
    @pulumi.getter(name="customerContacts")
    def customer_contacts(self) -> Optional[Sequence['outputs.CloudExadataInfrastructurePropertiesCustomerContact']]:
        """
        The list of customer contacts.
        Structure is documented below.
        """
        return pulumi.get(self, "customer_contacts")

    @property
    @pulumi.getter(name="dataStorageSizeTb")
    def data_storage_size_tb(self) -> Optional[float]:
        """
        (Output)
        Size, in terabytes, of the DATA disk group.
        """
        return pulumi.get(self, "data_storage_size_tb")

    @property
    @pulumi.getter(name="dbNodeStorageSizeGb")
    def db_node_storage_size_gb(self) -> Optional[int]:
        """
        (Output)
        The local node storage allocated in GBs.
        """
        return pulumi.get(self, "db_node_storage_size_gb")

    @property
    @pulumi.getter(name="dbServerVersion")
    def db_server_version(self) -> Optional[str]:
        """
        (Output)
        The software version of the database servers (dom0) in the Exadata
        Infrastructure.
        """
        return pulumi.get(self, "db_server_version")

    @property
    @pulumi.getter(name="maintenanceWindow")
    def maintenance_window(self) -> Optional['outputs.CloudExadataInfrastructurePropertiesMaintenanceWindow']:
        """
        Maintenance window as defined by Oracle.
        https://docs.oracle.com/en-us/iaas/api/#/en/database/20160918/datatypes/MaintenanceWindow
        Structure is documented below.
        """
        return pulumi.get(self, "maintenance_window")

    @property
    @pulumi.getter(name="maxCpuCount")
    def max_cpu_count(self) -> Optional[int]:
        """
        (Output)
        The total number of CPU cores available.
        """
        return pulumi.get(self, "max_cpu_count")

    @property
    @pulumi.getter(name="maxDataStorageTb")
    def max_data_storage_tb(self) -> Optional[float]:
        """
        (Output)
        The total available DATA disk group size.
        """
        return pulumi.get(self, "max_data_storage_tb")

    @property
    @pulumi.getter(name="maxDbNodeStorageSizeGb")
    def max_db_node_storage_size_gb(self) -> Optional[int]:
        """
        (Output)
        The total local node storage available in GBs.
        """
        return pulumi.get(self, "max_db_node_storage_size_gb")

    @property
    @pulumi.getter(name="maxMemoryGb")
    def max_memory_gb(self) -> Optional[int]:
        """
        (Output)
        The total memory available in GBs.
        """
        return pulumi.get(self, "max_memory_gb")

    @property
    @pulumi.getter(name="memorySizeGb")
    def memory_size_gb(self) -> Optional[int]:
        """
        (Output)
        The memory allocated in GBs.
        """
        return pulumi.get(self, "memory_size_gb")

    @property
    @pulumi.getter(name="monthlyDbServerVersion")
    def monthly_db_server_version(self) -> Optional[str]:
        """
        (Output)
        The monthly software version of the database servers (dom0)
        in the Exadata Infrastructure. Example: 20.1.15
        """
        return pulumi.get(self, "monthly_db_server_version")

    @property
    @pulumi.getter(name="monthlyStorageServerVersion")
    def monthly_storage_server_version(self) -> Optional[str]:
        """
        (Output)
        The monthly software version of the storage servers (cells)
        in the Exadata Infrastructure. Example: 20.1.15
        """
        return pulumi.get(self, "monthly_storage_server_version")

    @property
    @pulumi.getter(name="nextMaintenanceRunId")
    def next_maintenance_run_id(self) -> Optional[str]:
        """
        (Output)
        The OCID of the next maintenance run.
        """
        return pulumi.get(self, "next_maintenance_run_id")

    @property
    @pulumi.getter(name="nextMaintenanceRunTime")
    def next_maintenance_run_time(self) -> Optional[str]:
        """
        (Output)
        The time when the next maintenance run will occur.
        """
        return pulumi.get(self, "next_maintenance_run_time")

    @property
    @pulumi.getter(name="nextSecurityMaintenanceRunTime")
    def next_security_maintenance_run_time(self) -> Optional[str]:
        """
        (Output)
        The time when the next security maintenance run will occur.
        """
        return pulumi.get(self, "next_security_maintenance_run_time")

    @property
    @pulumi.getter(name="ociUrl")
    def oci_url(self) -> Optional[str]:
        """
        (Output)
        Deep link to the OCI console to view this resource.
        """
        return pulumi.get(self, "oci_url")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        """
        (Output)
        OCID of created infra.
        https://docs.oracle.com/en-us/iaas/Content/General/Concepts/identifiers.htm#Oracle
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        """
        (Output)
        The current lifecycle state of the Exadata Infrastructure.
        Possible values:
        STATE_UNSPECIFIED
        PROVISIONING
        AVAILABLE
        UPDATING
        TERMINATING
        TERMINATED
        FAILED
        MAINTENANCE_IN_PROGRESS
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="storageCount")
    def storage_count(self) -> Optional[int]:
        """
        The number of Cloud Exadata storage servers for the Exadata Infrastructure.
        """
        return pulumi.get(self, "storage_count")

    @property
    @pulumi.getter(name="storageServerVersion")
    def storage_server_version(self) -> Optional[str]:
        """
        (Output)
        The software version of the storage servers (cells) in the Exadata
        Infrastructure.
        """
        return pulumi.get(self, "storage_server_version")

    @property
    @pulumi.getter(name="totalStorageSizeGb")
    def total_storage_size_gb(self) -> Optional[int]:
        """
        The total storage allocated to the Exadata Infrastructure
        resource, in gigabytes (GB).
        """
        return pulumi.get(self, "total_storage_size_gb")


@pulumi.output_type
class CloudExadataInfrastructurePropertiesCustomerContact(dict):
    def __init__(__self__, *,
                 email: str):
        """
        :param str email: The email address used by Oracle to send notifications regarding databases
               and infrastructure.
        """
        pulumi.set(__self__, "email", email)

    @property
    @pulumi.getter
    def email(self) -> str:
        """
        The email address used by Oracle to send notifications regarding databases
        and infrastructure.
        """
        return pulumi.get(self, "email")


@pulumi.output_type
class CloudExadataInfrastructurePropertiesMaintenanceWindow(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customActionTimeoutMins":
            suggest = "custom_action_timeout_mins"
        elif key == "daysOfWeeks":
            suggest = "days_of_weeks"
        elif key == "hoursOfDays":
            suggest = "hours_of_days"
        elif key == "isCustomActionTimeoutEnabled":
            suggest = "is_custom_action_timeout_enabled"
        elif key == "leadTimeWeek":
            suggest = "lead_time_week"
        elif key == "patchingMode":
            suggest = "patching_mode"
        elif key == "weeksOfMonths":
            suggest = "weeks_of_months"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloudExadataInfrastructurePropertiesMaintenanceWindow. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloudExadataInfrastructurePropertiesMaintenanceWindow.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloudExadataInfrastructurePropertiesMaintenanceWindow.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_action_timeout_mins: Optional[int] = None,
                 days_of_weeks: Optional[Sequence[str]] = None,
                 hours_of_days: Optional[Sequence[int]] = None,
                 is_custom_action_timeout_enabled: Optional[bool] = None,
                 lead_time_week: Optional[int] = None,
                 months: Optional[Sequence[str]] = None,
                 patching_mode: Optional[str] = None,
                 preference: Optional[str] = None,
                 weeks_of_months: Optional[Sequence[int]] = None):
        """
        :param int custom_action_timeout_mins: Determines the amount of time the system will wait before the start of each
               database server patching operation. Custom action timeout is in minutes and
               valid value is between 15 to 120 (inclusive).
        :param Sequence[str] days_of_weeks: Days during the week when maintenance should be performed.
        :param Sequence[int] hours_of_days: The window of hours during the day when maintenance should be performed.
               The window is a 4 hour slot. Valid values are:
               0 - represents time slot 0:00 - 3:59 UTC
               4 - represents time slot 4:00 - 7:59 UTC
               8 - represents time slot 8:00 - 11:59 UTC
               12 - represents time slot 12:00 - 15:59 UTC
               16 - represents time slot 16:00 - 19:59 UTC
               20 - represents time slot 20:00 - 23:59 UTC
        :param bool is_custom_action_timeout_enabled: If true, enables the configuration of a custom action timeout (waiting
               period) between database server patching operations.
        :param int lead_time_week: Lead time window allows user to set a lead time to prepare for a down time.
               The lead time is in weeks and valid value is between 1 to 4.
        :param Sequence[str] months: Months during the year when maintenance should be performed.
        :param str patching_mode: Cloud CloudExadataInfrastructure node patching method, either "ROLLING"
               or "NONROLLING". Default value is ROLLING.
               Possible values:
               PATCHING_MODE_UNSPECIFIED
               ROLLING
               NON_ROLLING
        :param str preference: The maintenance window scheduling preference.
               Possible values:
               MAINTENANCE_WINDOW_PREFERENCE_UNSPECIFIED
               CUSTOM_PREFERENCE
               NO_PREFERENCE
        :param Sequence[int] weeks_of_months: Weeks during the month when maintenance should be performed. Weeks start on
               the 1st, 8th, 15th, and 22nd days of the month, and have a duration of 7
               days. Weeks start and end based on calendar dates, not days of the week.
        """
        if custom_action_timeout_mins is not None:
            pulumi.set(__self__, "custom_action_timeout_mins", custom_action_timeout_mins)
        if days_of_weeks is not None:
            pulumi.set(__self__, "days_of_weeks", days_of_weeks)
        if hours_of_days is not None:
            pulumi.set(__self__, "hours_of_days", hours_of_days)
        if is_custom_action_timeout_enabled is not None:
            pulumi.set(__self__, "is_custom_action_timeout_enabled", is_custom_action_timeout_enabled)
        if lead_time_week is not None:
            pulumi.set(__self__, "lead_time_week", lead_time_week)
        if months is not None:
            pulumi.set(__self__, "months", months)
        if patching_mode is not None:
            pulumi.set(__self__, "patching_mode", patching_mode)
        if preference is not None:
            pulumi.set(__self__, "preference", preference)
        if weeks_of_months is not None:
            pulumi.set(__self__, "weeks_of_months", weeks_of_months)

    @property
    @pulumi.getter(name="customActionTimeoutMins")
    def custom_action_timeout_mins(self) -> Optional[int]:
        """
        Determines the amount of time the system will wait before the start of each
        database server patching operation. Custom action timeout is in minutes and
        valid value is between 15 to 120 (inclusive).
        """
        return pulumi.get(self, "custom_action_timeout_mins")

    @property
    @pulumi.getter(name="daysOfWeeks")
    def days_of_weeks(self) -> Optional[Sequence[str]]:
        """
        Days during the week when maintenance should be performed.
        """
        return pulumi.get(self, "days_of_weeks")

    @property
    @pulumi.getter(name="hoursOfDays")
    def hours_of_days(self) -> Optional[Sequence[int]]:
        """
        The window of hours during the day when maintenance should be performed.
        The window is a 4 hour slot. Valid values are:
        0 - represents time slot 0:00 - 3:59 UTC
        4 - represents time slot 4:00 - 7:59 UTC
        8 - represents time slot 8:00 - 11:59 UTC
        12 - represents time slot 12:00 - 15:59 UTC
        16 - represents time slot 16:00 - 19:59 UTC
        20 - represents time slot 20:00 - 23:59 UTC
        """
        return pulumi.get(self, "hours_of_days")

    @property
    @pulumi.getter(name="isCustomActionTimeoutEnabled")
    def is_custom_action_timeout_enabled(self) -> Optional[bool]:
        """
        If true, enables the configuration of a custom action timeout (waiting
        period) between database server patching operations.
        """
        return pulumi.get(self, "is_custom_action_timeout_enabled")

    @property
    @pulumi.getter(name="leadTimeWeek")
    def lead_time_week(self) -> Optional[int]:
        """
        Lead time window allows user to set a lead time to prepare for a down time.
        The lead time is in weeks and valid value is between 1 to 4.
        """
        return pulumi.get(self, "lead_time_week")

    @property
    @pulumi.getter
    def months(self) -> Optional[Sequence[str]]:
        """
        Months during the year when maintenance should be performed.
        """
        return pulumi.get(self, "months")

    @property
    @pulumi.getter(name="patchingMode")
    def patching_mode(self) -> Optional[str]:
        """
        Cloud CloudExadataInfrastructure node patching method, either "ROLLING"
        or "NONROLLING". Default value is ROLLING.
        Possible values:
        PATCHING_MODE_UNSPECIFIED
        ROLLING
        NON_ROLLING
        """
        return pulumi.get(self, "patching_mode")

    @property
    @pulumi.getter
    def preference(self) -> Optional[str]:
        """
        The maintenance window scheduling preference.
        Possible values:
        MAINTENANCE_WINDOW_PREFERENCE_UNSPECIFIED
        CUSTOM_PREFERENCE
        NO_PREFERENCE
        """
        return pulumi.get(self, "preference")

    @property
    @pulumi.getter(name="weeksOfMonths")
    def weeks_of_months(self) -> Optional[Sequence[int]]:
        """
        Weeks during the month when maintenance should be performed. Weeks start on
        the 1st, 8th, 15th, and 22nd days of the month, and have a duration of 7
        days. Weeks start and end based on calendar dates, not days of the week.
        """
        return pulumi.get(self, "weeks_of_months")


@pulumi.output_type
class CloudVmClusterProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cpuCoreCount":
            suggest = "cpu_core_count"
        elif key == "licenseType":
            suggest = "license_type"
        elif key == "clusterName":
            suggest = "cluster_name"
        elif key == "compartmentId":
            suggest = "compartment_id"
        elif key == "dataStorageSizeTb":
            suggest = "data_storage_size_tb"
        elif key == "dbNodeStorageSizeGb":
            suggest = "db_node_storage_size_gb"
        elif key == "dbServerOcids":
            suggest = "db_server_ocids"
        elif key == "diagnosticsDataCollectionOptions":
            suggest = "diagnostics_data_collection_options"
        elif key == "diskRedundancy":
            suggest = "disk_redundancy"
        elif key == "dnsListenerIp":
            suggest = "dns_listener_ip"
        elif key == "giVersion":
            suggest = "gi_version"
        elif key == "hostnamePrefix":
            suggest = "hostname_prefix"
        elif key == "localBackupEnabled":
            suggest = "local_backup_enabled"
        elif key == "memorySizeGb":
            suggest = "memory_size_gb"
        elif key == "nodeCount":
            suggest = "node_count"
        elif key == "ociUrl":
            suggest = "oci_url"
        elif key == "ocpuCount":
            suggest = "ocpu_count"
        elif key == "scanDns":
            suggest = "scan_dns"
        elif key == "scanDnsRecordId":
            suggest = "scan_dns_record_id"
        elif key == "scanIpIds":
            suggest = "scan_ip_ids"
        elif key == "scanListenerPortTcp":
            suggest = "scan_listener_port_tcp"
        elif key == "scanListenerPortTcpSsl":
            suggest = "scan_listener_port_tcp_ssl"
        elif key == "sparseDiskgroupEnabled":
            suggest = "sparse_diskgroup_enabled"
        elif key == "sshPublicKeys":
            suggest = "ssh_public_keys"
        elif key == "storageSizeGb":
            suggest = "storage_size_gb"
        elif key == "systemVersion":
            suggest = "system_version"
        elif key == "timeZone":
            suggest = "time_zone"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloudVmClusterProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloudVmClusterProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloudVmClusterProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cpu_core_count: int,
                 license_type: str,
                 cluster_name: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 data_storage_size_tb: Optional[float] = None,
                 db_node_storage_size_gb: Optional[int] = None,
                 db_server_ocids: Optional[Sequence[str]] = None,
                 diagnostics_data_collection_options: Optional['outputs.CloudVmClusterPropertiesDiagnosticsDataCollectionOptions'] = None,
                 disk_redundancy: Optional[str] = None,
                 dns_listener_ip: Optional[str] = None,
                 domain: Optional[str] = None,
                 gi_version: Optional[str] = None,
                 hostname: Optional[str] = None,
                 hostname_prefix: Optional[str] = None,
                 local_backup_enabled: Optional[bool] = None,
                 memory_size_gb: Optional[int] = None,
                 node_count: Optional[int] = None,
                 oci_url: Optional[str] = None,
                 ocid: Optional[str] = None,
                 ocpu_count: Optional[float] = None,
                 scan_dns: Optional[str] = None,
                 scan_dns_record_id: Optional[str] = None,
                 scan_ip_ids: Optional[Sequence[str]] = None,
                 scan_listener_port_tcp: Optional[int] = None,
                 scan_listener_port_tcp_ssl: Optional[int] = None,
                 shape: Optional[str] = None,
                 sparse_diskgroup_enabled: Optional[bool] = None,
                 ssh_public_keys: Optional[Sequence[str]] = None,
                 state: Optional[str] = None,
                 storage_size_gb: Optional[int] = None,
                 system_version: Optional[str] = None,
                 time_zone: Optional['outputs.CloudVmClusterPropertiesTimeZone'] = None):
        """
        :param int cpu_core_count: Number of enabled CPU cores.
        :param str license_type: License type of VM Cluster.
               Possible values:
               LICENSE_TYPE_UNSPECIFIED
               LICENSE_INCLUDED
               BRING_YOUR_OWN_LICENSE
        :param str cluster_name: OCI Cluster name.
        :param str compartment_id: (Output)
               Compartment ID of cluster.
        :param float data_storage_size_tb: The data disk group size to be allocated in TBs.
        :param int db_node_storage_size_gb: Local storage per VM
        :param Sequence[str] db_server_ocids: OCID of database servers.
        :param 'CloudVmClusterPropertiesDiagnosticsDataCollectionOptionsArgs' diagnostics_data_collection_options: Data collection options for diagnostics.
               Structure is documented below.
        :param str disk_redundancy: The type of redundancy.
               Possible values:
               DISK_REDUNDANCY_UNSPECIFIED
               HIGH
               NORMAL
        :param str dns_listener_ip: (Output)
               DNS listener IP.
        :param str domain: (Output)
               Parent DNS domain where SCAN DNS and hosts names are qualified.
               ex: ocispdelegated.ocisp10jvnet.oraclevcn.com
        :param str gi_version: Grid Infrastructure Version.
        :param str hostname: (Output)
               host name without domain.
               format: "-" with some suffix.
               ex: sp2-yi0xq where "sp2" is the hostname_prefix.
        :param str hostname_prefix: Prefix for VM cluster host names.
        :param bool local_backup_enabled: Use local backup.
        :param int memory_size_gb: Memory allocated in GBs.
        :param int node_count: Number of database servers.
        :param str oci_url: (Output)
               Deep link to the OCI console to view this resource.
        :param str ocid: (Output)
               Oracle Cloud Infrastructure ID of VM Cluster.
        :param float ocpu_count: OCPU count per VM. Minimum is 0.1.
        :param str scan_dns: (Output)
               SCAN DNS name.
               ex: sp2-yi0xq-scan.ocispdelegated.ocisp10jvnet.oraclevcn.com
        :param str scan_dns_record_id: (Output)
               OCID of scan DNS record.
        :param Sequence[str] scan_ip_ids: (Output)
               OCIDs of scan IPs.
        :param int scan_listener_port_tcp: (Output)
               SCAN listener port - TCP
        :param int scan_listener_port_tcp_ssl: (Output)
               SCAN listener port - TLS
        :param str shape: (Output)
               Shape of VM Cluster.
        :param bool sparse_diskgroup_enabled: Use exadata sparse snapshots.
        :param Sequence[str] ssh_public_keys: SSH public keys to be stored with cluster.
        :param str state: (Output)
               State of the cluster.
               Possible values:
               STATE_UNSPECIFIED
               PROVISIONING
               AVAILABLE
               UPDATING
               TERMINATING
               TERMINATED
               FAILED
               MAINTENANCE_IN_PROGRESS
        :param int storage_size_gb: (Output)
               The storage allocation for the disk group, in gigabytes (GB).
        :param str system_version: (Output)
               Operating system version of the image.
        :param 'CloudVmClusterPropertiesTimeZoneArgs' time_zone: Represents a time zone from the
               [IANA Time Zone Database](https://www.iana.org/time-zones).
               Structure is documented below.
        """
        pulumi.set(__self__, "cpu_core_count", cpu_core_count)
        pulumi.set(__self__, "license_type", license_type)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if data_storage_size_tb is not None:
            pulumi.set(__self__, "data_storage_size_tb", data_storage_size_tb)
        if db_node_storage_size_gb is not None:
            pulumi.set(__self__, "db_node_storage_size_gb", db_node_storage_size_gb)
        if db_server_ocids is not None:
            pulumi.set(__self__, "db_server_ocids", db_server_ocids)
        if diagnostics_data_collection_options is not None:
            pulumi.set(__self__, "diagnostics_data_collection_options", diagnostics_data_collection_options)
        if disk_redundancy is not None:
            pulumi.set(__self__, "disk_redundancy", disk_redundancy)
        if dns_listener_ip is not None:
            pulumi.set(__self__, "dns_listener_ip", dns_listener_ip)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if gi_version is not None:
            pulumi.set(__self__, "gi_version", gi_version)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if hostname_prefix is not None:
            pulumi.set(__self__, "hostname_prefix", hostname_prefix)
        if local_backup_enabled is not None:
            pulumi.set(__self__, "local_backup_enabled", local_backup_enabled)
        if memory_size_gb is not None:
            pulumi.set(__self__, "memory_size_gb", memory_size_gb)
        if node_count is not None:
            pulumi.set(__self__, "node_count", node_count)
        if oci_url is not None:
            pulumi.set(__self__, "oci_url", oci_url)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ocpu_count is not None:
            pulumi.set(__self__, "ocpu_count", ocpu_count)
        if scan_dns is not None:
            pulumi.set(__self__, "scan_dns", scan_dns)
        if scan_dns_record_id is not None:
            pulumi.set(__self__, "scan_dns_record_id", scan_dns_record_id)
        if scan_ip_ids is not None:
            pulumi.set(__self__, "scan_ip_ids", scan_ip_ids)
        if scan_listener_port_tcp is not None:
            pulumi.set(__self__, "scan_listener_port_tcp", scan_listener_port_tcp)
        if scan_listener_port_tcp_ssl is not None:
            pulumi.set(__self__, "scan_listener_port_tcp_ssl", scan_listener_port_tcp_ssl)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if sparse_diskgroup_enabled is not None:
            pulumi.set(__self__, "sparse_diskgroup_enabled", sparse_diskgroup_enabled)
        if ssh_public_keys is not None:
            pulumi.set(__self__, "ssh_public_keys", ssh_public_keys)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if storage_size_gb is not None:
            pulumi.set(__self__, "storage_size_gb", storage_size_gb)
        if system_version is not None:
            pulumi.set(__self__, "system_version", system_version)
        if time_zone is not None:
            pulumi.set(__self__, "time_zone", time_zone)

    @property
    @pulumi.getter(name="cpuCoreCount")
    def cpu_core_count(self) -> int:
        """
        Number of enabled CPU cores.
        """
        return pulumi.get(self, "cpu_core_count")

    @property
    @pulumi.getter(name="licenseType")
    def license_type(self) -> str:
        """
        License type of VM Cluster.
        Possible values:
        LICENSE_TYPE_UNSPECIFIED
        LICENSE_INCLUDED
        BRING_YOUR_OWN_LICENSE
        """
        return pulumi.get(self, "license_type")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[str]:
        """
        OCI Cluster name.
        """
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        """
        (Output)
        Compartment ID of cluster.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="dataStorageSizeTb")
    def data_storage_size_tb(self) -> Optional[float]:
        """
        The data disk group size to be allocated in TBs.
        """
        return pulumi.get(self, "data_storage_size_tb")

    @property
    @pulumi.getter(name="dbNodeStorageSizeGb")
    def db_node_storage_size_gb(self) -> Optional[int]:
        """
        Local storage per VM
        """
        return pulumi.get(self, "db_node_storage_size_gb")

    @property
    @pulumi.getter(name="dbServerOcids")
    def db_server_ocids(self) -> Optional[Sequence[str]]:
        """
        OCID of database servers.
        """
        return pulumi.get(self, "db_server_ocids")

    @property
    @pulumi.getter(name="diagnosticsDataCollectionOptions")
    def diagnostics_data_collection_options(self) -> Optional['outputs.CloudVmClusterPropertiesDiagnosticsDataCollectionOptions']:
        """
        Data collection options for diagnostics.
        Structure is documented below.
        """
        return pulumi.get(self, "diagnostics_data_collection_options")

    @property
    @pulumi.getter(name="diskRedundancy")
    def disk_redundancy(self) -> Optional[str]:
        """
        The type of redundancy.
        Possible values:
        DISK_REDUNDANCY_UNSPECIFIED
        HIGH
        NORMAL
        """
        return pulumi.get(self, "disk_redundancy")

    @property
    @pulumi.getter(name="dnsListenerIp")
    def dns_listener_ip(self) -> Optional[str]:
        """
        (Output)
        DNS listener IP.
        """
        return pulumi.get(self, "dns_listener_ip")

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        """
        (Output)
        Parent DNS domain where SCAN DNS and hosts names are qualified.
        ex: ocispdelegated.ocisp10jvnet.oraclevcn.com
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="giVersion")
    def gi_version(self) -> Optional[str]:
        """
        Grid Infrastructure Version.
        """
        return pulumi.get(self, "gi_version")

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        """
        (Output)
        host name without domain.
        format: "-" with some suffix.
        ex: sp2-yi0xq where "sp2" is the hostname_prefix.
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="hostnamePrefix")
    def hostname_prefix(self) -> Optional[str]:
        """
        Prefix for VM cluster host names.
        """
        return pulumi.get(self, "hostname_prefix")

    @property
    @pulumi.getter(name="localBackupEnabled")
    def local_backup_enabled(self) -> Optional[bool]:
        """
        Use local backup.
        """
        return pulumi.get(self, "local_backup_enabled")

    @property
    @pulumi.getter(name="memorySizeGb")
    def memory_size_gb(self) -> Optional[int]:
        """
        Memory allocated in GBs.
        """
        return pulumi.get(self, "memory_size_gb")

    @property
    @pulumi.getter(name="nodeCount")
    def node_count(self) -> Optional[int]:
        """
        Number of database servers.
        """
        return pulumi.get(self, "node_count")

    @property
    @pulumi.getter(name="ociUrl")
    def oci_url(self) -> Optional[str]:
        """
        (Output)
        Deep link to the OCI console to view this resource.
        """
        return pulumi.get(self, "oci_url")

    @property
    @pulumi.getter
    def ocid(self) -> Optional[str]:
        """
        (Output)
        Oracle Cloud Infrastructure ID of VM Cluster.
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter(name="ocpuCount")
    def ocpu_count(self) -> Optional[float]:
        """
        OCPU count per VM. Minimum is 0.1.
        """
        return pulumi.get(self, "ocpu_count")

    @property
    @pulumi.getter(name="scanDns")
    def scan_dns(self) -> Optional[str]:
        """
        (Output)
        SCAN DNS name.
        ex: sp2-yi0xq-scan.ocispdelegated.ocisp10jvnet.oraclevcn.com
        """
        return pulumi.get(self, "scan_dns")

    @property
    @pulumi.getter(name="scanDnsRecordId")
    def scan_dns_record_id(self) -> Optional[str]:
        """
        (Output)
        OCID of scan DNS record.
        """
        return pulumi.get(self, "scan_dns_record_id")

    @property
    @pulumi.getter(name="scanIpIds")
    def scan_ip_ids(self) -> Optional[Sequence[str]]:
        """
        (Output)
        OCIDs of scan IPs.
        """
        return pulumi.get(self, "scan_ip_ids")

    @property
    @pulumi.getter(name="scanListenerPortTcp")
    def scan_listener_port_tcp(self) -> Optional[int]:
        """
        (Output)
        SCAN listener port - TCP
        """
        return pulumi.get(self, "scan_listener_port_tcp")

    @property
    @pulumi.getter(name="scanListenerPortTcpSsl")
    def scan_listener_port_tcp_ssl(self) -> Optional[int]:
        """
        (Output)
        SCAN listener port - TLS
        """
        return pulumi.get(self, "scan_listener_port_tcp_ssl")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        """
        (Output)
        Shape of VM Cluster.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="sparseDiskgroupEnabled")
    def sparse_diskgroup_enabled(self) -> Optional[bool]:
        """
        Use exadata sparse snapshots.
        """
        return pulumi.get(self, "sparse_diskgroup_enabled")

    @property
    @pulumi.getter(name="sshPublicKeys")
    def ssh_public_keys(self) -> Optional[Sequence[str]]:
        """
        SSH public keys to be stored with cluster.
        """
        return pulumi.get(self, "ssh_public_keys")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        """
        (Output)
        State of the cluster.
        Possible values:
        STATE_UNSPECIFIED
        PROVISIONING
        AVAILABLE
        UPDATING
        TERMINATING
        TERMINATED
        FAILED
        MAINTENANCE_IN_PROGRESS
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="storageSizeGb")
    def storage_size_gb(self) -> Optional[int]:
        """
        (Output)
        The storage allocation for the disk group, in gigabytes (GB).
        """
        return pulumi.get(self, "storage_size_gb")

    @property
    @pulumi.getter(name="systemVersion")
    def system_version(self) -> Optional[str]:
        """
        (Output)
        Operating system version of the image.
        """
        return pulumi.get(self, "system_version")

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> Optional['outputs.CloudVmClusterPropertiesTimeZone']:
        """
        Represents a time zone from the
        [IANA Time Zone Database](https://www.iana.org/time-zones).
        Structure is documented below.
        """
        return pulumi.get(self, "time_zone")


@pulumi.output_type
class CloudVmClusterPropertiesDiagnosticsDataCollectionOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diagnosticsEventsEnabled":
            suggest = "diagnostics_events_enabled"
        elif key == "healthMonitoringEnabled":
            suggest = "health_monitoring_enabled"
        elif key == "incidentLogsEnabled":
            suggest = "incident_logs_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloudVmClusterPropertiesDiagnosticsDataCollectionOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloudVmClusterPropertiesDiagnosticsDataCollectionOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloudVmClusterPropertiesDiagnosticsDataCollectionOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 diagnostics_events_enabled: Optional[bool] = None,
                 health_monitoring_enabled: Optional[bool] = None,
                 incident_logs_enabled: Optional[bool] = None):
        """
        :param bool diagnostics_events_enabled: Indicates whether diagnostic collection is enabled for the VM cluster
        :param bool health_monitoring_enabled: Indicates whether health monitoring is enabled for the VM cluster
        :param bool incident_logs_enabled: Indicates whether incident logs and trace collection are enabled for the VM
               cluster
        """
        if diagnostics_events_enabled is not None:
            pulumi.set(__self__, "diagnostics_events_enabled", diagnostics_events_enabled)
        if health_monitoring_enabled is not None:
            pulumi.set(__self__, "health_monitoring_enabled", health_monitoring_enabled)
        if incident_logs_enabled is not None:
            pulumi.set(__self__, "incident_logs_enabled", incident_logs_enabled)

    @property
    @pulumi.getter(name="diagnosticsEventsEnabled")
    def diagnostics_events_enabled(self) -> Optional[bool]:
        """
        Indicates whether diagnostic collection is enabled for the VM cluster
        """
        return pulumi.get(self, "diagnostics_events_enabled")

    @property
    @pulumi.getter(name="healthMonitoringEnabled")
    def health_monitoring_enabled(self) -> Optional[bool]:
        """
        Indicates whether health monitoring is enabled for the VM cluster
        """
        return pulumi.get(self, "health_monitoring_enabled")

    @property
    @pulumi.getter(name="incidentLogsEnabled")
    def incident_logs_enabled(self) -> Optional[bool]:
        """
        Indicates whether incident logs and trace collection are enabled for the VM
        cluster
        """
        return pulumi.get(self, "incident_logs_enabled")


@pulumi.output_type
class CloudVmClusterPropertiesTimeZone(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None):
        """
        :param str id: IANA Time Zone Database time zone, e.g. "America/New_York".
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        IANA Time Zone Database time zone, e.g. "America/New_York".
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetAutonomousDatabasePropertyResult(dict):
    def __init__(__self__, *,
                 actual_used_data_storage_size_tb: float,
                 allocated_storage_size_tb: float,
                 apex_details: Sequence['outputs.GetAutonomousDatabasePropertyApexDetailResult'],
                 are_primary_allowlisted_ips_used: bool,
                 autonomous_container_database_id: str,
                 available_upgrade_versions: Sequence[str],
                 backup_retention_period_days: int,
                 character_set: str,
                 compute_count: float,
                 connection_strings: Sequence['outputs.GetAutonomousDatabasePropertyConnectionStringResult'],
                 connection_urls: Sequence['outputs.GetAutonomousDatabasePropertyConnectionUrlResult'],
                 customer_contacts: Sequence['outputs.GetAutonomousDatabasePropertyCustomerContactResult'],
                 data_safe_state: str,
                 data_storage_size_gb: int,
                 data_storage_size_tb: int,
                 database_management_state: str,
                 db_edition: str,
                 db_version: str,
                 db_workload: str,
                 failed_data_recovery_duration: str,
                 is_auto_scaling_enabled: bool,
                 is_local_data_guard_enabled: bool,
                 is_storage_auto_scaling_enabled: bool,
                 license_type: str,
                 lifecycle_details: str,
                 local_adg_auto_failover_max_data_loss_limit: int,
                 local_disaster_recovery_type: str,
                 local_standby_dbs: Sequence['outputs.GetAutonomousDatabasePropertyLocalStandbyDbResult'],
                 maintenance_begin_time: str,
                 maintenance_end_time: str,
                 maintenance_schedule_type: str,
                 memory_per_oracle_compute_unit_gbs: int,
                 memory_table_gbs: int,
                 mtls_connection_required: bool,
                 n_character_set: str,
                 next_long_term_backup_time: str,
                 oci_url: str,
                 ocid: str,
                 open_mode: str,
                 operations_insights_state: str,
                 peer_db_ids: Sequence[str],
                 permission_level: str,
                 private_endpoint: str,
                 private_endpoint_ip: str,
                 private_endpoint_label: str,
                 refreshable_mode: str,
                 refreshable_state: str,
                 role: str,
                 scheduled_operation_details: Sequence['outputs.GetAutonomousDatabasePropertyScheduledOperationDetailResult'],
                 sql_web_developer_url: str,
                 state: str,
                 supported_clone_regions: Sequence[str],
                 total_auto_backup_storage_size_gbs: float,
                 used_data_storage_size_tbs: int):
        """
        :param float actual_used_data_storage_size_tb: The amount of storage currently being used for user and system data, in
               terabytes.
        :param float allocated_storage_size_tb: The amount of storage currently allocated for the database tables and
               billed for, rounded up in terabytes.
        :param Sequence['GetAutonomousDatabasePropertyApexDetailArgs'] apex_details: Oracle APEX Application Development.
               https://docs.oracle.com/en-us/iaas/api/#/en/database/20160918/datatypes/AutonomousDatabaseApex
        :param bool are_primary_allowlisted_ips_used: This field indicates the status of Data Guard and Access control for the
               Autonomous Database. The field's value is null if Data Guard is disabled
               or Access Control is disabled. The field's value is TRUE if both Data Guard
               and Access Control are enabled, and the Autonomous Database is using
               primary IP access control list (ACL) for standby. The field's value is
               FALSE if both Data Guard and Access Control are enabled, and the Autonomous
               Database is using a different IP access control list (ACL) for standby
               compared to primary.
        :param str autonomous_container_database_id: The Autonomous Container Database OCID.
        :param Sequence[str] available_upgrade_versions: The list of available Oracle Database upgrade versions for an Autonomous
               Database.
        :param int backup_retention_period_days: The retention period for the Autonomous Database. This field is specified
               in days, can range from 1 day to 60 days, and has a default value of
               60 days.
        :param str character_set: The character set for the Autonomous Database. The default is AL32UTF8.
        :param float compute_count: The number of compute servers for the Autonomous Database.
        :param Sequence['GetAutonomousDatabasePropertyConnectionStringArgs'] connection_strings: The connection string used to connect to the Autonomous Database.
               https://docs.oracle.com/en-us/iaas/api/#/en/database/20160918/datatypes/AutonomousDatabaseConnectionStrings
        :param Sequence['GetAutonomousDatabasePropertyConnectionUrlArgs'] connection_urls: The URLs for accessing Oracle Application Express (APEX) and SQL Developer
               Web with a browser from a Compute instance.
               https://docs.oracle.com/en-us/iaas/api/#/en/database/20160918/datatypes/AutonomousDatabaseConnectionUrls
        :param Sequence['GetAutonomousDatabasePropertyCustomerContactArgs'] customer_contacts: The list of customer contacts.
        :param str data_safe_state: The current state of the Data Safe registration for the
               Autonomous Database. 
                Possible values:
                DATA_SAFE_STATE_UNSPECIFIED
               REGISTERING
               REGISTERED
               DEREGISTERING
               NOT_REGISTERED
               FAILED
        :param int data_storage_size_gb: The size of the data stored in the database, in gigabytes.
        :param int data_storage_size_tb: The size of the data stored in the database, in terabytes.
        :param str database_management_state: The current state of database management for the Autonomous Database. 
                Possible values:
                DATABASE_MANAGEMENT_STATE_UNSPECIFIED
               ENABLING
               ENABLED
               DISABLING
               NOT_ENABLED
               FAILED_ENABLING
               FAILED_DISABLING
        :param str db_edition: The edition of the Autonomous Databases. 
                Possible values:
                DATABASE_EDITION_UNSPECIFIED
               STANDARD_EDITION
               ENTERPRISE_EDITION
        :param str db_version: The Oracle Database version for the Autonomous Database.
        :param str db_workload: Possible values:
                DB_WORKLOAD_UNSPECIFIED
               OLTP
               DW
               AJD
               APEX
        :param str failed_data_recovery_duration: This field indicates the number of seconds of data loss during a Data
               Guard failover.
        :param bool is_auto_scaling_enabled: This field indicates if auto scaling is enabled for the Autonomous Database
               CPU core count.
        :param bool is_local_data_guard_enabled: This field indicates whether the Autonomous Database has local (in-region)
               Data Guard enabled.
        :param bool is_storage_auto_scaling_enabled: This field indicates if auto scaling is enabled for the Autonomous Database
               storage.
        :param str license_type: The license type used for the Autonomous Database. 
                Possible values:
                LICENSE_TYPE_UNSPECIFIED
               LICENSE_INCLUDED
               BRING_YOUR_OWN_LICENSE
        :param str lifecycle_details: The details of the current lifestyle state of the Autonomous Database.
        :param int local_adg_auto_failover_max_data_loss_limit: This field indicates the maximum data loss limit for an Autonomous
               Database, in seconds.
        :param str local_disaster_recovery_type: This field indicates the local disaster recovery (DR) type of an
               Autonomous Database. 
                Possible values:
                LOCAL_DISASTER_RECOVERY_TYPE_UNSPECIFIED
               ADG
               BACKUP_BASED
        :param Sequence['GetAutonomousDatabasePropertyLocalStandbyDbArgs'] local_standby_dbs: Autonomous Data Guard standby database details.
               https://docs.oracle.com/en-us/iaas/api/#/en/database/20160918/datatypes/AutonomousDatabaseStandbySummary
        :param str maintenance_begin_time: The date and time when maintenance will begin.
        :param str maintenance_end_time: The date and time when maintenance will end.
        :param str maintenance_schedule_type: The maintenance schedule of the Autonomous Database. 
                Possible values:
                MAINTENANCE_SCHEDULE_TYPE_UNSPECIFIED
               EARLY
               REGULAR
        :param int memory_per_oracle_compute_unit_gbs: The amount of memory enabled per ECPU, in gigabytes.
        :param int memory_table_gbs: The memory assigned to in-memory tables in an Autonomous Database.
        :param bool mtls_connection_required: This field specifies if the Autonomous Database requires mTLS connections.
        :param str n_character_set: The national character set for the Autonomous Database. The default is
               AL16UTF16.
        :param str next_long_term_backup_time: The long term backup schedule of the Autonomous Database.
        :param str oci_url: The Oracle Cloud Infrastructure link for the Autonomous Database.
        :param str ocid: OCID of the Autonomous Database.
               https://docs.oracle.com/en-us/iaas/Content/General/Concepts/identifiers.htm#Oracle
        :param str open_mode: This field indicates the current mode of the Autonomous Database. 
                Possible values:
                OPEN_MODE_UNSPECIFIED
               READ_ONLY
               READ_WRITE
        :param str operations_insights_state: Possible values:
                OPERATIONS_INSIGHTS_STATE_UNSPECIFIED
               ENABLING
               ENABLED
               DISABLING
               NOT_ENABLED
               FAILED_ENABLING
               FAILED_DISABLING
        :param Sequence[str] peer_db_ids: The list of OCIDs of standby databases located in Autonomous Data Guard
               remote regions that are associated with the source database.
        :param str permission_level: The permission level of the Autonomous Database. 
                Possible values:
                PERMISSION_LEVEL_UNSPECIFIED
               RESTRICTED
               UNRESTRICTED
        :param str private_endpoint: The private endpoint for the Autonomous Database.
        :param str private_endpoint_ip: The private endpoint IP address for the Autonomous Database.
        :param str private_endpoint_label: The private endpoint label for the Autonomous Database.
        :param str refreshable_mode: The refresh mode of the cloned Autonomous Database. 
                Possible values:
                REFRESHABLE_MODE_UNSPECIFIED
               AUTOMATIC
               MANUAL
        :param str refreshable_state: The refresh State of the clone. 
                Possible values:
                REFRESHABLE_STATE_UNSPECIFIED
               REFRESHING
               NOT_REFRESHING
        :param str role: The Data Guard role of the Autonomous Database. 
                Possible values:
                ROLE_UNSPECIFIED
               PRIMARY
               STANDBY
               DISABLED_STANDBY
               BACKUP_COPY
               SNAPSHOT_STANDBY
        :param Sequence['GetAutonomousDatabasePropertyScheduledOperationDetailArgs'] scheduled_operation_details: The list and details of the scheduled operations of the Autonomous
               Database.
        :param str sql_web_developer_url: The SQL Web Developer URL for the Autonomous Database.
        :param str state: Possible values:
                STATE_UNSPECIFIED
               PROVISIONING
               AVAILABLE
               STOPPING
               STOPPED
               STARTING
               TERMINATING
               TERMINATED
               UNAVAILABLE
               RESTORE_IN_PROGRESS
               RESTORE_FAILED
               BACKUP_IN_PROGRESS
               SCALE_IN_PROGRESS
               AVAILABLE_NEEDS_ATTENTION
               UPDATING
               MAINTENANCE_IN_PROGRESS
               RESTARTING
               RECREATING
               ROLE_CHANGE_IN_PROGRESS
               UPGRADING
               INACCESSIBLE
               STANDBY
        :param Sequence[str] supported_clone_regions: The list of available regions that can be used to create a clone for the
               Autonomous Database.
        :param float total_auto_backup_storage_size_gbs: The storage space used by automatic backups of Autonomous Database, in
               gigabytes.
        :param int used_data_storage_size_tbs: The storage space used by Autonomous Database, in gigabytes.
        """
        pulumi.set(__self__, "actual_used_data_storage_size_tb", actual_used_data_storage_size_tb)
        pulumi.set(__self__, "allocated_storage_size_tb", allocated_storage_size_tb)
        pulumi.set(__self__, "apex_details", apex_details)
        pulumi.set(__self__, "are_primary_allowlisted_ips_used", are_primary_allowlisted_ips_used)
        pulumi.set(__self__, "autonomous_container_database_id", autonomous_container_database_id)
        pulumi.set(__self__, "available_upgrade_versions", available_upgrade_versions)
        pulumi.set(__self__, "backup_retention_period_days", backup_retention_period_days)
        pulumi.set(__self__, "character_set", character_set)
        pulumi.set(__self__, "compute_count", compute_count)
        pulumi.set(__self__, "connection_strings", connection_strings)
        pulumi.set(__self__, "connection_urls", connection_urls)
        pulumi.set(__self__, "customer_contacts", customer_contacts)
        pulumi.set(__self__, "data_safe_state", data_safe_state)
        pulumi.set(__self__, "data_storage_size_gb", data_storage_size_gb)
        pulumi.set(__self__, "data_storage_size_tb", data_storage_size_tb)
        pulumi.set(__self__, "database_management_state", database_management_state)
        pulumi.set(__self__, "db_edition", db_edition)
        pulumi.set(__self__, "db_version", db_version)
        pulumi.set(__self__, "db_workload", db_workload)
        pulumi.set(__self__, "failed_data_recovery_duration", failed_data_recovery_duration)
        pulumi.set(__self__, "is_auto_scaling_enabled", is_auto_scaling_enabled)
        pulumi.set(__self__, "is_local_data_guard_enabled", is_local_data_guard_enabled)
        pulumi.set(__self__, "is_storage_auto_scaling_enabled", is_storage_auto_scaling_enabled)
        pulumi.set(__self__, "license_type", license_type)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "local_adg_auto_failover_max_data_loss_limit", local_adg_auto_failover_max_data_loss_limit)
        pulumi.set(__self__, "local_disaster_recovery_type", local_disaster_recovery_type)
        pulumi.set(__self__, "local_standby_dbs", local_standby_dbs)
        pulumi.set(__self__, "maintenance_begin_time", maintenance_begin_time)
        pulumi.set(__self__, "maintenance_end_time", maintenance_end_time)
        pulumi.set(__self__, "maintenance_schedule_type", maintenance_schedule_type)
        pulumi.set(__self__, "memory_per_oracle_compute_unit_gbs", memory_per_oracle_compute_unit_gbs)
        pulumi.set(__self__, "memory_table_gbs", memory_table_gbs)
        pulumi.set(__self__, "mtls_connection_required", mtls_connection_required)
        pulumi.set(__self__, "n_character_set", n_character_set)
        pulumi.set(__self__, "next_long_term_backup_time", next_long_term_backup_time)
        pulumi.set(__self__, "oci_url", oci_url)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "open_mode", open_mode)
        pulumi.set(__self__, "operations_insights_state", operations_insights_state)
        pulumi.set(__self__, "peer_db_ids", peer_db_ids)
        pulumi.set(__self__, "permission_level", permission_level)
        pulumi.set(__self__, "private_endpoint", private_endpoint)
        pulumi.set(__self__, "private_endpoint_ip", private_endpoint_ip)
        pulumi.set(__self__, "private_endpoint_label", private_endpoint_label)
        pulumi.set(__self__, "refreshable_mode", refreshable_mode)
        pulumi.set(__self__, "refreshable_state", refreshable_state)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "scheduled_operation_details", scheduled_operation_details)
        pulumi.set(__self__, "sql_web_developer_url", sql_web_developer_url)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "supported_clone_regions", supported_clone_regions)
        pulumi.set(__self__, "total_auto_backup_storage_size_gbs", total_auto_backup_storage_size_gbs)
        pulumi.set(__self__, "used_data_storage_size_tbs", used_data_storage_size_tbs)

    @property
    @pulumi.getter(name="actualUsedDataStorageSizeTb")
    def actual_used_data_storage_size_tb(self) -> float:
        """
        The amount of storage currently being used for user and system data, in
        terabytes.
        """
        return pulumi.get(self, "actual_used_data_storage_size_tb")

    @property
    @pulumi.getter(name="allocatedStorageSizeTb")
    def allocated_storage_size_tb(self) -> float:
        """
        The amount of storage currently allocated for the database tables and
        billed for, rounded up in terabytes.
        """
        return pulumi.get(self, "allocated_storage_size_tb")

    @property
    @pulumi.getter(name="apexDetails")
    def apex_details(self) -> Sequence['outputs.GetAutonomousDatabasePropertyApexDetailResult']:
        """
        Oracle APEX Application Development.
        https://docs.oracle.com/en-us/iaas/api/#/en/database/20160918/datatypes/AutonomousDatabaseApex
        """
        return pulumi.get(self, "apex_details")

    @property
    @pulumi.getter(name="arePrimaryAllowlistedIpsUsed")
    def are_primary_allowlisted_ips_used(self) -> bool:
        """
        This field indicates the status of Data Guard and Access control for the
        Autonomous Database. The field's value is null if Data Guard is disabled
        or Access Control is disabled. The field's value is TRUE if both Data Guard
        and Access Control are enabled, and the Autonomous Database is using
        primary IP access control list (ACL) for standby. The field's value is
        FALSE if both Data Guard and Access Control are enabled, and the Autonomous
        Database is using a different IP access control list (ACL) for standby
        compared to primary.
        """
        return pulumi.get(self, "are_primary_allowlisted_ips_used")

    @property
    @pulumi.getter(name="autonomousContainerDatabaseId")
    def autonomous_container_database_id(self) -> str:
        """
        The Autonomous Container Database OCID.
        """
        return pulumi.get(self, "autonomous_container_database_id")

    @property
    @pulumi.getter(name="availableUpgradeVersions")
    def available_upgrade_versions(self) -> Sequence[str]:
        """
        The list of available Oracle Database upgrade versions for an Autonomous
        Database.
        """
        return pulumi.get(self, "available_upgrade_versions")

    @property
    @pulumi.getter(name="backupRetentionPeriodDays")
    def backup_retention_period_days(self) -> int:
        """
        The retention period for the Autonomous Database. This field is specified
        in days, can range from 1 day to 60 days, and has a default value of
        60 days.
        """
        return pulumi.get(self, "backup_retention_period_days")

    @property
    @pulumi.getter(name="characterSet")
    def character_set(self) -> str:
        """
        The character set for the Autonomous Database. The default is AL32UTF8.
        """
        return pulumi.get(self, "character_set")

    @property
    @pulumi.getter(name="computeCount")
    def compute_count(self) -> float:
        """
        The number of compute servers for the Autonomous Database.
        """
        return pulumi.get(self, "compute_count")

    @property
    @pulumi.getter(name="connectionStrings")
    def connection_strings(self) -> Sequence['outputs.GetAutonomousDatabasePropertyConnectionStringResult']:
        """
        The connection string used to connect to the Autonomous Database.
        https://docs.oracle.com/en-us/iaas/api/#/en/database/20160918/datatypes/AutonomousDatabaseConnectionStrings
        """
        return pulumi.get(self, "connection_strings")

    @property
    @pulumi.getter(name="connectionUrls")
    def connection_urls(self) -> Sequence['outputs.GetAutonomousDatabasePropertyConnectionUrlResult']:
        """
        The URLs for accessing Oracle Application Express (APEX) and SQL Developer
        Web with a browser from a Compute instance.
        https://docs.oracle.com/en-us/iaas/api/#/en/database/20160918/datatypes/AutonomousDatabaseConnectionUrls
        """
        return pulumi.get(self, "connection_urls")

    @property
    @pulumi.getter(name="customerContacts")
    def customer_contacts(self) -> Sequence['outputs.GetAutonomousDatabasePropertyCustomerContactResult']:
        """
        The list of customer contacts.
        """
        return pulumi.get(self, "customer_contacts")

    @property
    @pulumi.getter(name="dataSafeState")
    def data_safe_state(self) -> str:
        """
        The current state of the Data Safe registration for the
        Autonomous Database. 
         Possible values:
         DATA_SAFE_STATE_UNSPECIFIED
        REGISTERING
        REGISTERED
        DEREGISTERING
        NOT_REGISTERED
        FAILED
        """
        return pulumi.get(self, "data_safe_state")

    @property
    @pulumi.getter(name="dataStorageSizeGb")
    def data_storage_size_gb(self) -> int:
        """
        The size of the data stored in the database, in gigabytes.
        """
        return pulumi.get(self, "data_storage_size_gb")

    @property
    @pulumi.getter(name="dataStorageSizeTb")
    def data_storage_size_tb(self) -> int:
        """
        The size of the data stored in the database, in terabytes.
        """
        return pulumi.get(self, "data_storage_size_tb")

    @property
    @pulumi.getter(name="databaseManagementState")
    def database_management_state(self) -> str:
        """
        The current state of database management for the Autonomous Database. 
         Possible values:
         DATABASE_MANAGEMENT_STATE_UNSPECIFIED
        ENABLING
        ENABLED
        DISABLING
        NOT_ENABLED
        FAILED_ENABLING
        FAILED_DISABLING
        """
        return pulumi.get(self, "database_management_state")

    @property
    @pulumi.getter(name="dbEdition")
    def db_edition(self) -> str:
        """
        The edition of the Autonomous Databases. 
         Possible values:
         DATABASE_EDITION_UNSPECIFIED
        STANDARD_EDITION
        ENTERPRISE_EDITION
        """
        return pulumi.get(self, "db_edition")

    @property
    @pulumi.getter(name="dbVersion")
    def db_version(self) -> str:
        """
        The Oracle Database version for the Autonomous Database.
        """
        return pulumi.get(self, "db_version")

    @property
    @pulumi.getter(name="dbWorkload")
    def db_workload(self) -> str:
        """
        Possible values:
         DB_WORKLOAD_UNSPECIFIED
        OLTP
        DW
        AJD
        APEX
        """
        return pulumi.get(self, "db_workload")

    @property
    @pulumi.getter(name="failedDataRecoveryDuration")
    def failed_data_recovery_duration(self) -> str:
        """
        This field indicates the number of seconds of data loss during a Data
        Guard failover.
        """
        return pulumi.get(self, "failed_data_recovery_duration")

    @property
    @pulumi.getter(name="isAutoScalingEnabled")
    def is_auto_scaling_enabled(self) -> bool:
        """
        This field indicates if auto scaling is enabled for the Autonomous Database
        CPU core count.
        """
        return pulumi.get(self, "is_auto_scaling_enabled")

    @property
    @pulumi.getter(name="isLocalDataGuardEnabled")
    def is_local_data_guard_enabled(self) -> bool:
        """
        This field indicates whether the Autonomous Database has local (in-region)
        Data Guard enabled.
        """
        return pulumi.get(self, "is_local_data_guard_enabled")

    @property
    @pulumi.getter(name="isStorageAutoScalingEnabled")
    def is_storage_auto_scaling_enabled(self) -> bool:
        """
        This field indicates if auto scaling is enabled for the Autonomous Database
        storage.
        """
        return pulumi.get(self, "is_storage_auto_scaling_enabled")

    @property
    @pulumi.getter(name="licenseType")
    def license_type(self) -> str:
        """
        The license type used for the Autonomous Database. 
         Possible values:
         LICENSE_TYPE_UNSPECIFIED
        LICENSE_INCLUDED
        BRING_YOUR_OWN_LICENSE
        """
        return pulumi.get(self, "license_type")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> str:
        """
        The details of the current lifestyle state of the Autonomous Database.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="localAdgAutoFailoverMaxDataLossLimit")
    def local_adg_auto_failover_max_data_loss_limit(self) -> int:
        """
        This field indicates the maximum data loss limit for an Autonomous
        Database, in seconds.
        """
        return pulumi.get(self, "local_adg_auto_failover_max_data_loss_limit")

    @property
    @pulumi.getter(name="localDisasterRecoveryType")
    def local_disaster_recovery_type(self) -> str:
        """
        This field indicates the local disaster recovery (DR) type of an
        Autonomous Database. 
         Possible values:
         LOCAL_DISASTER_RECOVERY_TYPE_UNSPECIFIED
        ADG
        BACKUP_BASED
        """
        return pulumi.get(self, "local_disaster_recovery_type")

    @property
    @pulumi.getter(name="localStandbyDbs")
    def local_standby_dbs(self) -> Sequence['outputs.GetAutonomousDatabasePropertyLocalStandbyDbResult']:
        """
        Autonomous Data Guard standby database details.
        https://docs.oracle.com/en-us/iaas/api/#/en/database/20160918/datatypes/AutonomousDatabaseStandbySummary
        """
        return pulumi.get(self, "local_standby_dbs")

    @property
    @pulumi.getter(name="maintenanceBeginTime")
    def maintenance_begin_time(self) -> str:
        """
        The date and time when maintenance will begin.
        """
        return pulumi.get(self, "maintenance_begin_time")

    @property
    @pulumi.getter(name="maintenanceEndTime")
    def maintenance_end_time(self) -> str:
        """
        The date and time when maintenance will end.
        """
        return pulumi.get(self, "maintenance_end_time")

    @property
    @pulumi.getter(name="maintenanceScheduleType")
    def maintenance_schedule_type(self) -> str:
        """
        The maintenance schedule of the Autonomous Database. 
         Possible values:
         MAINTENANCE_SCHEDULE_TYPE_UNSPECIFIED
        EARLY
        REGULAR
        """
        return pulumi.get(self, "maintenance_schedule_type")

    @property
    @pulumi.getter(name="memoryPerOracleComputeUnitGbs")
    def memory_per_oracle_compute_unit_gbs(self) -> int:
        """
        The amount of memory enabled per ECPU, in gigabytes.
        """
        return pulumi.get(self, "memory_per_oracle_compute_unit_gbs")

    @property
    @pulumi.getter(name="memoryTableGbs")
    def memory_table_gbs(self) -> int:
        """
        The memory assigned to in-memory tables in an Autonomous Database.
        """
        return pulumi.get(self, "memory_table_gbs")

    @property
    @pulumi.getter(name="mtlsConnectionRequired")
    def mtls_connection_required(self) -> bool:
        """
        This field specifies if the Autonomous Database requires mTLS connections.
        """
        return pulumi.get(self, "mtls_connection_required")

    @property
    @pulumi.getter(name="nCharacterSet")
    def n_character_set(self) -> str:
        """
        The national character set for the Autonomous Database. The default is
        AL16UTF16.
        """
        return pulumi.get(self, "n_character_set")

    @property
    @pulumi.getter(name="nextLongTermBackupTime")
    def next_long_term_backup_time(self) -> str:
        """
        The long term backup schedule of the Autonomous Database.
        """
        return pulumi.get(self, "next_long_term_backup_time")

    @property
    @pulumi.getter(name="ociUrl")
    def oci_url(self) -> str:
        """
        The Oracle Cloud Infrastructure link for the Autonomous Database.
        """
        return pulumi.get(self, "oci_url")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        OCID of the Autonomous Database.
        https://docs.oracle.com/en-us/iaas/Content/General/Concepts/identifiers.htm#Oracle
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter(name="openMode")
    def open_mode(self) -> str:
        """
        This field indicates the current mode of the Autonomous Database. 
         Possible values:
         OPEN_MODE_UNSPECIFIED
        READ_ONLY
        READ_WRITE
        """
        return pulumi.get(self, "open_mode")

    @property
    @pulumi.getter(name="operationsInsightsState")
    def operations_insights_state(self) -> str:
        """
        Possible values:
         OPERATIONS_INSIGHTS_STATE_UNSPECIFIED
        ENABLING
        ENABLED
        DISABLING
        NOT_ENABLED
        FAILED_ENABLING
        FAILED_DISABLING
        """
        return pulumi.get(self, "operations_insights_state")

    @property
    @pulumi.getter(name="peerDbIds")
    def peer_db_ids(self) -> Sequence[str]:
        """
        The list of OCIDs of standby databases located in Autonomous Data Guard
        remote regions that are associated with the source database.
        """
        return pulumi.get(self, "peer_db_ids")

    @property
    @pulumi.getter(name="permissionLevel")
    def permission_level(self) -> str:
        """
        The permission level of the Autonomous Database. 
         Possible values:
         PERMISSION_LEVEL_UNSPECIFIED
        RESTRICTED
        UNRESTRICTED
        """
        return pulumi.get(self, "permission_level")

    @property
    @pulumi.getter(name="privateEndpoint")
    def private_endpoint(self) -> str:
        """
        The private endpoint for the Autonomous Database.
        """
        return pulumi.get(self, "private_endpoint")

    @property
    @pulumi.getter(name="privateEndpointIp")
    def private_endpoint_ip(self) -> str:
        """
        The private endpoint IP address for the Autonomous Database.
        """
        return pulumi.get(self, "private_endpoint_ip")

    @property
    @pulumi.getter(name="privateEndpointLabel")
    def private_endpoint_label(self) -> str:
        """
        The private endpoint label for the Autonomous Database.
        """
        return pulumi.get(self, "private_endpoint_label")

    @property
    @pulumi.getter(name="refreshableMode")
    def refreshable_mode(self) -> str:
        """
        The refresh mode of the cloned Autonomous Database. 
         Possible values:
         REFRESHABLE_MODE_UNSPECIFIED
        AUTOMATIC
        MANUAL
        """
        return pulumi.get(self, "refreshable_mode")

    @property
    @pulumi.getter(name="refreshableState")
    def refreshable_state(self) -> str:
        """
        The refresh State of the clone. 
         Possible values:
         REFRESHABLE_STATE_UNSPECIFIED
        REFRESHING
        NOT_REFRESHING
        """
        return pulumi.get(self, "refreshable_state")

    @property
    @pulumi.getter
    def role(self) -> str:
        """
        The Data Guard role of the Autonomous Database. 
         Possible values:
         ROLE_UNSPECIFIED
        PRIMARY
        STANDBY
        DISABLED_STANDBY
        BACKUP_COPY
        SNAPSHOT_STANDBY
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="scheduledOperationDetails")
    def scheduled_operation_details(self) -> Sequence['outputs.GetAutonomousDatabasePropertyScheduledOperationDetailResult']:
        """
        The list and details of the scheduled operations of the Autonomous
        Database.
        """
        return pulumi.get(self, "scheduled_operation_details")

    @property
    @pulumi.getter(name="sqlWebDeveloperUrl")
    def sql_web_developer_url(self) -> str:
        """
        The SQL Web Developer URL for the Autonomous Database.
        """
        return pulumi.get(self, "sql_web_developer_url")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Possible values:
         STATE_UNSPECIFIED
        PROVISIONING
        AVAILABLE
        STOPPING
        STOPPED
        STARTING
        TERMINATING
        TERMINATED
        UNAVAILABLE
        RESTORE_IN_PROGRESS
        RESTORE_FAILED
        BACKUP_IN_PROGRESS
        SCALE_IN_PROGRESS
        AVAILABLE_NEEDS_ATTENTION
        UPDATING
        MAINTENANCE_IN_PROGRESS
        RESTARTING
        RECREATING
        ROLE_CHANGE_IN_PROGRESS
        UPGRADING
        INACCESSIBLE
        STANDBY
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="supportedCloneRegions")
    def supported_clone_regions(self) -> Sequence[str]:
        """
        The list of available regions that can be used to create a clone for the
        Autonomous Database.
        """
        return pulumi.get(self, "supported_clone_regions")

    @property
    @pulumi.getter(name="totalAutoBackupStorageSizeGbs")
    def total_auto_backup_storage_size_gbs(self) -> float:
        """
        The storage space used by automatic backups of Autonomous Database, in
        gigabytes.
        """
        return pulumi.get(self, "total_auto_backup_storage_size_gbs")

    @property
    @pulumi.getter(name="usedDataStorageSizeTbs")
    def used_data_storage_size_tbs(self) -> int:
        """
        The storage space used by Autonomous Database, in gigabytes.
        """
        return pulumi.get(self, "used_data_storage_size_tbs")


@pulumi.output_type
class GetAutonomousDatabasePropertyApexDetailResult(dict):
    def __init__(__self__, *,
                 apex_version: str,
                 ords_version: str):
        """
        :param str apex_version: The Oracle APEX Application Development version.
        :param str ords_version: The Oracle REST Data Services (ORDS) version.
        """
        pulumi.set(__self__, "apex_version", apex_version)
        pulumi.set(__self__, "ords_version", ords_version)

    @property
    @pulumi.getter(name="apexVersion")
    def apex_version(self) -> str:
        """
        The Oracle APEX Application Development version.
        """
        return pulumi.get(self, "apex_version")

    @property
    @pulumi.getter(name="ordsVersion")
    def ords_version(self) -> str:
        """
        The Oracle REST Data Services (ORDS) version.
        """
        return pulumi.get(self, "ords_version")


@pulumi.output_type
class GetAutonomousDatabasePropertyConnectionStringResult(dict):
    def __init__(__self__, *,
                 all_connection_strings: Sequence['outputs.GetAutonomousDatabasePropertyConnectionStringAllConnectionStringResult'],
                 dedicated: str,
                 high: str,
                 low: str,
                 medium: str,
                 profiles: Sequence['outputs.GetAutonomousDatabasePropertyConnectionStringProfileResult']):
        """
        :param Sequence['GetAutonomousDatabasePropertyConnectionStringAllConnectionStringArgs'] all_connection_strings: A list of all connection strings that can be used to connect to the
               Autonomous Database.
        :param str dedicated: The database service provides the least level of resources to each SQL
               statement, but supports the most number of concurrent SQL statements.
        :param str high: The database service provides the highest level of resources to each SQL
               statement.
        :param str low: The database service provides the least level of resources to each SQL
               statement.
        :param str medium: The database service provides a lower level of resources to each SQL
               statement.
        :param Sequence['GetAutonomousDatabasePropertyConnectionStringProfileArgs'] profiles: A list of connection string profiles to allow clients to group, filter, and
               select values based on the structured metadata.
        """
        pulumi.set(__self__, "all_connection_strings", all_connection_strings)
        pulumi.set(__self__, "dedicated", dedicated)
        pulumi.set(__self__, "high", high)
        pulumi.set(__self__, "low", low)
        pulumi.set(__self__, "medium", medium)
        pulumi.set(__self__, "profiles", profiles)

    @property
    @pulumi.getter(name="allConnectionStrings")
    def all_connection_strings(self) -> Sequence['outputs.GetAutonomousDatabasePropertyConnectionStringAllConnectionStringResult']:
        """
        A list of all connection strings that can be used to connect to the
        Autonomous Database.
        """
        return pulumi.get(self, "all_connection_strings")

    @property
    @pulumi.getter
    def dedicated(self) -> str:
        """
        The database service provides the least level of resources to each SQL
        statement, but supports the most number of concurrent SQL statements.
        """
        return pulumi.get(self, "dedicated")

    @property
    @pulumi.getter
    def high(self) -> str:
        """
        The database service provides the highest level of resources to each SQL
        statement.
        """
        return pulumi.get(self, "high")

    @property
    @pulumi.getter
    def low(self) -> str:
        """
        The database service provides the least level of resources to each SQL
        statement.
        """
        return pulumi.get(self, "low")

    @property
    @pulumi.getter
    def medium(self) -> str:
        """
        The database service provides a lower level of resources to each SQL
        statement.
        """
        return pulumi.get(self, "medium")

    @property
    @pulumi.getter
    def profiles(self) -> Sequence['outputs.GetAutonomousDatabasePropertyConnectionStringProfileResult']:
        """
        A list of connection string profiles to allow clients to group, filter, and
        select values based on the structured metadata.
        """
        return pulumi.get(self, "profiles")


@pulumi.output_type
class GetAutonomousDatabasePropertyConnectionStringAllConnectionStringResult(dict):
    def __init__(__self__, *,
                 high: str,
                 low: str,
                 medium: str):
        """
        :param str high: The database service provides the highest level of resources to each SQL
               statement.
        :param str low: The database service provides the least level of resources to each SQL
               statement.
        :param str medium: The database service provides a lower level of resources to each SQL
               statement.
        """
        pulumi.set(__self__, "high", high)
        pulumi.set(__self__, "low", low)
        pulumi.set(__self__, "medium", medium)

    @property
    @pulumi.getter
    def high(self) -> str:
        """
        The database service provides the highest level of resources to each SQL
        statement.
        """
        return pulumi.get(self, "high")

    @property
    @pulumi.getter
    def low(self) -> str:
        """
        The database service provides the least level of resources to each SQL
        statement.
        """
        return pulumi.get(self, "low")

    @property
    @pulumi.getter
    def medium(self) -> str:
        """
        The database service provides a lower level of resources to each SQL
        statement.
        """
        return pulumi.get(self, "medium")


@pulumi.output_type
class GetAutonomousDatabasePropertyConnectionStringProfileResult(dict):
    def __init__(__self__, *,
                 consumer_group: str,
                 display_name: str,
                 host_format: str,
                 is_regional: bool,
                 protocol: str,
                 session_mode: str,
                 syntax_format: str,
                 tls_authentication: str,
                 value: str):
        """
        :param str consumer_group: The current consumer group being used by the connection. 
                Possible values:
                CONSUMER_GROUP_UNSPECIFIED
               HIGH
               MEDIUM
               LOW
               TP
               TPURGENT
        :param str display_name: The display name for the database connection.
        :param str host_format: The host name format being currently used in connection string. 
                Possible values:
                HOST_FORMAT_UNSPECIFIED
               FQDN
               IP
        :param bool is_regional: This field indicates if the connection string is regional and is only
               applicable for cross-region Data Guard.
        :param str protocol: The protocol being used by the connection. 
                Possible values:
                PROTOCOL_UNSPECIFIED
               TCP
               TCPS
        :param str session_mode: The current session mode of the connection. 
                Possible values:
                SESSION_MODE_UNSPECIFIED
               DIRECT
               INDIRECT
        :param str syntax_format: The syntax of the connection string. 
                Possible values:
                SYNTAX_FORMAT_UNSPECIFIED
               LONG
               EZCONNECT
               EZCONNECTPLUS
        :param str tls_authentication: This field indicates the TLS authentication type of the connection. 
                Possible values:
                TLS_AUTHENTICATION_UNSPECIFIED
               SERVER
               MUTUAL
        :param str value: The value of the connection string.
        """
        pulumi.set(__self__, "consumer_group", consumer_group)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "host_format", host_format)
        pulumi.set(__self__, "is_regional", is_regional)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "session_mode", session_mode)
        pulumi.set(__self__, "syntax_format", syntax_format)
        pulumi.set(__self__, "tls_authentication", tls_authentication)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="consumerGroup")
    def consumer_group(self) -> str:
        """
        The current consumer group being used by the connection. 
         Possible values:
         CONSUMER_GROUP_UNSPECIFIED
        HIGH
        MEDIUM
        LOW
        TP
        TPURGENT
        """
        return pulumi.get(self, "consumer_group")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The display name for the database connection.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="hostFormat")
    def host_format(self) -> str:
        """
        The host name format being currently used in connection string. 
         Possible values:
         HOST_FORMAT_UNSPECIFIED
        FQDN
        IP
        """
        return pulumi.get(self, "host_format")

    @property
    @pulumi.getter(name="isRegional")
    def is_regional(self) -> bool:
        """
        This field indicates if the connection string is regional and is only
        applicable for cross-region Data Guard.
        """
        return pulumi.get(self, "is_regional")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        The protocol being used by the connection. 
         Possible values:
         PROTOCOL_UNSPECIFIED
        TCP
        TCPS
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="sessionMode")
    def session_mode(self) -> str:
        """
        The current session mode of the connection. 
         Possible values:
         SESSION_MODE_UNSPECIFIED
        DIRECT
        INDIRECT
        """
        return pulumi.get(self, "session_mode")

    @property
    @pulumi.getter(name="syntaxFormat")
    def syntax_format(self) -> str:
        """
        The syntax of the connection string. 
         Possible values:
         SYNTAX_FORMAT_UNSPECIFIED
        LONG
        EZCONNECT
        EZCONNECTPLUS
        """
        return pulumi.get(self, "syntax_format")

    @property
    @pulumi.getter(name="tlsAuthentication")
    def tls_authentication(self) -> str:
        """
        This field indicates the TLS authentication type of the connection. 
         Possible values:
         TLS_AUTHENTICATION_UNSPECIFIED
        SERVER
        MUTUAL
        """
        return pulumi.get(self, "tls_authentication")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of the connection string.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetAutonomousDatabasePropertyConnectionUrlResult(dict):
    def __init__(__self__, *,
                 apex_uri: str,
                 database_transforms_uri: str,
                 graph_studio_uri: str,
                 machine_learning_notebook_uri: str,
                 machine_learning_user_management_uri: str,
                 mongo_db_uri: str,
                 ords_uri: str,
                 sql_dev_web_uri: str):
        """
        :param str apex_uri: Oracle Application Express (APEX) URL.
        :param str database_transforms_uri: The URL of the Database Transforms for the Autonomous Database.
        :param str graph_studio_uri: The URL of the Graph Studio for the Autonomous Database.
        :param str machine_learning_notebook_uri: The URL of the Oracle Machine Learning (OML) Notebook for the Autonomous
               Database.
        :param str machine_learning_user_management_uri: The URL of Machine Learning user management the Autonomous Database.
        :param str mongo_db_uri: The URL of the MongoDB API for the Autonomous Database.
        :param str ords_uri: The Oracle REST Data Services (ORDS) URL of the Web Access for the
               Autonomous Database.
        :param str sql_dev_web_uri: The URL of the Oracle SQL Developer Web for the Autonomous Database.
        """
        pulumi.set(__self__, "apex_uri", apex_uri)
        pulumi.set(__self__, "database_transforms_uri", database_transforms_uri)
        pulumi.set(__self__, "graph_studio_uri", graph_studio_uri)
        pulumi.set(__self__, "machine_learning_notebook_uri", machine_learning_notebook_uri)
        pulumi.set(__self__, "machine_learning_user_management_uri", machine_learning_user_management_uri)
        pulumi.set(__self__, "mongo_db_uri", mongo_db_uri)
        pulumi.set(__self__, "ords_uri", ords_uri)
        pulumi.set(__self__, "sql_dev_web_uri", sql_dev_web_uri)

    @property
    @pulumi.getter(name="apexUri")
    def apex_uri(self) -> str:
        """
        Oracle Application Express (APEX) URL.
        """
        return pulumi.get(self, "apex_uri")

    @property
    @pulumi.getter(name="databaseTransformsUri")
    def database_transforms_uri(self) -> str:
        """
        The URL of the Database Transforms for the Autonomous Database.
        """
        return pulumi.get(self, "database_transforms_uri")

    @property
    @pulumi.getter(name="graphStudioUri")
    def graph_studio_uri(self) -> str:
        """
        The URL of the Graph Studio for the Autonomous Database.
        """
        return pulumi.get(self, "graph_studio_uri")

    @property
    @pulumi.getter(name="machineLearningNotebookUri")
    def machine_learning_notebook_uri(self) -> str:
        """
        The URL of the Oracle Machine Learning (OML) Notebook for the Autonomous
        Database.
        """
        return pulumi.get(self, "machine_learning_notebook_uri")

    @property
    @pulumi.getter(name="machineLearningUserManagementUri")
    def machine_learning_user_management_uri(self) -> str:
        """
        The URL of Machine Learning user management the Autonomous Database.
        """
        return pulumi.get(self, "machine_learning_user_management_uri")

    @property
    @pulumi.getter(name="mongoDbUri")
    def mongo_db_uri(self) -> str:
        """
        The URL of the MongoDB API for the Autonomous Database.
        """
        return pulumi.get(self, "mongo_db_uri")

    @property
    @pulumi.getter(name="ordsUri")
    def ords_uri(self) -> str:
        """
        The Oracle REST Data Services (ORDS) URL of the Web Access for the
        Autonomous Database.
        """
        return pulumi.get(self, "ords_uri")

    @property
    @pulumi.getter(name="sqlDevWebUri")
    def sql_dev_web_uri(self) -> str:
        """
        The URL of the Oracle SQL Developer Web for the Autonomous Database.
        """
        return pulumi.get(self, "sql_dev_web_uri")


@pulumi.output_type
class GetAutonomousDatabasePropertyCustomerContactResult(dict):
    def __init__(__self__, *,
                 email: str):
        """
        :param str email: The email address used by Oracle to send notifications regarding databases
               and infrastructure.
        """
        pulumi.set(__self__, "email", email)

    @property
    @pulumi.getter
    def email(self) -> str:
        """
        The email address used by Oracle to send notifications regarding databases
        and infrastructure.
        """
        return pulumi.get(self, "email")


@pulumi.output_type
class GetAutonomousDatabasePropertyLocalStandbyDbResult(dict):
    def __init__(__self__, *,
                 data_guard_role_changed_time: str,
                 disaster_recovery_role_changed_time: str,
                 lag_time_duration: str,
                 lifecycle_details: str,
                 state: str):
        """
        :param str data_guard_role_changed_time: The date and time the Autonomous Data Guard role was switched for the
               standby Autonomous Database.
        :param str disaster_recovery_role_changed_time: The date and time the Disaster Recovery role was switched for the standby
               Autonomous Database.
        :param str lag_time_duration: The amount of time, in seconds, that the data of the standby database lags
               in comparison to the data of the primary database.
        :param str lifecycle_details: The additional details about the current lifecycle state of the
               Autonomous Database.
        :param str state: Possible values:
                STATE_UNSPECIFIED
               PROVISIONING
               AVAILABLE
               STOPPING
               STOPPED
               STARTING
               TERMINATING
               TERMINATED
               UNAVAILABLE
               RESTORE_IN_PROGRESS
               RESTORE_FAILED
               BACKUP_IN_PROGRESS
               SCALE_IN_PROGRESS
               AVAILABLE_NEEDS_ATTENTION
               UPDATING
               MAINTENANCE_IN_PROGRESS
               RESTARTING
               RECREATING
               ROLE_CHANGE_IN_PROGRESS
               UPGRADING
               INACCESSIBLE
               STANDBY
        """
        pulumi.set(__self__, "data_guard_role_changed_time", data_guard_role_changed_time)
        pulumi.set(__self__, "disaster_recovery_role_changed_time", disaster_recovery_role_changed_time)
        pulumi.set(__self__, "lag_time_duration", lag_time_duration)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="dataGuardRoleChangedTime")
    def data_guard_role_changed_time(self) -> str:
        """
        The date and time the Autonomous Data Guard role was switched for the
        standby Autonomous Database.
        """
        return pulumi.get(self, "data_guard_role_changed_time")

    @property
    @pulumi.getter(name="disasterRecoveryRoleChangedTime")
    def disaster_recovery_role_changed_time(self) -> str:
        """
        The date and time the Disaster Recovery role was switched for the standby
        Autonomous Database.
        """
        return pulumi.get(self, "disaster_recovery_role_changed_time")

    @property
    @pulumi.getter(name="lagTimeDuration")
    def lag_time_duration(self) -> str:
        """
        The amount of time, in seconds, that the data of the standby database lags
        in comparison to the data of the primary database.
        """
        return pulumi.get(self, "lag_time_duration")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> str:
        """
        The additional details about the current lifecycle state of the
        Autonomous Database.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Possible values:
         STATE_UNSPECIFIED
        PROVISIONING
        AVAILABLE
        STOPPING
        STOPPED
        STARTING
        TERMINATING
        TERMINATED
        UNAVAILABLE
        RESTORE_IN_PROGRESS
        RESTORE_FAILED
        BACKUP_IN_PROGRESS
        SCALE_IN_PROGRESS
        AVAILABLE_NEEDS_ATTENTION
        UPDATING
        MAINTENANCE_IN_PROGRESS
        RESTARTING
        RECREATING
        ROLE_CHANGE_IN_PROGRESS
        UPGRADING
        INACCESSIBLE
        STANDBY
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class GetAutonomousDatabasePropertyScheduledOperationDetailResult(dict):
    def __init__(__self__, *,
                 day_of_week: str,
                 start_times: Sequence['outputs.GetAutonomousDatabasePropertyScheduledOperationDetailStartTimeResult'],
                 stop_times: Sequence['outputs.GetAutonomousDatabasePropertyScheduledOperationDetailStopTimeResult']):
        """
        :param str day_of_week: Possible values:
                DAY_OF_WEEK_UNSPECIFIED
               MONDAY
               TUESDAY
               WEDNESDAY
               THURSDAY
               FRIDAY
               SATURDAY
               SUNDAY
        :param Sequence['GetAutonomousDatabasePropertyScheduledOperationDetailStartTimeArgs'] start_times: Represents a time of day. The date and time zone are either not significant
               or are specified elsewhere. An API may choose to allow leap seconds. Related
               types are google.type.Date and 'google.protobuf.Timestamp'.
        :param Sequence['GetAutonomousDatabasePropertyScheduledOperationDetailStopTimeArgs'] stop_times: Represents a time of day. The date and time zone are either not significant
               or are specified elsewhere. An API may choose to allow leap seconds. Related
               types are google.type.Date and 'google.protobuf.Timestamp'.
        """
        pulumi.set(__self__, "day_of_week", day_of_week)
        pulumi.set(__self__, "start_times", start_times)
        pulumi.set(__self__, "stop_times", stop_times)

    @property
    @pulumi.getter(name="dayOfWeek")
    def day_of_week(self) -> str:
        """
        Possible values:
         DAY_OF_WEEK_UNSPECIFIED
        MONDAY
        TUESDAY
        WEDNESDAY
        THURSDAY
        FRIDAY
        SATURDAY
        SUNDAY
        """
        return pulumi.get(self, "day_of_week")

    @property
    @pulumi.getter(name="startTimes")
    def start_times(self) -> Sequence['outputs.GetAutonomousDatabasePropertyScheduledOperationDetailStartTimeResult']:
        """
        Represents a time of day. The date and time zone are either not significant
        or are specified elsewhere. An API may choose to allow leap seconds. Related
        types are google.type.Date and 'google.protobuf.Timestamp'.
        """
        return pulumi.get(self, "start_times")

    @property
    @pulumi.getter(name="stopTimes")
    def stop_times(self) -> Sequence['outputs.GetAutonomousDatabasePropertyScheduledOperationDetailStopTimeResult']:
        """
        Represents a time of day. The date and time zone are either not significant
        or are specified elsewhere. An API may choose to allow leap seconds. Related
        types are google.type.Date and 'google.protobuf.Timestamp'.
        """
        return pulumi.get(self, "stop_times")


@pulumi.output_type
class GetAutonomousDatabasePropertyScheduledOperationDetailStartTimeResult(dict):
    def __init__(__self__, *,
                 hours: int,
                 minutes: int,
                 nanos: int,
                 seconds: int):
        """
        :param int hours: Hours of day in 24 hour format. Should be from 0 to 23. An API may choose
               to allow the value "24:00:00" for scenarios like business closing time.
        :param int minutes: Minutes of hour of day. Must be from 0 to 59.
        :param int nanos: Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
        :param int seconds: Seconds of minutes of the time. Must normally be from 0 to 59. An API may
               allow the value 60 if it allows leap-seconds.
        """
        pulumi.set(__self__, "hours", hours)
        pulumi.set(__self__, "minutes", minutes)
        pulumi.set(__self__, "nanos", nanos)
        pulumi.set(__self__, "seconds", seconds)

    @property
    @pulumi.getter
    def hours(self) -> int:
        """
        Hours of day in 24 hour format. Should be from 0 to 23. An API may choose
        to allow the value "24:00:00" for scenarios like business closing time.
        """
        return pulumi.get(self, "hours")

    @property
    @pulumi.getter
    def minutes(self) -> int:
        """
        Minutes of hour of day. Must be from 0 to 59.
        """
        return pulumi.get(self, "minutes")

    @property
    @pulumi.getter
    def nanos(self) -> int:
        """
        Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
        """
        return pulumi.get(self, "nanos")

    @property
    @pulumi.getter
    def seconds(self) -> int:
        """
        Seconds of minutes of the time. Must normally be from 0 to 59. An API may
        allow the value 60 if it allows leap-seconds.
        """
        return pulumi.get(self, "seconds")


@pulumi.output_type
class GetAutonomousDatabasePropertyScheduledOperationDetailStopTimeResult(dict):
    def __init__(__self__, *,
                 hours: int,
                 minutes: int,
                 nanos: int,
                 seconds: int):
        """
        :param int hours: Hours of day in 24 hour format. Should be from 0 to 23. An API may choose
               to allow the value "24:00:00" for scenarios like business closing time.
        :param int minutes: Minutes of hour of day. Must be from 0 to 59.
        :param int nanos: Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
        :param int seconds: Seconds of minutes of the time. Must normally be from 0 to 59. An API may
               allow the value 60 if it allows leap-seconds.
        """
        pulumi.set(__self__, "hours", hours)
        pulumi.set(__self__, "minutes", minutes)
        pulumi.set(__self__, "nanos", nanos)
        pulumi.set(__self__, "seconds", seconds)

    @property
    @pulumi.getter
    def hours(self) -> int:
        """
        Hours of day in 24 hour format. Should be from 0 to 23. An API may choose
        to allow the value "24:00:00" for scenarios like business closing time.
        """
        return pulumi.get(self, "hours")

    @property
    @pulumi.getter
    def minutes(self) -> int:
        """
        Minutes of hour of day. Must be from 0 to 59.
        """
        return pulumi.get(self, "minutes")

    @property
    @pulumi.getter
    def nanos(self) -> int:
        """
        Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
        """
        return pulumi.get(self, "nanos")

    @property
    @pulumi.getter
    def seconds(self) -> int:
        """
        Seconds of minutes of the time. Must normally be from 0 to 59. An API may
        allow the value 60 if it allows leap-seconds.
        """
        return pulumi.get(self, "seconds")


@pulumi.output_type
class GetAutonomousDatabasesAutonomousDatabaseResult(dict):
    def __init__(__self__, *,
                 admin_password: str,
                 autonomous_database_id: str,
                 cidr: str,
                 create_time: str,
                 database: str,
                 display_name: str,
                 effective_labels: Mapping[str, str],
                 entitlement_id: str,
                 labels: Mapping[str, str],
                 location: str,
                 name: str,
                 network: str,
                 project: str,
                 properties: Sequence['outputs.GetAutonomousDatabasesAutonomousDatabasePropertyResult'],
                 pulumi_labels: Mapping[str, str]):
        """
        :param str admin_password: The password for the default ADMIN user.
        :param str autonomous_database_id: The ID of the Autonomous Database to create. This value is restricted
               to (^a-z?$) and must be a maximum of 63
               characters in length. The value must start with a letter and end with
               a letter or a number.
        :param str cidr: The subnet CIDR range for the Autonmous Database.
        :param str create_time: The date and time that the Autonomous Database was created.
        :param str database: The name of the Autonomous Database. The database name must be unique in
               the project. The name must begin with a letter and can
               contain a maximum of 30 alphanumeric characters.
        :param str display_name: The display name for the Autonomous Database. The name does not have to
               be unique within your project.
        :param str entitlement_id: The ID of the subscription entitlement associated with the Autonomous
               Database.
        :param Mapping[str, str] labels: The labels or tags associated with the Autonomous Database. 
               
               **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
               Please refer to the field 'effective_labels' for all of the labels present on the resource.
        :param str location: The location of the resource.
               
               - - -
        :param str name: Identifier. The name of the Autonomous Database resource in the following format:
               projects/{project}/locations/{region}/autonomousDatabases/{autonomous_database}
        :param str network: The name of the VPC network used by the Autonomous Database.
               Format: projects/{project}/global/networks/{network}
        :param str project: The project to which the resource belongs. If it
               is not provided, the provider project is used.
        :param Sequence['GetAutonomousDatabasesAutonomousDatabasePropertyArgs'] properties: The properties of an Autonomous Database.
        :param Mapping[str, str] pulumi_labels: The combination of labels configured directly on the resource
                and default labels configured on the provider.
        """
        pulumi.set(__self__, "admin_password", admin_password)
        pulumi.set(__self__, "autonomous_database_id", autonomous_database_id)
        pulumi.set(__self__, "cidr", cidr)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "effective_labels", effective_labels)
        pulumi.set(__self__, "entitlement_id", entitlement_id)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "network", network)
        pulumi.set(__self__, "project", project)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "pulumi_labels", pulumi_labels)

    @property
    @pulumi.getter(name="adminPassword")
    def admin_password(self) -> str:
        """
        The password for the default ADMIN user.
        """
        return pulumi.get(self, "admin_password")

    @property
    @pulumi.getter(name="autonomousDatabaseId")
    def autonomous_database_id(self) -> str:
        """
        The ID of the Autonomous Database to create. This value is restricted
        to (^a-z?$) and must be a maximum of 63
        characters in length. The value must start with a letter and end with
        a letter or a number.
        """
        return pulumi.get(self, "autonomous_database_id")

    @property
    @pulumi.getter
    def cidr(self) -> str:
        """
        The subnet CIDR range for the Autonmous Database.
        """
        return pulumi.get(self, "cidr")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The date and time that the Autonomous Database was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def database(self) -> str:
        """
        The name of the Autonomous Database. The database name must be unique in
        the project. The name must begin with a letter and can
        contain a maximum of 30 alphanumeric characters.
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The display name for the Autonomous Database. The name does not have to
        be unique within your project.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="effectiveLabels")
    def effective_labels(self) -> Mapping[str, str]:
        return pulumi.get(self, "effective_labels")

    @property
    @pulumi.getter(name="entitlementId")
    def entitlement_id(self) -> str:
        """
        The ID of the subscription entitlement associated with the Autonomous
        Database.
        """
        return pulumi.get(self, "entitlement_id")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        """
        The labels or tags associated with the Autonomous Database. 

        **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        Please refer to the field 'effective_labels' for all of the labels present on the resource.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The location of the resource.

        - - -
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Identifier. The name of the Autonomous Database resource in the following format:
        projects/{project}/locations/{region}/autonomousDatabases/{autonomous_database}
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def network(self) -> str:
        """
        The name of the VPC network used by the Autonomous Database.
        Format: projects/{project}/global/networks/{network}
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter
    def project(self) -> str:
        """
        The project to which the resource belongs. If it
        is not provided, the provider project is used.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def properties(self) -> Sequence['outputs.GetAutonomousDatabasesAutonomousDatabasePropertyResult']:
        """
        The properties of an Autonomous Database.
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="pulumiLabels")
    def pulumi_labels(self) -> Mapping[str, str]:
        """
        The combination of labels configured directly on the resource
         and default labels configured on the provider.
        """
        return pulumi.get(self, "pulumi_labels")


@pulumi.output_type
class GetAutonomousDatabasesAutonomousDatabasePropertyResult(dict):
    def __init__(__self__, *,
                 actual_used_data_storage_size_tb: float,
                 allocated_storage_size_tb: float,
                 apex_details: Sequence['outputs.GetAutonomousDatabasesAutonomousDatabasePropertyApexDetailResult'],
                 are_primary_allowlisted_ips_used: bool,
                 autonomous_container_database_id: str,
                 available_upgrade_versions: Sequence[str],
                 backup_retention_period_days: int,
                 character_set: str,
                 compute_count: float,
                 connection_strings: Sequence['outputs.GetAutonomousDatabasesAutonomousDatabasePropertyConnectionStringResult'],
                 connection_urls: Sequence['outputs.GetAutonomousDatabasesAutonomousDatabasePropertyConnectionUrlResult'],
                 customer_contacts: Sequence['outputs.GetAutonomousDatabasesAutonomousDatabasePropertyCustomerContactResult'],
                 data_safe_state: str,
                 data_storage_size_gb: int,
                 data_storage_size_tb: int,
                 database_management_state: str,
                 db_edition: str,
                 db_version: str,
                 db_workload: str,
                 failed_data_recovery_duration: str,
                 is_auto_scaling_enabled: bool,
                 is_local_data_guard_enabled: bool,
                 is_storage_auto_scaling_enabled: bool,
                 license_type: str,
                 lifecycle_details: str,
                 local_adg_auto_failover_max_data_loss_limit: int,
                 local_disaster_recovery_type: str,
                 local_standby_dbs: Sequence['outputs.GetAutonomousDatabasesAutonomousDatabasePropertyLocalStandbyDbResult'],
                 maintenance_begin_time: str,
                 maintenance_end_time: str,
                 maintenance_schedule_type: str,
                 memory_per_oracle_compute_unit_gbs: int,
                 memory_table_gbs: int,
                 mtls_connection_required: bool,
                 n_character_set: str,
                 next_long_term_backup_time: str,
                 oci_url: str,
                 ocid: str,
                 open_mode: str,
                 operations_insights_state: str,
                 peer_db_ids: Sequence[str],
                 permission_level: str,
                 private_endpoint: str,
                 private_endpoint_ip: str,
                 private_endpoint_label: str,
                 refreshable_mode: str,
                 refreshable_state: str,
                 role: str,
                 scheduled_operation_details: Sequence['outputs.GetAutonomousDatabasesAutonomousDatabasePropertyScheduledOperationDetailResult'],
                 sql_web_developer_url: str,
                 state: str,
                 supported_clone_regions: Sequence[str],
                 total_auto_backup_storage_size_gbs: float,
                 used_data_storage_size_tbs: int):
        """
        :param float actual_used_data_storage_size_tb: The amount of storage currently being used for user and system data, in
               terabytes.
        :param float allocated_storage_size_tb: The amount of storage currently allocated for the database tables and
               billed for, rounded up in terabytes.
        :param Sequence['GetAutonomousDatabasesAutonomousDatabasePropertyApexDetailArgs'] apex_details: Oracle APEX Application Development.
               https://docs.oracle.com/en-us/iaas/api/#/en/database/20160918/datatypes/AutonomousDatabaseApex
        :param bool are_primary_allowlisted_ips_used: This field indicates the status of Data Guard and Access control for the
               Autonomous Database. The field's value is null if Data Guard is disabled
               or Access Control is disabled. The field's value is TRUE if both Data Guard
               and Access Control are enabled, and the Autonomous Database is using
               primary IP access control list (ACL) for standby. The field's value is
               FALSE if both Data Guard and Access Control are enabled, and the Autonomous
               Database is using a different IP access control list (ACL) for standby
               compared to primary.
        :param str autonomous_container_database_id: The Autonomous Container Database OCID.
        :param Sequence[str] available_upgrade_versions: The list of available Oracle Database upgrade versions for an Autonomous
               Database.
        :param int backup_retention_period_days: The retention period for the Autonomous Database. This field is specified
               in days, can range from 1 day to 60 days, and has a default value of
               60 days.
        :param str character_set: The character set for the Autonomous Database. The default is AL32UTF8.
        :param float compute_count: The number of compute servers for the Autonomous Database.
        :param Sequence['GetAutonomousDatabasesAutonomousDatabasePropertyConnectionStringArgs'] connection_strings: The connection string used to connect to the Autonomous Database.
               https://docs.oracle.com/en-us/iaas/api/#/en/database/20160918/datatypes/AutonomousDatabaseConnectionStrings
        :param Sequence['GetAutonomousDatabasesAutonomousDatabasePropertyConnectionUrlArgs'] connection_urls: The URLs for accessing Oracle Application Express (APEX) and SQL Developer
               Web with a browser from a Compute instance.
               https://docs.oracle.com/en-us/iaas/api/#/en/database/20160918/datatypes/AutonomousDatabaseConnectionUrls
        :param Sequence['GetAutonomousDatabasesAutonomousDatabasePropertyCustomerContactArgs'] customer_contacts: The list of customer contacts.
        :param str data_safe_state: The current state of the Data Safe registration for the
               Autonomous Database. 
                Possible values:
                DATA_SAFE_STATE_UNSPECIFIED
               REGISTERING
               REGISTERED
               DEREGISTERING
               NOT_REGISTERED
               FAILED
        :param int data_storage_size_gb: The size of the data stored in the database, in gigabytes.
        :param int data_storage_size_tb: The size of the data stored in the database, in terabytes.
        :param str database_management_state: The current state of database management for the Autonomous Database. 
                Possible values:
                DATABASE_MANAGEMENT_STATE_UNSPECIFIED
               ENABLING
               ENABLED
               DISABLING
               NOT_ENABLED
               FAILED_ENABLING
               FAILED_DISABLING
        :param str db_edition: The edition of the Autonomous Databases. 
                Possible values:
                DATABASE_EDITION_UNSPECIFIED
               STANDARD_EDITION
               ENTERPRISE_EDITION
        :param str db_version: The Oracle Database version for the Autonomous Database.
        :param str db_workload: Possible values:
                DB_WORKLOAD_UNSPECIFIED
               OLTP
               DW
               AJD
               APEX
        :param str failed_data_recovery_duration: This field indicates the number of seconds of data loss during a Data
               Guard failover.
        :param bool is_auto_scaling_enabled: This field indicates if auto scaling is enabled for the Autonomous Database
               CPU core count.
        :param bool is_local_data_guard_enabled: This field indicates whether the Autonomous Database has local (in-region)
               Data Guard enabled.
        :param bool is_storage_auto_scaling_enabled: This field indicates if auto scaling is enabled for the Autonomous Database
               storage.
        :param str license_type: The license type used for the Autonomous Database. 
                Possible values:
                LICENSE_TYPE_UNSPECIFIED
               LICENSE_INCLUDED
               BRING_YOUR_OWN_LICENSE
        :param str lifecycle_details: The details of the current lifestyle state of the Autonomous Database.
        :param int local_adg_auto_failover_max_data_loss_limit: This field indicates the maximum data loss limit for an Autonomous
               Database, in seconds.
        :param str local_disaster_recovery_type: This field indicates the local disaster recovery (DR) type of an
               Autonomous Database. 
                Possible values:
                LOCAL_DISASTER_RECOVERY_TYPE_UNSPECIFIED
               ADG
               BACKUP_BASED
        :param Sequence['GetAutonomousDatabasesAutonomousDatabasePropertyLocalStandbyDbArgs'] local_standby_dbs: Autonomous Data Guard standby database details.
               https://docs.oracle.com/en-us/iaas/api/#/en/database/20160918/datatypes/AutonomousDatabaseStandbySummary
        :param str maintenance_begin_time: The date and time when maintenance will begin.
        :param str maintenance_end_time: The date and time when maintenance will end.
        :param str maintenance_schedule_type: The maintenance schedule of the Autonomous Database. 
                Possible values:
                MAINTENANCE_SCHEDULE_TYPE_UNSPECIFIED
               EARLY
               REGULAR
        :param int memory_per_oracle_compute_unit_gbs: The amount of memory enabled per ECPU, in gigabytes.
        :param int memory_table_gbs: The memory assigned to in-memory tables in an Autonomous Database.
        :param bool mtls_connection_required: This field specifies if the Autonomous Database requires mTLS connections.
        :param str n_character_set: The national character set for the Autonomous Database. The default is
               AL16UTF16.
        :param str next_long_term_backup_time: The long term backup schedule of the Autonomous Database.
        :param str oci_url: The Oracle Cloud Infrastructure link for the Autonomous Database.
        :param str ocid: OCID of the Autonomous Database.
               https://docs.oracle.com/en-us/iaas/Content/General/Concepts/identifiers.htm#Oracle
        :param str open_mode: This field indicates the current mode of the Autonomous Database. 
                Possible values:
                OPEN_MODE_UNSPECIFIED
               READ_ONLY
               READ_WRITE
        :param str operations_insights_state: Possible values:
                OPERATIONS_INSIGHTS_STATE_UNSPECIFIED
               ENABLING
               ENABLED
               DISABLING
               NOT_ENABLED
               FAILED_ENABLING
               FAILED_DISABLING
        :param Sequence[str] peer_db_ids: The list of OCIDs of standby databases located in Autonomous Data Guard
               remote regions that are associated with the source database.
        :param str permission_level: The permission level of the Autonomous Database. 
                Possible values:
                PERMISSION_LEVEL_UNSPECIFIED
               RESTRICTED
               UNRESTRICTED
        :param str private_endpoint: The private endpoint for the Autonomous Database.
        :param str private_endpoint_ip: The private endpoint IP address for the Autonomous Database.
        :param str private_endpoint_label: The private endpoint label for the Autonomous Database.
        :param str refreshable_mode: The refresh mode of the cloned Autonomous Database. 
                Possible values:
                REFRESHABLE_MODE_UNSPECIFIED
               AUTOMATIC
               MANUAL
        :param str refreshable_state: The refresh State of the clone. 
                Possible values:
                REFRESHABLE_STATE_UNSPECIFIED
               REFRESHING
               NOT_REFRESHING
        :param str role: The Data Guard role of the Autonomous Database. 
                Possible values:
                ROLE_UNSPECIFIED
               PRIMARY
               STANDBY
               DISABLED_STANDBY
               BACKUP_COPY
               SNAPSHOT_STANDBY
        :param Sequence['GetAutonomousDatabasesAutonomousDatabasePropertyScheduledOperationDetailArgs'] scheduled_operation_details: The list and details of the scheduled operations of the Autonomous
               Database.
        :param str sql_web_developer_url: The SQL Web Developer URL for the Autonomous Database.
        :param str state: Possible values:
                STATE_UNSPECIFIED
               PROVISIONING
               AVAILABLE
               STOPPING
               STOPPED
               STARTING
               TERMINATING
               TERMINATED
               UNAVAILABLE
               RESTORE_IN_PROGRESS
               RESTORE_FAILED
               BACKUP_IN_PROGRESS
               SCALE_IN_PROGRESS
               AVAILABLE_NEEDS_ATTENTION
               UPDATING
               MAINTENANCE_IN_PROGRESS
               RESTARTING
               RECREATING
               ROLE_CHANGE_IN_PROGRESS
               UPGRADING
               INACCESSIBLE
               STANDBY
        :param Sequence[str] supported_clone_regions: The list of available regions that can be used to create a clone for the
               Autonomous Database.
        :param float total_auto_backup_storage_size_gbs: The storage space used by automatic backups of Autonomous Database, in
               gigabytes.
        :param int used_data_storage_size_tbs: The storage space used by Autonomous Database, in gigabytes.
        """
        pulumi.set(__self__, "actual_used_data_storage_size_tb", actual_used_data_storage_size_tb)
        pulumi.set(__self__, "allocated_storage_size_tb", allocated_storage_size_tb)
        pulumi.set(__self__, "apex_details", apex_details)
        pulumi.set(__self__, "are_primary_allowlisted_ips_used", are_primary_allowlisted_ips_used)
        pulumi.set(__self__, "autonomous_container_database_id", autonomous_container_database_id)
        pulumi.set(__self__, "available_upgrade_versions", available_upgrade_versions)
        pulumi.set(__self__, "backup_retention_period_days", backup_retention_period_days)
        pulumi.set(__self__, "character_set", character_set)
        pulumi.set(__self__, "compute_count", compute_count)
        pulumi.set(__self__, "connection_strings", connection_strings)
        pulumi.set(__self__, "connection_urls", connection_urls)
        pulumi.set(__self__, "customer_contacts", customer_contacts)
        pulumi.set(__self__, "data_safe_state", data_safe_state)
        pulumi.set(__self__, "data_storage_size_gb", data_storage_size_gb)
        pulumi.set(__self__, "data_storage_size_tb", data_storage_size_tb)
        pulumi.set(__self__, "database_management_state", database_management_state)
        pulumi.set(__self__, "db_edition", db_edition)
        pulumi.set(__self__, "db_version", db_version)
        pulumi.set(__self__, "db_workload", db_workload)
        pulumi.set(__self__, "failed_data_recovery_duration", failed_data_recovery_duration)
        pulumi.set(__self__, "is_auto_scaling_enabled", is_auto_scaling_enabled)
        pulumi.set(__self__, "is_local_data_guard_enabled", is_local_data_guard_enabled)
        pulumi.set(__self__, "is_storage_auto_scaling_enabled", is_storage_auto_scaling_enabled)
        pulumi.set(__self__, "license_type", license_type)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "local_adg_auto_failover_max_data_loss_limit", local_adg_auto_failover_max_data_loss_limit)
        pulumi.set(__self__, "local_disaster_recovery_type", local_disaster_recovery_type)
        pulumi.set(__self__, "local_standby_dbs", local_standby_dbs)
        pulumi.set(__self__, "maintenance_begin_time", maintenance_begin_time)
        pulumi.set(__self__, "maintenance_end_time", maintenance_end_time)
        pulumi.set(__self__, "maintenance_schedule_type", maintenance_schedule_type)
        pulumi.set(__self__, "memory_per_oracle_compute_unit_gbs", memory_per_oracle_compute_unit_gbs)
        pulumi.set(__self__, "memory_table_gbs", memory_table_gbs)
        pulumi.set(__self__, "mtls_connection_required", mtls_connection_required)
        pulumi.set(__self__, "n_character_set", n_character_set)
        pulumi.set(__self__, "next_long_term_backup_time", next_long_term_backup_time)
        pulumi.set(__self__, "oci_url", oci_url)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "open_mode", open_mode)
        pulumi.set(__self__, "operations_insights_state", operations_insights_state)
        pulumi.set(__self__, "peer_db_ids", peer_db_ids)
        pulumi.set(__self__, "permission_level", permission_level)
        pulumi.set(__self__, "private_endpoint", private_endpoint)
        pulumi.set(__self__, "private_endpoint_ip", private_endpoint_ip)
        pulumi.set(__self__, "private_endpoint_label", private_endpoint_label)
        pulumi.set(__self__, "refreshable_mode", refreshable_mode)
        pulumi.set(__self__, "refreshable_state", refreshable_state)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "scheduled_operation_details", scheduled_operation_details)
        pulumi.set(__self__, "sql_web_developer_url", sql_web_developer_url)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "supported_clone_regions", supported_clone_regions)
        pulumi.set(__self__, "total_auto_backup_storage_size_gbs", total_auto_backup_storage_size_gbs)
        pulumi.set(__self__, "used_data_storage_size_tbs", used_data_storage_size_tbs)

    @property
    @pulumi.getter(name="actualUsedDataStorageSizeTb")
    def actual_used_data_storage_size_tb(self) -> float:
        """
        The amount of storage currently being used for user and system data, in
        terabytes.
        """
        return pulumi.get(self, "actual_used_data_storage_size_tb")

    @property
    @pulumi.getter(name="allocatedStorageSizeTb")
    def allocated_storage_size_tb(self) -> float:
        """
        The amount of storage currently allocated for the database tables and
        billed for, rounded up in terabytes.
        """
        return pulumi.get(self, "allocated_storage_size_tb")

    @property
    @pulumi.getter(name="apexDetails")
    def apex_details(self) -> Sequence['outputs.GetAutonomousDatabasesAutonomousDatabasePropertyApexDetailResult']:
        """
        Oracle APEX Application Development.
        https://docs.oracle.com/en-us/iaas/api/#/en/database/20160918/datatypes/AutonomousDatabaseApex
        """
        return pulumi.get(self, "apex_details")

    @property
    @pulumi.getter(name="arePrimaryAllowlistedIpsUsed")
    def are_primary_allowlisted_ips_used(self) -> bool:
        """
        This field indicates the status of Data Guard and Access control for the
        Autonomous Database. The field's value is null if Data Guard is disabled
        or Access Control is disabled. The field's value is TRUE if both Data Guard
        and Access Control are enabled, and the Autonomous Database is using
        primary IP access control list (ACL) for standby. The field's value is
        FALSE if both Data Guard and Access Control are enabled, and the Autonomous
        Database is using a different IP access control list (ACL) for standby
        compared to primary.
        """
        return pulumi.get(self, "are_primary_allowlisted_ips_used")

    @property
    @pulumi.getter(name="autonomousContainerDatabaseId")
    def autonomous_container_database_id(self) -> str:
        """
        The Autonomous Container Database OCID.
        """
        return pulumi.get(self, "autonomous_container_database_id")

    @property
    @pulumi.getter(name="availableUpgradeVersions")
    def available_upgrade_versions(self) -> Sequence[str]:
        """
        The list of available Oracle Database upgrade versions for an Autonomous
        Database.
        """
        return pulumi.get(self, "available_upgrade_versions")

    @property
    @pulumi.getter(name="backupRetentionPeriodDays")
    def backup_retention_period_days(self) -> int:
        """
        The retention period for the Autonomous Database. This field is specified
        in days, can range from 1 day to 60 days, and has a default value of
        60 days.
        """
        return pulumi.get(self, "backup_retention_period_days")

    @property
    @pulumi.getter(name="characterSet")
    def character_set(self) -> str:
        """
        The character set for the Autonomous Database. The default is AL32UTF8.
        """
        return pulumi.get(self, "character_set")

    @property
    @pulumi.getter(name="computeCount")
    def compute_count(self) -> float:
        """
        The number of compute servers for the Autonomous Database.
        """
        return pulumi.get(self, "compute_count")

    @property
    @pulumi.getter(name="connectionStrings")
    def connection_strings(self) -> Sequence['outputs.GetAutonomousDatabasesAutonomousDatabasePropertyConnectionStringResult']:
        """
        The connection string used to connect to the Autonomous Database.
        https://docs.oracle.com/en-us/iaas/api/#/en/database/20160918/datatypes/AutonomousDatabaseConnectionStrings
        """
        return pulumi.get(self, "connection_strings")

    @property
    @pulumi.getter(name="connectionUrls")
    def connection_urls(self) -> Sequence['outputs.GetAutonomousDatabasesAutonomousDatabasePropertyConnectionUrlResult']:
        """
        The URLs for accessing Oracle Application Express (APEX) and SQL Developer
        Web with a browser from a Compute instance.
        https://docs.oracle.com/en-us/iaas/api/#/en/database/20160918/datatypes/AutonomousDatabaseConnectionUrls
        """
        return pulumi.get(self, "connection_urls")

    @property
    @pulumi.getter(name="customerContacts")
    def customer_contacts(self) -> Sequence['outputs.GetAutonomousDatabasesAutonomousDatabasePropertyCustomerContactResult']:
        """
        The list of customer contacts.
        """
        return pulumi.get(self, "customer_contacts")

    @property
    @pulumi.getter(name="dataSafeState")
    def data_safe_state(self) -> str:
        """
        The current state of the Data Safe registration for the
        Autonomous Database. 
         Possible values:
         DATA_SAFE_STATE_UNSPECIFIED
        REGISTERING
        REGISTERED
        DEREGISTERING
        NOT_REGISTERED
        FAILED
        """
        return pulumi.get(self, "data_safe_state")

    @property
    @pulumi.getter(name="dataStorageSizeGb")
    def data_storage_size_gb(self) -> int:
        """
        The size of the data stored in the database, in gigabytes.
        """
        return pulumi.get(self, "data_storage_size_gb")

    @property
    @pulumi.getter(name="dataStorageSizeTb")
    def data_storage_size_tb(self) -> int:
        """
        The size of the data stored in the database, in terabytes.
        """
        return pulumi.get(self, "data_storage_size_tb")

    @property
    @pulumi.getter(name="databaseManagementState")
    def database_management_state(self) -> str:
        """
        The current state of database management for the Autonomous Database. 
         Possible values:
         DATABASE_MANAGEMENT_STATE_UNSPECIFIED
        ENABLING
        ENABLED
        DISABLING
        NOT_ENABLED
        FAILED_ENABLING
        FAILED_DISABLING
        """
        return pulumi.get(self, "database_management_state")

    @property
    @pulumi.getter(name="dbEdition")
    def db_edition(self) -> str:
        """
        The edition of the Autonomous Databases. 
         Possible values:
         DATABASE_EDITION_UNSPECIFIED
        STANDARD_EDITION
        ENTERPRISE_EDITION
        """
        return pulumi.get(self, "db_edition")

    @property
    @pulumi.getter(name="dbVersion")
    def db_version(self) -> str:
        """
        The Oracle Database version for the Autonomous Database.
        """
        return pulumi.get(self, "db_version")

    @property
    @pulumi.getter(name="dbWorkload")
    def db_workload(self) -> str:
        """
        Possible values:
         DB_WORKLOAD_UNSPECIFIED
        OLTP
        DW
        AJD
        APEX
        """
        return pulumi.get(self, "db_workload")

    @property
    @pulumi.getter(name="failedDataRecoveryDuration")
    def failed_data_recovery_duration(self) -> str:
        """
        This field indicates the number of seconds of data loss during a Data
        Guard failover.
        """
        return pulumi.get(self, "failed_data_recovery_duration")

    @property
    @pulumi.getter(name="isAutoScalingEnabled")
    def is_auto_scaling_enabled(self) -> bool:
        """
        This field indicates if auto scaling is enabled for the Autonomous Database
        CPU core count.
        """
        return pulumi.get(self, "is_auto_scaling_enabled")

    @property
    @pulumi.getter(name="isLocalDataGuardEnabled")
    def is_local_data_guard_enabled(self) -> bool:
        """
        This field indicates whether the Autonomous Database has local (in-region)
        Data Guard enabled.
        """
        return pulumi.get(self, "is_local_data_guard_enabled")

    @property
    @pulumi.getter(name="isStorageAutoScalingEnabled")
    def is_storage_auto_scaling_enabled(self) -> bool:
        """
        This field indicates if auto scaling is enabled for the Autonomous Database
        storage.
        """
        return pulumi.get(self, "is_storage_auto_scaling_enabled")

    @property
    @pulumi.getter(name="licenseType")
    def license_type(self) -> str:
        """
        The license type used for the Autonomous Database. 
         Possible values:
         LICENSE_TYPE_UNSPECIFIED
        LICENSE_INCLUDED
        BRING_YOUR_OWN_LICENSE
        """
        return pulumi.get(self, "license_type")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> str:
        """
        The details of the current lifestyle state of the Autonomous Database.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="localAdgAutoFailoverMaxDataLossLimit")
    def local_adg_auto_failover_max_data_loss_limit(self) -> int:
        """
        This field indicates the maximum data loss limit for an Autonomous
        Database, in seconds.
        """
        return pulumi.get(self, "local_adg_auto_failover_max_data_loss_limit")

    @property
    @pulumi.getter(name="localDisasterRecoveryType")
    def local_disaster_recovery_type(self) -> str:
        """
        This field indicates the local disaster recovery (DR) type of an
        Autonomous Database. 
         Possible values:
         LOCAL_DISASTER_RECOVERY_TYPE_UNSPECIFIED
        ADG
        BACKUP_BASED
        """
        return pulumi.get(self, "local_disaster_recovery_type")

    @property
    @pulumi.getter(name="localStandbyDbs")
    def local_standby_dbs(self) -> Sequence['outputs.GetAutonomousDatabasesAutonomousDatabasePropertyLocalStandbyDbResult']:
        """
        Autonomous Data Guard standby database details.
        https://docs.oracle.com/en-us/iaas/api/#/en/database/20160918/datatypes/AutonomousDatabaseStandbySummary
        """
        return pulumi.get(self, "local_standby_dbs")

    @property
    @pulumi.getter(name="maintenanceBeginTime")
    def maintenance_begin_time(self) -> str:
        """
        The date and time when maintenance will begin.
        """
        return pulumi.get(self, "maintenance_begin_time")

    @property
    @pulumi.getter(name="maintenanceEndTime")
    def maintenance_end_time(self) -> str:
        """
        The date and time when maintenance will end.
        """
        return pulumi.get(self, "maintenance_end_time")

    @property
    @pulumi.getter(name="maintenanceScheduleType")
    def maintenance_schedule_type(self) -> str:
        """
        The maintenance schedule of the Autonomous Database. 
         Possible values:
         MAINTENANCE_SCHEDULE_TYPE_UNSPECIFIED
        EARLY
        REGULAR
        """
        return pulumi.get(self, "maintenance_schedule_type")

    @property
    @pulumi.getter(name="memoryPerOracleComputeUnitGbs")
    def memory_per_oracle_compute_unit_gbs(self) -> int:
        """
        The amount of memory enabled per ECPU, in gigabytes.
        """
        return pulumi.get(self, "memory_per_oracle_compute_unit_gbs")

    @property
    @pulumi.getter(name="memoryTableGbs")
    def memory_table_gbs(self) -> int:
        """
        The memory assigned to in-memory tables in an Autonomous Database.
        """
        return pulumi.get(self, "memory_table_gbs")

    @property
    @pulumi.getter(name="mtlsConnectionRequired")
    def mtls_connection_required(self) -> bool:
        """
        This field specifies if the Autonomous Database requires mTLS connections.
        """
        return pulumi.get(self, "mtls_connection_required")

    @property
    @pulumi.getter(name="nCharacterSet")
    def n_character_set(self) -> str:
        """
        The national character set for the Autonomous Database. The default is
        AL16UTF16.
        """
        return pulumi.get(self, "n_character_set")

    @property
    @pulumi.getter(name="nextLongTermBackupTime")
    def next_long_term_backup_time(self) -> str:
        """
        The long term backup schedule of the Autonomous Database.
        """
        return pulumi.get(self, "next_long_term_backup_time")

    @property
    @pulumi.getter(name="ociUrl")
    def oci_url(self) -> str:
        """
        The Oracle Cloud Infrastructure link for the Autonomous Database.
        """
        return pulumi.get(self, "oci_url")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        OCID of the Autonomous Database.
        https://docs.oracle.com/en-us/iaas/Content/General/Concepts/identifiers.htm#Oracle
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter(name="openMode")
    def open_mode(self) -> str:
        """
        This field indicates the current mode of the Autonomous Database. 
         Possible values:
         OPEN_MODE_UNSPECIFIED
        READ_ONLY
        READ_WRITE
        """
        return pulumi.get(self, "open_mode")

    @property
    @pulumi.getter(name="operationsInsightsState")
    def operations_insights_state(self) -> str:
        """
        Possible values:
         OPERATIONS_INSIGHTS_STATE_UNSPECIFIED
        ENABLING
        ENABLED
        DISABLING
        NOT_ENABLED
        FAILED_ENABLING
        FAILED_DISABLING
        """
        return pulumi.get(self, "operations_insights_state")

    @property
    @pulumi.getter(name="peerDbIds")
    def peer_db_ids(self) -> Sequence[str]:
        """
        The list of OCIDs of standby databases located in Autonomous Data Guard
        remote regions that are associated with the source database.
        """
        return pulumi.get(self, "peer_db_ids")

    @property
    @pulumi.getter(name="permissionLevel")
    def permission_level(self) -> str:
        """
        The permission level of the Autonomous Database. 
         Possible values:
         PERMISSION_LEVEL_UNSPECIFIED
        RESTRICTED
        UNRESTRICTED
        """
        return pulumi.get(self, "permission_level")

    @property
    @pulumi.getter(name="privateEndpoint")
    def private_endpoint(self) -> str:
        """
        The private endpoint for the Autonomous Database.
        """
        return pulumi.get(self, "private_endpoint")

    @property
    @pulumi.getter(name="privateEndpointIp")
    def private_endpoint_ip(self) -> str:
        """
        The private endpoint IP address for the Autonomous Database.
        """
        return pulumi.get(self, "private_endpoint_ip")

    @property
    @pulumi.getter(name="privateEndpointLabel")
    def private_endpoint_label(self) -> str:
        """
        The private endpoint label for the Autonomous Database.
        """
        return pulumi.get(self, "private_endpoint_label")

    @property
    @pulumi.getter(name="refreshableMode")
    def refreshable_mode(self) -> str:
        """
        The refresh mode of the cloned Autonomous Database. 
         Possible values:
         REFRESHABLE_MODE_UNSPECIFIED
        AUTOMATIC
        MANUAL
        """
        return pulumi.get(self, "refreshable_mode")

    @property
    @pulumi.getter(name="refreshableState")
    def refreshable_state(self) -> str:
        """
        The refresh State of the clone. 
         Possible values:
         REFRESHABLE_STATE_UNSPECIFIED
        REFRESHING
        NOT_REFRESHING
        """
        return pulumi.get(self, "refreshable_state")

    @property
    @pulumi.getter
    def role(self) -> str:
        """
        The Data Guard role of the Autonomous Database. 
         Possible values:
         ROLE_UNSPECIFIED
        PRIMARY
        STANDBY
        DISABLED_STANDBY
        BACKUP_COPY
        SNAPSHOT_STANDBY
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="scheduledOperationDetails")
    def scheduled_operation_details(self) -> Sequence['outputs.GetAutonomousDatabasesAutonomousDatabasePropertyScheduledOperationDetailResult']:
        """
        The list and details of the scheduled operations of the Autonomous
        Database.
        """
        return pulumi.get(self, "scheduled_operation_details")

    @property
    @pulumi.getter(name="sqlWebDeveloperUrl")
    def sql_web_developer_url(self) -> str:
        """
        The SQL Web Developer URL for the Autonomous Database.
        """
        return pulumi.get(self, "sql_web_developer_url")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Possible values:
         STATE_UNSPECIFIED
        PROVISIONING
        AVAILABLE
        STOPPING
        STOPPED
        STARTING
        TERMINATING
        TERMINATED
        UNAVAILABLE
        RESTORE_IN_PROGRESS
        RESTORE_FAILED
        BACKUP_IN_PROGRESS
        SCALE_IN_PROGRESS
        AVAILABLE_NEEDS_ATTENTION
        UPDATING
        MAINTENANCE_IN_PROGRESS
        RESTARTING
        RECREATING
        ROLE_CHANGE_IN_PROGRESS
        UPGRADING
        INACCESSIBLE
        STANDBY
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="supportedCloneRegions")
    def supported_clone_regions(self) -> Sequence[str]:
        """
        The list of available regions that can be used to create a clone for the
        Autonomous Database.
        """
        return pulumi.get(self, "supported_clone_regions")

    @property
    @pulumi.getter(name="totalAutoBackupStorageSizeGbs")
    def total_auto_backup_storage_size_gbs(self) -> float:
        """
        The storage space used by automatic backups of Autonomous Database, in
        gigabytes.
        """
        return pulumi.get(self, "total_auto_backup_storage_size_gbs")

    @property
    @pulumi.getter(name="usedDataStorageSizeTbs")
    def used_data_storage_size_tbs(self) -> int:
        """
        The storage space used by Autonomous Database, in gigabytes.
        """
        return pulumi.get(self, "used_data_storage_size_tbs")


@pulumi.output_type
class GetAutonomousDatabasesAutonomousDatabasePropertyApexDetailResult(dict):
    def __init__(__self__, *,
                 apex_version: str,
                 ords_version: str):
        """
        :param str apex_version: The Oracle APEX Application Development version.
        :param str ords_version: The Oracle REST Data Services (ORDS) version.
        """
        pulumi.set(__self__, "apex_version", apex_version)
        pulumi.set(__self__, "ords_version", ords_version)

    @property
    @pulumi.getter(name="apexVersion")
    def apex_version(self) -> str:
        """
        The Oracle APEX Application Development version.
        """
        return pulumi.get(self, "apex_version")

    @property
    @pulumi.getter(name="ordsVersion")
    def ords_version(self) -> str:
        """
        The Oracle REST Data Services (ORDS) version.
        """
        return pulumi.get(self, "ords_version")


@pulumi.output_type
class GetAutonomousDatabasesAutonomousDatabasePropertyConnectionStringResult(dict):
    def __init__(__self__, *,
                 all_connection_strings: Sequence['outputs.GetAutonomousDatabasesAutonomousDatabasePropertyConnectionStringAllConnectionStringResult'],
                 dedicated: str,
                 high: str,
                 low: str,
                 medium: str,
                 profiles: Sequence['outputs.GetAutonomousDatabasesAutonomousDatabasePropertyConnectionStringProfileResult']):
        """
        :param Sequence['GetAutonomousDatabasesAutonomousDatabasePropertyConnectionStringAllConnectionStringArgs'] all_connection_strings: A list of all connection strings that can be used to connect to the
               Autonomous Database.
        :param str dedicated: The database service provides the least level of resources to each SQL
               statement, but supports the most number of concurrent SQL statements.
        :param str high: The database service provides the highest level of resources to each SQL
               statement.
        :param str low: The database service provides the least level of resources to each SQL
               statement.
        :param str medium: The database service provides a lower level of resources to each SQL
               statement.
        :param Sequence['GetAutonomousDatabasesAutonomousDatabasePropertyConnectionStringProfileArgs'] profiles: A list of connection string profiles to allow clients to group, filter, and
               select values based on the structured metadata.
        """
        pulumi.set(__self__, "all_connection_strings", all_connection_strings)
        pulumi.set(__self__, "dedicated", dedicated)
        pulumi.set(__self__, "high", high)
        pulumi.set(__self__, "low", low)
        pulumi.set(__self__, "medium", medium)
        pulumi.set(__self__, "profiles", profiles)

    @property
    @pulumi.getter(name="allConnectionStrings")
    def all_connection_strings(self) -> Sequence['outputs.GetAutonomousDatabasesAutonomousDatabasePropertyConnectionStringAllConnectionStringResult']:
        """
        A list of all connection strings that can be used to connect to the
        Autonomous Database.
        """
        return pulumi.get(self, "all_connection_strings")

    @property
    @pulumi.getter
    def dedicated(self) -> str:
        """
        The database service provides the least level of resources to each SQL
        statement, but supports the most number of concurrent SQL statements.
        """
        return pulumi.get(self, "dedicated")

    @property
    @pulumi.getter
    def high(self) -> str:
        """
        The database service provides the highest level of resources to each SQL
        statement.
        """
        return pulumi.get(self, "high")

    @property
    @pulumi.getter
    def low(self) -> str:
        """
        The database service provides the least level of resources to each SQL
        statement.
        """
        return pulumi.get(self, "low")

    @property
    @pulumi.getter
    def medium(self) -> str:
        """
        The database service provides a lower level of resources to each SQL
        statement.
        """
        return pulumi.get(self, "medium")

    @property
    @pulumi.getter
    def profiles(self) -> Sequence['outputs.GetAutonomousDatabasesAutonomousDatabasePropertyConnectionStringProfileResult']:
        """
        A list of connection string profiles to allow clients to group, filter, and
        select values based on the structured metadata.
        """
        return pulumi.get(self, "profiles")


@pulumi.output_type
class GetAutonomousDatabasesAutonomousDatabasePropertyConnectionStringAllConnectionStringResult(dict):
    def __init__(__self__, *,
                 high: str,
                 low: str,
                 medium: str):
        """
        :param str high: The database service provides the highest level of resources to each SQL
               statement.
        :param str low: The database service provides the least level of resources to each SQL
               statement.
        :param str medium: The database service provides a lower level of resources to each SQL
               statement.
        """
        pulumi.set(__self__, "high", high)
        pulumi.set(__self__, "low", low)
        pulumi.set(__self__, "medium", medium)

    @property
    @pulumi.getter
    def high(self) -> str:
        """
        The database service provides the highest level of resources to each SQL
        statement.
        """
        return pulumi.get(self, "high")

    @property
    @pulumi.getter
    def low(self) -> str:
        """
        The database service provides the least level of resources to each SQL
        statement.
        """
        return pulumi.get(self, "low")

    @property
    @pulumi.getter
    def medium(self) -> str:
        """
        The database service provides a lower level of resources to each SQL
        statement.
        """
        return pulumi.get(self, "medium")


@pulumi.output_type
class GetAutonomousDatabasesAutonomousDatabasePropertyConnectionStringProfileResult(dict):
    def __init__(__self__, *,
                 consumer_group: str,
                 display_name: str,
                 host_format: str,
                 is_regional: bool,
                 protocol: str,
                 session_mode: str,
                 syntax_format: str,
                 tls_authentication: str,
                 value: str):
        """
        :param str consumer_group: The current consumer group being used by the connection. 
                Possible values:
                CONSUMER_GROUP_UNSPECIFIED
               HIGH
               MEDIUM
               LOW
               TP
               TPURGENT
        :param str display_name: The display name for the database connection.
        :param str host_format: The host name format being currently used in connection string. 
                Possible values:
                HOST_FORMAT_UNSPECIFIED
               FQDN
               IP
        :param bool is_regional: This field indicates if the connection string is regional and is only
               applicable for cross-region Data Guard.
        :param str protocol: The protocol being used by the connection. 
                Possible values:
                PROTOCOL_UNSPECIFIED
               TCP
               TCPS
        :param str session_mode: The current session mode of the connection. 
                Possible values:
                SESSION_MODE_UNSPECIFIED
               DIRECT
               INDIRECT
        :param str syntax_format: The syntax of the connection string. 
                Possible values:
                SYNTAX_FORMAT_UNSPECIFIED
               LONG
               EZCONNECT
               EZCONNECTPLUS
        :param str tls_authentication: This field indicates the TLS authentication type of the connection. 
                Possible values:
                TLS_AUTHENTICATION_UNSPECIFIED
               SERVER
               MUTUAL
        :param str value: The value of the connection string.
        """
        pulumi.set(__self__, "consumer_group", consumer_group)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "host_format", host_format)
        pulumi.set(__self__, "is_regional", is_regional)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "session_mode", session_mode)
        pulumi.set(__self__, "syntax_format", syntax_format)
        pulumi.set(__self__, "tls_authentication", tls_authentication)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="consumerGroup")
    def consumer_group(self) -> str:
        """
        The current consumer group being used by the connection. 
         Possible values:
         CONSUMER_GROUP_UNSPECIFIED
        HIGH
        MEDIUM
        LOW
        TP
        TPURGENT
        """
        return pulumi.get(self, "consumer_group")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The display name for the database connection.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="hostFormat")
    def host_format(self) -> str:
        """
        The host name format being currently used in connection string. 
         Possible values:
         HOST_FORMAT_UNSPECIFIED
        FQDN
        IP
        """
        return pulumi.get(self, "host_format")

    @property
    @pulumi.getter(name="isRegional")
    def is_regional(self) -> bool:
        """
        This field indicates if the connection string is regional and is only
        applicable for cross-region Data Guard.
        """
        return pulumi.get(self, "is_regional")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        The protocol being used by the connection. 
         Possible values:
         PROTOCOL_UNSPECIFIED
        TCP
        TCPS
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="sessionMode")
    def session_mode(self) -> str:
        """
        The current session mode of the connection. 
         Possible values:
         SESSION_MODE_UNSPECIFIED
        DIRECT
        INDIRECT
        """
        return pulumi.get(self, "session_mode")

    @property
    @pulumi.getter(name="syntaxFormat")
    def syntax_format(self) -> str:
        """
        The syntax of the connection string. 
         Possible values:
         SYNTAX_FORMAT_UNSPECIFIED
        LONG
        EZCONNECT
        EZCONNECTPLUS
        """
        return pulumi.get(self, "syntax_format")

    @property
    @pulumi.getter(name="tlsAuthentication")
    def tls_authentication(self) -> str:
        """
        This field indicates the TLS authentication type of the connection. 
         Possible values:
         TLS_AUTHENTICATION_UNSPECIFIED
        SERVER
        MUTUAL
        """
        return pulumi.get(self, "tls_authentication")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of the connection string.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetAutonomousDatabasesAutonomousDatabasePropertyConnectionUrlResult(dict):
    def __init__(__self__, *,
                 apex_uri: str,
                 database_transforms_uri: str,
                 graph_studio_uri: str,
                 machine_learning_notebook_uri: str,
                 machine_learning_user_management_uri: str,
                 mongo_db_uri: str,
                 ords_uri: str,
                 sql_dev_web_uri: str):
        """
        :param str apex_uri: Oracle Application Express (APEX) URL.
        :param str database_transforms_uri: The URL of the Database Transforms for the Autonomous Database.
        :param str graph_studio_uri: The URL of the Graph Studio for the Autonomous Database.
        :param str machine_learning_notebook_uri: The URL of the Oracle Machine Learning (OML) Notebook for the Autonomous
               Database.
        :param str machine_learning_user_management_uri: The URL of Machine Learning user management the Autonomous Database.
        :param str mongo_db_uri: The URL of the MongoDB API for the Autonomous Database.
        :param str ords_uri: The Oracle REST Data Services (ORDS) URL of the Web Access for the
               Autonomous Database.
        :param str sql_dev_web_uri: The URL of the Oracle SQL Developer Web for the Autonomous Database.
        """
        pulumi.set(__self__, "apex_uri", apex_uri)
        pulumi.set(__self__, "database_transforms_uri", database_transforms_uri)
        pulumi.set(__self__, "graph_studio_uri", graph_studio_uri)
        pulumi.set(__self__, "machine_learning_notebook_uri", machine_learning_notebook_uri)
        pulumi.set(__self__, "machine_learning_user_management_uri", machine_learning_user_management_uri)
        pulumi.set(__self__, "mongo_db_uri", mongo_db_uri)
        pulumi.set(__self__, "ords_uri", ords_uri)
        pulumi.set(__self__, "sql_dev_web_uri", sql_dev_web_uri)

    @property
    @pulumi.getter(name="apexUri")
    def apex_uri(self) -> str:
        """
        Oracle Application Express (APEX) URL.
        """
        return pulumi.get(self, "apex_uri")

    @property
    @pulumi.getter(name="databaseTransformsUri")
    def database_transforms_uri(self) -> str:
        """
        The URL of the Database Transforms for the Autonomous Database.
        """
        return pulumi.get(self, "database_transforms_uri")

    @property
    @pulumi.getter(name="graphStudioUri")
    def graph_studio_uri(self) -> str:
        """
        The URL of the Graph Studio for the Autonomous Database.
        """
        return pulumi.get(self, "graph_studio_uri")

    @property
    @pulumi.getter(name="machineLearningNotebookUri")
    def machine_learning_notebook_uri(self) -> str:
        """
        The URL of the Oracle Machine Learning (OML) Notebook for the Autonomous
        Database.
        """
        return pulumi.get(self, "machine_learning_notebook_uri")

    @property
    @pulumi.getter(name="machineLearningUserManagementUri")
    def machine_learning_user_management_uri(self) -> str:
        """
        The URL of Machine Learning user management the Autonomous Database.
        """
        return pulumi.get(self, "machine_learning_user_management_uri")

    @property
    @pulumi.getter(name="mongoDbUri")
    def mongo_db_uri(self) -> str:
        """
        The URL of the MongoDB API for the Autonomous Database.
        """
        return pulumi.get(self, "mongo_db_uri")

    @property
    @pulumi.getter(name="ordsUri")
    def ords_uri(self) -> str:
        """
        The Oracle REST Data Services (ORDS) URL of the Web Access for the
        Autonomous Database.
        """
        return pulumi.get(self, "ords_uri")

    @property
    @pulumi.getter(name="sqlDevWebUri")
    def sql_dev_web_uri(self) -> str:
        """
        The URL of the Oracle SQL Developer Web for the Autonomous Database.
        """
        return pulumi.get(self, "sql_dev_web_uri")


@pulumi.output_type
class GetAutonomousDatabasesAutonomousDatabasePropertyCustomerContactResult(dict):
    def __init__(__self__, *,
                 email: str):
        """
        :param str email: The email address used by Oracle to send notifications regarding databases
               and infrastructure.
        """
        pulumi.set(__self__, "email", email)

    @property
    @pulumi.getter
    def email(self) -> str:
        """
        The email address used by Oracle to send notifications regarding databases
        and infrastructure.
        """
        return pulumi.get(self, "email")


@pulumi.output_type
class GetAutonomousDatabasesAutonomousDatabasePropertyLocalStandbyDbResult(dict):
    def __init__(__self__, *,
                 data_guard_role_changed_time: str,
                 disaster_recovery_role_changed_time: str,
                 lag_time_duration: str,
                 lifecycle_details: str,
                 state: str):
        """
        :param str data_guard_role_changed_time: The date and time the Autonomous Data Guard role was switched for the
               standby Autonomous Database.
        :param str disaster_recovery_role_changed_time: The date and time the Disaster Recovery role was switched for the standby
               Autonomous Database.
        :param str lag_time_duration: The amount of time, in seconds, that the data of the standby database lags
               in comparison to the data of the primary database.
        :param str lifecycle_details: The additional details about the current lifecycle state of the
               Autonomous Database.
        :param str state: Possible values:
                STATE_UNSPECIFIED
               PROVISIONING
               AVAILABLE
               STOPPING
               STOPPED
               STARTING
               TERMINATING
               TERMINATED
               UNAVAILABLE
               RESTORE_IN_PROGRESS
               RESTORE_FAILED
               BACKUP_IN_PROGRESS
               SCALE_IN_PROGRESS
               AVAILABLE_NEEDS_ATTENTION
               UPDATING
               MAINTENANCE_IN_PROGRESS
               RESTARTING
               RECREATING
               ROLE_CHANGE_IN_PROGRESS
               UPGRADING
               INACCESSIBLE
               STANDBY
        """
        pulumi.set(__self__, "data_guard_role_changed_time", data_guard_role_changed_time)
        pulumi.set(__self__, "disaster_recovery_role_changed_time", disaster_recovery_role_changed_time)
        pulumi.set(__self__, "lag_time_duration", lag_time_duration)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="dataGuardRoleChangedTime")
    def data_guard_role_changed_time(self) -> str:
        """
        The date and time the Autonomous Data Guard role was switched for the
        standby Autonomous Database.
        """
        return pulumi.get(self, "data_guard_role_changed_time")

    @property
    @pulumi.getter(name="disasterRecoveryRoleChangedTime")
    def disaster_recovery_role_changed_time(self) -> str:
        """
        The date and time the Disaster Recovery role was switched for the standby
        Autonomous Database.
        """
        return pulumi.get(self, "disaster_recovery_role_changed_time")

    @property
    @pulumi.getter(name="lagTimeDuration")
    def lag_time_duration(self) -> str:
        """
        The amount of time, in seconds, that the data of the standby database lags
        in comparison to the data of the primary database.
        """
        return pulumi.get(self, "lag_time_duration")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> str:
        """
        The additional details about the current lifecycle state of the
        Autonomous Database.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Possible values:
         STATE_UNSPECIFIED
        PROVISIONING
        AVAILABLE
        STOPPING
        STOPPED
        STARTING
        TERMINATING
        TERMINATED
        UNAVAILABLE
        RESTORE_IN_PROGRESS
        RESTORE_FAILED
        BACKUP_IN_PROGRESS
        SCALE_IN_PROGRESS
        AVAILABLE_NEEDS_ATTENTION
        UPDATING
        MAINTENANCE_IN_PROGRESS
        RESTARTING
        RECREATING
        ROLE_CHANGE_IN_PROGRESS
        UPGRADING
        INACCESSIBLE
        STANDBY
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class GetAutonomousDatabasesAutonomousDatabasePropertyScheduledOperationDetailResult(dict):
    def __init__(__self__, *,
                 day_of_week: str,
                 start_times: Sequence['outputs.GetAutonomousDatabasesAutonomousDatabasePropertyScheduledOperationDetailStartTimeResult'],
                 stop_times: Sequence['outputs.GetAutonomousDatabasesAutonomousDatabasePropertyScheduledOperationDetailStopTimeResult']):
        """
        :param str day_of_week: Possible values:
                DAY_OF_WEEK_UNSPECIFIED
               MONDAY
               TUESDAY
               WEDNESDAY
               THURSDAY
               FRIDAY
               SATURDAY
               SUNDAY
        :param Sequence['GetAutonomousDatabasesAutonomousDatabasePropertyScheduledOperationDetailStartTimeArgs'] start_times: Represents a time of day. The date and time zone are either not significant
               or are specified elsewhere. An API may choose to allow leap seconds. Related
               types are google.type.Date and 'google.protobuf.Timestamp'.
        :param Sequence['GetAutonomousDatabasesAutonomousDatabasePropertyScheduledOperationDetailStopTimeArgs'] stop_times: Represents a time of day. The date and time zone are either not significant
               or are specified elsewhere. An API may choose to allow leap seconds. Related
               types are google.type.Date and 'google.protobuf.Timestamp'.
        """
        pulumi.set(__self__, "day_of_week", day_of_week)
        pulumi.set(__self__, "start_times", start_times)
        pulumi.set(__self__, "stop_times", stop_times)

    @property
    @pulumi.getter(name="dayOfWeek")
    def day_of_week(self) -> str:
        """
        Possible values:
         DAY_OF_WEEK_UNSPECIFIED
        MONDAY
        TUESDAY
        WEDNESDAY
        THURSDAY
        FRIDAY
        SATURDAY
        SUNDAY
        """
        return pulumi.get(self, "day_of_week")

    @property
    @pulumi.getter(name="startTimes")
    def start_times(self) -> Sequence['outputs.GetAutonomousDatabasesAutonomousDatabasePropertyScheduledOperationDetailStartTimeResult']:
        """
        Represents a time of day. The date and time zone are either not significant
        or are specified elsewhere. An API may choose to allow leap seconds. Related
        types are google.type.Date and 'google.protobuf.Timestamp'.
        """
        return pulumi.get(self, "start_times")

    @property
    @pulumi.getter(name="stopTimes")
    def stop_times(self) -> Sequence['outputs.GetAutonomousDatabasesAutonomousDatabasePropertyScheduledOperationDetailStopTimeResult']:
        """
        Represents a time of day. The date and time zone are either not significant
        or are specified elsewhere. An API may choose to allow leap seconds. Related
        types are google.type.Date and 'google.protobuf.Timestamp'.
        """
        return pulumi.get(self, "stop_times")


@pulumi.output_type
class GetAutonomousDatabasesAutonomousDatabasePropertyScheduledOperationDetailStartTimeResult(dict):
    def __init__(__self__, *,
                 hours: int,
                 minutes: int,
                 nanos: int,
                 seconds: int):
        """
        :param int hours: Hours of day in 24 hour format. Should be from 0 to 23. An API may choose
               to allow the value "24:00:00" for scenarios like business closing time.
        :param int minutes: Minutes of hour of day. Must be from 0 to 59.
        :param int nanos: Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
        :param int seconds: Seconds of minutes of the time. Must normally be from 0 to 59. An API may
               allow the value 60 if it allows leap-seconds.
        """
        pulumi.set(__self__, "hours", hours)
        pulumi.set(__self__, "minutes", minutes)
        pulumi.set(__self__, "nanos", nanos)
        pulumi.set(__self__, "seconds", seconds)

    @property
    @pulumi.getter
    def hours(self) -> int:
        """
        Hours of day in 24 hour format. Should be from 0 to 23. An API may choose
        to allow the value "24:00:00" for scenarios like business closing time.
        """
        return pulumi.get(self, "hours")

    @property
    @pulumi.getter
    def minutes(self) -> int:
        """
        Minutes of hour of day. Must be from 0 to 59.
        """
        return pulumi.get(self, "minutes")

    @property
    @pulumi.getter
    def nanos(self) -> int:
        """
        Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
        """
        return pulumi.get(self, "nanos")

    @property
    @pulumi.getter
    def seconds(self) -> int:
        """
        Seconds of minutes of the time. Must normally be from 0 to 59. An API may
        allow the value 60 if it allows leap-seconds.
        """
        return pulumi.get(self, "seconds")


@pulumi.output_type
class GetAutonomousDatabasesAutonomousDatabasePropertyScheduledOperationDetailStopTimeResult(dict):
    def __init__(__self__, *,
                 hours: int,
                 minutes: int,
                 nanos: int,
                 seconds: int):
        """
        :param int hours: Hours of day in 24 hour format. Should be from 0 to 23. An API may choose
               to allow the value "24:00:00" for scenarios like business closing time.
        :param int minutes: Minutes of hour of day. Must be from 0 to 59.
        :param int nanos: Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
        :param int seconds: Seconds of minutes of the time. Must normally be from 0 to 59. An API may
               allow the value 60 if it allows leap-seconds.
        """
        pulumi.set(__self__, "hours", hours)
        pulumi.set(__self__, "minutes", minutes)
        pulumi.set(__self__, "nanos", nanos)
        pulumi.set(__self__, "seconds", seconds)

    @property
    @pulumi.getter
    def hours(self) -> int:
        """
        Hours of day in 24 hour format. Should be from 0 to 23. An API may choose
        to allow the value "24:00:00" for scenarios like business closing time.
        """
        return pulumi.get(self, "hours")

    @property
    @pulumi.getter
    def minutes(self) -> int:
        """
        Minutes of hour of day. Must be from 0 to 59.
        """
        return pulumi.get(self, "minutes")

    @property
    @pulumi.getter
    def nanos(self) -> int:
        """
        Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
        """
        return pulumi.get(self, "nanos")

    @property
    @pulumi.getter
    def seconds(self) -> int:
        """
        Seconds of minutes of the time. Must normally be from 0 to 59. An API may
        allow the value 60 if it allows leap-seconds.
        """
        return pulumi.get(self, "seconds")


@pulumi.output_type
class GetCloudExadataInfrastructurePropertyResult(dict):
    def __init__(__self__, *,
                 activated_storage_count: int,
                 additional_storage_count: int,
                 available_storage_size_gb: int,
                 compute_count: int,
                 cpu_count: int,
                 customer_contacts: Sequence['outputs.GetCloudExadataInfrastructurePropertyCustomerContactResult'],
                 data_storage_size_tb: float,
                 db_node_storage_size_gb: int,
                 db_server_version: str,
                 maintenance_windows: Sequence['outputs.GetCloudExadataInfrastructurePropertyMaintenanceWindowResult'],
                 max_cpu_count: int,
                 max_data_storage_tb: float,
                 max_db_node_storage_size_gb: int,
                 max_memory_gb: int,
                 memory_size_gb: int,
                 monthly_db_server_version: str,
                 monthly_storage_server_version: str,
                 next_maintenance_run_id: str,
                 next_maintenance_run_time: str,
                 next_security_maintenance_run_time: str,
                 oci_url: str,
                 ocid: str,
                 shape: str,
                 state: str,
                 storage_count: int,
                 storage_server_version: str,
                 total_storage_size_gb: int):
        """
        :param int activated_storage_count: The requested number of additional storage servers activated for the
               Exadata Infrastructure.
        :param int additional_storage_count: The requested number of additional storage servers for the Exadata
               Infrastructure.
        :param int available_storage_size_gb: The available storage can be allocated to the Exadata Infrastructure
               resource, in gigabytes (GB).
        :param int compute_count: The number of compute servers for the Exadata Infrastructure.
        :param int cpu_count: The number of enabled CPU cores.
        :param Sequence['GetCloudExadataInfrastructurePropertyCustomerContactArgs'] customer_contacts: The list of customer contacts.
        :param float data_storage_size_tb: Size, in terabytes, of the DATA disk group.
        :param int db_node_storage_size_gb: The local node storage allocated in GBs.
        :param str db_server_version: The software version of the database servers (dom0) in the Exadata
               Infrastructure.
        :param Sequence['GetCloudExadataInfrastructurePropertyMaintenanceWindowArgs'] maintenance_windows: Maintenance window as defined by Oracle.
               https://docs.oracle.com/en-us/iaas/api/#/en/database/20160918/datatypes/MaintenanceWindow
        :param int max_cpu_count: The total number of CPU cores available.
        :param float max_data_storage_tb: The total available DATA disk group size.
        :param int max_db_node_storage_size_gb: The total local node storage available in GBs.
        :param int max_memory_gb: The total memory available in GBs.
        :param int memory_size_gb: The memory allocated in GBs.
        :param str monthly_db_server_version: The monthly software version of the database servers (dom0)
               in the Exadata Infrastructure. Example: 20.1.15
        :param str monthly_storage_server_version: The monthly software version of the storage servers (cells)
               in the Exadata Infrastructure. Example: 20.1.15
        :param str next_maintenance_run_id: The OCID of the next maintenance run.
        :param str next_maintenance_run_time: The time when the next maintenance run will occur.
        :param str next_security_maintenance_run_time: The time when the next security maintenance run will occur.
        :param str oci_url: Deep link to the OCI console to view this resource.
        :param str ocid: OCID of created infra.
               https://docs.oracle.com/en-us/iaas/Content/General/Concepts/identifiers.htm#Oracle
        :param str shape: The shape of the Exadata Infrastructure. The shape determines the
               amount of CPU, storage, and memory resources allocated to the instance.
        :param str state: The current lifecycle state of the Exadata Infrastructure. 
                Possible values:
                STATE_UNSPECIFIED
               PROVISIONING
               AVAILABLE
               UPDATING
               TERMINATING
               TERMINATED
               FAILED
               MAINTENANCE_IN_PROGRESS
        :param int storage_count: The number of Cloud Exadata storage servers for the Exadata Infrastructure.
        :param str storage_server_version: The software version of the storage servers (cells) in the Exadata
               Infrastructure.
        :param int total_storage_size_gb: The total storage allocated to the Exadata Infrastructure
               resource, in gigabytes (GB).
        """
        pulumi.set(__self__, "activated_storage_count", activated_storage_count)
        pulumi.set(__self__, "additional_storage_count", additional_storage_count)
        pulumi.set(__self__, "available_storage_size_gb", available_storage_size_gb)
        pulumi.set(__self__, "compute_count", compute_count)
        pulumi.set(__self__, "cpu_count", cpu_count)
        pulumi.set(__self__, "customer_contacts", customer_contacts)
        pulumi.set(__self__, "data_storage_size_tb", data_storage_size_tb)
        pulumi.set(__self__, "db_node_storage_size_gb", db_node_storage_size_gb)
        pulumi.set(__self__, "db_server_version", db_server_version)
        pulumi.set(__self__, "maintenance_windows", maintenance_windows)
        pulumi.set(__self__, "max_cpu_count", max_cpu_count)
        pulumi.set(__self__, "max_data_storage_tb", max_data_storage_tb)
        pulumi.set(__self__, "max_db_node_storage_size_gb", max_db_node_storage_size_gb)
        pulumi.set(__self__, "max_memory_gb", max_memory_gb)
        pulumi.set(__self__, "memory_size_gb", memory_size_gb)
        pulumi.set(__self__, "monthly_db_server_version", monthly_db_server_version)
        pulumi.set(__self__, "monthly_storage_server_version", monthly_storage_server_version)
        pulumi.set(__self__, "next_maintenance_run_id", next_maintenance_run_id)
        pulumi.set(__self__, "next_maintenance_run_time", next_maintenance_run_time)
        pulumi.set(__self__, "next_security_maintenance_run_time", next_security_maintenance_run_time)
        pulumi.set(__self__, "oci_url", oci_url)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "shape", shape)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "storage_count", storage_count)
        pulumi.set(__self__, "storage_server_version", storage_server_version)
        pulumi.set(__self__, "total_storage_size_gb", total_storage_size_gb)

    @property
    @pulumi.getter(name="activatedStorageCount")
    def activated_storage_count(self) -> int:
        """
        The requested number of additional storage servers activated for the
        Exadata Infrastructure.
        """
        return pulumi.get(self, "activated_storage_count")

    @property
    @pulumi.getter(name="additionalStorageCount")
    def additional_storage_count(self) -> int:
        """
        The requested number of additional storage servers for the Exadata
        Infrastructure.
        """
        return pulumi.get(self, "additional_storage_count")

    @property
    @pulumi.getter(name="availableStorageSizeGb")
    def available_storage_size_gb(self) -> int:
        """
        The available storage can be allocated to the Exadata Infrastructure
        resource, in gigabytes (GB).
        """
        return pulumi.get(self, "available_storage_size_gb")

    @property
    @pulumi.getter(name="computeCount")
    def compute_count(self) -> int:
        """
        The number of compute servers for the Exadata Infrastructure.
        """
        return pulumi.get(self, "compute_count")

    @property
    @pulumi.getter(name="cpuCount")
    def cpu_count(self) -> int:
        """
        The number of enabled CPU cores.
        """
        return pulumi.get(self, "cpu_count")

    @property
    @pulumi.getter(name="customerContacts")
    def customer_contacts(self) -> Sequence['outputs.GetCloudExadataInfrastructurePropertyCustomerContactResult']:
        """
        The list of customer contacts.
        """
        return pulumi.get(self, "customer_contacts")

    @property
    @pulumi.getter(name="dataStorageSizeTb")
    def data_storage_size_tb(self) -> float:
        """
        Size, in terabytes, of the DATA disk group.
        """
        return pulumi.get(self, "data_storage_size_tb")

    @property
    @pulumi.getter(name="dbNodeStorageSizeGb")
    def db_node_storage_size_gb(self) -> int:
        """
        The local node storage allocated in GBs.
        """
        return pulumi.get(self, "db_node_storage_size_gb")

    @property
    @pulumi.getter(name="dbServerVersion")
    def db_server_version(self) -> str:
        """
        The software version of the database servers (dom0) in the Exadata
        Infrastructure.
        """
        return pulumi.get(self, "db_server_version")

    @property
    @pulumi.getter(name="maintenanceWindows")
    def maintenance_windows(self) -> Sequence['outputs.GetCloudExadataInfrastructurePropertyMaintenanceWindowResult']:
        """
        Maintenance window as defined by Oracle.
        https://docs.oracle.com/en-us/iaas/api/#/en/database/20160918/datatypes/MaintenanceWindow
        """
        return pulumi.get(self, "maintenance_windows")

    @property
    @pulumi.getter(name="maxCpuCount")
    def max_cpu_count(self) -> int:
        """
        The total number of CPU cores available.
        """
        return pulumi.get(self, "max_cpu_count")

    @property
    @pulumi.getter(name="maxDataStorageTb")
    def max_data_storage_tb(self) -> float:
        """
        The total available DATA disk group size.
        """
        return pulumi.get(self, "max_data_storage_tb")

    @property
    @pulumi.getter(name="maxDbNodeStorageSizeGb")
    def max_db_node_storage_size_gb(self) -> int:
        """
        The total local node storage available in GBs.
        """
        return pulumi.get(self, "max_db_node_storage_size_gb")

    @property
    @pulumi.getter(name="maxMemoryGb")
    def max_memory_gb(self) -> int:
        """
        The total memory available in GBs.
        """
        return pulumi.get(self, "max_memory_gb")

    @property
    @pulumi.getter(name="memorySizeGb")
    def memory_size_gb(self) -> int:
        """
        The memory allocated in GBs.
        """
        return pulumi.get(self, "memory_size_gb")

    @property
    @pulumi.getter(name="monthlyDbServerVersion")
    def monthly_db_server_version(self) -> str:
        """
        The monthly software version of the database servers (dom0)
        in the Exadata Infrastructure. Example: 20.1.15
        """
        return pulumi.get(self, "monthly_db_server_version")

    @property
    @pulumi.getter(name="monthlyStorageServerVersion")
    def monthly_storage_server_version(self) -> str:
        """
        The monthly software version of the storage servers (cells)
        in the Exadata Infrastructure. Example: 20.1.15
        """
        return pulumi.get(self, "monthly_storage_server_version")

    @property
    @pulumi.getter(name="nextMaintenanceRunId")
    def next_maintenance_run_id(self) -> str:
        """
        The OCID of the next maintenance run.
        """
        return pulumi.get(self, "next_maintenance_run_id")

    @property
    @pulumi.getter(name="nextMaintenanceRunTime")
    def next_maintenance_run_time(self) -> str:
        """
        The time when the next maintenance run will occur.
        """
        return pulumi.get(self, "next_maintenance_run_time")

    @property
    @pulumi.getter(name="nextSecurityMaintenanceRunTime")
    def next_security_maintenance_run_time(self) -> str:
        """
        The time when the next security maintenance run will occur.
        """
        return pulumi.get(self, "next_security_maintenance_run_time")

    @property
    @pulumi.getter(name="ociUrl")
    def oci_url(self) -> str:
        """
        Deep link to the OCI console to view this resource.
        """
        return pulumi.get(self, "oci_url")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        OCID of created infra.
        https://docs.oracle.com/en-us/iaas/Content/General/Concepts/identifiers.htm#Oracle
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def shape(self) -> str:
        """
        The shape of the Exadata Infrastructure. The shape determines the
        amount of CPU, storage, and memory resources allocated to the instance.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The current lifecycle state of the Exadata Infrastructure. 
         Possible values:
         STATE_UNSPECIFIED
        PROVISIONING
        AVAILABLE
        UPDATING
        TERMINATING
        TERMINATED
        FAILED
        MAINTENANCE_IN_PROGRESS
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="storageCount")
    def storage_count(self) -> int:
        """
        The number of Cloud Exadata storage servers for the Exadata Infrastructure.
        """
        return pulumi.get(self, "storage_count")

    @property
    @pulumi.getter(name="storageServerVersion")
    def storage_server_version(self) -> str:
        """
        The software version of the storage servers (cells) in the Exadata
        Infrastructure.
        """
        return pulumi.get(self, "storage_server_version")

    @property
    @pulumi.getter(name="totalStorageSizeGb")
    def total_storage_size_gb(self) -> int:
        """
        The total storage allocated to the Exadata Infrastructure
        resource, in gigabytes (GB).
        """
        return pulumi.get(self, "total_storage_size_gb")


@pulumi.output_type
class GetCloudExadataInfrastructurePropertyCustomerContactResult(dict):
    def __init__(__self__, *,
                 email: str):
        """
        :param str email: The email address used by Oracle to send notifications regarding databases
               and infrastructure.
        """
        pulumi.set(__self__, "email", email)

    @property
    @pulumi.getter
    def email(self) -> str:
        """
        The email address used by Oracle to send notifications regarding databases
        and infrastructure.
        """
        return pulumi.get(self, "email")


@pulumi.output_type
class GetCloudExadataInfrastructurePropertyMaintenanceWindowResult(dict):
    def __init__(__self__, *,
                 custom_action_timeout_mins: int,
                 days_of_weeks: Sequence[str],
                 hours_of_days: Sequence[int],
                 is_custom_action_timeout_enabled: bool,
                 lead_time_week: int,
                 months: Sequence[str],
                 patching_mode: str,
                 preference: str,
                 weeks_of_months: Sequence[int]):
        """
        :param int custom_action_timeout_mins: Determines the amount of time the system will wait before the start of each
               database server patching operation. Custom action timeout is in minutes and
               valid value is between 15 to 120 (inclusive).
        :param Sequence[str] days_of_weeks: Days during the week when maintenance should be performed.
        :param Sequence[int] hours_of_days: The window of hours during the day when maintenance should be performed.
               The window is a 4 hour slot. Valid values are:
                 0 - represents time slot 0:00 - 3:59 UTC
                 4 - represents time slot 4:00 - 7:59 UTC
                 8 - represents time slot 8:00 - 11:59 UTC
                 12 - represents time slot 12:00 - 15:59 UTC
                 16 - represents time slot 16:00 - 19:59 UTC
                 20 - represents time slot 20:00 - 23:59 UTC
        :param bool is_custom_action_timeout_enabled: If true, enables the configuration of a custom action timeout (waiting
               period) between database server patching operations.
        :param int lead_time_week: Lead time window allows user to set a lead time to prepare for a down time.
               The lead time is in weeks and valid value is between 1 to 4.
        :param Sequence[str] months: Months during the year when maintenance should be performed.
        :param str patching_mode: Cloud CloudExadataInfrastructure node patching method, either "ROLLING"
                or "NONROLLING". Default value is ROLLING. 
                Possible values:
                PATCHING_MODE_UNSPECIFIED
               ROLLING
               NON_ROLLING
        :param str preference: The maintenance window scheduling preference. 
                Possible values:
                MAINTENANCE_WINDOW_PREFERENCE_UNSPECIFIED
               CUSTOM_PREFERENCE
               NO_PREFERENCE
        :param Sequence[int] weeks_of_months: Weeks during the month when maintenance should be performed. Weeks start on
               the 1st, 8th, 15th, and 22nd days of the month, and have a duration of 7
               days. Weeks start and end based on calendar dates, not days of the week.
        """
        pulumi.set(__self__, "custom_action_timeout_mins", custom_action_timeout_mins)
        pulumi.set(__self__, "days_of_weeks", days_of_weeks)
        pulumi.set(__self__, "hours_of_days", hours_of_days)
        pulumi.set(__self__, "is_custom_action_timeout_enabled", is_custom_action_timeout_enabled)
        pulumi.set(__self__, "lead_time_week", lead_time_week)
        pulumi.set(__self__, "months", months)
        pulumi.set(__self__, "patching_mode", patching_mode)
        pulumi.set(__self__, "preference", preference)
        pulumi.set(__self__, "weeks_of_months", weeks_of_months)

    @property
    @pulumi.getter(name="customActionTimeoutMins")
    def custom_action_timeout_mins(self) -> int:
        """
        Determines the amount of time the system will wait before the start of each
        database server patching operation. Custom action timeout is in minutes and
        valid value is between 15 to 120 (inclusive).
        """
        return pulumi.get(self, "custom_action_timeout_mins")

    @property
    @pulumi.getter(name="daysOfWeeks")
    def days_of_weeks(self) -> Sequence[str]:
        """
        Days during the week when maintenance should be performed.
        """
        return pulumi.get(self, "days_of_weeks")

    @property
    @pulumi.getter(name="hoursOfDays")
    def hours_of_days(self) -> Sequence[int]:
        """
        The window of hours during the day when maintenance should be performed.
        The window is a 4 hour slot. Valid values are:
          0 - represents time slot 0:00 - 3:59 UTC
          4 - represents time slot 4:00 - 7:59 UTC
          8 - represents time slot 8:00 - 11:59 UTC
          12 - represents time slot 12:00 - 15:59 UTC
          16 - represents time slot 16:00 - 19:59 UTC
          20 - represents time slot 20:00 - 23:59 UTC
        """
        return pulumi.get(self, "hours_of_days")

    @property
    @pulumi.getter(name="isCustomActionTimeoutEnabled")
    def is_custom_action_timeout_enabled(self) -> bool:
        """
        If true, enables the configuration of a custom action timeout (waiting
        period) between database server patching operations.
        """
        return pulumi.get(self, "is_custom_action_timeout_enabled")

    @property
    @pulumi.getter(name="leadTimeWeek")
    def lead_time_week(self) -> int:
        """
        Lead time window allows user to set a lead time to prepare for a down time.
        The lead time is in weeks and valid value is between 1 to 4.
        """
        return pulumi.get(self, "lead_time_week")

    @property
    @pulumi.getter
    def months(self) -> Sequence[str]:
        """
        Months during the year when maintenance should be performed.
        """
        return pulumi.get(self, "months")

    @property
    @pulumi.getter(name="patchingMode")
    def patching_mode(self) -> str:
        """
        Cloud CloudExadataInfrastructure node patching method, either "ROLLING"
         or "NONROLLING". Default value is ROLLING. 
         Possible values:
         PATCHING_MODE_UNSPECIFIED
        ROLLING
        NON_ROLLING
        """
        return pulumi.get(self, "patching_mode")

    @property
    @pulumi.getter
    def preference(self) -> str:
        """
        The maintenance window scheduling preference. 
         Possible values:
         MAINTENANCE_WINDOW_PREFERENCE_UNSPECIFIED
        CUSTOM_PREFERENCE
        NO_PREFERENCE
        """
        return pulumi.get(self, "preference")

    @property
    @pulumi.getter(name="weeksOfMonths")
    def weeks_of_months(self) -> Sequence[int]:
        """
        Weeks during the month when maintenance should be performed. Weeks start on
        the 1st, 8th, 15th, and 22nd days of the month, and have a duration of 7
        days. Weeks start and end based on calendar dates, not days of the week.
        """
        return pulumi.get(self, "weeks_of_months")


@pulumi.output_type
class GetCloudExadataInfrastructuresCloudExadataInfrastructureResult(dict):
    def __init__(__self__, *,
                 cloud_exadata_infrastructure_id: str,
                 create_time: str,
                 display_name: str,
                 effective_labels: Mapping[str, str],
                 entitlement_id: str,
                 gcp_oracle_zone: str,
                 labels: Mapping[str, str],
                 location: str,
                 name: str,
                 project: str,
                 properties: Sequence['outputs.GetCloudExadataInfrastructuresCloudExadataInfrastructurePropertyResult'],
                 pulumi_labels: Mapping[str, str]):
        """
        :param str cloud_exadata_infrastructure_id: The ID of the Exadata Infrastructure to create. This value is restricted
               to (^a-z?$) and must be a maximum of 63
               characters in length. The value must start with a letter and end with
               a letter or a number.
        :param str create_time: The date and time that the Exadata Infrastructure was created.
        :param str display_name: User friendly name for this resource.
        :param str entitlement_id: Entitlement ID of the private offer against which this infrastructure
               resource is provisioned.
        :param str gcp_oracle_zone: GCP location where Oracle Exadata is hosted.
        :param Mapping[str, str] labels: Labels or tags associated with the resource. 
               
               **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
               Please refer to the field 'effective_labels' for all of the labels present on the resource.
        :param str location: The location of the resource.
               
               - - -
        :param str name: Identifier. The name of the Exadata Infrastructure resource with the following format:
               projects/{project}/locations/{region}/cloudExadataInfrastructures/{cloud_exadata_infrastructure}
        :param str project: The project to which the resource belongs. If it
               is not provided, the provider project is used.
        :param Sequence['GetCloudExadataInfrastructuresCloudExadataInfrastructurePropertyArgs'] properties: Various properties of Exadata Infrastructure.
        :param Mapping[str, str] pulumi_labels: The combination of labels configured directly on the resource
                and default labels configured on the provider.
        """
        pulumi.set(__self__, "cloud_exadata_infrastructure_id", cloud_exadata_infrastructure_id)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "effective_labels", effective_labels)
        pulumi.set(__self__, "entitlement_id", entitlement_id)
        pulumi.set(__self__, "gcp_oracle_zone", gcp_oracle_zone)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "project", project)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "pulumi_labels", pulumi_labels)

    @property
    @pulumi.getter(name="cloudExadataInfrastructureId")
    def cloud_exadata_infrastructure_id(self) -> str:
        """
        The ID of the Exadata Infrastructure to create. This value is restricted
        to (^a-z?$) and must be a maximum of 63
        characters in length. The value must start with a letter and end with
        a letter or a number.
        """
        return pulumi.get(self, "cloud_exadata_infrastructure_id")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The date and time that the Exadata Infrastructure was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        User friendly name for this resource.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="effectiveLabels")
    def effective_labels(self) -> Mapping[str, str]:
        return pulumi.get(self, "effective_labels")

    @property
    @pulumi.getter(name="entitlementId")
    def entitlement_id(self) -> str:
        """
        Entitlement ID of the private offer against which this infrastructure
        resource is provisioned.
        """
        return pulumi.get(self, "entitlement_id")

    @property
    @pulumi.getter(name="gcpOracleZone")
    def gcp_oracle_zone(self) -> str:
        """
        GCP location where Oracle Exadata is hosted.
        """
        return pulumi.get(self, "gcp_oracle_zone")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        """
        Labels or tags associated with the resource. 

        **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        Please refer to the field 'effective_labels' for all of the labels present on the resource.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The location of the resource.

        - - -
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Identifier. The name of the Exadata Infrastructure resource with the following format:
        projects/{project}/locations/{region}/cloudExadataInfrastructures/{cloud_exadata_infrastructure}
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def project(self) -> str:
        """
        The project to which the resource belongs. If it
        is not provided, the provider project is used.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def properties(self) -> Sequence['outputs.GetCloudExadataInfrastructuresCloudExadataInfrastructurePropertyResult']:
        """
        Various properties of Exadata Infrastructure.
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="pulumiLabels")
    def pulumi_labels(self) -> Mapping[str, str]:
        """
        The combination of labels configured directly on the resource
         and default labels configured on the provider.
        """
        return pulumi.get(self, "pulumi_labels")


@pulumi.output_type
class GetCloudExadataInfrastructuresCloudExadataInfrastructurePropertyResult(dict):
    def __init__(__self__, *,
                 activated_storage_count: int,
                 additional_storage_count: int,
                 available_storage_size_gb: int,
                 compute_count: int,
                 cpu_count: int,
                 customer_contacts: Sequence['outputs.GetCloudExadataInfrastructuresCloudExadataInfrastructurePropertyCustomerContactResult'],
                 data_storage_size_tb: float,
                 db_node_storage_size_gb: int,
                 db_server_version: str,
                 maintenance_windows: Sequence['outputs.GetCloudExadataInfrastructuresCloudExadataInfrastructurePropertyMaintenanceWindowResult'],
                 max_cpu_count: int,
                 max_data_storage_tb: float,
                 max_db_node_storage_size_gb: int,
                 max_memory_gb: int,
                 memory_size_gb: int,
                 monthly_db_server_version: str,
                 monthly_storage_server_version: str,
                 next_maintenance_run_id: str,
                 next_maintenance_run_time: str,
                 next_security_maintenance_run_time: str,
                 oci_url: str,
                 ocid: str,
                 shape: str,
                 state: str,
                 storage_count: int,
                 storage_server_version: str,
                 total_storage_size_gb: int):
        """
        :param int activated_storage_count: The requested number of additional storage servers activated for the
               Exadata Infrastructure.
        :param int additional_storage_count: The requested number of additional storage servers for the Exadata
               Infrastructure.
        :param int available_storage_size_gb: The available storage can be allocated to the Exadata Infrastructure
               resource, in gigabytes (GB).
        :param int compute_count: The number of compute servers for the Exadata Infrastructure.
        :param int cpu_count: The number of enabled CPU cores.
        :param Sequence['GetCloudExadataInfrastructuresCloudExadataInfrastructurePropertyCustomerContactArgs'] customer_contacts: The list of customer contacts.
        :param float data_storage_size_tb: Size, in terabytes, of the DATA disk group.
        :param int db_node_storage_size_gb: The local node storage allocated in GBs.
        :param str db_server_version: The software version of the database servers (dom0) in the Exadata
               Infrastructure.
        :param Sequence['GetCloudExadataInfrastructuresCloudExadataInfrastructurePropertyMaintenanceWindowArgs'] maintenance_windows: Maintenance window as defined by Oracle.
               https://docs.oracle.com/en-us/iaas/api/#/en/database/20160918/datatypes/MaintenanceWindow
        :param int max_cpu_count: The total number of CPU cores available.
        :param float max_data_storage_tb: The total available DATA disk group size.
        :param int max_db_node_storage_size_gb: The total local node storage available in GBs.
        :param int max_memory_gb: The total memory available in GBs.
        :param int memory_size_gb: The memory allocated in GBs.
        :param str monthly_db_server_version: The monthly software version of the database servers (dom0)
               in the Exadata Infrastructure. Example: 20.1.15
        :param str monthly_storage_server_version: The monthly software version of the storage servers (cells)
               in the Exadata Infrastructure. Example: 20.1.15
        :param str next_maintenance_run_id: The OCID of the next maintenance run.
        :param str next_maintenance_run_time: The time when the next maintenance run will occur.
        :param str next_security_maintenance_run_time: The time when the next security maintenance run will occur.
        :param str oci_url: Deep link to the OCI console to view this resource.
        :param str ocid: OCID of created infra.
               https://docs.oracle.com/en-us/iaas/Content/General/Concepts/identifiers.htm#Oracle
        :param str shape: The shape of the Exadata Infrastructure. The shape determines the
               amount of CPU, storage, and memory resources allocated to the instance.
        :param str state: The current lifecycle state of the Exadata Infrastructure. 
                Possible values:
                STATE_UNSPECIFIED
               PROVISIONING
               AVAILABLE
               UPDATING
               TERMINATING
               TERMINATED
               FAILED
               MAINTENANCE_IN_PROGRESS
        :param int storage_count: The number of Cloud Exadata storage servers for the Exadata Infrastructure.
        :param str storage_server_version: The software version of the storage servers (cells) in the Exadata
               Infrastructure.
        :param int total_storage_size_gb: The total storage allocated to the Exadata Infrastructure
               resource, in gigabytes (GB).
        """
        pulumi.set(__self__, "activated_storage_count", activated_storage_count)
        pulumi.set(__self__, "additional_storage_count", additional_storage_count)
        pulumi.set(__self__, "available_storage_size_gb", available_storage_size_gb)
        pulumi.set(__self__, "compute_count", compute_count)
        pulumi.set(__self__, "cpu_count", cpu_count)
        pulumi.set(__self__, "customer_contacts", customer_contacts)
        pulumi.set(__self__, "data_storage_size_tb", data_storage_size_tb)
        pulumi.set(__self__, "db_node_storage_size_gb", db_node_storage_size_gb)
        pulumi.set(__self__, "db_server_version", db_server_version)
        pulumi.set(__self__, "maintenance_windows", maintenance_windows)
        pulumi.set(__self__, "max_cpu_count", max_cpu_count)
        pulumi.set(__self__, "max_data_storage_tb", max_data_storage_tb)
        pulumi.set(__self__, "max_db_node_storage_size_gb", max_db_node_storage_size_gb)
        pulumi.set(__self__, "max_memory_gb", max_memory_gb)
        pulumi.set(__self__, "memory_size_gb", memory_size_gb)
        pulumi.set(__self__, "monthly_db_server_version", monthly_db_server_version)
        pulumi.set(__self__, "monthly_storage_server_version", monthly_storage_server_version)
        pulumi.set(__self__, "next_maintenance_run_id", next_maintenance_run_id)
        pulumi.set(__self__, "next_maintenance_run_time", next_maintenance_run_time)
        pulumi.set(__self__, "next_security_maintenance_run_time", next_security_maintenance_run_time)
        pulumi.set(__self__, "oci_url", oci_url)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "shape", shape)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "storage_count", storage_count)
        pulumi.set(__self__, "storage_server_version", storage_server_version)
        pulumi.set(__self__, "total_storage_size_gb", total_storage_size_gb)

    @property
    @pulumi.getter(name="activatedStorageCount")
    def activated_storage_count(self) -> int:
        """
        The requested number of additional storage servers activated for the
        Exadata Infrastructure.
        """
        return pulumi.get(self, "activated_storage_count")

    @property
    @pulumi.getter(name="additionalStorageCount")
    def additional_storage_count(self) -> int:
        """
        The requested number of additional storage servers for the Exadata
        Infrastructure.
        """
        return pulumi.get(self, "additional_storage_count")

    @property
    @pulumi.getter(name="availableStorageSizeGb")
    def available_storage_size_gb(self) -> int:
        """
        The available storage can be allocated to the Exadata Infrastructure
        resource, in gigabytes (GB).
        """
        return pulumi.get(self, "available_storage_size_gb")

    @property
    @pulumi.getter(name="computeCount")
    def compute_count(self) -> int:
        """
        The number of compute servers for the Exadata Infrastructure.
        """
        return pulumi.get(self, "compute_count")

    @property
    @pulumi.getter(name="cpuCount")
    def cpu_count(self) -> int:
        """
        The number of enabled CPU cores.
        """
        return pulumi.get(self, "cpu_count")

    @property
    @pulumi.getter(name="customerContacts")
    def customer_contacts(self) -> Sequence['outputs.GetCloudExadataInfrastructuresCloudExadataInfrastructurePropertyCustomerContactResult']:
        """
        The list of customer contacts.
        """
        return pulumi.get(self, "customer_contacts")

    @property
    @pulumi.getter(name="dataStorageSizeTb")
    def data_storage_size_tb(self) -> float:
        """
        Size, in terabytes, of the DATA disk group.
        """
        return pulumi.get(self, "data_storage_size_tb")

    @property
    @pulumi.getter(name="dbNodeStorageSizeGb")
    def db_node_storage_size_gb(self) -> int:
        """
        The local node storage allocated in GBs.
        """
        return pulumi.get(self, "db_node_storage_size_gb")

    @property
    @pulumi.getter(name="dbServerVersion")
    def db_server_version(self) -> str:
        """
        The software version of the database servers (dom0) in the Exadata
        Infrastructure.
        """
        return pulumi.get(self, "db_server_version")

    @property
    @pulumi.getter(name="maintenanceWindows")
    def maintenance_windows(self) -> Sequence['outputs.GetCloudExadataInfrastructuresCloudExadataInfrastructurePropertyMaintenanceWindowResult']:
        """
        Maintenance window as defined by Oracle.
        https://docs.oracle.com/en-us/iaas/api/#/en/database/20160918/datatypes/MaintenanceWindow
        """
        return pulumi.get(self, "maintenance_windows")

    @property
    @pulumi.getter(name="maxCpuCount")
    def max_cpu_count(self) -> int:
        """
        The total number of CPU cores available.
        """
        return pulumi.get(self, "max_cpu_count")

    @property
    @pulumi.getter(name="maxDataStorageTb")
    def max_data_storage_tb(self) -> float:
        """
        The total available DATA disk group size.
        """
        return pulumi.get(self, "max_data_storage_tb")

    @property
    @pulumi.getter(name="maxDbNodeStorageSizeGb")
    def max_db_node_storage_size_gb(self) -> int:
        """
        The total local node storage available in GBs.
        """
        return pulumi.get(self, "max_db_node_storage_size_gb")

    @property
    @pulumi.getter(name="maxMemoryGb")
    def max_memory_gb(self) -> int:
        """
        The total memory available in GBs.
        """
        return pulumi.get(self, "max_memory_gb")

    @property
    @pulumi.getter(name="memorySizeGb")
    def memory_size_gb(self) -> int:
        """
        The memory allocated in GBs.
        """
        return pulumi.get(self, "memory_size_gb")

    @property
    @pulumi.getter(name="monthlyDbServerVersion")
    def monthly_db_server_version(self) -> str:
        """
        The monthly software version of the database servers (dom0)
        in the Exadata Infrastructure. Example: 20.1.15
        """
        return pulumi.get(self, "monthly_db_server_version")

    @property
    @pulumi.getter(name="monthlyStorageServerVersion")
    def monthly_storage_server_version(self) -> str:
        """
        The monthly software version of the storage servers (cells)
        in the Exadata Infrastructure. Example: 20.1.15
        """
        return pulumi.get(self, "monthly_storage_server_version")

    @property
    @pulumi.getter(name="nextMaintenanceRunId")
    def next_maintenance_run_id(self) -> str:
        """
        The OCID of the next maintenance run.
        """
        return pulumi.get(self, "next_maintenance_run_id")

    @property
    @pulumi.getter(name="nextMaintenanceRunTime")
    def next_maintenance_run_time(self) -> str:
        """
        The time when the next maintenance run will occur.
        """
        return pulumi.get(self, "next_maintenance_run_time")

    @property
    @pulumi.getter(name="nextSecurityMaintenanceRunTime")
    def next_security_maintenance_run_time(self) -> str:
        """
        The time when the next security maintenance run will occur.
        """
        return pulumi.get(self, "next_security_maintenance_run_time")

    @property
    @pulumi.getter(name="ociUrl")
    def oci_url(self) -> str:
        """
        Deep link to the OCI console to view this resource.
        """
        return pulumi.get(self, "oci_url")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        OCID of created infra.
        https://docs.oracle.com/en-us/iaas/Content/General/Concepts/identifiers.htm#Oracle
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter
    def shape(self) -> str:
        """
        The shape of the Exadata Infrastructure. The shape determines the
        amount of CPU, storage, and memory resources allocated to the instance.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The current lifecycle state of the Exadata Infrastructure. 
         Possible values:
         STATE_UNSPECIFIED
        PROVISIONING
        AVAILABLE
        UPDATING
        TERMINATING
        TERMINATED
        FAILED
        MAINTENANCE_IN_PROGRESS
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="storageCount")
    def storage_count(self) -> int:
        """
        The number of Cloud Exadata storage servers for the Exadata Infrastructure.
        """
        return pulumi.get(self, "storage_count")

    @property
    @pulumi.getter(name="storageServerVersion")
    def storage_server_version(self) -> str:
        """
        The software version of the storage servers (cells) in the Exadata
        Infrastructure.
        """
        return pulumi.get(self, "storage_server_version")

    @property
    @pulumi.getter(name="totalStorageSizeGb")
    def total_storage_size_gb(self) -> int:
        """
        The total storage allocated to the Exadata Infrastructure
        resource, in gigabytes (GB).
        """
        return pulumi.get(self, "total_storage_size_gb")


@pulumi.output_type
class GetCloudExadataInfrastructuresCloudExadataInfrastructurePropertyCustomerContactResult(dict):
    def __init__(__self__, *,
                 email: str):
        """
        :param str email: The email address used by Oracle to send notifications regarding databases
               and infrastructure.
        """
        pulumi.set(__self__, "email", email)

    @property
    @pulumi.getter
    def email(self) -> str:
        """
        The email address used by Oracle to send notifications regarding databases
        and infrastructure.
        """
        return pulumi.get(self, "email")


@pulumi.output_type
class GetCloudExadataInfrastructuresCloudExadataInfrastructurePropertyMaintenanceWindowResult(dict):
    def __init__(__self__, *,
                 custom_action_timeout_mins: int,
                 days_of_weeks: Sequence[str],
                 hours_of_days: Sequence[int],
                 is_custom_action_timeout_enabled: bool,
                 lead_time_week: int,
                 months: Sequence[str],
                 patching_mode: str,
                 preference: str,
                 weeks_of_months: Sequence[int]):
        """
        :param int custom_action_timeout_mins: Determines the amount of time the system will wait before the start of each
               database server patching operation. Custom action timeout is in minutes and
               valid value is between 15 to 120 (inclusive).
        :param Sequence[str] days_of_weeks: Days during the week when maintenance should be performed.
        :param Sequence[int] hours_of_days: The window of hours during the day when maintenance should be performed.
               The window is a 4 hour slot. Valid values are:
                 0 - represents time slot 0:00 - 3:59 UTC
                 4 - represents time slot 4:00 - 7:59 UTC
                 8 - represents time slot 8:00 - 11:59 UTC
                 12 - represents time slot 12:00 - 15:59 UTC
                 16 - represents time slot 16:00 - 19:59 UTC
                 20 - represents time slot 20:00 - 23:59 UTC
        :param bool is_custom_action_timeout_enabled: If true, enables the configuration of a custom action timeout (waiting
               period) between database server patching operations.
        :param int lead_time_week: Lead time window allows user to set a lead time to prepare for a down time.
               The lead time is in weeks and valid value is between 1 to 4.
        :param Sequence[str] months: Months during the year when maintenance should be performed.
        :param str patching_mode: Cloud CloudExadataInfrastructure node patching method, either "ROLLING"
                or "NONROLLING". Default value is ROLLING. 
                Possible values:
                PATCHING_MODE_UNSPECIFIED
               ROLLING
               NON_ROLLING
        :param str preference: The maintenance window scheduling preference. 
                Possible values:
                MAINTENANCE_WINDOW_PREFERENCE_UNSPECIFIED
               CUSTOM_PREFERENCE
               NO_PREFERENCE
        :param Sequence[int] weeks_of_months: Weeks during the month when maintenance should be performed. Weeks start on
               the 1st, 8th, 15th, and 22nd days of the month, and have a duration of 7
               days. Weeks start and end based on calendar dates, not days of the week.
        """
        pulumi.set(__self__, "custom_action_timeout_mins", custom_action_timeout_mins)
        pulumi.set(__self__, "days_of_weeks", days_of_weeks)
        pulumi.set(__self__, "hours_of_days", hours_of_days)
        pulumi.set(__self__, "is_custom_action_timeout_enabled", is_custom_action_timeout_enabled)
        pulumi.set(__self__, "lead_time_week", lead_time_week)
        pulumi.set(__self__, "months", months)
        pulumi.set(__self__, "patching_mode", patching_mode)
        pulumi.set(__self__, "preference", preference)
        pulumi.set(__self__, "weeks_of_months", weeks_of_months)

    @property
    @pulumi.getter(name="customActionTimeoutMins")
    def custom_action_timeout_mins(self) -> int:
        """
        Determines the amount of time the system will wait before the start of each
        database server patching operation. Custom action timeout is in minutes and
        valid value is between 15 to 120 (inclusive).
        """
        return pulumi.get(self, "custom_action_timeout_mins")

    @property
    @pulumi.getter(name="daysOfWeeks")
    def days_of_weeks(self) -> Sequence[str]:
        """
        Days during the week when maintenance should be performed.
        """
        return pulumi.get(self, "days_of_weeks")

    @property
    @pulumi.getter(name="hoursOfDays")
    def hours_of_days(self) -> Sequence[int]:
        """
        The window of hours during the day when maintenance should be performed.
        The window is a 4 hour slot. Valid values are:
          0 - represents time slot 0:00 - 3:59 UTC
          4 - represents time slot 4:00 - 7:59 UTC
          8 - represents time slot 8:00 - 11:59 UTC
          12 - represents time slot 12:00 - 15:59 UTC
          16 - represents time slot 16:00 - 19:59 UTC
          20 - represents time slot 20:00 - 23:59 UTC
        """
        return pulumi.get(self, "hours_of_days")

    @property
    @pulumi.getter(name="isCustomActionTimeoutEnabled")
    def is_custom_action_timeout_enabled(self) -> bool:
        """
        If true, enables the configuration of a custom action timeout (waiting
        period) between database server patching operations.
        """
        return pulumi.get(self, "is_custom_action_timeout_enabled")

    @property
    @pulumi.getter(name="leadTimeWeek")
    def lead_time_week(self) -> int:
        """
        Lead time window allows user to set a lead time to prepare for a down time.
        The lead time is in weeks and valid value is between 1 to 4.
        """
        return pulumi.get(self, "lead_time_week")

    @property
    @pulumi.getter
    def months(self) -> Sequence[str]:
        """
        Months during the year when maintenance should be performed.
        """
        return pulumi.get(self, "months")

    @property
    @pulumi.getter(name="patchingMode")
    def patching_mode(self) -> str:
        """
        Cloud CloudExadataInfrastructure node patching method, either "ROLLING"
         or "NONROLLING". Default value is ROLLING. 
         Possible values:
         PATCHING_MODE_UNSPECIFIED
        ROLLING
        NON_ROLLING
        """
        return pulumi.get(self, "patching_mode")

    @property
    @pulumi.getter
    def preference(self) -> str:
        """
        The maintenance window scheduling preference. 
         Possible values:
         MAINTENANCE_WINDOW_PREFERENCE_UNSPECIFIED
        CUSTOM_PREFERENCE
        NO_PREFERENCE
        """
        return pulumi.get(self, "preference")

    @property
    @pulumi.getter(name="weeksOfMonths")
    def weeks_of_months(self) -> Sequence[int]:
        """
        Weeks during the month when maintenance should be performed. Weeks start on
        the 1st, 8th, 15th, and 22nd days of the month, and have a duration of 7
        days. Weeks start and end based on calendar dates, not days of the week.
        """
        return pulumi.get(self, "weeks_of_months")


@pulumi.output_type
class GetCloudVmClusterPropertyResult(dict):
    def __init__(__self__, *,
                 cluster_name: str,
                 compartment_id: str,
                 cpu_core_count: int,
                 data_storage_size_tb: float,
                 db_node_storage_size_gb: int,
                 db_server_ocids: Sequence[str],
                 diagnostics_data_collection_options: Sequence['outputs.GetCloudVmClusterPropertyDiagnosticsDataCollectionOptionResult'],
                 disk_redundancy: str,
                 dns_listener_ip: str,
                 domain: str,
                 gi_version: str,
                 hostname: str,
                 hostname_prefix: str,
                 license_type: str,
                 local_backup_enabled: bool,
                 memory_size_gb: int,
                 node_count: int,
                 oci_url: str,
                 ocid: str,
                 ocpu_count: float,
                 scan_dns: str,
                 scan_dns_record_id: str,
                 scan_ip_ids: Sequence[str],
                 scan_listener_port_tcp: int,
                 scan_listener_port_tcp_ssl: int,
                 shape: str,
                 sparse_diskgroup_enabled: bool,
                 ssh_public_keys: Sequence[str],
                 state: str,
                 storage_size_gb: int,
                 system_version: str,
                 time_zones: Sequence['outputs.GetCloudVmClusterPropertyTimeZoneResult']):
        """
        :param str cluster_name: OCI Cluster name.
        :param str compartment_id: Compartment ID of cluster.
        :param int cpu_core_count: Number of enabled CPU cores.
        :param float data_storage_size_tb: The data disk group size to be allocated in TBs.
        :param int db_node_storage_size_gb: Local storage per VM
        :param Sequence[str] db_server_ocids: OCID of database servers.
        :param Sequence['GetCloudVmClusterPropertyDiagnosticsDataCollectionOptionArgs'] diagnostics_data_collection_options: Data collection options for diagnostics.
        :param str disk_redundancy: The type of redundancy. 
                Possible values:
                DISK_REDUNDANCY_UNSPECIFIED
               HIGH
               NORMAL
        :param str dns_listener_ip: DNS listener IP.
        :param str domain: Parent DNS domain where SCAN DNS and hosts names are qualified.
               ex: ocispdelegated.ocisp10jvnet.oraclevcn.com
        :param str gi_version: Grid Infrastructure Version.
        :param str hostname: host name without domain.
               format: "-" with some suffix.
               ex: sp2-yi0xq where "sp2" is the hostname_prefix.
        :param str hostname_prefix: Prefix for VM cluster host names.
        :param str license_type: License type of VM Cluster. 
                Possible values:
                LICENSE_TYPE_UNSPECIFIED
               LICENSE_INCLUDED
               BRING_YOUR_OWN_LICENSE
        :param bool local_backup_enabled: Use local backup.
        :param int memory_size_gb: Memory allocated in GBs.
        :param int node_count: Number of database servers.
        :param str oci_url: Deep link to the OCI console to view this resource.
        :param str ocid: Oracle Cloud Infrastructure ID of VM Cluster.
        :param float ocpu_count: OCPU count per VM. Minimum is 0.1.
        :param str scan_dns: SCAN DNS name.
               ex: sp2-yi0xq-scan.ocispdelegated.ocisp10jvnet.oraclevcn.com
        :param str scan_dns_record_id: OCID of scan DNS record.
        :param Sequence[str] scan_ip_ids: OCIDs of scan IPs.
        :param int scan_listener_port_tcp: SCAN listener port - TCP
        :param int scan_listener_port_tcp_ssl: SCAN listener port - TLS
        :param str shape: Shape of VM Cluster.
        :param bool sparse_diskgroup_enabled: Use exadata sparse snapshots.
        :param Sequence[str] ssh_public_keys: SSH public keys to be stored with cluster.
        :param str state: State of the cluster. 
                Possible values:
                STATE_UNSPECIFIED
               PROVISIONING
               AVAILABLE
               UPDATING
               TERMINATING
               TERMINATED
               FAILED
               MAINTENANCE_IN_PROGRESS
        :param int storage_size_gb: The storage allocation for the disk group, in gigabytes (GB).
        :param str system_version: Operating system version of the image.
        :param Sequence['GetCloudVmClusterPropertyTimeZoneArgs'] time_zones: Represents a time zone from the
               [IANA Time Zone Database](https://www.iana.org/time-zones).
        """
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "cpu_core_count", cpu_core_count)
        pulumi.set(__self__, "data_storage_size_tb", data_storage_size_tb)
        pulumi.set(__self__, "db_node_storage_size_gb", db_node_storage_size_gb)
        pulumi.set(__self__, "db_server_ocids", db_server_ocids)
        pulumi.set(__self__, "diagnostics_data_collection_options", diagnostics_data_collection_options)
        pulumi.set(__self__, "disk_redundancy", disk_redundancy)
        pulumi.set(__self__, "dns_listener_ip", dns_listener_ip)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "gi_version", gi_version)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "hostname_prefix", hostname_prefix)
        pulumi.set(__self__, "license_type", license_type)
        pulumi.set(__self__, "local_backup_enabled", local_backup_enabled)
        pulumi.set(__self__, "memory_size_gb", memory_size_gb)
        pulumi.set(__self__, "node_count", node_count)
        pulumi.set(__self__, "oci_url", oci_url)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ocpu_count", ocpu_count)
        pulumi.set(__self__, "scan_dns", scan_dns)
        pulumi.set(__self__, "scan_dns_record_id", scan_dns_record_id)
        pulumi.set(__self__, "scan_ip_ids", scan_ip_ids)
        pulumi.set(__self__, "scan_listener_port_tcp", scan_listener_port_tcp)
        pulumi.set(__self__, "scan_listener_port_tcp_ssl", scan_listener_port_tcp_ssl)
        pulumi.set(__self__, "shape", shape)
        pulumi.set(__self__, "sparse_diskgroup_enabled", sparse_diskgroup_enabled)
        pulumi.set(__self__, "ssh_public_keys", ssh_public_keys)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "storage_size_gb", storage_size_gb)
        pulumi.set(__self__, "system_version", system_version)
        pulumi.set(__self__, "time_zones", time_zones)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        """
        OCI Cluster name.
        """
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        Compartment ID of cluster.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="cpuCoreCount")
    def cpu_core_count(self) -> int:
        """
        Number of enabled CPU cores.
        """
        return pulumi.get(self, "cpu_core_count")

    @property
    @pulumi.getter(name="dataStorageSizeTb")
    def data_storage_size_tb(self) -> float:
        """
        The data disk group size to be allocated in TBs.
        """
        return pulumi.get(self, "data_storage_size_tb")

    @property
    @pulumi.getter(name="dbNodeStorageSizeGb")
    def db_node_storage_size_gb(self) -> int:
        """
        Local storage per VM
        """
        return pulumi.get(self, "db_node_storage_size_gb")

    @property
    @pulumi.getter(name="dbServerOcids")
    def db_server_ocids(self) -> Sequence[str]:
        """
        OCID of database servers.
        """
        return pulumi.get(self, "db_server_ocids")

    @property
    @pulumi.getter(name="diagnosticsDataCollectionOptions")
    def diagnostics_data_collection_options(self) -> Sequence['outputs.GetCloudVmClusterPropertyDiagnosticsDataCollectionOptionResult']:
        """
        Data collection options for diagnostics.
        """
        return pulumi.get(self, "diagnostics_data_collection_options")

    @property
    @pulumi.getter(name="diskRedundancy")
    def disk_redundancy(self) -> str:
        """
        The type of redundancy. 
         Possible values:
         DISK_REDUNDANCY_UNSPECIFIED
        HIGH
        NORMAL
        """
        return pulumi.get(self, "disk_redundancy")

    @property
    @pulumi.getter(name="dnsListenerIp")
    def dns_listener_ip(self) -> str:
        """
        DNS listener IP.
        """
        return pulumi.get(self, "dns_listener_ip")

    @property
    @pulumi.getter
    def domain(self) -> str:
        """
        Parent DNS domain where SCAN DNS and hosts names are qualified.
        ex: ocispdelegated.ocisp10jvnet.oraclevcn.com
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="giVersion")
    def gi_version(self) -> str:
        """
        Grid Infrastructure Version.
        """
        return pulumi.get(self, "gi_version")

    @property
    @pulumi.getter
    def hostname(self) -> str:
        """
        host name without domain.
        format: "-" with some suffix.
        ex: sp2-yi0xq where "sp2" is the hostname_prefix.
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="hostnamePrefix")
    def hostname_prefix(self) -> str:
        """
        Prefix for VM cluster host names.
        """
        return pulumi.get(self, "hostname_prefix")

    @property
    @pulumi.getter(name="licenseType")
    def license_type(self) -> str:
        """
        License type of VM Cluster. 
         Possible values:
         LICENSE_TYPE_UNSPECIFIED
        LICENSE_INCLUDED
        BRING_YOUR_OWN_LICENSE
        """
        return pulumi.get(self, "license_type")

    @property
    @pulumi.getter(name="localBackupEnabled")
    def local_backup_enabled(self) -> bool:
        """
        Use local backup.
        """
        return pulumi.get(self, "local_backup_enabled")

    @property
    @pulumi.getter(name="memorySizeGb")
    def memory_size_gb(self) -> int:
        """
        Memory allocated in GBs.
        """
        return pulumi.get(self, "memory_size_gb")

    @property
    @pulumi.getter(name="nodeCount")
    def node_count(self) -> int:
        """
        Number of database servers.
        """
        return pulumi.get(self, "node_count")

    @property
    @pulumi.getter(name="ociUrl")
    def oci_url(self) -> str:
        """
        Deep link to the OCI console to view this resource.
        """
        return pulumi.get(self, "oci_url")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        Oracle Cloud Infrastructure ID of VM Cluster.
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter(name="ocpuCount")
    def ocpu_count(self) -> float:
        """
        OCPU count per VM. Minimum is 0.1.
        """
        return pulumi.get(self, "ocpu_count")

    @property
    @pulumi.getter(name="scanDns")
    def scan_dns(self) -> str:
        """
        SCAN DNS name.
        ex: sp2-yi0xq-scan.ocispdelegated.ocisp10jvnet.oraclevcn.com
        """
        return pulumi.get(self, "scan_dns")

    @property
    @pulumi.getter(name="scanDnsRecordId")
    def scan_dns_record_id(self) -> str:
        """
        OCID of scan DNS record.
        """
        return pulumi.get(self, "scan_dns_record_id")

    @property
    @pulumi.getter(name="scanIpIds")
    def scan_ip_ids(self) -> Sequence[str]:
        """
        OCIDs of scan IPs.
        """
        return pulumi.get(self, "scan_ip_ids")

    @property
    @pulumi.getter(name="scanListenerPortTcp")
    def scan_listener_port_tcp(self) -> int:
        """
        SCAN listener port - TCP
        """
        return pulumi.get(self, "scan_listener_port_tcp")

    @property
    @pulumi.getter(name="scanListenerPortTcpSsl")
    def scan_listener_port_tcp_ssl(self) -> int:
        """
        SCAN listener port - TLS
        """
        return pulumi.get(self, "scan_listener_port_tcp_ssl")

    @property
    @pulumi.getter
    def shape(self) -> str:
        """
        Shape of VM Cluster.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="sparseDiskgroupEnabled")
    def sparse_diskgroup_enabled(self) -> bool:
        """
        Use exadata sparse snapshots.
        """
        return pulumi.get(self, "sparse_diskgroup_enabled")

    @property
    @pulumi.getter(name="sshPublicKeys")
    def ssh_public_keys(self) -> Sequence[str]:
        """
        SSH public keys to be stored with cluster.
        """
        return pulumi.get(self, "ssh_public_keys")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        State of the cluster. 
         Possible values:
         STATE_UNSPECIFIED
        PROVISIONING
        AVAILABLE
        UPDATING
        TERMINATING
        TERMINATED
        FAILED
        MAINTENANCE_IN_PROGRESS
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="storageSizeGb")
    def storage_size_gb(self) -> int:
        """
        The storage allocation for the disk group, in gigabytes (GB).
        """
        return pulumi.get(self, "storage_size_gb")

    @property
    @pulumi.getter(name="systemVersion")
    def system_version(self) -> str:
        """
        Operating system version of the image.
        """
        return pulumi.get(self, "system_version")

    @property
    @pulumi.getter(name="timeZones")
    def time_zones(self) -> Sequence['outputs.GetCloudVmClusterPropertyTimeZoneResult']:
        """
        Represents a time zone from the
        [IANA Time Zone Database](https://www.iana.org/time-zones).
        """
        return pulumi.get(self, "time_zones")


@pulumi.output_type
class GetCloudVmClusterPropertyDiagnosticsDataCollectionOptionResult(dict):
    def __init__(__self__, *,
                 diagnostics_events_enabled: bool,
                 health_monitoring_enabled: bool,
                 incident_logs_enabled: bool):
        """
        :param bool diagnostics_events_enabled: Indicates whether diagnostic collection is enabled for the VM cluster
        :param bool health_monitoring_enabled: Indicates whether health monitoring is enabled for the VM cluster
        :param bool incident_logs_enabled: Indicates whether incident logs and trace collection are enabled for the VM
               cluster
        """
        pulumi.set(__self__, "diagnostics_events_enabled", diagnostics_events_enabled)
        pulumi.set(__self__, "health_monitoring_enabled", health_monitoring_enabled)
        pulumi.set(__self__, "incident_logs_enabled", incident_logs_enabled)

    @property
    @pulumi.getter(name="diagnosticsEventsEnabled")
    def diagnostics_events_enabled(self) -> bool:
        """
        Indicates whether diagnostic collection is enabled for the VM cluster
        """
        return pulumi.get(self, "diagnostics_events_enabled")

    @property
    @pulumi.getter(name="healthMonitoringEnabled")
    def health_monitoring_enabled(self) -> bool:
        """
        Indicates whether health monitoring is enabled for the VM cluster
        """
        return pulumi.get(self, "health_monitoring_enabled")

    @property
    @pulumi.getter(name="incidentLogsEnabled")
    def incident_logs_enabled(self) -> bool:
        """
        Indicates whether incident logs and trace collection are enabled for the VM
        cluster
        """
        return pulumi.get(self, "incident_logs_enabled")


@pulumi.output_type
class GetCloudVmClusterPropertyTimeZoneResult(dict):
    def __init__(__self__, *,
                 id: str):
        """
        :param str id: IANA Time Zone Database time zone, e.g. "America/New_York".
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        IANA Time Zone Database time zone, e.g. "America/New_York".
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetCloudVmClustersCloudVmClusterResult(dict):
    def __init__(__self__, *,
                 backup_subnet_cidr: str,
                 cidr: str,
                 cloud_vm_cluster_id: str,
                 create_time: str,
                 display_name: str,
                 effective_labels: Mapping[str, str],
                 exadata_infrastructure: str,
                 gcp_oracle_zone: str,
                 labels: Mapping[str, str],
                 location: str,
                 name: str,
                 network: str,
                 project: str,
                 properties: Sequence['outputs.GetCloudVmClustersCloudVmClusterPropertyResult'],
                 pulumi_labels: Mapping[str, str]):
        """
        :param str backup_subnet_cidr: CIDR range of the backup subnet.
        :param str cidr: Network settings. CIDR to use for cluster IP allocation.
        :param str cloud_vm_cluster_id: The ID of the VM Cluster to create. This value is restricted
               to (^a-z?$) and must be a maximum of 63
               characters in length. The value must start with a letter and end with
               a letter or a number.
        :param str create_time: The date and time that the VM cluster was created.
        :param str display_name: User friendly name for this resource.
        :param str exadata_infrastructure: The name of the Exadata Infrastructure resource on which VM cluster
               resource is created, in the following format:
               projects/{project}/locations/{region}/cloudExadataInfrastuctures/{cloud_extradata_infrastructure}
        :param str gcp_oracle_zone: GCP location where Oracle Exadata is hosted. It is same as GCP Oracle zone
               of Exadata infrastructure.
        :param Mapping[str, str] labels: Labels or tags associated with the VM Cluster. 
               
               **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
               Please refer to the field 'effective_labels' for all of the labels present on the resource.
        :param str location: The location of the resource.
               
               - - -
        :param str name: Identifier. The name of the VM Cluster resource with the format:
               projects/{project}/locations/{region}/cloudVmClusters/{cloud_vm_cluster}
        :param str network: The name of the VPC network.
               Format: projects/{project}/global/networks/{network}
        :param str project: The project to which the resource belongs. If it
               is not provided, the provider project is used.
        :param Sequence['GetCloudVmClustersCloudVmClusterPropertyArgs'] properties: Various properties and settings associated with Exadata VM cluster.
        :param Mapping[str, str] pulumi_labels: The combination of labels configured directly on the resource
                and default labels configured on the provider.
        """
        pulumi.set(__self__, "backup_subnet_cidr", backup_subnet_cidr)
        pulumi.set(__self__, "cidr", cidr)
        pulumi.set(__self__, "cloud_vm_cluster_id", cloud_vm_cluster_id)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "effective_labels", effective_labels)
        pulumi.set(__self__, "exadata_infrastructure", exadata_infrastructure)
        pulumi.set(__self__, "gcp_oracle_zone", gcp_oracle_zone)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "network", network)
        pulumi.set(__self__, "project", project)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "pulumi_labels", pulumi_labels)

    @property
    @pulumi.getter(name="backupSubnetCidr")
    def backup_subnet_cidr(self) -> str:
        """
        CIDR range of the backup subnet.
        """
        return pulumi.get(self, "backup_subnet_cidr")

    @property
    @pulumi.getter
    def cidr(self) -> str:
        """
        Network settings. CIDR to use for cluster IP allocation.
        """
        return pulumi.get(self, "cidr")

    @property
    @pulumi.getter(name="cloudVmClusterId")
    def cloud_vm_cluster_id(self) -> str:
        """
        The ID of the VM Cluster to create. This value is restricted
        to (^a-z?$) and must be a maximum of 63
        characters in length. The value must start with a letter and end with
        a letter or a number.
        """
        return pulumi.get(self, "cloud_vm_cluster_id")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The date and time that the VM cluster was created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        User friendly name for this resource.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="effectiveLabels")
    def effective_labels(self) -> Mapping[str, str]:
        return pulumi.get(self, "effective_labels")

    @property
    @pulumi.getter(name="exadataInfrastructure")
    def exadata_infrastructure(self) -> str:
        """
        The name of the Exadata Infrastructure resource on which VM cluster
        resource is created, in the following format:
        projects/{project}/locations/{region}/cloudExadataInfrastuctures/{cloud_extradata_infrastructure}
        """
        return pulumi.get(self, "exadata_infrastructure")

    @property
    @pulumi.getter(name="gcpOracleZone")
    def gcp_oracle_zone(self) -> str:
        """
        GCP location where Oracle Exadata is hosted. It is same as GCP Oracle zone
        of Exadata infrastructure.
        """
        return pulumi.get(self, "gcp_oracle_zone")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        """
        Labels or tags associated with the VM Cluster. 

        **Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
        Please refer to the field 'effective_labels' for all of the labels present on the resource.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The location of the resource.

        - - -
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Identifier. The name of the VM Cluster resource with the format:
        projects/{project}/locations/{region}/cloudVmClusters/{cloud_vm_cluster}
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def network(self) -> str:
        """
        The name of the VPC network.
        Format: projects/{project}/global/networks/{network}
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter
    def project(self) -> str:
        """
        The project to which the resource belongs. If it
        is not provided, the provider project is used.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def properties(self) -> Sequence['outputs.GetCloudVmClustersCloudVmClusterPropertyResult']:
        """
        Various properties and settings associated with Exadata VM cluster.
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="pulumiLabels")
    def pulumi_labels(self) -> Mapping[str, str]:
        """
        The combination of labels configured directly on the resource
         and default labels configured on the provider.
        """
        return pulumi.get(self, "pulumi_labels")


@pulumi.output_type
class GetCloudVmClustersCloudVmClusterPropertyResult(dict):
    def __init__(__self__, *,
                 cluster_name: str,
                 compartment_id: str,
                 cpu_core_count: int,
                 data_storage_size_tb: float,
                 db_node_storage_size_gb: int,
                 db_server_ocids: Sequence[str],
                 diagnostics_data_collection_options: Sequence['outputs.GetCloudVmClustersCloudVmClusterPropertyDiagnosticsDataCollectionOptionResult'],
                 disk_redundancy: str,
                 dns_listener_ip: str,
                 domain: str,
                 gi_version: str,
                 hostname: str,
                 hostname_prefix: str,
                 license_type: str,
                 local_backup_enabled: bool,
                 memory_size_gb: int,
                 node_count: int,
                 oci_url: str,
                 ocid: str,
                 ocpu_count: float,
                 scan_dns: str,
                 scan_dns_record_id: str,
                 scan_ip_ids: Sequence[str],
                 scan_listener_port_tcp: int,
                 scan_listener_port_tcp_ssl: int,
                 shape: str,
                 sparse_diskgroup_enabled: bool,
                 ssh_public_keys: Sequence[str],
                 state: str,
                 storage_size_gb: int,
                 system_version: str,
                 time_zones: Sequence['outputs.GetCloudVmClustersCloudVmClusterPropertyTimeZoneResult']):
        """
        :param str cluster_name: OCI Cluster name.
        :param str compartment_id: Compartment ID of cluster.
        :param int cpu_core_count: Number of enabled CPU cores.
        :param float data_storage_size_tb: The data disk group size to be allocated in TBs.
        :param int db_node_storage_size_gb: Local storage per VM
        :param Sequence[str] db_server_ocids: OCID of database servers.
        :param Sequence['GetCloudVmClustersCloudVmClusterPropertyDiagnosticsDataCollectionOptionArgs'] diagnostics_data_collection_options: Data collection options for diagnostics.
        :param str disk_redundancy: The type of redundancy. 
                Possible values:
                DISK_REDUNDANCY_UNSPECIFIED
               HIGH
               NORMAL
        :param str dns_listener_ip: DNS listener IP.
        :param str domain: Parent DNS domain where SCAN DNS and hosts names are qualified.
               ex: ocispdelegated.ocisp10jvnet.oraclevcn.com
        :param str gi_version: Grid Infrastructure Version.
        :param str hostname: host name without domain.
               format: "-" with some suffix.
               ex: sp2-yi0xq where "sp2" is the hostname_prefix.
        :param str hostname_prefix: Prefix for VM cluster host names.
        :param str license_type: License type of VM Cluster. 
                Possible values:
                LICENSE_TYPE_UNSPECIFIED
               LICENSE_INCLUDED
               BRING_YOUR_OWN_LICENSE
        :param bool local_backup_enabled: Use local backup.
        :param int memory_size_gb: Memory allocated in GBs.
        :param int node_count: Number of database servers.
        :param str oci_url: Deep link to the OCI console to view this resource.
        :param str ocid: Oracle Cloud Infrastructure ID of VM Cluster.
        :param float ocpu_count: OCPU count per VM. Minimum is 0.1.
        :param str scan_dns: SCAN DNS name.
               ex: sp2-yi0xq-scan.ocispdelegated.ocisp10jvnet.oraclevcn.com
        :param str scan_dns_record_id: OCID of scan DNS record.
        :param Sequence[str] scan_ip_ids: OCIDs of scan IPs.
        :param int scan_listener_port_tcp: SCAN listener port - TCP
        :param int scan_listener_port_tcp_ssl: SCAN listener port - TLS
        :param str shape: Shape of VM Cluster.
        :param bool sparse_diskgroup_enabled: Use exadata sparse snapshots.
        :param Sequence[str] ssh_public_keys: SSH public keys to be stored with cluster.
        :param str state: State of the cluster. 
                Possible values:
                STATE_UNSPECIFIED
               PROVISIONING
               AVAILABLE
               UPDATING
               TERMINATING
               TERMINATED
               FAILED
               MAINTENANCE_IN_PROGRESS
        :param int storage_size_gb: The storage allocation for the disk group, in gigabytes (GB).
        :param str system_version: Operating system version of the image.
        :param Sequence['GetCloudVmClustersCloudVmClusterPropertyTimeZoneArgs'] time_zones: Represents a time zone from the
               [IANA Time Zone Database](https://www.iana.org/time-zones).
        """
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "cpu_core_count", cpu_core_count)
        pulumi.set(__self__, "data_storage_size_tb", data_storage_size_tb)
        pulumi.set(__self__, "db_node_storage_size_gb", db_node_storage_size_gb)
        pulumi.set(__self__, "db_server_ocids", db_server_ocids)
        pulumi.set(__self__, "diagnostics_data_collection_options", diagnostics_data_collection_options)
        pulumi.set(__self__, "disk_redundancy", disk_redundancy)
        pulumi.set(__self__, "dns_listener_ip", dns_listener_ip)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "gi_version", gi_version)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "hostname_prefix", hostname_prefix)
        pulumi.set(__self__, "license_type", license_type)
        pulumi.set(__self__, "local_backup_enabled", local_backup_enabled)
        pulumi.set(__self__, "memory_size_gb", memory_size_gb)
        pulumi.set(__self__, "node_count", node_count)
        pulumi.set(__self__, "oci_url", oci_url)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ocpu_count", ocpu_count)
        pulumi.set(__self__, "scan_dns", scan_dns)
        pulumi.set(__self__, "scan_dns_record_id", scan_dns_record_id)
        pulumi.set(__self__, "scan_ip_ids", scan_ip_ids)
        pulumi.set(__self__, "scan_listener_port_tcp", scan_listener_port_tcp)
        pulumi.set(__self__, "scan_listener_port_tcp_ssl", scan_listener_port_tcp_ssl)
        pulumi.set(__self__, "shape", shape)
        pulumi.set(__self__, "sparse_diskgroup_enabled", sparse_diskgroup_enabled)
        pulumi.set(__self__, "ssh_public_keys", ssh_public_keys)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "storage_size_gb", storage_size_gb)
        pulumi.set(__self__, "system_version", system_version)
        pulumi.set(__self__, "time_zones", time_zones)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        """
        OCI Cluster name.
        """
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        Compartment ID of cluster.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="cpuCoreCount")
    def cpu_core_count(self) -> int:
        """
        Number of enabled CPU cores.
        """
        return pulumi.get(self, "cpu_core_count")

    @property
    @pulumi.getter(name="dataStorageSizeTb")
    def data_storage_size_tb(self) -> float:
        """
        The data disk group size to be allocated in TBs.
        """
        return pulumi.get(self, "data_storage_size_tb")

    @property
    @pulumi.getter(name="dbNodeStorageSizeGb")
    def db_node_storage_size_gb(self) -> int:
        """
        Local storage per VM
        """
        return pulumi.get(self, "db_node_storage_size_gb")

    @property
    @pulumi.getter(name="dbServerOcids")
    def db_server_ocids(self) -> Sequence[str]:
        """
        OCID of database servers.
        """
        return pulumi.get(self, "db_server_ocids")

    @property
    @pulumi.getter(name="diagnosticsDataCollectionOptions")
    def diagnostics_data_collection_options(self) -> Sequence['outputs.GetCloudVmClustersCloudVmClusterPropertyDiagnosticsDataCollectionOptionResult']:
        """
        Data collection options for diagnostics.
        """
        return pulumi.get(self, "diagnostics_data_collection_options")

    @property
    @pulumi.getter(name="diskRedundancy")
    def disk_redundancy(self) -> str:
        """
        The type of redundancy. 
         Possible values:
         DISK_REDUNDANCY_UNSPECIFIED
        HIGH
        NORMAL
        """
        return pulumi.get(self, "disk_redundancy")

    @property
    @pulumi.getter(name="dnsListenerIp")
    def dns_listener_ip(self) -> str:
        """
        DNS listener IP.
        """
        return pulumi.get(self, "dns_listener_ip")

    @property
    @pulumi.getter
    def domain(self) -> str:
        """
        Parent DNS domain where SCAN DNS and hosts names are qualified.
        ex: ocispdelegated.ocisp10jvnet.oraclevcn.com
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="giVersion")
    def gi_version(self) -> str:
        """
        Grid Infrastructure Version.
        """
        return pulumi.get(self, "gi_version")

    @property
    @pulumi.getter
    def hostname(self) -> str:
        """
        host name without domain.
        format: "-" with some suffix.
        ex: sp2-yi0xq where "sp2" is the hostname_prefix.
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="hostnamePrefix")
    def hostname_prefix(self) -> str:
        """
        Prefix for VM cluster host names.
        """
        return pulumi.get(self, "hostname_prefix")

    @property
    @pulumi.getter(name="licenseType")
    def license_type(self) -> str:
        """
        License type of VM Cluster. 
         Possible values:
         LICENSE_TYPE_UNSPECIFIED
        LICENSE_INCLUDED
        BRING_YOUR_OWN_LICENSE
        """
        return pulumi.get(self, "license_type")

    @property
    @pulumi.getter(name="localBackupEnabled")
    def local_backup_enabled(self) -> bool:
        """
        Use local backup.
        """
        return pulumi.get(self, "local_backup_enabled")

    @property
    @pulumi.getter(name="memorySizeGb")
    def memory_size_gb(self) -> int:
        """
        Memory allocated in GBs.
        """
        return pulumi.get(self, "memory_size_gb")

    @property
    @pulumi.getter(name="nodeCount")
    def node_count(self) -> int:
        """
        Number of database servers.
        """
        return pulumi.get(self, "node_count")

    @property
    @pulumi.getter(name="ociUrl")
    def oci_url(self) -> str:
        """
        Deep link to the OCI console to view this resource.
        """
        return pulumi.get(self, "oci_url")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        Oracle Cloud Infrastructure ID of VM Cluster.
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter(name="ocpuCount")
    def ocpu_count(self) -> float:
        """
        OCPU count per VM. Minimum is 0.1.
        """
        return pulumi.get(self, "ocpu_count")

    @property
    @pulumi.getter(name="scanDns")
    def scan_dns(self) -> str:
        """
        SCAN DNS name.
        ex: sp2-yi0xq-scan.ocispdelegated.ocisp10jvnet.oraclevcn.com
        """
        return pulumi.get(self, "scan_dns")

    @property
    @pulumi.getter(name="scanDnsRecordId")
    def scan_dns_record_id(self) -> str:
        """
        OCID of scan DNS record.
        """
        return pulumi.get(self, "scan_dns_record_id")

    @property
    @pulumi.getter(name="scanIpIds")
    def scan_ip_ids(self) -> Sequence[str]:
        """
        OCIDs of scan IPs.
        """
        return pulumi.get(self, "scan_ip_ids")

    @property
    @pulumi.getter(name="scanListenerPortTcp")
    def scan_listener_port_tcp(self) -> int:
        """
        SCAN listener port - TCP
        """
        return pulumi.get(self, "scan_listener_port_tcp")

    @property
    @pulumi.getter(name="scanListenerPortTcpSsl")
    def scan_listener_port_tcp_ssl(self) -> int:
        """
        SCAN listener port - TLS
        """
        return pulumi.get(self, "scan_listener_port_tcp_ssl")

    @property
    @pulumi.getter
    def shape(self) -> str:
        """
        Shape of VM Cluster.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="sparseDiskgroupEnabled")
    def sparse_diskgroup_enabled(self) -> bool:
        """
        Use exadata sparse snapshots.
        """
        return pulumi.get(self, "sparse_diskgroup_enabled")

    @property
    @pulumi.getter(name="sshPublicKeys")
    def ssh_public_keys(self) -> Sequence[str]:
        """
        SSH public keys to be stored with cluster.
        """
        return pulumi.get(self, "ssh_public_keys")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        State of the cluster. 
         Possible values:
         STATE_UNSPECIFIED
        PROVISIONING
        AVAILABLE
        UPDATING
        TERMINATING
        TERMINATED
        FAILED
        MAINTENANCE_IN_PROGRESS
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="storageSizeGb")
    def storage_size_gb(self) -> int:
        """
        The storage allocation for the disk group, in gigabytes (GB).
        """
        return pulumi.get(self, "storage_size_gb")

    @property
    @pulumi.getter(name="systemVersion")
    def system_version(self) -> str:
        """
        Operating system version of the image.
        """
        return pulumi.get(self, "system_version")

    @property
    @pulumi.getter(name="timeZones")
    def time_zones(self) -> Sequence['outputs.GetCloudVmClustersCloudVmClusterPropertyTimeZoneResult']:
        """
        Represents a time zone from the
        [IANA Time Zone Database](https://www.iana.org/time-zones).
        """
        return pulumi.get(self, "time_zones")


@pulumi.output_type
class GetCloudVmClustersCloudVmClusterPropertyDiagnosticsDataCollectionOptionResult(dict):
    def __init__(__self__, *,
                 diagnostics_events_enabled: bool,
                 health_monitoring_enabled: bool,
                 incident_logs_enabled: bool):
        """
        :param bool diagnostics_events_enabled: Indicates whether diagnostic collection is enabled for the VM cluster
        :param bool health_monitoring_enabled: Indicates whether health monitoring is enabled for the VM cluster
        :param bool incident_logs_enabled: Indicates whether incident logs and trace collection are enabled for the VM
               cluster
        """
        pulumi.set(__self__, "diagnostics_events_enabled", diagnostics_events_enabled)
        pulumi.set(__self__, "health_monitoring_enabled", health_monitoring_enabled)
        pulumi.set(__self__, "incident_logs_enabled", incident_logs_enabled)

    @property
    @pulumi.getter(name="diagnosticsEventsEnabled")
    def diagnostics_events_enabled(self) -> bool:
        """
        Indicates whether diagnostic collection is enabled for the VM cluster
        """
        return pulumi.get(self, "diagnostics_events_enabled")

    @property
    @pulumi.getter(name="healthMonitoringEnabled")
    def health_monitoring_enabled(self) -> bool:
        """
        Indicates whether health monitoring is enabled for the VM cluster
        """
        return pulumi.get(self, "health_monitoring_enabled")

    @property
    @pulumi.getter(name="incidentLogsEnabled")
    def incident_logs_enabled(self) -> bool:
        """
        Indicates whether incident logs and trace collection are enabled for the VM
        cluster
        """
        return pulumi.get(self, "incident_logs_enabled")


@pulumi.output_type
class GetCloudVmClustersCloudVmClusterPropertyTimeZoneResult(dict):
    def __init__(__self__, *,
                 id: str):
        """
        :param str id: IANA Time Zone Database time zone, e.g. "America/New_York".
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        IANA Time Zone Database time zone, e.g. "America/New_York".
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetDbNodesDbNodeResult(dict):
    def __init__(__self__, *,
                 name: str,
                 properties: Sequence['outputs.GetDbNodesDbNodePropertyResult']):
        """
        :param str name: The dbnode name
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The dbnode name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Sequence['outputs.GetDbNodesDbNodePropertyResult']:
        return pulumi.get(self, "properties")


@pulumi.output_type
class GetDbNodesDbNodePropertyResult(dict):
    def __init__(__self__, *,
                 db_node_storage_size_gb: int,
                 db_server_ocid: str,
                 hostname: str,
                 memory_size_gb: int,
                 ocid: str,
                 ocpu_count: int,
                 state: str,
                 total_cpu_core_count: int):
        """
        :param int db_node_storage_size_gb: Output only
        :param str db_server_ocid: Output only
        :param str hostname: Output only
        :param int memory_size_gb: Output only
        :param str ocid: Output only
        :param int ocpu_count: Output only
        :param str state: Output only
        :param int total_cpu_core_count: Output only
        """
        pulumi.set(__self__, "db_node_storage_size_gb", db_node_storage_size_gb)
        pulumi.set(__self__, "db_server_ocid", db_server_ocid)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "memory_size_gb", memory_size_gb)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ocpu_count", ocpu_count)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "total_cpu_core_count", total_cpu_core_count)

    @property
    @pulumi.getter(name="dbNodeStorageSizeGb")
    def db_node_storage_size_gb(self) -> int:
        """
        Output only
        """
        return pulumi.get(self, "db_node_storage_size_gb")

    @property
    @pulumi.getter(name="dbServerOcid")
    def db_server_ocid(self) -> str:
        """
        Output only
        """
        return pulumi.get(self, "db_server_ocid")

    @property
    @pulumi.getter
    def hostname(self) -> str:
        """
        Output only
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="memorySizeGb")
    def memory_size_gb(self) -> int:
        """
        Output only
        """
        return pulumi.get(self, "memory_size_gb")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        Output only
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter(name="ocpuCount")
    def ocpu_count(self) -> int:
        """
        Output only
        """
        return pulumi.get(self, "ocpu_count")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Output only
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="totalCpuCoreCount")
    def total_cpu_core_count(self) -> int:
        """
        Output only
        """
        return pulumi.get(self, "total_cpu_core_count")


@pulumi.output_type
class GetDbServersDbServerResult(dict):
    def __init__(__self__, *,
                 display_name: str,
                 properties: Sequence['outputs.GetDbServersDbServerPropertyResult']):
        """
        :param str display_name: The Display name
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The Display name
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def properties(self) -> Sequence['outputs.GetDbServersDbServerPropertyResult']:
        return pulumi.get(self, "properties")


@pulumi.output_type
class GetDbServersDbServerPropertyResult(dict):
    def __init__(__self__, *,
                 db_node_ids: Sequence[str],
                 db_node_storage_size_gb: int,
                 max_db_node_storage_size_gb: int,
                 max_memory_size_gb: int,
                 max_ocpu_count: int,
                 memory_size_gb: int,
                 ocid: str,
                 ocpu_count: int,
                 state: str,
                 vm_count: int):
        """
        :param Sequence[str] db_node_ids: Output only
        :param int db_node_storage_size_gb: Output only
        :param int max_db_node_storage_size_gb: Output only
        :param int max_memory_size_gb: Output only
        :param int max_ocpu_count: Output only
        :param int memory_size_gb: Output only
        :param str ocid: Output only
        :param int ocpu_count: Output only
        :param str state: Output only
        :param int vm_count: Output only
        """
        pulumi.set(__self__, "db_node_ids", db_node_ids)
        pulumi.set(__self__, "db_node_storage_size_gb", db_node_storage_size_gb)
        pulumi.set(__self__, "max_db_node_storage_size_gb", max_db_node_storage_size_gb)
        pulumi.set(__self__, "max_memory_size_gb", max_memory_size_gb)
        pulumi.set(__self__, "max_ocpu_count", max_ocpu_count)
        pulumi.set(__self__, "memory_size_gb", memory_size_gb)
        pulumi.set(__self__, "ocid", ocid)
        pulumi.set(__self__, "ocpu_count", ocpu_count)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "vm_count", vm_count)

    @property
    @pulumi.getter(name="dbNodeIds")
    def db_node_ids(self) -> Sequence[str]:
        """
        Output only
        """
        return pulumi.get(self, "db_node_ids")

    @property
    @pulumi.getter(name="dbNodeStorageSizeGb")
    def db_node_storage_size_gb(self) -> int:
        """
        Output only
        """
        return pulumi.get(self, "db_node_storage_size_gb")

    @property
    @pulumi.getter(name="maxDbNodeStorageSizeGb")
    def max_db_node_storage_size_gb(self) -> int:
        """
        Output only
        """
        return pulumi.get(self, "max_db_node_storage_size_gb")

    @property
    @pulumi.getter(name="maxMemorySizeGb")
    def max_memory_size_gb(self) -> int:
        """
        Output only
        """
        return pulumi.get(self, "max_memory_size_gb")

    @property
    @pulumi.getter(name="maxOcpuCount")
    def max_ocpu_count(self) -> int:
        """
        Output only
        """
        return pulumi.get(self, "max_ocpu_count")

    @property
    @pulumi.getter(name="memorySizeGb")
    def memory_size_gb(self) -> int:
        """
        Output only
        """
        return pulumi.get(self, "memory_size_gb")

    @property
    @pulumi.getter
    def ocid(self) -> str:
        """
        Output only
        """
        return pulumi.get(self, "ocid")

    @property
    @pulumi.getter(name="ocpuCount")
    def ocpu_count(self) -> int:
        """
        Output only
        """
        return pulumi.get(self, "ocpu_count")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Output only
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="vmCount")
    def vm_count(self) -> int:
        """
        Output only
        """
        return pulumi.get(self, "vm_count")


