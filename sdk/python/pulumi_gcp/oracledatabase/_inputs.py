# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'AutonomousDatabasePropertiesArgs',
    'AutonomousDatabasePropertiesArgsDict',
    'AutonomousDatabasePropertiesApexDetailArgs',
    'AutonomousDatabasePropertiesApexDetailArgsDict',
    'AutonomousDatabasePropertiesConnectionStringArgs',
    'AutonomousDatabasePropertiesConnectionStringArgsDict',
    'AutonomousDatabasePropertiesConnectionStringAllConnectionStringArgs',
    'AutonomousDatabasePropertiesConnectionStringAllConnectionStringArgsDict',
    'AutonomousDatabasePropertiesConnectionStringProfileArgs',
    'AutonomousDatabasePropertiesConnectionStringProfileArgsDict',
    'AutonomousDatabasePropertiesConnectionUrlArgs',
    'AutonomousDatabasePropertiesConnectionUrlArgsDict',
    'AutonomousDatabasePropertiesCustomerContactArgs',
    'AutonomousDatabasePropertiesCustomerContactArgsDict',
    'AutonomousDatabasePropertiesLocalStandbyDbArgs',
    'AutonomousDatabasePropertiesLocalStandbyDbArgsDict',
    'AutonomousDatabasePropertiesScheduledOperationDetailArgs',
    'AutonomousDatabasePropertiesScheduledOperationDetailArgsDict',
    'AutonomousDatabasePropertiesScheduledOperationDetailStartTimeArgs',
    'AutonomousDatabasePropertiesScheduledOperationDetailStartTimeArgsDict',
    'AutonomousDatabasePropertiesScheduledOperationDetailStopTimeArgs',
    'AutonomousDatabasePropertiesScheduledOperationDetailStopTimeArgsDict',
    'CloudExadataInfrastructurePropertiesArgs',
    'CloudExadataInfrastructurePropertiesArgsDict',
    'CloudExadataInfrastructurePropertiesCustomerContactArgs',
    'CloudExadataInfrastructurePropertiesCustomerContactArgsDict',
    'CloudExadataInfrastructurePropertiesMaintenanceWindowArgs',
    'CloudExadataInfrastructurePropertiesMaintenanceWindowArgsDict',
    'CloudVmClusterPropertiesArgs',
    'CloudVmClusterPropertiesArgsDict',
    'CloudVmClusterPropertiesDiagnosticsDataCollectionOptionsArgs',
    'CloudVmClusterPropertiesDiagnosticsDataCollectionOptionsArgsDict',
    'CloudVmClusterPropertiesTimeZoneArgs',
    'CloudVmClusterPropertiesTimeZoneArgsDict',
]

MYPY = False

if not MYPY:
    class AutonomousDatabasePropertiesArgsDict(TypedDict):
        db_workload: pulumi.Input[str]
        """
        Possible values:
        DB_WORKLOAD_UNSPECIFIED
        OLTP
        DW
        AJD
        APEX
        """
        license_type: pulumi.Input[str]
        """
        The license type used for the Autonomous Database.
        Possible values:
        LICENSE_TYPE_UNSPECIFIED
        LICENSE_INCLUDED
        BRING_YOUR_OWN_LICENSE
        """
        actual_used_data_storage_size_tb: NotRequired[pulumi.Input[float]]
        """
        (Output)
        The amount of storage currently being used for user and system data, in
        terabytes.
        """
        allocated_storage_size_tb: NotRequired[pulumi.Input[float]]
        """
        (Output)
        The amount of storage currently allocated for the database tables and
        billed for, rounded up in terabytes.
        """
        apex_details: NotRequired[pulumi.Input[Sequence[pulumi.Input['AutonomousDatabasePropertiesApexDetailArgsDict']]]]
        """
        (Output)
        Oracle APEX Application Development.
        https://docs.oracle.com/en-us/iaas/api/#/en/database/20160918/datatypes/AutonomousDatabaseApex
        Structure is documented below.
        """
        are_primary_allowlisted_ips_used: NotRequired[pulumi.Input[bool]]
        """
        (Output)
        This field indicates the status of Data Guard and Access control for the
        Autonomous Database. The field's value is null if Data Guard is disabled
        or Access Control is disabled. The field's value is TRUE if both Data Guard
        and Access Control are enabled, and the Autonomous Database is using
        primary IP access control list (ACL) for standby. The field's value is
        FALSE if both Data Guard and Access Control are enabled, and the Autonomous
        Database is using a different IP access control list (ACL) for standby
        compared to primary.
        """
        autonomous_container_database_id: NotRequired[pulumi.Input[str]]
        """
        (Output)
        The Autonomous Container Database OCID.
        """
        available_upgrade_versions: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        (Output)
        The list of available Oracle Database upgrade versions for an Autonomous
        Database.
        """
        backup_retention_period_days: NotRequired[pulumi.Input[int]]
        """
        The retention period for the Autonomous Database. This field is specified
        in days, can range from 1 day to 60 days, and has a default value of
        60 days.
        """
        character_set: NotRequired[pulumi.Input[str]]
        """
        The character set for the Autonomous Database. The default is AL32UTF8.
        """
        compute_count: NotRequired[pulumi.Input[float]]
        """
        The number of compute servers for the Autonomous Database.
        """
        connection_strings: NotRequired[pulumi.Input[Sequence[pulumi.Input['AutonomousDatabasePropertiesConnectionStringArgsDict']]]]
        """
        (Output)
        The connection string used to connect to the Autonomous Database.
        https://docs.oracle.com/en-us/iaas/api/#/en/database/20160918/datatypes/AutonomousDatabaseConnectionStrings
        Structure is documented below.
        """
        connection_urls: NotRequired[pulumi.Input[Sequence[pulumi.Input['AutonomousDatabasePropertiesConnectionUrlArgsDict']]]]
        """
        (Output)
        The URLs for accessing Oracle Application Express (APEX) and SQL Developer
        Web with a browser from a Compute instance.
        https://docs.oracle.com/en-us/iaas/api/#/en/database/20160918/datatypes/AutonomousDatabaseConnectionUrls
        Structure is documented below.
        """
        customer_contacts: NotRequired[pulumi.Input[Sequence[pulumi.Input['AutonomousDatabasePropertiesCustomerContactArgsDict']]]]
        """
        The list of customer contacts.
        Structure is documented below.
        """
        data_safe_state: NotRequired[pulumi.Input[str]]
        """
        (Output)
        The current state of the Data Safe registration for the
        Autonomous Database.
        Possible values:
        DATA_SAFE_STATE_UNSPECIFIED
        REGISTERING
        REGISTERED
        DEREGISTERING
        NOT_REGISTERED
        FAILED
        """
        data_storage_size_gb: NotRequired[pulumi.Input[int]]
        """
        The size of the data stored in the database, in gigabytes.
        """
        data_storage_size_tb: NotRequired[pulumi.Input[int]]
        """
        The size of the data stored in the database, in terabytes.
        """
        database_management_state: NotRequired[pulumi.Input[str]]
        """
        (Output)
        The current state of database management for the Autonomous Database.
        Possible values:
        DATABASE_MANAGEMENT_STATE_UNSPECIFIED
        ENABLING
        ENABLED
        DISABLING
        NOT_ENABLED
        FAILED_ENABLING
        FAILED_DISABLING
        """
        db_edition: NotRequired[pulumi.Input[str]]
        """
        The edition of the Autonomous Databases.
        Possible values:
        DATABASE_EDITION_UNSPECIFIED
        STANDARD_EDITION
        ENTERPRISE_EDITION
        """
        db_version: NotRequired[pulumi.Input[str]]
        """
        The Oracle Database version for the Autonomous Database.
        """
        failed_data_recovery_duration: NotRequired[pulumi.Input[str]]
        """
        (Output)
        This field indicates the number of seconds of data loss during a Data
        Guard failover.
        """
        is_auto_scaling_enabled: NotRequired[pulumi.Input[bool]]
        """
        This field indicates if auto scaling is enabled for the Autonomous Database
        CPU core count.
        """
        is_local_data_guard_enabled: NotRequired[pulumi.Input[bool]]
        """
        (Output)
        This field indicates whether the Autonomous Database has local (in-region)
        Data Guard enabled.
        """
        is_storage_auto_scaling_enabled: NotRequired[pulumi.Input[bool]]
        """
        This field indicates if auto scaling is enabled for the Autonomous Database
        storage.
        """
        lifecycle_details: NotRequired[pulumi.Input[str]]
        """
        (Output)
        The details of the current lifestyle state of the Autonomous Database.
        """
        local_adg_auto_failover_max_data_loss_limit: NotRequired[pulumi.Input[int]]
        """
        (Output)
        This field indicates the maximum data loss limit for an Autonomous
        Database, in seconds.
        """
        local_disaster_recovery_type: NotRequired[pulumi.Input[str]]
        """
        (Output)
        This field indicates the local disaster recovery (DR) type of an
        Autonomous Database.
        Possible values:
        LOCAL_DISASTER_RECOVERY_TYPE_UNSPECIFIED
        ADG
        BACKUP_BASED
        """
        local_standby_dbs: NotRequired[pulumi.Input[Sequence[pulumi.Input['AutonomousDatabasePropertiesLocalStandbyDbArgsDict']]]]
        """
        (Output)
        Autonomous Data Guard standby database details.
        https://docs.oracle.com/en-us/iaas/api/#/en/database/20160918/datatypes/AutonomousDatabaseStandbySummary
        Structure is documented below.
        """
        maintenance_begin_time: NotRequired[pulumi.Input[str]]
        """
        (Output)
        The date and time when maintenance will begin.
        """
        maintenance_end_time: NotRequired[pulumi.Input[str]]
        """
        (Output)
        The date and time when maintenance will end.
        """
        maintenance_schedule_type: NotRequired[pulumi.Input[str]]
        """
        The maintenance schedule of the Autonomous Database.
        Possible values:
        MAINTENANCE_SCHEDULE_TYPE_UNSPECIFIED
        EARLY
        REGULAR
        """
        memory_per_oracle_compute_unit_gbs: NotRequired[pulumi.Input[int]]
        """
        (Output)
        The amount of memory enabled per ECPU, in gigabytes.
        """
        memory_table_gbs: NotRequired[pulumi.Input[int]]
        """
        (Output)
        The memory assigned to in-memory tables in an Autonomous Database.
        """
        mtls_connection_required: NotRequired[pulumi.Input[bool]]
        """
        This field specifies if the Autonomous Database requires mTLS connections.
        """
        n_character_set: NotRequired[pulumi.Input[str]]
        """
        The national character set for the Autonomous Database. The default is
        AL16UTF16.
        """
        next_long_term_backup_time: NotRequired[pulumi.Input[str]]
        """
        (Output)
        The long term backup schedule of the Autonomous Database.
        """
        oci_url: NotRequired[pulumi.Input[str]]
        """
        (Output)
        The Oracle Cloud Infrastructure link for the Autonomous Database.
        """
        ocid: NotRequired[pulumi.Input[str]]
        """
        (Output)
        OCID of the Autonomous Database.
        https://docs.oracle.com/en-us/iaas/Content/General/Concepts/identifiers.htm#Oracle
        """
        open_mode: NotRequired[pulumi.Input[str]]
        """
        (Output)
        This field indicates the current mode of the Autonomous Database.
        Possible values:
        OPEN_MODE_UNSPECIFIED
        READ_ONLY
        READ_WRITE
        """
        operations_insights_state: NotRequired[pulumi.Input[str]]
        """
        Possible values:
        OPERATIONS_INSIGHTS_STATE_UNSPECIFIED
        ENABLING
        ENABLED
        DISABLING
        NOT_ENABLED
        FAILED_ENABLING
        FAILED_DISABLING
        """
        peer_db_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        (Output)
        The list of OCIDs of standby databases located in Autonomous Data Guard
        remote regions that are associated with the source database.
        """
        permission_level: NotRequired[pulumi.Input[str]]
        """
        (Output)
        The permission level of the Autonomous Database.
        Possible values:
        PERMISSION_LEVEL_UNSPECIFIED
        RESTRICTED
        UNRESTRICTED
        """
        private_endpoint: NotRequired[pulumi.Input[str]]
        """
        (Output)
        The private endpoint for the Autonomous Database.
        """
        private_endpoint_ip: NotRequired[pulumi.Input[str]]
        """
        The private endpoint IP address for the Autonomous Database.
        """
        private_endpoint_label: NotRequired[pulumi.Input[str]]
        """
        The private endpoint label for the Autonomous Database.
        """
        refreshable_mode: NotRequired[pulumi.Input[str]]
        """
        (Output)
        The refresh mode of the cloned Autonomous Database.
        Possible values:
        REFRESHABLE_MODE_UNSPECIFIED
        AUTOMATIC
        MANUAL
        """
        refreshable_state: NotRequired[pulumi.Input[str]]
        """
        (Output)
        The refresh State of the clone.
        Possible values:
        REFRESHABLE_STATE_UNSPECIFIED
        REFRESHING
        NOT_REFRESHING
        """
        role: NotRequired[pulumi.Input[str]]
        """
        (Output)
        The Data Guard role of the Autonomous Database.
        Possible values:
        ROLE_UNSPECIFIED
        PRIMARY
        STANDBY
        DISABLED_STANDBY
        BACKUP_COPY
        SNAPSHOT_STANDBY
        """
        scheduled_operation_details: NotRequired[pulumi.Input[Sequence[pulumi.Input['AutonomousDatabasePropertiesScheduledOperationDetailArgsDict']]]]
        """
        (Output)
        The list and details of the scheduled operations of the Autonomous
        Database.
        Structure is documented below.
        """
        sql_web_developer_url: NotRequired[pulumi.Input[str]]
        """
        (Output)
        The SQL Web Developer URL for the Autonomous Database.
        """
        state: NotRequired[pulumi.Input[str]]
        """
        (Output)
        Possible values:
        STATE_UNSPECIFIED
        PROVISIONING
        AVAILABLE
        STOPPING
        STOPPED
        STARTING
        TERMINATING
        TERMINATED
        UNAVAILABLE
        RESTORE_IN_PROGRESS
        RESTORE_FAILED
        BACKUP_IN_PROGRESS
        SCALE_IN_PROGRESS
        AVAILABLE_NEEDS_ATTENTION
        UPDATING
        MAINTENANCE_IN_PROGRESS
        RESTARTING
        RECREATING
        ROLE_CHANGE_IN_PROGRESS
        UPGRADING
        INACCESSIBLE
        STANDBY
        """
        supported_clone_regions: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        (Output)
        The list of available regions that can be used to create a clone for the
        Autonomous Database.
        """
        total_auto_backup_storage_size_gbs: NotRequired[pulumi.Input[float]]
        """
        (Output)
        The storage space used by automatic backups of Autonomous Database, in
        gigabytes.
        """
        used_data_storage_size_tbs: NotRequired[pulumi.Input[int]]
        """
        (Output)
        The storage space used by Autonomous Database, in gigabytes.
        """
elif False:
    AutonomousDatabasePropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AutonomousDatabasePropertiesArgs:
    def __init__(__self__, *,
                 db_workload: pulumi.Input[str],
                 license_type: pulumi.Input[str],
                 actual_used_data_storage_size_tb: Optional[pulumi.Input[float]] = None,
                 allocated_storage_size_tb: Optional[pulumi.Input[float]] = None,
                 apex_details: Optional[pulumi.Input[Sequence[pulumi.Input['AutonomousDatabasePropertiesApexDetailArgs']]]] = None,
                 are_primary_allowlisted_ips_used: Optional[pulumi.Input[bool]] = None,
                 autonomous_container_database_id: Optional[pulumi.Input[str]] = None,
                 available_upgrade_versions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 backup_retention_period_days: Optional[pulumi.Input[int]] = None,
                 character_set: Optional[pulumi.Input[str]] = None,
                 compute_count: Optional[pulumi.Input[float]] = None,
                 connection_strings: Optional[pulumi.Input[Sequence[pulumi.Input['AutonomousDatabasePropertiesConnectionStringArgs']]]] = None,
                 connection_urls: Optional[pulumi.Input[Sequence[pulumi.Input['AutonomousDatabasePropertiesConnectionUrlArgs']]]] = None,
                 customer_contacts: Optional[pulumi.Input[Sequence[pulumi.Input['AutonomousDatabasePropertiesCustomerContactArgs']]]] = None,
                 data_safe_state: Optional[pulumi.Input[str]] = None,
                 data_storage_size_gb: Optional[pulumi.Input[int]] = None,
                 data_storage_size_tb: Optional[pulumi.Input[int]] = None,
                 database_management_state: Optional[pulumi.Input[str]] = None,
                 db_edition: Optional[pulumi.Input[str]] = None,
                 db_version: Optional[pulumi.Input[str]] = None,
                 failed_data_recovery_duration: Optional[pulumi.Input[str]] = None,
                 is_auto_scaling_enabled: Optional[pulumi.Input[bool]] = None,
                 is_local_data_guard_enabled: Optional[pulumi.Input[bool]] = None,
                 is_storage_auto_scaling_enabled: Optional[pulumi.Input[bool]] = None,
                 lifecycle_details: Optional[pulumi.Input[str]] = None,
                 local_adg_auto_failover_max_data_loss_limit: Optional[pulumi.Input[int]] = None,
                 local_disaster_recovery_type: Optional[pulumi.Input[str]] = None,
                 local_standby_dbs: Optional[pulumi.Input[Sequence[pulumi.Input['AutonomousDatabasePropertiesLocalStandbyDbArgs']]]] = None,
                 maintenance_begin_time: Optional[pulumi.Input[str]] = None,
                 maintenance_end_time: Optional[pulumi.Input[str]] = None,
                 maintenance_schedule_type: Optional[pulumi.Input[str]] = None,
                 memory_per_oracle_compute_unit_gbs: Optional[pulumi.Input[int]] = None,
                 memory_table_gbs: Optional[pulumi.Input[int]] = None,
                 mtls_connection_required: Optional[pulumi.Input[bool]] = None,
                 n_character_set: Optional[pulumi.Input[str]] = None,
                 next_long_term_backup_time: Optional[pulumi.Input[str]] = None,
                 oci_url: Optional[pulumi.Input[str]] = None,
                 ocid: Optional[pulumi.Input[str]] = None,
                 open_mode: Optional[pulumi.Input[str]] = None,
                 operations_insights_state: Optional[pulumi.Input[str]] = None,
                 peer_db_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 permission_level: Optional[pulumi.Input[str]] = None,
                 private_endpoint: Optional[pulumi.Input[str]] = None,
                 private_endpoint_ip: Optional[pulumi.Input[str]] = None,
                 private_endpoint_label: Optional[pulumi.Input[str]] = None,
                 refreshable_mode: Optional[pulumi.Input[str]] = None,
                 refreshable_state: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 scheduled_operation_details: Optional[pulumi.Input[Sequence[pulumi.Input['AutonomousDatabasePropertiesScheduledOperationDetailArgs']]]] = None,
                 sql_web_developer_url: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 supported_clone_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 total_auto_backup_storage_size_gbs: Optional[pulumi.Input[float]] = None,
                 used_data_storage_size_tbs: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] db_workload: Possible values:
               DB_WORKLOAD_UNSPECIFIED
               OLTP
               DW
               AJD
               APEX
        :param pulumi.Input[str] license_type: The license type used for the Autonomous Database.
               Possible values:
               LICENSE_TYPE_UNSPECIFIED
               LICENSE_INCLUDED
               BRING_YOUR_OWN_LICENSE
        :param pulumi.Input[float] actual_used_data_storage_size_tb: (Output)
               The amount of storage currently being used for user and system data, in
               terabytes.
        :param pulumi.Input[float] allocated_storage_size_tb: (Output)
               The amount of storage currently allocated for the database tables and
               billed for, rounded up in terabytes.
        :param pulumi.Input[Sequence[pulumi.Input['AutonomousDatabasePropertiesApexDetailArgs']]] apex_details: (Output)
               Oracle APEX Application Development.
               https://docs.oracle.com/en-us/iaas/api/#/en/database/20160918/datatypes/AutonomousDatabaseApex
               Structure is documented below.
        :param pulumi.Input[bool] are_primary_allowlisted_ips_used: (Output)
               This field indicates the status of Data Guard and Access control for the
               Autonomous Database. The field's value is null if Data Guard is disabled
               or Access Control is disabled. The field's value is TRUE if both Data Guard
               and Access Control are enabled, and the Autonomous Database is using
               primary IP access control list (ACL) for standby. The field's value is
               FALSE if both Data Guard and Access Control are enabled, and the Autonomous
               Database is using a different IP access control list (ACL) for standby
               compared to primary.
        :param pulumi.Input[str] autonomous_container_database_id: (Output)
               The Autonomous Container Database OCID.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] available_upgrade_versions: (Output)
               The list of available Oracle Database upgrade versions for an Autonomous
               Database.
        :param pulumi.Input[int] backup_retention_period_days: The retention period for the Autonomous Database. This field is specified
               in days, can range from 1 day to 60 days, and has a default value of
               60 days.
        :param pulumi.Input[str] character_set: The character set for the Autonomous Database. The default is AL32UTF8.
        :param pulumi.Input[float] compute_count: The number of compute servers for the Autonomous Database.
        :param pulumi.Input[Sequence[pulumi.Input['AutonomousDatabasePropertiesConnectionStringArgs']]] connection_strings: (Output)
               The connection string used to connect to the Autonomous Database.
               https://docs.oracle.com/en-us/iaas/api/#/en/database/20160918/datatypes/AutonomousDatabaseConnectionStrings
               Structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['AutonomousDatabasePropertiesConnectionUrlArgs']]] connection_urls: (Output)
               The URLs for accessing Oracle Application Express (APEX) and SQL Developer
               Web with a browser from a Compute instance.
               https://docs.oracle.com/en-us/iaas/api/#/en/database/20160918/datatypes/AutonomousDatabaseConnectionUrls
               Structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['AutonomousDatabasePropertiesCustomerContactArgs']]] customer_contacts: The list of customer contacts.
               Structure is documented below.
        :param pulumi.Input[str] data_safe_state: (Output)
               The current state of the Data Safe registration for the
               Autonomous Database.
               Possible values:
               DATA_SAFE_STATE_UNSPECIFIED
               REGISTERING
               REGISTERED
               DEREGISTERING
               NOT_REGISTERED
               FAILED
        :param pulumi.Input[int] data_storage_size_gb: The size of the data stored in the database, in gigabytes.
        :param pulumi.Input[int] data_storage_size_tb: The size of the data stored in the database, in terabytes.
        :param pulumi.Input[str] database_management_state: (Output)
               The current state of database management for the Autonomous Database.
               Possible values:
               DATABASE_MANAGEMENT_STATE_UNSPECIFIED
               ENABLING
               ENABLED
               DISABLING
               NOT_ENABLED
               FAILED_ENABLING
               FAILED_DISABLING
        :param pulumi.Input[str] db_edition: The edition of the Autonomous Databases.
               Possible values:
               DATABASE_EDITION_UNSPECIFIED
               STANDARD_EDITION
               ENTERPRISE_EDITION
        :param pulumi.Input[str] db_version: The Oracle Database version for the Autonomous Database.
        :param pulumi.Input[str] failed_data_recovery_duration: (Output)
               This field indicates the number of seconds of data loss during a Data
               Guard failover.
        :param pulumi.Input[bool] is_auto_scaling_enabled: This field indicates if auto scaling is enabled for the Autonomous Database
               CPU core count.
        :param pulumi.Input[bool] is_local_data_guard_enabled: (Output)
               This field indicates whether the Autonomous Database has local (in-region)
               Data Guard enabled.
        :param pulumi.Input[bool] is_storage_auto_scaling_enabled: This field indicates if auto scaling is enabled for the Autonomous Database
               storage.
        :param pulumi.Input[str] lifecycle_details: (Output)
               The details of the current lifestyle state of the Autonomous Database.
        :param pulumi.Input[int] local_adg_auto_failover_max_data_loss_limit: (Output)
               This field indicates the maximum data loss limit for an Autonomous
               Database, in seconds.
        :param pulumi.Input[str] local_disaster_recovery_type: (Output)
               This field indicates the local disaster recovery (DR) type of an
               Autonomous Database.
               Possible values:
               LOCAL_DISASTER_RECOVERY_TYPE_UNSPECIFIED
               ADG
               BACKUP_BASED
        :param pulumi.Input[Sequence[pulumi.Input['AutonomousDatabasePropertiesLocalStandbyDbArgs']]] local_standby_dbs: (Output)
               Autonomous Data Guard standby database details.
               https://docs.oracle.com/en-us/iaas/api/#/en/database/20160918/datatypes/AutonomousDatabaseStandbySummary
               Structure is documented below.
        :param pulumi.Input[str] maintenance_begin_time: (Output)
               The date and time when maintenance will begin.
        :param pulumi.Input[str] maintenance_end_time: (Output)
               The date and time when maintenance will end.
        :param pulumi.Input[str] maintenance_schedule_type: The maintenance schedule of the Autonomous Database.
               Possible values:
               MAINTENANCE_SCHEDULE_TYPE_UNSPECIFIED
               EARLY
               REGULAR
        :param pulumi.Input[int] memory_per_oracle_compute_unit_gbs: (Output)
               The amount of memory enabled per ECPU, in gigabytes.
        :param pulumi.Input[int] memory_table_gbs: (Output)
               The memory assigned to in-memory tables in an Autonomous Database.
        :param pulumi.Input[bool] mtls_connection_required: This field specifies if the Autonomous Database requires mTLS connections.
        :param pulumi.Input[str] n_character_set: The national character set for the Autonomous Database. The default is
               AL16UTF16.
        :param pulumi.Input[str] next_long_term_backup_time: (Output)
               The long term backup schedule of the Autonomous Database.
        :param pulumi.Input[str] oci_url: (Output)
               The Oracle Cloud Infrastructure link for the Autonomous Database.
        :param pulumi.Input[str] ocid: (Output)
               OCID of the Autonomous Database.
               https://docs.oracle.com/en-us/iaas/Content/General/Concepts/identifiers.htm#Oracle
        :param pulumi.Input[str] open_mode: (Output)
               This field indicates the current mode of the Autonomous Database.
               Possible values:
               OPEN_MODE_UNSPECIFIED
               READ_ONLY
               READ_WRITE
        :param pulumi.Input[str] operations_insights_state: Possible values:
               OPERATIONS_INSIGHTS_STATE_UNSPECIFIED
               ENABLING
               ENABLED
               DISABLING
               NOT_ENABLED
               FAILED_ENABLING
               FAILED_DISABLING
        :param pulumi.Input[Sequence[pulumi.Input[str]]] peer_db_ids: (Output)
               The list of OCIDs of standby databases located in Autonomous Data Guard
               remote regions that are associated with the source database.
        :param pulumi.Input[str] permission_level: (Output)
               The permission level of the Autonomous Database.
               Possible values:
               PERMISSION_LEVEL_UNSPECIFIED
               RESTRICTED
               UNRESTRICTED
        :param pulumi.Input[str] private_endpoint: (Output)
               The private endpoint for the Autonomous Database.
        :param pulumi.Input[str] private_endpoint_ip: The private endpoint IP address for the Autonomous Database.
        :param pulumi.Input[str] private_endpoint_label: The private endpoint label for the Autonomous Database.
        :param pulumi.Input[str] refreshable_mode: (Output)
               The refresh mode of the cloned Autonomous Database.
               Possible values:
               REFRESHABLE_MODE_UNSPECIFIED
               AUTOMATIC
               MANUAL
        :param pulumi.Input[str] refreshable_state: (Output)
               The refresh State of the clone.
               Possible values:
               REFRESHABLE_STATE_UNSPECIFIED
               REFRESHING
               NOT_REFRESHING
        :param pulumi.Input[str] role: (Output)
               The Data Guard role of the Autonomous Database.
               Possible values:
               ROLE_UNSPECIFIED
               PRIMARY
               STANDBY
               DISABLED_STANDBY
               BACKUP_COPY
               SNAPSHOT_STANDBY
        :param pulumi.Input[Sequence[pulumi.Input['AutonomousDatabasePropertiesScheduledOperationDetailArgs']]] scheduled_operation_details: (Output)
               The list and details of the scheduled operations of the Autonomous
               Database.
               Structure is documented below.
        :param pulumi.Input[str] sql_web_developer_url: (Output)
               The SQL Web Developer URL for the Autonomous Database.
        :param pulumi.Input[str] state: (Output)
               Possible values:
               STATE_UNSPECIFIED
               PROVISIONING
               AVAILABLE
               STOPPING
               STOPPED
               STARTING
               TERMINATING
               TERMINATED
               UNAVAILABLE
               RESTORE_IN_PROGRESS
               RESTORE_FAILED
               BACKUP_IN_PROGRESS
               SCALE_IN_PROGRESS
               AVAILABLE_NEEDS_ATTENTION
               UPDATING
               MAINTENANCE_IN_PROGRESS
               RESTARTING
               RECREATING
               ROLE_CHANGE_IN_PROGRESS
               UPGRADING
               INACCESSIBLE
               STANDBY
        :param pulumi.Input[Sequence[pulumi.Input[str]]] supported_clone_regions: (Output)
               The list of available regions that can be used to create a clone for the
               Autonomous Database.
        :param pulumi.Input[float] total_auto_backup_storage_size_gbs: (Output)
               The storage space used by automatic backups of Autonomous Database, in
               gigabytes.
        :param pulumi.Input[int] used_data_storage_size_tbs: (Output)
               The storage space used by Autonomous Database, in gigabytes.
        """
        pulumi.set(__self__, "db_workload", db_workload)
        pulumi.set(__self__, "license_type", license_type)
        if actual_used_data_storage_size_tb is not None:
            pulumi.set(__self__, "actual_used_data_storage_size_tb", actual_used_data_storage_size_tb)
        if allocated_storage_size_tb is not None:
            pulumi.set(__self__, "allocated_storage_size_tb", allocated_storage_size_tb)
        if apex_details is not None:
            pulumi.set(__self__, "apex_details", apex_details)
        if are_primary_allowlisted_ips_used is not None:
            pulumi.set(__self__, "are_primary_allowlisted_ips_used", are_primary_allowlisted_ips_used)
        if autonomous_container_database_id is not None:
            pulumi.set(__self__, "autonomous_container_database_id", autonomous_container_database_id)
        if available_upgrade_versions is not None:
            pulumi.set(__self__, "available_upgrade_versions", available_upgrade_versions)
        if backup_retention_period_days is not None:
            pulumi.set(__self__, "backup_retention_period_days", backup_retention_period_days)
        if character_set is not None:
            pulumi.set(__self__, "character_set", character_set)
        if compute_count is not None:
            pulumi.set(__self__, "compute_count", compute_count)
        if connection_strings is not None:
            pulumi.set(__self__, "connection_strings", connection_strings)
        if connection_urls is not None:
            pulumi.set(__self__, "connection_urls", connection_urls)
        if customer_contacts is not None:
            pulumi.set(__self__, "customer_contacts", customer_contacts)
        if data_safe_state is not None:
            pulumi.set(__self__, "data_safe_state", data_safe_state)
        if data_storage_size_gb is not None:
            pulumi.set(__self__, "data_storage_size_gb", data_storage_size_gb)
        if data_storage_size_tb is not None:
            pulumi.set(__self__, "data_storage_size_tb", data_storage_size_tb)
        if database_management_state is not None:
            pulumi.set(__self__, "database_management_state", database_management_state)
        if db_edition is not None:
            pulumi.set(__self__, "db_edition", db_edition)
        if db_version is not None:
            pulumi.set(__self__, "db_version", db_version)
        if failed_data_recovery_duration is not None:
            pulumi.set(__self__, "failed_data_recovery_duration", failed_data_recovery_duration)
        if is_auto_scaling_enabled is not None:
            pulumi.set(__self__, "is_auto_scaling_enabled", is_auto_scaling_enabled)
        if is_local_data_guard_enabled is not None:
            pulumi.set(__self__, "is_local_data_guard_enabled", is_local_data_guard_enabled)
        if is_storage_auto_scaling_enabled is not None:
            pulumi.set(__self__, "is_storage_auto_scaling_enabled", is_storage_auto_scaling_enabled)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if local_adg_auto_failover_max_data_loss_limit is not None:
            pulumi.set(__self__, "local_adg_auto_failover_max_data_loss_limit", local_adg_auto_failover_max_data_loss_limit)
        if local_disaster_recovery_type is not None:
            pulumi.set(__self__, "local_disaster_recovery_type", local_disaster_recovery_type)
        if local_standby_dbs is not None:
            pulumi.set(__self__, "local_standby_dbs", local_standby_dbs)
        if maintenance_begin_time is not None:
            pulumi.set(__self__, "maintenance_begin_time", maintenance_begin_time)
        if maintenance_end_time is not None:
            pulumi.set(__self__, "maintenance_end_time", maintenance_end_time)
        if maintenance_schedule_type is not None:
            pulumi.set(__self__, "maintenance_schedule_type", maintenance_schedule_type)
        if memory_per_oracle_compute_unit_gbs is not None:
            pulumi.set(__self__, "memory_per_oracle_compute_unit_gbs", memory_per_oracle_compute_unit_gbs)
        if memory_table_gbs is not None:
            pulumi.set(__self__, "memory_table_gbs", memory_table_gbs)
        if mtls_connection_required is not None:
            pulumi.set(__self__, "mtls_connection_required", mtls_connection_required)
        if n_character_set is not None:
            pulumi.set(__self__, "n_character_set", n_character_set)
        if next_long_term_backup_time is not None:
            pulumi.set(__self__, "next_long_term_backup_time", next_long_term_backup_time)
        if oci_url is not None:
            pulumi.set(__self__, "oci_url", oci_url)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if open_mode is not None:
            pulumi.set(__self__, "open_mode", open_mode)
        if operations_insights_state is not None:
            pulumi.set(__self__, "operations_insights_state", operations_insights_state)
        if peer_db_ids is not None:
            pulumi.set(__self__, "peer_db_ids", peer_db_ids)
        if permission_level is not None:
            pulumi.set(__self__, "permission_level", permission_level)
        if private_endpoint is not None:
            pulumi.set(__self__, "private_endpoint", private_endpoint)
        if private_endpoint_ip is not None:
            pulumi.set(__self__, "private_endpoint_ip", private_endpoint_ip)
        if private_endpoint_label is not None:
            pulumi.set(__self__, "private_endpoint_label", private_endpoint_label)
        if refreshable_mode is not None:
            pulumi.set(__self__, "refreshable_mode", refreshable_mode)
        if refreshable_state is not None:
            pulumi.set(__self__, "refreshable_state", refreshable_state)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if scheduled_operation_details is not None:
            pulumi.set(__self__, "scheduled_operation_details", scheduled_operation_details)
        if sql_web_developer_url is not None:
            pulumi.set(__self__, "sql_web_developer_url", sql_web_developer_url)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if supported_clone_regions is not None:
            pulumi.set(__self__, "supported_clone_regions", supported_clone_regions)
        if total_auto_backup_storage_size_gbs is not None:
            pulumi.set(__self__, "total_auto_backup_storage_size_gbs", total_auto_backup_storage_size_gbs)
        if used_data_storage_size_tbs is not None:
            pulumi.set(__self__, "used_data_storage_size_tbs", used_data_storage_size_tbs)

    @property
    @pulumi.getter(name="dbWorkload")
    def db_workload(self) -> pulumi.Input[str]:
        """
        Possible values:
        DB_WORKLOAD_UNSPECIFIED
        OLTP
        DW
        AJD
        APEX
        """
        return pulumi.get(self, "db_workload")

    @db_workload.setter
    def db_workload(self, value: pulumi.Input[str]):
        pulumi.set(self, "db_workload", value)

    @property
    @pulumi.getter(name="licenseType")
    def license_type(self) -> pulumi.Input[str]:
        """
        The license type used for the Autonomous Database.
        Possible values:
        LICENSE_TYPE_UNSPECIFIED
        LICENSE_INCLUDED
        BRING_YOUR_OWN_LICENSE
        """
        return pulumi.get(self, "license_type")

    @license_type.setter
    def license_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "license_type", value)

    @property
    @pulumi.getter(name="actualUsedDataStorageSizeTb")
    def actual_used_data_storage_size_tb(self) -> Optional[pulumi.Input[float]]:
        """
        (Output)
        The amount of storage currently being used for user and system data, in
        terabytes.
        """
        return pulumi.get(self, "actual_used_data_storage_size_tb")

    @actual_used_data_storage_size_tb.setter
    def actual_used_data_storage_size_tb(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "actual_used_data_storage_size_tb", value)

    @property
    @pulumi.getter(name="allocatedStorageSizeTb")
    def allocated_storage_size_tb(self) -> Optional[pulumi.Input[float]]:
        """
        (Output)
        The amount of storage currently allocated for the database tables and
        billed for, rounded up in terabytes.
        """
        return pulumi.get(self, "allocated_storage_size_tb")

    @allocated_storage_size_tb.setter
    def allocated_storage_size_tb(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "allocated_storage_size_tb", value)

    @property
    @pulumi.getter(name="apexDetails")
    def apex_details(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutonomousDatabasePropertiesApexDetailArgs']]]]:
        """
        (Output)
        Oracle APEX Application Development.
        https://docs.oracle.com/en-us/iaas/api/#/en/database/20160918/datatypes/AutonomousDatabaseApex
        Structure is documented below.
        """
        return pulumi.get(self, "apex_details")

    @apex_details.setter
    def apex_details(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutonomousDatabasePropertiesApexDetailArgs']]]]):
        pulumi.set(self, "apex_details", value)

    @property
    @pulumi.getter(name="arePrimaryAllowlistedIpsUsed")
    def are_primary_allowlisted_ips_used(self) -> Optional[pulumi.Input[bool]]:
        """
        (Output)
        This field indicates the status of Data Guard and Access control for the
        Autonomous Database. The field's value is null if Data Guard is disabled
        or Access Control is disabled. The field's value is TRUE if both Data Guard
        and Access Control are enabled, and the Autonomous Database is using
        primary IP access control list (ACL) for standby. The field's value is
        FALSE if both Data Guard and Access Control are enabled, and the Autonomous
        Database is using a different IP access control list (ACL) for standby
        compared to primary.
        """
        return pulumi.get(self, "are_primary_allowlisted_ips_used")

    @are_primary_allowlisted_ips_used.setter
    def are_primary_allowlisted_ips_used(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "are_primary_allowlisted_ips_used", value)

    @property
    @pulumi.getter(name="autonomousContainerDatabaseId")
    def autonomous_container_database_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        The Autonomous Container Database OCID.
        """
        return pulumi.get(self, "autonomous_container_database_id")

    @autonomous_container_database_id.setter
    def autonomous_container_database_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "autonomous_container_database_id", value)

    @property
    @pulumi.getter(name="availableUpgradeVersions")
    def available_upgrade_versions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Output)
        The list of available Oracle Database upgrade versions for an Autonomous
        Database.
        """
        return pulumi.get(self, "available_upgrade_versions")

    @available_upgrade_versions.setter
    def available_upgrade_versions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "available_upgrade_versions", value)

    @property
    @pulumi.getter(name="backupRetentionPeriodDays")
    def backup_retention_period_days(self) -> Optional[pulumi.Input[int]]:
        """
        The retention period for the Autonomous Database. This field is specified
        in days, can range from 1 day to 60 days, and has a default value of
        60 days.
        """
        return pulumi.get(self, "backup_retention_period_days")

    @backup_retention_period_days.setter
    def backup_retention_period_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "backup_retention_period_days", value)

    @property
    @pulumi.getter(name="characterSet")
    def character_set(self) -> Optional[pulumi.Input[str]]:
        """
        The character set for the Autonomous Database. The default is AL32UTF8.
        """
        return pulumi.get(self, "character_set")

    @character_set.setter
    def character_set(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "character_set", value)

    @property
    @pulumi.getter(name="computeCount")
    def compute_count(self) -> Optional[pulumi.Input[float]]:
        """
        The number of compute servers for the Autonomous Database.
        """
        return pulumi.get(self, "compute_count")

    @compute_count.setter
    def compute_count(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "compute_count", value)

    @property
    @pulumi.getter(name="connectionStrings")
    def connection_strings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutonomousDatabasePropertiesConnectionStringArgs']]]]:
        """
        (Output)
        The connection string used to connect to the Autonomous Database.
        https://docs.oracle.com/en-us/iaas/api/#/en/database/20160918/datatypes/AutonomousDatabaseConnectionStrings
        Structure is documented below.
        """
        return pulumi.get(self, "connection_strings")

    @connection_strings.setter
    def connection_strings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutonomousDatabasePropertiesConnectionStringArgs']]]]):
        pulumi.set(self, "connection_strings", value)

    @property
    @pulumi.getter(name="connectionUrls")
    def connection_urls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutonomousDatabasePropertiesConnectionUrlArgs']]]]:
        """
        (Output)
        The URLs for accessing Oracle Application Express (APEX) and SQL Developer
        Web with a browser from a Compute instance.
        https://docs.oracle.com/en-us/iaas/api/#/en/database/20160918/datatypes/AutonomousDatabaseConnectionUrls
        Structure is documented below.
        """
        return pulumi.get(self, "connection_urls")

    @connection_urls.setter
    def connection_urls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutonomousDatabasePropertiesConnectionUrlArgs']]]]):
        pulumi.set(self, "connection_urls", value)

    @property
    @pulumi.getter(name="customerContacts")
    def customer_contacts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutonomousDatabasePropertiesCustomerContactArgs']]]]:
        """
        The list of customer contacts.
        Structure is documented below.
        """
        return pulumi.get(self, "customer_contacts")

    @customer_contacts.setter
    def customer_contacts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutonomousDatabasePropertiesCustomerContactArgs']]]]):
        pulumi.set(self, "customer_contacts", value)

    @property
    @pulumi.getter(name="dataSafeState")
    def data_safe_state(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        The current state of the Data Safe registration for the
        Autonomous Database.
        Possible values:
        DATA_SAFE_STATE_UNSPECIFIED
        REGISTERING
        REGISTERED
        DEREGISTERING
        NOT_REGISTERED
        FAILED
        """
        return pulumi.get(self, "data_safe_state")

    @data_safe_state.setter
    def data_safe_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_safe_state", value)

    @property
    @pulumi.getter(name="dataStorageSizeGb")
    def data_storage_size_gb(self) -> Optional[pulumi.Input[int]]:
        """
        The size of the data stored in the database, in gigabytes.
        """
        return pulumi.get(self, "data_storage_size_gb")

    @data_storage_size_gb.setter
    def data_storage_size_gb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "data_storage_size_gb", value)

    @property
    @pulumi.getter(name="dataStorageSizeTb")
    def data_storage_size_tb(self) -> Optional[pulumi.Input[int]]:
        """
        The size of the data stored in the database, in terabytes.
        """
        return pulumi.get(self, "data_storage_size_tb")

    @data_storage_size_tb.setter
    def data_storage_size_tb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "data_storage_size_tb", value)

    @property
    @pulumi.getter(name="databaseManagementState")
    def database_management_state(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        The current state of database management for the Autonomous Database.
        Possible values:
        DATABASE_MANAGEMENT_STATE_UNSPECIFIED
        ENABLING
        ENABLED
        DISABLING
        NOT_ENABLED
        FAILED_ENABLING
        FAILED_DISABLING
        """
        return pulumi.get(self, "database_management_state")

    @database_management_state.setter
    def database_management_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_management_state", value)

    @property
    @pulumi.getter(name="dbEdition")
    def db_edition(self) -> Optional[pulumi.Input[str]]:
        """
        The edition of the Autonomous Databases.
        Possible values:
        DATABASE_EDITION_UNSPECIFIED
        STANDARD_EDITION
        ENTERPRISE_EDITION
        """
        return pulumi.get(self, "db_edition")

    @db_edition.setter
    def db_edition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db_edition", value)

    @property
    @pulumi.getter(name="dbVersion")
    def db_version(self) -> Optional[pulumi.Input[str]]:
        """
        The Oracle Database version for the Autonomous Database.
        """
        return pulumi.get(self, "db_version")

    @db_version.setter
    def db_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db_version", value)

    @property
    @pulumi.getter(name="failedDataRecoveryDuration")
    def failed_data_recovery_duration(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        This field indicates the number of seconds of data loss during a Data
        Guard failover.
        """
        return pulumi.get(self, "failed_data_recovery_duration")

    @failed_data_recovery_duration.setter
    def failed_data_recovery_duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "failed_data_recovery_duration", value)

    @property
    @pulumi.getter(name="isAutoScalingEnabled")
    def is_auto_scaling_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        This field indicates if auto scaling is enabled for the Autonomous Database
        CPU core count.
        """
        return pulumi.get(self, "is_auto_scaling_enabled")

    @is_auto_scaling_enabled.setter
    def is_auto_scaling_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_auto_scaling_enabled", value)

    @property
    @pulumi.getter(name="isLocalDataGuardEnabled")
    def is_local_data_guard_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        (Output)
        This field indicates whether the Autonomous Database has local (in-region)
        Data Guard enabled.
        """
        return pulumi.get(self, "is_local_data_guard_enabled")

    @is_local_data_guard_enabled.setter
    def is_local_data_guard_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_local_data_guard_enabled", value)

    @property
    @pulumi.getter(name="isStorageAutoScalingEnabled")
    def is_storage_auto_scaling_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        This field indicates if auto scaling is enabled for the Autonomous Database
        storage.
        """
        return pulumi.get(self, "is_storage_auto_scaling_enabled")

    @is_storage_auto_scaling_enabled.setter
    def is_storage_auto_scaling_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_storage_auto_scaling_enabled", value)

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        The details of the current lifestyle state of the Autonomous Database.
        """
        return pulumi.get(self, "lifecycle_details")

    @lifecycle_details.setter
    def lifecycle_details(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lifecycle_details", value)

    @property
    @pulumi.getter(name="localAdgAutoFailoverMaxDataLossLimit")
    def local_adg_auto_failover_max_data_loss_limit(self) -> Optional[pulumi.Input[int]]:
        """
        (Output)
        This field indicates the maximum data loss limit for an Autonomous
        Database, in seconds.
        """
        return pulumi.get(self, "local_adg_auto_failover_max_data_loss_limit")

    @local_adg_auto_failover_max_data_loss_limit.setter
    def local_adg_auto_failover_max_data_loss_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "local_adg_auto_failover_max_data_loss_limit", value)

    @property
    @pulumi.getter(name="localDisasterRecoveryType")
    def local_disaster_recovery_type(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        This field indicates the local disaster recovery (DR) type of an
        Autonomous Database.
        Possible values:
        LOCAL_DISASTER_RECOVERY_TYPE_UNSPECIFIED
        ADG
        BACKUP_BASED
        """
        return pulumi.get(self, "local_disaster_recovery_type")

    @local_disaster_recovery_type.setter
    def local_disaster_recovery_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_disaster_recovery_type", value)

    @property
    @pulumi.getter(name="localStandbyDbs")
    def local_standby_dbs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutonomousDatabasePropertiesLocalStandbyDbArgs']]]]:
        """
        (Output)
        Autonomous Data Guard standby database details.
        https://docs.oracle.com/en-us/iaas/api/#/en/database/20160918/datatypes/AutonomousDatabaseStandbySummary
        Structure is documented below.
        """
        return pulumi.get(self, "local_standby_dbs")

    @local_standby_dbs.setter
    def local_standby_dbs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutonomousDatabasePropertiesLocalStandbyDbArgs']]]]):
        pulumi.set(self, "local_standby_dbs", value)

    @property
    @pulumi.getter(name="maintenanceBeginTime")
    def maintenance_begin_time(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        The date and time when maintenance will begin.
        """
        return pulumi.get(self, "maintenance_begin_time")

    @maintenance_begin_time.setter
    def maintenance_begin_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "maintenance_begin_time", value)

    @property
    @pulumi.getter(name="maintenanceEndTime")
    def maintenance_end_time(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        The date and time when maintenance will end.
        """
        return pulumi.get(self, "maintenance_end_time")

    @maintenance_end_time.setter
    def maintenance_end_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "maintenance_end_time", value)

    @property
    @pulumi.getter(name="maintenanceScheduleType")
    def maintenance_schedule_type(self) -> Optional[pulumi.Input[str]]:
        """
        The maintenance schedule of the Autonomous Database.
        Possible values:
        MAINTENANCE_SCHEDULE_TYPE_UNSPECIFIED
        EARLY
        REGULAR
        """
        return pulumi.get(self, "maintenance_schedule_type")

    @maintenance_schedule_type.setter
    def maintenance_schedule_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "maintenance_schedule_type", value)

    @property
    @pulumi.getter(name="memoryPerOracleComputeUnitGbs")
    def memory_per_oracle_compute_unit_gbs(self) -> Optional[pulumi.Input[int]]:
        """
        (Output)
        The amount of memory enabled per ECPU, in gigabytes.
        """
        return pulumi.get(self, "memory_per_oracle_compute_unit_gbs")

    @memory_per_oracle_compute_unit_gbs.setter
    def memory_per_oracle_compute_unit_gbs(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "memory_per_oracle_compute_unit_gbs", value)

    @property
    @pulumi.getter(name="memoryTableGbs")
    def memory_table_gbs(self) -> Optional[pulumi.Input[int]]:
        """
        (Output)
        The memory assigned to in-memory tables in an Autonomous Database.
        """
        return pulumi.get(self, "memory_table_gbs")

    @memory_table_gbs.setter
    def memory_table_gbs(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "memory_table_gbs", value)

    @property
    @pulumi.getter(name="mtlsConnectionRequired")
    def mtls_connection_required(self) -> Optional[pulumi.Input[bool]]:
        """
        This field specifies if the Autonomous Database requires mTLS connections.
        """
        return pulumi.get(self, "mtls_connection_required")

    @mtls_connection_required.setter
    def mtls_connection_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mtls_connection_required", value)

    @property
    @pulumi.getter(name="nCharacterSet")
    def n_character_set(self) -> Optional[pulumi.Input[str]]:
        """
        The national character set for the Autonomous Database. The default is
        AL16UTF16.
        """
        return pulumi.get(self, "n_character_set")

    @n_character_set.setter
    def n_character_set(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "n_character_set", value)

    @property
    @pulumi.getter(name="nextLongTermBackupTime")
    def next_long_term_backup_time(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        The long term backup schedule of the Autonomous Database.
        """
        return pulumi.get(self, "next_long_term_backup_time")

    @next_long_term_backup_time.setter
    def next_long_term_backup_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next_long_term_backup_time", value)

    @property
    @pulumi.getter(name="ociUrl")
    def oci_url(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        The Oracle Cloud Infrastructure link for the Autonomous Database.
        """
        return pulumi.get(self, "oci_url")

    @oci_url.setter
    def oci_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oci_url", value)

    @property
    @pulumi.getter
    def ocid(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        OCID of the Autonomous Database.
        https://docs.oracle.com/en-us/iaas/Content/General/Concepts/identifiers.htm#Oracle
        """
        return pulumi.get(self, "ocid")

    @ocid.setter
    def ocid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ocid", value)

    @property
    @pulumi.getter(name="openMode")
    def open_mode(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        This field indicates the current mode of the Autonomous Database.
        Possible values:
        OPEN_MODE_UNSPECIFIED
        READ_ONLY
        READ_WRITE
        """
        return pulumi.get(self, "open_mode")

    @open_mode.setter
    def open_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "open_mode", value)

    @property
    @pulumi.getter(name="operationsInsightsState")
    def operations_insights_state(self) -> Optional[pulumi.Input[str]]:
        """
        Possible values:
        OPERATIONS_INSIGHTS_STATE_UNSPECIFIED
        ENABLING
        ENABLED
        DISABLING
        NOT_ENABLED
        FAILED_ENABLING
        FAILED_DISABLING
        """
        return pulumi.get(self, "operations_insights_state")

    @operations_insights_state.setter
    def operations_insights_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operations_insights_state", value)

    @property
    @pulumi.getter(name="peerDbIds")
    def peer_db_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Output)
        The list of OCIDs of standby databases located in Autonomous Data Guard
        remote regions that are associated with the source database.
        """
        return pulumi.get(self, "peer_db_ids")

    @peer_db_ids.setter
    def peer_db_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "peer_db_ids", value)

    @property
    @pulumi.getter(name="permissionLevel")
    def permission_level(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        The permission level of the Autonomous Database.
        Possible values:
        PERMISSION_LEVEL_UNSPECIFIED
        RESTRICTED
        UNRESTRICTED
        """
        return pulumi.get(self, "permission_level")

    @permission_level.setter
    def permission_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "permission_level", value)

    @property
    @pulumi.getter(name="privateEndpoint")
    def private_endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        The private endpoint for the Autonomous Database.
        """
        return pulumi.get(self, "private_endpoint")

    @private_endpoint.setter
    def private_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_endpoint", value)

    @property
    @pulumi.getter(name="privateEndpointIp")
    def private_endpoint_ip(self) -> Optional[pulumi.Input[str]]:
        """
        The private endpoint IP address for the Autonomous Database.
        """
        return pulumi.get(self, "private_endpoint_ip")

    @private_endpoint_ip.setter
    def private_endpoint_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_endpoint_ip", value)

    @property
    @pulumi.getter(name="privateEndpointLabel")
    def private_endpoint_label(self) -> Optional[pulumi.Input[str]]:
        """
        The private endpoint label for the Autonomous Database.
        """
        return pulumi.get(self, "private_endpoint_label")

    @private_endpoint_label.setter
    def private_endpoint_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_endpoint_label", value)

    @property
    @pulumi.getter(name="refreshableMode")
    def refreshable_mode(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        The refresh mode of the cloned Autonomous Database.
        Possible values:
        REFRESHABLE_MODE_UNSPECIFIED
        AUTOMATIC
        MANUAL
        """
        return pulumi.get(self, "refreshable_mode")

    @refreshable_mode.setter
    def refreshable_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refreshable_mode", value)

    @property
    @pulumi.getter(name="refreshableState")
    def refreshable_state(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        The refresh State of the clone.
        Possible values:
        REFRESHABLE_STATE_UNSPECIFIED
        REFRESHING
        NOT_REFRESHING
        """
        return pulumi.get(self, "refreshable_state")

    @refreshable_state.setter
    def refreshable_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refreshable_state", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        The Data Guard role of the Autonomous Database.
        Possible values:
        ROLE_UNSPECIFIED
        PRIMARY
        STANDBY
        DISABLED_STANDBY
        BACKUP_COPY
        SNAPSHOT_STANDBY
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter(name="scheduledOperationDetails")
    def scheduled_operation_details(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutonomousDatabasePropertiesScheduledOperationDetailArgs']]]]:
        """
        (Output)
        The list and details of the scheduled operations of the Autonomous
        Database.
        Structure is documented below.
        """
        return pulumi.get(self, "scheduled_operation_details")

    @scheduled_operation_details.setter
    def scheduled_operation_details(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutonomousDatabasePropertiesScheduledOperationDetailArgs']]]]):
        pulumi.set(self, "scheduled_operation_details", value)

    @property
    @pulumi.getter(name="sqlWebDeveloperUrl")
    def sql_web_developer_url(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        The SQL Web Developer URL for the Autonomous Database.
        """
        return pulumi.get(self, "sql_web_developer_url")

    @sql_web_developer_url.setter
    def sql_web_developer_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sql_web_developer_url", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        Possible values:
        STATE_UNSPECIFIED
        PROVISIONING
        AVAILABLE
        STOPPING
        STOPPED
        STARTING
        TERMINATING
        TERMINATED
        UNAVAILABLE
        RESTORE_IN_PROGRESS
        RESTORE_FAILED
        BACKUP_IN_PROGRESS
        SCALE_IN_PROGRESS
        AVAILABLE_NEEDS_ATTENTION
        UPDATING
        MAINTENANCE_IN_PROGRESS
        RESTARTING
        RECREATING
        ROLE_CHANGE_IN_PROGRESS
        UPGRADING
        INACCESSIBLE
        STANDBY
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="supportedCloneRegions")
    def supported_clone_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Output)
        The list of available regions that can be used to create a clone for the
        Autonomous Database.
        """
        return pulumi.get(self, "supported_clone_regions")

    @supported_clone_regions.setter
    def supported_clone_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "supported_clone_regions", value)

    @property
    @pulumi.getter(name="totalAutoBackupStorageSizeGbs")
    def total_auto_backup_storage_size_gbs(self) -> Optional[pulumi.Input[float]]:
        """
        (Output)
        The storage space used by automatic backups of Autonomous Database, in
        gigabytes.
        """
        return pulumi.get(self, "total_auto_backup_storage_size_gbs")

    @total_auto_backup_storage_size_gbs.setter
    def total_auto_backup_storage_size_gbs(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "total_auto_backup_storage_size_gbs", value)

    @property
    @pulumi.getter(name="usedDataStorageSizeTbs")
    def used_data_storage_size_tbs(self) -> Optional[pulumi.Input[int]]:
        """
        (Output)
        The storage space used by Autonomous Database, in gigabytes.
        """
        return pulumi.get(self, "used_data_storage_size_tbs")

    @used_data_storage_size_tbs.setter
    def used_data_storage_size_tbs(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "used_data_storage_size_tbs", value)


if not MYPY:
    class AutonomousDatabasePropertiesApexDetailArgsDict(TypedDict):
        apex_version: NotRequired[pulumi.Input[str]]
        """
        The Oracle APEX Application Development version.
        """
        ords_version: NotRequired[pulumi.Input[str]]
        """
        The Oracle REST Data Services (ORDS) version.
        """
elif False:
    AutonomousDatabasePropertiesApexDetailArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AutonomousDatabasePropertiesApexDetailArgs:
    def __init__(__self__, *,
                 apex_version: Optional[pulumi.Input[str]] = None,
                 ords_version: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] apex_version: The Oracle APEX Application Development version.
        :param pulumi.Input[str] ords_version: The Oracle REST Data Services (ORDS) version.
        """
        if apex_version is not None:
            pulumi.set(__self__, "apex_version", apex_version)
        if ords_version is not None:
            pulumi.set(__self__, "ords_version", ords_version)

    @property
    @pulumi.getter(name="apexVersion")
    def apex_version(self) -> Optional[pulumi.Input[str]]:
        """
        The Oracle APEX Application Development version.
        """
        return pulumi.get(self, "apex_version")

    @apex_version.setter
    def apex_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "apex_version", value)

    @property
    @pulumi.getter(name="ordsVersion")
    def ords_version(self) -> Optional[pulumi.Input[str]]:
        """
        The Oracle REST Data Services (ORDS) version.
        """
        return pulumi.get(self, "ords_version")

    @ords_version.setter
    def ords_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ords_version", value)


if not MYPY:
    class AutonomousDatabasePropertiesConnectionStringArgsDict(TypedDict):
        all_connection_strings: NotRequired[pulumi.Input[Sequence[pulumi.Input['AutonomousDatabasePropertiesConnectionStringAllConnectionStringArgsDict']]]]
        """
        A list of all connection strings that can be used to connect to the
        Autonomous Database.
        """
        dedicated: NotRequired[pulumi.Input[str]]
        """
        The database service provides the least level of resources to each SQL
        statement, but supports the most number of concurrent SQL statements.
        """
        high: NotRequired[pulumi.Input[str]]
        """
        The database service provides the highest level of resources to each SQL
        statement.
        """
        low: NotRequired[pulumi.Input[str]]
        """
        The database service provides the least level of resources to each SQL
        statement.
        """
        medium: NotRequired[pulumi.Input[str]]
        """
        The database service provides a lower level of resources to each SQL
        statement.
        """
        profiles: NotRequired[pulumi.Input[Sequence[pulumi.Input['AutonomousDatabasePropertiesConnectionStringProfileArgsDict']]]]
        """
        A list of connection string profiles to allow clients to group, filter, and
        select values based on the structured metadata.
        """
elif False:
    AutonomousDatabasePropertiesConnectionStringArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AutonomousDatabasePropertiesConnectionStringArgs:
    def __init__(__self__, *,
                 all_connection_strings: Optional[pulumi.Input[Sequence[pulumi.Input['AutonomousDatabasePropertiesConnectionStringAllConnectionStringArgs']]]] = None,
                 dedicated: Optional[pulumi.Input[str]] = None,
                 high: Optional[pulumi.Input[str]] = None,
                 low: Optional[pulumi.Input[str]] = None,
                 medium: Optional[pulumi.Input[str]] = None,
                 profiles: Optional[pulumi.Input[Sequence[pulumi.Input['AutonomousDatabasePropertiesConnectionStringProfileArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['AutonomousDatabasePropertiesConnectionStringAllConnectionStringArgs']]] all_connection_strings: A list of all connection strings that can be used to connect to the
               Autonomous Database.
        :param pulumi.Input[str] dedicated: The database service provides the least level of resources to each SQL
               statement, but supports the most number of concurrent SQL statements.
        :param pulumi.Input[str] high: The database service provides the highest level of resources to each SQL
               statement.
        :param pulumi.Input[str] low: The database service provides the least level of resources to each SQL
               statement.
        :param pulumi.Input[str] medium: The database service provides a lower level of resources to each SQL
               statement.
        :param pulumi.Input[Sequence[pulumi.Input['AutonomousDatabasePropertiesConnectionStringProfileArgs']]] profiles: A list of connection string profiles to allow clients to group, filter, and
               select values based on the structured metadata.
        """
        if all_connection_strings is not None:
            pulumi.set(__self__, "all_connection_strings", all_connection_strings)
        if dedicated is not None:
            pulumi.set(__self__, "dedicated", dedicated)
        if high is not None:
            pulumi.set(__self__, "high", high)
        if low is not None:
            pulumi.set(__self__, "low", low)
        if medium is not None:
            pulumi.set(__self__, "medium", medium)
        if profiles is not None:
            pulumi.set(__self__, "profiles", profiles)

    @property
    @pulumi.getter(name="allConnectionStrings")
    def all_connection_strings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutonomousDatabasePropertiesConnectionStringAllConnectionStringArgs']]]]:
        """
        A list of all connection strings that can be used to connect to the
        Autonomous Database.
        """
        return pulumi.get(self, "all_connection_strings")

    @all_connection_strings.setter
    def all_connection_strings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutonomousDatabasePropertiesConnectionStringAllConnectionStringArgs']]]]):
        pulumi.set(self, "all_connection_strings", value)

    @property
    @pulumi.getter
    def dedicated(self) -> Optional[pulumi.Input[str]]:
        """
        The database service provides the least level of resources to each SQL
        statement, but supports the most number of concurrent SQL statements.
        """
        return pulumi.get(self, "dedicated")

    @dedicated.setter
    def dedicated(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dedicated", value)

    @property
    @pulumi.getter
    def high(self) -> Optional[pulumi.Input[str]]:
        """
        The database service provides the highest level of resources to each SQL
        statement.
        """
        return pulumi.get(self, "high")

    @high.setter
    def high(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "high", value)

    @property
    @pulumi.getter
    def low(self) -> Optional[pulumi.Input[str]]:
        """
        The database service provides the least level of resources to each SQL
        statement.
        """
        return pulumi.get(self, "low")

    @low.setter
    def low(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "low", value)

    @property
    @pulumi.getter
    def medium(self) -> Optional[pulumi.Input[str]]:
        """
        The database service provides a lower level of resources to each SQL
        statement.
        """
        return pulumi.get(self, "medium")

    @medium.setter
    def medium(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "medium", value)

    @property
    @pulumi.getter
    def profiles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutonomousDatabasePropertiesConnectionStringProfileArgs']]]]:
        """
        A list of connection string profiles to allow clients to group, filter, and
        select values based on the structured metadata.
        """
        return pulumi.get(self, "profiles")

    @profiles.setter
    def profiles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutonomousDatabasePropertiesConnectionStringProfileArgs']]]]):
        pulumi.set(self, "profiles", value)


if not MYPY:
    class AutonomousDatabasePropertiesConnectionStringAllConnectionStringArgsDict(TypedDict):
        high: NotRequired[pulumi.Input[str]]
        """
        The database service provides the highest level of resources to each SQL
        statement.
        """
        low: NotRequired[pulumi.Input[str]]
        """
        The database service provides the least level of resources to each SQL
        statement.
        """
        medium: NotRequired[pulumi.Input[str]]
        """
        The database service provides a lower level of resources to each SQL
        statement.
        """
elif False:
    AutonomousDatabasePropertiesConnectionStringAllConnectionStringArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AutonomousDatabasePropertiesConnectionStringAllConnectionStringArgs:
    def __init__(__self__, *,
                 high: Optional[pulumi.Input[str]] = None,
                 low: Optional[pulumi.Input[str]] = None,
                 medium: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] high: The database service provides the highest level of resources to each SQL
               statement.
        :param pulumi.Input[str] low: The database service provides the least level of resources to each SQL
               statement.
        :param pulumi.Input[str] medium: The database service provides a lower level of resources to each SQL
               statement.
        """
        if high is not None:
            pulumi.set(__self__, "high", high)
        if low is not None:
            pulumi.set(__self__, "low", low)
        if medium is not None:
            pulumi.set(__self__, "medium", medium)

    @property
    @pulumi.getter
    def high(self) -> Optional[pulumi.Input[str]]:
        """
        The database service provides the highest level of resources to each SQL
        statement.
        """
        return pulumi.get(self, "high")

    @high.setter
    def high(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "high", value)

    @property
    @pulumi.getter
    def low(self) -> Optional[pulumi.Input[str]]:
        """
        The database service provides the least level of resources to each SQL
        statement.
        """
        return pulumi.get(self, "low")

    @low.setter
    def low(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "low", value)

    @property
    @pulumi.getter
    def medium(self) -> Optional[pulumi.Input[str]]:
        """
        The database service provides a lower level of resources to each SQL
        statement.
        """
        return pulumi.get(self, "medium")

    @medium.setter
    def medium(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "medium", value)


if not MYPY:
    class AutonomousDatabasePropertiesConnectionStringProfileArgsDict(TypedDict):
        consumer_group: NotRequired[pulumi.Input[str]]
        """
        The current consumer group being used by the connection. 
         Possible values:
         CONSUMER_GROUP_UNSPECIFIED
        HIGH
        MEDIUM
        LOW
        TP
        TPURGENT
        """
        display_name: NotRequired[pulumi.Input[str]]
        """
        The display name for the database connection.
        """
        host_format: NotRequired[pulumi.Input[str]]
        """
        The host name format being currently used in connection string. 
         Possible values:
         HOST_FORMAT_UNSPECIFIED
        FQDN
        IP
        """
        is_regional: NotRequired[pulumi.Input[bool]]
        """
        This field indicates if the connection string is regional and is only
        applicable for cross-region Data Guard.
        """
        protocol: NotRequired[pulumi.Input[str]]
        """
        The protocol being used by the connection. 
         Possible values:
         PROTOCOL_UNSPECIFIED
        TCP
        TCPS
        """
        session_mode: NotRequired[pulumi.Input[str]]
        """
        The current session mode of the connection. 
         Possible values:
         SESSION_MODE_UNSPECIFIED
        DIRECT
        INDIRECT
        """
        syntax_format: NotRequired[pulumi.Input[str]]
        """
        The syntax of the connection string. 
         Possible values:
         SYNTAX_FORMAT_UNSPECIFIED
        LONG
        EZCONNECT
        EZCONNECTPLUS
        """
        tls_authentication: NotRequired[pulumi.Input[str]]
        """
        This field indicates the TLS authentication type of the connection. 
         Possible values:
         TLS_AUTHENTICATION_UNSPECIFIED
        SERVER
        MUTUAL
        """
        value: NotRequired[pulumi.Input[str]]
        """
        The value of the connection string.
        """
elif False:
    AutonomousDatabasePropertiesConnectionStringProfileArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AutonomousDatabasePropertiesConnectionStringProfileArgs:
    def __init__(__self__, *,
                 consumer_group: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 host_format: Optional[pulumi.Input[str]] = None,
                 is_regional: Optional[pulumi.Input[bool]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 session_mode: Optional[pulumi.Input[str]] = None,
                 syntax_format: Optional[pulumi.Input[str]] = None,
                 tls_authentication: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] consumer_group: The current consumer group being used by the connection. 
                Possible values:
                CONSUMER_GROUP_UNSPECIFIED
               HIGH
               MEDIUM
               LOW
               TP
               TPURGENT
        :param pulumi.Input[str] display_name: The display name for the database connection.
        :param pulumi.Input[str] host_format: The host name format being currently used in connection string. 
                Possible values:
                HOST_FORMAT_UNSPECIFIED
               FQDN
               IP
        :param pulumi.Input[bool] is_regional: This field indicates if the connection string is regional and is only
               applicable for cross-region Data Guard.
        :param pulumi.Input[str] protocol: The protocol being used by the connection. 
                Possible values:
                PROTOCOL_UNSPECIFIED
               TCP
               TCPS
        :param pulumi.Input[str] session_mode: The current session mode of the connection. 
                Possible values:
                SESSION_MODE_UNSPECIFIED
               DIRECT
               INDIRECT
        :param pulumi.Input[str] syntax_format: The syntax of the connection string. 
                Possible values:
                SYNTAX_FORMAT_UNSPECIFIED
               LONG
               EZCONNECT
               EZCONNECTPLUS
        :param pulumi.Input[str] tls_authentication: This field indicates the TLS authentication type of the connection. 
                Possible values:
                TLS_AUTHENTICATION_UNSPECIFIED
               SERVER
               MUTUAL
        :param pulumi.Input[str] value: The value of the connection string.
        """
        if consumer_group is not None:
            pulumi.set(__self__, "consumer_group", consumer_group)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if host_format is not None:
            pulumi.set(__self__, "host_format", host_format)
        if is_regional is not None:
            pulumi.set(__self__, "is_regional", is_regional)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if session_mode is not None:
            pulumi.set(__self__, "session_mode", session_mode)
        if syntax_format is not None:
            pulumi.set(__self__, "syntax_format", syntax_format)
        if tls_authentication is not None:
            pulumi.set(__self__, "tls_authentication", tls_authentication)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="consumerGroup")
    def consumer_group(self) -> Optional[pulumi.Input[str]]:
        """
        The current consumer group being used by the connection. 
         Possible values:
         CONSUMER_GROUP_UNSPECIFIED
        HIGH
        MEDIUM
        LOW
        TP
        TPURGENT
        """
        return pulumi.get(self, "consumer_group")

    @consumer_group.setter
    def consumer_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consumer_group", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        The display name for the database connection.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="hostFormat")
    def host_format(self) -> Optional[pulumi.Input[str]]:
        """
        The host name format being currently used in connection string. 
         Possible values:
         HOST_FORMAT_UNSPECIFIED
        FQDN
        IP
        """
        return pulumi.get(self, "host_format")

    @host_format.setter
    def host_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host_format", value)

    @property
    @pulumi.getter(name="isRegional")
    def is_regional(self) -> Optional[pulumi.Input[bool]]:
        """
        This field indicates if the connection string is regional and is only
        applicable for cross-region Data Guard.
        """
        return pulumi.get(self, "is_regional")

    @is_regional.setter
    def is_regional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_regional", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        The protocol being used by the connection. 
         Possible values:
         PROTOCOL_UNSPECIFIED
        TCP
        TCPS
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="sessionMode")
    def session_mode(self) -> Optional[pulumi.Input[str]]:
        """
        The current session mode of the connection. 
         Possible values:
         SESSION_MODE_UNSPECIFIED
        DIRECT
        INDIRECT
        """
        return pulumi.get(self, "session_mode")

    @session_mode.setter
    def session_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_mode", value)

    @property
    @pulumi.getter(name="syntaxFormat")
    def syntax_format(self) -> Optional[pulumi.Input[str]]:
        """
        The syntax of the connection string. 
         Possible values:
         SYNTAX_FORMAT_UNSPECIFIED
        LONG
        EZCONNECT
        EZCONNECTPLUS
        """
        return pulumi.get(self, "syntax_format")

    @syntax_format.setter
    def syntax_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "syntax_format", value)

    @property
    @pulumi.getter(name="tlsAuthentication")
    def tls_authentication(self) -> Optional[pulumi.Input[str]]:
        """
        This field indicates the TLS authentication type of the connection. 
         Possible values:
         TLS_AUTHENTICATION_UNSPECIFIED
        SERVER
        MUTUAL
        """
        return pulumi.get(self, "tls_authentication")

    @tls_authentication.setter
    def tls_authentication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_authentication", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        The value of the connection string.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class AutonomousDatabasePropertiesConnectionUrlArgsDict(TypedDict):
        apex_uri: NotRequired[pulumi.Input[str]]
        """
        Oracle Application Express (APEX) URL.
        """
        database_transforms_uri: NotRequired[pulumi.Input[str]]
        """
        The URL of the Database Transforms for the Autonomous Database.
        """
        graph_studio_uri: NotRequired[pulumi.Input[str]]
        """
        The URL of the Graph Studio for the Autonomous Database.
        """
        machine_learning_notebook_uri: NotRequired[pulumi.Input[str]]
        """
        The URL of the Oracle Machine Learning (OML) Notebook for the Autonomous
        Database.
        """
        machine_learning_user_management_uri: NotRequired[pulumi.Input[str]]
        """
        The URL of Machine Learning user management the Autonomous Database.
        """
        mongo_db_uri: NotRequired[pulumi.Input[str]]
        """
        The URL of the MongoDB API for the Autonomous Database.
        """
        ords_uri: NotRequired[pulumi.Input[str]]
        """
        The Oracle REST Data Services (ORDS) URL of the Web Access for the
        Autonomous Database.
        """
        sql_dev_web_uri: NotRequired[pulumi.Input[str]]
        """
        The URL of the Oracle SQL Developer Web for the Autonomous Database.
        """
elif False:
    AutonomousDatabasePropertiesConnectionUrlArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AutonomousDatabasePropertiesConnectionUrlArgs:
    def __init__(__self__, *,
                 apex_uri: Optional[pulumi.Input[str]] = None,
                 database_transforms_uri: Optional[pulumi.Input[str]] = None,
                 graph_studio_uri: Optional[pulumi.Input[str]] = None,
                 machine_learning_notebook_uri: Optional[pulumi.Input[str]] = None,
                 machine_learning_user_management_uri: Optional[pulumi.Input[str]] = None,
                 mongo_db_uri: Optional[pulumi.Input[str]] = None,
                 ords_uri: Optional[pulumi.Input[str]] = None,
                 sql_dev_web_uri: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] apex_uri: Oracle Application Express (APEX) URL.
        :param pulumi.Input[str] database_transforms_uri: The URL of the Database Transforms for the Autonomous Database.
        :param pulumi.Input[str] graph_studio_uri: The URL of the Graph Studio for the Autonomous Database.
        :param pulumi.Input[str] machine_learning_notebook_uri: The URL of the Oracle Machine Learning (OML) Notebook for the Autonomous
               Database.
        :param pulumi.Input[str] machine_learning_user_management_uri: The URL of Machine Learning user management the Autonomous Database.
        :param pulumi.Input[str] mongo_db_uri: The URL of the MongoDB API for the Autonomous Database.
        :param pulumi.Input[str] ords_uri: The Oracle REST Data Services (ORDS) URL of the Web Access for the
               Autonomous Database.
        :param pulumi.Input[str] sql_dev_web_uri: The URL of the Oracle SQL Developer Web for the Autonomous Database.
        """
        if apex_uri is not None:
            pulumi.set(__self__, "apex_uri", apex_uri)
        if database_transforms_uri is not None:
            pulumi.set(__self__, "database_transforms_uri", database_transforms_uri)
        if graph_studio_uri is not None:
            pulumi.set(__self__, "graph_studio_uri", graph_studio_uri)
        if machine_learning_notebook_uri is not None:
            pulumi.set(__self__, "machine_learning_notebook_uri", machine_learning_notebook_uri)
        if machine_learning_user_management_uri is not None:
            pulumi.set(__self__, "machine_learning_user_management_uri", machine_learning_user_management_uri)
        if mongo_db_uri is not None:
            pulumi.set(__self__, "mongo_db_uri", mongo_db_uri)
        if ords_uri is not None:
            pulumi.set(__self__, "ords_uri", ords_uri)
        if sql_dev_web_uri is not None:
            pulumi.set(__self__, "sql_dev_web_uri", sql_dev_web_uri)

    @property
    @pulumi.getter(name="apexUri")
    def apex_uri(self) -> Optional[pulumi.Input[str]]:
        """
        Oracle Application Express (APEX) URL.
        """
        return pulumi.get(self, "apex_uri")

    @apex_uri.setter
    def apex_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "apex_uri", value)

    @property
    @pulumi.getter(name="databaseTransformsUri")
    def database_transforms_uri(self) -> Optional[pulumi.Input[str]]:
        """
        The URL of the Database Transforms for the Autonomous Database.
        """
        return pulumi.get(self, "database_transforms_uri")

    @database_transforms_uri.setter
    def database_transforms_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_transforms_uri", value)

    @property
    @pulumi.getter(name="graphStudioUri")
    def graph_studio_uri(self) -> Optional[pulumi.Input[str]]:
        """
        The URL of the Graph Studio for the Autonomous Database.
        """
        return pulumi.get(self, "graph_studio_uri")

    @graph_studio_uri.setter
    def graph_studio_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "graph_studio_uri", value)

    @property
    @pulumi.getter(name="machineLearningNotebookUri")
    def machine_learning_notebook_uri(self) -> Optional[pulumi.Input[str]]:
        """
        The URL of the Oracle Machine Learning (OML) Notebook for the Autonomous
        Database.
        """
        return pulumi.get(self, "machine_learning_notebook_uri")

    @machine_learning_notebook_uri.setter
    def machine_learning_notebook_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "machine_learning_notebook_uri", value)

    @property
    @pulumi.getter(name="machineLearningUserManagementUri")
    def machine_learning_user_management_uri(self) -> Optional[pulumi.Input[str]]:
        """
        The URL of Machine Learning user management the Autonomous Database.
        """
        return pulumi.get(self, "machine_learning_user_management_uri")

    @machine_learning_user_management_uri.setter
    def machine_learning_user_management_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "machine_learning_user_management_uri", value)

    @property
    @pulumi.getter(name="mongoDbUri")
    def mongo_db_uri(self) -> Optional[pulumi.Input[str]]:
        """
        The URL of the MongoDB API for the Autonomous Database.
        """
        return pulumi.get(self, "mongo_db_uri")

    @mongo_db_uri.setter
    def mongo_db_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mongo_db_uri", value)

    @property
    @pulumi.getter(name="ordsUri")
    def ords_uri(self) -> Optional[pulumi.Input[str]]:
        """
        The Oracle REST Data Services (ORDS) URL of the Web Access for the
        Autonomous Database.
        """
        return pulumi.get(self, "ords_uri")

    @ords_uri.setter
    def ords_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ords_uri", value)

    @property
    @pulumi.getter(name="sqlDevWebUri")
    def sql_dev_web_uri(self) -> Optional[pulumi.Input[str]]:
        """
        The URL of the Oracle SQL Developer Web for the Autonomous Database.
        """
        return pulumi.get(self, "sql_dev_web_uri")

    @sql_dev_web_uri.setter
    def sql_dev_web_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sql_dev_web_uri", value)


if not MYPY:
    class AutonomousDatabasePropertiesCustomerContactArgsDict(TypedDict):
        email: pulumi.Input[str]
        """
        The email address used by Oracle to send notifications regarding databases
        and infrastructure.

        <a name="nested_apex_details"></a>The `apex_details` block contains:
        """
elif False:
    AutonomousDatabasePropertiesCustomerContactArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AutonomousDatabasePropertiesCustomerContactArgs:
    def __init__(__self__, *,
                 email: pulumi.Input[str]):
        """
        :param pulumi.Input[str] email: The email address used by Oracle to send notifications regarding databases
               and infrastructure.
               
               <a name="nested_apex_details"></a>The `apex_details` block contains:
        """
        pulumi.set(__self__, "email", email)

    @property
    @pulumi.getter
    def email(self) -> pulumi.Input[str]:
        """
        The email address used by Oracle to send notifications regarding databases
        and infrastructure.

        <a name="nested_apex_details"></a>The `apex_details` block contains:
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: pulumi.Input[str]):
        pulumi.set(self, "email", value)


if not MYPY:
    class AutonomousDatabasePropertiesLocalStandbyDbArgsDict(TypedDict):
        data_guard_role_changed_time: NotRequired[pulumi.Input[str]]
        """
        The date and time the Autonomous Data Guard role was switched for the
        standby Autonomous Database.
        """
        disaster_recovery_role_changed_time: NotRequired[pulumi.Input[str]]
        """
        The date and time the Disaster Recovery role was switched for the standby
        Autonomous Database.
        """
        lag_time_duration: NotRequired[pulumi.Input[str]]
        """
        The amount of time, in seconds, that the data of the standby database lags
        in comparison to the data of the primary database.
        """
        lifecycle_details: NotRequired[pulumi.Input[str]]
        """
        The additional details about the current lifecycle state of the
        Autonomous Database.
        """
        state: NotRequired[pulumi.Input[str]]
        """
        Possible values:
         STATE_UNSPECIFIED
        PROVISIONING
        AVAILABLE
        STOPPING
        STOPPED
        STARTING
        TERMINATING
        TERMINATED
        UNAVAILABLE
        RESTORE_IN_PROGRESS
        RESTORE_FAILED
        BACKUP_IN_PROGRESS
        SCALE_IN_PROGRESS
        AVAILABLE_NEEDS_ATTENTION
        UPDATING
        MAINTENANCE_IN_PROGRESS
        RESTARTING
        RECREATING
        ROLE_CHANGE_IN_PROGRESS
        UPGRADING
        INACCESSIBLE
        STANDBY
        """
elif False:
    AutonomousDatabasePropertiesLocalStandbyDbArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AutonomousDatabasePropertiesLocalStandbyDbArgs:
    def __init__(__self__, *,
                 data_guard_role_changed_time: Optional[pulumi.Input[str]] = None,
                 disaster_recovery_role_changed_time: Optional[pulumi.Input[str]] = None,
                 lag_time_duration: Optional[pulumi.Input[str]] = None,
                 lifecycle_details: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_guard_role_changed_time: The date and time the Autonomous Data Guard role was switched for the
               standby Autonomous Database.
        :param pulumi.Input[str] disaster_recovery_role_changed_time: The date and time the Disaster Recovery role was switched for the standby
               Autonomous Database.
        :param pulumi.Input[str] lag_time_duration: The amount of time, in seconds, that the data of the standby database lags
               in comparison to the data of the primary database.
        :param pulumi.Input[str] lifecycle_details: The additional details about the current lifecycle state of the
               Autonomous Database.
        :param pulumi.Input[str] state: Possible values:
                STATE_UNSPECIFIED
               PROVISIONING
               AVAILABLE
               STOPPING
               STOPPED
               STARTING
               TERMINATING
               TERMINATED
               UNAVAILABLE
               RESTORE_IN_PROGRESS
               RESTORE_FAILED
               BACKUP_IN_PROGRESS
               SCALE_IN_PROGRESS
               AVAILABLE_NEEDS_ATTENTION
               UPDATING
               MAINTENANCE_IN_PROGRESS
               RESTARTING
               RECREATING
               ROLE_CHANGE_IN_PROGRESS
               UPGRADING
               INACCESSIBLE
               STANDBY
        """
        if data_guard_role_changed_time is not None:
            pulumi.set(__self__, "data_guard_role_changed_time", data_guard_role_changed_time)
        if disaster_recovery_role_changed_time is not None:
            pulumi.set(__self__, "disaster_recovery_role_changed_time", disaster_recovery_role_changed_time)
        if lag_time_duration is not None:
            pulumi.set(__self__, "lag_time_duration", lag_time_duration)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="dataGuardRoleChangedTime")
    def data_guard_role_changed_time(self) -> Optional[pulumi.Input[str]]:
        """
        The date and time the Autonomous Data Guard role was switched for the
        standby Autonomous Database.
        """
        return pulumi.get(self, "data_guard_role_changed_time")

    @data_guard_role_changed_time.setter
    def data_guard_role_changed_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_guard_role_changed_time", value)

    @property
    @pulumi.getter(name="disasterRecoveryRoleChangedTime")
    def disaster_recovery_role_changed_time(self) -> Optional[pulumi.Input[str]]:
        """
        The date and time the Disaster Recovery role was switched for the standby
        Autonomous Database.
        """
        return pulumi.get(self, "disaster_recovery_role_changed_time")

    @disaster_recovery_role_changed_time.setter
    def disaster_recovery_role_changed_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disaster_recovery_role_changed_time", value)

    @property
    @pulumi.getter(name="lagTimeDuration")
    def lag_time_duration(self) -> Optional[pulumi.Input[str]]:
        """
        The amount of time, in seconds, that the data of the standby database lags
        in comparison to the data of the primary database.
        """
        return pulumi.get(self, "lag_time_duration")

    @lag_time_duration.setter
    def lag_time_duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lag_time_duration", value)

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[pulumi.Input[str]]:
        """
        The additional details about the current lifecycle state of the
        Autonomous Database.
        """
        return pulumi.get(self, "lifecycle_details")

    @lifecycle_details.setter
    def lifecycle_details(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lifecycle_details", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        Possible values:
         STATE_UNSPECIFIED
        PROVISIONING
        AVAILABLE
        STOPPING
        STOPPED
        STARTING
        TERMINATING
        TERMINATED
        UNAVAILABLE
        RESTORE_IN_PROGRESS
        RESTORE_FAILED
        BACKUP_IN_PROGRESS
        SCALE_IN_PROGRESS
        AVAILABLE_NEEDS_ATTENTION
        UPDATING
        MAINTENANCE_IN_PROGRESS
        RESTARTING
        RECREATING
        ROLE_CHANGE_IN_PROGRESS
        UPGRADING
        INACCESSIBLE
        STANDBY
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)


if not MYPY:
    class AutonomousDatabasePropertiesScheduledOperationDetailArgsDict(TypedDict):
        day_of_week: NotRequired[pulumi.Input[str]]
        """
        Possible values:
         DAY_OF_WEEK_UNSPECIFIED
        MONDAY
        TUESDAY
        WEDNESDAY
        THURSDAY
        FRIDAY
        SATURDAY
        SUNDAY
        """
        start_times: NotRequired[pulumi.Input[Sequence[pulumi.Input['AutonomousDatabasePropertiesScheduledOperationDetailStartTimeArgsDict']]]]
        """
        Represents a time of day. The date and time zone are either not significant
        or are specified elsewhere. An API may choose to allow leap seconds. Related
        types are google.type.Date and 'google.protobuf.Timestamp'.
        """
        stop_times: NotRequired[pulumi.Input[Sequence[pulumi.Input['AutonomousDatabasePropertiesScheduledOperationDetailStopTimeArgsDict']]]]
        """
        Represents a time of day. The date and time zone are either not significant
        or are specified elsewhere. An API may choose to allow leap seconds. Related
        types are google.type.Date and 'google.protobuf.Timestamp'.
        """
elif False:
    AutonomousDatabasePropertiesScheduledOperationDetailArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AutonomousDatabasePropertiesScheduledOperationDetailArgs:
    def __init__(__self__, *,
                 day_of_week: Optional[pulumi.Input[str]] = None,
                 start_times: Optional[pulumi.Input[Sequence[pulumi.Input['AutonomousDatabasePropertiesScheduledOperationDetailStartTimeArgs']]]] = None,
                 stop_times: Optional[pulumi.Input[Sequence[pulumi.Input['AutonomousDatabasePropertiesScheduledOperationDetailStopTimeArgs']]]] = None):
        """
        :param pulumi.Input[str] day_of_week: Possible values:
                DAY_OF_WEEK_UNSPECIFIED
               MONDAY
               TUESDAY
               WEDNESDAY
               THURSDAY
               FRIDAY
               SATURDAY
               SUNDAY
        :param pulumi.Input[Sequence[pulumi.Input['AutonomousDatabasePropertiesScheduledOperationDetailStartTimeArgs']]] start_times: Represents a time of day. The date and time zone are either not significant
               or are specified elsewhere. An API may choose to allow leap seconds. Related
               types are google.type.Date and 'google.protobuf.Timestamp'.
        :param pulumi.Input[Sequence[pulumi.Input['AutonomousDatabasePropertiesScheduledOperationDetailStopTimeArgs']]] stop_times: Represents a time of day. The date and time zone are either not significant
               or are specified elsewhere. An API may choose to allow leap seconds. Related
               types are google.type.Date and 'google.protobuf.Timestamp'.
        """
        if day_of_week is not None:
            pulumi.set(__self__, "day_of_week", day_of_week)
        if start_times is not None:
            pulumi.set(__self__, "start_times", start_times)
        if stop_times is not None:
            pulumi.set(__self__, "stop_times", stop_times)

    @property
    @pulumi.getter(name="dayOfWeek")
    def day_of_week(self) -> Optional[pulumi.Input[str]]:
        """
        Possible values:
         DAY_OF_WEEK_UNSPECIFIED
        MONDAY
        TUESDAY
        WEDNESDAY
        THURSDAY
        FRIDAY
        SATURDAY
        SUNDAY
        """
        return pulumi.get(self, "day_of_week")

    @day_of_week.setter
    def day_of_week(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "day_of_week", value)

    @property
    @pulumi.getter(name="startTimes")
    def start_times(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutonomousDatabasePropertiesScheduledOperationDetailStartTimeArgs']]]]:
        """
        Represents a time of day. The date and time zone are either not significant
        or are specified elsewhere. An API may choose to allow leap seconds. Related
        types are google.type.Date and 'google.protobuf.Timestamp'.
        """
        return pulumi.get(self, "start_times")

    @start_times.setter
    def start_times(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutonomousDatabasePropertiesScheduledOperationDetailStartTimeArgs']]]]):
        pulumi.set(self, "start_times", value)

    @property
    @pulumi.getter(name="stopTimes")
    def stop_times(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutonomousDatabasePropertiesScheduledOperationDetailStopTimeArgs']]]]:
        """
        Represents a time of day. The date and time zone are either not significant
        or are specified elsewhere. An API may choose to allow leap seconds. Related
        types are google.type.Date and 'google.protobuf.Timestamp'.
        """
        return pulumi.get(self, "stop_times")

    @stop_times.setter
    def stop_times(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutonomousDatabasePropertiesScheduledOperationDetailStopTimeArgs']]]]):
        pulumi.set(self, "stop_times", value)


if not MYPY:
    class AutonomousDatabasePropertiesScheduledOperationDetailStartTimeArgsDict(TypedDict):
        hours: NotRequired[pulumi.Input[int]]
        """
        Hours of day in 24 hour format. Should be from 0 to 23. An API may choose
        to allow the value "24:00:00" for scenarios like business closing time.
        """
        minutes: NotRequired[pulumi.Input[int]]
        """
        Minutes of hour of day. Must be from 0 to 59.
        """
        nanos: NotRequired[pulumi.Input[int]]
        """
        Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
        """
        seconds: NotRequired[pulumi.Input[int]]
        """
        Seconds of minutes of the time. Must normally be from 0 to 59. An API may
        allow the value 60 if it allows leap-seconds.
        """
elif False:
    AutonomousDatabasePropertiesScheduledOperationDetailStartTimeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AutonomousDatabasePropertiesScheduledOperationDetailStartTimeArgs:
    def __init__(__self__, *,
                 hours: Optional[pulumi.Input[int]] = None,
                 minutes: Optional[pulumi.Input[int]] = None,
                 nanos: Optional[pulumi.Input[int]] = None,
                 seconds: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] hours: Hours of day in 24 hour format. Should be from 0 to 23. An API may choose
               to allow the value "24:00:00" for scenarios like business closing time.
        :param pulumi.Input[int] minutes: Minutes of hour of day. Must be from 0 to 59.
        :param pulumi.Input[int] nanos: Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
        :param pulumi.Input[int] seconds: Seconds of minutes of the time. Must normally be from 0 to 59. An API may
               allow the value 60 if it allows leap-seconds.
        """
        if hours is not None:
            pulumi.set(__self__, "hours", hours)
        if minutes is not None:
            pulumi.set(__self__, "minutes", minutes)
        if nanos is not None:
            pulumi.set(__self__, "nanos", nanos)
        if seconds is not None:
            pulumi.set(__self__, "seconds", seconds)

    @property
    @pulumi.getter
    def hours(self) -> Optional[pulumi.Input[int]]:
        """
        Hours of day in 24 hour format. Should be from 0 to 23. An API may choose
        to allow the value "24:00:00" for scenarios like business closing time.
        """
        return pulumi.get(self, "hours")

    @hours.setter
    def hours(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hours", value)

    @property
    @pulumi.getter
    def minutes(self) -> Optional[pulumi.Input[int]]:
        """
        Minutes of hour of day. Must be from 0 to 59.
        """
        return pulumi.get(self, "minutes")

    @minutes.setter
    def minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "minutes", value)

    @property
    @pulumi.getter
    def nanos(self) -> Optional[pulumi.Input[int]]:
        """
        Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
        """
        return pulumi.get(self, "nanos")

    @nanos.setter
    def nanos(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "nanos", value)

    @property
    @pulumi.getter
    def seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Seconds of minutes of the time. Must normally be from 0 to 59. An API may
        allow the value 60 if it allows leap-seconds.
        """
        return pulumi.get(self, "seconds")

    @seconds.setter
    def seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "seconds", value)


if not MYPY:
    class AutonomousDatabasePropertiesScheduledOperationDetailStopTimeArgsDict(TypedDict):
        hours: NotRequired[pulumi.Input[int]]
        """
        Hours of day in 24 hour format. Should be from 0 to 23. An API may choose
        to allow the value "24:00:00" for scenarios like business closing time.
        """
        minutes: NotRequired[pulumi.Input[int]]
        """
        Minutes of hour of day. Must be from 0 to 59.
        """
        nanos: NotRequired[pulumi.Input[int]]
        """
        Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
        """
        seconds: NotRequired[pulumi.Input[int]]
        """
        Seconds of minutes of the time. Must normally be from 0 to 59. An API may
        allow the value 60 if it allows leap-seconds.
        """
elif False:
    AutonomousDatabasePropertiesScheduledOperationDetailStopTimeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AutonomousDatabasePropertiesScheduledOperationDetailStopTimeArgs:
    def __init__(__self__, *,
                 hours: Optional[pulumi.Input[int]] = None,
                 minutes: Optional[pulumi.Input[int]] = None,
                 nanos: Optional[pulumi.Input[int]] = None,
                 seconds: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] hours: Hours of day in 24 hour format. Should be from 0 to 23. An API may choose
               to allow the value "24:00:00" for scenarios like business closing time.
        :param pulumi.Input[int] minutes: Minutes of hour of day. Must be from 0 to 59.
        :param pulumi.Input[int] nanos: Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
        :param pulumi.Input[int] seconds: Seconds of minutes of the time. Must normally be from 0 to 59. An API may
               allow the value 60 if it allows leap-seconds.
        """
        if hours is not None:
            pulumi.set(__self__, "hours", hours)
        if minutes is not None:
            pulumi.set(__self__, "minutes", minutes)
        if nanos is not None:
            pulumi.set(__self__, "nanos", nanos)
        if seconds is not None:
            pulumi.set(__self__, "seconds", seconds)

    @property
    @pulumi.getter
    def hours(self) -> Optional[pulumi.Input[int]]:
        """
        Hours of day in 24 hour format. Should be from 0 to 23. An API may choose
        to allow the value "24:00:00" for scenarios like business closing time.
        """
        return pulumi.get(self, "hours")

    @hours.setter
    def hours(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hours", value)

    @property
    @pulumi.getter
    def minutes(self) -> Optional[pulumi.Input[int]]:
        """
        Minutes of hour of day. Must be from 0 to 59.
        """
        return pulumi.get(self, "minutes")

    @minutes.setter
    def minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "minutes", value)

    @property
    @pulumi.getter
    def nanos(self) -> Optional[pulumi.Input[int]]:
        """
        Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
        """
        return pulumi.get(self, "nanos")

    @nanos.setter
    def nanos(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "nanos", value)

    @property
    @pulumi.getter
    def seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Seconds of minutes of the time. Must normally be from 0 to 59. An API may
        allow the value 60 if it allows leap-seconds.
        """
        return pulumi.get(self, "seconds")

    @seconds.setter
    def seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "seconds", value)


if not MYPY:
    class CloudExadataInfrastructurePropertiesArgsDict(TypedDict):
        shape: pulumi.Input[str]
        """
        The shape of the Exadata Infrastructure. The shape determines the
        amount of CPU, storage, and memory resources allocated to the instance.
        """
        activated_storage_count: NotRequired[pulumi.Input[int]]
        """
        (Output)
        The requested number of additional storage servers activated for the
        Exadata Infrastructure.
        """
        additional_storage_count: NotRequired[pulumi.Input[int]]
        """
        (Output)
        The requested number of additional storage servers for the Exadata
        Infrastructure.
        """
        available_storage_size_gb: NotRequired[pulumi.Input[int]]
        """
        (Output)
        The available storage can be allocated to the Exadata Infrastructure
        resource, in gigabytes (GB).
        """
        compute_count: NotRequired[pulumi.Input[int]]
        """
        The number of compute servers for the Exadata Infrastructure.
        """
        cpu_count: NotRequired[pulumi.Input[int]]
        """
        (Output)
        The number of enabled CPU cores.
        """
        customer_contacts: NotRequired[pulumi.Input[Sequence[pulumi.Input['CloudExadataInfrastructurePropertiesCustomerContactArgsDict']]]]
        """
        The list of customer contacts.
        Structure is documented below.
        """
        data_storage_size_tb: NotRequired[pulumi.Input[float]]
        """
        (Output)
        Size, in terabytes, of the DATA disk group.
        """
        db_node_storage_size_gb: NotRequired[pulumi.Input[int]]
        """
        (Output)
        The local node storage allocated in GBs.
        """
        db_server_version: NotRequired[pulumi.Input[str]]
        """
        (Output)
        The software version of the database servers (dom0) in the Exadata
        Infrastructure.
        """
        maintenance_window: NotRequired[pulumi.Input['CloudExadataInfrastructurePropertiesMaintenanceWindowArgsDict']]
        """
        Maintenance window as defined by Oracle.
        https://docs.oracle.com/en-us/iaas/api/#/en/database/20160918/datatypes/MaintenanceWindow
        Structure is documented below.
        """
        max_cpu_count: NotRequired[pulumi.Input[int]]
        """
        (Output)
        The total number of CPU cores available.
        """
        max_data_storage_tb: NotRequired[pulumi.Input[float]]
        """
        (Output)
        The total available DATA disk group size.
        """
        max_db_node_storage_size_gb: NotRequired[pulumi.Input[int]]
        """
        (Output)
        The total local node storage available in GBs.
        """
        max_memory_gb: NotRequired[pulumi.Input[int]]
        """
        (Output)
        The total memory available in GBs.
        """
        memory_size_gb: NotRequired[pulumi.Input[int]]
        """
        (Output)
        The memory allocated in GBs.
        """
        monthly_db_server_version: NotRequired[pulumi.Input[str]]
        """
        (Output)
        The monthly software version of the database servers (dom0)
        in the Exadata Infrastructure. Example: 20.1.15
        """
        monthly_storage_server_version: NotRequired[pulumi.Input[str]]
        """
        (Output)
        The monthly software version of the storage servers (cells)
        in the Exadata Infrastructure. Example: 20.1.15
        """
        next_maintenance_run_id: NotRequired[pulumi.Input[str]]
        """
        (Output)
        The OCID of the next maintenance run.
        """
        next_maintenance_run_time: NotRequired[pulumi.Input[str]]
        """
        (Output)
        The time when the next maintenance run will occur.
        """
        next_security_maintenance_run_time: NotRequired[pulumi.Input[str]]
        """
        (Output)
        The time when the next security maintenance run will occur.
        """
        oci_url: NotRequired[pulumi.Input[str]]
        """
        (Output)
        Deep link to the OCI console to view this resource.
        """
        ocid: NotRequired[pulumi.Input[str]]
        """
        (Output)
        OCID of created infra.
        https://docs.oracle.com/en-us/iaas/Content/General/Concepts/identifiers.htm#Oracle
        """
        state: NotRequired[pulumi.Input[str]]
        """
        (Output)
        The current lifecycle state of the Exadata Infrastructure.
        Possible values:
        STATE_UNSPECIFIED
        PROVISIONING
        AVAILABLE
        UPDATING
        TERMINATING
        TERMINATED
        FAILED
        MAINTENANCE_IN_PROGRESS
        """
        storage_count: NotRequired[pulumi.Input[int]]
        """
        The number of Cloud Exadata storage servers for the Exadata Infrastructure.
        """
        storage_server_version: NotRequired[pulumi.Input[str]]
        """
        (Output)
        The software version of the storage servers (cells) in the Exadata
        Infrastructure.
        """
        total_storage_size_gb: NotRequired[pulumi.Input[int]]
        """
        The total storage allocated to the Exadata Infrastructure
        resource, in gigabytes (GB).
        """
elif False:
    CloudExadataInfrastructurePropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CloudExadataInfrastructurePropertiesArgs:
    def __init__(__self__, *,
                 shape: pulumi.Input[str],
                 activated_storage_count: Optional[pulumi.Input[int]] = None,
                 additional_storage_count: Optional[pulumi.Input[int]] = None,
                 available_storage_size_gb: Optional[pulumi.Input[int]] = None,
                 compute_count: Optional[pulumi.Input[int]] = None,
                 cpu_count: Optional[pulumi.Input[int]] = None,
                 customer_contacts: Optional[pulumi.Input[Sequence[pulumi.Input['CloudExadataInfrastructurePropertiesCustomerContactArgs']]]] = None,
                 data_storage_size_tb: Optional[pulumi.Input[float]] = None,
                 db_node_storage_size_gb: Optional[pulumi.Input[int]] = None,
                 db_server_version: Optional[pulumi.Input[str]] = None,
                 maintenance_window: Optional[pulumi.Input['CloudExadataInfrastructurePropertiesMaintenanceWindowArgs']] = None,
                 max_cpu_count: Optional[pulumi.Input[int]] = None,
                 max_data_storage_tb: Optional[pulumi.Input[float]] = None,
                 max_db_node_storage_size_gb: Optional[pulumi.Input[int]] = None,
                 max_memory_gb: Optional[pulumi.Input[int]] = None,
                 memory_size_gb: Optional[pulumi.Input[int]] = None,
                 monthly_db_server_version: Optional[pulumi.Input[str]] = None,
                 monthly_storage_server_version: Optional[pulumi.Input[str]] = None,
                 next_maintenance_run_id: Optional[pulumi.Input[str]] = None,
                 next_maintenance_run_time: Optional[pulumi.Input[str]] = None,
                 next_security_maintenance_run_time: Optional[pulumi.Input[str]] = None,
                 oci_url: Optional[pulumi.Input[str]] = None,
                 ocid: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 storage_count: Optional[pulumi.Input[int]] = None,
                 storage_server_version: Optional[pulumi.Input[str]] = None,
                 total_storage_size_gb: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] shape: The shape of the Exadata Infrastructure. The shape determines the
               amount of CPU, storage, and memory resources allocated to the instance.
        :param pulumi.Input[int] activated_storage_count: (Output)
               The requested number of additional storage servers activated for the
               Exadata Infrastructure.
        :param pulumi.Input[int] additional_storage_count: (Output)
               The requested number of additional storage servers for the Exadata
               Infrastructure.
        :param pulumi.Input[int] available_storage_size_gb: (Output)
               The available storage can be allocated to the Exadata Infrastructure
               resource, in gigabytes (GB).
        :param pulumi.Input[int] compute_count: The number of compute servers for the Exadata Infrastructure.
        :param pulumi.Input[int] cpu_count: (Output)
               The number of enabled CPU cores.
        :param pulumi.Input[Sequence[pulumi.Input['CloudExadataInfrastructurePropertiesCustomerContactArgs']]] customer_contacts: The list of customer contacts.
               Structure is documented below.
        :param pulumi.Input[float] data_storage_size_tb: (Output)
               Size, in terabytes, of the DATA disk group.
        :param pulumi.Input[int] db_node_storage_size_gb: (Output)
               The local node storage allocated in GBs.
        :param pulumi.Input[str] db_server_version: (Output)
               The software version of the database servers (dom0) in the Exadata
               Infrastructure.
        :param pulumi.Input['CloudExadataInfrastructurePropertiesMaintenanceWindowArgs'] maintenance_window: Maintenance window as defined by Oracle.
               https://docs.oracle.com/en-us/iaas/api/#/en/database/20160918/datatypes/MaintenanceWindow
               Structure is documented below.
        :param pulumi.Input[int] max_cpu_count: (Output)
               The total number of CPU cores available.
        :param pulumi.Input[float] max_data_storage_tb: (Output)
               The total available DATA disk group size.
        :param pulumi.Input[int] max_db_node_storage_size_gb: (Output)
               The total local node storage available in GBs.
        :param pulumi.Input[int] max_memory_gb: (Output)
               The total memory available in GBs.
        :param pulumi.Input[int] memory_size_gb: (Output)
               The memory allocated in GBs.
        :param pulumi.Input[str] monthly_db_server_version: (Output)
               The monthly software version of the database servers (dom0)
               in the Exadata Infrastructure. Example: 20.1.15
        :param pulumi.Input[str] monthly_storage_server_version: (Output)
               The monthly software version of the storage servers (cells)
               in the Exadata Infrastructure. Example: 20.1.15
        :param pulumi.Input[str] next_maintenance_run_id: (Output)
               The OCID of the next maintenance run.
        :param pulumi.Input[str] next_maintenance_run_time: (Output)
               The time when the next maintenance run will occur.
        :param pulumi.Input[str] next_security_maintenance_run_time: (Output)
               The time when the next security maintenance run will occur.
        :param pulumi.Input[str] oci_url: (Output)
               Deep link to the OCI console to view this resource.
        :param pulumi.Input[str] ocid: (Output)
               OCID of created infra.
               https://docs.oracle.com/en-us/iaas/Content/General/Concepts/identifiers.htm#Oracle
        :param pulumi.Input[str] state: (Output)
               The current lifecycle state of the Exadata Infrastructure.
               Possible values:
               STATE_UNSPECIFIED
               PROVISIONING
               AVAILABLE
               UPDATING
               TERMINATING
               TERMINATED
               FAILED
               MAINTENANCE_IN_PROGRESS
        :param pulumi.Input[int] storage_count: The number of Cloud Exadata storage servers for the Exadata Infrastructure.
        :param pulumi.Input[str] storage_server_version: (Output)
               The software version of the storage servers (cells) in the Exadata
               Infrastructure.
        :param pulumi.Input[int] total_storage_size_gb: The total storage allocated to the Exadata Infrastructure
               resource, in gigabytes (GB).
        """
        pulumi.set(__self__, "shape", shape)
        if activated_storage_count is not None:
            pulumi.set(__self__, "activated_storage_count", activated_storage_count)
        if additional_storage_count is not None:
            pulumi.set(__self__, "additional_storage_count", additional_storage_count)
        if available_storage_size_gb is not None:
            pulumi.set(__self__, "available_storage_size_gb", available_storage_size_gb)
        if compute_count is not None:
            pulumi.set(__self__, "compute_count", compute_count)
        if cpu_count is not None:
            pulumi.set(__self__, "cpu_count", cpu_count)
        if customer_contacts is not None:
            pulumi.set(__self__, "customer_contacts", customer_contacts)
        if data_storage_size_tb is not None:
            pulumi.set(__self__, "data_storage_size_tb", data_storage_size_tb)
        if db_node_storage_size_gb is not None:
            pulumi.set(__self__, "db_node_storage_size_gb", db_node_storage_size_gb)
        if db_server_version is not None:
            pulumi.set(__self__, "db_server_version", db_server_version)
        if maintenance_window is not None:
            pulumi.set(__self__, "maintenance_window", maintenance_window)
        if max_cpu_count is not None:
            pulumi.set(__self__, "max_cpu_count", max_cpu_count)
        if max_data_storage_tb is not None:
            pulumi.set(__self__, "max_data_storage_tb", max_data_storage_tb)
        if max_db_node_storage_size_gb is not None:
            pulumi.set(__self__, "max_db_node_storage_size_gb", max_db_node_storage_size_gb)
        if max_memory_gb is not None:
            pulumi.set(__self__, "max_memory_gb", max_memory_gb)
        if memory_size_gb is not None:
            pulumi.set(__self__, "memory_size_gb", memory_size_gb)
        if monthly_db_server_version is not None:
            pulumi.set(__self__, "monthly_db_server_version", monthly_db_server_version)
        if monthly_storage_server_version is not None:
            pulumi.set(__self__, "monthly_storage_server_version", monthly_storage_server_version)
        if next_maintenance_run_id is not None:
            pulumi.set(__self__, "next_maintenance_run_id", next_maintenance_run_id)
        if next_maintenance_run_time is not None:
            pulumi.set(__self__, "next_maintenance_run_time", next_maintenance_run_time)
        if next_security_maintenance_run_time is not None:
            pulumi.set(__self__, "next_security_maintenance_run_time", next_security_maintenance_run_time)
        if oci_url is not None:
            pulumi.set(__self__, "oci_url", oci_url)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if storage_count is not None:
            pulumi.set(__self__, "storage_count", storage_count)
        if storage_server_version is not None:
            pulumi.set(__self__, "storage_server_version", storage_server_version)
        if total_storage_size_gb is not None:
            pulumi.set(__self__, "total_storage_size_gb", total_storage_size_gb)

    @property
    @pulumi.getter
    def shape(self) -> pulumi.Input[str]:
        """
        The shape of the Exadata Infrastructure. The shape determines the
        amount of CPU, storage, and memory resources allocated to the instance.
        """
        return pulumi.get(self, "shape")

    @shape.setter
    def shape(self, value: pulumi.Input[str]):
        pulumi.set(self, "shape", value)

    @property
    @pulumi.getter(name="activatedStorageCount")
    def activated_storage_count(self) -> Optional[pulumi.Input[int]]:
        """
        (Output)
        The requested number of additional storage servers activated for the
        Exadata Infrastructure.
        """
        return pulumi.get(self, "activated_storage_count")

    @activated_storage_count.setter
    def activated_storage_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "activated_storage_count", value)

    @property
    @pulumi.getter(name="additionalStorageCount")
    def additional_storage_count(self) -> Optional[pulumi.Input[int]]:
        """
        (Output)
        The requested number of additional storage servers for the Exadata
        Infrastructure.
        """
        return pulumi.get(self, "additional_storage_count")

    @additional_storage_count.setter
    def additional_storage_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "additional_storage_count", value)

    @property
    @pulumi.getter(name="availableStorageSizeGb")
    def available_storage_size_gb(self) -> Optional[pulumi.Input[int]]:
        """
        (Output)
        The available storage can be allocated to the Exadata Infrastructure
        resource, in gigabytes (GB).
        """
        return pulumi.get(self, "available_storage_size_gb")

    @available_storage_size_gb.setter
    def available_storage_size_gb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "available_storage_size_gb", value)

    @property
    @pulumi.getter(name="computeCount")
    def compute_count(self) -> Optional[pulumi.Input[int]]:
        """
        The number of compute servers for the Exadata Infrastructure.
        """
        return pulumi.get(self, "compute_count")

    @compute_count.setter
    def compute_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "compute_count", value)

    @property
    @pulumi.getter(name="cpuCount")
    def cpu_count(self) -> Optional[pulumi.Input[int]]:
        """
        (Output)
        The number of enabled CPU cores.
        """
        return pulumi.get(self, "cpu_count")

    @cpu_count.setter
    def cpu_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cpu_count", value)

    @property
    @pulumi.getter(name="customerContacts")
    def customer_contacts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CloudExadataInfrastructurePropertiesCustomerContactArgs']]]]:
        """
        The list of customer contacts.
        Structure is documented below.
        """
        return pulumi.get(self, "customer_contacts")

    @customer_contacts.setter
    def customer_contacts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CloudExadataInfrastructurePropertiesCustomerContactArgs']]]]):
        pulumi.set(self, "customer_contacts", value)

    @property
    @pulumi.getter(name="dataStorageSizeTb")
    def data_storage_size_tb(self) -> Optional[pulumi.Input[float]]:
        """
        (Output)
        Size, in terabytes, of the DATA disk group.
        """
        return pulumi.get(self, "data_storage_size_tb")

    @data_storage_size_tb.setter
    def data_storage_size_tb(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "data_storage_size_tb", value)

    @property
    @pulumi.getter(name="dbNodeStorageSizeGb")
    def db_node_storage_size_gb(self) -> Optional[pulumi.Input[int]]:
        """
        (Output)
        The local node storage allocated in GBs.
        """
        return pulumi.get(self, "db_node_storage_size_gb")

    @db_node_storage_size_gb.setter
    def db_node_storage_size_gb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "db_node_storage_size_gb", value)

    @property
    @pulumi.getter(name="dbServerVersion")
    def db_server_version(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        The software version of the database servers (dom0) in the Exadata
        Infrastructure.
        """
        return pulumi.get(self, "db_server_version")

    @db_server_version.setter
    def db_server_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db_server_version", value)

    @property
    @pulumi.getter(name="maintenanceWindow")
    def maintenance_window(self) -> Optional[pulumi.Input['CloudExadataInfrastructurePropertiesMaintenanceWindowArgs']]:
        """
        Maintenance window as defined by Oracle.
        https://docs.oracle.com/en-us/iaas/api/#/en/database/20160918/datatypes/MaintenanceWindow
        Structure is documented below.
        """
        return pulumi.get(self, "maintenance_window")

    @maintenance_window.setter
    def maintenance_window(self, value: Optional[pulumi.Input['CloudExadataInfrastructurePropertiesMaintenanceWindowArgs']]):
        pulumi.set(self, "maintenance_window", value)

    @property
    @pulumi.getter(name="maxCpuCount")
    def max_cpu_count(self) -> Optional[pulumi.Input[int]]:
        """
        (Output)
        The total number of CPU cores available.
        """
        return pulumi.get(self, "max_cpu_count")

    @max_cpu_count.setter
    def max_cpu_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_cpu_count", value)

    @property
    @pulumi.getter(name="maxDataStorageTb")
    def max_data_storage_tb(self) -> Optional[pulumi.Input[float]]:
        """
        (Output)
        The total available DATA disk group size.
        """
        return pulumi.get(self, "max_data_storage_tb")

    @max_data_storage_tb.setter
    def max_data_storage_tb(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "max_data_storage_tb", value)

    @property
    @pulumi.getter(name="maxDbNodeStorageSizeGb")
    def max_db_node_storage_size_gb(self) -> Optional[pulumi.Input[int]]:
        """
        (Output)
        The total local node storage available in GBs.
        """
        return pulumi.get(self, "max_db_node_storage_size_gb")

    @max_db_node_storage_size_gb.setter
    def max_db_node_storage_size_gb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_db_node_storage_size_gb", value)

    @property
    @pulumi.getter(name="maxMemoryGb")
    def max_memory_gb(self) -> Optional[pulumi.Input[int]]:
        """
        (Output)
        The total memory available in GBs.
        """
        return pulumi.get(self, "max_memory_gb")

    @max_memory_gb.setter
    def max_memory_gb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_memory_gb", value)

    @property
    @pulumi.getter(name="memorySizeGb")
    def memory_size_gb(self) -> Optional[pulumi.Input[int]]:
        """
        (Output)
        The memory allocated in GBs.
        """
        return pulumi.get(self, "memory_size_gb")

    @memory_size_gb.setter
    def memory_size_gb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "memory_size_gb", value)

    @property
    @pulumi.getter(name="monthlyDbServerVersion")
    def monthly_db_server_version(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        The monthly software version of the database servers (dom0)
        in the Exadata Infrastructure. Example: 20.1.15
        """
        return pulumi.get(self, "monthly_db_server_version")

    @monthly_db_server_version.setter
    def monthly_db_server_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "monthly_db_server_version", value)

    @property
    @pulumi.getter(name="monthlyStorageServerVersion")
    def monthly_storage_server_version(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        The monthly software version of the storage servers (cells)
        in the Exadata Infrastructure. Example: 20.1.15
        """
        return pulumi.get(self, "monthly_storage_server_version")

    @monthly_storage_server_version.setter
    def monthly_storage_server_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "monthly_storage_server_version", value)

    @property
    @pulumi.getter(name="nextMaintenanceRunId")
    def next_maintenance_run_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        The OCID of the next maintenance run.
        """
        return pulumi.get(self, "next_maintenance_run_id")

    @next_maintenance_run_id.setter
    def next_maintenance_run_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next_maintenance_run_id", value)

    @property
    @pulumi.getter(name="nextMaintenanceRunTime")
    def next_maintenance_run_time(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        The time when the next maintenance run will occur.
        """
        return pulumi.get(self, "next_maintenance_run_time")

    @next_maintenance_run_time.setter
    def next_maintenance_run_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next_maintenance_run_time", value)

    @property
    @pulumi.getter(name="nextSecurityMaintenanceRunTime")
    def next_security_maintenance_run_time(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        The time when the next security maintenance run will occur.
        """
        return pulumi.get(self, "next_security_maintenance_run_time")

    @next_security_maintenance_run_time.setter
    def next_security_maintenance_run_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next_security_maintenance_run_time", value)

    @property
    @pulumi.getter(name="ociUrl")
    def oci_url(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        Deep link to the OCI console to view this resource.
        """
        return pulumi.get(self, "oci_url")

    @oci_url.setter
    def oci_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oci_url", value)

    @property
    @pulumi.getter
    def ocid(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        OCID of created infra.
        https://docs.oracle.com/en-us/iaas/Content/General/Concepts/identifiers.htm#Oracle
        """
        return pulumi.get(self, "ocid")

    @ocid.setter
    def ocid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ocid", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        The current lifecycle state of the Exadata Infrastructure.
        Possible values:
        STATE_UNSPECIFIED
        PROVISIONING
        AVAILABLE
        UPDATING
        TERMINATING
        TERMINATED
        FAILED
        MAINTENANCE_IN_PROGRESS
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="storageCount")
    def storage_count(self) -> Optional[pulumi.Input[int]]:
        """
        The number of Cloud Exadata storage servers for the Exadata Infrastructure.
        """
        return pulumi.get(self, "storage_count")

    @storage_count.setter
    def storage_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "storage_count", value)

    @property
    @pulumi.getter(name="storageServerVersion")
    def storage_server_version(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        The software version of the storage servers (cells) in the Exadata
        Infrastructure.
        """
        return pulumi.get(self, "storage_server_version")

    @storage_server_version.setter
    def storage_server_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_server_version", value)

    @property
    @pulumi.getter(name="totalStorageSizeGb")
    def total_storage_size_gb(self) -> Optional[pulumi.Input[int]]:
        """
        The total storage allocated to the Exadata Infrastructure
        resource, in gigabytes (GB).
        """
        return pulumi.get(self, "total_storage_size_gb")

    @total_storage_size_gb.setter
    def total_storage_size_gb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "total_storage_size_gb", value)


if not MYPY:
    class CloudExadataInfrastructurePropertiesCustomerContactArgsDict(TypedDict):
        email: pulumi.Input[str]
        """
        The email address used by Oracle to send notifications regarding databases
        and infrastructure.
        """
elif False:
    CloudExadataInfrastructurePropertiesCustomerContactArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CloudExadataInfrastructurePropertiesCustomerContactArgs:
    def __init__(__self__, *,
                 email: pulumi.Input[str]):
        """
        :param pulumi.Input[str] email: The email address used by Oracle to send notifications regarding databases
               and infrastructure.
        """
        pulumi.set(__self__, "email", email)

    @property
    @pulumi.getter
    def email(self) -> pulumi.Input[str]:
        """
        The email address used by Oracle to send notifications regarding databases
        and infrastructure.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: pulumi.Input[str]):
        pulumi.set(self, "email", value)


if not MYPY:
    class CloudExadataInfrastructurePropertiesMaintenanceWindowArgsDict(TypedDict):
        custom_action_timeout_mins: NotRequired[pulumi.Input[int]]
        """
        Determines the amount of time the system will wait before the start of each
        database server patching operation. Custom action timeout is in minutes and
        valid value is between 15 to 120 (inclusive).
        """
        days_of_weeks: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Days during the week when maintenance should be performed.
        """
        hours_of_days: NotRequired[pulumi.Input[Sequence[pulumi.Input[int]]]]
        """
        The window of hours during the day when maintenance should be performed.
        The window is a 4 hour slot. Valid values are:
        0 - represents time slot 0:00 - 3:59 UTC
        4 - represents time slot 4:00 - 7:59 UTC
        8 - represents time slot 8:00 - 11:59 UTC
        12 - represents time slot 12:00 - 15:59 UTC
        16 - represents time slot 16:00 - 19:59 UTC
        20 - represents time slot 20:00 - 23:59 UTC
        """
        is_custom_action_timeout_enabled: NotRequired[pulumi.Input[bool]]
        """
        If true, enables the configuration of a custom action timeout (waiting
        period) between database server patching operations.
        """
        lead_time_week: NotRequired[pulumi.Input[int]]
        """
        Lead time window allows user to set a lead time to prepare for a down time.
        The lead time is in weeks and valid value is between 1 to 4.
        """
        months: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Months during the year when maintenance should be performed.
        """
        patching_mode: NotRequired[pulumi.Input[str]]
        """
        Cloud CloudExadataInfrastructure node patching method, either "ROLLING"
        or "NONROLLING". Default value is ROLLING.
        Possible values:
        PATCHING_MODE_UNSPECIFIED
        ROLLING
        NON_ROLLING
        """
        preference: NotRequired[pulumi.Input[str]]
        """
        The maintenance window scheduling preference.
        Possible values:
        MAINTENANCE_WINDOW_PREFERENCE_UNSPECIFIED
        CUSTOM_PREFERENCE
        NO_PREFERENCE
        """
        weeks_of_months: NotRequired[pulumi.Input[Sequence[pulumi.Input[int]]]]
        """
        Weeks during the month when maintenance should be performed. Weeks start on
        the 1st, 8th, 15th, and 22nd days of the month, and have a duration of 7
        days. Weeks start and end based on calendar dates, not days of the week.
        """
elif False:
    CloudExadataInfrastructurePropertiesMaintenanceWindowArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CloudExadataInfrastructurePropertiesMaintenanceWindowArgs:
    def __init__(__self__, *,
                 custom_action_timeout_mins: Optional[pulumi.Input[int]] = None,
                 days_of_weeks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 hours_of_days: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 is_custom_action_timeout_enabled: Optional[pulumi.Input[bool]] = None,
                 lead_time_week: Optional[pulumi.Input[int]] = None,
                 months: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 patching_mode: Optional[pulumi.Input[str]] = None,
                 preference: Optional[pulumi.Input[str]] = None,
                 weeks_of_months: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None):
        """
        :param pulumi.Input[int] custom_action_timeout_mins: Determines the amount of time the system will wait before the start of each
               database server patching operation. Custom action timeout is in minutes and
               valid value is between 15 to 120 (inclusive).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] days_of_weeks: Days during the week when maintenance should be performed.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] hours_of_days: The window of hours during the day when maintenance should be performed.
               The window is a 4 hour slot. Valid values are:
               0 - represents time slot 0:00 - 3:59 UTC
               4 - represents time slot 4:00 - 7:59 UTC
               8 - represents time slot 8:00 - 11:59 UTC
               12 - represents time slot 12:00 - 15:59 UTC
               16 - represents time slot 16:00 - 19:59 UTC
               20 - represents time slot 20:00 - 23:59 UTC
        :param pulumi.Input[bool] is_custom_action_timeout_enabled: If true, enables the configuration of a custom action timeout (waiting
               period) between database server patching operations.
        :param pulumi.Input[int] lead_time_week: Lead time window allows user to set a lead time to prepare for a down time.
               The lead time is in weeks and valid value is between 1 to 4.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] months: Months during the year when maintenance should be performed.
        :param pulumi.Input[str] patching_mode: Cloud CloudExadataInfrastructure node patching method, either "ROLLING"
               or "NONROLLING". Default value is ROLLING.
               Possible values:
               PATCHING_MODE_UNSPECIFIED
               ROLLING
               NON_ROLLING
        :param pulumi.Input[str] preference: The maintenance window scheduling preference.
               Possible values:
               MAINTENANCE_WINDOW_PREFERENCE_UNSPECIFIED
               CUSTOM_PREFERENCE
               NO_PREFERENCE
        :param pulumi.Input[Sequence[pulumi.Input[int]]] weeks_of_months: Weeks during the month when maintenance should be performed. Weeks start on
               the 1st, 8th, 15th, and 22nd days of the month, and have a duration of 7
               days. Weeks start and end based on calendar dates, not days of the week.
        """
        if custom_action_timeout_mins is not None:
            pulumi.set(__self__, "custom_action_timeout_mins", custom_action_timeout_mins)
        if days_of_weeks is not None:
            pulumi.set(__self__, "days_of_weeks", days_of_weeks)
        if hours_of_days is not None:
            pulumi.set(__self__, "hours_of_days", hours_of_days)
        if is_custom_action_timeout_enabled is not None:
            pulumi.set(__self__, "is_custom_action_timeout_enabled", is_custom_action_timeout_enabled)
        if lead_time_week is not None:
            pulumi.set(__self__, "lead_time_week", lead_time_week)
        if months is not None:
            pulumi.set(__self__, "months", months)
        if patching_mode is not None:
            pulumi.set(__self__, "patching_mode", patching_mode)
        if preference is not None:
            pulumi.set(__self__, "preference", preference)
        if weeks_of_months is not None:
            pulumi.set(__self__, "weeks_of_months", weeks_of_months)

    @property
    @pulumi.getter(name="customActionTimeoutMins")
    def custom_action_timeout_mins(self) -> Optional[pulumi.Input[int]]:
        """
        Determines the amount of time the system will wait before the start of each
        database server patching operation. Custom action timeout is in minutes and
        valid value is between 15 to 120 (inclusive).
        """
        return pulumi.get(self, "custom_action_timeout_mins")

    @custom_action_timeout_mins.setter
    def custom_action_timeout_mins(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "custom_action_timeout_mins", value)

    @property
    @pulumi.getter(name="daysOfWeeks")
    def days_of_weeks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Days during the week when maintenance should be performed.
        """
        return pulumi.get(self, "days_of_weeks")

    @days_of_weeks.setter
    def days_of_weeks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "days_of_weeks", value)

    @property
    @pulumi.getter(name="hoursOfDays")
    def hours_of_days(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        The window of hours during the day when maintenance should be performed.
        The window is a 4 hour slot. Valid values are:
        0 - represents time slot 0:00 - 3:59 UTC
        4 - represents time slot 4:00 - 7:59 UTC
        8 - represents time slot 8:00 - 11:59 UTC
        12 - represents time slot 12:00 - 15:59 UTC
        16 - represents time slot 16:00 - 19:59 UTC
        20 - represents time slot 20:00 - 23:59 UTC
        """
        return pulumi.get(self, "hours_of_days")

    @hours_of_days.setter
    def hours_of_days(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "hours_of_days", value)

    @property
    @pulumi.getter(name="isCustomActionTimeoutEnabled")
    def is_custom_action_timeout_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, enables the configuration of a custom action timeout (waiting
        period) between database server patching operations.
        """
        return pulumi.get(self, "is_custom_action_timeout_enabled")

    @is_custom_action_timeout_enabled.setter
    def is_custom_action_timeout_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_custom_action_timeout_enabled", value)

    @property
    @pulumi.getter(name="leadTimeWeek")
    def lead_time_week(self) -> Optional[pulumi.Input[int]]:
        """
        Lead time window allows user to set a lead time to prepare for a down time.
        The lead time is in weeks and valid value is between 1 to 4.
        """
        return pulumi.get(self, "lead_time_week")

    @lead_time_week.setter
    def lead_time_week(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "lead_time_week", value)

    @property
    @pulumi.getter
    def months(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Months during the year when maintenance should be performed.
        """
        return pulumi.get(self, "months")

    @months.setter
    def months(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "months", value)

    @property
    @pulumi.getter(name="patchingMode")
    def patching_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Cloud CloudExadataInfrastructure node patching method, either "ROLLING"
        or "NONROLLING". Default value is ROLLING.
        Possible values:
        PATCHING_MODE_UNSPECIFIED
        ROLLING
        NON_ROLLING
        """
        return pulumi.get(self, "patching_mode")

    @patching_mode.setter
    def patching_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "patching_mode", value)

    @property
    @pulumi.getter
    def preference(self) -> Optional[pulumi.Input[str]]:
        """
        The maintenance window scheduling preference.
        Possible values:
        MAINTENANCE_WINDOW_PREFERENCE_UNSPECIFIED
        CUSTOM_PREFERENCE
        NO_PREFERENCE
        """
        return pulumi.get(self, "preference")

    @preference.setter
    def preference(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preference", value)

    @property
    @pulumi.getter(name="weeksOfMonths")
    def weeks_of_months(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        Weeks during the month when maintenance should be performed. Weeks start on
        the 1st, 8th, 15th, and 22nd days of the month, and have a duration of 7
        days. Weeks start and end based on calendar dates, not days of the week.
        """
        return pulumi.get(self, "weeks_of_months")

    @weeks_of_months.setter
    def weeks_of_months(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "weeks_of_months", value)


if not MYPY:
    class CloudVmClusterPropertiesArgsDict(TypedDict):
        cpu_core_count: pulumi.Input[int]
        """
        Number of enabled CPU cores.
        """
        license_type: pulumi.Input[str]
        """
        License type of VM Cluster.
        Possible values:
        LICENSE_TYPE_UNSPECIFIED
        LICENSE_INCLUDED
        BRING_YOUR_OWN_LICENSE
        """
        cluster_name: NotRequired[pulumi.Input[str]]
        """
        OCI Cluster name.
        """
        compartment_id: NotRequired[pulumi.Input[str]]
        """
        (Output)
        Compartment ID of cluster.
        """
        data_storage_size_tb: NotRequired[pulumi.Input[float]]
        """
        The data disk group size to be allocated in TBs.
        """
        db_node_storage_size_gb: NotRequired[pulumi.Input[int]]
        """
        Local storage per VM
        """
        db_server_ocids: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        OCID of database servers.
        """
        diagnostics_data_collection_options: NotRequired[pulumi.Input['CloudVmClusterPropertiesDiagnosticsDataCollectionOptionsArgsDict']]
        """
        Data collection options for diagnostics.
        Structure is documented below.
        """
        disk_redundancy: NotRequired[pulumi.Input[str]]
        """
        The type of redundancy.
        Possible values:
        DISK_REDUNDANCY_UNSPECIFIED
        HIGH
        NORMAL
        """
        dns_listener_ip: NotRequired[pulumi.Input[str]]
        """
        (Output)
        DNS listener IP.
        """
        domain: NotRequired[pulumi.Input[str]]
        """
        (Output)
        Parent DNS domain where SCAN DNS and hosts names are qualified.
        ex: ocispdelegated.ocisp10jvnet.oraclevcn.com
        """
        gi_version: NotRequired[pulumi.Input[str]]
        """
        Grid Infrastructure Version.
        """
        hostname: NotRequired[pulumi.Input[str]]
        """
        (Output)
        host name without domain.
        format: "-" with some suffix.
        ex: sp2-yi0xq where "sp2" is the hostname_prefix.
        """
        hostname_prefix: NotRequired[pulumi.Input[str]]
        """
        Prefix for VM cluster host names.
        """
        local_backup_enabled: NotRequired[pulumi.Input[bool]]
        """
        Use local backup.
        """
        memory_size_gb: NotRequired[pulumi.Input[int]]
        """
        Memory allocated in GBs.
        """
        node_count: NotRequired[pulumi.Input[int]]
        """
        Number of database servers.
        """
        oci_url: NotRequired[pulumi.Input[str]]
        """
        (Output)
        Deep link to the OCI console to view this resource.
        """
        ocid: NotRequired[pulumi.Input[str]]
        """
        (Output)
        Oracle Cloud Infrastructure ID of VM Cluster.
        """
        ocpu_count: NotRequired[pulumi.Input[float]]
        """
        OCPU count per VM. Minimum is 0.1.
        """
        scan_dns: NotRequired[pulumi.Input[str]]
        """
        (Output)
        SCAN DNS name.
        ex: sp2-yi0xq-scan.ocispdelegated.ocisp10jvnet.oraclevcn.com
        """
        scan_dns_record_id: NotRequired[pulumi.Input[str]]
        """
        (Output)
        OCID of scan DNS record.
        """
        scan_ip_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        (Output)
        OCIDs of scan IPs.
        """
        scan_listener_port_tcp: NotRequired[pulumi.Input[int]]
        """
        (Output)
        SCAN listener port - TCP
        """
        scan_listener_port_tcp_ssl: NotRequired[pulumi.Input[int]]
        """
        (Output)
        SCAN listener port - TLS
        """
        shape: NotRequired[pulumi.Input[str]]
        """
        (Output)
        Shape of VM Cluster.
        """
        sparse_diskgroup_enabled: NotRequired[pulumi.Input[bool]]
        """
        Use exadata sparse snapshots.
        """
        ssh_public_keys: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        SSH public keys to be stored with cluster.
        """
        state: NotRequired[pulumi.Input[str]]
        """
        (Output)
        State of the cluster.
        Possible values:
        STATE_UNSPECIFIED
        PROVISIONING
        AVAILABLE
        UPDATING
        TERMINATING
        TERMINATED
        FAILED
        MAINTENANCE_IN_PROGRESS
        """
        storage_size_gb: NotRequired[pulumi.Input[int]]
        """
        (Output)
        The storage allocation for the disk group, in gigabytes (GB).
        """
        system_version: NotRequired[pulumi.Input[str]]
        """
        (Output)
        Operating system version of the image.
        """
        time_zone: NotRequired[pulumi.Input['CloudVmClusterPropertiesTimeZoneArgsDict']]
        """
        Represents a time zone from the
        [IANA Time Zone Database](https://www.iana.org/time-zones).
        Structure is documented below.
        """
elif False:
    CloudVmClusterPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CloudVmClusterPropertiesArgs:
    def __init__(__self__, *,
                 cpu_core_count: pulumi.Input[int],
                 license_type: pulumi.Input[str],
                 cluster_name: Optional[pulumi.Input[str]] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 data_storage_size_tb: Optional[pulumi.Input[float]] = None,
                 db_node_storage_size_gb: Optional[pulumi.Input[int]] = None,
                 db_server_ocids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 diagnostics_data_collection_options: Optional[pulumi.Input['CloudVmClusterPropertiesDiagnosticsDataCollectionOptionsArgs']] = None,
                 disk_redundancy: Optional[pulumi.Input[str]] = None,
                 dns_listener_ip: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 gi_version: Optional[pulumi.Input[str]] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 hostname_prefix: Optional[pulumi.Input[str]] = None,
                 local_backup_enabled: Optional[pulumi.Input[bool]] = None,
                 memory_size_gb: Optional[pulumi.Input[int]] = None,
                 node_count: Optional[pulumi.Input[int]] = None,
                 oci_url: Optional[pulumi.Input[str]] = None,
                 ocid: Optional[pulumi.Input[str]] = None,
                 ocpu_count: Optional[pulumi.Input[float]] = None,
                 scan_dns: Optional[pulumi.Input[str]] = None,
                 scan_dns_record_id: Optional[pulumi.Input[str]] = None,
                 scan_ip_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 scan_listener_port_tcp: Optional[pulumi.Input[int]] = None,
                 scan_listener_port_tcp_ssl: Optional[pulumi.Input[int]] = None,
                 shape: Optional[pulumi.Input[str]] = None,
                 sparse_diskgroup_enabled: Optional[pulumi.Input[bool]] = None,
                 ssh_public_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 storage_size_gb: Optional[pulumi.Input[int]] = None,
                 system_version: Optional[pulumi.Input[str]] = None,
                 time_zone: Optional[pulumi.Input['CloudVmClusterPropertiesTimeZoneArgs']] = None):
        """
        :param pulumi.Input[int] cpu_core_count: Number of enabled CPU cores.
        :param pulumi.Input[str] license_type: License type of VM Cluster.
               Possible values:
               LICENSE_TYPE_UNSPECIFIED
               LICENSE_INCLUDED
               BRING_YOUR_OWN_LICENSE
        :param pulumi.Input[str] cluster_name: OCI Cluster name.
        :param pulumi.Input[str] compartment_id: (Output)
               Compartment ID of cluster.
        :param pulumi.Input[float] data_storage_size_tb: The data disk group size to be allocated in TBs.
        :param pulumi.Input[int] db_node_storage_size_gb: Local storage per VM
        :param pulumi.Input[Sequence[pulumi.Input[str]]] db_server_ocids: OCID of database servers.
        :param pulumi.Input['CloudVmClusterPropertiesDiagnosticsDataCollectionOptionsArgs'] diagnostics_data_collection_options: Data collection options for diagnostics.
               Structure is documented below.
        :param pulumi.Input[str] disk_redundancy: The type of redundancy.
               Possible values:
               DISK_REDUNDANCY_UNSPECIFIED
               HIGH
               NORMAL
        :param pulumi.Input[str] dns_listener_ip: (Output)
               DNS listener IP.
        :param pulumi.Input[str] domain: (Output)
               Parent DNS domain where SCAN DNS and hosts names are qualified.
               ex: ocispdelegated.ocisp10jvnet.oraclevcn.com
        :param pulumi.Input[str] gi_version: Grid Infrastructure Version.
        :param pulumi.Input[str] hostname: (Output)
               host name without domain.
               format: "-" with some suffix.
               ex: sp2-yi0xq where "sp2" is the hostname_prefix.
        :param pulumi.Input[str] hostname_prefix: Prefix for VM cluster host names.
        :param pulumi.Input[bool] local_backup_enabled: Use local backup.
        :param pulumi.Input[int] memory_size_gb: Memory allocated in GBs.
        :param pulumi.Input[int] node_count: Number of database servers.
        :param pulumi.Input[str] oci_url: (Output)
               Deep link to the OCI console to view this resource.
        :param pulumi.Input[str] ocid: (Output)
               Oracle Cloud Infrastructure ID of VM Cluster.
        :param pulumi.Input[float] ocpu_count: OCPU count per VM. Minimum is 0.1.
        :param pulumi.Input[str] scan_dns: (Output)
               SCAN DNS name.
               ex: sp2-yi0xq-scan.ocispdelegated.ocisp10jvnet.oraclevcn.com
        :param pulumi.Input[str] scan_dns_record_id: (Output)
               OCID of scan DNS record.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] scan_ip_ids: (Output)
               OCIDs of scan IPs.
        :param pulumi.Input[int] scan_listener_port_tcp: (Output)
               SCAN listener port - TCP
        :param pulumi.Input[int] scan_listener_port_tcp_ssl: (Output)
               SCAN listener port - TLS
        :param pulumi.Input[str] shape: (Output)
               Shape of VM Cluster.
        :param pulumi.Input[bool] sparse_diskgroup_enabled: Use exadata sparse snapshots.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ssh_public_keys: SSH public keys to be stored with cluster.
        :param pulumi.Input[str] state: (Output)
               State of the cluster.
               Possible values:
               STATE_UNSPECIFIED
               PROVISIONING
               AVAILABLE
               UPDATING
               TERMINATING
               TERMINATED
               FAILED
               MAINTENANCE_IN_PROGRESS
        :param pulumi.Input[int] storage_size_gb: (Output)
               The storage allocation for the disk group, in gigabytes (GB).
        :param pulumi.Input[str] system_version: (Output)
               Operating system version of the image.
        :param pulumi.Input['CloudVmClusterPropertiesTimeZoneArgs'] time_zone: Represents a time zone from the
               [IANA Time Zone Database](https://www.iana.org/time-zones).
               Structure is documented below.
        """
        pulumi.set(__self__, "cpu_core_count", cpu_core_count)
        pulumi.set(__self__, "license_type", license_type)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if data_storage_size_tb is not None:
            pulumi.set(__self__, "data_storage_size_tb", data_storage_size_tb)
        if db_node_storage_size_gb is not None:
            pulumi.set(__self__, "db_node_storage_size_gb", db_node_storage_size_gb)
        if db_server_ocids is not None:
            pulumi.set(__self__, "db_server_ocids", db_server_ocids)
        if diagnostics_data_collection_options is not None:
            pulumi.set(__self__, "diagnostics_data_collection_options", diagnostics_data_collection_options)
        if disk_redundancy is not None:
            pulumi.set(__self__, "disk_redundancy", disk_redundancy)
        if dns_listener_ip is not None:
            pulumi.set(__self__, "dns_listener_ip", dns_listener_ip)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if gi_version is not None:
            pulumi.set(__self__, "gi_version", gi_version)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if hostname_prefix is not None:
            pulumi.set(__self__, "hostname_prefix", hostname_prefix)
        if local_backup_enabled is not None:
            pulumi.set(__self__, "local_backup_enabled", local_backup_enabled)
        if memory_size_gb is not None:
            pulumi.set(__self__, "memory_size_gb", memory_size_gb)
        if node_count is not None:
            pulumi.set(__self__, "node_count", node_count)
        if oci_url is not None:
            pulumi.set(__self__, "oci_url", oci_url)
        if ocid is not None:
            pulumi.set(__self__, "ocid", ocid)
        if ocpu_count is not None:
            pulumi.set(__self__, "ocpu_count", ocpu_count)
        if scan_dns is not None:
            pulumi.set(__self__, "scan_dns", scan_dns)
        if scan_dns_record_id is not None:
            pulumi.set(__self__, "scan_dns_record_id", scan_dns_record_id)
        if scan_ip_ids is not None:
            pulumi.set(__self__, "scan_ip_ids", scan_ip_ids)
        if scan_listener_port_tcp is not None:
            pulumi.set(__self__, "scan_listener_port_tcp", scan_listener_port_tcp)
        if scan_listener_port_tcp_ssl is not None:
            pulumi.set(__self__, "scan_listener_port_tcp_ssl", scan_listener_port_tcp_ssl)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if sparse_diskgroup_enabled is not None:
            pulumi.set(__self__, "sparse_diskgroup_enabled", sparse_diskgroup_enabled)
        if ssh_public_keys is not None:
            pulumi.set(__self__, "ssh_public_keys", ssh_public_keys)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if storage_size_gb is not None:
            pulumi.set(__self__, "storage_size_gb", storage_size_gb)
        if system_version is not None:
            pulumi.set(__self__, "system_version", system_version)
        if time_zone is not None:
            pulumi.set(__self__, "time_zone", time_zone)

    @property
    @pulumi.getter(name="cpuCoreCount")
    def cpu_core_count(self) -> pulumi.Input[int]:
        """
        Number of enabled CPU cores.
        """
        return pulumi.get(self, "cpu_core_count")

    @cpu_core_count.setter
    def cpu_core_count(self, value: pulumi.Input[int]):
        pulumi.set(self, "cpu_core_count", value)

    @property
    @pulumi.getter(name="licenseType")
    def license_type(self) -> pulumi.Input[str]:
        """
        License type of VM Cluster.
        Possible values:
        LICENSE_TYPE_UNSPECIFIED
        LICENSE_INCLUDED
        BRING_YOUR_OWN_LICENSE
        """
        return pulumi.get(self, "license_type")

    @license_type.setter
    def license_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "license_type", value)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[pulumi.Input[str]]:
        """
        OCI Cluster name.
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        Compartment ID of cluster.
        """
        return pulumi.get(self, "compartment_id")

    @compartment_id.setter
    def compartment_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compartment_id", value)

    @property
    @pulumi.getter(name="dataStorageSizeTb")
    def data_storage_size_tb(self) -> Optional[pulumi.Input[float]]:
        """
        The data disk group size to be allocated in TBs.
        """
        return pulumi.get(self, "data_storage_size_tb")

    @data_storage_size_tb.setter
    def data_storage_size_tb(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "data_storage_size_tb", value)

    @property
    @pulumi.getter(name="dbNodeStorageSizeGb")
    def db_node_storage_size_gb(self) -> Optional[pulumi.Input[int]]:
        """
        Local storage per VM
        """
        return pulumi.get(self, "db_node_storage_size_gb")

    @db_node_storage_size_gb.setter
    def db_node_storage_size_gb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "db_node_storage_size_gb", value)

    @property
    @pulumi.getter(name="dbServerOcids")
    def db_server_ocids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        OCID of database servers.
        """
        return pulumi.get(self, "db_server_ocids")

    @db_server_ocids.setter
    def db_server_ocids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "db_server_ocids", value)

    @property
    @pulumi.getter(name="diagnosticsDataCollectionOptions")
    def diagnostics_data_collection_options(self) -> Optional[pulumi.Input['CloudVmClusterPropertiesDiagnosticsDataCollectionOptionsArgs']]:
        """
        Data collection options for diagnostics.
        Structure is documented below.
        """
        return pulumi.get(self, "diagnostics_data_collection_options")

    @diagnostics_data_collection_options.setter
    def diagnostics_data_collection_options(self, value: Optional[pulumi.Input['CloudVmClusterPropertiesDiagnosticsDataCollectionOptionsArgs']]):
        pulumi.set(self, "diagnostics_data_collection_options", value)

    @property
    @pulumi.getter(name="diskRedundancy")
    def disk_redundancy(self) -> Optional[pulumi.Input[str]]:
        """
        The type of redundancy.
        Possible values:
        DISK_REDUNDANCY_UNSPECIFIED
        HIGH
        NORMAL
        """
        return pulumi.get(self, "disk_redundancy")

    @disk_redundancy.setter
    def disk_redundancy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_redundancy", value)

    @property
    @pulumi.getter(name="dnsListenerIp")
    def dns_listener_ip(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        DNS listener IP.
        """
        return pulumi.get(self, "dns_listener_ip")

    @dns_listener_ip.setter
    def dns_listener_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_listener_ip", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        Parent DNS domain where SCAN DNS and hosts names are qualified.
        ex: ocispdelegated.ocisp10jvnet.oraclevcn.com
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="giVersion")
    def gi_version(self) -> Optional[pulumi.Input[str]]:
        """
        Grid Infrastructure Version.
        """
        return pulumi.get(self, "gi_version")

    @gi_version.setter
    def gi_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gi_version", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        host name without domain.
        format: "-" with some suffix.
        ex: sp2-yi0xq where "sp2" is the hostname_prefix.
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter(name="hostnamePrefix")
    def hostname_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Prefix for VM cluster host names.
        """
        return pulumi.get(self, "hostname_prefix")

    @hostname_prefix.setter
    def hostname_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname_prefix", value)

    @property
    @pulumi.getter(name="localBackupEnabled")
    def local_backup_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Use local backup.
        """
        return pulumi.get(self, "local_backup_enabled")

    @local_backup_enabled.setter
    def local_backup_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "local_backup_enabled", value)

    @property
    @pulumi.getter(name="memorySizeGb")
    def memory_size_gb(self) -> Optional[pulumi.Input[int]]:
        """
        Memory allocated in GBs.
        """
        return pulumi.get(self, "memory_size_gb")

    @memory_size_gb.setter
    def memory_size_gb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "memory_size_gb", value)

    @property
    @pulumi.getter(name="nodeCount")
    def node_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of database servers.
        """
        return pulumi.get(self, "node_count")

    @node_count.setter
    def node_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "node_count", value)

    @property
    @pulumi.getter(name="ociUrl")
    def oci_url(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        Deep link to the OCI console to view this resource.
        """
        return pulumi.get(self, "oci_url")

    @oci_url.setter
    def oci_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oci_url", value)

    @property
    @pulumi.getter
    def ocid(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        Oracle Cloud Infrastructure ID of VM Cluster.
        """
        return pulumi.get(self, "ocid")

    @ocid.setter
    def ocid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ocid", value)

    @property
    @pulumi.getter(name="ocpuCount")
    def ocpu_count(self) -> Optional[pulumi.Input[float]]:
        """
        OCPU count per VM. Minimum is 0.1.
        """
        return pulumi.get(self, "ocpu_count")

    @ocpu_count.setter
    def ocpu_count(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "ocpu_count", value)

    @property
    @pulumi.getter(name="scanDns")
    def scan_dns(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        SCAN DNS name.
        ex: sp2-yi0xq-scan.ocispdelegated.ocisp10jvnet.oraclevcn.com
        """
        return pulumi.get(self, "scan_dns")

    @scan_dns.setter
    def scan_dns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scan_dns", value)

    @property
    @pulumi.getter(name="scanDnsRecordId")
    def scan_dns_record_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        OCID of scan DNS record.
        """
        return pulumi.get(self, "scan_dns_record_id")

    @scan_dns_record_id.setter
    def scan_dns_record_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scan_dns_record_id", value)

    @property
    @pulumi.getter(name="scanIpIds")
    def scan_ip_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Output)
        OCIDs of scan IPs.
        """
        return pulumi.get(self, "scan_ip_ids")

    @scan_ip_ids.setter
    def scan_ip_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "scan_ip_ids", value)

    @property
    @pulumi.getter(name="scanListenerPortTcp")
    def scan_listener_port_tcp(self) -> Optional[pulumi.Input[int]]:
        """
        (Output)
        SCAN listener port - TCP
        """
        return pulumi.get(self, "scan_listener_port_tcp")

    @scan_listener_port_tcp.setter
    def scan_listener_port_tcp(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "scan_listener_port_tcp", value)

    @property
    @pulumi.getter(name="scanListenerPortTcpSsl")
    def scan_listener_port_tcp_ssl(self) -> Optional[pulumi.Input[int]]:
        """
        (Output)
        SCAN listener port - TLS
        """
        return pulumi.get(self, "scan_listener_port_tcp_ssl")

    @scan_listener_port_tcp_ssl.setter
    def scan_listener_port_tcp_ssl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "scan_listener_port_tcp_ssl", value)

    @property
    @pulumi.getter
    def shape(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        Shape of VM Cluster.
        """
        return pulumi.get(self, "shape")

    @shape.setter
    def shape(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shape", value)

    @property
    @pulumi.getter(name="sparseDiskgroupEnabled")
    def sparse_diskgroup_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Use exadata sparse snapshots.
        """
        return pulumi.get(self, "sparse_diskgroup_enabled")

    @sparse_diskgroup_enabled.setter
    def sparse_diskgroup_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sparse_diskgroup_enabled", value)

    @property
    @pulumi.getter(name="sshPublicKeys")
    def ssh_public_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        SSH public keys to be stored with cluster.
        """
        return pulumi.get(self, "ssh_public_keys")

    @ssh_public_keys.setter
    def ssh_public_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ssh_public_keys", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        State of the cluster.
        Possible values:
        STATE_UNSPECIFIED
        PROVISIONING
        AVAILABLE
        UPDATING
        TERMINATING
        TERMINATED
        FAILED
        MAINTENANCE_IN_PROGRESS
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="storageSizeGb")
    def storage_size_gb(self) -> Optional[pulumi.Input[int]]:
        """
        (Output)
        The storage allocation for the disk group, in gigabytes (GB).
        """
        return pulumi.get(self, "storage_size_gb")

    @storage_size_gb.setter
    def storage_size_gb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "storage_size_gb", value)

    @property
    @pulumi.getter(name="systemVersion")
    def system_version(self) -> Optional[pulumi.Input[str]]:
        """
        (Output)
        Operating system version of the image.
        """
        return pulumi.get(self, "system_version")

    @system_version.setter
    def system_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "system_version", value)

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> Optional[pulumi.Input['CloudVmClusterPropertiesTimeZoneArgs']]:
        """
        Represents a time zone from the
        [IANA Time Zone Database](https://www.iana.org/time-zones).
        Structure is documented below.
        """
        return pulumi.get(self, "time_zone")

    @time_zone.setter
    def time_zone(self, value: Optional[pulumi.Input['CloudVmClusterPropertiesTimeZoneArgs']]):
        pulumi.set(self, "time_zone", value)


if not MYPY:
    class CloudVmClusterPropertiesDiagnosticsDataCollectionOptionsArgsDict(TypedDict):
        diagnostics_events_enabled: NotRequired[pulumi.Input[bool]]
        """
        Indicates whether diagnostic collection is enabled for the VM cluster
        """
        health_monitoring_enabled: NotRequired[pulumi.Input[bool]]
        """
        Indicates whether health monitoring is enabled for the VM cluster
        """
        incident_logs_enabled: NotRequired[pulumi.Input[bool]]
        """
        Indicates whether incident logs and trace collection are enabled for the VM
        cluster
        """
elif False:
    CloudVmClusterPropertiesDiagnosticsDataCollectionOptionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CloudVmClusterPropertiesDiagnosticsDataCollectionOptionsArgs:
    def __init__(__self__, *,
                 diagnostics_events_enabled: Optional[pulumi.Input[bool]] = None,
                 health_monitoring_enabled: Optional[pulumi.Input[bool]] = None,
                 incident_logs_enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] diagnostics_events_enabled: Indicates whether diagnostic collection is enabled for the VM cluster
        :param pulumi.Input[bool] health_monitoring_enabled: Indicates whether health monitoring is enabled for the VM cluster
        :param pulumi.Input[bool] incident_logs_enabled: Indicates whether incident logs and trace collection are enabled for the VM
               cluster
        """
        if diagnostics_events_enabled is not None:
            pulumi.set(__self__, "diagnostics_events_enabled", diagnostics_events_enabled)
        if health_monitoring_enabled is not None:
            pulumi.set(__self__, "health_monitoring_enabled", health_monitoring_enabled)
        if incident_logs_enabled is not None:
            pulumi.set(__self__, "incident_logs_enabled", incident_logs_enabled)

    @property
    @pulumi.getter(name="diagnosticsEventsEnabled")
    def diagnostics_events_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether diagnostic collection is enabled for the VM cluster
        """
        return pulumi.get(self, "diagnostics_events_enabled")

    @diagnostics_events_enabled.setter
    def diagnostics_events_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "diagnostics_events_enabled", value)

    @property
    @pulumi.getter(name="healthMonitoringEnabled")
    def health_monitoring_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether health monitoring is enabled for the VM cluster
        """
        return pulumi.get(self, "health_monitoring_enabled")

    @health_monitoring_enabled.setter
    def health_monitoring_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "health_monitoring_enabled", value)

    @property
    @pulumi.getter(name="incidentLogsEnabled")
    def incident_logs_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether incident logs and trace collection are enabled for the VM
        cluster
        """
        return pulumi.get(self, "incident_logs_enabled")

    @incident_logs_enabled.setter
    def incident_logs_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "incident_logs_enabled", value)


if not MYPY:
    class CloudVmClusterPropertiesTimeZoneArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[str]]
        """
        IANA Time Zone Database time zone, e.g. "America/New_York".
        """
elif False:
    CloudVmClusterPropertiesTimeZoneArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CloudVmClusterPropertiesTimeZoneArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: IANA Time Zone Database time zone, e.g. "America/New_York".
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        IANA Time Zone Database time zone, e.g. "America/New_York".
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


