# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ApplicationArgs', 'Application']

@pulumi.input_type
class ApplicationArgs:
    def __init__(__self__, *,
                 application_id: pulumi.Input[str],
                 location: pulumi.Input[str],
                 scope: pulumi.Input['ApplicationScopeArgs'],
                 attributes: Optional[pulumi.Input['ApplicationAttributesArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Application resource.
        :param pulumi.Input[str] application_id: Required. The Application identifier.
        :param pulumi.Input[str] location: Part of `parent`. See documentation of `projectsId`.
        :param pulumi.Input['ApplicationScopeArgs'] scope: Scope of an application.
               Structure is documented below.
        :param pulumi.Input['ApplicationAttributesArgs'] attributes: Consumer provided attributes.
               Structure is documented below.
        :param pulumi.Input[str] description: Optional. User-defined description of an Application.
        :param pulumi.Input[str] display_name: Optional. Contact's name.
        :param pulumi.Input[str] project: The ID of the project in which the resource belongs.
               If it is not provided, the provider project is used.
        """
        pulumi.set(__self__, "application_id", application_id)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "scope", scope)
        if attributes is not None:
            pulumi.set(__self__, "attributes", attributes)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if project is not None:
            pulumi.set(__self__, "project", project)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> pulumi.Input[str]:
        """
        Required. The Application identifier.
        """
        return pulumi.get(self, "application_id")

    @application_id.setter
    def application_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "application_id", value)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input[str]:
        """
        Part of `parent`. See documentation of `projectsId`.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[str]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def scope(self) -> pulumi.Input['ApplicationScopeArgs']:
        """
        Scope of an application.
        Structure is documented below.
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: pulumi.Input['ApplicationScopeArgs']):
        pulumi.set(self, "scope", value)

    @property
    @pulumi.getter
    def attributes(self) -> Optional[pulumi.Input['ApplicationAttributesArgs']]:
        """
        Consumer provided attributes.
        Structure is documented below.
        """
        return pulumi.get(self, "attributes")

    @attributes.setter
    def attributes(self, value: Optional[pulumi.Input['ApplicationAttributesArgs']]):
        pulumi.set(self, "attributes", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. User-defined description of an Application.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Contact's name.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the project in which the resource belongs.
        If it is not provided, the provider project is used.
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)


@pulumi.input_type
class _ApplicationState:
    def __init__(__self__, *,
                 application_id: Optional[pulumi.Input[str]] = None,
                 attributes: Optional[pulumi.Input['ApplicationAttributesArgs']] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 scope: Optional[pulumi.Input['ApplicationScopeArgs']] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 uid: Optional[pulumi.Input[str]] = None,
                 update_time: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Application resources.
        :param pulumi.Input[str] application_id: Required. The Application identifier.
        :param pulumi.Input['ApplicationAttributesArgs'] attributes: Consumer provided attributes.
               Structure is documented below.
        :param pulumi.Input[str] create_time: Output only. Create time.
        :param pulumi.Input[str] description: Optional. User-defined description of an Application.
        :param pulumi.Input[str] display_name: Optional. Contact's name.
        :param pulumi.Input[str] location: Part of `parent`. See documentation of `projectsId`.
        :param pulumi.Input[str] name: Identifier. The resource name of an Application. Format:
               "projects/{host-project-id}/locations/{location}/applications/{application-id}"
        :param pulumi.Input[str] project: The ID of the project in which the resource belongs.
               If it is not provided, the provider project is used.
        :param pulumi.Input['ApplicationScopeArgs'] scope: Scope of an application.
               Structure is documented below.
        :param pulumi.Input[str] state: Output only. Application state.
               Possible values:
               STATE_UNSPECIFIED
               CREATING
               ACTIVE
               DELETING
        :param pulumi.Input[str] uid: Output only. A universally unique identifier (in UUID4 format) for the `Application`.
        :param pulumi.Input[str] update_time: Output only. Update time.
        """
        if application_id is not None:
            pulumi.set(__self__, "application_id", application_id)
        if attributes is not None:
            pulumi.set(__self__, "attributes", attributes)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if uid is not None:
            pulumi.set(__self__, "uid", uid)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> Optional[pulumi.Input[str]]:
        """
        Required. The Application identifier.
        """
        return pulumi.get(self, "application_id")

    @application_id.setter
    def application_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_id", value)

    @property
    @pulumi.getter
    def attributes(self) -> Optional[pulumi.Input['ApplicationAttributesArgs']]:
        """
        Consumer provided attributes.
        Structure is documented below.
        """
        return pulumi.get(self, "attributes")

    @attributes.setter
    def attributes(self, value: Optional[pulumi.Input['ApplicationAttributesArgs']]):
        pulumi.set(self, "attributes", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        Output only. Create time.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. User-defined description of an Application.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        Optional. Contact's name.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        Part of `parent`. See documentation of `projectsId`.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Identifier. The resource name of an Application. Format:
        "projects/{host-project-id}/locations/{location}/applications/{application-id}"
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the project in which the resource belongs.
        If it is not provided, the provider project is used.
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input['ApplicationScopeArgs']]:
        """
        Scope of an application.
        Structure is documented below.
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input['ApplicationScopeArgs']]):
        pulumi.set(self, "scope", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        Output only. Application state.
        Possible values:
        STATE_UNSPECIFIED
        CREATING
        ACTIVE
        DELETING
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter
    def uid(self) -> Optional[pulumi.Input[str]]:
        """
        Output only. A universally unique identifier (in UUID4 format) for the `Application`.
        """
        return pulumi.get(self, "uid")

    @uid.setter
    def uid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uid", value)

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[str]]:
        """
        Output only. Update time.
        """
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_time", value)


class Application(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 application_id: Optional[pulumi.Input[str]] = None,
                 attributes: Optional[pulumi.Input[pulumi.InputType['ApplicationAttributesArgs']]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 scope: Optional[pulumi.Input[pulumi.InputType['ApplicationScopeArgs']]] = None,
                 __props__=None):
        """
        Application is a functional grouping of Services and Workloads that helps achieve a desired end-to-end business functionality. Services and Workloads are owned by the Application.

        ## Example Usage

        ### Application Basic

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_gcp as gcp

        example = gcp.apphub.Application("example",
            location="us-east1",
            application_id="example-application",
            scope=gcp.apphub.ApplicationScopeArgs(
                type="REGIONAL",
            ))
        ```
        <!--End PulumiCodeChooser -->
        ### Application Full

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_gcp as gcp

        example2 = gcp.apphub.Application("example2",
            location="us-east1",
            application_id="example-application",
            display_name="Application Full",
            scope=gcp.apphub.ApplicationScopeArgs(
                type="REGIONAL",
            ),
            description="Application for testing",
            attributes=gcp.apphub.ApplicationAttributesArgs(
                environment=gcp.apphub.ApplicationAttributesEnvironmentArgs(
                    type="STAGING",
                ),
                criticality=gcp.apphub.ApplicationAttributesCriticalityArgs(
                    type="MISSION_CRITICAL",
                ),
                business_owners=[gcp.apphub.ApplicationAttributesBusinessOwnerArgs(
                    display_name="Alice",
                    email="alice@google.com",
                )],
                developer_owners=[gcp.apphub.ApplicationAttributesDeveloperOwnerArgs(
                    display_name="Bob",
                    email="bob@google.com",
                )],
                operator_owners=[gcp.apphub.ApplicationAttributesOperatorOwnerArgs(
                    display_name="Charlie",
                    email="charlie@google.com",
                )],
            ))
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Application can be imported using any of these accepted formats:

        * `projects/{{project}}/locations/{{location}}/applications/{{application_id}}`

        * `{{project}}/{{location}}/{{application_id}}`

        * `{{location}}/{{application_id}}`

        When using the `pulumi import` command, Application can be imported using one of the formats above. For example:

        ```sh
        $ pulumi import gcp:apphub/application:Application default projects/{{project}}/locations/{{location}}/applications/{{application_id}}
        ```

        ```sh
        $ pulumi import gcp:apphub/application:Application default {{project}}/{{location}}/{{application_id}}
        ```

        ```sh
        $ pulumi import gcp:apphub/application:Application default {{location}}/{{application_id}}
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] application_id: Required. The Application identifier.
        :param pulumi.Input[pulumi.InputType['ApplicationAttributesArgs']] attributes: Consumer provided attributes.
               Structure is documented below.
        :param pulumi.Input[str] description: Optional. User-defined description of an Application.
        :param pulumi.Input[str] display_name: Optional. Contact's name.
        :param pulumi.Input[str] location: Part of `parent`. See documentation of `projectsId`.
        :param pulumi.Input[str] project: The ID of the project in which the resource belongs.
               If it is not provided, the provider project is used.
        :param pulumi.Input[pulumi.InputType['ApplicationScopeArgs']] scope: Scope of an application.
               Structure is documented below.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ApplicationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Application is a functional grouping of Services and Workloads that helps achieve a desired end-to-end business functionality. Services and Workloads are owned by the Application.

        ## Example Usage

        ### Application Basic

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_gcp as gcp

        example = gcp.apphub.Application("example",
            location="us-east1",
            application_id="example-application",
            scope=gcp.apphub.ApplicationScopeArgs(
                type="REGIONAL",
            ))
        ```
        <!--End PulumiCodeChooser -->
        ### Application Full

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_gcp as gcp

        example2 = gcp.apphub.Application("example2",
            location="us-east1",
            application_id="example-application",
            display_name="Application Full",
            scope=gcp.apphub.ApplicationScopeArgs(
                type="REGIONAL",
            ),
            description="Application for testing",
            attributes=gcp.apphub.ApplicationAttributesArgs(
                environment=gcp.apphub.ApplicationAttributesEnvironmentArgs(
                    type="STAGING",
                ),
                criticality=gcp.apphub.ApplicationAttributesCriticalityArgs(
                    type="MISSION_CRITICAL",
                ),
                business_owners=[gcp.apphub.ApplicationAttributesBusinessOwnerArgs(
                    display_name="Alice",
                    email="alice@google.com",
                )],
                developer_owners=[gcp.apphub.ApplicationAttributesDeveloperOwnerArgs(
                    display_name="Bob",
                    email="bob@google.com",
                )],
                operator_owners=[gcp.apphub.ApplicationAttributesOperatorOwnerArgs(
                    display_name="Charlie",
                    email="charlie@google.com",
                )],
            ))
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Application can be imported using any of these accepted formats:

        * `projects/{{project}}/locations/{{location}}/applications/{{application_id}}`

        * `{{project}}/{{location}}/{{application_id}}`

        * `{{location}}/{{application_id}}`

        When using the `pulumi import` command, Application can be imported using one of the formats above. For example:

        ```sh
        $ pulumi import gcp:apphub/application:Application default projects/{{project}}/locations/{{location}}/applications/{{application_id}}
        ```

        ```sh
        $ pulumi import gcp:apphub/application:Application default {{project}}/{{location}}/{{application_id}}
        ```

        ```sh
        $ pulumi import gcp:apphub/application:Application default {{location}}/{{application_id}}
        ```

        :param str resource_name: The name of the resource.
        :param ApplicationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ApplicationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 application_id: Optional[pulumi.Input[str]] = None,
                 attributes: Optional[pulumi.Input[pulumi.InputType['ApplicationAttributesArgs']]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 scope: Optional[pulumi.Input[pulumi.InputType['ApplicationScopeArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ApplicationArgs.__new__(ApplicationArgs)

            if application_id is None and not opts.urn:
                raise TypeError("Missing required property 'application_id'")
            __props__.__dict__["application_id"] = application_id
            __props__.__dict__["attributes"] = attributes
            __props__.__dict__["description"] = description
            __props__.__dict__["display_name"] = display_name
            if location is None and not opts.urn:
                raise TypeError("Missing required property 'location'")
            __props__.__dict__["location"] = location
            __props__.__dict__["project"] = project
            if scope is None and not opts.urn:
                raise TypeError("Missing required property 'scope'")
            __props__.__dict__["scope"] = scope
            __props__.__dict__["create_time"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["uid"] = None
            __props__.__dict__["update_time"] = None
        super(Application, __self__).__init__(
            'gcp:apphub/application:Application',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            application_id: Optional[pulumi.Input[str]] = None,
            attributes: Optional[pulumi.Input[pulumi.InputType['ApplicationAttributesArgs']]] = None,
            create_time: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            display_name: Optional[pulumi.Input[str]] = None,
            location: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            project: Optional[pulumi.Input[str]] = None,
            scope: Optional[pulumi.Input[pulumi.InputType['ApplicationScopeArgs']]] = None,
            state: Optional[pulumi.Input[str]] = None,
            uid: Optional[pulumi.Input[str]] = None,
            update_time: Optional[pulumi.Input[str]] = None) -> 'Application':
        """
        Get an existing Application resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] application_id: Required. The Application identifier.
        :param pulumi.Input[pulumi.InputType['ApplicationAttributesArgs']] attributes: Consumer provided attributes.
               Structure is documented below.
        :param pulumi.Input[str] create_time: Output only. Create time.
        :param pulumi.Input[str] description: Optional. User-defined description of an Application.
        :param pulumi.Input[str] display_name: Optional. Contact's name.
        :param pulumi.Input[str] location: Part of `parent`. See documentation of `projectsId`.
        :param pulumi.Input[str] name: Identifier. The resource name of an Application. Format:
               "projects/{host-project-id}/locations/{location}/applications/{application-id}"
        :param pulumi.Input[str] project: The ID of the project in which the resource belongs.
               If it is not provided, the provider project is used.
        :param pulumi.Input[pulumi.InputType['ApplicationScopeArgs']] scope: Scope of an application.
               Structure is documented below.
        :param pulumi.Input[str] state: Output only. Application state.
               Possible values:
               STATE_UNSPECIFIED
               CREATING
               ACTIVE
               DELETING
        :param pulumi.Input[str] uid: Output only. A universally unique identifier (in UUID4 format) for the `Application`.
        :param pulumi.Input[str] update_time: Output only. Update time.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ApplicationState.__new__(_ApplicationState)

        __props__.__dict__["application_id"] = application_id
        __props__.__dict__["attributes"] = attributes
        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["description"] = description
        __props__.__dict__["display_name"] = display_name
        __props__.__dict__["location"] = location
        __props__.__dict__["name"] = name
        __props__.__dict__["project"] = project
        __props__.__dict__["scope"] = scope
        __props__.__dict__["state"] = state
        __props__.__dict__["uid"] = uid
        __props__.__dict__["update_time"] = update_time
        return Application(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> pulumi.Output[str]:
        """
        Required. The Application identifier.
        """
        return pulumi.get(self, "application_id")

    @property
    @pulumi.getter
    def attributes(self) -> pulumi.Output[Optional['outputs.ApplicationAttributes']]:
        """
        Consumer provided attributes.
        Structure is documented below.
        """
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        Output only. Create time.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Optional. User-defined description of an Application.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[Optional[str]]:
        """
        Optional. Contact's name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        """
        Part of `parent`. See documentation of `projectsId`.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Identifier. The resource name of an Application. Format:
        "projects/{host-project-id}/locations/{location}/applications/{application-id}"
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[str]:
        """
        The ID of the project in which the resource belongs.
        If it is not provided, the provider project is used.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def scope(self) -> pulumi.Output['outputs.ApplicationScope']:
        """
        Scope of an application.
        Structure is documented below.
        """
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        """
        Output only. Application state.
        Possible values:
        STATE_UNSPECIFIED
        CREATING
        ACTIVE
        DELETING
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def uid(self) -> pulumi.Output[str]:
        """
        Output only. A universally unique identifier (in UUID4 format) for the `Application`.
        """
        return pulumi.get(self, "uid")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[str]:
        """
        Output only. Update time.
        """
        return pulumi.get(self, "update_time")

