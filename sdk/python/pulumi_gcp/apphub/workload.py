# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['WorkloadArgs', 'Workload']

@pulumi.input_type
class WorkloadArgs:
    def __init__(__self__, *,
                 application_id: pulumi.Input[str],
                 discovered_workload: pulumi.Input[str],
                 location: pulumi.Input[str],
                 workload_id: pulumi.Input[str],
                 attributes: Optional[pulumi.Input['WorkloadAttributesArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Workload resource.
        :param pulumi.Input[str] application_id: Part of `parent`.  Full resource name of a parent Application. Example: projects/{HOST_PROJECT_ID}/locations/{LOCATION}/applications/{APPLICATION_ID}
        :param pulumi.Input[str] discovered_workload: Immutable. The resource name of the original discovered workload.
        :param pulumi.Input[str] location: Part of `parent`.  Full resource name of a parent Application. Example: projects/{HOST_PROJECT_ID}/locations/{LOCATION}/applications/{APPLICATION_ID}
        :param pulumi.Input[str] workload_id: The Workload identifier.
               
               
               - - -
        :param pulumi.Input['WorkloadAttributesArgs'] attributes: Consumer provided attributes.
               Structure is documented below.
        :param pulumi.Input[str] description: User-defined description of a Workload.
        :param pulumi.Input[str] display_name: User-defined name for the Workload.
        :param pulumi.Input[str] project: The ID of the project in which the resource belongs.
               If it is not provided, the provider project is used.
        """
        pulumi.set(__self__, "application_id", application_id)
        pulumi.set(__self__, "discovered_workload", discovered_workload)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "workload_id", workload_id)
        if attributes is not None:
            pulumi.set(__self__, "attributes", attributes)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if project is not None:
            pulumi.set(__self__, "project", project)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> pulumi.Input[str]:
        """
        Part of `parent`.  Full resource name of a parent Application. Example: projects/{HOST_PROJECT_ID}/locations/{LOCATION}/applications/{APPLICATION_ID}
        """
        return pulumi.get(self, "application_id")

    @application_id.setter
    def application_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "application_id", value)

    @property
    @pulumi.getter(name="discoveredWorkload")
    def discovered_workload(self) -> pulumi.Input[str]:
        """
        Immutable. The resource name of the original discovered workload.
        """
        return pulumi.get(self, "discovered_workload")

    @discovered_workload.setter
    def discovered_workload(self, value: pulumi.Input[str]):
        pulumi.set(self, "discovered_workload", value)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input[str]:
        """
        Part of `parent`.  Full resource name of a parent Application. Example: projects/{HOST_PROJECT_ID}/locations/{LOCATION}/applications/{APPLICATION_ID}
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[str]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="workloadId")
    def workload_id(self) -> pulumi.Input[str]:
        """
        The Workload identifier.


        - - -
        """
        return pulumi.get(self, "workload_id")

    @workload_id.setter
    def workload_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "workload_id", value)

    @property
    @pulumi.getter
    def attributes(self) -> Optional[pulumi.Input['WorkloadAttributesArgs']]:
        """
        Consumer provided attributes.
        Structure is documented below.
        """
        return pulumi.get(self, "attributes")

    @attributes.setter
    def attributes(self, value: Optional[pulumi.Input['WorkloadAttributesArgs']]):
        pulumi.set(self, "attributes", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        User-defined description of a Workload.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        User-defined name for the Workload.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the project in which the resource belongs.
        If it is not provided, the provider project is used.
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)


@pulumi.input_type
class _WorkloadState:
    def __init__(__self__, *,
                 application_id: Optional[pulumi.Input[str]] = None,
                 attributes: Optional[pulumi.Input['WorkloadAttributesArgs']] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 discovered_workload: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 uid: Optional[pulumi.Input[str]] = None,
                 update_time: Optional[pulumi.Input[str]] = None,
                 workload_id: Optional[pulumi.Input[str]] = None,
                 workload_properties: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadWorkloadPropertyArgs']]]] = None,
                 workload_references: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadWorkloadReferenceArgs']]]] = None):
        """
        Input properties used for looking up and filtering Workload resources.
        :param pulumi.Input[str] application_id: Part of `parent`.  Full resource name of a parent Application. Example: projects/{HOST_PROJECT_ID}/locations/{LOCATION}/applications/{APPLICATION_ID}
        :param pulumi.Input['WorkloadAttributesArgs'] attributes: Consumer provided attributes.
               Structure is documented below.
        :param pulumi.Input[str] create_time: Output only. Create time.
        :param pulumi.Input[str] description: User-defined description of a Workload.
        :param pulumi.Input[str] discovered_workload: Immutable. The resource name of the original discovered workload.
        :param pulumi.Input[str] display_name: User-defined name for the Workload.
        :param pulumi.Input[str] location: Part of `parent`.  Full resource name of a parent Application. Example: projects/{HOST_PROJECT_ID}/locations/{LOCATION}/applications/{APPLICATION_ID}
        :param pulumi.Input[str] name: Identifier. The resource name of the Workload. Format:"projects/{host-project-id}/locations/{location}/applications/{application-id}/workloads/{workload-id}"
        :param pulumi.Input[str] project: The ID of the project in which the resource belongs.
               If it is not provided, the provider project is used.
        :param pulumi.Input[str] state: Output only. Workload state. Possible values:  STATE_UNSPECIFIED CREATING ACTIVE DELETING DETACHED
        :param pulumi.Input[str] uid: Output only. A universally unique identifier (UUID) for the `Workload` in the UUID4 format.
        :param pulumi.Input[str] update_time: Output only. Update time.
        :param pulumi.Input[str] workload_id: The Workload identifier.
               
               
               - - -
        :param pulumi.Input[Sequence[pulumi.Input['WorkloadWorkloadPropertyArgs']]] workload_properties: Properties of an underlying compute resource represented by the Workload.
               Structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['WorkloadWorkloadReferenceArgs']]] workload_references: Reference of an underlying compute resource represented by the Workload.
               Structure is documented below.
        """
        if application_id is not None:
            pulumi.set(__self__, "application_id", application_id)
        if attributes is not None:
            pulumi.set(__self__, "attributes", attributes)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if discovered_workload is not None:
            pulumi.set(__self__, "discovered_workload", discovered_workload)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if uid is not None:
            pulumi.set(__self__, "uid", uid)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)
        if workload_id is not None:
            pulumi.set(__self__, "workload_id", workload_id)
        if workload_properties is not None:
            pulumi.set(__self__, "workload_properties", workload_properties)
        if workload_references is not None:
            pulumi.set(__self__, "workload_references", workload_references)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> Optional[pulumi.Input[str]]:
        """
        Part of `parent`.  Full resource name of a parent Application. Example: projects/{HOST_PROJECT_ID}/locations/{LOCATION}/applications/{APPLICATION_ID}
        """
        return pulumi.get(self, "application_id")

    @application_id.setter
    def application_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_id", value)

    @property
    @pulumi.getter
    def attributes(self) -> Optional[pulumi.Input['WorkloadAttributesArgs']]:
        """
        Consumer provided attributes.
        Structure is documented below.
        """
        return pulumi.get(self, "attributes")

    @attributes.setter
    def attributes(self, value: Optional[pulumi.Input['WorkloadAttributesArgs']]):
        pulumi.set(self, "attributes", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        Output only. Create time.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        User-defined description of a Workload.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="discoveredWorkload")
    def discovered_workload(self) -> Optional[pulumi.Input[str]]:
        """
        Immutable. The resource name of the original discovered workload.
        """
        return pulumi.get(self, "discovered_workload")

    @discovered_workload.setter
    def discovered_workload(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "discovered_workload", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        User-defined name for the Workload.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        Part of `parent`.  Full resource name of a parent Application. Example: projects/{HOST_PROJECT_ID}/locations/{LOCATION}/applications/{APPLICATION_ID}
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Identifier. The resource name of the Workload. Format:"projects/{host-project-id}/locations/{location}/applications/{application-id}/workloads/{workload-id}"
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the project in which the resource belongs.
        If it is not provided, the provider project is used.
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        Output only. Workload state. Possible values:  STATE_UNSPECIFIED CREATING ACTIVE DELETING DETACHED
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter
    def uid(self) -> Optional[pulumi.Input[str]]:
        """
        Output only. A universally unique identifier (UUID) for the `Workload` in the UUID4 format.
        """
        return pulumi.get(self, "uid")

    @uid.setter
    def uid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uid", value)

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[str]]:
        """
        Output only. Update time.
        """
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_time", value)

    @property
    @pulumi.getter(name="workloadId")
    def workload_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Workload identifier.


        - - -
        """
        return pulumi.get(self, "workload_id")

    @workload_id.setter
    def workload_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workload_id", value)

    @property
    @pulumi.getter(name="workloadProperties")
    def workload_properties(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadWorkloadPropertyArgs']]]]:
        """
        Properties of an underlying compute resource represented by the Workload.
        Structure is documented below.
        """
        return pulumi.get(self, "workload_properties")

    @workload_properties.setter
    def workload_properties(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadWorkloadPropertyArgs']]]]):
        pulumi.set(self, "workload_properties", value)

    @property
    @pulumi.getter(name="workloadReferences")
    def workload_references(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadWorkloadReferenceArgs']]]]:
        """
        Reference of an underlying compute resource represented by the Workload.
        Structure is documented below.
        """
        return pulumi.get(self, "workload_references")

    @workload_references.setter
    def workload_references(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadWorkloadReferenceArgs']]]]):
        pulumi.set(self, "workload_references", value)


class Workload(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 application_id: Optional[pulumi.Input[str]] = None,
                 attributes: Optional[pulumi.Input[pulumi.InputType['WorkloadAttributesArgs']]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 discovered_workload: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 workload_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Workload represents a binary deployment (such as Managed Instance Groups (MIGs), GKE deployments, etc.) that performs the smallest logical subset of business functionality. It registers identified workload to the Application.

        ## Example Usage

        ### Apphub Workload Basic

        ```python
        import pulumi
        import pulumi_gcp as gcp
        import pulumi_std as std
        import pulumi_time as time

        application = gcp.apphub.Application("application",
            location="us-central1",
            application_id="example-application-1",
            scope=gcp.apphub.ApplicationScopeArgs(
                type="REGIONAL",
            ))
        service_project = gcp.organizations.Project("service_project",
            project_id="project-1",
            name="Service Project",
            org_id="123456789",
            billing_account="000000-0000000-0000000-000000")
        # Enable Compute API
        compute_service_project = gcp.projects.Service("compute_service_project",
            project=service_project.project_id,
            service="compute.googleapis.com")
        wait120s = time.index.Sleep("wait_120s", create_duration=120s)
        service_project_attachment = gcp.apphub.ServiceProjectAttachment("service_project_attachment", service_project_attachment_id=service_project.project_id)
        # VPC network
        ilb_network = gcp.compute.Network("ilb_network",
            name="l7-ilb-network",
            project=service_project.project_id,
            auto_create_subnetworks=False)
        # backend subnet
        ilb_subnet = gcp.compute.Subnetwork("ilb_subnet",
            name="l7-ilb-subnet",
            project=service_project.project_id,
            ip_cidr_range="10.0.1.0/24",
            region="us-central1",
            network=ilb_network.id)
        # instance template
        instance_template = gcp.compute.InstanceTemplate("instance_template",
            network_interfaces=[gcp.compute.InstanceTemplateNetworkInterfaceArgs(
                access_configs=[gcp.compute.InstanceTemplateNetworkInterfaceAccessConfigArgs()],
                network=ilb_network.id,
                subnetwork=ilb_subnet.id,
            )],
            name="l7-ilb-mig-template",
            project=service_project.project_id,
            machine_type="e2-small",
            tags=["http-server"],
            disks=[gcp.compute.InstanceTemplateDiskArgs(
                source_image="debian-cloud/debian-10",
                auto_delete=True,
                boot=True,
            )],
            metadata={
                "startup-script": \"\"\"#! /bin/bash
        set -euo pipefail
        export DEBIAN_FRONTEND=noninteractive
        apt-get update
        apt-get install -y nginx-light jq
        NAME=$(curl -H "Metadata-Flavor: Google" "http://metadata.google.internal/computeMetadata/v1/instance/hostname")
        IP=$(curl -H "Metadata-Flavor: Google" "http://metadata.google.internal/computeMetadata/v1/instance/network-interfaces/0/ip")
        METADATA=$(curl -f -H "Metadata-Flavor: Google" "http://metadata.google.internal/computeMetadata/v1/instance/attributes/?recursive=True" | jq 'del(.["startup-script"])')
        cat <<EOF > /var/www/html/index.html
        <pre>
        Name: $NAME
        IP: $IP
        Metadata: $METADATA
        </pre>
        EOF
        \"\"\",
            })
        mig = gcp.compute.RegionInstanceGroupManager("mig",
            name="l7-ilb-mig1",
            project=service_project.project_id,
            region="us-central1",
            versions=[gcp.compute.RegionInstanceGroupManagerVersionArgs(
                instance_template=instance_template.id,
                name="primary",
            )],
            base_instance_name="vm",
            target_size=2)
        # Discovered workload
        catalog_workload = std.replace_output(text=mig.instance_group,
            search="https://www.googleapis.com/compute/v1",
            replace="//compute.googleapis.com").apply(lambda invoke: gcp.apphub.get_discovered_workload_output(location="us-central1",
            workload_uri=invoke.result))
        wait120s_for_resource_ingestion = time.index.Sleep("wait_120s_for_resource_ingestion", create_duration=120s)
        example = gcp.apphub.Workload("example",
            location="us-central1",
            application_id=application.application_id,
            workload_id=mig.name,
            discovered_workload=catalog_workload.name)
        ```
        ### Apphub Workload Full

        ```python
        import pulumi
        import pulumi_gcp as gcp
        import pulumi_std as std
        import pulumi_time as time

        application = gcp.apphub.Application("application",
            location="us-central1",
            application_id="example-application-1",
            scope=gcp.apphub.ApplicationScopeArgs(
                type="REGIONAL",
            ))
        service_project = gcp.organizations.Project("service_project",
            project_id="project-1",
            name="Service Project",
            org_id="123456789",
            billing_account="000000-0000000-0000000-000000")
        # Enable Compute API
        compute_service_project = gcp.projects.Service("compute_service_project",
            project=service_project.project_id,
            service="compute.googleapis.com")
        wait120s = time.index.Sleep("wait_120s", create_duration=120s)
        service_project_attachment = gcp.apphub.ServiceProjectAttachment("service_project_attachment", service_project_attachment_id=service_project.project_id)
        # VPC network
        ilb_network = gcp.compute.Network("ilb_network",
            name="l7-ilb-network",
            project=service_project.project_id,
            auto_create_subnetworks=False)
        # backend subnet
        ilb_subnet = gcp.compute.Subnetwork("ilb_subnet",
            name="l7-ilb-subnet",
            project=service_project.project_id,
            ip_cidr_range="10.0.1.0/24",
            region="us-central1",
            network=ilb_network.id)
        # instance template
        instance_template = gcp.compute.InstanceTemplate("instance_template",
            network_interfaces=[gcp.compute.InstanceTemplateNetworkInterfaceArgs(
                access_configs=[gcp.compute.InstanceTemplateNetworkInterfaceAccessConfigArgs()],
                network=ilb_network.id,
                subnetwork=ilb_subnet.id,
            )],
            name="l7-ilb-mig-template",
            project=service_project.project_id,
            machine_type="e2-small",
            tags=["http-server"],
            disks=[gcp.compute.InstanceTemplateDiskArgs(
                source_image="debian-cloud/debian-10",
                auto_delete=True,
                boot=True,
            )],
            metadata={
                "startup-script": \"\"\"#! /bin/bash
        set -euo pipefail
        export DEBIAN_FRONTEND=noninteractive
        apt-get update
        apt-get install -y nginx-light jq
        NAME=$(curl -H "Metadata-Flavor: Google" "http://metadata.google.internal/computeMetadata/v1/instance/hostname")
        IP=$(curl -H "Metadata-Flavor: Google" "http://metadata.google.internal/computeMetadata/v1/instance/network-interfaces/0/ip")
        METADATA=$(curl -f -H "Metadata-Flavor: Google" "http://metadata.google.internal/computeMetadata/v1/instance/attributes/?recursive=True" | jq 'del(.["startup-script"])')
        cat <<EOF > /var/www/html/index.html
        <pre>
        Name: $NAME
        IP: $IP
        Metadata: $METADATA
        </pre>
        EOF
        \"\"\",
            })
        mig = gcp.compute.RegionInstanceGroupManager("mig",
            name="l7-ilb-mig1",
            project=service_project.project_id,
            region="us-central1",
            versions=[gcp.compute.RegionInstanceGroupManagerVersionArgs(
                instance_template=instance_template.id,
                name="primary",
            )],
            base_instance_name="vm",
            target_size=2)
        # Discovered workload 
        catalog_workload = std.replace_output(text=mig.instance_group,
            search="https://www.googleapis.com/compute/v1",
            replace="//compute.googleapis.com").apply(lambda invoke: gcp.apphub.get_discovered_workload_output(location="us-central1",
            workload_uri=invoke.result))
        wait120s_for_resource_ingestion = time.index.Sleep("wait_120s_for_resource_ingestion", create_duration=120s)
        example = gcp.apphub.Workload("example",
            location="us-central1",
            application_id=application.application_id,
            workload_id=mig.name,
            discovered_workload=catalog_workload.name,
            display_name="Example Service Full",
            description="Register service for testing",
            attributes=gcp.apphub.WorkloadAttributesArgs(
                environment=gcp.apphub.WorkloadAttributesEnvironmentArgs(
                    type="STAGING",
                ),
                criticality=gcp.apphub.WorkloadAttributesCriticalityArgs(
                    type="MISSION_CRITICAL",
                ),
                business_owners=[gcp.apphub.WorkloadAttributesBusinessOwnerArgs(
                    display_name="Alice",
                    email="alice@google.com",
                )],
                developer_owners=[gcp.apphub.WorkloadAttributesDeveloperOwnerArgs(
                    display_name="Bob",
                    email="bob@google.com",
                )],
                operator_owners=[gcp.apphub.WorkloadAttributesOperatorOwnerArgs(
                    display_name="Charlie",
                    email="charlie@google.com",
                )],
            ))
        ```

        ## Import

        Workload can be imported using any of these accepted formats:

        * `projects/{{project}}/locations/{{location}}/applications/{{application_id}}/workloads/{{workload_id}}`

        * `{{project}}/{{location}}/{{application_id}}/{{workload_id}}`

        * `{{location}}/{{application_id}}/{{workload_id}}`

        When using the `pulumi import` command, Workload can be imported using one of the formats above. For example:

        ```sh
        $ pulumi import gcp:apphub/workload:Workload default projects/{{project}}/locations/{{location}}/applications/{{application_id}}/workloads/{{workload_id}}
        ```

        ```sh
        $ pulumi import gcp:apphub/workload:Workload default {{project}}/{{location}}/{{application_id}}/{{workload_id}}
        ```

        ```sh
        $ pulumi import gcp:apphub/workload:Workload default {{location}}/{{application_id}}/{{workload_id}}
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] application_id: Part of `parent`.  Full resource name of a parent Application. Example: projects/{HOST_PROJECT_ID}/locations/{LOCATION}/applications/{APPLICATION_ID}
        :param pulumi.Input[pulumi.InputType['WorkloadAttributesArgs']] attributes: Consumer provided attributes.
               Structure is documented below.
        :param pulumi.Input[str] description: User-defined description of a Workload.
        :param pulumi.Input[str] discovered_workload: Immutable. The resource name of the original discovered workload.
        :param pulumi.Input[str] display_name: User-defined name for the Workload.
        :param pulumi.Input[str] location: Part of `parent`.  Full resource name of a parent Application. Example: projects/{HOST_PROJECT_ID}/locations/{LOCATION}/applications/{APPLICATION_ID}
        :param pulumi.Input[str] project: The ID of the project in which the resource belongs.
               If it is not provided, the provider project is used.
        :param pulumi.Input[str] workload_id: The Workload identifier.
               
               
               - - -
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: WorkloadArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Workload represents a binary deployment (such as Managed Instance Groups (MIGs), GKE deployments, etc.) that performs the smallest logical subset of business functionality. It registers identified workload to the Application.

        ## Example Usage

        ### Apphub Workload Basic

        ```python
        import pulumi
        import pulumi_gcp as gcp
        import pulumi_std as std
        import pulumi_time as time

        application = gcp.apphub.Application("application",
            location="us-central1",
            application_id="example-application-1",
            scope=gcp.apphub.ApplicationScopeArgs(
                type="REGIONAL",
            ))
        service_project = gcp.organizations.Project("service_project",
            project_id="project-1",
            name="Service Project",
            org_id="123456789",
            billing_account="000000-0000000-0000000-000000")
        # Enable Compute API
        compute_service_project = gcp.projects.Service("compute_service_project",
            project=service_project.project_id,
            service="compute.googleapis.com")
        wait120s = time.index.Sleep("wait_120s", create_duration=120s)
        service_project_attachment = gcp.apphub.ServiceProjectAttachment("service_project_attachment", service_project_attachment_id=service_project.project_id)
        # VPC network
        ilb_network = gcp.compute.Network("ilb_network",
            name="l7-ilb-network",
            project=service_project.project_id,
            auto_create_subnetworks=False)
        # backend subnet
        ilb_subnet = gcp.compute.Subnetwork("ilb_subnet",
            name="l7-ilb-subnet",
            project=service_project.project_id,
            ip_cidr_range="10.0.1.0/24",
            region="us-central1",
            network=ilb_network.id)
        # instance template
        instance_template = gcp.compute.InstanceTemplate("instance_template",
            network_interfaces=[gcp.compute.InstanceTemplateNetworkInterfaceArgs(
                access_configs=[gcp.compute.InstanceTemplateNetworkInterfaceAccessConfigArgs()],
                network=ilb_network.id,
                subnetwork=ilb_subnet.id,
            )],
            name="l7-ilb-mig-template",
            project=service_project.project_id,
            machine_type="e2-small",
            tags=["http-server"],
            disks=[gcp.compute.InstanceTemplateDiskArgs(
                source_image="debian-cloud/debian-10",
                auto_delete=True,
                boot=True,
            )],
            metadata={
                "startup-script": \"\"\"#! /bin/bash
        set -euo pipefail
        export DEBIAN_FRONTEND=noninteractive
        apt-get update
        apt-get install -y nginx-light jq
        NAME=$(curl -H "Metadata-Flavor: Google" "http://metadata.google.internal/computeMetadata/v1/instance/hostname")
        IP=$(curl -H "Metadata-Flavor: Google" "http://metadata.google.internal/computeMetadata/v1/instance/network-interfaces/0/ip")
        METADATA=$(curl -f -H "Metadata-Flavor: Google" "http://metadata.google.internal/computeMetadata/v1/instance/attributes/?recursive=True" | jq 'del(.["startup-script"])')
        cat <<EOF > /var/www/html/index.html
        <pre>
        Name: $NAME
        IP: $IP
        Metadata: $METADATA
        </pre>
        EOF
        \"\"\",
            })
        mig = gcp.compute.RegionInstanceGroupManager("mig",
            name="l7-ilb-mig1",
            project=service_project.project_id,
            region="us-central1",
            versions=[gcp.compute.RegionInstanceGroupManagerVersionArgs(
                instance_template=instance_template.id,
                name="primary",
            )],
            base_instance_name="vm",
            target_size=2)
        # Discovered workload
        catalog_workload = std.replace_output(text=mig.instance_group,
            search="https://www.googleapis.com/compute/v1",
            replace="//compute.googleapis.com").apply(lambda invoke: gcp.apphub.get_discovered_workload_output(location="us-central1",
            workload_uri=invoke.result))
        wait120s_for_resource_ingestion = time.index.Sleep("wait_120s_for_resource_ingestion", create_duration=120s)
        example = gcp.apphub.Workload("example",
            location="us-central1",
            application_id=application.application_id,
            workload_id=mig.name,
            discovered_workload=catalog_workload.name)
        ```
        ### Apphub Workload Full

        ```python
        import pulumi
        import pulumi_gcp as gcp
        import pulumi_std as std
        import pulumi_time as time

        application = gcp.apphub.Application("application",
            location="us-central1",
            application_id="example-application-1",
            scope=gcp.apphub.ApplicationScopeArgs(
                type="REGIONAL",
            ))
        service_project = gcp.organizations.Project("service_project",
            project_id="project-1",
            name="Service Project",
            org_id="123456789",
            billing_account="000000-0000000-0000000-000000")
        # Enable Compute API
        compute_service_project = gcp.projects.Service("compute_service_project",
            project=service_project.project_id,
            service="compute.googleapis.com")
        wait120s = time.index.Sleep("wait_120s", create_duration=120s)
        service_project_attachment = gcp.apphub.ServiceProjectAttachment("service_project_attachment", service_project_attachment_id=service_project.project_id)
        # VPC network
        ilb_network = gcp.compute.Network("ilb_network",
            name="l7-ilb-network",
            project=service_project.project_id,
            auto_create_subnetworks=False)
        # backend subnet
        ilb_subnet = gcp.compute.Subnetwork("ilb_subnet",
            name="l7-ilb-subnet",
            project=service_project.project_id,
            ip_cidr_range="10.0.1.0/24",
            region="us-central1",
            network=ilb_network.id)
        # instance template
        instance_template = gcp.compute.InstanceTemplate("instance_template",
            network_interfaces=[gcp.compute.InstanceTemplateNetworkInterfaceArgs(
                access_configs=[gcp.compute.InstanceTemplateNetworkInterfaceAccessConfigArgs()],
                network=ilb_network.id,
                subnetwork=ilb_subnet.id,
            )],
            name="l7-ilb-mig-template",
            project=service_project.project_id,
            machine_type="e2-small",
            tags=["http-server"],
            disks=[gcp.compute.InstanceTemplateDiskArgs(
                source_image="debian-cloud/debian-10",
                auto_delete=True,
                boot=True,
            )],
            metadata={
                "startup-script": \"\"\"#! /bin/bash
        set -euo pipefail
        export DEBIAN_FRONTEND=noninteractive
        apt-get update
        apt-get install -y nginx-light jq
        NAME=$(curl -H "Metadata-Flavor: Google" "http://metadata.google.internal/computeMetadata/v1/instance/hostname")
        IP=$(curl -H "Metadata-Flavor: Google" "http://metadata.google.internal/computeMetadata/v1/instance/network-interfaces/0/ip")
        METADATA=$(curl -f -H "Metadata-Flavor: Google" "http://metadata.google.internal/computeMetadata/v1/instance/attributes/?recursive=True" | jq 'del(.["startup-script"])')
        cat <<EOF > /var/www/html/index.html
        <pre>
        Name: $NAME
        IP: $IP
        Metadata: $METADATA
        </pre>
        EOF
        \"\"\",
            })
        mig = gcp.compute.RegionInstanceGroupManager("mig",
            name="l7-ilb-mig1",
            project=service_project.project_id,
            region="us-central1",
            versions=[gcp.compute.RegionInstanceGroupManagerVersionArgs(
                instance_template=instance_template.id,
                name="primary",
            )],
            base_instance_name="vm",
            target_size=2)
        # Discovered workload 
        catalog_workload = std.replace_output(text=mig.instance_group,
            search="https://www.googleapis.com/compute/v1",
            replace="//compute.googleapis.com").apply(lambda invoke: gcp.apphub.get_discovered_workload_output(location="us-central1",
            workload_uri=invoke.result))
        wait120s_for_resource_ingestion = time.index.Sleep("wait_120s_for_resource_ingestion", create_duration=120s)
        example = gcp.apphub.Workload("example",
            location="us-central1",
            application_id=application.application_id,
            workload_id=mig.name,
            discovered_workload=catalog_workload.name,
            display_name="Example Service Full",
            description="Register service for testing",
            attributes=gcp.apphub.WorkloadAttributesArgs(
                environment=gcp.apphub.WorkloadAttributesEnvironmentArgs(
                    type="STAGING",
                ),
                criticality=gcp.apphub.WorkloadAttributesCriticalityArgs(
                    type="MISSION_CRITICAL",
                ),
                business_owners=[gcp.apphub.WorkloadAttributesBusinessOwnerArgs(
                    display_name="Alice",
                    email="alice@google.com",
                )],
                developer_owners=[gcp.apphub.WorkloadAttributesDeveloperOwnerArgs(
                    display_name="Bob",
                    email="bob@google.com",
                )],
                operator_owners=[gcp.apphub.WorkloadAttributesOperatorOwnerArgs(
                    display_name="Charlie",
                    email="charlie@google.com",
                )],
            ))
        ```

        ## Import

        Workload can be imported using any of these accepted formats:

        * `projects/{{project}}/locations/{{location}}/applications/{{application_id}}/workloads/{{workload_id}}`

        * `{{project}}/{{location}}/{{application_id}}/{{workload_id}}`

        * `{{location}}/{{application_id}}/{{workload_id}}`

        When using the `pulumi import` command, Workload can be imported using one of the formats above. For example:

        ```sh
        $ pulumi import gcp:apphub/workload:Workload default projects/{{project}}/locations/{{location}}/applications/{{application_id}}/workloads/{{workload_id}}
        ```

        ```sh
        $ pulumi import gcp:apphub/workload:Workload default {{project}}/{{location}}/{{application_id}}/{{workload_id}}
        ```

        ```sh
        $ pulumi import gcp:apphub/workload:Workload default {{location}}/{{application_id}}/{{workload_id}}
        ```

        :param str resource_name: The name of the resource.
        :param WorkloadArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WorkloadArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 application_id: Optional[pulumi.Input[str]] = None,
                 attributes: Optional[pulumi.Input[pulumi.InputType['WorkloadAttributesArgs']]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 discovered_workload: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 workload_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WorkloadArgs.__new__(WorkloadArgs)

            if application_id is None and not opts.urn:
                raise TypeError("Missing required property 'application_id'")
            __props__.__dict__["application_id"] = application_id
            __props__.__dict__["attributes"] = attributes
            __props__.__dict__["description"] = description
            if discovered_workload is None and not opts.urn:
                raise TypeError("Missing required property 'discovered_workload'")
            __props__.__dict__["discovered_workload"] = discovered_workload
            __props__.__dict__["display_name"] = display_name
            if location is None and not opts.urn:
                raise TypeError("Missing required property 'location'")
            __props__.__dict__["location"] = location
            __props__.__dict__["project"] = project
            if workload_id is None and not opts.urn:
                raise TypeError("Missing required property 'workload_id'")
            __props__.__dict__["workload_id"] = workload_id
            __props__.__dict__["create_time"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["uid"] = None
            __props__.__dict__["update_time"] = None
            __props__.__dict__["workload_properties"] = None
            __props__.__dict__["workload_references"] = None
        super(Workload, __self__).__init__(
            'gcp:apphub/workload:Workload',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            application_id: Optional[pulumi.Input[str]] = None,
            attributes: Optional[pulumi.Input[pulumi.InputType['WorkloadAttributesArgs']]] = None,
            create_time: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            discovered_workload: Optional[pulumi.Input[str]] = None,
            display_name: Optional[pulumi.Input[str]] = None,
            location: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            project: Optional[pulumi.Input[str]] = None,
            state: Optional[pulumi.Input[str]] = None,
            uid: Optional[pulumi.Input[str]] = None,
            update_time: Optional[pulumi.Input[str]] = None,
            workload_id: Optional[pulumi.Input[str]] = None,
            workload_properties: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WorkloadWorkloadPropertyArgs']]]]] = None,
            workload_references: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WorkloadWorkloadReferenceArgs']]]]] = None) -> 'Workload':
        """
        Get an existing Workload resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] application_id: Part of `parent`.  Full resource name of a parent Application. Example: projects/{HOST_PROJECT_ID}/locations/{LOCATION}/applications/{APPLICATION_ID}
        :param pulumi.Input[pulumi.InputType['WorkloadAttributesArgs']] attributes: Consumer provided attributes.
               Structure is documented below.
        :param pulumi.Input[str] create_time: Output only. Create time.
        :param pulumi.Input[str] description: User-defined description of a Workload.
        :param pulumi.Input[str] discovered_workload: Immutable. The resource name of the original discovered workload.
        :param pulumi.Input[str] display_name: User-defined name for the Workload.
        :param pulumi.Input[str] location: Part of `parent`.  Full resource name of a parent Application. Example: projects/{HOST_PROJECT_ID}/locations/{LOCATION}/applications/{APPLICATION_ID}
        :param pulumi.Input[str] name: Identifier. The resource name of the Workload. Format:"projects/{host-project-id}/locations/{location}/applications/{application-id}/workloads/{workload-id}"
        :param pulumi.Input[str] project: The ID of the project in which the resource belongs.
               If it is not provided, the provider project is used.
        :param pulumi.Input[str] state: Output only. Workload state. Possible values:  STATE_UNSPECIFIED CREATING ACTIVE DELETING DETACHED
        :param pulumi.Input[str] uid: Output only. A universally unique identifier (UUID) for the `Workload` in the UUID4 format.
        :param pulumi.Input[str] update_time: Output only. Update time.
        :param pulumi.Input[str] workload_id: The Workload identifier.
               
               
               - - -
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WorkloadWorkloadPropertyArgs']]]] workload_properties: Properties of an underlying compute resource represented by the Workload.
               Structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WorkloadWorkloadReferenceArgs']]]] workload_references: Reference of an underlying compute resource represented by the Workload.
               Structure is documented below.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _WorkloadState.__new__(_WorkloadState)

        __props__.__dict__["application_id"] = application_id
        __props__.__dict__["attributes"] = attributes
        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["description"] = description
        __props__.__dict__["discovered_workload"] = discovered_workload
        __props__.__dict__["display_name"] = display_name
        __props__.__dict__["location"] = location
        __props__.__dict__["name"] = name
        __props__.__dict__["project"] = project
        __props__.__dict__["state"] = state
        __props__.__dict__["uid"] = uid
        __props__.__dict__["update_time"] = update_time
        __props__.__dict__["workload_id"] = workload_id
        __props__.__dict__["workload_properties"] = workload_properties
        __props__.__dict__["workload_references"] = workload_references
        return Workload(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> pulumi.Output[str]:
        """
        Part of `parent`.  Full resource name of a parent Application. Example: projects/{HOST_PROJECT_ID}/locations/{LOCATION}/applications/{APPLICATION_ID}
        """
        return pulumi.get(self, "application_id")

    @property
    @pulumi.getter
    def attributes(self) -> pulumi.Output[Optional['outputs.WorkloadAttributes']]:
        """
        Consumer provided attributes.
        Structure is documented below.
        """
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        Output only. Create time.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        User-defined description of a Workload.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="discoveredWorkload")
    def discovered_workload(self) -> pulumi.Output[str]:
        """
        Immutable. The resource name of the original discovered workload.
        """
        return pulumi.get(self, "discovered_workload")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[Optional[str]]:
        """
        User-defined name for the Workload.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        """
        Part of `parent`.  Full resource name of a parent Application. Example: projects/{HOST_PROJECT_ID}/locations/{LOCATION}/applications/{APPLICATION_ID}
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Identifier. The resource name of the Workload. Format:"projects/{host-project-id}/locations/{location}/applications/{application-id}/workloads/{workload-id}"
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[str]:
        """
        The ID of the project in which the resource belongs.
        If it is not provided, the provider project is used.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        """
        Output only. Workload state. Possible values:  STATE_UNSPECIFIED CREATING ACTIVE DELETING DETACHED
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def uid(self) -> pulumi.Output[str]:
        """
        Output only. A universally unique identifier (UUID) for the `Workload` in the UUID4 format.
        """
        return pulumi.get(self, "uid")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[str]:
        """
        Output only. Update time.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="workloadId")
    def workload_id(self) -> pulumi.Output[str]:
        """
        The Workload identifier.


        - - -
        """
        return pulumi.get(self, "workload_id")

    @property
    @pulumi.getter(name="workloadProperties")
    def workload_properties(self) -> pulumi.Output[Sequence['outputs.WorkloadWorkloadProperty']]:
        """
        Properties of an underlying compute resource represented by the Workload.
        Structure is documented below.
        """
        return pulumi.get(self, "workload_properties")

    @property
    @pulumi.getter(name="workloadReferences")
    def workload_references(self) -> pulumi.Output[Sequence['outputs.WorkloadWorkloadReference']]:
        """
        Reference of an underlying compute resource represented by the Workload.
        Structure is documented below.
        """
        return pulumi.get(self, "workload_references")

