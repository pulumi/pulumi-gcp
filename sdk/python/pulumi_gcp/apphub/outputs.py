# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'ApplicationAttributes',
    'ApplicationAttributesBusinessOwner',
    'ApplicationAttributesCriticality',
    'ApplicationAttributesDeveloperOwner',
    'ApplicationAttributesEnvironment',
    'ApplicationAttributesOperatorOwner',
    'ApplicationScope',
    'ServiceAttributes',
    'ServiceAttributesBusinessOwner',
    'ServiceAttributesCriticality',
    'ServiceAttributesDeveloperOwner',
    'ServiceAttributesEnvironment',
    'ServiceAttributesOperatorOwner',
    'ServiceServiceProperty',
    'ServiceServiceReference',
    'WorkloadAttributes',
    'WorkloadAttributesBusinessOwner',
    'WorkloadAttributesCriticality',
    'WorkloadAttributesDeveloperOwner',
    'WorkloadAttributesEnvironment',
    'WorkloadAttributesOperatorOwner',
    'WorkloadWorkloadProperty',
    'WorkloadWorkloadReference',
    'GetDiscoveredServiceServicePropertyResult',
    'GetDiscoveredServiceServiceReferenceResult',
    'GetDiscoveredWorkloadWorkloadPropertyResult',
    'GetDiscoveredWorkloadWorkloadReferenceResult',
]

@pulumi.output_type
class ApplicationAttributes(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "businessOwners":
            suggest = "business_owners"
        elif key == "developerOwners":
            suggest = "developer_owners"
        elif key == "operatorOwners":
            suggest = "operator_owners"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationAttributes. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationAttributes.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationAttributes.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 business_owners: Optional[Sequence['outputs.ApplicationAttributesBusinessOwner']] = None,
                 criticality: Optional['outputs.ApplicationAttributesCriticality'] = None,
                 developer_owners: Optional[Sequence['outputs.ApplicationAttributesDeveloperOwner']] = None,
                 environment: Optional['outputs.ApplicationAttributesEnvironment'] = None,
                 operator_owners: Optional[Sequence['outputs.ApplicationAttributesOperatorOwner']] = None):
        """
        :param Sequence['ApplicationAttributesBusinessOwnerArgs'] business_owners: Optional. Business team that ensures user needs are met and value is delivered
               Structure is documented below.
        :param 'ApplicationAttributesCriticalityArgs' criticality: Criticality of the Application, Service, or Workload
               Structure is documented below.
        :param Sequence['ApplicationAttributesDeveloperOwnerArgs'] developer_owners: Optional. Developer team that owns development and coding.
               Structure is documented below.
        :param 'ApplicationAttributesEnvironmentArgs' environment: Environment of the Application, Service, or Workload
               Structure is documented below.
        :param Sequence['ApplicationAttributesOperatorOwnerArgs'] operator_owners: Optional. Operator team that ensures runtime and operations.
               Structure is documented below.
        """
        if business_owners is not None:
            pulumi.set(__self__, "business_owners", business_owners)
        if criticality is not None:
            pulumi.set(__self__, "criticality", criticality)
        if developer_owners is not None:
            pulumi.set(__self__, "developer_owners", developer_owners)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if operator_owners is not None:
            pulumi.set(__self__, "operator_owners", operator_owners)

    @property
    @pulumi.getter(name="businessOwners")
    def business_owners(self) -> Optional[Sequence['outputs.ApplicationAttributesBusinessOwner']]:
        """
        Optional. Business team that ensures user needs are met and value is delivered
        Structure is documented below.
        """
        return pulumi.get(self, "business_owners")

    @property
    @pulumi.getter
    def criticality(self) -> Optional['outputs.ApplicationAttributesCriticality']:
        """
        Criticality of the Application, Service, or Workload
        Structure is documented below.
        """
        return pulumi.get(self, "criticality")

    @property
    @pulumi.getter(name="developerOwners")
    def developer_owners(self) -> Optional[Sequence['outputs.ApplicationAttributesDeveloperOwner']]:
        """
        Optional. Developer team that owns development and coding.
        Structure is documented below.
        """
        return pulumi.get(self, "developer_owners")

    @property
    @pulumi.getter
    def environment(self) -> Optional['outputs.ApplicationAttributesEnvironment']:
        """
        Environment of the Application, Service, or Workload
        Structure is documented below.
        """
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter(name="operatorOwners")
    def operator_owners(self) -> Optional[Sequence['outputs.ApplicationAttributesOperatorOwner']]:
        """
        Optional. Operator team that ensures runtime and operations.
        Structure is documented below.
        """
        return pulumi.get(self, "operator_owners")


@pulumi.output_type
class ApplicationAttributesBusinessOwner(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationAttributesBusinessOwner. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationAttributesBusinessOwner.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationAttributesBusinessOwner.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 email: str,
                 display_name: Optional[str] = None):
        """
        :param str email: Required. Email address of the contacts.
        :param str display_name: Optional. Contact's name.
        """
        pulumi.set(__self__, "email", email)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter
    def email(self) -> str:
        """
        Required. Email address of the contacts.
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        Optional. Contact's name.
        """
        return pulumi.get(self, "display_name")


@pulumi.output_type
class ApplicationAttributesCriticality(dict):
    def __init__(__self__, *,
                 type: str):
        """
        :param str type: Criticality type.
               Possible values are: `MISSION_CRITICAL`, `HIGH`, `MEDIUM`, `LOW`.
        """
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Criticality type.
        Possible values are: `MISSION_CRITICAL`, `HIGH`, `MEDIUM`, `LOW`.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ApplicationAttributesDeveloperOwner(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationAttributesDeveloperOwner. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationAttributesDeveloperOwner.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationAttributesDeveloperOwner.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 email: str,
                 display_name: Optional[str] = None):
        """
        :param str email: Required. Email address of the contacts.
        :param str display_name: Optional. Contact's name.
        """
        pulumi.set(__self__, "email", email)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter
    def email(self) -> str:
        """
        Required. Email address of the contacts.
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        Optional. Contact's name.
        """
        return pulumi.get(self, "display_name")


@pulumi.output_type
class ApplicationAttributesEnvironment(dict):
    def __init__(__self__, *,
                 type: str):
        """
        :param str type: Environment type.
               Possible values are: `PRODUCTION`, `STAGING`, `TEST`, `DEVELOPMENT`.
        """
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Environment type.
        Possible values are: `PRODUCTION`, `STAGING`, `TEST`, `DEVELOPMENT`.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ApplicationAttributesOperatorOwner(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationAttributesOperatorOwner. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationAttributesOperatorOwner.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationAttributesOperatorOwner.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 email: str,
                 display_name: Optional[str] = None):
        """
        :param str email: Required. Email address of the contacts.
        :param str display_name: Optional. Contact's name.
        """
        pulumi.set(__self__, "email", email)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter
    def email(self) -> str:
        """
        Required. Email address of the contacts.
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        Optional. Contact's name.
        """
        return pulumi.get(self, "display_name")


@pulumi.output_type
class ApplicationScope(dict):
    def __init__(__self__, *,
                 type: str):
        """
        :param str type: Required. Scope Type.
               Possible values:
               REGIONAL
               Possible values are: `REGIONAL`.
               
               - - -
        """
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Required. Scope Type.
        Possible values:
        REGIONAL
        Possible values are: `REGIONAL`.

        - - -
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ServiceAttributes(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "businessOwners":
            suggest = "business_owners"
        elif key == "developerOwners":
            suggest = "developer_owners"
        elif key == "operatorOwners":
            suggest = "operator_owners"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceAttributes. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceAttributes.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceAttributes.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 business_owners: Optional[Sequence['outputs.ServiceAttributesBusinessOwner']] = None,
                 criticality: Optional['outputs.ServiceAttributesCriticality'] = None,
                 developer_owners: Optional[Sequence['outputs.ServiceAttributesDeveloperOwner']] = None,
                 environment: Optional['outputs.ServiceAttributesEnvironment'] = None,
                 operator_owners: Optional[Sequence['outputs.ServiceAttributesOperatorOwner']] = None):
        """
        :param Sequence['ServiceAttributesBusinessOwnerArgs'] business_owners: Business team that ensures user needs are met and value is delivered
               Structure is documented below.
        :param 'ServiceAttributesCriticalityArgs' criticality: Criticality of the Application, Service, or Workload
               Structure is documented below.
        :param Sequence['ServiceAttributesDeveloperOwnerArgs'] developer_owners: Developer team that owns development and coding.
               Structure is documented below.
        :param 'ServiceAttributesEnvironmentArgs' environment: Environment of the Application, Service, or Workload
               Structure is documented below.
        :param Sequence['ServiceAttributesOperatorOwnerArgs'] operator_owners: Operator team that ensures runtime and operations.
               Structure is documented below.
        """
        if business_owners is not None:
            pulumi.set(__self__, "business_owners", business_owners)
        if criticality is not None:
            pulumi.set(__self__, "criticality", criticality)
        if developer_owners is not None:
            pulumi.set(__self__, "developer_owners", developer_owners)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if operator_owners is not None:
            pulumi.set(__self__, "operator_owners", operator_owners)

    @property
    @pulumi.getter(name="businessOwners")
    def business_owners(self) -> Optional[Sequence['outputs.ServiceAttributesBusinessOwner']]:
        """
        Business team that ensures user needs are met and value is delivered
        Structure is documented below.
        """
        return pulumi.get(self, "business_owners")

    @property
    @pulumi.getter
    def criticality(self) -> Optional['outputs.ServiceAttributesCriticality']:
        """
        Criticality of the Application, Service, or Workload
        Structure is documented below.
        """
        return pulumi.get(self, "criticality")

    @property
    @pulumi.getter(name="developerOwners")
    def developer_owners(self) -> Optional[Sequence['outputs.ServiceAttributesDeveloperOwner']]:
        """
        Developer team that owns development and coding.
        Structure is documented below.
        """
        return pulumi.get(self, "developer_owners")

    @property
    @pulumi.getter
    def environment(self) -> Optional['outputs.ServiceAttributesEnvironment']:
        """
        Environment of the Application, Service, or Workload
        Structure is documented below.
        """
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter(name="operatorOwners")
    def operator_owners(self) -> Optional[Sequence['outputs.ServiceAttributesOperatorOwner']]:
        """
        Operator team that ensures runtime and operations.
        Structure is documented below.
        """
        return pulumi.get(self, "operator_owners")


@pulumi.output_type
class ServiceAttributesBusinessOwner(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceAttributesBusinessOwner. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceAttributesBusinessOwner.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceAttributesBusinessOwner.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 email: str,
                 display_name: Optional[str] = None):
        """
        :param str email: Required. Email address of the contacts.
        :param str display_name: Contact's name.
        """
        pulumi.set(__self__, "email", email)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter
    def email(self) -> str:
        """
        Required. Email address of the contacts.
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        Contact's name.
        """
        return pulumi.get(self, "display_name")


@pulumi.output_type
class ServiceAttributesCriticality(dict):
    def __init__(__self__, *,
                 type: str):
        """
        :param str type: Criticality type.
               Possible values are: `MISSION_CRITICAL`, `HIGH`, `MEDIUM`, `LOW`.
        """
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Criticality type.
        Possible values are: `MISSION_CRITICAL`, `HIGH`, `MEDIUM`, `LOW`.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ServiceAttributesDeveloperOwner(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceAttributesDeveloperOwner. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceAttributesDeveloperOwner.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceAttributesDeveloperOwner.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 email: str,
                 display_name: Optional[str] = None):
        """
        :param str email: Required. Email address of the contacts.
        :param str display_name: Contact's name.
        """
        pulumi.set(__self__, "email", email)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter
    def email(self) -> str:
        """
        Required. Email address of the contacts.
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        Contact's name.
        """
        return pulumi.get(self, "display_name")


@pulumi.output_type
class ServiceAttributesEnvironment(dict):
    def __init__(__self__, *,
                 type: str):
        """
        :param str type: Environment type.
               Possible values are: `PRODUCTION`, `STAGING`, `TEST`, `DEVELOPMENT`.
        """
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Environment type.
        Possible values are: `PRODUCTION`, `STAGING`, `TEST`, `DEVELOPMENT`.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ServiceAttributesOperatorOwner(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceAttributesOperatorOwner. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceAttributesOperatorOwner.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceAttributesOperatorOwner.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 email: str,
                 display_name: Optional[str] = None):
        """
        :param str email: Required. Email address of the contacts.
        :param str display_name: Contact's name.
        """
        pulumi.set(__self__, "email", email)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter
    def email(self) -> str:
        """
        Required. Email address of the contacts.
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        Contact's name.
        """
        return pulumi.get(self, "display_name")


@pulumi.output_type
class ServiceServiceProperty(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "gcpProject":
            suggest = "gcp_project"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceServiceProperty. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceServiceProperty.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceServiceProperty.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 gcp_project: Optional[str] = None,
                 location: Optional[str] = None,
                 zone: Optional[str] = None):
        """
        :param str gcp_project: (Output)
               Output only. The service project identifier that the underlying cloud resource resides in.
        :param str location: Part of `parent`.  Full resource name of a parent Application. Example: projects/{HOST_PROJECT_ID}/locations/{LOCATION}/applications/{APPLICATION_ID}
        :param str zone: (Output)
               Output only. The location that the underlying resource resides in if it is zonal, for example, us-west1-a).
        """
        if gcp_project is not None:
            pulumi.set(__self__, "gcp_project", gcp_project)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="gcpProject")
    def gcp_project(self) -> Optional[str]:
        """
        (Output)
        Output only. The service project identifier that the underlying cloud resource resides in.
        """
        return pulumi.get(self, "gcp_project")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        """
        Part of `parent`.  Full resource name of a parent Application. Example: projects/{HOST_PROJECT_ID}/locations/{LOCATION}/applications/{APPLICATION_ID}
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def zone(self) -> Optional[str]:
        """
        (Output)
        Output only. The location that the underlying resource resides in if it is zonal, for example, us-west1-a).
        """
        return pulumi.get(self, "zone")


@pulumi.output_type
class ServiceServiceReference(dict):
    def __init__(__self__, *,
                 uri: Optional[str] = None):
        """
        :param str uri: (Output)
               Output only. The underlying resource URI (For example, URI of Forwarding Rule, URL Map,
               and Backend Service).
        """
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        """
        (Output)
        Output only. The underlying resource URI (For example, URI of Forwarding Rule, URL Map,
        and Backend Service).
        """
        return pulumi.get(self, "uri")


@pulumi.output_type
class WorkloadAttributes(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "businessOwners":
            suggest = "business_owners"
        elif key == "developerOwners":
            suggest = "developer_owners"
        elif key == "operatorOwners":
            suggest = "operator_owners"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadAttributes. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadAttributes.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadAttributes.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 business_owners: Optional[Sequence['outputs.WorkloadAttributesBusinessOwner']] = None,
                 criticality: Optional['outputs.WorkloadAttributesCriticality'] = None,
                 developer_owners: Optional[Sequence['outputs.WorkloadAttributesDeveloperOwner']] = None,
                 environment: Optional['outputs.WorkloadAttributesEnvironment'] = None,
                 operator_owners: Optional[Sequence['outputs.WorkloadAttributesOperatorOwner']] = None):
        """
        :param Sequence['WorkloadAttributesBusinessOwnerArgs'] business_owners: Business team that ensures user needs are met and value is delivered
               Structure is documented below.
        :param 'WorkloadAttributesCriticalityArgs' criticality: Criticality of the Application, Service, or Workload
               Structure is documented below.
        :param Sequence['WorkloadAttributesDeveloperOwnerArgs'] developer_owners: Developer team that owns development and coding.
               Structure is documented below.
        :param 'WorkloadAttributesEnvironmentArgs' environment: Environment of the Application, Service, or Workload
               Structure is documented below.
        :param Sequence['WorkloadAttributesOperatorOwnerArgs'] operator_owners: Operator team that ensures runtime and operations.
               Structure is documented below.
        """
        if business_owners is not None:
            pulumi.set(__self__, "business_owners", business_owners)
        if criticality is not None:
            pulumi.set(__self__, "criticality", criticality)
        if developer_owners is not None:
            pulumi.set(__self__, "developer_owners", developer_owners)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if operator_owners is not None:
            pulumi.set(__self__, "operator_owners", operator_owners)

    @property
    @pulumi.getter(name="businessOwners")
    def business_owners(self) -> Optional[Sequence['outputs.WorkloadAttributesBusinessOwner']]:
        """
        Business team that ensures user needs are met and value is delivered
        Structure is documented below.
        """
        return pulumi.get(self, "business_owners")

    @property
    @pulumi.getter
    def criticality(self) -> Optional['outputs.WorkloadAttributesCriticality']:
        """
        Criticality of the Application, Service, or Workload
        Structure is documented below.
        """
        return pulumi.get(self, "criticality")

    @property
    @pulumi.getter(name="developerOwners")
    def developer_owners(self) -> Optional[Sequence['outputs.WorkloadAttributesDeveloperOwner']]:
        """
        Developer team that owns development and coding.
        Structure is documented below.
        """
        return pulumi.get(self, "developer_owners")

    @property
    @pulumi.getter
    def environment(self) -> Optional['outputs.WorkloadAttributesEnvironment']:
        """
        Environment of the Application, Service, or Workload
        Structure is documented below.
        """
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter(name="operatorOwners")
    def operator_owners(self) -> Optional[Sequence['outputs.WorkloadAttributesOperatorOwner']]:
        """
        Operator team that ensures runtime and operations.
        Structure is documented below.
        """
        return pulumi.get(self, "operator_owners")


@pulumi.output_type
class WorkloadAttributesBusinessOwner(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadAttributesBusinessOwner. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadAttributesBusinessOwner.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadAttributesBusinessOwner.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 email: str,
                 display_name: Optional[str] = None):
        """
        :param str email: Email address of the contacts.
        :param str display_name: Contact's name.
        """
        pulumi.set(__self__, "email", email)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter
    def email(self) -> str:
        """
        Email address of the contacts.
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        Contact's name.
        """
        return pulumi.get(self, "display_name")


@pulumi.output_type
class WorkloadAttributesCriticality(dict):
    def __init__(__self__, *,
                 type: str):
        """
        :param str type: Criticality type.
               Possible values are: `MISSION_CRITICAL`, `HIGH`, `MEDIUM`, `LOW`.
        """
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Criticality type.
        Possible values are: `MISSION_CRITICAL`, `HIGH`, `MEDIUM`, `LOW`.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class WorkloadAttributesDeveloperOwner(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadAttributesDeveloperOwner. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadAttributesDeveloperOwner.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadAttributesDeveloperOwner.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 email: str,
                 display_name: Optional[str] = None):
        """
        :param str email: Email address of the contacts.
        :param str display_name: Contact's name.
        """
        pulumi.set(__self__, "email", email)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter
    def email(self) -> str:
        """
        Email address of the contacts.
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        Contact's name.
        """
        return pulumi.get(self, "display_name")


@pulumi.output_type
class WorkloadAttributesEnvironment(dict):
    def __init__(__self__, *,
                 type: str):
        """
        :param str type: Environment type.
               Possible values are: `PRODUCTION`, `STAGING`, `TEST`, `DEVELOPMENT`.
        """
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Environment type.
        Possible values are: `PRODUCTION`, `STAGING`, `TEST`, `DEVELOPMENT`.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class WorkloadAttributesOperatorOwner(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadAttributesOperatorOwner. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadAttributesOperatorOwner.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadAttributesOperatorOwner.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 email: str,
                 display_name: Optional[str] = None):
        """
        :param str email: Email address of the contacts.
        :param str display_name: Contact's name.
        """
        pulumi.set(__self__, "email", email)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter
    def email(self) -> str:
        """
        Email address of the contacts.
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        Contact's name.
        """
        return pulumi.get(self, "display_name")


@pulumi.output_type
class WorkloadWorkloadProperty(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "gcpProject":
            suggest = "gcp_project"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadWorkloadProperty. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadWorkloadProperty.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadWorkloadProperty.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 gcp_project: Optional[str] = None,
                 location: Optional[str] = None,
                 zone: Optional[str] = None):
        """
        :param str gcp_project: (Output)
               Output only. The service project identifier that the underlying cloud resource resides in. Empty for non cloud resources.
        :param str location: Part of `parent`.  Full resource name of a parent Application. Example: projects/{HOST_PROJECT_ID}/locations/{LOCATION}/applications/{APPLICATION_ID}
        :param str zone: (Output)
               Output only. The location that the underlying compute resource resides in if it is zonal (e.g us-west1-a).
        """
        if gcp_project is not None:
            pulumi.set(__self__, "gcp_project", gcp_project)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="gcpProject")
    def gcp_project(self) -> Optional[str]:
        """
        (Output)
        Output only. The service project identifier that the underlying cloud resource resides in. Empty for non cloud resources.
        """
        return pulumi.get(self, "gcp_project")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        """
        Part of `parent`.  Full resource name of a parent Application. Example: projects/{HOST_PROJECT_ID}/locations/{LOCATION}/applications/{APPLICATION_ID}
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def zone(self) -> Optional[str]:
        """
        (Output)
        Output only. The location that the underlying compute resource resides in if it is zonal (e.g us-west1-a).
        """
        return pulumi.get(self, "zone")


@pulumi.output_type
class WorkloadWorkloadReference(dict):
    def __init__(__self__, *,
                 uri: Optional[str] = None):
        """
        :param str uri: (Output)
               Output only. The underlying compute resource uri.
        """
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        """
        (Output)
        Output only. The underlying compute resource uri.
        """
        return pulumi.get(self, "uri")


@pulumi.output_type
class GetDiscoveredServiceServicePropertyResult(dict):
    def __init__(__self__, *,
                 gcp_project: str,
                 location: str,
                 zone: str):
        """
        :param str gcp_project: The service project identifier that the underlying cloud resource resides in.
        :param str location: The location of the discovered service.
        :param str zone: The location that the underlying resource resides in if it is zonal.
        """
        pulumi.set(__self__, "gcp_project", gcp_project)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="gcpProject")
    def gcp_project(self) -> str:
        """
        The service project identifier that the underlying cloud resource resides in.
        """
        return pulumi.get(self, "gcp_project")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The location of the discovered service.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def zone(self) -> str:
        """
        The location that the underlying resource resides in if it is zonal.
        """
        return pulumi.get(self, "zone")


@pulumi.output_type
class GetDiscoveredServiceServiceReferenceResult(dict):
    def __init__(__self__, *,
                 path: str,
                 uri: str):
        """
        :param str path: Additional path under the resource URI.
        :param str uri: The underlying resource URI.
        """
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Additional path under the resource URI.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def uri(self) -> str:
        """
        The underlying resource URI.
        """
        return pulumi.get(self, "uri")


@pulumi.output_type
class GetDiscoveredWorkloadWorkloadPropertyResult(dict):
    def __init__(__self__, *,
                 gcp_project: str,
                 location: str,
                 zone: str):
        """
        :param str gcp_project: The service project identifier that the underlying cloud resource resides in.
        :param str location: The location of the discovered workload.
        :param str zone: The location that the underlying resource resides in if it is zonal.
        """
        pulumi.set(__self__, "gcp_project", gcp_project)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="gcpProject")
    def gcp_project(self) -> str:
        """
        The service project identifier that the underlying cloud resource resides in.
        """
        return pulumi.get(self, "gcp_project")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        The location of the discovered workload.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def zone(self) -> str:
        """
        The location that the underlying resource resides in if it is zonal.
        """
        return pulumi.get(self, "zone")


@pulumi.output_type
class GetDiscoveredWorkloadWorkloadReferenceResult(dict):
    def __init__(__self__, *,
                 uri: str):
        """
        :param str uri: The underlying resource URI.
        """
        pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def uri(self) -> str:
        """
        The underlying resource URI.
        """
        return pulumi.get(self, "uri")


